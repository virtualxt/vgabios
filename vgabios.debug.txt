00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 186
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0103              jmp vgabios_init_func
00134 001E                                      .org 0x1e
00135 001E                        49            .ascii "IBM"
00136 0021                        00            .byte 0x00
00137                       00000022            vgabios_name:
00138 0022                        50            .ascii "Plex86/Bochs VGABios"
00139 0036                        20            .ascii " "
00140 0037                        00            .byte 0x00
00141                       00000038            vgabios_version:
00142 0038                        63            .ascii "current-cvs"
00143 0043                        20            .ascii " "
00144                       00000044            vgabios_date:
00145 0044                        31            .ascii "14 Jun 2023"
00146 004F                        0A            .byte 0x0a,0x0d
00147 0051                        00            .byte 0x00
00148                       00000052            vgabios_copyright:
00149 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00150 007B                        0A            .byte 0x0a,0x0d
00151 007D                        00            .byte 0x00
00152                       0000007E            vgabios_license:
00153 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00154 00AE                        0A            .byte 0x0a,0x0d
00155 00B0                        0A            .byte 0x0a,0x0d
00156 00B2                        00            .byte 0x00
00157                       000000B3            vgabios_website:
00158 00B3                        50            .ascii "Please visit :"
00159 00C1                        0A            .byte 0x0a,0x0d
00160                                           ;;.ascii " . http://www.plex86.org"
00161                                           ;;.byte 0x0a,0x0d
00162 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00163 00E2                        0A            .byte 0x0a,0x0d
00164 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00165 0104                        0A            .byte 0x0a,0x0d
00166 0106                        0A            .byte 0x0a,0x0d
00167 0108                        00            .byte 0x00
00168                                           ;; ============================================================================================
00169                                           ;;
00170                                           ;; Init Entry point
00171                                           ;;
00172                                           ;; ============================================================================================
00173                       00000109            vgabios_init_func:
00174                                           ;; init vga card
00175 0109           E8         341E              call init_vga_card
00176                                           ;; init basic bios vars
00177 010C           E8         347A              call init_bios_area
00178                                           ;; set int10 vect
00179                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010F           1E                           push ds
 +a   0110           31C0                         xor ax, ax
 +a   0112           8ED8                         mov ds, ax
 +a   0114           B8                   012D    mov ax,  #vgabios_int10_handler
 +a   0117           A3         0040              mov 0x10*4, ax
 +a   011A           B8                   C000    mov ax,  #0xC000
 +a   011D           A3         0042              mov 0x10*4+2, ax
 +a   0120           1F                           pop ds
00180                                           ;; display splash screen
00181 0121           E8         34B9              call _display_splash_screen
00182                                           ;; init video mode and clear the screen
00183 0124           B8                   0003    mov ax,#0x0003
00184 0127           CD                     10    int #0x10
00185                                           ;; show info
00186 0129           E8         34B2              call _display_info
00187 012C           CB                           retf
00188                                           ! 130 endasm
00189                                           !BCC_ENDASM
00190                                           ! 131 #asm
00191                                           !BCC_ASM
00192                       0000012D            vgabios_int10_handler:
00193 012D           9C                           pushf
00194 012E           06                           push es
00195 012F           1E                           push ds
00196 0130           60                           pusha
00197 0131           BB                   C000    mov bx, #0xc000
00198 0134           8EDB                         mov ds, bx
00199 0136           E8         34EA              call _int10_debugmsg
00200 0139           61                           popa
00201 013A           1F                           pop ds
00202 013B           07                           pop es
00203 013C           80FC                   0F    cmp ah, #0x0f
00204 013F           75           05              jne int10_test_1A
00205 0141           E8         60FB              call biosfn_get_video_mode
00206 0144           EB           7C              jmp int10_end
00207                       00000146            int10_test_1A:
00208 0146           80FC                   1A    cmp ah, #0x1a
00209 0149           75           05              jne int10_test_0B
00210 014B           E8         6CA1              call biosfn_group_1A
00211 014E           EB           72              jmp int10_end
00212                       00000150            int10_test_0B:
00213 0150           80FC                   0B    cmp ah, #0x0b
00214 0153           75           05              jne int10_test_1103
00215 0155           E8         57EC              call biosfn_group_0B
00216 0158           EB           68              jmp int10_end
00217                       0000015A            int10_test_1103:
00218 015A           3D                   1103    cmp ax, #0x1103
00219 015D           75           05              jne int10_test_12
00220 015F           E8         67DC              call biosfn_set_text_block_specifier
00221 0162           EB           5E              jmp int10_end
00222                       00000164            int10_test_12:
00223 0164           80FC                   12    cmp ah, #0x12
00224 0167           75           3C              jne int10_test_101B
00225 0169           80FB                   10    cmp bl, #0x10
00226 016C           75           05              jne int10_test_BL30
00227 016E           E8         6A5B              call biosfn_get_ega_info
00228 0171           EB           4F              jmp int10_end
00229                       00000173            int10_test_BL30:
00230 0173           80FB                   30    cmp bl, #0x30
00231 0176           75           05              jne int10_test_BL31
00232 0178           E8         6A7C              call biosfn_select_vert_res
00233 017B           EB           45              jmp int10_end
00234                       0000017D            int10_test_BL31:
00235 017D           80FB                   31    cmp bl, #0x31
00236 0180           75           05              jne int10_test_BL32
00237 0182           E8         6AFB              call biosfn_enable_default_palette_loading
00238 0185           EB           3B              jmp int10_end
00239                       00000187            int10_test_BL32:
00240 0187           80FB                   32    cmp bl, #0x32
00241 018A           75           05              jne int10_test_BL33
00242 018C           E8         6B13              call biosfn_enable_video_addressing
00243 018F           EB           31              jmp int10_end
00244                       00000191            int10_test_BL33:
00245 0191           80FB                   33    cmp bl, #0x33
00246 0194           75           05              jne int10_test_BL34
00247 0196           E8         6B27              call biosfn_enable_grayscale_summing
00248 0199           EB           27              jmp int10_end
00249                       0000019B            int10_test_BL34:
00250 019B           80FB                   34    cmp bl, #0x34
00251 019E           75           14              jne int10_normal
00252 01A0           E8         6B41              call biosfn_enable_cursor_emulation
00253 01A3           EB           1D              jmp int10_end
00254                       000001A5            int10_test_101B:
00255 01A5           3D                   101B    cmp ax, #0x101b
00256 01A8           74           0A              je int10_normal
00257 01AA           80FC                   10    cmp ah, #0x10
00258 01AD           75           05              jne int10_normal
00259 01AF           E8         60B4              call biosfn_group_10
00260 01B2           EB           0E              jmp int10_end
00261                       000001B4            int10_normal:
00262 01B4           06                           push es
00263 01B5           1E                           push ds
00264 01B6           60                           pusha
00265                                           ;; We have to set ds to access the right data segment
00266 01B7           BB                   C000    mov bx, #0xc000
00267 01BA           8EDB                         mov ds, bx
00268 01BC           E8         3495              call _int10_func
00269 01BF           61                           popa
00270 01C0           1F                           pop ds
00271 01C1           07                           pop es
00272                       000001C2            int10_end:
00273 01C2           9D                           popf
00274 01C3           CF                           iret
00275                                           ! 215 endasm
00276                                           !BCC_ENDASM
00277                                           ! 216 typedef struct
00278                                           ! 217 {Bit8u svgamode;
00279                                           !BCC_EOS
00280                                           ! 218  Bit8u class;
00281                                           !BCC_EOS
00282                                           ! 219  Bit8u memmodel;
00283                                           !BCC_EOS
00284                                           ! 220  Bit8u pixbits;
00285                                           !BCC_EOS
00286                                           ! 221  Bit16u sstart;
00287                                           !BCC_EOS
00288                                           ! 222  Bit8u pelmask;
00289                                           !BCC_EOS
00290                                           ! 223  Bit8u dacmodel;
00291                                           !BCC_EOS
00292                                           ! 224 } VGAMODES;
00293                                           !BCC_EOS
00294                                           ! 225 static VGAMODES vga_modes[15 +1]=
00295                                           ! 226 {
00296                                           
00297                       000001C4            _vga_modes:
00298                                           ! 227  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00299 01C4                        00            .byte	0
00300 01C5                        00            .byte	0
00301 01C6                        00            .byte	0
00302 01C7                        04            .byte	4
00303 01C8                      B800            .word	$B800
00304 01CA                        FF            .byte	$FF
00305 01CB                        02            .byte	2
00306                                           ! 228  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00307 01CC                        01            .byte	1
00308 01CD                        00            .byte	0
00309 01CE                        00            .byte	0
00310 01CF                        04            .byte	4
00311 01D0                      B800            .word	$B800
00312 01D2                        FF            .byte	$FF
00313 01D3                        02            .byte	2
00314                                           ! 229  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00315 01D4                        02            .byte	2
00316 01D5                        00            .byte	0
00317 01D6                        00            .byte	0
00318 01D7                        04            .byte	4
00319 01D8                      B800            .word	$B800
00320 01DA                        FF            .byte	$FF
00321 01DB                        02            .byte	2
00322                                           ! 230  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00323 01DC                        03            .byte	3
00324 01DD                        00            .byte	0
00325 01DE                        00            .byte	0
00326 01DF                        04            .byte	4
00327 01E0                      B800            .word	$B800
00328 01E2                        FF            .byte	$FF
00329 01E3                        02            .byte	2
00330                                           ! 231  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00331 01E4                        04            .byte	4
00332 01E5                        01            .byte	1
00333 01E6                        02            .byte	2
00334 01E7                        02            .byte	2
00335 01E8                      B800            .word	$B800
00336 01EA                        FF            .byte	$FF
00337 01EB                        01            .byte	1
00338                                           ! 232  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00339 01EC                        05            .byte	5
00340 01ED                        01            .byte	1
00341 01EE                        02            .byte	2
00342 01EF                        02            .byte	2
00343 01F0                      B800            .word	$B800
00344 01F2                        FF            .byte	$FF
00345 01F3                        01            .byte	1
00346                                           ! 233  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00347 01F4                        06            .byte	6
00348 01F5                        01            .byte	1
00349 01F6                        02            .byte	2
00350 01F7                        01            .byte	1
00351 01F8                      B800            .word	$B800
00352 01FA                        FF            .byte	$FF
00353 01FB                        01            .byte	1
00354                                           ! 234  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00355 01FC                        07            .byte	7
00356 01FD                        00            .byte	0
00357 01FE                        01            .byte	1
00358 01FF                        04            .byte	4
00359 0200                      B000            .word	$B000
00360 0202                        FF            .byte	$FF
00361 0203                        00            .byte	0
00362                                           ! 235  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00363 0204                        0D            .byte	$D
00364 0205                        01            .byte	1
00365 0206                        04            .byte	4
00366 0207                        04            .byte	4
00367 0208                      A000            .word	$A000
00368 020A                        FF            .byte	$FF
00369 020B                        01            .byte	1
00370                                           ! 236  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00371 020C                        0E            .byte	$E
00372 020D                        01            .byte	1
00373 020E                        04            .byte	4
00374 020F                        04            .byte	4
00375 0210                      A000            .word	$A000
00376 0212                        FF            .byte	$FF
00377 0213                        01            .byte	1
00378                                           ! 237  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00379 0214                        0F            .byte	$F
00380 0215                        01            .byte	1
00381 0216                        03            .byte	3
00382 0217                        01            .byte	1
00383 0218                      A000            .word	$A000
00384 021A                        FF            .byte	$FF
00385 021B                        00            .byte	0
00386                                           ! 238  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00387 021C                        10            .byte	$10
00388 021D                        01            .byte	1
00389 021E                        04            .byte	4
00390 021F                        04            .byte	4
00391 0220                      A000            .word	$A000
00392 0222                        FF            .byte	$FF
00393 0223                        02            .byte	2
00394                                           ! 239  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00395 0224                        11            .byte	$11
00396 0225                        01            .byte	1
00397 0226                        03            .byte	3
00398 0227                        01            .byte	1
00399 0228                      A000            .word	$A000
00400 022A                        FF            .byte	$FF
00401 022B                        02            .byte	2
00402                                           ! 240  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00403 022C                        12            .byte	$12
00404 022D                        01            .byte	1
00405 022E                        04            .byte	4
00406 022F                        04            .byte	4
00407 0230                      A000            .word	$A000
00408 0232                        FF            .byte	$FF
00409 0233                        02            .byte	2
00410                                           ! 241  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00411 0234                        13            .byte	$13
00412 0235                        01            .byte	1
00413 0236                        05            .byte	5
00414 0237                        08            .byte	8
00415 0238                      A000            .word	$A000
00416 023A                        FF            .byte	$FF
00417 023B                        03            .byte	3
00418                                           ! 242  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00419 023C                        6A            .byte	$6A
00420 023D                        01            .byte	1
00421 023E                        04            .byte	4
00422 023F                        04            .byte	4
00423 0240                      A000            .word	$A000
00424 0242                        FF            .byte	$FF
00425 0243                        02            .byte	2
00426                                           ! 243 };
00427                                           !BCC_EOS
00428                                           ! 244 static Bit8u line_to_vpti[15 +1]={
00429                       00000244            _line_to_vpti:
00430                                           ! 245     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00431 0244                        17            .byte	$17
00432 0245                        17            .byte	$17
00433 0246                        18            .byte	$18
00434 0247                        18            .byte	$18
00435 0248                        04            .byte	4
00436 0249                        05            .byte	5
00437 024A                        06            .byte	6
00438 024B                        07            .byte	7
00439                                           ! 246     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00440 024C                        0D            .byte	$D
00441 024D                        0E            .byte	$E
00442 024E                        11            .byte	$11
00443 024F                        12            .byte	$12
00444 0250                        1A            .byte	$1A
00445 0251                        1B            .byte	$1B
00446 0252                        1C            .byte	$1C
00447 0253                        1D            .byte	$1D
00448                                           ! 247 };
00449                                           !BCC_EOS
00450                                           ! 248 static Bit8u dac_regs[3 +1]=
00451                                           ! 249 {0x3f,0x3f,0x3f,0xff};
00452                       00000254            _dac_regs:
00453 0254                        3F            .byte	$3F
00454 0255                        3F            .byte	$3F
00455 0256                        3F            .byte	$3F
00456 0257                        FF            .byte	$FF
00457                                           !BCC_EOS
00458                                           ! 250 typedef struct {
00459                                           ! 251     Bit8u twidth;
00460                                           !BCC_EOS
00461                                           ! 252     Bit8u theightm1;
00462                                           !BCC_EOS
00463                                           ! 253     Bit8u cheight;
00464                                           !BCC_EOS
00465                                           ! 254     Bit8u slength_l;
00466                                           !BCC_EOS
00467                                           ! 255     Bit8u slength_h;
00468                                           !BCC_EOS
00469                                           ! 256     Bit8u sequ_regs[4];
00470                                           !BCC_EOS
00471                                           ! 257     Bit8u miscreg;
00472                                           !BCC_EOS
00473                                           ! 258     Bit8u crtc_regs[25];
00474                                           !BCC_EOS
00475                                           ! 259     Bit8u actl_regs[20];
00476                                           !BCC_EOS
00477                                           ! 260   
00478                                           ! 260   Bit8u grdc_regs[9];
00479                                           !BCC_EOS
00480                                           ! 261 } VideoParamTableEntry;
00481                                           !BCC_EOS
00482                                           ! 262 static VideoParamTableEntry video_param_table[30] = {
00483                       00000258            _video_param_table:
00484                                           ! 263 {
00485                                           ! 264  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00486 0258                        00            .byte	0
00487 0259                        00            .byte	0
00488 025A                        00            .byte	0
00489 025B                        00            .byte	0
00490 025C                        00            .byte	0
00491 025D                        00            .byte	0
00492 025E                        00            .byte	0
00493 025F                        00            .byte	0
00494                                           ! 265  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00495 0260                        00            .byte	0
00496 0261                        00            .byte	0
00497 0262                        00            .byte	0
00498 0263                        00            .byte	0
00499 0264                        00            .byte	0
00500 0265                        00            .byte	0
00501 0266                        00            .byte	0
00502 0267                        00            .byte	0
00503                                           ! 266  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00504 0268                        00            .byte	0
00505 0269                        00            .byte	0
00506 026A                        00            .byte	0
00507 026B                        00            .byte	0
00508 026C                        00            .byte	0
00509 026D                        00            .byte	0
00510 026E                        00            .byte	0
00511 026F                        00            .byte	0
00512                                           ! 267  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00513 0270                        00            .byte	0
00514 0271                        00            .byte	0
00515 0272                        00            .byte	0
00516 0273                        00            .byte	0
00517 0274                        00            .byte	0
00518 0275                        00            .byte	0
00519 0276                        00            .byte	0
00520 0277                        00            .byte	0
00521                                           ! 268  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00522 0278                        00            .byte	0
00523 0279                        00            .byte	0
00524 027A                        00            .byte	0
00525 027B                        00            .byte	0
00526 027C                        00            .byte	0
00527 027D                        00            .byte	0
00528 027E                        00            .byte	0
00529 027F                        00            .byte	0
00530                                           ! 269  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00531 0280                        00            .byte	0
00532 0281                        00            .byte	0
00533 0282                        00            .byte	0
00534 0283                        00            .byte	0
00535 0284                        00            .byte	0
00536 0285                        00            .byte	0
00537 0286                        00            .byte	0
00538 0287                        00            .byte	0
00539                                           ! 270  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00540 0288                        00            .byte	0
00541 0289                        00            .byte	0
00542 028A                        00            .byte	0
00543 028B                        00            .byte	0
00544 028C                        00            .byte	0
00545 028D                        00            .byte	0
00546 028E                        00            .byte	0
00547 028F                        00            .byte	0
00548                                           ! 271  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00549 0290                        00            .byte	0
00550 0291                        00            .byte	0
00551 0292                        00            .byte	0
00552 0293                        00            .byte	0
00553 0294                        00            .byte	0
00554 0295                        00            .byte	0
00555 0296                        00            .byte	0
00556 0297                        00            .byte	0
00557                                           ! 272 },
00558                                           ! 273 {
00559                                           ! 274  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00560 0298                        00            .byte	0
00561 0299                        00            .byte	0
00562 029A                        00            .byte	0
00563 029B                        00            .byte	0
00564 029C                        00            .byte	0
00565 029D                        00            .byte	0
00566 029E                        00            .byte	0
00567 029F                        00            .byte	0
00568                                           ! 275  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00569 02A0                        00            .byte	0
00570 02A1                        00            .byte	0
00571 02A2                        00            .byte	0
00572 02A3                        00            .byte	0
00573 02A4                        00            .byte	0
00574 02A5                        00            .byte	0
00575 02A6                        00            .byte	0
00576 02A7                        00            .byte	0
00577                                           ! 276  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00578 02A8                        00            .byte	0
00579 02A9                        00            .byte	0
00580 02AA                        00            .byte	0
00581 02AB                        00            .byte	0
00582 02AC                        00            .byte	0
00583 02AD                        00            .byte	0
00584 02AE                        00            .byte	0
00585 02AF                        00            .byte	0
00586                                           ! 277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00587 02B0                        00            .byte	0
00588 02B1                        00            .byte	0
00589 02B2                        00            .byte	0
00590 02B3                        00            .byte	0
00591 02B4                        00            .byte	0
00592 02B5                        00            .byte	0
00593 02B6                        00            .byte	0
00594 02B7                        00            .byte	0
00595                                           ! 278  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00596 02B8                        00            .byte	0
00597 02B9                        00            .byte	0
00598 02BA                        00            .byte	0
00599 02BB                        00            .byte	0
00600 02BC                        00            .byte	0
00601 02BD                        00            .byte	0
00602 02BE                        00            .byte	0
00603 02BF                        00            .byte	0
00604                                           ! 279  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00605 02C0                        00            .byte	0
00606 02C1                        00            .byte	0
00607 02C2                        00            .byte	0
00608 02C3                        00            .byte	0
00609 02C4                        00            .byte	0
00610 02C5                        00            .byte	0
00611 02C6                        00            .byte	0
00612 02C7                        00            .byte	0
00613                                           ! 280  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00614 02C8                        00            .byte	0
00615 02C9                        00            .byte	0
00616 02CA                        00            .byte	0
00617 02CB                        00            .byte	0
00618 02CC                        00            .byte	0
00619 02CD                        00            .byte	0
00620 02CE                        00            .byte	0
00621 02CF                        00            .byte	0
00622                                           ! 281  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00623 02D0                        00            .byte	0
00624 02D1                        00            .byte	0
00625 02D2                        00            .byte	0
00626 02D3                        00            .byte	0
00627 02D4                        00            .byte	0
00628 02D5                        00            .byte	0
00629 02D6                        00            .byte	0
00630 02D7                        00            .byte	0
00631                                           ! 282 },
00632                                           ! 283 {
00633                                           ! 284  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00634 02D8                        00            .byte	0
00635 02D9                        00            .byte	0
00636 02DA                        00            .byte	0
00637 02DB                        00            .byte	0
00638 02DC                        00            .byte	0
00639 02DD                        00            .byte	0
00640 02DE                        00            .byte	0
00641 02DF                        00            .byte	0
00642                                           ! 285  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00643 02E0                        00            .byte	0
00644 02E1                        00            .byte	0
00645 02E2                        00            .byte	0
00646 02E3                        00            .byte	0
00647 02E4                        00            .byte	0
00648 02E5                        00            .byte	0
00649 02E6                        00            .byte	0
00650 02E7                        00            .byte	0
00651                                           ! 286  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00652 02E8                        00            .byte	0
00653 02E9                        00            .byte	0
00654 02EA                        00            .byte	0
00655 02EB                        00            .byte	0
00656 02EC                        00            .byte	0
00657 02ED                        00            .byte	0
00658 02EE                        00            .byte	0
00659 02EF                        00            .byte	0
00660                                           ! 287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00661 02F0                        00            .byte	0
00662 02F1                        00            .byte	0
00663 02F2                        00            .byte	0
00664 02F3                        00            .byte	0
00665 02F4                        00            .byte	0
00666 02F5                        00            .byte	0
00667 02F6                        00            .byte	0
00668 02F7                        00            .byte	0
00669                                           ! 288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00670 02F8                        00            .byte	0
00671 02F9                        00            .byte	0
00672 02FA                        00            .byte	0
00673 02FB                        00            .byte	0
00674 02FC                        00            .byte	0
00675 02FD                        00            .byte	0
00676 02FE                        00            .byte	0
00677 02FF                        00            .byte	0
00678                                           ! 289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00679 0300                        00            .byte	0
00680 0301                        00            .byte	0
00681 0302                        00            .byte	0
00682 0303                        00            .byte	0
00683 0304                        00            .byte	0
00684 0305                        00            .byte	0
00685 0306                        00            .byte	0
00686 0307                        00            .byte	0
00687                                           ! 290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00688 0308                        00            .byte	0
00689 0309                        00            .byte	0
00690 030A                        00            .byte	0
00691 030B                        00            .byte	0
00692 030C                        00            .byte	0
00693 030D                        00            .byte	0
00694 030E                        00            .byte	0
00695 030F                        00            .byte	0
00696                                           ! 291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00697 0310                        00            .byte	0
00698 0311                        00            .byte	0
00699 0312                        00            .byte	0
00700 0313                        00            .byte	0
00701 0314                        00            .byte	0
00702 0315                        00            .byte	0
00703 0316                        00            .byte	0
00704 0317                        00            .byte	0
00705                                           ! 292 },
00706                                           ! 293 {
00707                                           ! 294  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00708 0318                        00            .byte	0
00709 0319                        00            .byte	0
00710 031A                        00            .byte	0
00711 031B                        00            .byte	0
00712 031C                        00            .byte	0
00713 031D                        00            .byte	0
00714 031E                        00            .byte	0
00715 031F                        00            .byte	0
00716                                           ! 295  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00717 0320                        00            .byte	0
00718 0321                        00            .byte	0
00719 0322                        00            .byte	0
00720 0323                        00            .byte	0
00721 0324                        00            .byte	0
00722 0325                        00            .byte	0
00723 0326                        00            .byte	0
00724 0327                        00            .byte	0
00725                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00726 0328                        00            .byte	0
00727 0329                        00            .byte	0
00728 032A                        00            .byte	0
00729 032B                        00            .byte	0
00730 032C                        00            .byte	0
00731 032D                        00            .byte	0
00732 032E                        00            .byte	0
00733 032F                        00            .byte	0
00734                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00735 0330                        00            .byte	0
00736 0331                        00            .byte	0
00737 0332                        00            .byte	0
00738 0333                        00            .byte	0
00739 0334                        00            .byte	0
00740 0335                        00            .byte	0
00741 0336                        00            .byte	0
00742 0337                        00            .byte	0
00743                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00744 0338                        00            .byte	0
00745 0339                        00            .byte	0
00746 033A                        00            .byte	0
00747 033B                        00            .byte	0
00748 033C                        00            .byte	0
00749 033D                        00            .byte	0
00750 033E                        00            .byte	0
00751 033F                        00            .byte	0
00752                                           ! 299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00753 0340                        00            .byte	0
00754 0341                        00            .byte	0
00755 0342                        00            .byte	0
00756 0343                        00            .byte	0
00757 0344                        00            .byte	0
00758 0345                        00            .byte	0
00759 0346                        00            .byte	0
00760 0347                        00            .byte	0
00761                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00762 0348                        00            .byte	0
00763 0349                        00            .byte	0
00764 034A                        00            .byte	0
00765 034B                        00            .byte	0
00766 034C                        00            .byte	0
00767 034D                        00            .byte	0
00768 034E                        00            .byte	0
00769 034F                        00            .byte	0
00770                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00771 0350                        00            .byte	0
00772 0351                        00            .byte	0
00773 0352                        00            .byte	0
00774 0353                        00            .byte	0
00775 0354                        00            .byte	0
00776 0355                        00            .byte	0
00777 0356                        00            .byte	0
00778 0357                        00            .byte	0
00779                                           ! 302 },
00780                                           ! 303 {
00781                                           ! 304  40, 24, 8, 0x00, 0x08,
00782 0358                        28            .byte	$28
00783 0359                        18            .byte	$18
00784 035A                        08            .byte	8
00785 035B                        00            .byte	0
00786 035C                        08            .byte	8
00787                                           ! 305  0x09, 0x03, 0x00, 0x02,
00788 035D                        09            .byte	9
00789 035E                        03            .byte	3
00790 035F                        00            .byte	0
00791 0360                        02            .byte	2
00792                                           ! 306  0x63,
00793 0361                        63            .byte	$63
00794                                           ! 307  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00795 0362                        2D            .byte	$2D
00796 0363                        27            .byte	$27
00797 0364                        28            .byte	$28
00798 0365                        90            .byte	$90
00799 0366                        2B            .byte	$2B
00800 0367                        80            .byte	$80
00801 0368                        BF            .byte	$BF
00802 0369                        1F            .byte	$1F
00803                                           ! 308  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00804 036A                        00            .byte	0
00805 036B                        C1            .byte	$C1
00806 036C                        00            .byte	0
00807 036D                        00            .byte	0
00808 036E                        00            .byte	0
00809 036F                        00            .byte	0
00810 0370                        00            .byte	0
00811 0371                        00            .byte	0
00812                                           ! 309  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00813 0372                        9C            .byte	$9C
00814 0373                        8E            .byte	$8E
00815 0374                        8F            .byte	$8F
00816 0375                        14            .byte	$14
00817 0376                        00            .byte	0
00818 0377                        96            .byte	$96
00819 0378                        B9            .byte	$B9
00820 0379                        A2            .byte	$A2
00821                                           ! 310  0xff,
00822 037A                        FF            .byte	$FF
00823                                           ! 311  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00824 037B                        00            .byte	0
00825 037C                        13            .byte	$13
00826 037D                        15            .byte	$15
00827 037E                        17            .byte	$17
00828 037F                        02            .byte	2
00829 0380                        04            .byte	4
00830 0381                        06            .byte	6
00831 0382                        07            .byte	7
00832                                           ! 312  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00833 0383                        10            .byte	$10
00834 0384                        11            .byte	$11
00835 0385                        12            .byte	$12
00836 0386                        13            .byte	$13
00837 0387                        14            .byte	$14
00838 0388                        15            .byte	$15
00839 0389                        16            .byte	$16
00840 038A                        17            .byte	$17
00841                                           ! 313  0x01, 0x00, 0x03, 0x00,
00842 038B                        01            .byte	1
00843 038C                        00            .byte	0
00844 038D                        03            .byte	3
00845 038E                        00            .byte	0
00846                                           ! 314  0x00, 0x00, 0x00, 0x00, 
00847 038F                        00            .byte	0
00848 0390                        00            .byte	0
00849 0391                        00            .byte	0
00850 0392                        00            .byte	0
00851                                           ! 314 0x00, 0x30, 0x0f, 0x0f, 0xff,
00852 0393                        00            .byte	0
00853 0394                        30            .byte	$30
00854 0395                        0F            .byte	$F
00855 0396                        0F            .byte	$F
00856 0397                        FF            .byte	$FF
00857                                           ! 315 },
00858                                           ! 316 {
00859                                           ! 317  40, 24, 8, 0x00, 0x08,
00860 0398                        28            .byte	$28
00861 0399                        18            .byte	$18
00862 039A                        08            .byte	8
00863 039B                        00            .byte	0
00864 039C                        08            .byte	8
00865                                           ! 318  0x09, 0x03, 0x00, 0x02,
00866 039D                        09            .byte	9
00867 039E                        03            .byte	3
00868 039F                        00            .byte	0
00869 03A0                        02            .byte	2
00870                                           ! 319  0x63,
00871 03A1                        63            .byte	$63
00872                                           ! 320  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00873 03A2                        2D            .byte	$2D
00874 03A3                        27            .byte	$27
00875 03A4                        28            .byte	$28
00876 03A5                        90            .byte	$90
00877 03A6                        2B            .byte	$2B
00878 03A7                        80            .byte	$80
00879 03A8                        BF            .byte	$BF
00880 03A9                        1F            .byte	$1F
00881                                           ! 321  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 03AA                        00            .byte	0
00883 03AB                        C1            .byte	$C1
00884 03AC                        00            .byte	0
00885 03AD                        00            .byte	0
00886 03AE                        00            .byte	0
00887 03AF                        00            .byte	0
00888 03B0                        00            .byte	0
00889 03B1                        00            .byte	0
00890                                           ! 322  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00891 03B2                        9C            .byte	$9C
00892 03B3                        8E            .byte	$8E
00893 03B4                        8F            .byte	$8F
00894 03B5                        14            .byte	$14
00895 03B6                        00            .byte	0
00896 03B7                        96            .byte	$96
00897 03B8                        B9            .byte	$B9
00898 03B9                        A2            .byte	$A2
00899                                           ! 323  0xff,
00900 03BA                        FF            .byte	$FF
00901                                           ! 324  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00902 03BB                        00            .byte	0
00903 03BC                        13            .byte	$13
00904 03BD                        15            .byte	$15
00905 03BE                        17            .byte	$17
00906 03BF                        02            .byte	2
00907 03C0                        04            .byte	4
00908 03C1                        06            .byte	6
00909 03C2                        07            .byte	7
00910                                           ! 325  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00911 03C3                        10            .byte	$10
00912 03C4                        11            .byte	$11
00913 03C5                        12            .byte	$12
00914 03C6                        13            .byte	$13
00915 03C7                        14            .byte	$14
00916 03C8                        15            .byte	$15
00917 03C9                        16            .byte	$16
00918 03CA                        17            .byte	$17
00919                                           ! 326  0x01, 0x00, 0x03, 0x00,
00920 03CB                        01            .byte	1
00921 03CC                        00            .byte	0
00922 03CD                        03            .byte	3
00923 03CE                        00            .byte	0
00924                                           ! 327  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00925 03CF                        00            .byte	0
00926 03D0                        00            .byte	0
00927 03D1                        00            .byte	0
00928 03D2                        00            .byte	0
00929 03D3                        00            .byte	0
00930 03D4                        30            .byte	$30
00931 03D5                        0F            .byte	$F
00932 03D6                        0F            .byte	$F
00933 03D7                        FF            .byte	$FF
00934                                           ! 328 },
00935                                           ! 329 {
00936                                           ! 330  80, 24, 8, 0x00, 0x10,
00937 03D8                        50            .byte	$50
00938 03D9                        18            .byte	$18
00939 03DA                        08            .byte	8
00940 03DB                        00            .byte	0
00941 03DC                        10            .byte	$10
00942                                           ! 331  0x01, 0x01, 0x00, 0x06,
00943 03DD                        01            .byte	1
00944 03DE                        01            .byte	1
00945 03DF                        00            .byte	0
00946 03E0                        06            .byte	6
00947                                           ! 332  0x63,
00948 03E1                        63            .byte	$63
00949                                           ! 333  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00950 03E2                        5F            .byte	$5F
00951 03E3                        4F            .byte	$4F
00952 03E4                        50            .byte	$50
00953 03E5                        82            .byte	$82
00954 03E6                        54            .byte	$54
00955 03E7                        80            .byte	$80
00956 03E8                        BF            .byte	$BF
00957 03E9                        1F            .byte	$1F
00958                                           ! 334  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00959 03EA                        00            .byte	0
00960 03EB                        C1            .byte	$C1
00961 03EC                        00            .byte	0
00962 03ED                        00            .byte	0
00963 03EE                        00            .byte	0
00964 03EF                        00            .byte	0
00965 03F0                        00            .byte	0
00966 03F1                        00            .byte	0
00967                                           ! 335  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
00968 03F2                        9C            .byte	$9C
00969 03F3                        8E            .byte	$8E
00970 03F4                        8F            .byte	$8F
00971 03F5                        28            .byte	$28
00972 03F6                        00            .byte	0
00973 03F7                        96            .byte	$96
00974 03F8                        B9            .byte	$B9
00975 03F9                        C2            .byte	$C2
00976                                           ! 336  0xff,
00977 03FA                        FF            .byte	$FF
00978                                           ! 337  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00979 03FB                        00            .byte	0
00980 03FC                        17            .byte	$17
00981 03FD                        17            .byte	$17
00982 03FE                        17            .byte	$17
00983 03FF                        17            .byte	$17
00984 0400                        17            .byte	$17
00985 0401                        17            .byte	$17
00986 0402                        17            .byte	$17
00987                                           ! 338  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
00988 0403                        17            .byte	$17
00989 0404                        17            .byte	$17
00990 0405                        17            .byte	$17
00991 0406                        17            .byte	$17
00992 0407                        17            .byte	$17
00993 0408                        17            .byte	$17
00994 0409                        17            .byte	$17
00995 040A                        17            .byte	$17
00996                                           ! 339  0x01, 0x00, 0x01, 0x00,
00997 040B                        01            .byte	1
00998 040C                        00            .byte	0
00999 040D                        01            .byte	1
01000 040E                        00            .byte	0
01001                                           ! 340  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01002 040F                        00            .byte	0
01003 0410                        00            .byte	0
01004 0411                        00            .byte	0
01005 0412                        00            .byte	0
01006 0413                        00            .byte	0
01007 0414                        00            .byte	0
01008 0415                        0D            .byte	$D
01009 0416                        0F            .byte	$F
01010 0417                        FF            .byte	$FF
01011                                           ! 341 },
01012                                           ! 342 {
01013                                           ! 343  80, 24, 16, 0x00, 0x10,
01014 0418                        50            .byte	$50
01015 0419                        18            .byte	$18
01016 041A                        10            .byte	$10
01017 041B                        00            .byte	0
01018 041C                        10            .byte	$10
01019                                           ! 344  0x00, 0x03, 0x00, 0x02,
01020 041D                        00            .byte	0
01021 041E                        03            .byte	3
01022 041F                        00            .byte	0
01023 0420                        02            .byte	2
01024                                           ! 345  0x66,
01025 0421                        66            .byte	$66
01026                                           ! 346  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01027 0422                        5F            .byte	$5F
01028 0423                        4F            .byte	$4F
01029 0424                        50            .byte	$50
01030 0425                        82            .byte	$82
01031 0426                        55            .byte	$55
01032 0427                        81            .byte	$81
01033 0428                        BF            .byte	$BF
01034 0429                        1F            .byte	$1F
01035                                           ! 347  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01036 042A                        00            .byte	0
01037 042B                        4F            .byte	$4F
01038 042C                        0D            .byte	$D
01039 042D                        0E            .byte	$E
01040 042E                        00            .byte	0
01041 042F                        00            .byte	0
01042 0430                        00            .byte	0
01043 0431                        00            .byte	0
01044                                           ! 348  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01045 0432                        9C            .byte	$9C
01046 0433                        8E            .byte	$8E
01047 0434                        8F            .byte	$8F
01048 0435                        28            .byte	$28
01049 0436                        0F            .byte	$F
01050 0437                        96            .byte	$96
01051 0438                        B9            .byte	$B9
01052 0439                        A3            .byte	$A3
01053                                           ! 349  0xff,
01054 043A                        FF            .byte	$FF
01055                                           ! 350  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01056 043B                        00            .byte	0
01057 043C                        08            .byte	8
01058 043D                        08            .byte	8
01059 043E                        08            .byte	8
01060 043F                        08            .byte	8
01061 0440                        08            .byte	8
01062 0441                        08            .byte	8
01063 0442                        08            .byte	8
01064                                           ! 351  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01065 0443                        10            .byte	$10
01066 0444                        18            .byte	$18
01067 0445                        18            .byte	$18
01068 0446                        18            .byte	$18
01069 0447                        18            .byte	$18
01070 0448                        18            .byte	$18
01071 0449                        18            .byte	$18
01072 044A                        18            .byte	$18
01073                                           ! 352  0x0e, 0x00, 0x0f, 0x08,
01074 044B                        0E            .byte	$E
01075 044C                        00            .byte	0
01076 044D                        0F            .byte	$F
01077 044E                        08            .byte	8
01078                                           ! 353  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01079 044F                        00            .byte	0
01080 0450                        00            .byte	0
01081 0451                        00            .byte	0
01082 0452                        00            .byte	0
01083 0453                        00            .byte	0
01084 0454                        10            .byte	$10
01085 0455                        0A            .byte	$A
01086 0456                        0F            .byte	$F
01087 0457                        FF            .byte	$FF
01088                                           ! 354 },
01089                                           ! 355 {
01090                                           ! 356  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01091 0458                        00            .byte	0
01092 0459                        00            .byte	0
01093 045A                        00            .byte	0
01094 045B                        00            .byte	0
01095 045C                        00            .byte	0
01096 045D                        00            .byte	0
01097 045E                        00            .byte	0
01098 045F                        00            .byte	0
01099                                           ! 357  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01100 0460                        00            .byte	0
01101 0461                        00            .byte	0
01102 0462                        00            .byte	0
01103 0463                        00            .byte	0
01104 0464                        00            .byte	0
01105 0465                        00            .byte	0
01106 0466                        00            .byte	0
01107 0467                        00            .byte	0
01108                                           ! 358  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01109 0468                        00            .byte	0
01110 0469                        00            .byte	0
01111 046A                        00            .byte	0
01112 046B                        00            .byte	0
01113 046C                        00            .byte	0
01114 046D                        00            .byte	0
01115 046E                        00            .byte	0
01116 046F                        00            .byte	0
01117                                           ! 359  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01118 0470                        00            .byte	0
01119 0471                        00            .byte	0
01120 0472                        00            .byte	0
01121 0473                        00            .byte	0
01122 0474                        00            .byte	0
01123 0475                        00            .byte	0
01124 0476                        00            .byte	0
01125 0477                        00            .byte	0
01126                                           ! 360  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01127 0478                        00            .byte	0
01128 0479                        00            .byte	0
01129 047A                        00            .byte	0
01130 047B                        00            .byte	0
01131 047C                        00            .byte	0
01132 047D                        00            .byte	0
01133 047E                        00            .byte	0
01134 047F                        00            .byte	0
01135                                           ! 361  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01136 0480                        00            .byte	0
01137 0481                        00            .byte	0
01138 0482                        00            .byte	0
01139 0483                        00            .byte	0
01140 0484                        00            .byte	0
01141 0485                        00            .byte	0
01142 0486                        00            .byte	0
01143 0487                        00            .byte	0
01144                                           ! 362  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01145 0488                        00            .byte	0
01146 0489                        00            .byte	0
01147 048A                        00            .byte	0
01148 048B                        00            .byte	0
01149 048C                        00            .byte	0
01150 048D                        00            .byte	0
01151 048E                        00            .byte	0
01152 048F                        00            .byte	0
01153                                           ! 363  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01154 0490                        00            .byte	0
01155 0491                        00            .byte	0
01156 0492                        00            .byte	0
01157 0493                        00            .byte	0
01158 0494                        00            .byte	0
01159 0495                        00            .byte	0
01160 0496                        00            .byte	0
01161 0497                        00            .byte	0
01162                                           ! 364 },
01163                                           ! 365 {
01164                                           ! 366  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01165 0498                        00            .byte	0
01166 0499                        00            .byte	0
01167 049A                        00            .byte	0
01168 049B                        00            .byte	0
01169 049C                        00            .byte	0
01170 049D                        00            .byte	0
01171 049E                        00            .byte	0
01172 049F                        00            .byte	0
01173                                           ! 367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01174 04A0                        00            .byte	0
01175 04A1                        00            .byte	0
01176 04A2                        00            .byte	0
01177 04A3                        00            .byte	0
01178 04A4                        00            .byte	0
01179 04A5                        00            .byte	0
01180 04A6                        00            .byte	0
01181 04A7                        00            .byte	0
01182                                           ! 368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01183 04A8                        00            .byte	0
01184 04A9                        00            .byte	0
01185 04AA                        00            .byte	0
01186 04AB                        00            .byte	0
01187 04AC                        00            .byte	0
01188 04AD                        00            .byte	0
01189 04AE                        00            .byte	0
01190 04AF                        00            .byte	0
01191                                           ! 369  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01192 04B0                        00            .byte	0
01193 04B1                        00            .byte	0
01194 04B2                        00            .byte	0
01195 04B3                        00            .byte	0
01196 04B4                        00            .byte	0
01197 04B5                        00            .byte	0
01198 04B6                        00            .byte	0
01199 04B7                        00            .byte	0
01200                                           ! 370  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01201 04B8                        00            .byte	0
01202 04B9                        00            .byte	0
01203 04BA                        00            .byte	0
01204 04BB                        00            .byte	0
01205 04BC                        00            .byte	0
01206 04BD                        00            .byte	0
01207 04BE                        00            .byte	0
01208 04BF                        00            .byte	0
01209                                           ! 371  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01210 04C0                        00            .byte	0
01211 04C1                        00            .byte	0
01212 04C2                        00            .byte	0
01213 04C3                        00            .byte	0
01214 04C4                        00            .byte	0
01215 04C5                        00            .byte	0
01216 04C6                        00            .byte	0
01217 04C7                        00            .byte	0
01218                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01219 04C8                        00            .byte	0
01220 04C9                        00            .byte	0
01221 04CA                        00            .byte	0
01222 04CB                        00            .byte	0
01223 04CC                        00            .byte	0
01224 04CD                        00            .byte	0
01225 04CE                        00            .byte	0
01226 04CF                        00            .byte	0
01227                                           ! 373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01228 04D0                        00            .byte	0
01229 04D1                        00            .byte	0
01230 04D2                        00            .byte	0
01231 04D3                        00            .byte	0
01232 04D4                        00            .byte	0
01233 04D5                        00            .byte	0
01234 04D6                        00            .byte	0
01235 04D7                        00            .byte	0
01236                                           ! 374 },
01237                                           ! 375 {
01238                                           ! 376  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
01239 04D8                        00            .byte	0
01240 04D9                        00            .byte	0
01241 04DA                        00            .byte	0
01242 04DB                        00            .byte	0
01243 04DC                        00            .byte	0
01244 04DD                        00            .byte	0
01245                                           ! 376 00, 0x00,
01246 04DE                        00            .byte	0
01247 04DF                        00            .byte	0
01248                                           ! 377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01249 04E0                        00            .byte	0
01250 04E1                        00            .byte	0
01251 04E2                        00            .byte	0
01252 04E3                        00            .byte	0
01253 04E4                        00            .byte	0
01254 04E5                        00            .byte	0
01255 04E6                        00            .byte	0
01256 04E7                        00            .byte	0
01257                                           ! 378  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01258 04E8                        00            .byte	0
01259 04E9                        00            .byte	0
01260 04EA                        00            .byte	0
01261 04EB                        00            .byte	0
01262 04EC                        00            .byte	0
01263 04ED                        00            .byte	0
01264 04EE                        00            .byte	0
01265 04EF                        00            .byte	0
01266                                           ! 379  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01267 04F0                        00            .byte	0
01268 04F1                        00            .byte	0
01269 04F2                        00            .byte	0
01270 04F3                        00            .byte	0
01271 04F4                        00            .byte	0
01272 04F5                        00            .byte	0
01273 04F6                        00            .byte	0
01274 04F7                        00            .byte	0
01275                                           ! 380  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01276 04F8                        00            .byte	0
01277 04F9                        00            .byte	0
01278 04FA                        00            .byte	0
01279 04FB                        00            .byte	0
01280 04FC                        00            .byte	0
01281 04FD                        00            .byte	0
01282 04FE                        00            .byte	0
01283 04FF                        00            .byte	0
01284                                           ! 381  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01285 0500                        00            .byte	0
01286 0501                        00            .byte	0
01287 0502                        00            .byte	0
01288 0503                        00            .byte	0
01289 0504                        00            .byte	0
01290 0505                        00            .byte	0
01291 0506                        00            .byte	0
01292 0507                        00            .byte	0
01293                                           ! 382  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01294 0508                        00            .byte	0
01295 0509                        00            .byte	0
01296 050A                        00            .byte	0
01297 050B                        00            .byte	0
01298 050C                        00            .byte	0
01299 050D                        00            .byte	0
01300 050E                        00            .byte	0
01301 050F                        00            .byte	0
01302                                           ! 383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01303 0510                        00            .byte	0
01304 0511                        00            .byte	0
01305 0512                        00            .byte	0
01306 0513                        00            .byte	0
01307 0514                        00            .byte	0
01308 0515                        00            .byte	0
01309 0516                        00            .byte	0
01310 0517                        00            .byte	0
01311                                           ! 384 },
01312                                           ! 385 {
01313                                           ! 386  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01314 0518                        00            .byte	0
01315 0519                        00            .byte	0
01316 051A                        00            .byte	0
01317 051B                        00            .byte	0
01318 051C                        00            .byte	0
01319 051D                        00            .byte	0
01320 051E                        00            .byte	0
01321 051F                        00            .byte	0
01322                                           ! 387  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01323 0520                        00            .byte	0
01324 0521                        00            .byte	0
01325 0522                        00            .byte	0
01326 0523                        00            .byte	0
01327 0524                        00            .byte	0
01328 0525                        00            .byte	0
01329 0526                        00            .byte	0
01330 0527                        00            .byte	0
01331                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01332 0528                        00            .byte	0
01333 0529                        00            .byte	0
01334 052A                        00            .byte	0
01335 052B                        00            .byte	0
01336 052C                        00            .byte	0
01337 052D                        00            .byte	0
01338 052E                        00            .byte	0
01339 052F                        00            .byte	0
01340                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01341 0530                        00            .byte	0
01342 0531                        00            .byte	0
01343 0532                        00            .byte	0
01344 0533                        00            .byte	0
01345 0534                        00            .byte	0
01346 0535                        00            .byte	0
01347 0536                        00            .byte	0
01348 0537                        00            .byte	0
01349                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01350 0538                        00            .byte	0
01351 0539                        00            .byte	0
01352 053A                        00            .byte	0
01353 053B                        00            .byte	0
01354 053C                        00            .byte	0
01355 053D                        00            .byte	0
01356 053E                        00            .byte	0
01357 053F                        00            .byte	0
01358                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01359 0540                        00            .byte	0
01360 0541                        00            .byte	0
01361 0542                        00            .byte	0
01362 0543                        00            .byte	0
01363 0544                        00            .byte	0
01364 0545                        00            .byte	0
01365 0546                        00            .byte	0
01366 0547                        00            .byte	0
01367                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01368 0548                        00            .byte	0
01369 0549                        00            .byte	0
01370 054A                        00            .byte	0
01371 054B                        00            .byte	0
01372 054C                        00            .byte	0
01373 054D                        00            .byte	0
01374 054E                        00            .byte	0
01375 054F                        00            .byte	0
01376                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 0550                        00            .byte	0
01378 0551                        00            .byte	0
01379 0552                        00            .byte	0
01380 0553                        00            .byte	0
01381 0554                        00            .byte	0
01382 0555                        00            .byte	0
01383 0556                        00            .byte	0
01384 0557                        00            .byte	0
01385                                           ! 394 },
01386                                           ! 395 {
01387                                           ! 396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01388 0558                        00            .byte	0
01389 0559                        00            .byte	0
01390 055A                        00            .byte	0
01391 055B                        00            .byte	0
01392 055C                        00            .byte	0
01393 055D                        00            .byte	0
01394 055E                        00            .byte	0
01395 055F                        00            .byte	0
01396                                           ! 397  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01397 0560                        00            .byte	0
01398 0561                        00            .byte	0
01399 0562                        00            .byte	0
01400 0563                        00            .byte	0
01401 0564                        00            .byte	0
01402 0565                        00            .byte	0
01403 0566                        00            .byte	0
01404 0567                        00            .byte	0
01405                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01406 0568                        00            .byte	0
01407 0569                        00            .byte	0
01408 056A                        00            .byte	0
01409 056B                        00            .byte	0
01410 056C                        00            .byte	0
01411 056D                        00            .byte	0
01412 056E                        00            .byte	0
01413 056F                        00            .byte	0
01414                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01415 0570                        00            .byte	0
01416 0571                        00            .byte	0
01417 0572                        00            .byte	0
01418 0573                        00            .byte	0
01419 0574                        00            .byte	0
01420 0575                        00            .byte	0
01421 0576                        00            .byte	0
01422 0577                        00            .byte	0
01423                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01424 0578                        00            .byte	0
01425 0579                        00            .byte	0
01426 057A                        00            .byte	0
01427 057B                        00            .byte	0
01428 057C                        00            .byte	0
01429 057D                        00            .byte	0
01430 057E                        00            .byte	0
01431 057F                        00            .byte	0
01432                                           ! 401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01433 0580                        00            .byte	0
01434 0581                        00            .byte	0
01435 0582                        00            .byte	0
01436 0583                        00            .byte	0
01437 0584                        00            .byte	0
01438 0585                        00            .byte	0
01439 0586                        00            .byte	0
01440 0587                        00            .byte	0
01441                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01442 0588                        00            .byte	0
01443 0589                        00            .byte	0
01444 058A                        00            .byte	0
01445 058B                        00            .byte	0
01446 058C                        00            .byte	0
01447 058D                        00            .byte	0
01448 058E                        00            .byte	0
01449 058F                        00            .byte	0
01450                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 0590                        00            .byte	0
01452 0591                        00            .byte	0
01453 0592                        00            .byte	0
01454 0593                        00            .byte	0
01455 0594                        00            .byte	0
01456 0595                        00            .byte	0
01457 0596                        00            .byte	0
01458 0597                        00            .byte	0
01459                                           ! 404 },
01460                                           ! 405 {
01461                                           ! 406  40, 24, 8, 0x00, 0x20,
01462 0598                        28            .byte	$28
01463 0599                        18            .byte	$18
01464 059A                        08            .byte	8
01465 059B                        00            .byte	0
01466 059C                        20            .byte	$20
01467                                           ! 407  0x09, 0x0f, 0x00, 0x06,
01468 059D                        09            .byte	9
01469 059E                        0F            .byte	$F
01470 059F                        00            .byte	0
01471 05A0                        06            .byte	6
01472                                           ! 408  0x63,
01473 05A1                        63            .byte	$63
01474                                           ! 409  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01475 05A2                        2D            .byte	$2D
01476 05A3                        27            .byte	$27
01477 05A4                        28            .byte	$28
01478 05A5                        90            .byte	$90
01479 05A6                        2B            .byte	$2B
01480 05A7                        80            .byte	$80
01481 05A8                        BF            .byte	$BF
01482 05A9                        1F            .byte	$1F
01483                                           ! 410  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01484 05AA                        00            .byte	0
01485 05AB                        C0            .byte	$C0
01486 05AC                        00            .byte	0
01487 05AD                        00            .byte	0
01488 05AE                        00            .byte	0
01489 05AF                        00            .byte	0
01490 05B0                        00            .byte	0
01491 05B1                        00            .byte	0
01492                                           ! 411  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01493 05B2                        9C            .byte	$9C
01494 05B3                        8E            .byte	$8E
01495 05B4                        8F            .byte	$8F
01496 05B5                        14            .byte	$14
01497 05B6                        00            .byte	0
01498 05B7                        96            .byte	$96
01499 05B8                        B9            .byte	$B9
01500 05B9                        E3            .byte	$E3
01501                                           ! 412  0xff,
01502 05BA                        FF            .byte	$FF
01503                                           ! 413  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01504 05BB                        00            .byte	0
01505 05BC                        01            .byte	1
01506 05BD                        02            .byte	2
01507 05BE                        03            .byte	3
01508 05BF                        04            .byte	4
01509 05C0                        05            .byte	5
01510 05C1                        06            .byte	6
01511 05C2                        07            .byte	7
01512                                           ! 414  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01513 05C3                        10            .byte	$10
01514 05C4                        11            .byte	$11
01515 05C5                        12            .byte	$12
01516 05C6                        13            .byte	$13
01517 05C7                        14            .byte	$14
01518 05C8                        15            .byte	$15
01519 05C9                        16            .byte	$16
01520 05CA                        17            .byte	$17
01521                                           ! 415  0x01, 0x00, 0x0f, 0x00,
01522 05CB                        01            .byte	1
01523 05CC                        00            .byte	0
01524 05CD                        0F            .byte	$F
01525 05CE                        00            .byte	0
01526                                           ! 416  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01527 05CF                        00            .byte	0
01528 05D0                        00            .byte	0
01529 05D1                        00            .byte	0
01530 05D2                        00            .byte	0
01531 05D3                        00            .byte	0
01532 05D4                        00            .byte	0
01533 05D5                        05            .byte	5
01534 05D6                        0F            .byte	$F
01535 05D7                        FF            .byte	$FF
01536                                           ! 417 },
01537                                           ! 418 {
01538                                           ! 419  80, 24, 8, 0x00, 0x40,
01539 05D8                        50            .byte	$50
01540 05D9                        18            .byte	$18
01541 05DA                        08            .byte	8
01542 05DB                        00            .byte	0
01543 05DC                        40            .byte	$40
01544                                           ! 420  0x01, 0x0f, 0x00, 0x06,
01545 05DD                        01            .byte	1
01546 05DE                        0F            .byte	$F
01547 05DF                        00            .byte	0
01548 05E0                        06            .byte	6
01549                                           ! 421  0x63,
01550 05E1                        63            .byte	$63
01551                                           ! 422  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01552 05E2                        5F            .byte	$5F
01553 05E3                        4F            .byte	$4F
01554 05E4                        50            .byte	$50
01555 05E5                        82            .byte	$82
01556 05E6                        54            .byte	$54
01557 05E7                        80            .byte	$80
01558 05E8                        BF            .byte	$BF
01559 05E9                        1F            .byte	$1F
01560                                           ! 423  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01561 05EA                        00            .byte	0
01562 05EB                        C0            .byte	$C0
01563 05EC                        00            .byte	0
01564 05ED                        00            .byte	0
01565 05EE                        00            .byte	0
01566 05EF                        00            .byte	0
01567 05F0                        00            .byte	0
01568 05F1                        00            .byte	0
01569                                           ! 424  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01570 05F2                        9C            .byte	$9C
01571 05F3                        8E            .byte	$8E
01572 05F4                        8F            .byte	$8F
01573 05F5                        28            .byte	$28
01574 05F6                        00            .byte	0
01575 05F7                        96            .byte	$96
01576 05F8                        B9            .byte	$B9
01577 05F9                        E3            .byte	$E3
01578                                           ! 425  0xff,
01579 05FA                        FF            .byte	$FF
01580                                           ! 426  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01581 05FB                        00            .byte	0
01582 05FC                        01            .byte	1
01583 05FD                        02            .byte	2
01584 05FE                        03            .byte	3
01585 05FF                        04            .byte	4
01586 0600                        05            .byte	5
01587 0601                        06            .byte	6
01588 0602                        07            .byte	7
01589                                           ! 427  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01590 0603                        10            .byte	$10
01591 0604                        11            .byte	$11
01592 0605                        12            .byte	$12
01593 0606                        13            .byte	$13
01594 0607                        14            .byte	$14
01595 0608                        15            .byte	$15
01596 0609                        16            .byte	$16
01597 060A                        17            .byte	$17
01598                                           ! 428  0x01, 0x00, 0x0f, 0x00,
01599 060B                        01            .byte	1
01600 060C                        00            .byte	0
01601 060D                        0F            .byte	$F
01602 060E                        00            .byte	0
01603                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01604 060F                        00            .byte	0
01605 0610                        00            .byte	0
01606 0611                        00            .byte	0
01607 0612                        00            .byte	0
01608 0613                        00            .byte	0
01609 0614                        00            .byte	0
01610 0615                        05            .byte	5
01611 0616                        0F            .byte	$F
01612 0617                        FF            .byte	$FF
01613                                           ! 430 },
01614                                           ! 431 {
01615                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01616 0618                        00            .byte	0
01617 0619                        00            .byte	0
01618 061A                        00            .byte	0
01619 061B                        00            .byte	0
01620 061C                        00            .byte	0
01621 061D                        00            .byte	0
01622 061E                        00            .byte	0
01623 061F                        00            .byte	0
01624                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01625 0620                        00            .byte	0
01626 0621                        00            .byte	0
01627 0622                        00            .byte	0
01628 0623                        00            .byte	0
01629 0624                        00            .byte	0
01630 0625                        00            .byte	0
01631 0626                        00            .byte	0
01632 0627                        00            .byte	0
01633                                           ! 434  0x00, 0x00,
01634 0628                        00            .byte	0
01635                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 0629                        00            .byte	0
01637 062A                        00            .byte	0
01638 062B                        00            .byte	0
01639 062C                        00            .byte	0
01640 062D                        00            .byte	0
01641 062E                        00            .byte	0
01642 062F                        00            .byte	0
01643                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01644 0630                        00            .byte	0
01645 0631                        00            .byte	0
01646 0632                        00            .byte	0
01647 0633                        00            .byte	0
01648 0634                        00            .byte	0
01649 0635                        00            .byte	0
01650 0636                        00            .byte	0
01651 0637                        00            .byte	0
01652                                           ! 436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01653 0638                        00            .byte	0
01654 0639                        00            .byte	0
01655 063A                        00            .byte	0
01656 063B                        00            .byte	0
01657 063C                        00            .byte	0
01658 063D                        00            .byte	0
01659 063E                        00            .byte	0
01660 063F                        00            .byte	0
01661                                           ! 437  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01662 0640                        00            .byte	0
01663 0641                        00            .byte	0
01664 0642                        00            .byte	0
01665 0643                        00            .byte	0
01666 0644                        00            .byte	0
01667 0645                        00            .byte	0
01668 0646                        00            .byte	0
01669 0647                        00            .byte	0
01670                                           ! 438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01671 0648                        00            .byte	0
01672 0649                        00            .byte	0
01673 064A                        00            .byte	0
01674 064B                        00            .byte	0
01675 064C                        00            .byte	0
01676 064D                        00            .byte	0
01677 064E                        00            .byte	0
01678 064F                        00            .byte	0
01679                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01680 0650                        00            .byte	0
01681 0651                        00            .byte	0
01682 0652                        00            .byte	0
01683 0653                        00            .byte	0
01684 0654                        00            .byte	0
01685 0655                        00            .byte	0
01686 0656                        00            .byte	0
01687 0657                        00            .byte	0
01688                                           ! 440 },
01689                                           ! 441 {
01690                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01691 0658                        00            .byte	0
01692 0659                        00            .byte	0
01693 065A                        00            .byte	0
01694 065B                        00            .byte	0
01695 065C                        00            .byte	0
01696 065D                        00            .byte	0
01697 065E                        00            .byte	0
01698 065F                        00            .byte	0
01699                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01700 0660                        00            .byte	0
01701 0661                        00            .byte	0
01702 0662                        00            .byte	0
01703 0663                        00            .byte	0
01704 0664                        00            .byte	0
01705 0665                        00            .byte	0
01706 0666                        00            .byte	0
01707 0667                        00            .byte	0
01708                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01709 0668                        00            .byte	0
01710 0669                        00            .byte	0
01711 066A                        00            .byte	0
01712 066B                        00            .byte	0
01713 066C                        00            .byte	0
01714 066D                        00            .byte	0
01715 066E                        00            .byte	0
01716 066F                        00            .byte	0
01717                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01718 0670                        00            .byte	0
01719 0671                        00            .byte	0
01720 0672                        00            .byte	0
01721 0673                        00            .byte	0
01722 0674                        00            .byte	0
01723 0675                        00            .byte	0
01724 0676                        00            .byte	0
01725 0677                        00            .byte	0
01726                                           ! 446  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01727 0678                        00            .byte	0
01728 0679                        00            .byte	0
01729 067A                        00            .byte	0
01730 067B                        00            .byte	0
01731 067C                        00            .byte	0
01732 067D                        00            .byte	0
01733 067E                        00            .byte	0
01734 067F                        00            .byte	0
01735                                           ! 447  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01736 0680                        00            .byte	0
01737 0681                        00            .byte	0
01738 0682                        00            .byte	0
01739 0683                        00            .byte	0
01740 0684                        00            .byte	0
01741 0685                        00            .byte	0
01742 0686                        00            .byte	0
01743 0687                        00            .byte	0
01744                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01745 0688                        00            .byte	0
01746 0689                        00            .byte	0
01747 068A                        00            .byte	0
01748 068B                        00            .byte	0
01749 068C                        00            .byte	0
01750 068D                        00            .byte	0
01751 068E                        00            .byte	0
01752 068F                        00            .byte	0
01753                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01754 0690                        00            .byte	0
01755 0691                        00            .byte	0
01756 0692                        00            .byte	0
01757 0693                        00            .byte	0
01758 0694                        00            .byte	0
01759 0695                        00            .byte	0
01760 0696                        00            .byte	0
01761 0697                        00            .byte	0
01762                                           ! 450 },
01763                                           ! 451 {
01764                                           ! 452  80, 24, 14, 0x00, 0x80,
01765 0698                        50            .byte	$50
01766 0699                        18            .byte	$18
01767 069A                        0E            .byte	$E
01768 069B                        00            .byte	0
01769 069C                        80            .byte	$80
01770                                           ! 453  0x01, 0x0f, 0x00, 0x06,
01771 069D                        01            .byte	1
01772 069E                        0F            .byte	$F
01773 069F                        00            .byte	0
01774 06A0                        06            .byte	6
01775                                           ! 454  0xa3,
01776 06A1                        A3            .byte	$A3
01777                                           ! 455  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01778 06A2                        5F            .byte	$5F
01779 06A3                        4F            .byte	$4F
01780 06A4                        50            .byte	$50
01781 06A5                        82            .byte	$82
01782 06A6                        54            .byte	$54
01783 06A7                        80            .byte	$80
01784 06A8                        BF            .byte	$BF
01785 06A9                        1F            .byte	$1F
01786                                           ! 456  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01787 06AA                        00            .byte	0
01788 06AB                        40            .byte	$40
01789 06AC                        00            .byte	0
01790 06AD                        00            .byte	0
01791 06AE                        00            .byte	0
01792 06AF                        00            .byte	0
01793 06B0                        00            .byte	0
01794 06B1                        00            .byte	0
01795                                           ! 457  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01796 06B2                        83            .byte	$83
01797 06B3                        85            .byte	$85
01798 06B4                        5D            .byte	$5D
01799 06B5                        28            .byte	$28
01800 06B6                        0F            .byte	$F
01801 06B7                        63            .byte	$63
01802 06B8                        BA            .byte	$BA
01803 06B9                        E3            .byte	$E3
01804                                           ! 458  0xff,
01805 06BA                        FF            .byte	$FF
01806                                           ! 459  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01807 06BB                        00            .byte	0
01808 06BC                        08            .byte	8
01809 06BD                        00            .byte	0
01810 06BE                        00            .byte	0
01811 06BF                        18            .byte	$18
01812 06C0                        18            .byte	$18
01813 06C1                        00            .byte	0
01814 06C2                        00            .byte	0
01815                                           ! 460  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01816 06C3                        00            .byte	0
01817 06C4                        08            .byte	8
01818 06C5                        00            .byte	0
01819 06C6                        00            .byte	0
01820 06C7                        00            .byte	0
01821 06C8                        18            .byte	$18
01822 06C9                        00            .byte	0
01823 06CA                        00            .byte	0
01824                                           ! 461  0x01, 0x00, 0x01, 0x00,
01825 06CB                        01            .byte	1
01826 06CC                        00            .byte	0
01827 06CD                        01            .byte	1
01828 06CE                        00            .byte	0
01829                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01830 06CF                        00            .byte	0
01831 06D0                        00            .byte	0
01832 06D1                        00            .byte	0
01833 06D2                        00            .byte	0
01834 06D3                        00            .byte	0
01835 06D4                        00            .byte	0
01836 06D5                        05            .byte	5
01837 06D6                        0F            .byte	$F
01838 06D7                        FF            .byte	$FF
01839                                           ! 463 },
01840                                           ! 464 {
01841                                           ! 465  80, 24, 14, 0x00, 0x80,
01842 06D8                        50            .byte	$50
01843 06D9                        18            .byte	$18
01844 06DA                        0E            .byte	$E
01845 06DB                        00            .byte	0
01846 06DC                        80            .byte	$80
01847                                           ! 466  0x01, 0x0f, 0x00, 0x06,
01848 06DD                        01            .byte	1
01849 06DE                        0F            .byte	$F
01850 06DF                        00            .byte	0
01851 06E0                        06            .byte	6
01852                                           ! 467  0xa3,
01853 06E1                        A3            .byte	$A3
01854                                           ! 468  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01855 06E2                        5F            .byte	$5F
01856 06E3                        4F            .byte	$4F
01857 06E4                        50            .byte	$50
01858 06E5                        82            .byte	$82
01859 06E6                        54            .byte	$54
01860 06E7                        80            .byte	$80
01861 06E8                        BF            .byte	$BF
01862 06E9                        1F            .byte	$1F
01863                                           ! 469  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01864 06EA                        00            .byte	0
01865 06EB                        40            .byte	$40
01866 06EC                        00            .byte	0
01867 06ED                        00            .byte	0
01868 06EE                        00            .byte	0
01869 06EF                        00            .byte	0
01870 06F0                        00            .byte	0
01871 06F1                        00            .byte	0
01872                                           ! 470  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01873 06F2                        83            .byte	$83
01874 06F3                        85            .byte	$85
01875 06F4                        5D            .byte	$5D
01876 06F5                        28            .byte	$28
01877 06F6                        0F            .byte	$F
01878 06F7                        63            .byte	$63
01879 06F8                        BA            .byte	$BA
01880 06F9                        E3            .byte	$E3
01881                                           ! 471  0xff,
01882 06FA                        FF            .byte	$FF
01883                                           ! 472  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01884 06FB                        00            .byte	0
01885 06FC                        01            .byte	1
01886 06FD                        02            .byte	2
01887 06FE                        03            .byte	3
01888 06FF                        04            .byte	4
01889 0700                        05            .byte	5
01890 0701                        14            .byte	$14
01891 0702                        07            .byte	7
01892                                           ! 473  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01893 0703                        38            .byte	$38
01894 0704                        39            .byte	$39
01895 0705                        3A            .byte	$3A
01896 0706                        3B            .byte	$3B
01897 0707                        3C            .byte	$3C
01898 0708                        3D            .byte	$3D
01899 0709                        3E            .byte	$3E
01900 070A                        3F            .byte	$3F
01901                                           ! 474  0x01, 0x00, 0x0f, 0x00,
01902 070B                        01            .byte	1
01903 070C                        00            .byte	0
01904 070D                        0F            .byte	$F
01905 070E                        00            .byte	0
01906                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01907 070F                        00            .byte	0
01908 0710                        00            .byte	0
01909 0711                        00            .byte	0
01910 0712                        00            .byte	0
01911 0713                        00            .byte	0
01912 0714                        00            .byte	0
01913 0715                        05            .byte	5
01914 0716                        0F            .byte	$F
01915 0717                        FF            .byte	$FF
01916                                           ! 476 },
01917                                           ! 477 {
01918                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01919 0718                        00            .byte	0
01920 0719                        00            .byte	0
01921 071A                        00            .byte	0
01922 071B                        00            .byte	0
01923 071C                        00            .byte	0
01924 071D                        00            .byte	0
01925 071E                        00            .byte	0
01926 071F                        00            .byte	0
01927                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01928 0720                        00            .byte	0
01929 0721                        00            .byte	0
01930 0722                        00            .byte	0
01931 0723                        00            .byte	0
01932 0724                        00            .byte	0
01933 0725                        00            .byte	0
01934 0726                        00            .byte	0
01935 0727                        00            .byte	0
01936                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01937 0728                        00            .byte	0
01938 0729                        00            .byte	0
01939 072A                        00            .byte	0
01940 072B                        00            .byte	0
01941 072C                        00            .byte	0
01942 072D                        00            .byte	0
01943 072E                        00            .byte	0
01944 072F                        00            .byte	0
01945                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01946 0730                        00            .byte	0
01947 0731                        00            .byte	0
01948 0732                        00            .byte	0
01949 0733                        00            .byte	0
01950 0734                        00            .byte	0
01951 0735                        00            .byte	0
01952 0736                        00            .byte	0
01953 0737                        00            .byte	0
01954                                           ! 482  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01955 0738                        00            .byte	0
01956 0739                        00            .byte	0
01957 073A                        00            .byte	0
01958 073B                        00            .byte	0
01959 073C                        00            .byte	0
01960 073D                        00            .byte	0
01961 073E                        00            .byte	0
01962 073F                        00            .byte	0
01963                                           ! 483  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01964 0740                        00            .byte	0
01965 0741                        00            .byte	0
01966 0742                        00            .byte	0
01967 0743                        00            .byte	0
01968 0744                        00            .byte	0
01969 0745                        00            .byte	0
01970 0746                        00            .byte	0
01971 0747                        00            .byte	0
01972                                           ! 484  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01973 0748                        00            .byte	0
01974 0749                        00            .byte	0
01975 074A                        00            .byte	0
01976 074B                        00            .byte	0
01977 074C                        00            .byte	0
01978 074D                        00            .byte	0
01979 074E                        00            .byte	0
01980 074F                        00            .byte	0
01981                                           ! 485  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01982 0750                        00            .byte	0
01983 0751                        00            .byte	0
01984 0752                        00            .byte	0
01985 0753                        00            .byte	0
01986 0754                        00            .byte	0
01987 0755                        00            .byte	0
01988 0756                        00            .byte	0
01989 0757                        00            .byte	0
01990                                           ! 486 },
01991                                           ! 487 {
01992                                           ! 488  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01993 0758                        00            .byte	0
01994 0759                        00            .byte	0
01995 075A                        00            .byte	0
01996 075B                        00            .byte	0
01997 075C                        00            .byte	0
01998 075D                        00            .byte	0
01999 075E                        00            .byte	0
02000 075F                        00            .byte	0
02001                                           ! 489  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02002 0760                        00            .byte	0
02003 0761                        00            .byte	0
02004 0762                        00            .byte	0
02005 0763                        00            .byte	0
02006 0764                        00            .byte	0
02007 0765                        00            .byte	0
02008 0766                        00            .byte	0
02009 0767                        00            .byte	0
02010                                           ! 490  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02011 0768                        00            .byte	0
02012 0769                        00            .byte	0
02013 076A                        00            .byte	0
02014 076B                        00            .byte	0
02015 076C                        00            .byte	0
02016 076D                        00            .byte	0
02017 076E                        00            .byte	0
02018 076F                        00            .byte	0
02019                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0
02020 0770                        00            .byte	0
02021 0771                        00            .byte	0
02022 0772                        00            .byte	0
02023 0773                        00            .byte	0
02024 0774                        00            .byte	0
02025                                           ! 491 x00, 0x00, 0x00,
02026 0775                        00            .byte	0
02027 0776                        00            .byte	0
02028 0777                        00            .byte	0
02029                                           ! 492  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02030 0778                        00            .byte	0
02031 0779                        00            .byte	0
02032 077A                        00            .byte	0
02033 077B                        00            .byte	0
02034 077C                        00            .byte	0
02035 077D                        00            .byte	0
02036 077E                        00            .byte	0
02037 077F                        00            .byte	0
02038                                           ! 493  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02039 0780                        00            .byte	0
02040 0781                        00            .byte	0
02041 0782                        00            .byte	0
02042 0783                        00            .byte	0
02043 0784                        00            .byte	0
02044 0785                        00            .byte	0
02045 0786                        00            .byte	0
02046 0787                        00            .byte	0
02047                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02048 0788                        00            .byte	0
02049 0789                        00            .byte	0
02050 078A                        00            .byte	0
02051 078B                        00            .byte	0
02052 078C                        00            .byte	0
02053 078D                        00            .byte	0
02054 078E                        00            .byte	0
02055 078F                        00            .byte	0
02056                                           ! 495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02057 0790                        00            .byte	0
02058 0791                        00            .byte	0
02059 0792                        00            .byte	0
02060 0793                        00            .byte	0
02061 0794                        00            .byte	0
02062 0795                        00            .byte	0
02063 0796                        00            .byte	0
02064 0797                        00            .byte	0
02065                                           ! 496 },
02066                                           ! 497 {
02067                                           ! 498  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02068 0798                        00            .byte	0
02069 0799                        00            .byte	0
02070 079A                        00            .byte	0
02071 079B                        00            .byte	0
02072 079C                        00            .byte	0
02073 079D                        00            .byte	0
02074 079E                        00            .byte	0
02075 079F                        00            .byte	0
02076                                           ! 499  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02077 07A0                        00            .byte	0
02078 07A1                        00            .byte	0
02079 07A2                        00            .byte	0
02080 07A3                        00            .byte	0
02081 07A4                        00            .byte	0
02082 07A5                        00            .byte	0
02083 07A6                        00            .byte	0
02084 07A7                        00            .byte	0
02085                                           ! 500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02086 07A8                        00            .byte	0
02087 07A9                        00            .byte	0
02088 07AA                        00            .byte	0
02089 07AB                        00            .byte	0
02090 07AC                        00            .byte	0
02091 07AD                        00            .byte	0
02092 07AE                        00            .byte	0
02093 07AF                        00            .byte	0
02094                                           ! 501  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02095 07B0                        00            .byte	0
02096 07B1                        00            .byte	0
02097 07B2                        00            .byte	0
02098 07B3                        00            .byte	0
02099 07B4                        00            .byte	0
02100 07B5                        00            .byte	0
02101 07B6                        00            .byte	0
02102 07B7                        00            .byte	0
02103                                           ! 502  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02104 07B8                        00            .byte	0
02105 07B9                        00            .byte	0
02106 07BA                        00            .byte	0
02107 07BB                        00            .byte	0
02108 07BC                        00            .byte	0
02109 07BD                        00            .byte	0
02110 07BE                        00            .byte	0
02111 07BF                        00            .byte	0
02112                                           ! 503  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02113 07C0                        00            .byte	0
02114 07C1                        00            .byte	0
02115 07C2                        00            .byte	0
02116 07C3                        00            .byte	0
02117 07C4                        00            .byte	0
02118 07C5                        00            .byte	0
02119 07C6                        00            .byte	0
02120 07C7                        00            .byte	0
02121                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02122 07C8                        00            .byte	0
02123 07C9                        00            .byte	0
02124 07CA                        00            .byte	0
02125 07CB                        00            .byte	0
02126 07CC                        00            .byte	0
02127 07CD                        00            .byte	0
02128 07CE                        00            .byte	0
02129 07CF                        00            .byte	0
02130                                           ! 505  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02131 07D0                        00            .byte	0
02132 07D1                        00            .byte	0
02133 07D2                        00            .byte	0
02134 07D3                        00            .byte	0
02135 07D4                        00            .byte	0
02136 07D5                        00            .byte	0
02137 07D6                        00            .byte	0
02138 07D7                        00            .byte	0
02139                                           ! 506 },
02140                                           ! 507 {
02141                                           ! 508  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02142 07D8                        00            .byte	0
02143 07D9                        00            .byte	0
02144 07DA                        00            .byte	0
02145 07DB                        00            .byte	0
02146 07DC                        00            .byte	0
02147 07DD                        00            .byte	0
02148 07DE                        00            .byte	0
02149 07DF                        00            .byte	0
02150                                           ! 509  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02151 07E0                        00            .byte	0
02152 07E1                        00            .byte	0
02153 07E2                        00            .byte	0
02154 07E3                        00            .byte	0
02155 07E4                        00            .byte	0
02156 07E5                        00            .byte	0
02157 07E6                        00            .byte	0
02158 07E7                        00            .byte	0
02159                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02160 07E8                        00            .byte	0
02161 07E9                        00            .byte	0
02162 07EA                        00            .byte	0
02163 07EB                        00            .byte	0
02164 07EC                        00            .byte	0
02165 07ED                        00            .byte	0
02166 07EE                        00            .byte	0
02167 07EF                        00            .byte	0
02168                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02169 07F0                        00            .byte	0
02170 07F1                        00            .byte	0
02171 07F2                        00            .byte	0
02172 07F3                        00            .byte	0
02173 07F4                        00            .byte	0
02174 07F5                        00            .byte	0
02175 07F6                        00            .byte	0
02176 07F7                        00            .byte	0
02177                                           ! 512  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02178 07F8                        00            .byte	0
02179 07F9                        00            .byte	0
02180 07FA                        00            .byte	0
02181 07FB                        00            .byte	0
02182 07FC                        00            .byte	0
02183 07FD                        00            .byte	0
02184 07FE                        00            .byte	0
02185 07FF                        00            .byte	0
02186                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02187 0800                        00            .byte	0
02188 0801                        00            .byte	0
02189 0802                        00            .byte	0
02190 0803                        00            .byte	0
02191 0804                        00            .byte	0
02192 0805                        00            .byte	0
02193 0806                        00            .byte	0
02194 0807                        00            .byte	0
02195                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02196 0808                        00            .byte	0
02197 0809                        00            .byte	0
02198 080A                        00            .byte	0
02199 080B                        00            .byte	0
02200 080C                        00            .byte	0
02201 080D                        00            .byte	0
02202 080E                        00            .byte	0
02203 080F                        00            .byte	0
02204                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 0810                        00            .byte	0
02206 0811                        00            .byte	0
02207 0812                        00            .byte	0
02208 0813                        00            .byte	0
02209 0814                        00            .byte	0
02210 0815                        00            .byte	0
02211 0816                        00            .byte	0
02212 0817                        00            .byte	0
02213                                           ! 516 },
02214                                           ! 517 {
02215                                           ! 518  40, 24, 16, 0x00, 0x08,
02216 0818                        28            .byte	$28
02217 0819                        18            .byte	$18
02218 081A                        10            .byte	$10
02219 081B                        00            .byte	0
02220 081C                        08            .byte	8
02221                                           ! 519  0x08, 0x03, 0x00, 0x02,
02222 081D                        08            .byte	8
02223 081E                        03            .byte	3
02224 081F                        00            .byte	0
02225 0820                        02            .byte	2
02226                                           ! 520  0x67,
02227 0821                        67            .byte	$67
02228                                           ! 521  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02229 0822                        2D            .byte	$2D
02230 0823                        27            .byte	$27
02231 0824                        28            .byte	$28
02232 0825                        90            .byte	$90
02233 0826                        2B            .byte	$2B
02234 0827                        A0            .byte	$A0
02235 0828                        BF            .byte	$BF
02236 0829                        1F            .byte	$1F
02237                                           ! 522  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02238 082A                        00            .byte	0
02239 082B                        4F            .byte	$4F
02240 082C                        0D            .byte	$D
02241 082D                        0E            .byte	$E
02242 082E                        00            .byte	0
02243 082F                        00            .byte	0
02244 0830                        00            .byte	0
02245 0831                        00            .byte	0
02246                                           ! 523  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02247 0832                        9C            .byte	$9C
02248 0833                        8E            .byte	$8E
02249 0834                        8F            .byte	$8F
02250 0835                        14            .byte	$14
02251 0836                        1F            .byte	$1F
02252 0837                        96            .byte	$96
02253 0838                        B9            .byte	$B9
02254 0839                        A3            .byte	$A3
02255                                           ! 524  0xff,
02256 083A                        FF            .byte	$FF
02257                                           ! 525  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02258 083B                        00            .byte	0
02259 083C                        01            .byte	1
02260 083D                        02            .byte	2
02261 083E                        03            .byte	3
02262 083F                        04            .byte	4
02263 0840                        05            .byte	5
02264 0841                        14            .byte	$14
02265 0842                        07            .byte	7
02266                                           ! 526  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02267 0843                        38            .byte	$38
02268 0844                        39            .byte	$39
02269 0845                        3A            .byte	$3A
02270 0846                        3B            .byte	$3B
02271 0847                        3C            .byte	$3C
02272 0848                        3D            .byte	$3D
02273 0849                        3E            .byte	$3E
02274 084A                        3F            .byte	$3F
02275                                           ! 527  0x0c, 0x00, 0x0f, 0x08,
02276 084B                        0C            .byte	$C
02277 084C                        00            .byte	0
02278 084D                        0F            .byte	$F
02279 084E                        08            .byte	8
02280                                           ! 528  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02281 084F                        00            .byte	0
02282 0850                        00            .byte	0
02283 0851                        00            .byte	0
02284 0852                        00            .byte	0
02285 0853                        00            .byte	0
02286 0854                        10            .byte	$10
02287 0855                        0E            .byte	$E
02288 0856                        0F            .byte	$F
02289 0857                        FF            .byte	$FF
02290                                           ! 529 },
02291                                           ! 530 {
02292                                           ! 531  80, 24, 16, 0x00, 0x10,
02293 0858                        50            .byte	$50
02294 0859                        18            .byte	$18
02295 085A                        10            .byte	$10
02296 085B                        00            .byte	0
02297 085C                        10            .byte	$10
02298                                           ! 532  0x00, 0x03, 0x00, 0x02,
02299 085D                        00            .byte	0
02300 085E                        03            .byte	3
02301 085F                        00            .byte	0
02302 0860                        02            .byte	2
02303                                           ! 533  0x67,
02304 0861                        67            .byte	$67
02305                                           ! 534  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02306 0862                        5F            .byte	$5F
02307 0863                        4F            .byte	$4F
02308 0864                        50            .byte	$50
02309 0865                        82            .byte	$82
02310 0866                        55            .byte	$55
02311 0867                        81            .byte	$81
02312 0868                        BF            .byte	$BF
02313 0869                        1F            .byte	$1F
02314                                           ! 535  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02315 086A                        00            .byte	0
02316 086B                        4F            .byte	$4F
02317 086C                        0D            .byte	$D
02318 086D                        0E            .byte	$E
02319 086E                        00            .byte	0
02320 086F                        00            .byte	0
02321 0870                        00            .byte	0
02322 0871                        00            .byte	0
02323                                           ! 536  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02324 0872                        9C            .byte	$9C
02325 0873                        8E            .byte	$8E
02326 0874                        8F            .byte	$8F
02327 0875                        28            .byte	$28
02328 0876                        1F            .byte	$1F
02329 0877                        96            .byte	$96
02330 0878                        B9            .byte	$B9
02331 0879                        A3            .byte	$A3
02332                                           ! 537  0xff,
02333 087A                        FF            .byte	$FF
02334                                           ! 538  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02335 087B                        00            .byte	0
02336 087C                        01            .byte	1
02337 087D                        02            .byte	2
02338 087E                        03            .byte	3
02339 087F                        04            .byte	4
02340 0880                        05            .byte	5
02341 0881                        14            .byte	$14
02342 0882                        07            .byte	7
02343                                           ! 539  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02344 0883                        38            .byte	$38
02345 0884                        39            .byte	$39
02346 0885                        3A            .byte	$3A
02347 0886                        3B            .byte	$3B
02348 0887                        3C            .byte	$3C
02349 0888                        3D            .byte	$3D
02350 0889                        3E            .byte	$3E
02351 088A                        3F            .byte	$3F
02352                                           ! 540  0x0c, 0x00, 0x0f, 0x08,
02353 088B                        0C            .byte	$C
02354 088C                        00            .byte	0
02355 088D                        0F            .byte	$F
02356 088E                        08            .byte	8
02357                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02358 088F                        00            .byte	0
02359 0890                        00            .byte	0
02360 0891                        00            .byte	0
02361 0892                        00            .byte	0
02362 0893                        00            .byte	0
02363 0894                        10            .byte	$10
02364 0895                        0E            .byte	$E
02365 0896                        0F            .byte	$F
02366 0897                        FF            .byte	$FF
02367                                           ! 542 },
02368                                           ! 543 {
02369                                           ! 544  80, 24, 16, 0x00, 0x10,
02370 0898                        50            .byte	$50
02371 0899                        18            .byte	$18
02372 089A                        10            .byte	$10
02373 089B                        00            .byte	0
02374 089C                        10            .byte	$10
02375                                           ! 545  0x00, 0x03, 0x00, 0x02,
02376 089D                        00            .byte	0
02377 089E                        03            .byte	3
02378 089F                        00            .byte	0
02379 08A0                        02            .byte	2
02380                                           ! 546  0x66,
02381 08A1                        66            .byte	$66
02382                                           ! 547  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02383 08A2                        5F            .byte	$5F
02384 08A3                        4F            .byte	$4F
02385 08A4                        50            .byte	$50
02386 08A5                        82            .byte	$82
02387 08A6                        55            .byte	$55
02388 08A7                        81            .byte	$81
02389 08A8                        BF            .byte	$BF
02390 08A9                        1F            .byte	$1F
02391                                           ! 548  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02392 08AA                        00            .byte	0
02393 08AB                        4F            .byte	$4F
02394 08AC                        0D            .byte	$D
02395 08AD                        0E            .byte	$E
02396 08AE                        00            .byte	0
02397 08AF                        00            .byte	0
02398 08B0                        00            .byte	0
02399 08B1                        00            .byte	0
02400                                           ! 549  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02401 08B2                        9C            .byte	$9C
02402 08B3                        8E            .byte	$8E
02403 08B4                        8F            .byte	$8F
02404 08B5                        28            .byte	$28
02405 08B6                        0F            .byte	$F
02406 08B7                        96            .byte	$96
02407 08B8                        B9            .byte	$B9
02408 08B9                        A3            .byte	$A3
02409                                           ! 550  0xff,
02410 08BA                        FF            .byte	$FF
02411                                           ! 551  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 
02412 08BB                        00            .byte	0
02413 08BC                        08            .byte	8
02414 08BD                        08            .byte	8
02415 08BE                        08            .byte	8
02416 08BF                        08            .byte	8
02417 08C0                        08            .byte	8
02418                                           ! 551 0x08, 0x08,
02419 08C1                        08            .byte	8
02420 08C2                        08            .byte	8
02421                                           ! 552  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02422 08C3                        10            .byte	$10
02423 08C4                        18            .byte	$18
02424 08C5                        18            .byte	$18
02425 08C6                        18            .byte	$18
02426 08C7                        18            .byte	$18
02427 08C8                        18            .byte	$18
02428 08C9                        18            .byte	$18
02429 08CA                        18            .byte	$18
02430                                           ! 553  0x0e, 0x00, 0x0f, 0x08,
02431 08CB                        0E            .byte	$E
02432 08CC                        00            .byte	0
02433 08CD                        0F            .byte	$F
02434 08CE                        08            .byte	8
02435                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02436 08CF                        00            .byte	0
02437 08D0                        00            .byte	0
02438 08D1                        00            .byte	0
02439 08D2                        00            .byte	0
02440 08D3                        00            .byte	0
02441 08D4                        10            .byte	$10
02442 08D5                        0A            .byte	$A
02443 08D6                        0F            .byte	$F
02444 08D7                        FF            .byte	$FF
02445                                           ! 555 },
02446                                           ! 556 {
02447                                           ! 557  80, 29, 16, 0x00, 0x00,
02448 08D8                        50            .byte	$50
02449 08D9                        1D            .byte	$1D
02450 08DA                        10            .byte	$10
02451 08DB                        00            .byte	0
02452 08DC                        00            .byte	0
02453                                           ! 558  0x01, 0x0f, 0x00, 0x06,
02454 08DD                        01            .byte	1
02455 08DE                        0F            .byte	$F
02456 08DF                        00            .byte	0
02457 08E0                        06            .byte	6
02458                                           ! 559  0xe3,
02459 08E1                        E3            .byte	$E3
02460                                           ! 560  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02461 08E2                        5F            .byte	$5F
02462 08E3                        4F            .byte	$4F
02463 08E4                        50            .byte	$50
02464 08E5                        82            .byte	$82
02465 08E6                        54            .byte	$54
02466 08E7                        80            .byte	$80
02467 08E8                        0B            .byte	$B
02468 08E9                        3E            .byte	$3E
02469                                           ! 561  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02470 08EA                        00            .byte	0
02471 08EB                        40            .byte	$40
02472 08EC                        00            .byte	0
02473 08ED                        00            .byte	0
02474 08EE                        00            .byte	0
02475 08EF                        00            .byte	0
02476 08F0                        00            .byte	0
02477 08F1                        00            .byte	0
02478                                           ! 562  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02479 08F2                        EA            .byte	$EA
02480 08F3                        8C            .byte	$8C
02481 08F4                        DF            .byte	$DF
02482 08F5                        28            .byte	$28
02483 08F6                        00            .byte	0
02484 08F7                        E7            .byte	$E7
02485 08F8                        04            .byte	4
02486 08F9                        E3            .byte	$E3
02487                                           ! 563  0xff,
02488 08FA                        FF            .byte	$FF
02489                                           ! 564  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02490 08FB                        00            .byte	0
02491 08FC                        3F            .byte	$3F
02492 08FD                        00            .byte	0
02493 08FE                        3F            .byte	$3F
02494 08FF                        00            .byte	0
02495 0900                        3F            .byte	$3F
02496 0901                        00            .byte	0
02497 0902                        3F            .byte	$3F
02498                                           ! 565  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02499 0903                        00            .byte	0
02500 0904                        3F            .byte	$3F
02501 0905                        00            .byte	0
02502 0906                        3F            .byte	$3F
02503 0907                        00            .byte	0
02504 0908                        3F            .byte	$3F
02505 0909                        00            .byte	0
02506 090A                        3F            .byte	$3F
02507                                           ! 566  0x01, 0x00, 0x0f, 0x00,
02508 090B                        01            .byte	1
02509 090C                        00            .byte	0
02510 090D                        0F            .byte	$F
02511 090E                        00            .byte	0
02512                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02513 090F                        00            .byte	0
02514 0910                        00            .byte	0
02515 0911                        00            .byte	0
02516 0912                        00            .byte	0
02517 0913                        00            .byte	0
02518 0914                        00            .byte	0
02519 0915                        05            .byte	5
02520 0916                        0F            .byte	$F
02521 0917                        FF            .byte	$FF
02522                                           ! 568 },
02523                                           ! 569 {
02524                                           ! 570  80, 29, 16, 0x00, 0x00,
02525 0918                        50            .byte	$50
02526 0919                        1D            .byte	$1D
02527 091A                        10            .byte	$10
02528 091B                        00            .byte	0
02529 091C                        00            .byte	0
02530                                           ! 571  0x01, 0x0f, 0x00, 0x06,
02531 091D                        01            .byte	1
02532 091E                        0F            .byte	$F
02533 091F                        00            .byte	0
02534 0920                        06            .byte	6
02535                                           ! 572  0xe3,
02536 0921                        E3            .byte	$E3
02537                                           ! 573  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02538 0922                        5F            .byte	$5F
02539 0923                        4F            .byte	$4F
02540 0924                        50            .byte	$50
02541 0925                        82            .byte	$82
02542 0926                        54            .byte	$54
02543 0927                        80            .byte	$80
02544 0928                        0B            .byte	$B
02545 0929                        3E            .byte	$3E
02546                                           ! 574  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02547 092A                        00            .byte	0
02548 092B                        40            .byte	$40
02549 092C                        00            .byte	0
02550 092D                        00            .byte	0
02551 092E                        00            .byte	0
02552 092F                        00            .byte	0
02553 0930                        00            .byte	0
02554 0931                        00            .byte	0
02555                                           ! 575  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02556 0932                        EA            .byte	$EA
02557 0933                        8C            .byte	$8C
02558 0934                        DF            .byte	$DF
02559 0935                        28            .byte	$28
02560 0936                        00            .byte	0
02561 0937                        E7            .byte	$E7
02562 0938                        04            .byte	4
02563 0939                        E3            .byte	$E3
02564                                           ! 576  0xff,
02565 093A                        FF            .byte	$FF
02566                                           ! 577  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02567 093B                        00            .byte	0
02568 093C                        01            .byte	1
02569 093D                        02            .byte	2
02570 093E                        03            .byte	3
02571 093F                        04            .byte	4
02572 0940                        05            .byte	5
02573 0941                        14            .byte	$14
02574 0942                        07            .byte	7
02575                                           ! 578  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02576 0943                        38            .byte	$38
02577 0944                        39            .byte	$39
02578 0945                        3A            .byte	$3A
02579 0946                        3B            .byte	$3B
02580 0947                        3C            .byte	$3C
02581 0948                        3D            .byte	$3D
02582 0949                        3E            .byte	$3E
02583 094A                        3F            .byte	$3F
02584                                           ! 579  0x01, 0x00, 0x0f, 0x00,
02585 094B                        01            .byte	1
02586 094C                        00            .byte	0
02587 094D                        0F            .byte	$F
02588 094E                        00            .byte	0
02589                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02590 094F                        00            .byte	0
02591 0950                        00            .byte	0
02592 0951                        00            .byte	0
02593 0952                        00            .byte	0
02594 0953                        00            .byte	0
02595 0954                        00            .byte	0
02596 0955                        05            .byte	5
02597 0956                        0F            .byte	$F
02598 0957                        FF            .byte	$FF
02599                                           ! 581 },
02600                                           ! 582 {
02601                                           ! 583  40, 24, 8, 0x00, 0x00,
02602 0958                        28            .byte	$28
02603 0959                        18            .byte	$18
02604 095A                        08            .byte	8
02605 095B                        00            .byte	0
02606 095C                        00            .byte	0
02607                                           ! 584  0x01, 0x0f, 0x00, 0x0e,
02608 095D                        01            .byte	1
02609 095E                        0F            .byte	$F
02610 095F                        00            .byte	0
02611 0960                        0E            .byte	$E
02612                                           ! 585  0x63,
02613 0961                        63            .byte	$63
02614                                           ! 586  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02615 0962                        5F            .byte	$5F
02616 0963                        4F            .byte	$4F
02617 0964                        50            .byte	$50
02618 0965                        82            .byte	$82
02619 0966                        54            .byte	$54
02620 0967                        80            .byte	$80
02621 0968                        BF            .byte	$BF
02622 0969                        1F            .byte	$1F
02623                                           ! 587  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02624 096A                        00            .byte	0
02625 096B                        41            .byte	$41
02626 096C                        00            .byte	0
02627 096D                        00            .byte	0
02628 096E                        00            .byte	0
02629 096F                        00            .byte	0
02630 0970                        00            .byte	0
02631 0971                        00            .byte	0
02632                                           ! 588  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02633 0972                        9C            .byte	$9C
02634 0973                        8E            .byte	$8E
02635 0974                        8F            .byte	$8F
02636 0975                        28            .byte	$28
02637 0976                        40            .byte	$40
02638 0977                        96            .byte	$96
02639 0978                        B9            .byte	$B9
02640 0979                        A3            .byte	$A3
02641                                           ! 589  0xff,
02642 097A                        FF            .byte	$FF
02643                                           ! 590  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02644 097B                        00            .byte	0
02645 097C                        01            .byte	1
02646 097D                        02            .byte	2
02647 097E                        03            .byte	3
02648 097F                        04            .byte	4
02649 0980                        05            .byte	5
02650 0981                        06            .byte	6
02651 0982                        07            .byte	7
02652                                           ! 591  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02653 0983                        08            .byte	8
02654 0984                        09            .byte	9
02655 0985                        0A            .byte	$A
02656 0986                        0B            .byte	$B
02657 0987                        0C            .byte	$C
02658 0988                        0D            .byte	$D
02659 0989                        0E            .byte	$E
02660 098A                        0F            .byte	$F
02661                                           ! 592  0x41, 0x00, 0x0f, 0x00,
02662 098B                        41            .byte	$41
02663 098C                        00            .byte	0
02664 098D                        0F            .byte	$F
02665 098E                        00            .byte	0
02666                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02667 098F                        00            .byte	0
02668 0990                        00            .byte	0
02669 0991                        00            .byte	0
02670 0992                        00            .byte	0
02671 0993                        00            .byte	0
02672 0994                        40            .byte	$40
02673 0995                        05            .byte	5
02674 0996                        0F            .byte	$F
02675 0997                        FF            .byte	$FF
02676                                           ! 594 },
02677                                           ! 595 {
02678                                           ! 596  100, 36, 16, 0x00, 0x00,
02679 0998                        64            .byte	$64
02680 0999                        24            .byte	$24
02681 099A                        10            .byte	$10
02682 099B                        00            .byte	0
02683 099C                        00            .byte	0
02684                                           ! 597  0x01, 0x0f, 0x00, 0x06,
02685 099D                        01            .byte	1
02686 099E                        0F            .byte	$F
02687 099F                        00            .byte	0
02688 09A0                        06            .byte	6
02689                                           ! 598  0xe3,
02690 09A1                        E3            .byte	$E3
02691                                           ! 599  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02692 09A2                        7F            .byte	$7F
02693 09A3                        63            .byte	$63
02694 09A4                        63            .byte	$63
02695 09A5                        83            .byte	$83
02696 09A6                        6B            .byte	$6B
02697 09A7                        1B            .byte	$1B
02698 09A8                        72            .byte	$72
02699 09A9                        F0            .byte	$F0
02700                                           ! 600  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02701 09AA                        00            .byte	0
02702 09AB                        60            .byte	$60
02703 09AC                        00            .byte	0
02704 09AD                        00            .byte	0
02705 09AE                        00            .byte	0
02706 09AF                        00            .byte	0
02707 09B0                        00            .byte	0
02708 09B1                        00            .byte	0
02709                                           ! 601  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02710 09B2                        59            .byte	$59
02711 09B3                        8D            .byte	$8D
02712 09B4                        57            .byte	$57
02713 09B5                        32            .byte	$32
02714 09B6                        00            .byte	0
02715 09B7                        57            .byte	$57
02716 09B8                        73            .byte	$73
02717 09B9                        E3            .byte	$E3
02718                                           ! 602  0xff,
02719 09BA                        FF            .byte	$FF
02720                                           ! 603  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02721 09BB                        00            .byte	0
02722 09BC                        01            .byte	1
02723 09BD                        02            .byte	2
02724 09BE                        03            .byte	3
02725 09BF                        04            .byte	4
02726 09C0                        05            .byte	5
02727 09C1                        14            .byte	$14
02728 09C2                        07            .byte	7
02729                                           ! 604  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02730 09C3                        38            .byte	$38
02731 09C4                        39            .byte	$39
02732 09C5                        3A            .byte	$3A
02733 09C6                        3B            .byte	$3B
02734 09C7                        3C            .byte	$3C
02735 09C8                        3D            .byte	$3D
02736 09C9                        3E            .byte	$3E
02737 09CA                        3F            .byte	$3F
02738                                           ! 605  0x01, 0x00, 0x0f, 0x00,
02739 09CB                        01            .byte	1
02740 09CC                        00            .byte	0
02741 09CD                        0F            .byte	$F
02742 09CE                        00            .byte	0
02743                                           ! 606  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02744 09CF                        00            .byte	0
02745 09D0                        00            .byte	0
02746 09D1                        00            .byte	0
02747 09D2                        00            .byte	0
02748 09D3                        00            .byte	0
02749 09D4                        00            .byte	0
02750 09D5                        05            .byte	5
02751 09D6                        0F            .byte	$F
02752 09D7                        FF            .byte	$FF
02753                                           ! 607 },
02754                                           ! 608 };
02755                                           !BCC_EOS
02756                                           ! 609 static Bit8u palette0[63+1][3]=
02757                                           ! 610 {
02758                       000009D8            _palette0:
02759                                           ! 611   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02760 09D8                        00            .byte	0
02761 09D9                        00            .byte	0
02762 09DA                        00            .byte	0
02763 09DB                        00            .byte	0
02764 09DC                        00            .byte	0
02765 09DD                        00            .byte	0
02766 09DE                        00            .byte	0
02767 09DF                        00            .byte	0
02768 09E0                        00            .byte	0
02769 09E1                        00            .byte	0
02770 09E2                        00            .byte	0
02771 09E3                        00            .byte	0
02772 09E4                        00            .byte	0
02773 09E5                        00            .byte	0
02774 09E6                        00            .byte	0
02775 09E7                        00            .byte	0
02776 09E8                        00            .byte	0
02777 09E9                        00            .byte	0
02778 09EA                        00            .byte	0
02779 09EB                        00            .byte	0
02780 09EC                        00            .byte	0
02781 09ED                        00            .byte	0
02782 09EE                        00            .byte	0
02783 09EF                        00            .byte	0
02784                                           ! 612   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02785 09F0                        2A            .byte	$2A
02786 09F1                        2A            .byte	$2A
02787 09F2                        2A            .byte	$2A
02788 09F3                        2A            .byte	$2A
02789 09F4                        2A            .byte	$2A
02790 09F5                        2A            .byte	$2A
02791 09F6                        2A            .byte	$2A
02792 09F7                        2A            .byte	$2A
02793 09F8                        2A            .byte	$2A
02794 09F9                        2A            .byte	$2A
02795 09FA                        2A            .byte	$2A
02796 09FB                        2A            .byte	$2A
02797 09FC                        2A            .byte	$2A
02798 09FD                        2A            .byte	$2A
02799 09FE                        2A            .byte	$2A
02800 09FF                        2A            .byte	$2A
02801 0A00                        2A            .byte	$2A
02802 0A01                        2A            .byte	$2A
02803 0A02                        2A            .byte	$2A
02804 0A03                        2A            .byte	$2A
02805 0A04                        2A            .byte	$2A
02806 0A05                        2A            .byte	$2A
02807 0A06                        2A            .byte	$2A
02808 0A07                        2A            .byte	$2A
02809                                           ! 613   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2
02810 0A08                        2A            .byte	$2A
02811 0A09                        2A            .byte	$2A
02812 0A0A                        2A            .byte	$2A
02813 0A0B                        2A            .byte	$2A
02814 0A0C                        2A            .byte	$2A
02815                                           ! 613 a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02816 0A0D                        2A            .byte	$2A
02817 0A0E                        2A            .byte	$2A
02818 0A0F                        2A            .byte	$2A
02819 0A10                        2A            .byte	$2A
02820 0A11                        2A            .byte	$2A
02821 0A12                        2A            .byte	$2A
02822 0A13                        2A            .byte	$2A
02823 0A14                        2A            .byte	$2A
02824 0A15                        2A            .byte	$2A
02825 0A16                        2A            .byte	$2A
02826 0A17                        2A            .byte	$2A
02827 0A18                        2A            .byte	$2A
02828 0A19                        2A            .byte	$2A
02829 0A1A                        2A            .byte	$2A
02830 0A1B                        2A            .byte	$2A
02831 0A1C                        2A            .byte	$2A
02832 0A1D                        2A            .byte	$2A
02833 0A1E                        2A            .byte	$2A
02834 0A1F                        2A            .byte	$2A
02835                                           ! 614   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02836 0A20                        3F            .byte	$3F
02837 0A21                        3F            .byte	$3F
02838 0A22                        3F            .byte	$3F
02839 0A23                        3F            .byte	$3F
02840 0A24                        3F            .byte	$3F
02841 0A25                        3F            .byte	$3F
02842 0A26                        3F            .byte	$3F
02843 0A27                        3F            .byte	$3F
02844 0A28                        3F            .byte	$3F
02845 0A29                        3F            .byte	$3F
02846 0A2A                        3F            .byte	$3F
02847 0A2B                        3F            .byte	$3F
02848 0A2C                        3F            .byte	$3F
02849 0A2D                        3F            .byte	$3F
02850 0A2E                        3F            .byte	$3F
02851 0A2F                        3F            .byte	$3F
02852 0A30                        3F            .byte	$3F
02853 0A31                        3F            .byte	$3F
02854 0A32                        3F            .byte	$3F
02855 0A33                        3F            .byte	$3F
02856 0A34                        3F            .byte	$3F
02857 0A35                        3F            .byte	$3F
02858 0A36                        3F            .byte	$3F
02859 0A37                        3F            .byte	$3F
02860                                           ! 615   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02861 0A38                        00            .byte	0
02862 0A39                        00            .byte	0
02863 0A3A                        00            .byte	0
02864 0A3B                        00            .byte	0
02865 0A3C                        00            .byte	0
02866 0A3D                        00            .byte	0
02867 0A3E                        00            .byte	0
02868 0A3F                        00            .byte	0
02869 0A40                        00            .byte	0
02870 0A41                        00            .byte	0
02871 0A42                        00            .byte	0
02872 0A43                        00            .byte	0
02873 0A44                        00            .byte	0
02874 0A45                        00            .byte	0
02875 0A46                        00            .byte	0
02876 0A47                        00            .byte	0
02877 0A48                        00            .byte	0
02878 0A49                        00            .byte	0
02879 0A4A                        00            .byte	0
02880 0A4B                        00            .byte	0
02881 0A4C                        00            .byte	0
02882 0A4D                        00            .byte	0
02883 0A4E                        00            .byte	0
02884 0A4F                        00            .byte	0
02885                                           ! 616   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02886 0A50                        2A            .byte	$2A
02887 0A51                        2A            .byte	$2A
02888 0A52                        2A            .byte	$2A
02889 0A53                        2A            .byte	$2A
02890 0A54                        2A            .byte	$2A
02891 0A55                        2A            .byte	$2A
02892 0A56                        2A            .byte	$2A
02893 0A57                        2A            .byte	$2A
02894 0A58                        2A            .byte	$2A
02895 0A59                        2A            .byte	$2A
02896 0A5A                        2A            .byte	$2A
02897 0A5B                        2A            .byte	$2A
02898 0A5C                        2A            .byte	$2A
02899 0A5D                        2A            .byte	$2A
02900 0A5E                        2A            .byte	$2A
02901 0A5F                        2A            .byte	$2A
02902 0A60                        2A            .byte	$2A
02903 0A61                        2A            .byte	$2A
02904 0A62                        2A            .byte	$2A
02905 0A63                        2A            .byte	$2A
02906 0A64                        2A            .byte	$2A
02907 0A65                        2A            .byte	$2A
02908 0A66                        2A            .byte	$2A
02909 0A67                        2A            .byte	$2A
02910                                           ! 617   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02911 0A68                        2A            .byte	$2A
02912 0A69                        2A            .byte	$2A
02913 0A6A                        2A            .byte	$2A
02914 0A6B                        2A            .byte	$2A
02915 0A6C                        2A            .byte	$2A
02916 0A6D                        2A            .byte	$2A
02917 0A6E                        2A            .byte	$2A
02918 0A6F                        2A            .byte	$2A
02919 0A70                        2A            .byte	$2A
02920 0A71                        2A            .byte	$2A
02921 0A72                        2A            .byte	$2A
02922 0A73                        2A            .byte	$2A
02923 0A74                        2A            .byte	$2A
02924 0A75                        2A            .byte	$2A
02925 0A76                        2A            .byte	$2A
02926 0A77                        2A            .byte	$2A
02927 0A78                        2A            .byte	$2A
02928 0A79                        2A            .byte	$2A
02929 0A7A                        2A            .byte	$2A
02930 0A7B                        2A            .byte	$2A
02931 0A7C                        2A            .byte	$2A
02932 0A7D                        2A            .byte	$2A
02933 0A7E                        2A            .byte	$2A
02934 0A7F                        2A            .byte	$2A
02935                                           ! 618   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02936 0A80                        3F            .byte	$3F
02937 0A81                        3F            .byte	$3F
02938 0A82                        3F            .byte	$3F
02939 0A83                        3F            .byte	$3F
02940 0A84                        3F            .byte	$3F
02941 0A85                        3F            .byte	$3F
02942 0A86                        3F            .byte	$3F
02943 0A87                        3F            .byte	$3F
02944 0A88                        3F            .byte	$3F
02945 0A89                        3F            .byte	$3F
02946 0A8A                        3F            .byte	$3F
02947 0A8B                        3F            .byte	$3F
02948 0A8C                        3F            .byte	$3F
02949 0A8D                        3F            .byte	$3F
02950 0A8E                        3F            .byte	$3F
02951 0A8F                        3F            .byte	$3F
02952 0A90                        3F            .byte	$3F
02953 0A91                        3F            .byte	$3F
02954 0A92                        3F            .byte	$3F
02955 0A93                        3F            .byte	$3F
02956 0A94                        3F            .byte	$3F
02957 0A95                        3F            .byte	$3F
02958 0A96                        3F            .byte	$3F
02959                                           ! 619 };
02960 0A97                        3F            .byte	$3F
02961                                           !BCC_EOS
02962                                           ! 620 static Bit8u palette1[63+1][3]=
02963                                           ! 621 {
02964                       00000A98            _palette1:
02965                                           ! 622   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02966 0A98                        00            .byte	0
02967 0A99                        00            .byte	0
02968 0A9A                        00            .byte	0
02969 0A9B                        00            .byte	0
02970 0A9C                        00            .byte	0
02971 0A9D                        2A            .byte	$2A
02972 0A9E                        00            .byte	0
02973 0A9F                        2A            .byte	$2A
02974 0AA0                        00            .byte	0
02975 0AA1                        00            .byte	0
02976 0AA2                        2A            .byte	$2A
02977 0AA3                        2A            .byte	$2A
02978 0AA4                        2A            .byte	$2A
02979 0AA5                        00            .byte	0
02980 0AA6                        00            .byte	0
02981 0AA7                        2A            .byte	$2A
02982 0AA8                        00            .byte	0
02983 0AA9                        2A            .byte	$2A
02984 0AAA                        2A            .byte	$2A
02985 0AAB                        15            .byte	$15
02986 0AAC                        00            .byte	0
02987 0AAD                        2A            .byte	$2A
02988 0AAE                        2A            .byte	$2A
02989 0AAF                        2A            .byte	$2A
02990                                           ! 623   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02991 0AB0                        00            .byte	0
02992 0AB1                        00            .byte	0
02993 0AB2                        00            .byte	0
02994 0AB3                        00            .byte	0
02995 0AB4                        00            .byte	0
02996 0AB5                        2A            .byte	$2A
02997 0AB6                        00            .byte	0
02998 0AB7                        2A            .byte	$2A
02999 0AB8                        00            .byte	0
03000 0AB9                        00            .byte	0
03001 0ABA                        2A            .byte	$2A
03002 0ABB                        2A            .byte	$2A
03003 0ABC                        2A            .byte	$2A
03004 0ABD                        00            .byte	0
03005 0ABE                        00            .byte	0
03006 0ABF                        2A            .byte	$2A
03007 0AC0                        00            .byte	0
03008 0AC1                        2A            .byte	$2A
03009 0AC2                        2A            .byte	$2A
03010 0AC3                        15            .byte	$15
03011 0AC4                        00            .byte	0
03012 0AC5                        2A            .byte	$2A
03013 0AC6                        2A            .byte	$2A
03014 0AC7                        2A            .byte	$2A
03015                                           ! 624   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03016 0AC8                        15            .byte	$15
03017 0AC9                        15            .byte	$15
03018 0ACA                        15            .byte	$15
03019 0ACB                        15            .byte	$15
03020 0ACC                        15            .byte	$15
03021 0ACD                        3F            .byte	$3F
03022 0ACE                        15            .byte	$15
03023 0ACF                        3F            .byte	$3F
03024 0AD0                        15            .byte	$15
03025 0AD1                        15            .byte	$15
03026 0AD2                        3F            .byte	$3F
03027 0AD3                        3F            .byte	$3F
03028 0AD4                        3F            .byte	$3F
03029 0AD5                        15            .byte	$15
03030 0AD6                        15            .byte	$15
03031 0AD7                        3F            .byte	$3F
03032 0AD8                        15            .byte	$15
03033 0AD9                        3F            .byte	$3F
03034 0ADA                        3F            .byte	$3F
03035 0ADB                        3F            .byte	$3F
03036 0ADC                        15            .byte	$15
03037 0ADD                        3F            .byte	$3F
03038 0ADE                        3F            .byte	$3F
03039 0ADF                        3F            .byte	$3F
03040                                           ! 625   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03041 0AE0                        15            .byte	$15
03042 0AE1                        15            .byte	$15
03043 0AE2                        15            .byte	$15
03044 0AE3                        15            .byte	$15
03045 0AE4                        15            .byte	$15
03046 0AE5                        3F            .byte	$3F
03047 0AE6                        15            .byte	$15
03048 0AE7                        3F            .byte	$3F
03049 0AE8                        15            .byte	$15
03050 0AE9                        15            .byte	$15
03051 0AEA                        3F            .byte	$3F
03052 0AEB                        3F            .byte	$3F
03053 0AEC                        3F            .byte	$3F
03054 0AED                        15            .byte	$15
03055 0AEE                        15            .byte	$15
03056 0AEF                        3F            .byte	$3F
03057 0AF0                        15            .byte	$15
03058 0AF1                        3F            .byte	$3F
03059 0AF2                        3F            .byte	$3F
03060 0AF3                        3F            .byte	$3F
03061 0AF4                        15            .byte	$15
03062 0AF5                        3F            .byte	$3F
03063 0AF6                        3F            .byte	$3F
03064 0AF7                        3F            .byte	$3F
03065                                           ! 626   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03066 0AF8                        00            .byte	0
03067 0AF9                        00            .byte	0
03068 0AFA                        00            .byte	0
03069 0AFB                        00            .byte	0
03070 0AFC                        00            .byte	0
03071 0AFD                        2A            .byte	$2A
03072 0AFE                        00            .byte	0
03073 0AFF                        2A            .byte	$2A
03074 0B00                        00            .byte	0
03075 0B01                        00            .byte	0
03076 0B02                        2A            .byte	$2A
03077 0B03                        2A            .byte	$2A
03078 0B04                        2A            .byte	$2A
03079 0B05                        00            .byte	0
03080 0B06                        00            .byte	0
03081 0B07                        2A            .byte	$2A
03082 0B08                        00            .byte	0
03083 0B09                        2A            .byte	$2A
03084 0B0A                        2A            .byte	$2A
03085 0B0B                        15            .byte	$15
03086 0B0C                        00            .byte	0
03087 0B0D                        2A            .byte	$2A
03088 0B0E                        2A            .byte	$2A
03089 0B0F                        2A            .byte	$2A
03090                                           ! 627   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03091 0B10                        00            .byte	0
03092 0B11                        00            .byte	0
03093 0B12                        00            .byte	0
03094 0B13                        00            .byte	0
03095 0B14                        00            .byte	0
03096 0B15                        2A            .byte	$2A
03097 0B16                        00            .byte	0
03098 0B17                        2A            .byte	$2A
03099 0B18                        00            .byte	0
03100 0B19                        00            .byte	0
03101 0B1A                        2A            .byte	$2A
03102 0B1B                        2A            .byte	$2A
03103 0B1C                        2A            .byte	$2A
03104 0B1D                        00            .byte	0
03105 0B1E                        00            .byte	0
03106 0B1F                        2A            .byte	$2A
03107 0B20                        00            .byte	0
03108 0B21                        2A            .byte	$2A
03109 0B22                        2A            .byte	$2A
03110 0B23                        15            .byte	$15
03111 0B24                        00            .byte	0
03112 0B25                        2A            .byte	$2A
03113 0B26                        2A            .byte	$2A
03114 0B27                        2A            .byte	$2A
03115                                           ! 628   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03116 0B28                        15            .byte	$15
03117 0B29                        15            .byte	$15
03118 0B2A                        15            .byte	$15
03119 0B2B                        15            .byte	$15
03120 0B2C                        15            .byte	$15
03121 0B2D                        3F            .byte	$3F
03122 0B2E                        15            .byte	$15
03123 0B2F                        3F            .byte	$3F
03124 0B30                        15            .byte	$15
03125 0B31                        15            .byte	$15
03126 0B32                        3F            .byte	$3F
03127 0B33                        3F            .byte	$3F
03128 0B34                        3F            .byte	$3F
03129 0B35                        15            .byte	$15
03130 0B36                        15            .byte	$15
03131 0B37                        3F            .byte	$3F
03132 0B38                        15            .byte	$15
03133 0B39                        3F            .byte	$3F
03134 0B3A                        3F            .byte	$3F
03135 0B3B                        3F            .byte	$3F
03136 0B3C                        15            .byte	$15
03137 0B3D                        3F            .byte	$3F
03138 0B3E                        3F            .byte	$3F
03139 0B3F                        3F            .byte	$3F
03140                                           ! 629   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03141 0B40                        15            .byte	$15
03142 0B41                        15            .byte	$15
03143 0B42                        15            .byte	$15
03144 0B43                        15            .byte	$15
03145 0B44                        15            .byte	$15
03146 0B45                        3F            .byte	$3F
03147 0B46                        15            .byte	$15
03148 0B47                        3F            .byte	$3F
03149 0B48                        15            .byte	$15
03150 0B49                        15            .byte	$15
03151 0B4A                        3F            .byte	$3F
03152 0B4B                        3F            .byte	$3F
03153 0B4C                        3F            .byte	$3F
03154 0B4D                        15            .byte	$15
03155 0B4E                        15            .byte	$15
03156 0B4F                        3F            .byte	$3F
03157 0B50                        15            .byte	$15
03158 0B51                        3F            .byte	$3F
03159 0B52                        3F            .byte	$3F
03160 0B53                        3F            .byte	$3F
03161 0B54                        15            .byte	$15
03162 0B55                        3F            .byte	$3F
03163 0B56                        3F            .byte	$3F
03164                                           ! 630 };
03165 0B57                        3F            .byte	$3F
03166                                           !BCC_EOS
03167                                           ! 631 static Bit8u palette2[63+1][3]=
03168                                           ! 632 {
03169                       00000B58            _palette2:
03170                                           ! 633   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03171 0B58                        00            .byte	0
03172 0B59                        00            .byte	0
03173 0B5A                        00            .byte	0
03174 0B5B                        00            .byte	0
03175 0B5C                        00            .byte	0
03176 0B5D                        2A            .byte	$2A
03177 0B5E                        00            .byte	0
03178 0B5F                        2A            .byte	$2A
03179 0B60                        00            .byte	0
03180 0B61                        00            .byte	0
03181 0B62                        2A            .byte	$2A
03182 0B63                        2A            .byte	$2A
03183 0B64                        2A            .byte	$2A
03184 0B65                        00            .byte	0
03185 0B66                        00            .byte	0
03186 0B67                        2A            .byte	$2A
03187 0B68                        00            .byte	0
03188 0B69                        2A            .byte	$2A
03189 0B6A                        2A            .byte	$2A
03190 0B6B                        2A            .byte	$2A
03191 0B6C                        00            .byte	0
03192 0B6D                        2A            .byte	$2A
03193 0B6E                        2A            .byte	$2A
03194 0B6F                        2A            .byte	$2A
03195                                           ! 634   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x
03196 0B70                        00            .byte	0
03197 0B71                        00            .byte	0
03198 0B72                        15            .byte	$15
03199 0B73                        00            .byte	0
03200 0B74                        00            .byte	0
03201 0B75                        3F            .byte	$3F
03202 0B76                        00            .byte	0
03203 0B77                        2A            .byte	$2A
03204 0B78                        15            .byte	$15
03205 0B79                        00            .byte	0
03206                                           ! 634 2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03207 0B7A                        2A            .byte	$2A
03208 0B7B                        3F            .byte	$3F
03209 0B7C                        2A            .byte	$2A
03210 0B7D                        00            .byte	0
03211 0B7E                        15            .byte	$15
03212 0B7F                        2A            .byte	$2A
03213 0B80                        00            .byte	0
03214 0B81                        3F            .byte	$3F
03215 0B82                        2A            .byte	$2A
03216 0B83                        2A            .byte	$2A
03217 0B84                        15            .byte	$15
03218 0B85                        2A            .byte	$2A
03219 0B86                        2A            .byte	$2A
03220 0B87                        3F            .byte	$3F
03221                                           ! 635   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03222 0B88                        00            .byte	0
03223 0B89                        15            .byte	$15
03224 0B8A                        00            .byte	0
03225 0B8B                        00            .byte	0
03226 0B8C                        15            .byte	$15
03227 0B8D                        2A            .byte	$2A
03228 0B8E                        00            .byte	0
03229 0B8F                        3F            .byte	$3F
03230 0B90                        00            .byte	0
03231 0B91                        00            .byte	0
03232 0B92                        3F            .byte	$3F
03233 0B93                        2A            .byte	$2A
03234 0B94                        2A            .byte	$2A
03235 0B95                        15            .byte	$15
03236 0B96                        00            .byte	0
03237 0B97                        2A            .byte	$2A
03238 0B98                        15            .byte	$15
03239 0B99                        2A            .byte	$2A
03240 0B9A                        2A            .byte	$2A
03241 0B9B                        3F            .byte	$3F
03242 0B9C                        00            .byte	0
03243 0B9D                        2A            .byte	$2A
03244 0B9E                        3F            .byte	$3F
03245 0B9F                        2A            .byte	$2A
03246                                           ! 636   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03247 0BA0                        00            .byte	0
03248 0BA1                        15            .byte	$15
03249 0BA2                        15            .byte	$15
03250 0BA3                        00            .byte	0
03251 0BA4                        15            .byte	$15
03252 0BA5                        3F            .byte	$3F
03253 0BA6                        00            .byte	0
03254 0BA7                        3F            .byte	$3F
03255 0BA8                        15            .byte	$15
03256 0BA9                        00            .byte	0
03257 0BAA                        3F            .byte	$3F
03258 0BAB                        3F            .byte	$3F
03259 0BAC                        2A            .byte	$2A
03260 0BAD                        15            .byte	$15
03261 0BAE                        15            .byte	$15
03262 0BAF                        2A            .byte	$2A
03263 0BB0                        15            .byte	$15
03264 0BB1                        3F            .byte	$3F
03265 0BB2                        2A            .byte	$2A
03266 0BB3                        3F            .byte	$3F
03267 0BB4                        15            .byte	$15
03268 0BB5                        2A            .byte	$2A
03269 0BB6                        3F            .byte	$3F
03270 0BB7                        3F            .byte	$3F
03271                                           ! 637   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03272 0BB8                        15            .byte	$15
03273 0BB9                        00            .byte	0
03274 0BBA                        00            .byte	0
03275 0BBB                        15            .byte	$15
03276 0BBC                        00            .byte	0
03277 0BBD                        2A            .byte	$2A
03278 0BBE                        15            .byte	$15
03279 0BBF                        2A            .byte	$2A
03280 0BC0                        00            .byte	0
03281 0BC1                        15            .byte	$15
03282 0BC2                        2A            .byte	$2A
03283 0BC3                        2A            .byte	$2A
03284 0BC4                        3F            .byte	$3F
03285 0BC5                        00            .byte	0
03286 0BC6                        00            .byte	0
03287 0BC7                        3F            .byte	$3F
03288 0BC8                        00            .byte	0
03289 0BC9                        2A            .byte	$2A
03290 0BCA                        3F            .byte	$3F
03291 0BCB                        2A            .byte	$2A
03292 0BCC                        00            .byte	0
03293 0BCD                        3F            .byte	$3F
03294 0BCE                        2A            .byte	$2A
03295 0BCF                        2A            .byte	$2A
03296                                           ! 638   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03297 0BD0                        15            .byte	$15
03298 0BD1                        00            .byte	0
03299 0BD2                        15            .byte	$15
03300 0BD3                        15            .byte	$15
03301 0BD4                        00            .byte	0
03302 0BD5                        3F            .byte	$3F
03303 0BD6                        15            .byte	$15
03304 0BD7                        2A            .byte	$2A
03305 0BD8                        15            .byte	$15
03306 0BD9                        15            .byte	$15
03307 0BDA                        2A            .byte	$2A
03308 0BDB                        3F            .byte	$3F
03309 0BDC                        3F            .byte	$3F
03310 0BDD                        00            .byte	0
03311 0BDE                        15            .byte	$15
03312 0BDF                        3F            .byte	$3F
03313 0BE0                        00            .byte	0
03314 0BE1                        3F            .byte	$3F
03315 0BE2                        3F            .byte	$3F
03316 0BE3                        2A            .byte	$2A
03317 0BE4                        15            .byte	$15
03318 0BE5                        3F            .byte	$3F
03319 0BE6                        2A            .byte	$2A
03320 0BE7                        3F            .byte	$3F
03321                                           ! 639   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03322 0BE8                        15            .byte	$15
03323 0BE9                        15            .byte	$15
03324 0BEA                        00            .byte	0
03325 0BEB                        15            .byte	$15
03326 0BEC                        15            .byte	$15
03327 0BED                        2A            .byte	$2A
03328 0BEE                        15            .byte	$15
03329 0BEF                        3F            .byte	$3F
03330 0BF0                        00            .byte	0
03331 0BF1                        15            .byte	$15
03332 0BF2                        3F            .byte	$3F
03333 0BF3                        2A            .byte	$2A
03334 0BF4                        3F            .byte	$3F
03335 0BF5                        15            .byte	$15
03336 0BF6                        00            .byte	0
03337 0BF7                        3F            .byte	$3F
03338 0BF8                        15            .byte	$15
03339 0BF9                        2A            .byte	$2A
03340 0BFA                        3F            .byte	$3F
03341 0BFB                        3F            .byte	$3F
03342 0BFC                        00            .byte	0
03343 0BFD                        3F            .byte	$3F
03344 0BFE                        3F            .byte	$3F
03345 0BFF                        2A            .byte	$2A
03346                                           ! 640   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03347 0C00                        15            .byte	$15
03348 0C01                        15            .byte	$15
03349 0C02                        15            .byte	$15
03350 0C03                        15            .byte	$15
03351 0C04                        15            .byte	$15
03352 0C05                        3F            .byte	$3F
03353 0C06                        15            .byte	$15
03354 0C07                        3F            .byte	$3F
03355 0C08                        15            .byte	$15
03356 0C09                        15            .byte	$15
03357 0C0A                        3F            .byte	$3F
03358 0C0B                        3F            .byte	$3F
03359 0C0C                        3F            .byte	$3F
03360 0C0D                        15            .byte	$15
03361 0C0E                        15            .byte	$15
03362 0C0F                        3F            .byte	$3F
03363 0C10                        15            .byte	$15
03364 0C11                        3F            .byte	$3F
03365 0C12                        3F            .byte	$3F
03366 0C13                        3F            .byte	$3F
03367 0C14                        15            .byte	$15
03368 0C15                        3F            .byte	$3F
03369 0C16                        3F            .byte	$3F
03370                                           ! 641 };
03371 0C17                        3F            .byte	$3F
03372                                           !BCC_EOS
03373                                           ! 642 static Bit8u palette3[256][3]=
03374                                           ! 643 {
03375                       00000C18            _palette3:
03376                                           ! 644   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03377 0C18                        00            .byte	0
03378 0C19                        00            .byte	0
03379 0C1A                        00            .byte	0
03380 0C1B                        00            .byte	0
03381 0C1C                        00            .byte	0
03382 0C1D                        2A            .byte	$2A
03383 0C1E                        00            .byte	0
03384 0C1F                        2A            .byte	$2A
03385 0C20                        00            .byte	0
03386 0C21                        00            .byte	0
03387 0C22                        2A            .byte	$2A
03388 0C23                        2A            .byte	$2A
03389 0C24                        2A            .byte	$2A
03390 0C25                        00            .byte	0
03391 0C26                        00            .byte	0
03392 0C27                        2A            .byte	$2A
03393 0C28                        00            .byte	0
03394 0C29                        2A            .byte	$2A
03395 0C2A                        2A            .byte	$2A
03396 0C2B                        15            .byte	$15
03397 0C2C                        00            .byte	0
03398 0C2D                        2A            .byte	$2A
03399 0C2E                        2A            .byte	$2A
03400 0C2F                        2A            .byte	$2A
03401                                           ! 645   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03402 0C30                        15            .byte	$15
03403 0C31                        15            .byte	$15
03404 0C32                        15            .byte	$15
03405 0C33                        15            .byte	$15
03406 0C34                        15            .byte	$15
03407 0C35                        3F            .byte	$3F
03408 0C36                        15            .byte	$15
03409 0C37                        3F            .byte	$3F
03410 0C38                        15            .byte	$15
03411 0C39                        15            .byte	$15
03412 0C3A                        3F            .byte	$3F
03413 0C3B                        3F            .byte	$3F
03414 0C3C                        3F            .byte	$3F
03415 0C3D                        15            .byte	$15
03416 0C3E                        15            .byte	$15
03417 0C3F                        3F            .byte	$3F
03418 0C40                        15            .byte	$15
03419 0C41                        3F            .byte	$3F
03420 0C42                        3F            .byte	$3F
03421 0C43                        3F            .byte	$3F
03422 0C44                        15            .byte	$15
03423 0C45                        3F            .byte	$3F
03424 0C46                        3F            .byte	$3F
03425 0C47                        3F            .byte	$3F
03426                                           ! 646   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03427 0C48                        00            .byte	0
03428 0C49                        00            .byte	0
03429 0C4A                        00            .byte	0
03430 0C4B                        05            .byte	5
03431 0C4C                        05            .byte	5
03432 0C4D                        05            .byte	5
03433 0C4E                        08            .byte	8
03434 0C4F                        08            .byte	8
03435 0C50                        08            .byte	8
03436 0C51                        0B            .byte	$B
03437 0C52                        0B            .byte	$B
03438 0C53                        0B            .byte	$B
03439 0C54                        0E            .byte	$E
03440 0C55                        0E            .byte	$E
03441 0C56                        0E            .byte	$E
03442 0C57                        11            .byte	$11
03443 0C58                        11            .byte	$11
03444 0C59                        11            .byte	$11
03445 0C5A                        14            .byte	$14
03446 0C5B                        14            .byte	$14
03447 0C5C                        14            .byte	$14
03448 0C5D                        18            .byte	$18
03449 0C5E                        18            .byte	$18
03450 0C5F                        18            .byte	$18
03451                                           ! 647   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03452 0C60                        1C            .byte	$1C
03453 0C61                        1C            .byte	$1C
03454 0C62                        1C            .byte	$1C
03455 0C63                        20            .byte	$20
03456 0C64                        20            .byte	$20
03457 0C65                        20            .byte	$20
03458 0C66                        24            .byte	$24
03459 0C67                        24            .byte	$24
03460 0C68                        24            .byte	$24
03461 0C69                        28            .byte	$28
03462 0C6A                        28            .byte	$28
03463 0C6B                        28            .byte	$28
03464 0C6C                        2D            .byte	$2D
03465 0C6D                        2D            .byte	$2D
03466 0C6E                        2D            .byte	$2D
03467 0C6F                        32            .byte	$32
03468 0C70                        32            .byte	$32
03469 0C71                        32            .byte	$32
03470 0C72                        38            .byte	$38
03471 0C73                        38            .byte	$38
03472 0C74                        38            .byte	$38
03473 0C75                        3F            .byte	$3F
03474 0C76                        3F            .byte	$3F
03475 0C77                        3F            .byte	$3F
03476                                           ! 648   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03477 0C78                        00            .byte	0
03478 0C79                        00            .byte	0
03479 0C7A                        3F            .byte	$3F
03480 0C7B                        10            .byte	$10
03481 0C7C                        00            .byte	0
03482 0C7D                        3F            .byte	$3F
03483 0C7E                        1F            .byte	$1F
03484 0C7F                        00            .byte	0
03485 0C80                        3F            .byte	$3F
03486 0C81                        2F            .byte	$2F
03487 0C82                        00            .byte	0
03488 0C83                        3F            .byte	$3F
03489 0C84                        3F            .byte	$3F
03490 0C85                        00            .byte	0
03491 0C86                        3F            .byte	$3F
03492 0C87                        3F            .byte	$3F
03493 0C88                        00            .byte	0
03494 0C89                        2F            .byte	$2F
03495 0C8A                        3F            .byte	$3F
03496 0C8B                        00            .byte	0
03497 0C8C                        1F            .byte	$1F
03498 0C8D                        3F            .byte	$3F
03499 0C8E                        00            .byte	0
03500 0C8F                        10            .byte	$10
03501                                           ! 649   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03502 0C90                        3F            .byte	$3F
03503 0C91                        00            .byte	0
03504 0C92                        00            .byte	0
03505 0C93                        3F            .byte	$3F
03506 0C94                        10            .byte	$10
03507 0C95                        00            .byte	0
03508 0C96                        3F            .byte	$3F
03509 0C97                        1F            .byte	$1F
03510 0C98                        00            .byte	0
03511 0C99                        3F            .byte	$3F
03512 0C9A                        2F            .byte	$2F
03513 0C9B                        00            .byte	0
03514 0C9C                        3F            .byte	$3F
03515 0C9D                        3F            .byte	$3F
03516 0C9E                        00            .byte	0
03517 0C9F                        2F            .byte	$2F
03518 0CA0                        3F            .byte	$3F
03519 0CA1                        00            .byte	0
03520 0CA2                        1F            .byte	$1F
03521 0CA3                        3F            .byte	$3F
03522 0CA4                        00            .byte	0
03523 0CA5                        10            .byte	$10
03524 0CA6                        3F            .byte	$3F
03525 0CA7                        00            .byte	0
03526                                           ! 650   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03527 0CA8                        00            .byte	0
03528 0CA9                        3F            .byte	$3F
03529 0CAA                        00            .byte	0
03530 0CAB                        00            .byte	0
03531 0CAC                        3F            .byte	$3F
03532 0CAD                        10            .byte	$10
03533 0CAE                        00            .byte	0
03534 0CAF                        3F            .byte	$3F
03535 0CB0                        1F            .byte	$1F
03536 0CB1                        00            .byte	0
03537 0CB2                        3F            .byte	$3F
03538 0CB3                        2F            .byte	$2F
03539 0CB4                        00            .byte	0
03540 0CB5                        3F            .byte	$3F
03541 0CB6                        3F            .byte	$3F
03542 0CB7                        00            .byte	0
03543 0CB8                        2F            .byte	$2F
03544 0CB9                        3F            .byte	$3F
03545 0CBA                        00            .byte	0
03546 0CBB                        1F            .byte	$1F
03547 0CBC                        3F            .byte	$3F
03548 0CBD                        00            .byte	0
03549 0CBE                        10            .byte	$10
03550 0CBF                        3F            .byte	$3F
03551                                           ! 651   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03552 0CC0                        1F            .byte	$1F
03553 0CC1                        1F            .byte	$1F
03554 0CC2                        3F            .byte	$3F
03555 0CC3                        27            .byte	$27
03556 0CC4                        1F            .byte	$1F
03557 0CC5                        3F            .byte	$3F
03558 0CC6                        2F            .byte	$2F
03559 0CC7                        1F            .byte	$1F
03560 0CC8                        3F            .byte	$3F
03561 0CC9                        37            .byte	$37
03562 0CCA                        1F            .byte	$1F
03563 0CCB                        3F            .byte	$3F
03564 0CCC                        3F            .byte	$3F
03565 0CCD                        1F            .byte	$1F
03566 0CCE                        3F            .byte	$3F
03567 0CCF                        3F            .byte	$3F
03568 0CD0                        1F            .byte	$1F
03569 0CD1                        37            .byte	$37
03570 0CD2                        3F            .byte	$3F
03571 0CD3                        1F            .byte	$1F
03572 0CD4                        2F            .byte	$2F
03573 0CD5                        3F            .byte	$3F
03574 0CD6                        1F            .byte	$1F
03575 0CD7                        27            .byte	$27
03576                                           ! 652   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0
03577 0CD8                        3F            .byte	$3F
03578 0CD9                        1F            .byte	$1F
03579 0CDA                        1F            .byte	$1F
03580 0CDB                        3F            .byte	$3F
03581 0CDC                        27            .byte	$27
03582 0CDD                        1F            .byte	$1F
03583 0CDE                        3F            .byte	$3F
03584 0CDF                        2F            .byte	$2F
03585 0CE0                        1F            .byte	$1F
03586 0CE1                        3F            .byte	$3F
03587 0CE2                        37            .byte	$37
03588 0CE3                        1F            .byte	$1F
03589 0CE4                        3F            .byte	$3F
03590 0CE5                        3F            .byte	$3F
03591 0CE6                        1F            .byte	$1F
03592 0CE7                        37            .byte	$37
03593 0CE8                        3F            .byte	$3F
03594 0CE9                        1F            .byte	$1F
03595 0CEA                        2F            .byte	$2F
03596 0CEB                        3F            .byte	$3F
03597 0CEC                        1F            .byte	$1F
03598 0CED                        27            .byte	$27
03599                                           ! 652 x3f,0x1f,
03600 0CEE                        3F            .byte	$3F
03601 0CEF                        1F            .byte	$1F
03602                                           ! 653   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03603 0CF0                        1F            .byte	$1F
03604 0CF1                        3F            .byte	$3F
03605 0CF2                        1F            .byte	$1F
03606 0CF3                        1F            .byte	$1F
03607 0CF4                        3F            .byte	$3F
03608 0CF5                        27            .byte	$27
03609 0CF6                        1F            .byte	$1F
03610 0CF7                        3F            .byte	$3F
03611 0CF8                        2F            .byte	$2F
03612 0CF9                        1F            .byte	$1F
03613 0CFA                        3F            .byte	$3F
03614 0CFB                        37            .byte	$37
03615 0CFC                        1F            .byte	$1F
03616 0CFD                        3F            .byte	$3F
03617 0CFE                        3F            .byte	$3F
03618 0CFF                        1F            .byte	$1F
03619 0D00                        37            .byte	$37
03620 0D01                        3F            .byte	$3F
03621 0D02                        1F            .byte	$1F
03622 0D03                        2F            .byte	$2F
03623 0D04                        3F            .byte	$3F
03624 0D05                        1F            .byte	$1F
03625 0D06                        27            .byte	$27
03626 0D07                        3F            .byte	$3F
03627                                           ! 654   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03628 0D08                        2D            .byte	$2D
03629 0D09                        2D            .byte	$2D
03630 0D0A                        3F            .byte	$3F
03631 0D0B                        31            .byte	$31
03632 0D0C                        2D            .byte	$2D
03633 0D0D                        3F            .byte	$3F
03634 0D0E                        36            .byte	$36
03635 0D0F                        2D            .byte	$2D
03636 0D10                        3F            .byte	$3F
03637 0D11                        3A            .byte	$3A
03638 0D12                        2D            .byte	$2D
03639 0D13                        3F            .byte	$3F
03640 0D14                        3F            .byte	$3F
03641 0D15                        2D            .byte	$2D
03642 0D16                        3F            .byte	$3F
03643 0D17                        3F            .byte	$3F
03644 0D18                        2D            .byte	$2D
03645 0D19                        3A            .byte	$3A
03646 0D1A                        3F            .byte	$3F
03647 0D1B                        2D            .byte	$2D
03648 0D1C                        36            .byte	$36
03649 0D1D                        3F            .byte	$3F
03650 0D1E                        2D            .byte	$2D
03651 0D1F                        31            .byte	$31
03652                                           ! 655   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03653 0D20                        3F            .byte	$3F
03654 0D21                        2D            .byte	$2D
03655 0D22                        2D            .byte	$2D
03656 0D23                        3F            .byte	$3F
03657 0D24                        31            .byte	$31
03658 0D25                        2D            .byte	$2D
03659 0D26                        3F            .byte	$3F
03660 0D27                        36            .byte	$36
03661 0D28                        2D            .byte	$2D
03662 0D29                        3F            .byte	$3F
03663 0D2A                        3A            .byte	$3A
03664 0D2B                        2D            .byte	$2D
03665 0D2C                        3F            .byte	$3F
03666 0D2D                        3F            .byte	$3F
03667 0D2E                        2D            .byte	$2D
03668 0D2F                        3A            .byte	$3A
03669 0D30                        3F            .byte	$3F
03670 0D31                        2D            .byte	$2D
03671 0D32                        36            .byte	$36
03672 0D33                        3F            .byte	$3F
03673 0D34                        2D            .byte	$2D
03674 0D35                        31            .byte	$31
03675 0D36                        3F            .byte	$3F
03676 0D37                        2D            .byte	$2D
03677                                           ! 656   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03678 0D38                        2D            .byte	$2D
03679 0D39                        3F            .byte	$3F
03680 0D3A                        2D            .byte	$2D
03681 0D3B                        2D            .byte	$2D
03682 0D3C                        3F            .byte	$3F
03683 0D3D                        31            .byte	$31
03684 0D3E                        2D            .byte	$2D
03685 0D3F                        3F            .byte	$3F
03686 0D40                        36            .byte	$36
03687 0D41                        2D            .byte	$2D
03688 0D42                        3F            .byte	$3F
03689 0D43                        3A            .byte	$3A
03690 0D44                        2D            .byte	$2D
03691 0D45                        3F            .byte	$3F
03692 0D46                        3F            .byte	$3F
03693 0D47                        2D            .byte	$2D
03694 0D48                        3A            .byte	$3A
03695 0D49                        3F            .byte	$3F
03696 0D4A                        2D            .byte	$2D
03697 0D4B                        36            .byte	$36
03698 0D4C                        3F            .byte	$3F
03699 0D4D                        2D            .byte	$2D
03700 0D4E                        31            .byte	$31
03701 0D4F                        3F            .byte	$3F
03702                                           ! 657   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03703 0D50                        00            .byte	0
03704 0D51                        00            .byte	0
03705 0D52                        1C            .byte	$1C
03706 0D53                        07            .byte	7
03707 0D54                        00            .byte	0
03708 0D55                        1C            .byte	$1C
03709 0D56                        0E            .byte	$E
03710 0D57                        00            .byte	0
03711 0D58                        1C            .byte	$1C
03712 0D59                        15            .byte	$15
03713 0D5A                        00            .byte	0
03714 0D5B                        1C            .byte	$1C
03715 0D5C                        1C            .byte	$1C
03716 0D5D                        00            .byte	0
03717 0D5E                        1C            .byte	$1C
03718 0D5F                        1C            .byte	$1C
03719 0D60                        00            .byte	0
03720 0D61                        15            .byte	$15
03721 0D62                        1C            .byte	$1C
03722 0D63                        00            .byte	0
03723 0D64                        0E            .byte	$E
03724 0D65                        1C            .byte	$1C
03725 0D66                        00            .byte	0
03726 0D67                        07            .byte	7
03727                                           ! 658   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03728 0D68                        1C            .byte	$1C
03729 0D69                        00            .byte	0
03730 0D6A                        00            .byte	0
03731 0D6B                        1C            .byte	$1C
03732 0D6C                        07            .byte	7
03733 0D6D                        00            .byte	0
03734 0D6E                        1C            .byte	$1C
03735 0D6F                        0E            .byte	$E
03736 0D70                        00            .byte	0
03737 0D71                        1C            .byte	$1C
03738 0D72                        15            .byte	$15
03739 0D73                        00            .byte	0
03740 0D74                        1C            .byte	$1C
03741 0D75                        1C            .byte	$1C
03742 0D76                        00            .byte	0
03743 0D77                        15            .byte	$15
03744 0D78                        1C            .byte	$1C
03745 0D79                        00            .byte	0
03746 0D7A                        0E            .byte	$E
03747 0D7B                        1C            .byte	$1C
03748 0D7C                        00            .byte	0
03749 0D7D                        07            .byte	7
03750 0D7E                        1C            .byte	$1C
03751 0D7F                        00            .byte	0
03752                                           ! 659   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03753 0D80                        00            .byte	0
03754 0D81                        1C            .byte	$1C
03755 0D82                        00            .byte	0
03756 0D83                        00            .byte	0
03757 0D84                        1C            .byte	$1C
03758 0D85                        07            .byte	7
03759 0D86                        00            .byte	0
03760 0D87                        1C            .byte	$1C
03761 0D88                        0E            .byte	$E
03762 0D89                        00            .byte	0
03763 0D8A                        1C            .byte	$1C
03764 0D8B                        15            .byte	$15
03765 0D8C                        00            .byte	0
03766 0D8D                        1C            .byte	$1C
03767 0D8E                        1C            .byte	$1C
03768 0D8F                        00            .byte	0
03769 0D90                        15            .byte	$15
03770 0D91                        1C            .byte	$1C
03771 0D92                        00            .byte	0
03772 0D93                        0E            .byte	$E
03773 0D94                        1C            .byte	$1C
03774 0D95                        00            .byte	0
03775 0D96                        07            .byte	7
03776 0D97                        1C            .byte	$1C
03777                                           ! 660   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03778 0D98                        0E            .byte	$E
03779 0D99                        0E            .byte	$E
03780 0D9A                        1C            .byte	$1C
03781 0D9B                        11            .byte	$11
03782 0D9C                        0E            .byte	$E
03783 0D9D                        1C            .byte	$1C
03784 0D9E                        15            .byte	$15
03785 0D9F                        0E            .byte	$E
03786 0DA0                        1C            .byte	$1C
03787 0DA1                        18            .byte	$18
03788 0DA2                        0E            .byte	$E
03789 0DA3                        1C            .byte	$1C
03790 0DA4                        1C            .byte	$1C
03791 0DA5                        0E            .byte	$E
03792 0DA6                        1C            .byte	$1C
03793 0DA7                        1C            .byte	$1C
03794 0DA8                        0E            .byte	$E
03795 0DA9                        18            .byte	$18
03796 0DAA                        1C            .byte	$1C
03797 0DAB                        0E            .byte	$E
03798 0DAC                        15            .byte	$15
03799 0DAD                        1C            .byte	$1C
03800 0DAE                        0E            .byte	$E
03801 0DAF                        11            .byte	$11
03802                                           ! 661   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03803 0DB0                        1C            .byte	$1C
03804 0DB1                        0E            .byte	$E
03805 0DB2                        0E            .byte	$E
03806 0DB3                        1C            .byte	$1C
03807 0DB4                        11            .byte	$11
03808 0DB5                        0E            .byte	$E
03809 0DB6                        1C            .byte	$1C
03810 0DB7                        15            .byte	$15
03811 0DB8                        0E            .byte	$E
03812 0DB9                        1C            .byte	$1C
03813 0DBA                        18            .byte	$18
03814 0DBB                        0E            .byte	$E
03815 0DBC                        1C            .byte	$1C
03816 0DBD                        1C            .byte	$1C
03817 0DBE                        0E            .byte	$E
03818 0DBF                        18            .byte	$18
03819 0DC0                        1C            .byte	$1C
03820 0DC1                        0E            .byte	$E
03821 0DC2                        15            .byte	$15
03822 0DC3                        1C            .byte	$1C
03823 0DC4                        0E            .byte	$E
03824 0DC5                        11            .byte	$11
03825 0DC6                        1C            .byte	$1C
03826 0DC7                        0E            .byte	$E
03827                                           ! 662   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03828 0DC8                        0E            .byte	$E
03829 0DC9                        1C            .byte	$1C
03830 0DCA                        0E            .byte	$E
03831 0DCB                        0E            .byte	$E
03832 0DCC                        1C            .byte	$1C
03833 0DCD                        11            .byte	$11
03834 0DCE                        0E            .byte	$E
03835 0DCF                        1C            .byte	$1C
03836 0DD0                        15            .byte	$15
03837 0DD1                        0E            .byte	$E
03838 0DD2                        1C            .byte	$1C
03839 0DD3                        18            .byte	$18
03840 0DD4                        0E            .byte	$E
03841 0DD5                        1C            .byte	$1C
03842 0DD6                        1C            .byte	$1C
03843 0DD7                        0E            .byte	$E
03844 0DD8                        18            .byte	$18
03845 0DD9                        1C            .byte	$1C
03846 0DDA                        0E            .byte	$E
03847 0DDB                        15            .byte	$15
03848 0DDC                        1C            .byte	$1C
03849 0DDD                        0E            .byte	$E
03850 0DDE                        11            .byte	$11
03851 0DDF                        1C            .byte	$1C
03852                                           ! 663   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03853 0DE0                        14            .byte	$14
03854 0DE1                        14            .byte	$14
03855 0DE2                        1C            .byte	$1C
03856 0DE3                        16            .byte	$16
03857 0DE4                        14            .byte	$14
03858 0DE5                        1C            .byte	$1C
03859 0DE6                        18            .byte	$18
03860 0DE7                        14            .byte	$14
03861 0DE8                        1C            .byte	$1C
03862 0DE9                        1A            .byte	$1A
03863 0DEA                        14            .byte	$14
03864 0DEB                        1C            .byte	$1C
03865 0DEC                        1C            .byte	$1C
03866 0DED                        14            .byte	$14
03867 0DEE                        1C            .byte	$1C
03868 0DEF                        1C            .byte	$1C
03869 0DF0                        14            .byte	$14
03870 0DF1                        1A            .byte	$1A
03871 0DF2                        1C            .byte	$1C
03872 0DF3                        14            .byte	$14
03873 0DF4                        18            .byte	$18
03874 0DF5                        1C            .byte	$1C
03875 0DF6                        14            .byte	$14
03876 0DF7                        16            .byte	$16
03877                                           ! 664   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03878 0DF8                        1C            .byte	$1C
03879 0DF9                        14            .byte	$14
03880 0DFA                        14            .byte	$14
03881 0DFB                        1C            .byte	$1C
03882 0DFC                        16            .byte	$16
03883 0DFD                        14            .byte	$14
03884 0DFE                        1C            .byte	$1C
03885 0DFF                        18            .byte	$18
03886 0E00                        14            .byte	$14
03887 0E01                        1C            .byte	$1C
03888 0E02                        1A            .byte	$1A
03889 0E03                        14            .byte	$14
03890 0E04                        1C            .byte	$1C
03891 0E05                        1C            .byte	$1C
03892 0E06                        14            .byte	$14
03893 0E07                        1A            .byte	$1A
03894 0E08                        1C            .byte	$1C
03895 0E09                        14            .byte	$14
03896 0E0A                        18            .byte	$18
03897 0E0B                        1C            .byte	$1C
03898 0E0C                        14            .byte	$14
03899 0E0D                        16            .byte	$16
03900 0E0E                        1C            .byte	$1C
03901 0E0F                        14            .byte	$14
03902                                           ! 665   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03903 0E10                        14            .byte	$14
03904 0E11                        1C            .byte	$1C
03905 0E12                        14            .byte	$14
03906 0E13                        14            .byte	$14
03907 0E14                        1C            .byte	$1C
03908 0E15                        16            .byte	$16
03909 0E16                        14            .byte	$14
03910 0E17                        1C            .byte	$1C
03911 0E18                        18            .byte	$18
03912 0E19                        14            .byte	$14
03913 0E1A                        1C            .byte	$1C
03914 0E1B                        1A            .byte	$1A
03915 0E1C                        14            .byte	$14
03916 0E1D                        1C            .byte	$1C
03917 0E1E                        1C            .byte	$1C
03918 0E1F                        14            .byte	$14
03919 0E20                        1A            .byte	$1A
03920 0E21                        1C            .byte	$1C
03921 0E22                        14            .byte	$14
03922 0E23                        18            .byte	$18
03923 0E24                        1C            .byte	$1C
03924 0E25                        14            .byte	$14
03925 0E26                        16            .byte	$16
03926 0E27                        1C            .byte	$1C
03927                                           ! 666   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03928 0E28                        00            .byte	0
03929 0E29                        00            .byte	0
03930 0E2A                        10            .byte	$10
03931 0E2B                        04            .byte	4
03932 0E2C                        00            .byte	0
03933 0E2D                        10            .byte	$10
03934 0E2E                        08            .byte	8
03935 0E2F                        00            .byte	0
03936 0E30                        10            .byte	$10
03937 0E31                        0C            .byte	$C
03938 0E32                        00            .byte	0
03939 0E33                        10            .byte	$10
03940 0E34                        10            .byte	$10
03941 0E35                        00            .byte	0
03942 0E36                        10            .byte	$10
03943 0E37                        10            .byte	$10
03944 0E38                        00            .byte	0
03945 0E39                        0C            .byte	$C
03946 0E3A                        10            .byte	$10
03947 0E3B                        00            .byte	0
03948 0E3C                        08            .byte	8
03949 0E3D                        10            .byte	$10
03950 0E3E                        00            .byte	0
03951 0E3F                        04            .byte	4
03952                                           ! 667   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03953 0E40                        10            .byte	$10
03954 0E41                        00            .byte	0
03955 0E42                        00            .byte	0
03956 0E43                        10            .byte	$10
03957 0E44                        04            .byte	4
03958 0E45                        00            .byte	0
03959 0E46                        10            .byte	$10
03960 0E47                        08            .byte	8
03961 0E48                        00            .byte	0
03962 0E49                        10            .byte	$10
03963 0E4A                        0C            .byte	$C
03964 0E4B                        00            .byte	0
03965 0E4C                        10            .byte	$10
03966 0E4D                        10            .byte	$10
03967 0E4E                        00            .byte	0
03968 0E4F                        0C            .byte	$C
03969 0E50                        10            .byte	$10
03970 0E51                        00            .byte	0
03971 0E52                        08            .byte	8
03972 0E53                        10            .byte	$10
03973 0E54                        00            .byte	0
03974 0E55                        04            .byte	4
03975 0E56                        10            .byte	$10
03976 0E57                        00            .byte	0
03977                                           ! 668   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0
03978 0E58                        00            .byte	0
03979 0E59                        10            .byte	$10
03980 0E5A                        00            .byte	0
03981 0E5B                        00            .byte	0
03982 0E5C                        10            .byte	$10
03983 0E5D                        04            .byte	4
03984 0E5E                        00            .byte	0
03985 0E5F                        10            .byte	$10
03986 0E60                        08            .byte	8
03987 0E61                        00            .byte	0
03988 0E62                        10            .byte	$10
03989 0E63                        0C            .byte	$C
03990 0E64                        00            .byte	0
03991 0E65                        10            .byte	$10
03992 0E66                        10            .byte	$10
03993 0E67                        00            .byte	0
03994                                           ! 668 x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
03995 0E68                        0C            .byte	$C
03996 0E69                        10            .byte	$10
03997 0E6A                        00            .byte	0
03998 0E6B                        08            .byte	8
03999 0E6C                        10            .byte	$10
04000 0E6D                        00            .byte	0
04001 0E6E                        04            .byte	4
04002 0E6F                        10            .byte	$10
04003                                           ! 669   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04004 0E70                        08            .byte	8
04005 0E71                        08            .byte	8
04006 0E72                        10            .byte	$10
04007 0E73                        0A            .byte	$A
04008 0E74                        08            .byte	8
04009 0E75                        10            .byte	$10
04010 0E76                        0C            .byte	$C
04011 0E77                        08            .byte	8
04012 0E78                        10            .byte	$10
04013 0E79                        0E            .byte	$E
04014 0E7A                        08            .byte	8
04015 0E7B                        10            .byte	$10
04016 0E7C                        10            .byte	$10
04017 0E7D                        08            .byte	8
04018 0E7E                        10            .byte	$10
04019 0E7F                        10            .byte	$10
04020 0E80                        08            .byte	8
04021 0E81                        0E            .byte	$E
04022 0E82                        10            .byte	$10
04023 0E83                        08            .byte	8
04024 0E84                        0C            .byte	$C
04025 0E85                        10            .byte	$10
04026 0E86                        08            .byte	8
04027 0E87                        0A            .byte	$A
04028                                           ! 670   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04029 0E88                        10            .byte	$10
04030 0E89                        08            .byte	8
04031 0E8A                        08            .byte	8
04032 0E8B                        10            .byte	$10
04033 0E8C                        0A            .byte	$A
04034 0E8D                        08            .byte	8
04035 0E8E                        10            .byte	$10
04036 0E8F                        0C            .byte	$C
04037 0E90                        08            .byte	8
04038 0E91                        10            .byte	$10
04039 0E92                        0E            .byte	$E
04040 0E93                        08            .byte	8
04041 0E94                        10            .byte	$10
04042 0E95                        10            .byte	$10
04043 0E96                        08            .byte	8
04044 0E97                        0E            .byte	$E
04045 0E98                        10            .byte	$10
04046 0E99                        08            .byte	8
04047 0E9A                        0C            .byte	$C
04048 0E9B                        10            .byte	$10
04049 0E9C                        08            .byte	8
04050 0E9D                        0A            .byte	$A
04051 0E9E                        10            .byte	$10
04052 0E9F                        08            .byte	8
04053                                           ! 671   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04054 0EA0                        08            .byte	8
04055 0EA1                        10            .byte	$10
04056 0EA2                        08            .byte	8
04057 0EA3                        08            .byte	8
04058 0EA4                        10            .byte	$10
04059 0EA5                        0A            .byte	$A
04060 0EA6                        08            .byte	8
04061 0EA7                        10            .byte	$10
04062 0EA8                        0C            .byte	$C
04063 0EA9                        08            .byte	8
04064 0EAA                        10            .byte	$10
04065 0EAB                        0E            .byte	$E
04066 0EAC                        08            .byte	8
04067 0EAD                        10            .byte	$10
04068 0EAE                        10            .byte	$10
04069 0EAF                        08            .byte	8
04070 0EB0                        0E            .byte	$E
04071 0EB1                        10            .byte	$10
04072 0EB2                        08            .byte	8
04073 0EB3                        0C            .byte	$C
04074 0EB4                        10            .byte	$10
04075 0EB5                        08            .byte	8
04076 0EB6                        0A            .byte	$A
04077 0EB7                        10            .byte	$10
04078                                           ! 672   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04079 0EB8                        0B            .byte	$B
04080 0EB9                        0B            .byte	$B
04081 0EBA                        10            .byte	$10
04082 0EBB                        0C            .byte	$C
04083 0EBC                        0B            .byte	$B
04084 0EBD                        10            .byte	$10
04085 0EBE                        0D            .byte	$D
04086 0EBF                        0B            .byte	$B
04087 0EC0                        10            .byte	$10
04088 0EC1                        0F            .byte	$F
04089 0EC2                        0B            .byte	$B
04090 0EC3                        10            .byte	$10
04091 0EC4                        10            .byte	$10
04092 0EC5                        0B            .byte	$B
04093 0EC6                        10            .byte	$10
04094 0EC7                        10            .byte	$10
04095 0EC8                        0B            .byte	$B
04096 0EC9                        0F            .byte	$F
04097 0ECA                        10            .byte	$10
04098 0ECB                        0B            .byte	$B
04099 0ECC                        0D            .byte	$D
04100 0ECD                        10            .byte	$10
04101 0ECE                        0B            .byte	$B
04102 0ECF                        0C            .byte	$C
04103                                           ! 673   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04104 0ED0                        10            .byte	$10
04105 0ED1                        0B            .byte	$B
04106 0ED2                        0B            .byte	$B
04107 0ED3                        10            .byte	$10
04108 0ED4                        0C            .byte	$C
04109 0ED5                        0B            .byte	$B
04110 0ED6                        10            .byte	$10
04111 0ED7                        0D            .byte	$D
04112 0ED8                        0B            .byte	$B
04113 0ED9                        10            .byte	$10
04114 0EDA                        0F            .byte	$F
04115 0EDB                        0B            .byte	$B
04116 0EDC                        10            .byte	$10
04117 0EDD                        10            .byte	$10
04118 0EDE                        0B            .byte	$B
04119 0EDF                        0F            .byte	$F
04120 0EE0                        10            .byte	$10
04121 0EE1                        0B            .byte	$B
04122 0EE2                        0D            .byte	$D
04123 0EE3                        10            .byte	$10
04124 0EE4                        0B            .byte	$B
04125 0EE5                        0C            .byte	$C
04126 0EE6                        10            .byte	$10
04127 0EE7                        0B            .byte	$B
04128                                           ! 674   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04129 0EE8                        0B            .byte	$B
04130 0EE9                        10            .byte	$10
04131 0EEA                        0B            .byte	$B
04132 0EEB                        0B            .byte	$B
04133 0EEC                        10            .byte	$10
04134 0EED                        0C            .byte	$C
04135 0EEE                        0B            .byte	$B
04136 0EEF                        10            .byte	$10
04137 0EF0                        0D            .byte	$D
04138 0EF1                        0B            .byte	$B
04139 0EF2                        10            .byte	$10
04140 0EF3                        0F            .byte	$F
04141 0EF4                        0B            .byte	$B
04142 0EF5                        10            .byte	$10
04143 0EF6                        10            .byte	$10
04144 0EF7                        0B            .byte	$B
04145 0EF8                        0F            .byte	$F
04146 0EF9                        10            .byte	$10
04147 0EFA                        0B            .byte	$B
04148 0EFB                        0D            .byte	$D
04149 0EFC                        10            .byte	$10
04150 0EFD                        0B            .byte	$B
04151 0EFE                        0C            .byte	$C
04152 0EFF                        10            .byte	$10
04153                                           ! 675   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04154 0F00                        00            .byte	0
04155 0F01                        00            .byte	0
04156 0F02                        00            .byte	0
04157 0F03                        00            .byte	0
04158 0F04                        00            .byte	0
04159 0F05                        00            .byte	0
04160 0F06                        00            .byte	0
04161 0F07                        00            .byte	0
04162 0F08                        00            .byte	0
04163 0F09                        00            .byte	0
04164 0F0A                        00            .byte	0
04165 0F0B                        00            .byte	0
04166 0F0C                        00            .byte	0
04167 0F0D                        00            .byte	0
04168 0F0E                        00            .byte	0
04169 0F0F                        00            .byte	0
04170 0F10                        00            .byte	0
04171 0F11                        00            .byte	0
04172 0F12                        00            .byte	0
04173 0F13                        00            .byte	0
04174 0F14                        00            .byte	0
04175 0F15                        00            .byte	0
04176 0F16                        00            .byte	0
04177                                           ! 676 };
04178 0F17                        00            .byte	0
04179                                           !BCC_EOS
04180                                           ! 677 static Bit8u static_functionality[0x10]=
04181                                           ! 678 {
04182                       00000F18            _static_functionality:
04183                                           ! 679          0xff,
04184 0F18                        FF            .byte	$FF
04185                                           ! 680          0xe0,
04186 0F19                        E0            .byte	$E0
04187                                           ! 681          0x0f,
04188 0F1A                        0F            .byte	$F
04189                                           ! 682          0x00, 0x00, 0x00, 0x00,
04190 0F1B                        00            .byte	0
04191 0F1C                        00            .byte	0
04192 0F1D                        00            .byte	0
04193 0F1E                        00            .byte	0
04194                                           ! 683          0x07,
04195 0F1F                        07            .byte	7
04196                                           ! 684          0x02,
04197 0F20                        02            .byte	2
04198                                           ! 685          0x08,
04199 0F21                        08            .byte	8
04200                                           ! 686          0xe7,
04201 0F22                        E7            .byte	$E7
04202                                           ! 687          0x0c,
04203 0F23                        0C            .byte	$C
04204                                           ! 688          0x00,
04205 0F24                        00            .byte	0
04206                                           ! 689          0x00,
04207 0F25                        00            .byte	0
04208                                           ! 690          0x00,
04209 0F26                        00            .byte	0
04210                                           ! 691          0x00
04211                                           ! 692 };
04212 0F27                        00            .byte	0
04213                                           !BCC_EOS
04214                                           ! 693 static Bit8u vgafont8[256*8]=
04215                                           ! 694 {
04216                       00000F28            _vgafont8:
04217                                           ! 695  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04218 0F28                        00            .byte	0
04219 0F29                        00            .byte	0
04220 0F2A                        00            .byte	0
04221 0F2B                        00            .byte	0
04222 0F2C                        00            .byte	0
04223 0F2D                        00            .byte	0
04224 0F2E                        00            .byte	0
04225 0F2F                        00            .byte	0
04226                                           ! 696  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04227 0F30                        7E            .byte	$7E
04228 0F31                        81            .byte	$81
04229 0F32                        A5            .byte	$A5
04230 0F33                        81            .byte	$81
04231 0F34                        BD            .byte	$BD
04232 0F35                        99            .byte	$99
04233 0F36                        81            .byte	$81
04234 0F37                        7E            .byte	$7E
04235                                           ! 697  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04236 0F38                        7E            .byte	$7E
04237 0F39                        FF            .byte	$FF
04238 0F3A                        DB            .byte	$DB
04239 0F3B                        FF            .byte	$FF
04240 0F3C                        C3            .byte	$C3
04241 0F3D                        E7            .byte	$E7
04242 0F3E                        FF            .byte	$FF
04243 0F3F                        7E            .byte	$7E
04244                                           ! 698  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04245 0F40                        6C            .byte	$6C
04246 0F41                        FE            .byte	$FE
04247 0F42                        FE            .byte	$FE
04248 0F43                        FE            .byte	$FE
04249 0F44                        7C            .byte	$7C
04250 0F45                        38            .byte	$38
04251 0F46                        10            .byte	$10
04252 0F47                        00            .byte	0
04253                                           ! 699  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04254 0F48                        10            .byte	$10
04255 0F49                        38            .byte	$38
04256 0F4A                        7C            .byte	$7C
04257 0F4B                        FE            .byte	$FE
04258 0F4C                        7C            .byte	$7C
04259 0F4D                        38            .byte	$38
04260 0F4E                        10            .byte	$10
04261 0F4F                        00            .byte	0
04262                                           ! 700  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04263 0F50                        38            .byte	$38
04264 0F51                        7C            .byte	$7C
04265 0F52                        38            .byte	$38
04266 0F53                        FE            .byte	$FE
04267 0F54                        FE            .byte	$FE
04268 0F55                        7C            .byte	$7C
04269 0F56                        38            .byte	$38
04270 0F57                        7C            .byte	$7C
04271                                           ! 701  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04272 0F58                        10            .byte	$10
04273 0F59                        10            .byte	$10
04274 0F5A                        38            .byte	$38
04275 0F5B                        7C            .byte	$7C
04276 0F5C                        FE            .byte	$FE
04277 0F5D                        7C            .byte	$7C
04278 0F5E                        38            .byte	$38
04279 0F5F                        7C            .byte	$7C
04280                                           ! 702  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04281 0F60                        00            .byte	0
04282 0F61                        00            .byte	0
04283 0F62                        18            .byte	$18
04284 0F63                        3C            .byte	$3C
04285 0F64                        3C            .byte	$3C
04286 0F65                        18            .byte	$18
04287 0F66                        00            .byte	0
04288 0F67                        00            .byte	0
04289                                           ! 703  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04290 0F68                        FF            .byte	$FF
04291 0F69                        FF            .byte	$FF
04292 0F6A                        E7            .byte	$E7
04293 0F6B                        C3            .byte	$C3
04294 0F6C                        C3            .byte	$C3
04295 0F6D                        E7            .byte	$E7
04296 0F6E                        FF            .byte	$FF
04297 0F6F                        FF            .byte	$FF
04298                                           ! 704  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04299 0F70                        00            .byte	0
04300 0F71                        3C            .byte	$3C
04301 0F72                        66            .byte	$66
04302 0F73                        42            .byte	$42
04303 0F74                        42            .byte	$42
04304 0F75                        66            .byte	$66
04305 0F76                        3C            .byte	$3C
04306 0F77                        00            .byte	0
04307                                           ! 705  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04308 0F78                        FF            .byte	$FF
04309 0F79                        C3            .byte	$C3
04310 0F7A                        99            .byte	$99
04311 0F7B                        BD            .byte	$BD
04312 0F7C                        BD            .byte	$BD
04313 0F7D                        99            .byte	$99
04314 0F7E                        C3            .byte	$C3
04315 0F7F                        FF            .byte	$FF
04316                                           ! 706  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04317 0F80                        0F            .byte	$F
04318 0F81                        07            .byte	7
04319 0F82                        0F            .byte	$F
04320 0F83                        7D            .byte	$7D
04321 0F84                        CC            .byte	$CC
04322 0F85                        CC            .byte	$CC
04323 0F86                        CC            .byte	$CC
04324 0F87                        78            .byte	$78
04325                                           ! 707  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04326 0F88                        3C            .byte	$3C
04327 0F89                        66            .byte	$66
04328 0F8A                        66            .byte	$66
04329 0F8B                        66            .byte	$66
04330 0F8C                        3C            .byte	$3C
04331 0F8D                        18            .byte	$18
04332 0F8E                        7E            .byte	$7E
04333 0F8F                        18            .byte	$18
04334                                           ! 708  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04335 0F90                        3F            .byte	$3F
04336 0F91                        33            .byte	$33
04337 0F92                        3F            .byte	$3F
04338 0F93                        30            .byte	$30
04339 0F94                        30            .byte	$30
04340 0F95                        70            .byte	$70
04341 0F96                        F0            .byte	$F0
04342 0F97                        E0            .byte	$E0
04343                                           ! 709  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04344 0F98                        7F            .byte	$7F
04345 0F99                        63            .byte	$63
04346 0F9A                        7F            .byte	$7F
04347 0F9B                        63            .byte	$63
04348 0F9C                        63            .byte	$63
04349 0F9D                        67            .byte	$67
04350 0F9E                        E6            .byte	$E6
04351 0F9F                        C0            .byte	$C0
04352                                           ! 710  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04353 0FA0                        99            .byte	$99
04354 0FA1                        5A            .byte	$5A
04355 0FA2                        3C            .byte	$3C
04356 0FA3                        E7            .byte	$E7
04357 0FA4                        E7            .byte	$E7
04358 0FA5                        3C            .byte	$3C
04359 0FA6                        5A            .byte	$5A
04360 0FA7                        99            .byte	$99
04361                                           ! 711  0x80, 0xe0, 0xf8, 0
04362 0FA8                        80            .byte	$80
04363 0FA9                        E0            .byte	$E0
04364 0FAA                        F8            .byte	$F8
04365                                           ! 711 xfe, 0xf8, 0xe0, 0x80, 0x00,
04366 0FAB                        FE            .byte	$FE
04367 0FAC                        F8            .byte	$F8
04368 0FAD                        E0            .byte	$E0
04369 0FAE                        80            .byte	$80
04370 0FAF                        00            .byte	0
04371                                           ! 712  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04372 0FB0                        02            .byte	2
04373 0FB1                        0E            .byte	$E
04374 0FB2                        3E            .byte	$3E
04375 0FB3                        FE            .byte	$FE
04376 0FB4                        3E            .byte	$3E
04377 0FB5                        0E            .byte	$E
04378 0FB6                        02            .byte	2
04379 0FB7                        00            .byte	0
04380                                           ! 713  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04381 0FB8                        18            .byte	$18
04382 0FB9                        3C            .byte	$3C
04383 0FBA                        7E            .byte	$7E
04384 0FBB                        18            .byte	$18
04385 0FBC                        18            .byte	$18
04386 0FBD                        7E            .byte	$7E
04387 0FBE                        3C            .byte	$3C
04388 0FBF                        18            .byte	$18
04389                                           ! 714  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04390 0FC0                        66            .byte	$66
04391 0FC1                        66            .byte	$66
04392 0FC2                        66            .byte	$66
04393 0FC3                        66            .byte	$66
04394 0FC4                        66            .byte	$66
04395 0FC5                        00            .byte	0
04396 0FC6                        66            .byte	$66
04397 0FC7                        00            .byte	0
04398                                           ! 715  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04399 0FC8                        7F            .byte	$7F
04400 0FC9                        DB            .byte	$DB
04401 0FCA                        DB            .byte	$DB
04402 0FCB                        7B            .byte	$7B
04403 0FCC                        1B            .byte	$1B
04404 0FCD                        1B            .byte	$1B
04405 0FCE                        1B            .byte	$1B
04406 0FCF                        00            .byte	0
04407                                           ! 716  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04408 0FD0                        3E            .byte	$3E
04409 0FD1                        63            .byte	$63
04410 0FD2                        38            .byte	$38
04411 0FD3                        6C            .byte	$6C
04412 0FD4                        6C            .byte	$6C
04413 0FD5                        38            .byte	$38
04414 0FD6                        CC            .byte	$CC
04415 0FD7                        78            .byte	$78
04416                                           ! 717  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04417 0FD8                        00            .byte	0
04418 0FD9                        00            .byte	0
04419 0FDA                        00            .byte	0
04420 0FDB                        00            .byte	0
04421 0FDC                        7E            .byte	$7E
04422 0FDD                        7E            .byte	$7E
04423 0FDE                        7E            .byte	$7E
04424 0FDF                        00            .byte	0
04425                                           ! 718  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04426 0FE0                        18            .byte	$18
04427 0FE1                        3C            .byte	$3C
04428 0FE2                        7E            .byte	$7E
04429 0FE3                        18            .byte	$18
04430 0FE4                        7E            .byte	$7E
04431 0FE5                        3C            .byte	$3C
04432 0FE6                        18            .byte	$18
04433 0FE7                        FF            .byte	$FF
04434                                           ! 719  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04435 0FE8                        18            .byte	$18
04436 0FE9                        3C            .byte	$3C
04437 0FEA                        7E            .byte	$7E
04438 0FEB                        18            .byte	$18
04439 0FEC                        18            .byte	$18
04440 0FED                        18            .byte	$18
04441 0FEE                        18            .byte	$18
04442 0FEF                        00            .byte	0
04443                                           ! 720  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04444 0FF0                        18            .byte	$18
04445 0FF1                        18            .byte	$18
04446 0FF2                        18            .byte	$18
04447 0FF3                        18            .byte	$18
04448 0FF4                        7E            .byte	$7E
04449 0FF5                        3C            .byte	$3C
04450 0FF6                        18            .byte	$18
04451 0FF7                        00            .byte	0
04452                                           ! 721  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04453 0FF8                        00            .byte	0
04454 0FF9                        18            .byte	$18
04455 0FFA                        0C            .byte	$C
04456 0FFB                        FE            .byte	$FE
04457 0FFC                        0C            .byte	$C
04458 0FFD                        18            .byte	$18
04459 0FFE                        00            .byte	0
04460 0FFF                        00            .byte	0
04461                                           ! 722  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04462 1000                        00            .byte	0
04463 1001                        30            .byte	$30
04464 1002                        60            .byte	$60
04465 1003                        FE            .byte	$FE
04466 1004                        60            .byte	$60
04467 1005                        30            .byte	$30
04468 1006                        00            .byte	0
04469 1007                        00            .byte	0
04470                                           ! 723  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04471 1008                        00            .byte	0
04472 1009                        00            .byte	0
04473 100A                        C0            .byte	$C0
04474 100B                        C0            .byte	$C0
04475 100C                        C0            .byte	$C0
04476 100D                        FE            .byte	$FE
04477 100E                        00            .byte	0
04478 100F                        00            .byte	0
04479                                           ! 724  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04480 1010                        00            .byte	0
04481 1011                        24            .byte	$24
04482 1012                        66            .byte	$66
04483 1013                        FF            .byte	$FF
04484 1014                        66            .byte	$66
04485 1015                        24            .byte	$24
04486 1016                        00            .byte	0
04487 1017                        00            .byte	0
04488                                           ! 725  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04489 1018                        00            .byte	0
04490 1019                        18            .byte	$18
04491 101A                        3C            .byte	$3C
04492 101B                        7E            .byte	$7E
04493 101C                        FF            .byte	$FF
04494 101D                        FF            .byte	$FF
04495 101E                        00            .byte	0
04496 101F                        00            .byte	0
04497                                           ! 726  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04498 1020                        00            .byte	0
04499 1021                        FF            .byte	$FF
04500 1022                        FF            .byte	$FF
04501 1023                        7E            .byte	$7E
04502 1024                        3C            .byte	$3C
04503 1025                        18            .byte	$18
04504 1026                        00            .byte	0
04505 1027                        00            .byte	0
04506                                           ! 727  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04507 1028                        00            .byte	0
04508 1029                        00            .byte	0
04509 102A                        00            .byte	0
04510 102B                        00            .byte	0
04511 102C                        00            .byte	0
04512 102D                        00            .byte	0
04513 102E                        00            .byte	0
04514 102F                        00            .byte	0
04515                                           ! 728  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04516 1030                        30            .byte	$30
04517 1031                        78            .byte	$78
04518 1032                        78            .byte	$78
04519 1033                        30            .byte	$30
04520 1034                        30            .byte	$30
04521 1035                        00            .byte	0
04522 1036                        30            .byte	$30
04523 1037                        00            .byte	0
04524                                           ! 729  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04525 1038                        6C            .byte	$6C
04526 1039                        6C            .byte	$6C
04527 103A                        6C            .byte	$6C
04528 103B                        00            .byte	0
04529 103C                        00            .byte	0
04530 103D                        00            .byte	0
04531 103E                        00            .byte	0
04532 103F                        00            .byte	0
04533                                           ! 730  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04534 1040                        6C            .byte	$6C
04535 1041                        6C            .byte	$6C
04536 1042                        FE            .byte	$FE
04537 1043                        6C            .byte	$6C
04538 1044                        FE            .byte	$FE
04539 1045                        6C            .byte	$6C
04540 1046                        6C            .byte	$6C
04541 1047                        00            .byte	0
04542                                           ! 731  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04543 1048                        30            .byte	$30
04544 1049                        7C            .byte	$7C
04545 104A                        C0            .byte	$C0
04546 104B                        78            .byte	$78
04547 104C                        0C            .byte	$C
04548 104D                        F8            .byte	$F8
04549 104E                        30            .byte	$30
04550 104F                        00            .byte	0
04551                                           ! 732  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04552 1050                        00            .byte	0
04553 1051                        C6            .byte	$C6
04554 1052                        CC            .byte	$CC
04555 1053                        18            .byte	$18
04556 1054                        30            .byte	$30
04557 1055                        66            .byte	$66
04558 1056                        C6            .byte	$C6
04559 1057                        00            .byte	0
04560                                           ! 733  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04561 1058                        38            .byte	$38
04562 1059                        6C            .byte	$6C
04563 105A                        38            .byte	$38
04564 105B                        76            .byte	$76
04565 105C                        DC            .byte	$DC
04566 105D                        CC            .byte	$CC
04567 105E                        76            .byte	$76
04568 105F                        00            .byte	0
04569                                           ! 734  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04570 1060                        60            .byte	$60
04571 1061                        60            .byte	$60
04572 1062                        C0            .byte	$C0
04573 1063                        00            .byte	0
04574 1064                        00            .byte	0
04575 1065                        00            .byte	0
04576 1066                        00            .byte	0
04577 1067                        00            .byte	0
04578                                           ! 735  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04579 1068                        18            .byte	$18
04580 1069                        30            .byte	$30
04581 106A                        60            .byte	$60
04582 106B                        60            .byte	$60
04583 106C                        60            .byte	$60
04584 106D                        30            .byte	$30
04585 106E                        18            .byte	$18
04586 106F                        00            .byte	0
04587                                           ! 736  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04588 1070                        60            .byte	$60
04589 1071                        30            .byte	$30
04590 1072                        18            .byte	$18
04591 1073                        18            .byte	$18
04592 1074                        18            .byte	$18
04593 1075                        30            .byte	$30
04594 1076                        60            .byte	$60
04595 1077                        00            .byte	0
04596                                           ! 737  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04597 1078                        00            .byte	0
04598 1079                        66            .byte	$66
04599 107A                        3C            .byte	$3C
04600 107B                        FF            .byte	$FF
04601 107C                        3C            .byte	$3C
04602 107D                        66            .byte	$66
04603 107E                        00            .byte	0
04604 107F                        00            .byte	0
04605                                           ! 738  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04606 1080                        00            .byte	0
04607 1081                        30            .byte	$30
04608 1082                        30            .byte	$30
04609 1083                        FC            .byte	$FC
04610 1084                        30            .byte	$30
04611 1085                        30            .byte	$30
04612 1086                        00            .byte	0
04613 1087                        00            .byte	0
04614                                           ! 739  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04615 1088                        00            .byte	0
04616 1089                        00            .byte	0
04617 108A                        00            .byte	0
04618 108B                        00            .byte	0
04619 108C                        00            .byte	0
04620 108D                        30            .byte	$30
04621 108E                        30            .byte	$30
04622 108F                        60            .byte	$60
04623                                           ! 740  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04624 1090                        00            .byte	0
04625 1091                        00            .byte	0
04626 1092                        00            .byte	0
04627 1093                        FC            .byte	$FC
04628 1094                        00            .byte	0
04629 1095                        00            .byte	0
04630 1096                        00            .byte	0
04631 1097                        00            .byte	0
04632                                           ! 741  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04633 1098                        00            .byte	0
04634 1099                        00            .byte	0
04635 109A                        00            .byte	0
04636 109B                        00            .byte	0
04637 109C                        00            .byte	0
04638 109D                        30            .byte	$30
04639 109E                        30            .byte	$30
04640 109F                        00            .byte	0
04641                                           ! 742  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04642 10A0                        06            .byte	6
04643 10A1                        0C            .byte	$C
04644 10A2                        18            .byte	$18
04645 10A3                        30            .byte	$30
04646 10A4                        60            .byte	$60
04647 10A5                        C0            .byte	$C0
04648 10A6                        80            .byte	$80
04649 10A7                        00            .byte	0
04650                                           ! 743  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04651 10A8                        7C            .byte	$7C
04652 10A9                        C6            .byte	$C6
04653 10AA                        CE            .byte	$CE
04654 10AB                        DE            .byte	$DE
04655 10AC                        F6            .byte	$F6
04656 10AD                        E6            .byte	$E6
04657 10AE                        7C            .byte	$7C
04658 10AF                        00            .byte	0
04659                                           ! 744  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04660 10B0                        30            .byte	$30
04661 10B1                        70            .byte	$70
04662 10B2                        30            .byte	$30
04663 10B3                        30            .byte	$30
04664 10B4                        30            .byte	$30
04665 10B5                        30            .byte	$30
04666 10B6                        FC            .byte	$FC
04667 10B7                        00            .byte	0
04668                                           ! 745  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04669 10B8                        78            .byte	$78
04670 10B9                        CC            .byte	$CC
04671 10BA                        0C            .byte	$C
04672 10BB                        38            .byte	$38
04673 10BC                        60            .byte	$60
04674 10BD                        CC            .byte	$CC
04675 10BE                        FC            .byte	$FC
04676 10BF                        00            .byte	0
04677                                           ! 746  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04678 10C0                        78            .byte	$78
04679 10C1                        CC            .byte	$CC
04680 10C2                        0C            .byte	$C
04681 10C3                        38            .byte	$38
04682 10C4                        0C            .byte	$C
04683 10C5                        CC            .byte	$CC
04684 10C6                        78            .byte	$78
04685 10C7                        00            .byte	0
04686                                           ! 747  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04687 10C8                        1C            .byte	$1C
04688 10C9                        3C            .byte	$3C
04689 10CA                        6C            .byte	$6C
04690 10CB                        CC            .byte	$CC
04691 10CC                        FE            .byte	$FE
04692 10CD                        0C            .byte	$C
04693 10CE                        1E            .byte	$1E
04694 10CF                        00            .byte	0
04695                                           ! 748  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04696 10D0                        FC            .byte	$FC
04697 10D1                        C0            .byte	$C0
04698 10D2                        F8            .byte	$F8
04699 10D3                        0C            .byte	$C
04700 10D4                        0C            .byte	$C
04701 10D5                        CC            .byte	$CC
04702 10D6                        78            .byte	$78
04703 10D7                        00            .byte	0
04704                                           ! 749  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04705 10D8                        38            .byte	$38
04706 10D9                        60            .byte	$60
04707 10DA                        C0            .byte	$C0
04708 10DB                        F8            .byte	$F8
04709 10DC                        CC            .byte	$CC
04710 10DD                        CC            .byte	$CC
04711 10DE                        78            .byte	$78
04712 10DF                        00            .byte	0
04713                                           ! 750  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04714 10E0                        FC            .byte	$FC
04715 10E1                        CC            .byte	$CC
04716 10E2                        0C            .byte	$C
04717 10E3                        18            .byte	$18
04718 10E4                        30            .byte	$30
04719 10E5                        30            .byte	$30
04720 10E6                        30            .byte	$30
04721 10E7                        00            .byte	0
04722                                           ! 751  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04723 10E8                        78            .byte	$78
04724 10E9                        CC            .byte	$CC
04725 10EA                        CC            .byte	$CC
04726 10EB                        78            .byte	$78
04727 10EC                        CC            .byte	$CC
04728 10ED                        CC            .byte	$CC
04729 10EE                        78            .byte	$78
04730 10EF                        00            .byte	0
04731                                           ! 752  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04732 10F0                        78            .byte	$78
04733 10F1                        CC            .byte	$CC
04734 10F2                        CC            .byte	$CC
04735 10F3                        7C            .byte	$7C
04736 10F4                        0C            .byte	$C
04737 10F5                        18            .byte	$18
04738 10F6                        70            .byte	$70
04739 10F7                        00            .byte	0
04740                                           ! 753  0x00, 0x3
04741 10F8                        00            .byte	0
04742                                           ! 753 0, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04743 10F9                        30            .byte	$30
04744 10FA                        30            .byte	$30
04745 10FB                        00            .byte	0
04746 10FC                        00            .byte	0
04747 10FD                        30            .byte	$30
04748 10FE                        30            .byte	$30
04749 10FF                        00            .byte	0
04750                                           ! 754  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04751 1100                        00            .byte	0
04752 1101                        30            .byte	$30
04753 1102                        30            .byte	$30
04754 1103                        00            .byte	0
04755 1104                        00            .byte	0
04756 1105                        30            .byte	$30
04757 1106                        30            .byte	$30
04758 1107                        60            .byte	$60
04759                                           ! 755  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04760 1108                        18            .byte	$18
04761 1109                        30            .byte	$30
04762 110A                        60            .byte	$60
04763 110B                        C0            .byte	$C0
04764 110C                        60            .byte	$60
04765 110D                        30            .byte	$30
04766 110E                        18            .byte	$18
04767 110F                        00            .byte	0
04768                                           ! 756  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04769 1110                        00            .byte	0
04770 1111                        00            .byte	0
04771 1112                        FC            .byte	$FC
04772 1113                        00            .byte	0
04773 1114                        00            .byte	0
04774 1115                        FC            .byte	$FC
04775 1116                        00            .byte	0
04776 1117                        00            .byte	0
04777                                           ! 757  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04778 1118                        60            .byte	$60
04779 1119                        30            .byte	$30
04780 111A                        18            .byte	$18
04781 111B                        0C            .byte	$C
04782 111C                        18            .byte	$18
04783 111D                        30            .byte	$30
04784 111E                        60            .byte	$60
04785 111F                        00            .byte	0
04786                                           ! 758  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04787 1120                        78            .byte	$78
04788 1121                        CC            .byte	$CC
04789 1122                        0C            .byte	$C
04790 1123                        18            .byte	$18
04791 1124                        30            .byte	$30
04792 1125                        00            .byte	0
04793 1126                        30            .byte	$30
04794 1127                        00            .byte	0
04795                                           ! 759  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04796 1128                        7C            .byte	$7C
04797 1129                        C6            .byte	$C6
04798 112A                        DE            .byte	$DE
04799 112B                        DE            .byte	$DE
04800 112C                        DE            .byte	$DE
04801 112D                        C0            .byte	$C0
04802 112E                        78            .byte	$78
04803 112F                        00            .byte	0
04804                                           ! 760  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04805 1130                        30            .byte	$30
04806 1131                        78            .byte	$78
04807 1132                        CC            .byte	$CC
04808 1133                        CC            .byte	$CC
04809 1134                        FC            .byte	$FC
04810 1135                        CC            .byte	$CC
04811 1136                        CC            .byte	$CC
04812 1137                        00            .byte	0
04813                                           ! 761  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04814 1138                        FC            .byte	$FC
04815 1139                        66            .byte	$66
04816 113A                        66            .byte	$66
04817 113B                        7C            .byte	$7C
04818 113C                        66            .byte	$66
04819 113D                        66            .byte	$66
04820 113E                        FC            .byte	$FC
04821 113F                        00            .byte	0
04822                                           ! 762  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04823 1140                        3C            .byte	$3C
04824 1141                        66            .byte	$66
04825 1142                        C0            .byte	$C0
04826 1143                        C0            .byte	$C0
04827 1144                        C0            .byte	$C0
04828 1145                        66            .byte	$66
04829 1146                        3C            .byte	$3C
04830 1147                        00            .byte	0
04831                                           ! 763  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04832 1148                        F8            .byte	$F8
04833 1149                        6C            .byte	$6C
04834 114A                        66            .byte	$66
04835 114B                        66            .byte	$66
04836 114C                        66            .byte	$66
04837 114D                        6C            .byte	$6C
04838 114E                        F8            .byte	$F8
04839 114F                        00            .byte	0
04840                                           ! 764  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04841 1150                        FE            .byte	$FE
04842 1151                        62            .byte	$62
04843 1152                        68            .byte	$68
04844 1153                        78            .byte	$78
04845 1154                        68            .byte	$68
04846 1155                        62            .byte	$62
04847 1156                        FE            .byte	$FE
04848 1157                        00            .byte	0
04849                                           ! 765  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04850 1158                        FE            .byte	$FE
04851 1159                        62            .byte	$62
04852 115A                        68            .byte	$68
04853 115B                        78            .byte	$78
04854 115C                        68            .byte	$68
04855 115D                        60            .byte	$60
04856 115E                        F0            .byte	$F0
04857 115F                        00            .byte	0
04858                                           ! 766  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04859 1160                        3C            .byte	$3C
04860 1161                        66            .byte	$66
04861 1162                        C0            .byte	$C0
04862 1163                        C0            .byte	$C0
04863 1164                        CE            .byte	$CE
04864 1165                        66            .byte	$66
04865 1166                        3E            .byte	$3E
04866 1167                        00            .byte	0
04867                                           ! 767  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04868 1168                        CC            .byte	$CC
04869 1169                        CC            .byte	$CC
04870 116A                        CC            .byte	$CC
04871 116B                        FC            .byte	$FC
04872 116C                        CC            .byte	$CC
04873 116D                        CC            .byte	$CC
04874 116E                        CC            .byte	$CC
04875 116F                        00            .byte	0
04876                                           ! 768  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04877 1170                        78            .byte	$78
04878 1171                        30            .byte	$30
04879 1172                        30            .byte	$30
04880 1173                        30            .byte	$30
04881 1174                        30            .byte	$30
04882 1175                        30            .byte	$30
04883 1176                        78            .byte	$78
04884 1177                        00            .byte	0
04885                                           ! 769  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04886 1178                        1E            .byte	$1E
04887 1179                        0C            .byte	$C
04888 117A                        0C            .byte	$C
04889 117B                        0C            .byte	$C
04890 117C                        CC            .byte	$CC
04891 117D                        CC            .byte	$CC
04892 117E                        78            .byte	$78
04893 117F                        00            .byte	0
04894                                           ! 770  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04895 1180                        E6            .byte	$E6
04896 1181                        66            .byte	$66
04897 1182                        6C            .byte	$6C
04898 1183                        78            .byte	$78
04899 1184                        6C            .byte	$6C
04900 1185                        66            .byte	$66
04901 1186                        E6            .byte	$E6
04902 1187                        00            .byte	0
04903                                           ! 771  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04904 1188                        F0            .byte	$F0
04905 1189                        60            .byte	$60
04906 118A                        60            .byte	$60
04907 118B                        60            .byte	$60
04908 118C                        62            .byte	$62
04909 118D                        66            .byte	$66
04910 118E                        FE            .byte	$FE
04911 118F                        00            .byte	0
04912                                           ! 772  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04913 1190                        C6            .byte	$C6
04914 1191                        EE            .byte	$EE
04915 1192                        FE            .byte	$FE
04916 1193                        FE            .byte	$FE
04917 1194                        D6            .byte	$D6
04918 1195                        C6            .byte	$C6
04919 1196                        C6            .byte	$C6
04920 1197                        00            .byte	0
04921                                           ! 773  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04922 1198                        C6            .byte	$C6
04923 1199                        E6            .byte	$E6
04924 119A                        F6            .byte	$F6
04925 119B                        DE            .byte	$DE
04926 119C                        CE            .byte	$CE
04927 119D                        C6            .byte	$C6
04928 119E                        C6            .byte	$C6
04929 119F                        00            .byte	0
04930                                           ! 774  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04931 11A0                        38            .byte	$38
04932 11A1                        6C            .byte	$6C
04933 11A2                        C6            .byte	$C6
04934 11A3                        C6            .byte	$C6
04935 11A4                        C6            .byte	$C6
04936 11A5                        6C            .byte	$6C
04937 11A6                        38            .byte	$38
04938 11A7                        00            .byte	0
04939                                           ! 775  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04940 11A8                        FC            .byte	$FC
04941 11A9                        66            .byte	$66
04942 11AA                        66            .byte	$66
04943 11AB                        7C            .byte	$7C
04944 11AC                        60            .byte	$60
04945 11AD                        60            .byte	$60
04946 11AE                        F0            .byte	$F0
04947 11AF                        00            .byte	0
04948                                           ! 776  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04949 11B0                        78            .byte	$78
04950 11B1                        CC            .byte	$CC
04951 11B2                        CC            .byte	$CC
04952 11B3                        CC            .byte	$CC
04953 11B4                        DC            .byte	$DC
04954 11B5                        78            .byte	$78
04955 11B6                        1C            .byte	$1C
04956 11B7                        00            .byte	0
04957                                           ! 777  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04958 11B8                        FC            .byte	$FC
04959 11B9                        66            .byte	$66
04960 11BA                        66            .byte	$66
04961 11BB                        7C            .byte	$7C
04962 11BC                        6C            .byte	$6C
04963 11BD                        66            .byte	$66
04964 11BE                        E6            .byte	$E6
04965 11BF                        00            .byte	0
04966                                           ! 778  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04967 11C0                        78            .byte	$78
04968 11C1                        CC            .byte	$CC
04969 11C2                        E0            .byte	$E0
04970 11C3                        70            .byte	$70
04971 11C4                        1C            .byte	$1C
04972 11C5                        CC            .byte	$CC
04973 11C6                        78            .byte	$78
04974 11C7                        00            .byte	0
04975                                           ! 779  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04976 11C8                        FC            .byte	$FC
04977 11C9                        B4            .byte	$B4
04978 11CA                        30            .byte	$30
04979 11CB                        30            .byte	$30
04980 11CC                        30            .byte	$30
04981 11CD                        30            .byte	$30
04982 11CE                        78            .byte	$78
04983 11CF                        00            .byte	0
04984                                           ! 780  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
04985 11D0                        CC            .byte	$CC
04986 11D1                        CC            .byte	$CC
04987 11D2                        CC            .byte	$CC
04988 11D3                        CC            .byte	$CC
04989 11D4                        CC            .byte	$CC
04990 11D5                        CC            .byte	$CC
04991 11D6                        FC            .byte	$FC
04992 11D7                        00            .byte	0
04993                                           ! 781  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
04994 11D8                        CC            .byte	$CC
04995 11D9                        CC            .byte	$CC
04996 11DA                        CC            .byte	$CC
04997 11DB                        CC            .byte	$CC
04998 11DC                        CC            .byte	$CC
04999 11DD                        78            .byte	$78
05000 11DE                        30            .byte	$30
05001 11DF                        00            .byte	0
05002                                           ! 782  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05003 11E0                        C6            .byte	$C6
05004 11E1                        C6            .byte	$C6
05005 11E2                        C6            .byte	$C6
05006 11E3                        D6            .byte	$D6
05007 11E4                        FE            .byte	$FE
05008 11E5                        EE            .byte	$EE
05009 11E6                        C6            .byte	$C6
05010 11E7                        00            .byte	0
05011                                           ! 783  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05012 11E8                        C6            .byte	$C6
05013 11E9                        C6            .byte	$C6
05014 11EA                        6C            .byte	$6C
05015 11EB                        38            .byte	$38
05016 11EC                        38            .byte	$38
05017 11ED                        6C            .byte	$6C
05018 11EE                        C6            .byte	$C6
05019 11EF                        00            .byte	0
05020                                           ! 784  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05021 11F0                        CC            .byte	$CC
05022 11F1                        CC            .byte	$CC
05023 11F2                        CC            .byte	$CC
05024 11F3                        78            .byte	$78
05025 11F4                        30            .byte	$30
05026 11F5                        30            .byte	$30
05027 11F6                        78            .byte	$78
05028 11F7                        00            .byte	0
05029                                           ! 785  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05030 11F8                        FE            .byte	$FE
05031 11F9                        C6            .byte	$C6
05032 11FA                        8C            .byte	$8C
05033 11FB                        18            .byte	$18
05034 11FC                        32            .byte	$32
05035 11FD                        66            .byte	$66
05036 11FE                        FE            .byte	$FE
05037 11FF                        00            .byte	0
05038                                           ! 786  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05039 1200                        78            .byte	$78
05040 1201                        60            .byte	$60
05041 1202                        60            .byte	$60
05042 1203                        60            .byte	$60
05043 1204                        60            .byte	$60
05044 1205                        60            .byte	$60
05045 1206                        78            .byte	$78
05046 1207                        00            .byte	0
05047                                           ! 787  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05048 1208                        C0            .byte	$C0
05049 1209                        60            .byte	$60
05050 120A                        30            .byte	$30
05051 120B                        18            .byte	$18
05052 120C                        0C            .byte	$C
05053 120D                        06            .byte	6
05054 120E                        02            .byte	2
05055 120F                        00            .byte	0
05056                                           ! 788  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05057 1210                        78            .byte	$78
05058 1211                        18            .byte	$18
05059 1212                        18            .byte	$18
05060 1213                        18            .byte	$18
05061 1214                        18            .byte	$18
05062 1215                        18            .byte	$18
05063 1216                        78            .byte	$78
05064 1217                        00            .byte	0
05065                                           ! 789  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05066 1218                        10            .byte	$10
05067 1219                        38            .byte	$38
05068 121A                        6C            .byte	$6C
05069 121B                        C6            .byte	$C6
05070 121C                        00            .byte	0
05071 121D                        00            .byte	0
05072 121E                        00            .byte	0
05073 121F                        00            .byte	0
05074                                           ! 790  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05075 1220                        00            .byte	0
05076 1221                        00            .byte	0
05077 1222                        00            .byte	0
05078 1223                        00            .byte	0
05079 1224                        00            .byte	0
05080 1225                        00            .byte	0
05081 1226                        00            .byte	0
05082 1227                        FF            .byte	$FF
05083                                           ! 791  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05084 1228                        30            .byte	$30
05085 1229                        30            .byte	$30
05086 122A                        18            .byte	$18
05087 122B                        00            .byte	0
05088 122C                        00            .byte	0
05089 122D                        00            .byte	0
05090 122E                        00            .byte	0
05091 122F                        00            .byte	0
05092                                           ! 792  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05093 1230                        00            .byte	0
05094 1231                        00            .byte	0
05095 1232                        78            .byte	$78
05096 1233                        0C            .byte	$C
05097 1234                        7C            .byte	$7C
05098 1235                        CC            .byte	$CC
05099 1236                        76            .byte	$76
05100 1237                        00            .byte	0
05101                                           ! 793  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05102 1238                        E0            .byte	$E0
05103 1239                        60            .byte	$60
05104 123A                        60            .byte	$60
05105 123B                        7C            .byte	$7C
05106 123C                        66            .byte	$66
05107 123D                        66            .byte	$66
05108 123E                        DC            .byte	$DC
05109 123F                        00            .byte	0
05110                                           ! 794  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05111 1240                        00            .byte	0
05112 1241                        00            .byte	0
05113 1242                        78            .byte	$78
05114 1243                        CC            .byte	$CC
05115 1244                        C0            .byte	$C0
05116 1245                        CC            .byte	$CC
05117 1246                        78            .byte	$78
05118 1247                        00            .byte	0
05119                                           ! 795 
05120                                           ! 795  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05121 1248                        1C            .byte	$1C
05122 1249                        0C            .byte	$C
05123 124A                        0C            .byte	$C
05124 124B                        7C            .byte	$7C
05125 124C                        CC            .byte	$CC
05126 124D                        CC            .byte	$CC
05127 124E                        76            .byte	$76
05128 124F                        00            .byte	0
05129                                           ! 796  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05130 1250                        00            .byte	0
05131 1251                        00            .byte	0
05132 1252                        78            .byte	$78
05133 1253                        CC            .byte	$CC
05134 1254                        FC            .byte	$FC
05135 1255                        C0            .byte	$C0
05136 1256                        78            .byte	$78
05137 1257                        00            .byte	0
05138                                           ! 797  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05139 1258                        38            .byte	$38
05140 1259                        6C            .byte	$6C
05141 125A                        60            .byte	$60
05142 125B                        F0            .byte	$F0
05143 125C                        60            .byte	$60
05144 125D                        60            .byte	$60
05145 125E                        F0            .byte	$F0
05146 125F                        00            .byte	0
05147                                           ! 798  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05148 1260                        00            .byte	0
05149 1261                        00            .byte	0
05150 1262                        76            .byte	$76
05151 1263                        CC            .byte	$CC
05152 1264                        CC            .byte	$CC
05153 1265                        7C            .byte	$7C
05154 1266                        0C            .byte	$C
05155 1267                        F8            .byte	$F8
05156                                           ! 799  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05157 1268                        E0            .byte	$E0
05158 1269                        60            .byte	$60
05159 126A                        6C            .byte	$6C
05160 126B                        76            .byte	$76
05161 126C                        66            .byte	$66
05162 126D                        66            .byte	$66
05163 126E                        E6            .byte	$E6
05164 126F                        00            .byte	0
05165                                           ! 800  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05166 1270                        30            .byte	$30
05167 1271                        00            .byte	0
05168 1272                        70            .byte	$70
05169 1273                        30            .byte	$30
05170 1274                        30            .byte	$30
05171 1275                        30            .byte	$30
05172 1276                        78            .byte	$78
05173 1277                        00            .byte	0
05174                                           ! 801  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05175 1278                        0C            .byte	$C
05176 1279                        00            .byte	0
05177 127A                        0C            .byte	$C
05178 127B                        0C            .byte	$C
05179 127C                        0C            .byte	$C
05180 127D                        CC            .byte	$CC
05181 127E                        CC            .byte	$CC
05182 127F                        78            .byte	$78
05183                                           ! 802  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05184 1280                        E0            .byte	$E0
05185 1281                        60            .byte	$60
05186 1282                        66            .byte	$66
05187 1283                        6C            .byte	$6C
05188 1284                        78            .byte	$78
05189 1285                        6C            .byte	$6C
05190 1286                        E6            .byte	$E6
05191 1287                        00            .byte	0
05192                                           ! 803  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05193 1288                        70            .byte	$70
05194 1289                        30            .byte	$30
05195 128A                        30            .byte	$30
05196 128B                        30            .byte	$30
05197 128C                        30            .byte	$30
05198 128D                        30            .byte	$30
05199 128E                        78            .byte	$78
05200 128F                        00            .byte	0
05201                                           ! 804  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05202 1290                        00            .byte	0
05203 1291                        00            .byte	0
05204 1292                        CC            .byte	$CC
05205 1293                        FE            .byte	$FE
05206 1294                        FE            .byte	$FE
05207 1295                        D6            .byte	$D6
05208 1296                        C6            .byte	$C6
05209 1297                        00            .byte	0
05210                                           ! 805  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05211 1298                        00            .byte	0
05212 1299                        00            .byte	0
05213 129A                        F8            .byte	$F8
05214 129B                        CC            .byte	$CC
05215 129C                        CC            .byte	$CC
05216 129D                        CC            .byte	$CC
05217 129E                        CC            .byte	$CC
05218 129F                        00            .byte	0
05219                                           ! 806  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05220 12A0                        00            .byte	0
05221 12A1                        00            .byte	0
05222 12A2                        78            .byte	$78
05223 12A3                        CC            .byte	$CC
05224 12A4                        CC            .byte	$CC
05225 12A5                        CC            .byte	$CC
05226 12A6                        78            .byte	$78
05227 12A7                        00            .byte	0
05228                                           ! 807  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05229 12A8                        00            .byte	0
05230 12A9                        00            .byte	0
05231 12AA                        DC            .byte	$DC
05232 12AB                        66            .byte	$66
05233 12AC                        66            .byte	$66
05234 12AD                        7C            .byte	$7C
05235 12AE                        60            .byte	$60
05236 12AF                        F0            .byte	$F0
05237                                           ! 808  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05238 12B0                        00            .byte	0
05239 12B1                        00            .byte	0
05240 12B2                        76            .byte	$76
05241 12B3                        CC            .byte	$CC
05242 12B4                        CC            .byte	$CC
05243 12B5                        7C            .byte	$7C
05244 12B6                        0C            .byte	$C
05245 12B7                        1E            .byte	$1E
05246                                           ! 809  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05247 12B8                        00            .byte	0
05248 12B9                        00            .byte	0
05249 12BA                        DC            .byte	$DC
05250 12BB                        76            .byte	$76
05251 12BC                        66            .byte	$66
05252 12BD                        60            .byte	$60
05253 12BE                        F0            .byte	$F0
05254 12BF                        00            .byte	0
05255                                           ! 810  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05256 12C0                        00            .byte	0
05257 12C1                        00            .byte	0
05258 12C2                        7C            .byte	$7C
05259 12C3                        C0            .byte	$C0
05260 12C4                        78            .byte	$78
05261 12C5                        0C            .byte	$C
05262 12C6                        F8            .byte	$F8
05263 12C7                        00            .byte	0
05264                                           ! 811  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05265 12C8                        10            .byte	$10
05266 12C9                        30            .byte	$30
05267 12CA                        7C            .byte	$7C
05268 12CB                        30            .byte	$30
05269 12CC                        30            .byte	$30
05270 12CD                        34            .byte	$34
05271 12CE                        18            .byte	$18
05272 12CF                        00            .byte	0
05273                                           ! 812  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05274 12D0                        00            .byte	0
05275 12D1                        00            .byte	0
05276 12D2                        CC            .byte	$CC
05277 12D3                        CC            .byte	$CC
05278 12D4                        CC            .byte	$CC
05279 12D5                        CC            .byte	$CC
05280 12D6                        76            .byte	$76
05281 12D7                        00            .byte	0
05282                                           ! 813  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05283 12D8                        00            .byte	0
05284 12D9                        00            .byte	0
05285 12DA                        CC            .byte	$CC
05286 12DB                        CC            .byte	$CC
05287 12DC                        CC            .byte	$CC
05288 12DD                        78            .byte	$78
05289 12DE                        30            .byte	$30
05290 12DF                        00            .byte	0
05291                                           ! 814  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05292 12E0                        00            .byte	0
05293 12E1                        00            .byte	0
05294 12E2                        C6            .byte	$C6
05295 12E3                        D6            .byte	$D6
05296 12E4                        FE            .byte	$FE
05297 12E5                        FE            .byte	$FE
05298 12E6                        6C            .byte	$6C
05299 12E7                        00            .byte	0
05300                                           ! 815  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05301 12E8                        00            .byte	0
05302 12E9                        00            .byte	0
05303 12EA                        C6            .byte	$C6
05304 12EB                        6C            .byte	$6C
05305 12EC                        38            .byte	$38
05306 12ED                        6C            .byte	$6C
05307 12EE                        C6            .byte	$C6
05308 12EF                        00            .byte	0
05309                                           ! 816  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05310 12F0                        00            .byte	0
05311 12F1                        00            .byte	0
05312 12F2                        CC            .byte	$CC
05313 12F3                        CC            .byte	$CC
05314 12F4                        CC            .byte	$CC
05315 12F5                        7C            .byte	$7C
05316 12F6                        0C            .byte	$C
05317 12F7                        F8            .byte	$F8
05318                                           ! 817  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05319 12F8                        00            .byte	0
05320 12F9                        00            .byte	0
05321 12FA                        FC            .byte	$FC
05322 12FB                        98            .byte	$98
05323 12FC                        30            .byte	$30
05324 12FD                        64            .byte	$64
05325 12FE                        FC            .byte	$FC
05326 12FF                        00            .byte	0
05327                                           ! 818  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05328 1300                        1C            .byte	$1C
05329 1301                        30            .byte	$30
05330 1302                        30            .byte	$30
05331 1303                        E0            .byte	$E0
05332 1304                        30            .byte	$30
05333 1305                        30            .byte	$30
05334 1306                        1C            .byte	$1C
05335 1307                        00            .byte	0
05336                                           ! 819  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05337 1308                        18            .byte	$18
05338 1309                        18            .byte	$18
05339 130A                        18            .byte	$18
05340 130B                        00            .byte	0
05341 130C                        18            .byte	$18
05342 130D                        18            .byte	$18
05343 130E                        18            .byte	$18
05344 130F                        00            .byte	0
05345                                           ! 820  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05346 1310                        E0            .byte	$E0
05347 1311                        30            .byte	$30
05348 1312                        30            .byte	$30
05349 1313                        1C            .byte	$1C
05350 1314                        30            .byte	$30
05351 1315                        30            .byte	$30
05352 1316                        E0            .byte	$E0
05353 1317                        00            .byte	0
05354                                           ! 821  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05355 1318                        76            .byte	$76
05356 1319                        DC            .byte	$DC
05357 131A                        00            .byte	0
05358 131B                        00            .byte	0
05359 131C                        00            .byte	0
05360 131D                        00            .byte	0
05361 131E                        00            .byte	0
05362 131F                        00            .byte	0
05363                                           ! 822  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05364 1320                        00            .byte	0
05365 1321                        10            .byte	$10
05366 1322                        38            .byte	$38
05367 1323                        6C            .byte	$6C
05368 1324                        C6            .byte	$C6
05369 1325                        C6            .byte	$C6
05370 1326                        FE            .byte	$FE
05371 1327                        00            .byte	0
05372                                           ! 823  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05373 1328                        78            .byte	$78
05374 1329                        CC            .byte	$CC
05375 132A                        C0            .byte	$C0
05376 132B                        CC            .byte	$CC
05377 132C                        78            .byte	$78
05378 132D                        18            .byte	$18
05379 132E                        0C            .byte	$C
05380 132F                        78            .byte	$78
05381                                           ! 824  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05382 1330                        00            .byte	0
05383 1331                        CC            .byte	$CC
05384 1332                        00            .byte	0
05385 1333                        CC            .byte	$CC
05386 1334                        CC            .byte	$CC
05387 1335                        CC            .byte	$CC
05388 1336                        7E            .byte	$7E
05389 1337                        00            .byte	0
05390                                           ! 825  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05391 1338                        1C            .byte	$1C
05392 1339                        00            .byte	0
05393 133A                        78            .byte	$78
05394 133B                        CC            .byte	$CC
05395 133C                        FC            .byte	$FC
05396 133D                        C0            .byte	$C0
05397 133E                        78            .byte	$78
05398 133F                        00            .byte	0
05399                                           ! 826  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05400 1340                        7E            .byte	$7E
05401 1341                        C3            .byte	$C3
05402 1342                        3C            .byte	$3C
05403 1343                        06            .byte	6
05404 1344                        3E            .byte	$3E
05405 1345                        66            .byte	$66
05406 1346                        3F            .byte	$3F
05407 1347                        00            .byte	0
05408                                           ! 827  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05409 1348                        CC            .byte	$CC
05410 1349                        00            .byte	0
05411 134A                        78            .byte	$78
05412 134B                        0C            .byte	$C
05413 134C                        7C            .byte	$7C
05414 134D                        CC            .byte	$CC
05415 134E                        7E            .byte	$7E
05416 134F                        00            .byte	0
05417                                           ! 828  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05418 1350                        E0            .byte	$E0
05419 1351                        00            .byte	0
05420 1352                        78            .byte	$78
05421 1353                        0C            .byte	$C
05422 1354                        7C            .byte	$7C
05423 1355                        CC            .byte	$CC
05424 1356                        7E            .byte	$7E
05425 1357                        00            .byte	0
05426                                           ! 829  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05427 1358                        30            .byte	$30
05428 1359                        30            .byte	$30
05429 135A                        78            .byte	$78
05430 135B                        0C            .byte	$C
05431 135C                        7C            .byte	$7C
05432 135D                        CC            .byte	$CC
05433 135E                        7E            .byte	$7E
05434 135F                        00            .byte	0
05435                                           ! 830  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05436 1360                        00            .byte	0
05437 1361                        00            .byte	0
05438 1362                        78            .byte	$78
05439 1363                        C0            .byte	$C0
05440 1364                        C0            .byte	$C0
05441 1365                        78            .byte	$78
05442 1366                        0C            .byte	$C
05443 1367                        38            .byte	$38
05444                                           ! 831  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05445 1368                        7E            .byte	$7E
05446 1369                        C3            .byte	$C3
05447 136A                        3C            .byte	$3C
05448 136B                        66            .byte	$66
05449 136C                        7E            .byte	$7E
05450 136D                        60            .byte	$60
05451 136E                        3C            .byte	$3C
05452 136F                        00            .byte	0
05453                                           ! 832  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05454 1370                        CC            .byte	$CC
05455 1371                        00            .byte	0
05456 1372                        78            .byte	$78
05457 1373                        CC            .byte	$CC
05458 1374                        FC            .byte	$FC
05459 1375                        C0            .byte	$C0
05460 1376                        78            .byte	$78
05461 1377                        00            .byte	0
05462                                           ! 833  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05463 1378                        E0            .byte	$E0
05464 1379                        00            .byte	0
05465 137A                        78            .byte	$78
05466 137B                        CC            .byte	$CC
05467 137C                        FC            .byte	$FC
05468 137D                        C0            .byte	$C0
05469 137E                        78            .byte	$78
05470 137F                        00            .byte	0
05471                                           ! 834  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05472 1380                        CC            .byte	$CC
05473 1381                        00            .byte	0
05474 1382                        70            .byte	$70
05475 1383                        30            .byte	$30
05476 1384                        30            .byte	$30
05477 1385                        30            .byte	$30
05478 1386                        78            .byte	$78
05479 1387                        00            .byte	0
05480                                           ! 835  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05481 1388                        7C            .byte	$7C
05482 1389                        C6            .byte	$C6
05483 138A                        38            .byte	$38
05484 138B                        18            .byte	$18
05485 138C                        18            .byte	$18
05486 138D                        18            .byte	$18
05487 138E                        3C            .byte	$3C
05488 138F                        00            .byte	0
05489                                           ! 836  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x
05490 1390                        E0            .byte	$E0
05491 1391                        00            .byte	0
05492 1392                        70            .byte	$70
05493 1393                        30            .byte	$30
05494 1394                        30            .byte	$30
05495 1395                        30            .byte	$30
05496                                           ! 836 78, 0x00,
05497 1396                        78            .byte	$78
05498 1397                        00            .byte	0
05499                                           ! 837  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05500 1398                        C6            .byte	$C6
05501 1399                        38            .byte	$38
05502 139A                        6C            .byte	$6C
05503 139B                        C6            .byte	$C6
05504 139C                        FE            .byte	$FE
05505 139D                        C6            .byte	$C6
05506 139E                        C6            .byte	$C6
05507 139F                        00            .byte	0
05508                                           ! 838  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05509 13A0                        30            .byte	$30
05510 13A1                        30            .byte	$30
05511 13A2                        00            .byte	0
05512 13A3                        78            .byte	$78
05513 13A4                        CC            .byte	$CC
05514 13A5                        FC            .byte	$FC
05515 13A6                        CC            .byte	$CC
05516 13A7                        00            .byte	0
05517                                           ! 839  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05518 13A8                        1C            .byte	$1C
05519 13A9                        00            .byte	0
05520 13AA                        FC            .byte	$FC
05521 13AB                        60            .byte	$60
05522 13AC                        78            .byte	$78
05523 13AD                        60            .byte	$60
05524 13AE                        FC            .byte	$FC
05525 13AF                        00            .byte	0
05526                                           ! 840  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05527 13B0                        00            .byte	0
05528 13B1                        00            .byte	0
05529 13B2                        7F            .byte	$7F
05530 13B3                        0C            .byte	$C
05531 13B4                        7F            .byte	$7F
05532 13B5                        CC            .byte	$CC
05533 13B6                        7F            .byte	$7F
05534 13B7                        00            .byte	0
05535                                           ! 841  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05536 13B8                        3E            .byte	$3E
05537 13B9                        6C            .byte	$6C
05538 13BA                        CC            .byte	$CC
05539 13BB                        FE            .byte	$FE
05540 13BC                        CC            .byte	$CC
05541 13BD                        CC            .byte	$CC
05542 13BE                        CE            .byte	$CE
05543 13BF                        00            .byte	0
05544                                           ! 842  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05545 13C0                        78            .byte	$78
05546 13C1                        CC            .byte	$CC
05547 13C2                        00            .byte	0
05548 13C3                        78            .byte	$78
05549 13C4                        CC            .byte	$CC
05550 13C5                        CC            .byte	$CC
05551 13C6                        78            .byte	$78
05552 13C7                        00            .byte	0
05553                                           ! 843  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05554 13C8                        00            .byte	0
05555 13C9                        CC            .byte	$CC
05556 13CA                        00            .byte	0
05557 13CB                        78            .byte	$78
05558 13CC                        CC            .byte	$CC
05559 13CD                        CC            .byte	$CC
05560 13CE                        78            .byte	$78
05561 13CF                        00            .byte	0
05562                                           ! 844  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05563 13D0                        00            .byte	0
05564 13D1                        E0            .byte	$E0
05565 13D2                        00            .byte	0
05566 13D3                        78            .byte	$78
05567 13D4                        CC            .byte	$CC
05568 13D5                        CC            .byte	$CC
05569 13D6                        78            .byte	$78
05570 13D7                        00            .byte	0
05571                                           ! 845  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05572 13D8                        78            .byte	$78
05573 13D9                        CC            .byte	$CC
05574 13DA                        00            .byte	0
05575 13DB                        CC            .byte	$CC
05576 13DC                        CC            .byte	$CC
05577 13DD                        CC            .byte	$CC
05578 13DE                        7E            .byte	$7E
05579 13DF                        00            .byte	0
05580                                           ! 846  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05581 13E0                        00            .byte	0
05582 13E1                        E0            .byte	$E0
05583 13E2                        00            .byte	0
05584 13E3                        CC            .byte	$CC
05585 13E4                        CC            .byte	$CC
05586 13E5                        CC            .byte	$CC
05587 13E6                        7E            .byte	$7E
05588 13E7                        00            .byte	0
05589                                           ! 847  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05590 13E8                        00            .byte	0
05591 13E9                        CC            .byte	$CC
05592 13EA                        00            .byte	0
05593 13EB                        CC            .byte	$CC
05594 13EC                        CC            .byte	$CC
05595 13ED                        7C            .byte	$7C
05596 13EE                        0C            .byte	$C
05597 13EF                        F8            .byte	$F8
05598                                           ! 848  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05599 13F0                        C3            .byte	$C3
05600 13F1                        18            .byte	$18
05601 13F2                        3C            .byte	$3C
05602 13F3                        66            .byte	$66
05603 13F4                        66            .byte	$66
05604 13F5                        3C            .byte	$3C
05605 13F6                        18            .byte	$18
05606 13F7                        00            .byte	0
05607                                           ! 849  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05608 13F8                        CC            .byte	$CC
05609 13F9                        00            .byte	0
05610 13FA                        CC            .byte	$CC
05611 13FB                        CC            .byte	$CC
05612 13FC                        CC            .byte	$CC
05613 13FD                        CC            .byte	$CC
05614 13FE                        78            .byte	$78
05615 13FF                        00            .byte	0
05616                                           ! 850  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05617 1400                        18            .byte	$18
05618 1401                        18            .byte	$18
05619 1402                        7E            .byte	$7E
05620 1403                        C0            .byte	$C0
05621 1404                        C0            .byte	$C0
05622 1405                        7E            .byte	$7E
05623 1406                        18            .byte	$18
05624 1407                        18            .byte	$18
05625                                           ! 851  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05626 1408                        38            .byte	$38
05627 1409                        6C            .byte	$6C
05628 140A                        64            .byte	$64
05629 140B                        F0            .byte	$F0
05630 140C                        60            .byte	$60
05631 140D                        E6            .byte	$E6
05632 140E                        FC            .byte	$FC
05633 140F                        00            .byte	0
05634                                           ! 852  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05635 1410                        CC            .byte	$CC
05636 1411                        CC            .byte	$CC
05637 1412                        78            .byte	$78
05638 1413                        FC            .byte	$FC
05639 1414                        30            .byte	$30
05640 1415                        FC            .byte	$FC
05641 1416                        30            .byte	$30
05642 1417                        30            .byte	$30
05643                                           ! 853  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05644 1418                        F8            .byte	$F8
05645 1419                        CC            .byte	$CC
05646 141A                        CC            .byte	$CC
05647 141B                        FA            .byte	$FA
05648 141C                        C6            .byte	$C6
05649 141D                        CF            .byte	$CF
05650 141E                        C6            .byte	$C6
05651 141F                        C7            .byte	$C7
05652                                           ! 854  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05653 1420                        0E            .byte	$E
05654 1421                        1B            .byte	$1B
05655 1422                        18            .byte	$18
05656 1423                        3C            .byte	$3C
05657 1424                        18            .byte	$18
05658 1425                        18            .byte	$18
05659 1426                        D8            .byte	$D8
05660 1427                        70            .byte	$70
05661                                           ! 855  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05662 1428                        1C            .byte	$1C
05663 1429                        00            .byte	0
05664 142A                        78            .byte	$78
05665 142B                        0C            .byte	$C
05666 142C                        7C            .byte	$7C
05667 142D                        CC            .byte	$CC
05668 142E                        7E            .byte	$7E
05669 142F                        00            .byte	0
05670                                           ! 856  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05671 1430                        38            .byte	$38
05672 1431                        00            .byte	0
05673 1432                        70            .byte	$70
05674 1433                        30            .byte	$30
05675 1434                        30            .byte	$30
05676 1435                        30            .byte	$30
05677 1436                        78            .byte	$78
05678 1437                        00            .byte	0
05679                                           ! 857  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05680 1438                        00            .byte	0
05681 1439                        1C            .byte	$1C
05682 143A                        00            .byte	0
05683 143B                        78            .byte	$78
05684 143C                        CC            .byte	$CC
05685 143D                        CC            .byte	$CC
05686 143E                        78            .byte	$78
05687 143F                        00            .byte	0
05688                                           ! 858  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05689 1440                        00            .byte	0
05690 1441                        1C            .byte	$1C
05691 1442                        00            .byte	0
05692 1443                        CC            .byte	$CC
05693 1444                        CC            .byte	$CC
05694 1445                        CC            .byte	$CC
05695 1446                        7E            .byte	$7E
05696 1447                        00            .byte	0
05697                                           ! 859  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05698 1448                        00            .byte	0
05699 1449                        F8            .byte	$F8
05700 144A                        00            .byte	0
05701 144B                        F8            .byte	$F8
05702 144C                        CC            .byte	$CC
05703 144D                        CC            .byte	$CC
05704 144E                        CC            .byte	$CC
05705 144F                        00            .byte	0
05706                                           ! 860  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05707 1450                        FC            .byte	$FC
05708 1451                        00            .byte	0
05709 1452                        CC            .byte	$CC
05710 1453                        EC            .byte	$EC
05711 1454                        FC            .byte	$FC
05712 1455                        DC            .byte	$DC
05713 1456                        CC            .byte	$CC
05714 1457                        00            .byte	0
05715                                           ! 861  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05716 1458                        3C            .byte	$3C
05717 1459                        6C            .byte	$6C
05718 145A                        6C            .byte	$6C
05719 145B                        3E            .byte	$3E
05720 145C                        00            .byte	0
05721 145D                        7E            .byte	$7E
05722 145E                        00            .byte	0
05723 145F                        00            .byte	0
05724                                           ! 862  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05725 1460                        38            .byte	$38
05726 1461                        6C            .byte	$6C
05727 1462                        6C            .byte	$6C
05728 1463                        38            .byte	$38
05729 1464                        00            .byte	0
05730 1465                        7C            .byte	$7C
05731 1466                        00            .byte	0
05732 1467                        00            .byte	0
05733                                           ! 863  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05734 1468                        30            .byte	$30
05735 1469                        00            .byte	0
05736 146A                        30            .byte	$30
05737 146B                        60            .byte	$60
05738 146C                        C0            .byte	$C0
05739 146D                        CC            .byte	$CC
05740 146E                        78            .byte	$78
05741 146F                        00            .byte	0
05742                                           ! 864  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05743 1470                        00            .byte	0
05744 1471                        00            .byte	0
05745 1472                        00            .byte	0
05746 1473                        FC            .byte	$FC
05747 1474                        C0            .byte	$C0
05748 1475                        C0            .byte	$C0
05749 1476                        00            .byte	0
05750 1477                        00            .byte	0
05751                                           ! 865  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05752 1478                        00            .byte	0
05753 1479                        00            .byte	0
05754 147A                        00            .byte	0
05755 147B                        FC            .byte	$FC
05756 147C                        0C            .byte	$C
05757 147D                        0C            .byte	$C
05758 147E                        00            .byte	0
05759 147F                        00            .byte	0
05760                                           ! 866  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05761 1480                        C3            .byte	$C3
05762 1481                        C6            .byte	$C6
05763 1482                        CC            .byte	$CC
05764 1483                        DE            .byte	$DE
05765 1484                        33            .byte	$33
05766 1485                        66            .byte	$66
05767 1486                        CC            .byte	$CC
05768 1487                        0F            .byte	$F
05769                                           ! 867  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05770 1488                        C3            .byte	$C3
05771 1489                        C6            .byte	$C6
05772 148A                        CC            .byte	$CC
05773 148B                        DB            .byte	$DB
05774 148C                        37            .byte	$37
05775 148D                        6F            .byte	$6F
05776 148E                        CF            .byte	$CF
05777 148F                        03            .byte	3
05778                                           ! 868  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05779 1490                        18            .byte	$18
05780 1491                        18            .byte	$18
05781 1492                        00            .byte	0
05782 1493                        18            .byte	$18
05783 1494                        18            .byte	$18
05784 1495                        18            .byte	$18
05785 1496                        18            .byte	$18
05786 1497                        00            .byte	0
05787                                           ! 869  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05788 1498                        00            .byte	0
05789 1499                        33            .byte	$33
05790 149A                        66            .byte	$66
05791 149B                        CC            .byte	$CC
05792 149C                        66            .byte	$66
05793 149D                        33            .byte	$33
05794 149E                        00            .byte	0
05795 149F                        00            .byte	0
05796                                           ! 870  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05797 14A0                        00            .byte	0
05798 14A1                        CC            .byte	$CC
05799 14A2                        66            .byte	$66
05800 14A3                        33            .byte	$33
05801 14A4                        66            .byte	$66
05802 14A5                        CC            .byte	$CC
05803 14A6                        00            .byte	0
05804 14A7                        00            .byte	0
05805                                           ! 871  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05806 14A8                        22            .byte	$22
05807 14A9                        88            .byte	$88
05808 14AA                        22            .byte	$22
05809 14AB                        88            .byte	$88
05810 14AC                        22            .byte	$22
05811 14AD                        88            .byte	$88
05812 14AE                        22            .byte	$22
05813 14AF                        88            .byte	$88
05814                                           ! 872  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05815 14B0                        55            .byte	$55
05816 14B1                        AA            .byte	$AA
05817 14B2                        55            .byte	$55
05818 14B3                        AA            .byte	$AA
05819 14B4                        55            .byte	$55
05820 14B5                        AA            .byte	$AA
05821 14B6                        55            .byte	$55
05822 14B7                        AA            .byte	$AA
05823                                           ! 873  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05824 14B8                        DB            .byte	$DB
05825 14B9                        77            .byte	$77
05826 14BA                        DB            .byte	$DB
05827 14BB                        EE            .byte	$EE
05828 14BC                        DB            .byte	$DB
05829 14BD                        77            .byte	$77
05830 14BE                        DB            .byte	$DB
05831 14BF                        EE            .byte	$EE
05832                                           ! 874  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05833 14C0                        18            .byte	$18
05834 14C1                        18            .byte	$18
05835 14C2                        18            .byte	$18
05836 14C3                        18            .byte	$18
05837 14C4                        18            .byte	$18
05838 14C5                        18            .byte	$18
05839 14C6                        18            .byte	$18
05840 14C7                        18            .byte	$18
05841                                           ! 875  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05842 14C8                        18            .byte	$18
05843 14C9                        18            .byte	$18
05844 14CA                        18            .byte	$18
05845 14CB                        18            .byte	$18
05846 14CC                        F8            .byte	$F8
05847 14CD                        18            .byte	$18
05848 14CE                        18            .byte	$18
05849 14CF                        18            .byte	$18
05850                                           ! 876  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05851 14D0                        18            .byte	$18
05852 14D1                        18            .byte	$18
05853 14D2                        F8            .byte	$F8
05854 14D3                        18            .byte	$18
05855 14D4                        F8            .byte	$F8
05856 14D5                        18            .byte	$18
05857 14D6                        18            .byte	$18
05858 14D7                        18            .byte	$18
05859                                           ! 877  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05860 14D8                        36            .byte	$36
05861 14D9                        36            .byte	$36
05862 14DA                        36            .byte	$36
05863 14DB                        36            .byte	$36
05864 14DC                        F6            .byte	$F6
05865 14DD                        36            .byte	$36
05866 14DE                        36            .byte	$36
05867 14DF                        36            .byte	$36
05868                                           ! 878  0x00, 0x00, 0x00, 0x00, 0xfe
05869 14E0                        00            .byte	0
05870 14E1                        00            .byte	0
05871 14E2                        00            .byte	0
05872 14E3                        00            .byte	0
05873                                           ! 878 , 0x36, 0x36, 0x36,
05874 14E4                        FE            .byte	$FE
05875 14E5                        36            .byte	$36
05876 14E6                        36            .byte	$36
05877 14E7                        36            .byte	$36
05878                                           ! 879  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05879 14E8                        00            .byte	0
05880 14E9                        00            .byte	0
05881 14EA                        F8            .byte	$F8
05882 14EB                        18            .byte	$18
05883 14EC                        F8            .byte	$F8
05884 14ED                        18            .byte	$18
05885 14EE                        18            .byte	$18
05886 14EF                        18            .byte	$18
05887                                           ! 880  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05888 14F0                        36            .byte	$36
05889 14F1                        36            .byte	$36
05890 14F2                        F6            .byte	$F6
05891 14F3                        06            .byte	6
05892 14F4                        F6            .byte	$F6
05893 14F5                        36            .byte	$36
05894 14F6                        36            .byte	$36
05895 14F7                        36            .byte	$36
05896                                           ! 881  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05897 14F8                        36            .byte	$36
05898 14F9                        36            .byte	$36
05899 14FA                        36            .byte	$36
05900 14FB                        36            .byte	$36
05901 14FC                        36            .byte	$36
05902 14FD                        36            .byte	$36
05903 14FE                        36            .byte	$36
05904 14FF                        36            .byte	$36
05905                                           ! 882  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05906 1500                        00            .byte	0
05907 1501                        00            .byte	0
05908 1502                        FE            .byte	$FE
05909 1503                        06            .byte	6
05910 1504                        F6            .byte	$F6
05911 1505                        36            .byte	$36
05912 1506                        36            .byte	$36
05913 1507                        36            .byte	$36
05914                                           ! 883  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05915 1508                        36            .byte	$36
05916 1509                        36            .byte	$36
05917 150A                        F6            .byte	$F6
05918 150B                        06            .byte	6
05919 150C                        FE            .byte	$FE
05920 150D                        00            .byte	0
05921 150E                        00            .byte	0
05922 150F                        00            .byte	0
05923                                           ! 884  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05924 1510                        36            .byte	$36
05925 1511                        36            .byte	$36
05926 1512                        36            .byte	$36
05927 1513                        36            .byte	$36
05928 1514                        FE            .byte	$FE
05929 1515                        00            .byte	0
05930 1516                        00            .byte	0
05931 1517                        00            .byte	0
05932                                           ! 885  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05933 1518                        18            .byte	$18
05934 1519                        18            .byte	$18
05935 151A                        F8            .byte	$F8
05936 151B                        18            .byte	$18
05937 151C                        F8            .byte	$F8
05938 151D                        00            .byte	0
05939 151E                        00            .byte	0
05940 151F                        00            .byte	0
05941                                           ! 886  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05942 1520                        00            .byte	0
05943 1521                        00            .byte	0
05944 1522                        00            .byte	0
05945 1523                        00            .byte	0
05946 1524                        F8            .byte	$F8
05947 1525                        18            .byte	$18
05948 1526                        18            .byte	$18
05949 1527                        18            .byte	$18
05950                                           ! 887  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05951 1528                        18            .byte	$18
05952 1529                        18            .byte	$18
05953 152A                        18            .byte	$18
05954 152B                        18            .byte	$18
05955 152C                        1F            .byte	$1F
05956 152D                        00            .byte	0
05957 152E                        00            .byte	0
05958 152F                        00            .byte	0
05959                                           ! 888  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05960 1530                        18            .byte	$18
05961 1531                        18            .byte	$18
05962 1532                        18            .byte	$18
05963 1533                        18            .byte	$18
05964 1534                        FF            .byte	$FF
05965 1535                        00            .byte	0
05966 1536                        00            .byte	0
05967 1537                        00            .byte	0
05968                                           ! 889  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
05969 1538                        00            .byte	0
05970 1539                        00            .byte	0
05971 153A                        00            .byte	0
05972 153B                        00            .byte	0
05973 153C                        FF            .byte	$FF
05974 153D                        18            .byte	$18
05975 153E                        18            .byte	$18
05976 153F                        18            .byte	$18
05977                                           ! 890  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
05978 1540                        18            .byte	$18
05979 1541                        18            .byte	$18
05980 1542                        18            .byte	$18
05981 1543                        18            .byte	$18
05982 1544                        1F            .byte	$1F
05983 1545                        18            .byte	$18
05984 1546                        18            .byte	$18
05985 1547                        18            .byte	$18
05986                                           ! 891  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
05987 1548                        00            .byte	0
05988 1549                        00            .byte	0
05989 154A                        00            .byte	0
05990 154B                        00            .byte	0
05991 154C                        FF            .byte	$FF
05992 154D                        00            .byte	0
05993 154E                        00            .byte	0
05994 154F                        00            .byte	0
05995                                           ! 892  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
05996 1550                        18            .byte	$18
05997 1551                        18            .byte	$18
05998 1552                        18            .byte	$18
05999 1553                        18            .byte	$18
06000 1554                        FF            .byte	$FF
06001 1555                        18            .byte	$18
06002 1556                        18            .byte	$18
06003 1557                        18            .byte	$18
06004                                           ! 893  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06005 1558                        18            .byte	$18
06006 1559                        18            .byte	$18
06007 155A                        1F            .byte	$1F
06008 155B                        18            .byte	$18
06009 155C                        1F            .byte	$1F
06010 155D                        18            .byte	$18
06011 155E                        18            .byte	$18
06012 155F                        18            .byte	$18
06013                                           ! 894  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06014 1560                        36            .byte	$36
06015 1561                        36            .byte	$36
06016 1562                        36            .byte	$36
06017 1563                        36            .byte	$36
06018 1564                        37            .byte	$37
06019 1565                        36            .byte	$36
06020 1566                        36            .byte	$36
06021 1567                        36            .byte	$36
06022                                           ! 895  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06023 1568                        36            .byte	$36
06024 1569                        36            .byte	$36
06025 156A                        37            .byte	$37
06026 156B                        30            .byte	$30
06027 156C                        3F            .byte	$3F
06028 156D                        00            .byte	0
06029 156E                        00            .byte	0
06030 156F                        00            .byte	0
06031                                           ! 896  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06032 1570                        00            .byte	0
06033 1571                        00            .byte	0
06034 1572                        3F            .byte	$3F
06035 1573                        30            .byte	$30
06036 1574                        37            .byte	$37
06037 1575                        36            .byte	$36
06038 1576                        36            .byte	$36
06039 1577                        36            .byte	$36
06040                                           ! 897  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06041 1578                        36            .byte	$36
06042 1579                        36            .byte	$36
06043 157A                        F7            .byte	$F7
06044 157B                        00            .byte	0
06045 157C                        FF            .byte	$FF
06046 157D                        00            .byte	0
06047 157E                        00            .byte	0
06048 157F                        00            .byte	0
06049                                           ! 898  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06050 1580                        00            .byte	0
06051 1581                        00            .byte	0
06052 1582                        FF            .byte	$FF
06053 1583                        00            .byte	0
06054 1584                        F7            .byte	$F7
06055 1585                        36            .byte	$36
06056 1586                        36            .byte	$36
06057 1587                        36            .byte	$36
06058                                           ! 899  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06059 1588                        36            .byte	$36
06060 1589                        36            .byte	$36
06061 158A                        37            .byte	$37
06062 158B                        30            .byte	$30
06063 158C                        37            .byte	$37
06064 158D                        36            .byte	$36
06065 158E                        36            .byte	$36
06066 158F                        36            .byte	$36
06067                                           ! 900  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06068 1590                        00            .byte	0
06069 1591                        00            .byte	0
06070 1592                        FF            .byte	$FF
06071 1593                        00            .byte	0
06072 1594                        FF            .byte	$FF
06073 1595                        00            .byte	0
06074 1596                        00            .byte	0
06075 1597                        00            .byte	0
06076                                           ! 901  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06077 1598                        36            .byte	$36
06078 1599                        36            .byte	$36
06079 159A                        F7            .byte	$F7
06080 159B                        00            .byte	0
06081 159C                        F7            .byte	$F7
06082 159D                        36            .byte	$36
06083 159E                        36            .byte	$36
06084 159F                        36            .byte	$36
06085                                           ! 902  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06086 15A0                        18            .byte	$18
06087 15A1                        18            .byte	$18
06088 15A2                        FF            .byte	$FF
06089 15A3                        00            .byte	0
06090 15A4                        FF            .byte	$FF
06091 15A5                        00            .byte	0
06092 15A6                        00            .byte	0
06093 15A7                        00            .byte	0
06094                                           ! 903  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06095 15A8                        36            .byte	$36
06096 15A9                        36            .byte	$36
06097 15AA                        36            .byte	$36
06098 15AB                        36            .byte	$36
06099 15AC                        FF            .byte	$FF
06100 15AD                        00            .byte	0
06101 15AE                        00            .byte	0
06102 15AF                        00            .byte	0
06103                                           ! 904  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06104 15B0                        00            .byte	0
06105 15B1                        00            .byte	0
06106 15B2                        FF            .byte	$FF
06107 15B3                        00            .byte	0
06108 15B4                        FF            .byte	$FF
06109 15B5                        18            .byte	$18
06110 15B6                        18            .byte	$18
06111 15B7                        18            .byte	$18
06112                                           ! 905  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06113 15B8                        00            .byte	0
06114 15B9                        00            .byte	0
06115 15BA                        00            .byte	0
06116 15BB                        00            .byte	0
06117 15BC                        FF            .byte	$FF
06118 15BD                        36            .byte	$36
06119 15BE                        36            .byte	$36
06120 15BF                        36            .byte	$36
06121                                           ! 906  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06122 15C0                        36            .byte	$36
06123 15C1                        36            .byte	$36
06124 15C2                        36            .byte	$36
06125 15C3                        36            .byte	$36
06126 15C4                        3F            .byte	$3F
06127 15C5                        00            .byte	0
06128 15C6                        00            .byte	0
06129 15C7                        00            .byte	0
06130                                           ! 907  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06131 15C8                        18            .byte	$18
06132 15C9                        18            .byte	$18
06133 15CA                        1F            .byte	$1F
06134 15CB                        18            .byte	$18
06135 15CC                        1F            .byte	$1F
06136 15CD                        00            .byte	0
06137 15CE                        00            .byte	0
06138 15CF                        00            .byte	0
06139                                           ! 908  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06140 15D0                        00            .byte	0
06141 15D1                        00            .byte	0
06142 15D2                        1F            .byte	$1F
06143 15D3                        18            .byte	$18
06144 15D4                        1F            .byte	$1F
06145 15D5                        18            .byte	$18
06146 15D6                        18            .byte	$18
06147 15D7                        18            .byte	$18
06148                                           ! 909  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06149 15D8                        00            .byte	0
06150 15D9                        00            .byte	0
06151 15DA                        00            .byte	0
06152 15DB                        00            .byte	0
06153 15DC                        3F            .byte	$3F
06154 15DD                        36            .byte	$36
06155 15DE                        36            .byte	$36
06156 15DF                        36            .byte	$36
06157                                           ! 910  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06158 15E0                        36            .byte	$36
06159 15E1                        36            .byte	$36
06160 15E2                        36            .byte	$36
06161 15E3                        36            .byte	$36
06162 15E4                        FF            .byte	$FF
06163 15E5                        36            .byte	$36
06164 15E6                        36            .byte	$36
06165 15E7                        36            .byte	$36
06166                                           ! 911  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06167 15E8                        18            .byte	$18
06168 15E9                        18            .byte	$18
06169 15EA                        FF            .byte	$FF
06170 15EB                        18            .byte	$18
06171 15EC                        FF            .byte	$FF
06172 15ED                        18            .byte	$18
06173 15EE                        18            .byte	$18
06174 15EF                        18            .byte	$18
06175                                           ! 912  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06176 15F0                        18            .byte	$18
06177 15F1                        18            .byte	$18
06178 15F2                        18            .byte	$18
06179 15F3                        18            .byte	$18
06180 15F4                        F8            .byte	$F8
06181 15F5                        00            .byte	0
06182 15F6                        00            .byte	0
06183 15F7                        00            .byte	0
06184                                           ! 913  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06185 15F8                        00            .byte	0
06186 15F9                        00            .byte	0
06187 15FA                        00            .byte	0
06188 15FB                        00            .byte	0
06189 15FC                        1F            .byte	$1F
06190 15FD                        18            .byte	$18
06191 15FE                        18            .byte	$18
06192 15FF                        18            .byte	$18
06193                                           ! 914  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06194 1600                        FF            .byte	$FF
06195 1601                        FF            .byte	$FF
06196 1602                        FF            .byte	$FF
06197 1603                        FF            .byte	$FF
06198 1604                        FF            .byte	$FF
06199 1605                        FF            .byte	$FF
06200 1606                        FF            .byte	$FF
06201 1607                        FF            .byte	$FF
06202                                           ! 915  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06203 1608                        00            .byte	0
06204 1609                        00            .byte	0
06205 160A                        00            .byte	0
06206 160B                        00            .byte	0
06207 160C                        FF            .byte	$FF
06208 160D                        FF            .byte	$FF
06209 160E                        FF            .byte	$FF
06210 160F                        FF            .byte	$FF
06211                                           ! 916  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06212 1610                        F0            .byte	$F0
06213 1611                        F0            .byte	$F0
06214 1612                        F0            .byte	$F0
06215 1613                        F0            .byte	$F0
06216 1614                        F0            .byte	$F0
06217 1615                        F0            .byte	$F0
06218 1616                        F0            .byte	$F0
06219 1617                        F0            .byte	$F0
06220                                           ! 917  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06221 1618                        0F            .byte	$F
06222 1619                        0F            .byte	$F
06223 161A                        0F            .byte	$F
06224 161B                        0F            .byte	$F
06225 161C                        0F            .byte	$F
06226 161D                        0F            .byte	$F
06227 161E                        0F            .byte	$F
06228 161F                        0F            .byte	$F
06229                                           ! 918  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06230 1620                        FF            .byte	$FF
06231 1621                        FF            .byte	$FF
06232 1622                        FF            .byte	$FF
06233 1623                        FF            .byte	$FF
06234 1624                        00            .byte	0
06235 1625                        00            .byte	0
06236 1626                        00            .byte	0
06237 1627                        00            .byte	0
06238                                           ! 919  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06239 1628                        00            .byte	0
06240 1629                        00            .byte	0
06241 162A                        76            .byte	$76
06242 162B                        DC            .byte	$DC
06243 162C                        C8            .byte	$C8
06244 162D                        DC            .byte	$DC
06245 162E                        76            .byte	$76
06246 162F                        00            .byte	0
06247                                           ! 920  0x00, 0x78, 0xcc, 
06248 1630                        00            .byte	0
06249 1631                        78            .byte	$78
06250 1632                        CC            .byte	$CC
06251                                           ! 920 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06252 1633                        F8            .byte	$F8
06253 1634                        CC            .byte	$CC
06254 1635                        F8            .byte	$F8
06255 1636                        C0            .byte	$C0
06256 1637                        C0            .byte	$C0
06257                                           ! 921  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06258 1638                        00            .byte	0
06259 1639                        FC            .byte	$FC
06260 163A                        CC            .byte	$CC
06261 163B                        C0            .byte	$C0
06262 163C                        C0            .byte	$C0
06263 163D                        C0            .byte	$C0
06264 163E                        C0            .byte	$C0
06265 163F                        00            .byte	0
06266                                           ! 922  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06267 1640                        00            .byte	0
06268 1641                        FE            .byte	$FE
06269 1642                        6C            .byte	$6C
06270 1643                        6C            .byte	$6C
06271 1644                        6C            .byte	$6C
06272 1645                        6C            .byte	$6C
06273 1646                        6C            .byte	$6C
06274 1647                        00            .byte	0
06275                                           ! 923  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06276 1648                        FC            .byte	$FC
06277 1649                        CC            .byte	$CC
06278 164A                        60            .byte	$60
06279 164B                        30            .byte	$30
06280 164C                        60            .byte	$60
06281 164D                        CC            .byte	$CC
06282 164E                        FC            .byte	$FC
06283 164F                        00            .byte	0
06284                                           ! 924  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06285 1650                        00            .byte	0
06286 1651                        00            .byte	0
06287 1652                        7E            .byte	$7E
06288 1653                        D8            .byte	$D8
06289 1654                        D8            .byte	$D8
06290 1655                        D8            .byte	$D8
06291 1656                        70            .byte	$70
06292 1657                        00            .byte	0
06293                                           ! 925  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06294 1658                        00            .byte	0
06295 1659                        66            .byte	$66
06296 165A                        66            .byte	$66
06297 165B                        66            .byte	$66
06298 165C                        66            .byte	$66
06299 165D                        7C            .byte	$7C
06300 165E                        60            .byte	$60
06301 165F                        C0            .byte	$C0
06302                                           ! 926  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06303 1660                        00            .byte	0
06304 1661                        76            .byte	$76
06305 1662                        DC            .byte	$DC
06306 1663                        18            .byte	$18
06307 1664                        18            .byte	$18
06308 1665                        18            .byte	$18
06309 1666                        18            .byte	$18
06310 1667                        00            .byte	0
06311                                           ! 927  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06312 1668                        FC            .byte	$FC
06313 1669                        30            .byte	$30
06314 166A                        78            .byte	$78
06315 166B                        CC            .byte	$CC
06316 166C                        CC            .byte	$CC
06317 166D                        78            .byte	$78
06318 166E                        30            .byte	$30
06319 166F                        FC            .byte	$FC
06320                                           ! 928  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06321 1670                        38            .byte	$38
06322 1671                        6C            .byte	$6C
06323 1672                        C6            .byte	$C6
06324 1673                        FE            .byte	$FE
06325 1674                        C6            .byte	$C6
06326 1675                        6C            .byte	$6C
06327 1676                        38            .byte	$38
06328 1677                        00            .byte	0
06329                                           ! 929  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06330 1678                        38            .byte	$38
06331 1679                        6C            .byte	$6C
06332 167A                        C6            .byte	$C6
06333 167B                        C6            .byte	$C6
06334 167C                        6C            .byte	$6C
06335 167D                        6C            .byte	$6C
06336 167E                        EE            .byte	$EE
06337 167F                        00            .byte	0
06338                                           ! 930  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06339 1680                        1C            .byte	$1C
06340 1681                        30            .byte	$30
06341 1682                        18            .byte	$18
06342 1683                        7C            .byte	$7C
06343 1684                        CC            .byte	$CC
06344 1685                        CC            .byte	$CC
06345 1686                        78            .byte	$78
06346 1687                        00            .byte	0
06347                                           ! 931  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06348 1688                        00            .byte	0
06349 1689                        00            .byte	0
06350 168A                        7E            .byte	$7E
06351 168B                        DB            .byte	$DB
06352 168C                        DB            .byte	$DB
06353 168D                        7E            .byte	$7E
06354 168E                        00            .byte	0
06355 168F                        00            .byte	0
06356                                           ! 932  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06357 1690                        06            .byte	6
06358 1691                        0C            .byte	$C
06359 1692                        7E            .byte	$7E
06360 1693                        DB            .byte	$DB
06361 1694                        DB            .byte	$DB
06362 1695                        7E            .byte	$7E
06363 1696                        60            .byte	$60
06364 1697                        C0            .byte	$C0
06365                                           ! 933  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06366 1698                        38            .byte	$38
06367 1699                        60            .byte	$60
06368 169A                        C0            .byte	$C0
06369 169B                        F8            .byte	$F8
06370 169C                        C0            .byte	$C0
06371 169D                        60            .byte	$60
06372 169E                        38            .byte	$38
06373 169F                        00            .byte	0
06374                                           ! 934  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06375 16A0                        78            .byte	$78
06376 16A1                        CC            .byte	$CC
06377 16A2                        CC            .byte	$CC
06378 16A3                        CC            .byte	$CC
06379 16A4                        CC            .byte	$CC
06380 16A5                        CC            .byte	$CC
06381 16A6                        CC            .byte	$CC
06382 16A7                        00            .byte	0
06383                                           ! 935  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06384 16A8                        00            .byte	0
06385 16A9                        FC            .byte	$FC
06386 16AA                        00            .byte	0
06387 16AB                        FC            .byte	$FC
06388 16AC                        00            .byte	0
06389 16AD                        FC            .byte	$FC
06390 16AE                        00            .byte	0
06391 16AF                        00            .byte	0
06392                                           ! 936  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06393 16B0                        30            .byte	$30
06394 16B1                        30            .byte	$30
06395 16B2                        FC            .byte	$FC
06396 16B3                        30            .byte	$30
06397 16B4                        30            .byte	$30
06398 16B5                        00            .byte	0
06399 16B6                        FC            .byte	$FC
06400 16B7                        00            .byte	0
06401                                           ! 937  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06402 16B8                        60            .byte	$60
06403 16B9                        30            .byte	$30
06404 16BA                        18            .byte	$18
06405 16BB                        30            .byte	$30
06406 16BC                        60            .byte	$60
06407 16BD                        00            .byte	0
06408 16BE                        FC            .byte	$FC
06409 16BF                        00            .byte	0
06410                                           ! 938  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06411 16C0                        18            .byte	$18
06412 16C1                        30            .byte	$30
06413 16C2                        60            .byte	$60
06414 16C3                        30            .byte	$30
06415 16C4                        18            .byte	$18
06416 16C5                        00            .byte	0
06417 16C6                        FC            .byte	$FC
06418 16C7                        00            .byte	0
06419                                           ! 939  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06420 16C8                        0E            .byte	$E
06421 16C9                        1B            .byte	$1B
06422 16CA                        1B            .byte	$1B
06423 16CB                        18            .byte	$18
06424 16CC                        18            .byte	$18
06425 16CD                        18            .byte	$18
06426 16CE                        18            .byte	$18
06427 16CF                        18            .byte	$18
06428                                           ! 940  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06429 16D0                        18            .byte	$18
06430 16D1                        18            .byte	$18
06431 16D2                        18            .byte	$18
06432 16D3                        18            .byte	$18
06433 16D4                        18            .byte	$18
06434 16D5                        D8            .byte	$D8
06435 16D6                        D8            .byte	$D8
06436 16D7                        70            .byte	$70
06437                                           ! 941  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06438 16D8                        30            .byte	$30
06439 16D9                        30            .byte	$30
06440 16DA                        00            .byte	0
06441 16DB                        FC            .byte	$FC
06442 16DC                        00            .byte	0
06443 16DD                        30            .byte	$30
06444 16DE                        30            .byte	$30
06445 16DF                        00            .byte	0
06446                                           ! 942  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06447 16E0                        00            .byte	0
06448 16E1                        76            .byte	$76
06449 16E2                        DC            .byte	$DC
06450 16E3                        00            .byte	0
06451 16E4                        76            .byte	$76
06452 16E5                        DC            .byte	$DC
06453 16E6                        00            .byte	0
06454 16E7                        00            .byte	0
06455                                           ! 943  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06456 16E8                        38            .byte	$38
06457 16E9                        6C            .byte	$6C
06458 16EA                        6C            .byte	$6C
06459 16EB                        38            .byte	$38
06460 16EC                        00            .byte	0
06461 16ED                        00            .byte	0
06462 16EE                        00            .byte	0
06463 16EF                        00            .byte	0
06464                                           ! 944  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06465 16F0                        00            .byte	0
06466 16F1                        00            .byte	0
06467 16F2                        00            .byte	0
06468 16F3                        18            .byte	$18
06469 16F4                        18            .byte	$18
06470 16F5                        00            .byte	0
06471 16F6                        00            .byte	0
06472 16F7                        00            .byte	0
06473                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06474 16F8                        00            .byte	0
06475 16F9                        00            .byte	0
06476 16FA                        00            .byte	0
06477 16FB                        00            .byte	0
06478 16FC                        18            .byte	$18
06479 16FD                        00            .byte	0
06480 16FE                        00            .byte	0
06481 16FF                        00            .byte	0
06482                                           ! 946  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06483 1700                        0F            .byte	$F
06484 1701                        0C            .byte	$C
06485 1702                        0C            .byte	$C
06486 1703                        0C            .byte	$C
06487 1704                        EC            .byte	$EC
06488 1705                        6C            .byte	$6C
06489 1706                        3C            .byte	$3C
06490 1707                        1C            .byte	$1C
06491                                           ! 947  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06492 1708                        78            .byte	$78
06493 1709                        6C            .byte	$6C
06494 170A                        6C            .byte	$6C
06495 170B                        6C            .byte	$6C
06496 170C                        6C            .byte	$6C
06497 170D                        00            .byte	0
06498 170E                        00            .byte	0
06499 170F                        00            .byte	0
06500                                           ! 948  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06501 1710                        70            .byte	$70
06502 1711                        18            .byte	$18
06503 1712                        30            .byte	$30
06504 1713                        60            .byte	$60
06505 1714                        78            .byte	$78
06506 1715                        00            .byte	0
06507 1716                        00            .byte	0
06508 1717                        00            .byte	0
06509                                           ! 949  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06510 1718                        00            .byte	0
06511 1719                        00            .byte	0
06512 171A                        3C            .byte	$3C
06513 171B                        3C            .byte	$3C
06514 171C                        3C            .byte	$3C
06515 171D                        3C            .byte	$3C
06516 171E                        00            .byte	0
06517 171F                        00            .byte	0
06518                                           ! 950  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06519 1720                        00            .byte	0
06520 1721                        00            .byte	0
06521 1722                        00            .byte	0
06522 1723                        00            .byte	0
06523 1724                        00            .byte	0
06524 1725                        00            .byte	0
06525 1726                        00            .byte	0
06526                                           ! 951 };
06527 1727                        00            .byte	0
06528                                           !BCC_EOS
06529                                           ! 952 static Bit8u vgafont14[256*14]=
06530                                           ! 953 {
06531                       00001728            _vgafont14:
06532                                           ! 954  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06533 1728                        00            .byte	0
06534 1729                        00            .byte	0
06535 172A                        00            .byte	0
06536 172B                        00            .byte	0
06537 172C                        00            .byte	0
06538 172D                        00            .byte	0
06539 172E                        00            .byte	0
06540 172F                        00            .byte	0
06541 1730                        00            .byte	0
06542 1731                        00            .byte	0
06543 1732                        00            .byte	0
06544 1733                        00            .byte	0
06545 1734                        00            .byte	0
06546 1735                        00            .byte	0
06547                                           ! 955  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06548 1736                        00            .byte	0
06549 1737                        00            .byte	0
06550 1738                        7E            .byte	$7E
06551 1739                        81            .byte	$81
06552 173A                        A5            .byte	$A5
06553 173B                        81            .byte	$81
06554 173C                        81            .byte	$81
06555 173D                        BD            .byte	$BD
06556 173E                        99            .byte	$99
06557 173F                        81            .byte	$81
06558 1740                        7E            .byte	$7E
06559 1741                        00            .byte	0
06560 1742                        00            .byte	0
06561 1743                        00            .byte	0
06562                                           ! 956  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06563 1744                        00            .byte	0
06564 1745                        00            .byte	0
06565 1746                        7E            .byte	$7E
06566 1747                        FF            .byte	$FF
06567 1748                        DB            .byte	$DB
06568 1749                        FF            .byte	$FF
06569 174A                        FF            .byte	$FF
06570 174B                        C3            .byte	$C3
06571 174C                        E7            .byte	$E7
06572 174D                        FF            .byte	$FF
06573 174E                        7E            .byte	$7E
06574 174F                        00            .byte	0
06575 1750                        00            .byte	0
06576 1751                        00            .byte	0
06577                                           ! 957  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06578 1752                        00            .byte	0
06579 1753                        00            .byte	0
06580 1754                        00            .byte	0
06581 1755                        6C            .byte	$6C
06582 1756                        FE            .byte	$FE
06583 1757                        FE            .byte	$FE
06584 1758                        FE            .byte	$FE
06585 1759                        FE            .byte	$FE
06586 175A                        7C            .byte	$7C
06587 175B                        38            .byte	$38
06588 175C                        10            .byte	$10
06589 175D                        00            .byte	0
06590 175E                        00            .byte	0
06591 175F                        00            .byte	0
06592                                           ! 958  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06593 1760                        00            .byte	0
06594 1761                        00            .byte	0
06595 1762                        00            .byte	0
06596 1763                        10            .byte	$10
06597 1764                        38            .byte	$38
06598 1765                        7C            .byte	$7C
06599 1766                        FE            .byte	$FE
06600 1767                        7C            .byte	$7C
06601 1768                        38            .byte	$38
06602 1769                        10            .byte	$10
06603 176A                        00            .byte	0
06604 176B                        00            .byte	0
06605 176C                        00            .byte	0
06606 176D                        00            .byte	0
06607                                           ! 959  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06608 176E                        00            .byte	0
06609 176F                        00            .byte	0
06610 1770                        18            .byte	$18
06611 1771                        3C            .byte	$3C
06612 1772                        3C            .byte	$3C
06613 1773                        E7            .byte	$E7
06614 1774                        E7            .byte	$E7
06615 1775                        E7            .byte	$E7
06616 1776                        18            .byte	$18
06617 1777                        18            .byte	$18
06618 1778                        3C            .byte	$3C
06619 1779                        00            .byte	0
06620 177A                        00            .byte	0
06621 177B                        00            .byte	0
06622                                           ! 960  0
06623                                           ! 960 x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06624 177C                        00            .byte	0
06625 177D                        00            .byte	0
06626 177E                        18            .byte	$18
06627 177F                        3C            .byte	$3C
06628 1780                        7E            .byte	$7E
06629 1781                        FF            .byte	$FF
06630 1782                        FF            .byte	$FF
06631 1783                        7E            .byte	$7E
06632 1784                        18            .byte	$18
06633 1785                        18            .byte	$18
06634 1786                        3C            .byte	$3C
06635 1787                        00            .byte	0
06636 1788                        00            .byte	0
06637 1789                        00            .byte	0
06638                                           ! 961  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06639 178A                        00            .byte	0
06640 178B                        00            .byte	0
06641 178C                        00            .byte	0
06642 178D                        00            .byte	0
06643 178E                        00            .byte	0
06644 178F                        18            .byte	$18
06645 1790                        3C            .byte	$3C
06646 1791                        3C            .byte	$3C
06647 1792                        18            .byte	$18
06648 1793                        00            .byte	0
06649 1794                        00            .byte	0
06650 1795                        00            .byte	0
06651 1796                        00            .byte	0
06652 1797                        00            .byte	0
06653                                           ! 962  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06654 1798                        FF            .byte	$FF
06655 1799                        FF            .byte	$FF
06656 179A                        FF            .byte	$FF
06657 179B                        FF            .byte	$FF
06658 179C                        FF            .byte	$FF
06659 179D                        E7            .byte	$E7
06660 179E                        C3            .byte	$C3
06661 179F                        C3            .byte	$C3
06662 17A0                        E7            .byte	$E7
06663 17A1                        FF            .byte	$FF
06664 17A2                        FF            .byte	$FF
06665 17A3                        FF            .byte	$FF
06666 17A4                        FF            .byte	$FF
06667 17A5                        FF            .byte	$FF
06668                                           ! 963  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06669 17A6                        00            .byte	0
06670 17A7                        00            .byte	0
06671 17A8                        00            .byte	0
06672 17A9                        00            .byte	0
06673 17AA                        3C            .byte	$3C
06674 17AB                        66            .byte	$66
06675 17AC                        42            .byte	$42
06676 17AD                        42            .byte	$42
06677 17AE                        66            .byte	$66
06678 17AF                        3C            .byte	$3C
06679 17B0                        00            .byte	0
06680 17B1                        00            .byte	0
06681 17B2                        00            .byte	0
06682 17B3                        00            .byte	0
06683                                           ! 964  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06684 17B4                        FF            .byte	$FF
06685 17B5                        FF            .byte	$FF
06686 17B6                        FF            .byte	$FF
06687 17B7                        FF            .byte	$FF
06688 17B8                        C3            .byte	$C3
06689 17B9                        99            .byte	$99
06690 17BA                        BD            .byte	$BD
06691 17BB                        BD            .byte	$BD
06692 17BC                        99            .byte	$99
06693 17BD                        C3            .byte	$C3
06694 17BE                        FF            .byte	$FF
06695 17BF                        FF            .byte	$FF
06696 17C0                        FF            .byte	$FF
06697 17C1                        FF            .byte	$FF
06698                                           ! 965  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06699 17C2                        00            .byte	0
06700 17C3                        00            .byte	0
06701 17C4                        1E            .byte	$1E
06702 17C5                        0E            .byte	$E
06703 17C6                        1A            .byte	$1A
06704 17C7                        32            .byte	$32
06705 17C8                        78            .byte	$78
06706 17C9                        CC            .byte	$CC
06707 17CA                        CC            .byte	$CC
06708 17CB                        CC            .byte	$CC
06709 17CC                        78            .byte	$78
06710 17CD                        00            .byte	0
06711 17CE                        00            .byte	0
06712 17CF                        00            .byte	0
06713                                           ! 966  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06714 17D0                        00            .byte	0
06715 17D1                        00            .byte	0
06716 17D2                        3C            .byte	$3C
06717 17D3                        66            .byte	$66
06718 17D4                        66            .byte	$66
06719 17D5                        66            .byte	$66
06720 17D6                        3C            .byte	$3C
06721 17D7                        18            .byte	$18
06722 17D8                        7E            .byte	$7E
06723 17D9                        18            .byte	$18
06724 17DA                        18            .byte	$18
06725 17DB                        00            .byte	0
06726 17DC                        00            .byte	0
06727 17DD                        00            .byte	0
06728                                           ! 967  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06729 17DE                        00            .byte	0
06730 17DF                        00            .byte	0
06731 17E0                        3F            .byte	$3F
06732 17E1                        33            .byte	$33
06733 17E2                        3F            .byte	$3F
06734 17E3                        30            .byte	$30
06735 17E4                        30            .byte	$30
06736 17E5                        30            .byte	$30
06737 17E6                        70            .byte	$70
06738 17E7                        F0            .byte	$F0
06739 17E8                        E0            .byte	$E0
06740 17E9                        00            .byte	0
06741 17EA                        00            .byte	0
06742 17EB                        00            .byte	0
06743                                           ! 968  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06744 17EC                        00            .byte	0
06745 17ED                        00            .byte	0
06746 17EE                        7F            .byte	$7F
06747 17EF                        63            .byte	$63
06748 17F0                        7F            .byte	$7F
06749 17F1                        63            .byte	$63
06750 17F2                        63            .byte	$63
06751 17F3                        63            .byte	$63
06752 17F4                        67            .byte	$67
06753 17F5                        E7            .byte	$E7
06754 17F6                        E6            .byte	$E6
06755 17F7                        C0            .byte	$C0
06756 17F8                        00            .byte	0
06757 17F9                        00            .byte	0
06758                                           ! 969  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06759 17FA                        00            .byte	0
06760 17FB                        00            .byte	0
06761 17FC                        18            .byte	$18
06762 17FD                        18            .byte	$18
06763 17FE                        DB            .byte	$DB
06764 17FF                        3C            .byte	$3C
06765 1800                        E7            .byte	$E7
06766 1801                        3C            .byte	$3C
06767 1802                        DB            .byte	$DB
06768 1803                        18            .byte	$18
06769 1804                        18            .byte	$18
06770 1805                        00            .byte	0
06771 1806                        00            .byte	0
06772 1807                        00            .byte	0
06773                                           ! 970  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06774 1808                        00            .byte	0
06775 1809                        00            .byte	0
06776 180A                        80            .byte	$80
06777 180B                        C0            .byte	$C0
06778 180C                        E0            .byte	$E0
06779 180D                        F8            .byte	$F8
06780 180E                        FE            .byte	$FE
06781 180F                        F8            .byte	$F8
06782 1810                        E0            .byte	$E0
06783 1811                        C0            .byte	$C0
06784 1812                        80            .byte	$80
06785 1813                        00            .byte	0
06786 1814                        00            .byte	0
06787 1815                        00            .byte	0
06788                                           ! 971  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06789 1816                        00            .byte	0
06790 1817                        00            .byte	0
06791 1818                        02            .byte	2
06792 1819                        06            .byte	6
06793 181A                        0E            .byte	$E
06794 181B                        3E            .byte	$3E
06795 181C                        FE            .byte	$FE
06796 181D                        3E            .byte	$3E
06797 181E                        0E            .byte	$E
06798 181F                        06            .byte	6
06799 1820                        02            .byte	2
06800 1821                        00            .byte	0
06801 1822                        00            .byte	0
06802 1823                        00            .byte	0
06803                                           ! 972  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06804 1824                        00            .byte	0
06805 1825                        00            .byte	0
06806 1826                        18            .byte	$18
06807 1827                        3C            .byte	$3C
06808 1828                        7E            .byte	$7E
06809 1829                        18            .byte	$18
06810 182A                        18            .byte	$18
06811 182B                        18            .byte	$18
06812 182C                        7E            .byte	$7E
06813 182D                        3C            .byte	$3C
06814 182E                        18            .byte	$18
06815 182F                        00            .byte	0
06816 1830                        00            .byte	0
06817 1831                        00            .byte	0
06818                                           ! 973  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06819 1832                        00            .byte	0
06820 1833                        00            .byte	0
06821 1834                        66            .byte	$66
06822 1835                        66            .byte	$66
06823 1836                        66            .byte	$66
06824 1837                        66            .byte	$66
06825 1838                        66            .byte	$66
06826 1839                        66            .byte	$66
06827 183A                        00            .byte	0
06828 183B                        66            .byte	$66
06829 183C                        66            .byte	$66
06830 183D                        00            .byte	0
06831 183E                        00            .byte	0
06832 183F                        00            .byte	0
06833                                           ! 974  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06834 1840                        00            .byte	0
06835 1841                        00            .byte	0
06836 1842                        7F            .byte	$7F
06837 1843                        DB            .byte	$DB
06838 1844                        DB            .byte	$DB
06839 1845                        DB            .byte	$DB
06840 1846                        7B            .byte	$7B
06841 1847                        1B            .byte	$1B
06842 1848                        1B            .byte	$1B
06843 1849                        1B            .byte	$1B
06844 184A                        1B            .byte	$1B
06845 184B                        00            .byte	0
06846 184C                        00            .byte	0
06847 184D                        00            .byte	0
06848                                           ! 975  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06849 184E                        00            .byte	0
06850 184F                        7C            .byte	$7C
06851 1850                        C6            .byte	$C6
06852 1851                        60            .byte	$60
06853 1852                        38            .byte	$38
06854 1853                        6C            .byte	$6C
06855 1854                        C6            .byte	$C6
06856 1855                        C6            .byte	$C6
06857 1856                        6C            .byte	$6C
06858 1857                        38            .byte	$38
06859 1858                        0C            .byte	$C
06860 1859                        C6            .byte	$C6
06861 185A                        7C            .byte	$7C
06862 185B                        00            .byte	0
06863                                           ! 976  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06864 185C                        00            .byte	0
06865 185D                        00            .byte	0
06866 185E                        00            .byte	0
06867 185F                        00            .byte	0
06868 1860                        00            .byte	0
06869 1861                        00            .byte	0
06870 1862                        00            .byte	0
06871 1863                        00            .byte	0
06872 1864                        FE            .byte	$FE
06873 1865                        FE            .byte	$FE
06874 1866                        FE            .byte	$FE
06875 1867                        00            .byte	0
06876 1868                        00            .byte	0
06877 1869                        00            .byte	0
06878                                           ! 977  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06879 186A                        00            .byte	0
06880 186B                        00            .byte	0
06881 186C                        18            .byte	$18
06882 186D                        3C            .byte	$3C
06883 186E                        7E            .byte	$7E
06884 186F                        18            .byte	$18
06885 1870                        18            .byte	$18
06886 1871                        18            .byte	$18
06887 1872                        7E            .byte	$7E
06888 1873                        3C            .byte	$3C
06889 1874                        18            .byte	$18
06890 1875                        7E            .byte	$7E
06891 1876                        00            .byte	0
06892 1877                        00            .byte	0
06893                                           ! 978  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
06894 1878                        00            .byte	0
06895 1879                        00            .byte	0
06896 187A                        18            .byte	$18
06897 187B                        3C            .byte	$3C
06898 187C                        7E            .byte	$7E
06899 187D                        18            .byte	$18
06900 187E                        18            .byte	$18
06901 187F                        18            .byte	$18
06902 1880                        18            .byte	$18
06903 1881                        18            .byte	$18
06904 1882                        18            .byte	$18
06905 1883                        00            .byte	0
06906 1884                        00            .byte	0
06907 1885                        00            .byte	0
06908                                           ! 979  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06909 1886                        00            .byte	0
06910 1887                        00            .byte	0
06911 1888                        18            .byte	$18
06912 1889                        18            .byte	$18
06913 188A                        18            .byte	$18
06914 188B                        18            .byte	$18
06915 188C                        18            .byte	$18
06916 188D                        18            .byte	$18
06917 188E                        7E            .byte	$7E
06918 188F                        3C            .byte	$3C
06919 1890                        18            .byte	$18
06920 1891                        00            .byte	0
06921 1892                        00            .byte	0
06922 1893                        00            .byte	0
06923                                           ! 980  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06924 1894                        00            .byte	0
06925 1895                        00            .byte	0
06926 1896                        00            .byte	0
06927 1897                        00            .byte	0
06928 1898                        18            .byte	$18
06929 1899                        0C            .byte	$C
06930 189A                        FE            .byte	$FE
06931 189B                        0C            .byte	$C
06932 189C                        18            .byte	$18
06933 189D                        00            .byte	0
06934 189E                        00            .byte	0
06935 189F                        00            .byte	0
06936 18A0                        00            .byte	0
06937 18A1                        00            .byte	0
06938                                           ! 981  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06939 18A2                        00            .byte	0
06940 18A3                        00            .byte	0
06941 18A4                        00            .byte	0
06942 18A5                        00            .byte	0
06943 18A6                        30            .byte	$30
06944 18A7                        60            .byte	$60
06945 18A8                        FE            .byte	$FE
06946 18A9                        60            .byte	$60
06947 18AA                        30            .byte	$30
06948 18AB                        00            .byte	0
06949 18AC                        00            .byte	0
06950 18AD                        00            .byte	0
06951 18AE                        00            .byte	0
06952 18AF                        00            .byte	0
06953                                           ! 982  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06954 18B0                        00            .byte	0
06955 18B1                        00            .byte	0
06956 18B2                        00            .byte	0
06957 18B3                        00            .byte	0
06958 18B4                        00            .byte	0
06959 18B5                        C0            .byte	$C0
06960 18B6                        C0            .byte	$C0
06961 18B7                        C0            .byte	$C0
06962 18B8                        FE            .byte	$FE
06963 18B9                        00            .byte	0
06964 18BA                        00            .byte	0
06965 18BB                        00            .byte	0
06966 18BC                        00            .byte	0
06967 18BD                        00            .byte	0
06968                                           ! 983  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
06969 18BE                        00            .byte	0
06970 18BF                        00            .byte	0
06971 18C0                        00            .byte	0
06972 18C1                        00            .byte	0
06973 18C2                        28            .byte	$28
06974 18C3                        6C            .byte	$6C
06975 18C4                        FE            .byte	$FE
06976 18C5                        6C            .byte	$6C
06977 18C6                        28            .byte	$28
06978 18C7                        00            .byte	0
06979 18C8                        00            .byte	0
06980 18C9                        00            .byte	0
06981 18CA                        00            .byte	0
06982 18CB                        00            .byte	0
06983                                           ! 984  0x00, 0x0
06984 18CC                        00            .byte	0
06985                                           ! 984 0, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
06986 18CD                        00            .byte	0
06987 18CE                        00            .byte	0
06988 18CF                        10            .byte	$10
06989 18D0                        38            .byte	$38
06990 18D1                        38            .byte	$38
06991 18D2                        7C            .byte	$7C
06992 18D3                        7C            .byte	$7C
06993 18D4                        FE            .byte	$FE
06994 18D5                        FE            .byte	$FE
06995 18D6                        00            .byte	0
06996 18D7                        00            .byte	0
06997 18D8                        00            .byte	0
06998 18D9                        00            .byte	0
06999                                           ! 985  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07000 18DA                        00            .byte	0
07001 18DB                        00            .byte	0
07002 18DC                        00            .byte	0
07003 18DD                        FE            .byte	$FE
07004 18DE                        FE            .byte	$FE
07005 18DF                        7C            .byte	$7C
07006 18E0                        7C            .byte	$7C
07007 18E1                        38            .byte	$38
07008 18E2                        38            .byte	$38
07009 18E3                        10            .byte	$10
07010 18E4                        00            .byte	0
07011 18E5                        00            .byte	0
07012 18E6                        00            .byte	0
07013 18E7                        00            .byte	0
07014                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07015 18E8                        00            .byte	0
07016 18E9                        00            .byte	0
07017 18EA                        00            .byte	0
07018 18EB                        00            .byte	0
07019 18EC                        00            .byte	0
07020 18ED                        00            .byte	0
07021 18EE                        00            .byte	0
07022 18EF                        00            .byte	0
07023 18F0                        00            .byte	0
07024 18F1                        00            .byte	0
07025 18F2                        00            .byte	0
07026 18F3                        00            .byte	0
07027 18F4                        00            .byte	0
07028 18F5                        00            .byte	0
07029                                           ! 987  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07030 18F6                        00            .byte	0
07031 18F7                        00            .byte	0
07032 18F8                        18            .byte	$18
07033 18F9                        3C            .byte	$3C
07034 18FA                        3C            .byte	$3C
07035 18FB                        3C            .byte	$3C
07036 18FC                        18            .byte	$18
07037 18FD                        18            .byte	$18
07038 18FE                        00            .byte	0
07039 18FF                        18            .byte	$18
07040 1900                        18            .byte	$18
07041 1901                        00            .byte	0
07042 1902                        00            .byte	0
07043 1903                        00            .byte	0
07044                                           ! 988  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07045 1904                        00            .byte	0
07046 1905                        66            .byte	$66
07047 1906                        66            .byte	$66
07048 1907                        66            .byte	$66
07049 1908                        24            .byte	$24
07050 1909                        00            .byte	0
07051 190A                        00            .byte	0
07052 190B                        00            .byte	0
07053 190C                        00            .byte	0
07054 190D                        00            .byte	0
07055 190E                        00            .byte	0
07056 190F                        00            .byte	0
07057 1910                        00            .byte	0
07058 1911                        00            .byte	0
07059                                           ! 989  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07060 1912                        00            .byte	0
07061 1913                        00            .byte	0
07062 1914                        6C            .byte	$6C
07063 1915                        6C            .byte	$6C
07064 1916                        FE            .byte	$FE
07065 1917                        6C            .byte	$6C
07066 1918                        6C            .byte	$6C
07067 1919                        6C            .byte	$6C
07068 191A                        FE            .byte	$FE
07069 191B                        6C            .byte	$6C
07070 191C                        6C            .byte	$6C
07071 191D                        00            .byte	0
07072 191E                        00            .byte	0
07073 191F                        00            .byte	0
07074                                           ! 990  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07075 1920                        18            .byte	$18
07076 1921                        18            .byte	$18
07077 1922                        7C            .byte	$7C
07078 1923                        C6            .byte	$C6
07079 1924                        C2            .byte	$C2
07080 1925                        C0            .byte	$C0
07081 1926                        7C            .byte	$7C
07082 1927                        06            .byte	6
07083 1928                        86            .byte	$86
07084 1929                        C6            .byte	$C6
07085 192A                        7C            .byte	$7C
07086 192B                        18            .byte	$18
07087 192C                        18            .byte	$18
07088 192D                        00            .byte	0
07089                                           ! 991  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07090 192E                        00            .byte	0
07091 192F                        00            .byte	0
07092 1930                        00            .byte	0
07093 1931                        00            .byte	0
07094 1932                        C2            .byte	$C2
07095 1933                        C6            .byte	$C6
07096 1934                        0C            .byte	$C
07097 1935                        18            .byte	$18
07098 1936                        30            .byte	$30
07099 1937                        66            .byte	$66
07100 1938                        C6            .byte	$C6
07101 1939                        00            .byte	0
07102 193A                        00            .byte	0
07103 193B                        00            .byte	0
07104                                           ! 992  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07105 193C                        00            .byte	0
07106 193D                        00            .byte	0
07107 193E                        38            .byte	$38
07108 193F                        6C            .byte	$6C
07109 1940                        6C            .byte	$6C
07110 1941                        38            .byte	$38
07111 1942                        76            .byte	$76
07112 1943                        DC            .byte	$DC
07113 1944                        CC            .byte	$CC
07114 1945                        CC            .byte	$CC
07115 1946                        76            .byte	$76
07116 1947                        00            .byte	0
07117 1948                        00            .byte	0
07118 1949                        00            .byte	0
07119                                           ! 993  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07120 194A                        00            .byte	0
07121 194B                        30            .byte	$30
07122 194C                        30            .byte	$30
07123 194D                        30            .byte	$30
07124 194E                        60            .byte	$60
07125 194F                        00            .byte	0
07126 1950                        00            .byte	0
07127 1951                        00            .byte	0
07128 1952                        00            .byte	0
07129 1953                        00            .byte	0
07130 1954                        00            .byte	0
07131 1955                        00            .byte	0
07132 1956                        00            .byte	0
07133 1957                        00            .byte	0
07134                                           ! 994  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07135 1958                        00            .byte	0
07136 1959                        00            .byte	0
07137 195A                        0C            .byte	$C
07138 195B                        18            .byte	$18
07139 195C                        30            .byte	$30
07140 195D                        30            .byte	$30
07141 195E                        30            .byte	$30
07142 195F                        30            .byte	$30
07143 1960                        30            .byte	$30
07144 1961                        18            .byte	$18
07145 1962                        0C            .byte	$C
07146 1963                        00            .byte	0
07147 1964                        00            .byte	0
07148 1965                        00            .byte	0
07149                                           ! 995  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07150 1966                        00            .byte	0
07151 1967                        00            .byte	0
07152 1968                        30            .byte	$30
07153 1969                        18            .byte	$18
07154 196A                        0C            .byte	$C
07155 196B                        0C            .byte	$C
07156 196C                        0C            .byte	$C
07157 196D                        0C            .byte	$C
07158 196E                        0C            .byte	$C
07159 196F                        18            .byte	$18
07160 1970                        30            .byte	$30
07161 1971                        00            .byte	0
07162 1972                        00            .byte	0
07163 1973                        00            .byte	0
07164                                           ! 996  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07165 1974                        00            .byte	0
07166 1975                        00            .byte	0
07167 1976                        00            .byte	0
07168 1977                        00            .byte	0
07169 1978                        66            .byte	$66
07170 1979                        3C            .byte	$3C
07171 197A                        FF            .byte	$FF
07172 197B                        3C            .byte	$3C
07173 197C                        66            .byte	$66
07174 197D                        00            .byte	0
07175 197E                        00            .byte	0
07176 197F                        00            .byte	0
07177 1980                        00            .byte	0
07178 1981                        00            .byte	0
07179                                           ! 997  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07180 1982                        00            .byte	0
07181 1983                        00            .byte	0
07182 1984                        00            .byte	0
07183 1985                        00            .byte	0
07184 1986                        18            .byte	$18
07185 1987                        18            .byte	$18
07186 1988                        7E            .byte	$7E
07187 1989                        18            .byte	$18
07188 198A                        18            .byte	$18
07189 198B                        00            .byte	0
07190 198C                        00            .byte	0
07191 198D                        00            .byte	0
07192 198E                        00            .byte	0
07193 198F                        00            .byte	0
07194                                           ! 998  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07195 1990                        00            .byte	0
07196 1991                        00            .byte	0
07197 1992                        00            .byte	0
07198 1993                        00            .byte	0
07199 1994                        00            .byte	0
07200 1995                        00            .byte	0
07201 1996                        00            .byte	0
07202 1997                        00            .byte	0
07203 1998                        18            .byte	$18
07204 1999                        18            .byte	$18
07205 199A                        18            .byte	$18
07206 199B                        30            .byte	$30
07207 199C                        00            .byte	0
07208 199D                        00            .byte	0
07209                                           ! 999  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07210 199E                        00            .byte	0
07211 199F                        00            .byte	0
07212 19A0                        00            .byte	0
07213 19A1                        00            .byte	0
07214 19A2                        00            .byte	0
07215 19A3                        00            .byte	0
07216 19A4                        FE            .byte	$FE
07217 19A5                        00            .byte	0
07218 19A6                        00            .byte	0
07219 19A7                        00            .byte	0
07220 19A8                        00            .byte	0
07221 19A9                        00            .byte	0
07222 19AA                        00            .byte	0
07223 19AB                        00            .byte	0
07224                                           ! 1000  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07225 19AC                        00            .byte	0
07226 19AD                        00            .byte	0
07227 19AE                        00            .byte	0
07228 19AF                        00            .byte	0
07229 19B0                        00            .byte	0
07230 19B1                        00            .byte	0
07231 19B2                        00            .byte	0
07232 19B3                        00            .byte	0
07233 19B4                        00            .byte	0
07234 19B5                        18            .byte	$18
07235 19B6                        18            .byte	$18
07236 19B7                        00            .byte	0
07237 19B8                        00            .byte	0
07238 19B9                        00            .byte	0
07239                                           ! 1001  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07240 19BA                        00            .byte	0
07241 19BB                        00            .byte	0
07242 19BC                        02            .byte	2
07243 19BD                        06            .byte	6
07244 19BE                        0C            .byte	$C
07245 19BF                        18            .byte	$18
07246 19C0                        30            .byte	$30
07247 19C1                        60            .byte	$60
07248 19C2                        C0            .byte	$C0
07249 19C3                        80            .byte	$80
07250 19C4                        00            .byte	0
07251 19C5                        00            .byte	0
07252 19C6                        00            .byte	0
07253 19C7                        00            .byte	0
07254                                           ! 1002  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07255 19C8                        00            .byte	0
07256 19C9                        00            .byte	0
07257 19CA                        7C            .byte	$7C
07258 19CB                        C6            .byte	$C6
07259 19CC                        CE            .byte	$CE
07260 19CD                        DE            .byte	$DE
07261 19CE                        F6            .byte	$F6
07262 19CF                        E6            .byte	$E6
07263 19D0                        C6            .byte	$C6
07264 19D1                        C6            .byte	$C6
07265 19D2                        7C            .byte	$7C
07266 19D3                        00            .byte	0
07267 19D4                        00            .byte	0
07268 19D5                        00            .byte	0
07269                                           ! 1003  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07270 19D6                        00            .byte	0
07271 19D7                        00            .byte	0
07272 19D8                        18            .byte	$18
07273 19D9                        38            .byte	$38
07274 19DA                        78            .byte	$78
07275 19DB                        18            .byte	$18
07276 19DC                        18            .byte	$18
07277 19DD                        18            .byte	$18
07278 19DE                        18            .byte	$18
07279 19DF                        18            .byte	$18
07280 19E0                        7E            .byte	$7E
07281 19E1                        00            .byte	0
07282 19E2                        00            .byte	0
07283 19E3                        00            .byte	0
07284                                           ! 1004  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07285 19E4                        00            .byte	0
07286 19E5                        00            .byte	0
07287 19E6                        7C            .byte	$7C
07288 19E7                        C6            .byte	$C6
07289 19E8                        06            .byte	6
07290 19E9                        0C            .byte	$C
07291 19EA                        18            .byte	$18
07292 19EB                        30            .byte	$30
07293 19EC                        60            .byte	$60
07294 19ED                        C6            .byte	$C6
07295 19EE                        FE            .byte	$FE
07296 19EF                        00            .byte	0
07297 19F0                        00            .byte	0
07298 19F1                        00            .byte	0
07299                                           ! 1005  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07300 19F2                        00            .byte	0
07301 19F3                        00            .byte	0
07302 19F4                        7C            .byte	$7C
07303 19F5                        C6            .byte	$C6
07304 19F6                        06            .byte	6
07305 19F7                        06            .byte	6
07306 19F8                        3C            .byte	$3C
07307 19F9                        06            .byte	6
07308 19FA                        06            .byte	6
07309 19FB                        C6            .byte	$C6
07310 19FC                        7C            .byte	$7C
07311 19FD                        00            .byte	0
07312 19FE                        00            .byte	0
07313 19FF                        00            .byte	0
07314                                           ! 1006  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07315 1A00                        00            .byte	0
07316 1A01                        00            .byte	0
07317 1A02                        0C            .byte	$C
07318 1A03                        1C            .byte	$1C
07319 1A04                        3C            .byte	$3C
07320 1A05                        6C            .byte	$6C
07321 1A06                        CC            .byte	$CC
07322 1A07                        FE            .byte	$FE
07323 1A08                        0C            .byte	$C
07324 1A09                        0C            .byte	$C
07325 1A0A                        1E            .byte	$1E
07326 1A0B                        00            .byte	0
07327 1A0C                        00            .byte	0
07328 1A0D                        00            .byte	0
07329                                           ! 1007  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07330 1A0E                        00            .byte	0
07331 1A0F                        00            .byte	0
07332 1A10                        FE            .byte	$FE
07333 1A11                        C0            .byte	$C0
07334 1A12                        C0            .byte	$C0
07335 1A13                        C0            .byte	$C0
07336 1A14                        FC            .byte	$FC
07337 1A15                        06            .byte	6
07338 1A16                        06            .byte	6
07339 1A17                        C6            .byte	$C6
07340 1A18                        7C            .byte	$7C
07341 1A19                        00            .byte	0
07342 1A1A                        00            .byte	0
07343 1A1B                        00            .byte	0
07344                                           ! 1008  0x00, 0x00, 0x38,
07345 1A1C                        00            .byte	0
07346 1A1D                        00            .byte	0
07347                                           ! 1008  0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07348 1A1E                        38            .byte	$38
07349 1A1F                        60            .byte	$60
07350 1A20                        C0            .byte	$C0
07351 1A21                        C0            .byte	$C0
07352 1A22                        FC            .byte	$FC
07353 1A23                        C6            .byte	$C6
07354 1A24                        C6            .byte	$C6
07355 1A25                        C6            .byte	$C6
07356 1A26                        7C            .byte	$7C
07357 1A27                        00            .byte	0
07358 1A28                        00            .byte	0
07359 1A29                        00            .byte	0
07360                                           ! 1009  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07361 1A2A                        00            .byte	0
07362 1A2B                        00            .byte	0
07363 1A2C                        FE            .byte	$FE
07364 1A2D                        C6            .byte	$C6
07365 1A2E                        06            .byte	6
07366 1A2F                        0C            .byte	$C
07367 1A30                        18            .byte	$18
07368 1A31                        30            .byte	$30
07369 1A32                        30            .byte	$30
07370 1A33                        30            .byte	$30
07371 1A34                        30            .byte	$30
07372 1A35                        00            .byte	0
07373 1A36                        00            .byte	0
07374 1A37                        00            .byte	0
07375                                           ! 1010  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07376 1A38                        00            .byte	0
07377 1A39                        00            .byte	0
07378 1A3A                        7C            .byte	$7C
07379 1A3B                        C6            .byte	$C6
07380 1A3C                        C6            .byte	$C6
07381 1A3D                        C6            .byte	$C6
07382 1A3E                        7C            .byte	$7C
07383 1A3F                        C6            .byte	$C6
07384 1A40                        C6            .byte	$C6
07385 1A41                        C6            .byte	$C6
07386 1A42                        7C            .byte	$7C
07387 1A43                        00            .byte	0
07388 1A44                        00            .byte	0
07389 1A45                        00            .byte	0
07390                                           ! 1011  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07391 1A46                        00            .byte	0
07392 1A47                        00            .byte	0
07393 1A48                        7C            .byte	$7C
07394 1A49                        C6            .byte	$C6
07395 1A4A                        C6            .byte	$C6
07396 1A4B                        C6            .byte	$C6
07397 1A4C                        7E            .byte	$7E
07398 1A4D                        06            .byte	6
07399 1A4E                        06            .byte	6
07400 1A4F                        0C            .byte	$C
07401 1A50                        78            .byte	$78
07402 1A51                        00            .byte	0
07403 1A52                        00            .byte	0
07404 1A53                        00            .byte	0
07405                                           ! 1012  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07406 1A54                        00            .byte	0
07407 1A55                        00            .byte	0
07408 1A56                        00            .byte	0
07409 1A57                        18            .byte	$18
07410 1A58                        18            .byte	$18
07411 1A59                        00            .byte	0
07412 1A5A                        00            .byte	0
07413 1A5B                        00            .byte	0
07414 1A5C                        18            .byte	$18
07415 1A5D                        18            .byte	$18
07416 1A5E                        00            .byte	0
07417 1A5F                        00            .byte	0
07418 1A60                        00            .byte	0
07419 1A61                        00            .byte	0
07420                                           ! 1013  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07421 1A62                        00            .byte	0
07422 1A63                        00            .byte	0
07423 1A64                        00            .byte	0
07424 1A65                        18            .byte	$18
07425 1A66                        18            .byte	$18
07426 1A67                        00            .byte	0
07427 1A68                        00            .byte	0
07428 1A69                        00            .byte	0
07429 1A6A                        18            .byte	$18
07430 1A6B                        18            .byte	$18
07431 1A6C                        30            .byte	$30
07432 1A6D                        00            .byte	0
07433 1A6E                        00            .byte	0
07434 1A6F                        00            .byte	0
07435                                           ! 1014  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07436 1A70                        00            .byte	0
07437 1A71                        00            .byte	0
07438 1A72                        06            .byte	6
07439 1A73                        0C            .byte	$C
07440 1A74                        18            .byte	$18
07441 1A75                        30            .byte	$30
07442 1A76                        60            .byte	$60
07443 1A77                        30            .byte	$30
07444 1A78                        18            .byte	$18
07445 1A79                        0C            .byte	$C
07446 1A7A                        06            .byte	6
07447 1A7B                        00            .byte	0
07448 1A7C                        00            .byte	0
07449 1A7D                        00            .byte	0
07450                                           ! 1015  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07451 1A7E                        00            .byte	0
07452 1A7F                        00            .byte	0
07453 1A80                        00            .byte	0
07454 1A81                        00            .byte	0
07455 1A82                        00            .byte	0
07456 1A83                        7E            .byte	$7E
07457 1A84                        00            .byte	0
07458 1A85                        00            .byte	0
07459 1A86                        7E            .byte	$7E
07460 1A87                        00            .byte	0
07461 1A88                        00            .byte	0
07462 1A89                        00            .byte	0
07463 1A8A                        00            .byte	0
07464 1A8B                        00            .byte	0
07465                                           ! 1016  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07466 1A8C                        00            .byte	0
07467 1A8D                        00            .byte	0
07468 1A8E                        60            .byte	$60
07469 1A8F                        30            .byte	$30
07470 1A90                        18            .byte	$18
07471 1A91                        0C            .byte	$C
07472 1A92                        06            .byte	6
07473 1A93                        0C            .byte	$C
07474 1A94                        18            .byte	$18
07475 1A95                        30            .byte	$30
07476 1A96                        60            .byte	$60
07477 1A97                        00            .byte	0
07478 1A98                        00            .byte	0
07479 1A99                        00            .byte	0
07480                                           ! 1017  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07481 1A9A                        00            .byte	0
07482 1A9B                        00            .byte	0
07483 1A9C                        7C            .byte	$7C
07484 1A9D                        C6            .byte	$C6
07485 1A9E                        C6            .byte	$C6
07486 1A9F                        0C            .byte	$C
07487 1AA0                        18            .byte	$18
07488 1AA1                        18            .byte	$18
07489 1AA2                        00            .byte	0
07490 1AA3                        18            .byte	$18
07491 1AA4                        18            .byte	$18
07492 1AA5                        00            .byte	0
07493 1AA6                        00            .byte	0
07494 1AA7                        00            .byte	0
07495                                           ! 1018  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07496 1AA8                        00            .byte	0
07497 1AA9                        00            .byte	0
07498 1AAA                        7C            .byte	$7C
07499 1AAB                        C6            .byte	$C6
07500 1AAC                        C6            .byte	$C6
07501 1AAD                        DE            .byte	$DE
07502 1AAE                        DE            .byte	$DE
07503 1AAF                        DE            .byte	$DE
07504 1AB0                        DC            .byte	$DC
07505 1AB1                        C0            .byte	$C0
07506 1AB2                        7C            .byte	$7C
07507 1AB3                        00            .byte	0
07508 1AB4                        00            .byte	0
07509 1AB5                        00            .byte	0
07510                                           ! 1019  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07511 1AB6                        00            .byte	0
07512 1AB7                        00            .byte	0
07513 1AB8                        10            .byte	$10
07514 1AB9                        38            .byte	$38
07515 1ABA                        6C            .byte	$6C
07516 1ABB                        C6            .byte	$C6
07517 1ABC                        C6            .byte	$C6
07518 1ABD                        FE            .byte	$FE
07519 1ABE                        C6            .byte	$C6
07520 1ABF                        C6            .byte	$C6
07521 1AC0                        C6            .byte	$C6
07522 1AC1                        00            .byte	0
07523 1AC2                        00            .byte	0
07524 1AC3                        00            .byte	0
07525                                           ! 1020  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07526 1AC4                        00            .byte	0
07527 1AC5                        00            .byte	0
07528 1AC6                        FC            .byte	$FC
07529 1AC7                        66            .byte	$66
07530 1AC8                        66            .byte	$66
07531 1AC9                        66            .byte	$66
07532 1ACA                        7C            .byte	$7C
07533 1ACB                        66            .byte	$66
07534 1ACC                        66            .byte	$66
07535 1ACD                        66            .byte	$66
07536 1ACE                        FC            .byte	$FC
07537 1ACF                        00            .byte	0
07538 1AD0                        00            .byte	0
07539 1AD1                        00            .byte	0
07540                                           ! 1021  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07541 1AD2                        00            .byte	0
07542 1AD3                        00            .byte	0
07543 1AD4                        3C            .byte	$3C
07544 1AD5                        66            .byte	$66
07545 1AD6                        C2            .byte	$C2
07546 1AD7                        C0            .byte	$C0
07547 1AD8                        C0            .byte	$C0
07548 1AD9                        C0            .byte	$C0
07549 1ADA                        C2            .byte	$C2
07550 1ADB                        66            .byte	$66
07551 1ADC                        3C            .byte	$3C
07552 1ADD                        00            .byte	0
07553 1ADE                        00            .byte	0
07554 1ADF                        00            .byte	0
07555                                           ! 1022  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07556 1AE0                        00            .byte	0
07557 1AE1                        00            .byte	0
07558 1AE2                        F8            .byte	$F8
07559 1AE3                        6C            .byte	$6C
07560 1AE4                        66            .byte	$66
07561 1AE5                        66            .byte	$66
07562 1AE6                        66            .byte	$66
07563 1AE7                        66            .byte	$66
07564 1AE8                        66            .byte	$66
07565 1AE9                        6C            .byte	$6C
07566 1AEA                        F8            .byte	$F8
07567 1AEB                        00            .byte	0
07568 1AEC                        00            .byte	0
07569 1AED                        00            .byte	0
07570                                           ! 1023  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07571 1AEE                        00            .byte	0
07572 1AEF                        00            .byte	0
07573 1AF0                        FE            .byte	$FE
07574 1AF1                        66            .byte	$66
07575 1AF2                        62            .byte	$62
07576 1AF3                        68            .byte	$68
07577 1AF4                        78            .byte	$78
07578 1AF5                        68            .byte	$68
07579 1AF6                        62            .byte	$62
07580 1AF7                        66            .byte	$66
07581 1AF8                        FE            .byte	$FE
07582 1AF9                        00            .byte	0
07583 1AFA                        00            .byte	0
07584 1AFB                        00            .byte	0
07585                                           ! 1024  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07586 1AFC                        00            .byte	0
07587 1AFD                        00            .byte	0
07588 1AFE                        FE            .byte	$FE
07589 1AFF                        66            .byte	$66
07590 1B00                        62            .byte	$62
07591 1B01                        68            .byte	$68
07592 1B02                        78            .byte	$78
07593 1B03                        68            .byte	$68
07594 1B04                        60            .byte	$60
07595 1B05                        60            .byte	$60
07596 1B06                        F0            .byte	$F0
07597 1B07                        00            .byte	0
07598 1B08                        00            .byte	0
07599 1B09                        00            .byte	0
07600                                           ! 1025  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07601 1B0A                        00            .byte	0
07602 1B0B                        00            .byte	0
07603 1B0C                        3C            .byte	$3C
07604 1B0D                        66            .byte	$66
07605 1B0E                        C2            .byte	$C2
07606 1B0F                        C0            .byte	$C0
07607 1B10                        C0            .byte	$C0
07608 1B11                        DE            .byte	$DE
07609 1B12                        C6            .byte	$C6
07610 1B13                        66            .byte	$66
07611 1B14                        3A            .byte	$3A
07612 1B15                        00            .byte	0
07613 1B16                        00            .byte	0
07614 1B17                        00            .byte	0
07615                                           ! 1026  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07616 1B18                        00            .byte	0
07617 1B19                        00            .byte	0
07618 1B1A                        C6            .byte	$C6
07619 1B1B                        C6            .byte	$C6
07620 1B1C                        C6            .byte	$C6
07621 1B1D                        C6            .byte	$C6
07622 1B1E                        FE            .byte	$FE
07623 1B1F                        C6            .byte	$C6
07624 1B20                        C6            .byte	$C6
07625 1B21                        C6            .byte	$C6
07626 1B22                        C6            .byte	$C6
07627 1B23                        00            .byte	0
07628 1B24                        00            .byte	0
07629 1B25                        00            .byte	0
07630                                           ! 1027  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07631 1B26                        00            .byte	0
07632 1B27                        00            .byte	0
07633 1B28                        3C            .byte	$3C
07634 1B29                        18            .byte	$18
07635 1B2A                        18            .byte	$18
07636 1B2B                        18            .byte	$18
07637 1B2C                        18            .byte	$18
07638 1B2D                        18            .byte	$18
07639 1B2E                        18            .byte	$18
07640 1B2F                        18            .byte	$18
07641 1B30                        3C            .byte	$3C
07642 1B31                        00            .byte	0
07643 1B32                        00            .byte	0
07644 1B33                        00            .byte	0
07645                                           ! 1028  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07646 1B34                        00            .byte	0
07647 1B35                        00            .byte	0
07648 1B36                        1E            .byte	$1E
07649 1B37                        0C            .byte	$C
07650 1B38                        0C            .byte	$C
07651 1B39                        0C            .byte	$C
07652 1B3A                        0C            .byte	$C
07653 1B3B                        0C            .byte	$C
07654 1B3C                        CC            .byte	$CC
07655 1B3D                        CC            .byte	$CC
07656 1B3E                        78            .byte	$78
07657 1B3F                        00            .byte	0
07658 1B40                        00            .byte	0
07659 1B41                        00            .byte	0
07660                                           ! 1029  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07661 1B42                        00            .byte	0
07662 1B43                        00            .byte	0
07663 1B44                        E6            .byte	$E6
07664 1B45                        66            .byte	$66
07665 1B46                        6C            .byte	$6C
07666 1B47                        6C            .byte	$6C
07667 1B48                        78            .byte	$78
07668 1B49                        6C            .byte	$6C
07669 1B4A                        6C            .byte	$6C
07670 1B4B                        66            .byte	$66
07671 1B4C                        E6            .byte	$E6
07672 1B4D                        00            .byte	0
07673 1B4E                        00            .byte	0
07674 1B4F                        00            .byte	0
07675                                           ! 1030  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07676 1B50                        00            .byte	0
07677 1B51                        00            .byte	0
07678 1B52                        F0            .byte	$F0
07679 1B53                        60            .byte	$60
07680 1B54                        60            .byte	$60
07681 1B55                        60            .byte	$60
07682 1B56                        60            .byte	$60
07683 1B57                        60            .byte	$60
07684 1B58                        62            .byte	$62
07685 1B59                        66            .byte	$66
07686 1B5A                        FE            .byte	$FE
07687 1B5B                        00            .byte	0
07688 1B5C                        00            .byte	0
07689 1B5D                        00            .byte	0
07690                                           ! 1031  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07691 1B5E                        00            .byte	0
07692 1B5F                        00            .byte	0
07693 1B60                        C6            .byte	$C6
07694 1B61                        EE            .byte	$EE
07695 1B62                        FE            .byte	$FE
07696 1B63                        FE            .byte	$FE
07697 1B64                        D6            .byte	$D6
07698 1B65                        C6            .byte	$C6
07699 1B66                        C6            .byte	$C6
07700 1B67                        C6            .byte	$C6
07701 1B68                        C6            .byte	$C6
07702 1B69                        00            .byte	0
07703 1B6A                        00            .byte	0
07704 1B6B                        00            .byte	0
07705                                           ! 1032  0x00, 0x00, 0xc6, 0xe6, 0
07706 1B6C                        00            .byte	0
07707 1B6D                        00            .byte	0
07708 1B6E                        C6            .byte	$C6
07709 1B6F                        E6            .byte	$E6
07710                                           ! 1032 xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07711 1B70                        F6            .byte	$F6
07712 1B71                        FE            .byte	$FE
07713 1B72                        DE            .byte	$DE
07714 1B73                        CE            .byte	$CE
07715 1B74                        C6            .byte	$C6
07716 1B75                        C6            .byte	$C6
07717 1B76                        C6            .byte	$C6
07718 1B77                        00            .byte	0
07719 1B78                        00            .byte	0
07720 1B79                        00            .byte	0
07721                                           ! 1033  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07722 1B7A                        00            .byte	0
07723 1B7B                        00            .byte	0
07724 1B7C                        38            .byte	$38
07725 1B7D                        6C            .byte	$6C
07726 1B7E                        C6            .byte	$C6
07727 1B7F                        C6            .byte	$C6
07728 1B80                        C6            .byte	$C6
07729 1B81                        C6            .byte	$C6
07730 1B82                        C6            .byte	$C6
07731 1B83                        6C            .byte	$6C
07732 1B84                        38            .byte	$38
07733 1B85                        00            .byte	0
07734 1B86                        00            .byte	0
07735 1B87                        00            .byte	0
07736                                           ! 1034  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07737 1B88                        00            .byte	0
07738 1B89                        00            .byte	0
07739 1B8A                        FC            .byte	$FC
07740 1B8B                        66            .byte	$66
07741 1B8C                        66            .byte	$66
07742 1B8D                        66            .byte	$66
07743 1B8E                        7C            .byte	$7C
07744 1B8F                        60            .byte	$60
07745 1B90                        60            .byte	$60
07746 1B91                        60            .byte	$60
07747 1B92                        F0            .byte	$F0
07748 1B93                        00            .byte	0
07749 1B94                        00            .byte	0
07750 1B95                        00            .byte	0
07751                                           ! 1035  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07752 1B96                        00            .byte	0
07753 1B97                        00            .byte	0
07754 1B98                        7C            .byte	$7C
07755 1B99                        C6            .byte	$C6
07756 1B9A                        C6            .byte	$C6
07757 1B9B                        C6            .byte	$C6
07758 1B9C                        C6            .byte	$C6
07759 1B9D                        D6            .byte	$D6
07760 1B9E                        DE            .byte	$DE
07761 1B9F                        7C            .byte	$7C
07762 1BA0                        0C            .byte	$C
07763 1BA1                        0E            .byte	$E
07764 1BA2                        00            .byte	0
07765 1BA3                        00            .byte	0
07766                                           ! 1036  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07767 1BA4                        00            .byte	0
07768 1BA5                        00            .byte	0
07769 1BA6                        FC            .byte	$FC
07770 1BA7                        66            .byte	$66
07771 1BA8                        66            .byte	$66
07772 1BA9                        66            .byte	$66
07773 1BAA                        7C            .byte	$7C
07774 1BAB                        6C            .byte	$6C
07775 1BAC                        66            .byte	$66
07776 1BAD                        66            .byte	$66
07777 1BAE                        E6            .byte	$E6
07778 1BAF                        00            .byte	0
07779 1BB0                        00            .byte	0
07780 1BB1                        00            .byte	0
07781                                           ! 1037  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07782 1BB2                        00            .byte	0
07783 1BB3                        00            .byte	0
07784 1BB4                        7C            .byte	$7C
07785 1BB5                        C6            .byte	$C6
07786 1BB6                        C6            .byte	$C6
07787 1BB7                        60            .byte	$60
07788 1BB8                        38            .byte	$38
07789 1BB9                        0C            .byte	$C
07790 1BBA                        C6            .byte	$C6
07791 1BBB                        C6            .byte	$C6
07792 1BBC                        7C            .byte	$7C
07793 1BBD                        00            .byte	0
07794 1BBE                        00            .byte	0
07795 1BBF                        00            .byte	0
07796                                           ! 1038  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07797 1BC0                        00            .byte	0
07798 1BC1                        00            .byte	0
07799 1BC2                        7E            .byte	$7E
07800 1BC3                        7E            .byte	$7E
07801 1BC4                        5A            .byte	$5A
07802 1BC5                        18            .byte	$18
07803 1BC6                        18            .byte	$18
07804 1BC7                        18            .byte	$18
07805 1BC8                        18            .byte	$18
07806 1BC9                        18            .byte	$18
07807 1BCA                        3C            .byte	$3C
07808 1BCB                        00            .byte	0
07809 1BCC                        00            .byte	0
07810 1BCD                        00            .byte	0
07811                                           ! 1039  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07812 1BCE                        00            .byte	0
07813 1BCF                        00            .byte	0
07814 1BD0                        C6            .byte	$C6
07815 1BD1                        C6            .byte	$C6
07816 1BD2                        C6            .byte	$C6
07817 1BD3                        C6            .byte	$C6
07818 1BD4                        C6            .byte	$C6
07819 1BD5                        C6            .byte	$C6
07820 1BD6                        C6            .byte	$C6
07821 1BD7                        C6            .byte	$C6
07822 1BD8                        7C            .byte	$7C
07823 1BD9                        00            .byte	0
07824 1BDA                        00            .byte	0
07825 1BDB                        00            .byte	0
07826                                           ! 1040  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07827 1BDC                        00            .byte	0
07828 1BDD                        00            .byte	0
07829 1BDE                        C6            .byte	$C6
07830 1BDF                        C6            .byte	$C6
07831 1BE0                        C6            .byte	$C6
07832 1BE1                        C6            .byte	$C6
07833 1BE2                        C6            .byte	$C6
07834 1BE3                        C6            .byte	$C6
07835 1BE4                        6C            .byte	$6C
07836 1BE5                        38            .byte	$38
07837 1BE6                        10            .byte	$10
07838 1BE7                        00            .byte	0
07839 1BE8                        00            .byte	0
07840 1BE9                        00            .byte	0
07841                                           ! 1041  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07842 1BEA                        00            .byte	0
07843 1BEB                        00            .byte	0
07844 1BEC                        C6            .byte	$C6
07845 1BED                        C6            .byte	$C6
07846 1BEE                        C6            .byte	$C6
07847 1BEF                        C6            .byte	$C6
07848 1BF0                        D6            .byte	$D6
07849 1BF1                        D6            .byte	$D6
07850 1BF2                        FE            .byte	$FE
07851 1BF3                        7C            .byte	$7C
07852 1BF4                        6C            .byte	$6C
07853 1BF5                        00            .byte	0
07854 1BF6                        00            .byte	0
07855 1BF7                        00            .byte	0
07856                                           ! 1042  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07857 1BF8                        00            .byte	0
07858 1BF9                        00            .byte	0
07859 1BFA                        C6            .byte	$C6
07860 1BFB                        C6            .byte	$C6
07861 1BFC                        6C            .byte	$6C
07862 1BFD                        38            .byte	$38
07863 1BFE                        38            .byte	$38
07864 1BFF                        38            .byte	$38
07865 1C00                        6C            .byte	$6C
07866 1C01                        C6            .byte	$C6
07867 1C02                        C6            .byte	$C6
07868 1C03                        00            .byte	0
07869 1C04                        00            .byte	0
07870 1C05                        00            .byte	0
07871                                           ! 1043  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07872 1C06                        00            .byte	0
07873 1C07                        00            .byte	0
07874 1C08                        66            .byte	$66
07875 1C09                        66            .byte	$66
07876 1C0A                        66            .byte	$66
07877 1C0B                        66            .byte	$66
07878 1C0C                        3C            .byte	$3C
07879 1C0D                        18            .byte	$18
07880 1C0E                        18            .byte	$18
07881 1C0F                        18            .byte	$18
07882 1C10                        3C            .byte	$3C
07883 1C11                        00            .byte	0
07884 1C12                        00            .byte	0
07885 1C13                        00            .byte	0
07886                                           ! 1044  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07887 1C14                        00            .byte	0
07888 1C15                        00            .byte	0
07889 1C16                        FE            .byte	$FE
07890 1C17                        C6            .byte	$C6
07891 1C18                        8C            .byte	$8C
07892 1C19                        18            .byte	$18
07893 1C1A                        30            .byte	$30
07894 1C1B                        60            .byte	$60
07895 1C1C                        C2            .byte	$C2
07896 1C1D                        C6            .byte	$C6
07897 1C1E                        FE            .byte	$FE
07898 1C1F                        00            .byte	0
07899 1C20                        00            .byte	0
07900 1C21                        00            .byte	0
07901                                           ! 1045  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07902 1C22                        00            .byte	0
07903 1C23                        00            .byte	0
07904 1C24                        3C            .byte	$3C
07905 1C25                        30            .byte	$30
07906 1C26                        30            .byte	$30
07907 1C27                        30            .byte	$30
07908 1C28                        30            .byte	$30
07909 1C29                        30            .byte	$30
07910 1C2A                        30            .byte	$30
07911 1C2B                        30            .byte	$30
07912 1C2C                        3C            .byte	$3C
07913 1C2D                        00            .byte	0
07914 1C2E                        00            .byte	0
07915 1C2F                        00            .byte	0
07916                                           ! 1046  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07917 1C30                        00            .byte	0
07918 1C31                        00            .byte	0
07919 1C32                        80            .byte	$80
07920 1C33                        C0            .byte	$C0
07921 1C34                        E0            .byte	$E0
07922 1C35                        70            .byte	$70
07923 1C36                        38            .byte	$38
07924 1C37                        1C            .byte	$1C
07925 1C38                        0E            .byte	$E
07926 1C39                        06            .byte	6
07927 1C3A                        02            .byte	2
07928 1C3B                        00            .byte	0
07929 1C3C                        00            .byte	0
07930 1C3D                        00            .byte	0
07931                                           ! 1047  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07932 1C3E                        00            .byte	0
07933 1C3F                        00            .byte	0
07934 1C40                        3C            .byte	$3C
07935 1C41                        0C            .byte	$C
07936 1C42                        0C            .byte	$C
07937 1C43                        0C            .byte	$C
07938 1C44                        0C            .byte	$C
07939 1C45                        0C            .byte	$C
07940 1C46                        0C            .byte	$C
07941 1C47                        0C            .byte	$C
07942 1C48                        3C            .byte	$3C
07943 1C49                        00            .byte	0
07944 1C4A                        00            .byte	0
07945 1C4B                        00            .byte	0
07946                                           ! 1048  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07947 1C4C                        10            .byte	$10
07948 1C4D                        38            .byte	$38
07949 1C4E                        6C            .byte	$6C
07950 1C4F                        C6            .byte	$C6
07951 1C50                        00            .byte	0
07952 1C51                        00            .byte	0
07953 1C52                        00            .byte	0
07954 1C53                        00            .byte	0
07955 1C54                        00            .byte	0
07956 1C55                        00            .byte	0
07957 1C56                        00            .byte	0
07958 1C57                        00            .byte	0
07959 1C58                        00            .byte	0
07960 1C59                        00            .byte	0
07961                                           ! 1049  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07962 1C5A                        00            .byte	0
07963 1C5B                        00            .byte	0
07964 1C5C                        00            .byte	0
07965 1C5D                        00            .byte	0
07966 1C5E                        00            .byte	0
07967 1C5F                        00            .byte	0
07968 1C60                        00            .byte	0
07969 1C61                        00            .byte	0
07970 1C62                        00            .byte	0
07971 1C63                        00            .byte	0
07972 1C64                        00            .byte	0
07973 1C65                        00            .byte	0
07974 1C66                        FF            .byte	$FF
07975 1C67                        00            .byte	0
07976                                           ! 1050  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07977 1C68                        30            .byte	$30
07978 1C69                        30            .byte	$30
07979 1C6A                        18            .byte	$18
07980 1C6B                        00            .byte	0
07981 1C6C                        00            .byte	0
07982 1C6D                        00            .byte	0
07983 1C6E                        00            .byte	0
07984 1C6F                        00            .byte	0
07985 1C70                        00            .byte	0
07986 1C71                        00            .byte	0
07987 1C72                        00            .byte	0
07988 1C73                        00            .byte	0
07989 1C74                        00            .byte	0
07990 1C75                        00            .byte	0
07991                                           ! 1051  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07992 1C76                        00            .byte	0
07993 1C77                        00            .byte	0
07994 1C78                        00            .byte	0
07995 1C79                        00            .byte	0
07996 1C7A                        00            .byte	0
07997 1C7B                        78            .byte	$78
07998 1C7C                        0C            .byte	$C
07999 1C7D                        7C            .byte	$7C
08000 1C7E                        CC            .byte	$CC
08001 1C7F                        CC            .byte	$CC
08002 1C80                        76            .byte	$76
08003 1C81                        00            .byte	0
08004 1C82                        00            .byte	0
08005 1C83                        00            .byte	0
08006                                           ! 1052  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08007 1C84                        00            .byte	0
08008 1C85                        00            .byte	0
08009 1C86                        E0            .byte	$E0
08010 1C87                        60            .byte	$60
08011 1C88                        60            .byte	$60
08012 1C89                        78            .byte	$78
08013 1C8A                        6C            .byte	$6C
08014 1C8B                        66            .byte	$66
08015 1C8C                        66            .byte	$66
08016 1C8D                        66            .byte	$66
08017 1C8E                        7C            .byte	$7C
08018 1C8F                        00            .byte	0
08019 1C90                        00            .byte	0
08020 1C91                        00            .byte	0
08021                                           ! 1053  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08022 1C92                        00            .byte	0
08023 1C93                        00            .byte	0
08024 1C94                        00            .byte	0
08025 1C95                        00            .byte	0
08026 1C96                        00            .byte	0
08027 1C97                        7C            .byte	$7C
08028 1C98                        C6            .byte	$C6
08029 1C99                        C0            .byte	$C0
08030 1C9A                        C0            .byte	$C0
08031 1C9B                        C6            .byte	$C6
08032 1C9C                        7C            .byte	$7C
08033 1C9D                        00            .byte	0
08034 1C9E                        00            .byte	0
08035 1C9F                        00            .byte	0
08036                                           ! 1054  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08037 1CA0                        00            .byte	0
08038 1CA1                        00            .byte	0
08039 1CA2                        1C            .byte	$1C
08040 1CA3                        0C            .byte	$C
08041 1CA4                        0C            .byte	$C
08042 1CA5                        3C            .byte	$3C
08043 1CA6                        6C            .byte	$6C
08044 1CA7                        CC            .byte	$CC
08045 1CA8                        CC            .byte	$CC
08046 1CA9                        CC            .byte	$CC
08047 1CAA                        76            .byte	$76
08048 1CAB                        00            .byte	0
08049 1CAC                        00            .byte	0
08050 1CAD                        00            .byte	0
08051                                           ! 1055  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08052 1CAE                        00            .byte	0
08053 1CAF                        00            .byte	0
08054 1CB0                        00            .byte	0
08055 1CB1                        00            .byte	0
08056 1CB2                        00            .byte	0
08057 1CB3                        7C            .byte	$7C
08058 1CB4                        C6            .byte	$C6
08059 1CB5                        FE            .byte	$FE
08060 1CB6                        C0            .byte	$C0
08061 1CB7                        C6            .byte	$C6
08062 1CB8                        7C            .byte	$7C
08063 1CB9                        00            .byte	0
08064 1CBA                        00            .byte	0
08065 1CBB                        00            .byte	0
08066                                           ! 1056  0x00, 0x00, 0x38, 0x6c, 0x64, 0x6
08067 1CBC                        00            .byte	0
08068 1CBD                        00            .byte	0
08069 1CBE                        38            .byte	$38
08070 1CBF                        6C            .byte	$6C
08071 1CC0                        64            .byte	$64
08072                                           ! 1056 0, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08073 1CC1                        60            .byte	$60
08074 1CC2                        F0            .byte	$F0
08075 1CC3                        60            .byte	$60
08076 1CC4                        60            .byte	$60
08077 1CC5                        60            .byte	$60
08078 1CC6                        F0            .byte	$F0
08079 1CC7                        00            .byte	0
08080 1CC8                        00            .byte	0
08081 1CC9                        00            .byte	0
08082                                           ! 1057  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08083 1CCA                        00            .byte	0
08084 1CCB                        00            .byte	0
08085 1CCC                        00            .byte	0
08086 1CCD                        00            .byte	0
08087 1CCE                        00            .byte	0
08088 1CCF                        76            .byte	$76
08089 1CD0                        CC            .byte	$CC
08090 1CD1                        CC            .byte	$CC
08091 1CD2                        CC            .byte	$CC
08092 1CD3                        7C            .byte	$7C
08093 1CD4                        0C            .byte	$C
08094 1CD5                        CC            .byte	$CC
08095 1CD6                        78            .byte	$78
08096 1CD7                        00            .byte	0
08097                                           ! 1058  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08098 1CD8                        00            .byte	0
08099 1CD9                        00            .byte	0
08100 1CDA                        E0            .byte	$E0
08101 1CDB                        60            .byte	$60
08102 1CDC                        60            .byte	$60
08103 1CDD                        6C            .byte	$6C
08104 1CDE                        76            .byte	$76
08105 1CDF                        66            .byte	$66
08106 1CE0                        66            .byte	$66
08107 1CE1                        66            .byte	$66
08108 1CE2                        E6            .byte	$E6
08109 1CE3                        00            .byte	0
08110 1CE4                        00            .byte	0
08111 1CE5                        00            .byte	0
08112                                           ! 1059  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08113 1CE6                        00            .byte	0
08114 1CE7                        00            .byte	0
08115 1CE8                        18            .byte	$18
08116 1CE9                        18            .byte	$18
08117 1CEA                        00            .byte	0
08118 1CEB                        38            .byte	$38
08119 1CEC                        18            .byte	$18
08120 1CED                        18            .byte	$18
08121 1CEE                        18            .byte	$18
08122 1CEF                        18            .byte	$18
08123 1CF0                        3C            .byte	$3C
08124 1CF1                        00            .byte	0
08125 1CF2                        00            .byte	0
08126 1CF3                        00            .byte	0
08127                                           ! 1060  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08128 1CF4                        00            .byte	0
08129 1CF5                        00            .byte	0
08130 1CF6                        06            .byte	6
08131 1CF7                        06            .byte	6
08132 1CF8                        00            .byte	0
08133 1CF9                        0E            .byte	$E
08134 1CFA                        06            .byte	6
08135 1CFB                        06            .byte	6
08136 1CFC                        06            .byte	6
08137 1CFD                        06            .byte	6
08138 1CFE                        66            .byte	$66
08139 1CFF                        66            .byte	$66
08140 1D00                        3C            .byte	$3C
08141 1D01                        00            .byte	0
08142                                           ! 1061  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08143 1D02                        00            .byte	0
08144 1D03                        00            .byte	0
08145 1D04                        E0            .byte	$E0
08146 1D05                        60            .byte	$60
08147 1D06                        60            .byte	$60
08148 1D07                        66            .byte	$66
08149 1D08                        6C            .byte	$6C
08150 1D09                        78            .byte	$78
08151 1D0A                        6C            .byte	$6C
08152 1D0B                        66            .byte	$66
08153 1D0C                        E6            .byte	$E6
08154 1D0D                        00            .byte	0
08155 1D0E                        00            .byte	0
08156 1D0F                        00            .byte	0
08157                                           ! 1062  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08158 1D10                        00            .byte	0
08159 1D11                        00            .byte	0
08160 1D12                        38            .byte	$38
08161 1D13                        18            .byte	$18
08162 1D14                        18            .byte	$18
08163 1D15                        18            .byte	$18
08164 1D16                        18            .byte	$18
08165 1D17                        18            .byte	$18
08166 1D18                        18            .byte	$18
08167 1D19                        18            .byte	$18
08168 1D1A                        3C            .byte	$3C
08169 1D1B                        00            .byte	0
08170 1D1C                        00            .byte	0
08171 1D1D                        00            .byte	0
08172                                           ! 1063  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08173 1D1E                        00            .byte	0
08174 1D1F                        00            .byte	0
08175 1D20                        00            .byte	0
08176 1D21                        00            .byte	0
08177 1D22                        00            .byte	0
08178 1D23                        EC            .byte	$EC
08179 1D24                        FE            .byte	$FE
08180 1D25                        D6            .byte	$D6
08181 1D26                        D6            .byte	$D6
08182 1D27                        D6            .byte	$D6
08183 1D28                        C6            .byte	$C6
08184 1D29                        00            .byte	0
08185 1D2A                        00            .byte	0
08186 1D2B                        00            .byte	0
08187                                           ! 1064  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08188 1D2C                        00            .byte	0
08189 1D2D                        00            .byte	0
08190 1D2E                        00            .byte	0
08191 1D2F                        00            .byte	0
08192 1D30                        00            .byte	0
08193 1D31                        DC            .byte	$DC
08194 1D32                        66            .byte	$66
08195 1D33                        66            .byte	$66
08196 1D34                        66            .byte	$66
08197 1D35                        66            .byte	$66
08198 1D36                        66            .byte	$66
08199 1D37                        00            .byte	0
08200 1D38                        00            .byte	0
08201 1D39                        00            .byte	0
08202                                           ! 1065  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08203 1D3A                        00            .byte	0
08204 1D3B                        00            .byte	0
08205 1D3C                        00            .byte	0
08206 1D3D                        00            .byte	0
08207 1D3E                        00            .byte	0
08208 1D3F                        7C            .byte	$7C
08209 1D40                        C6            .byte	$C6
08210 1D41                        C6            .byte	$C6
08211 1D42                        C6            .byte	$C6
08212 1D43                        C6            .byte	$C6
08213 1D44                        7C            .byte	$7C
08214 1D45                        00            .byte	0
08215 1D46                        00            .byte	0
08216 1D47                        00            .byte	0
08217                                           ! 1066  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08218 1D48                        00            .byte	0
08219 1D49                        00            .byte	0
08220 1D4A                        00            .byte	0
08221 1D4B                        00            .byte	0
08222 1D4C                        00            .byte	0
08223 1D4D                        DC            .byte	$DC
08224 1D4E                        66            .byte	$66
08225 1D4F                        66            .byte	$66
08226 1D50                        66            .byte	$66
08227 1D51                        7C            .byte	$7C
08228 1D52                        60            .byte	$60
08229 1D53                        60            .byte	$60
08230 1D54                        F0            .byte	$F0
08231 1D55                        00            .byte	0
08232                                           ! 1067  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08233 1D56                        00            .byte	0
08234 1D57                        00            .byte	0
08235 1D58                        00            .byte	0
08236 1D59                        00            .byte	0
08237 1D5A                        00            .byte	0
08238 1D5B                        76            .byte	$76
08239 1D5C                        CC            .byte	$CC
08240 1D5D                        CC            .byte	$CC
08241 1D5E                        CC            .byte	$CC
08242 1D5F                        7C            .byte	$7C
08243 1D60                        0C            .byte	$C
08244 1D61                        0C            .byte	$C
08245 1D62                        1E            .byte	$1E
08246 1D63                        00            .byte	0
08247                                           ! 1068  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08248 1D64                        00            .byte	0
08249 1D65                        00            .byte	0
08250 1D66                        00            .byte	0
08251 1D67                        00            .byte	0
08252 1D68                        00            .byte	0
08253 1D69                        DC            .byte	$DC
08254 1D6A                        76            .byte	$76
08255 1D6B                        66            .byte	$66
08256 1D6C                        60            .byte	$60
08257 1D6D                        60            .byte	$60
08258 1D6E                        F0            .byte	$F0
08259 1D6F                        00            .byte	0
08260 1D70                        00            .byte	0
08261 1D71                        00            .byte	0
08262                                           ! 1069  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08263 1D72                        00            .byte	0
08264 1D73                        00            .byte	0
08265 1D74                        00            .byte	0
08266 1D75                        00            .byte	0
08267 1D76                        00            .byte	0
08268 1D77                        7C            .byte	$7C
08269 1D78                        C6            .byte	$C6
08270 1D79                        70            .byte	$70
08271 1D7A                        1C            .byte	$1C
08272 1D7B                        C6            .byte	$C6
08273 1D7C                        7C            .byte	$7C
08274 1D7D                        00            .byte	0
08275 1D7E                        00            .byte	0
08276 1D7F                        00            .byte	0
08277                                           ! 1070  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08278 1D80                        00            .byte	0
08279 1D81                        00            .byte	0
08280 1D82                        10            .byte	$10
08281 1D83                        30            .byte	$30
08282 1D84                        30            .byte	$30
08283 1D85                        FC            .byte	$FC
08284 1D86                        30            .byte	$30
08285 1D87                        30            .byte	$30
08286 1D88                        30            .byte	$30
08287 1D89                        36            .byte	$36
08288 1D8A                        1C            .byte	$1C
08289 1D8B                        00            .byte	0
08290 1D8C                        00            .byte	0
08291 1D8D                        00            .byte	0
08292                                           ! 1071  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08293 1D8E                        00            .byte	0
08294 1D8F                        00            .byte	0
08295 1D90                        00            .byte	0
08296 1D91                        00            .byte	0
08297 1D92                        00            .byte	0
08298 1D93                        CC            .byte	$CC
08299 1D94                        CC            .byte	$CC
08300 1D95                        CC            .byte	$CC
08301 1D96                        CC            .byte	$CC
08302 1D97                        CC            .byte	$CC
08303 1D98                        76            .byte	$76
08304 1D99                        00            .byte	0
08305 1D9A                        00            .byte	0
08306 1D9B                        00            .byte	0
08307                                           ! 1072  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08308 1D9C                        00            .byte	0
08309 1D9D                        00            .byte	0
08310 1D9E                        00            .byte	0
08311 1D9F                        00            .byte	0
08312 1DA0                        00            .byte	0
08313 1DA1                        66            .byte	$66
08314 1DA2                        66            .byte	$66
08315 1DA3                        66            .byte	$66
08316 1DA4                        66            .byte	$66
08317 1DA5                        3C            .byte	$3C
08318 1DA6                        18            .byte	$18
08319 1DA7                        00            .byte	0
08320 1DA8                        00            .byte	0
08321 1DA9                        00            .byte	0
08322                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08323 1DAA                        00            .byte	0
08324 1DAB                        00            .byte	0
08325 1DAC                        00            .byte	0
08326 1DAD                        00            .byte	0
08327 1DAE                        00            .byte	0
08328 1DAF                        C6            .byte	$C6
08329 1DB0                        C6            .byte	$C6
08330 1DB1                        D6            .byte	$D6
08331 1DB2                        D6            .byte	$D6
08332 1DB3                        FE            .byte	$FE
08333 1DB4                        6C            .byte	$6C
08334 1DB5                        00            .byte	0
08335 1DB6                        00            .byte	0
08336 1DB7                        00            .byte	0
08337                                           ! 1074  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08338 1DB8                        00            .byte	0
08339 1DB9                        00            .byte	0
08340 1DBA                        00            .byte	0
08341 1DBB                        00            .byte	0
08342 1DBC                        00            .byte	0
08343 1DBD                        C6            .byte	$C6
08344 1DBE                        6C            .byte	$6C
08345 1DBF                        38            .byte	$38
08346 1DC0                        38            .byte	$38
08347 1DC1                        6C            .byte	$6C
08348 1DC2                        C6            .byte	$C6
08349 1DC3                        00            .byte	0
08350 1DC4                        00            .byte	0
08351 1DC5                        00            .byte	0
08352                                           ! 1075  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08353 1DC6                        00            .byte	0
08354 1DC7                        00            .byte	0
08355 1DC8                        00            .byte	0
08356 1DC9                        00            .byte	0
08357 1DCA                        00            .byte	0
08358 1DCB                        C6            .byte	$C6
08359 1DCC                        C6            .byte	$C6
08360 1DCD                        C6            .byte	$C6
08361 1DCE                        C6            .byte	$C6
08362 1DCF                        7E            .byte	$7E
08363 1DD0                        06            .byte	6
08364 1DD1                        0C            .byte	$C
08365 1DD2                        F8            .byte	$F8
08366 1DD3                        00            .byte	0
08367                                           ! 1076  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08368 1DD4                        00            .byte	0
08369 1DD5                        00            .byte	0
08370 1DD6                        00            .byte	0
08371 1DD7                        00            .byte	0
08372 1DD8                        00            .byte	0
08373 1DD9                        FE            .byte	$FE
08374 1DDA                        CC            .byte	$CC
08375 1DDB                        18            .byte	$18
08376 1DDC                        30            .byte	$30
08377 1DDD                        66            .byte	$66
08378 1DDE                        FE            .byte	$FE
08379 1DDF                        00            .byte	0
08380 1DE0                        00            .byte	0
08381 1DE1                        00            .byte	0
08382                                           ! 1077  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08383 1DE2                        00            .byte	0
08384 1DE3                        00            .byte	0
08385 1DE4                        0E            .byte	$E
08386 1DE5                        18            .byte	$18
08387 1DE6                        18            .byte	$18
08388 1DE7                        18            .byte	$18
08389 1DE8                        70            .byte	$70
08390 1DE9                        18            .byte	$18
08391 1DEA                        18            .byte	$18
08392 1DEB                        18            .byte	$18
08393 1DEC                        0E            .byte	$E
08394 1DED                        00            .byte	0
08395 1DEE                        00            .byte	0
08396 1DEF                        00            .byte	0
08397                                           ! 1078  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08398 1DF0                        00            .byte	0
08399 1DF1                        00            .byte	0
08400 1DF2                        18            .byte	$18
08401 1DF3                        18            .byte	$18
08402 1DF4                        18            .byte	$18
08403 1DF5                        18            .byte	$18
08404 1DF6                        00            .byte	0
08405 1DF7                        18            .byte	$18
08406 1DF8                        18            .byte	$18
08407 1DF9                        18            .byte	$18
08408 1DFA                        18            .byte	$18
08409 1DFB                        00            .byte	0
08410 1DFC                        00            .byte	0
08411 1DFD                        00            .byte	0
08412                                           ! 1079  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08413 1DFE                        00            .byte	0
08414 1DFF                        00            .byte	0
08415 1E00                        70            .byte	$70
08416 1E01                        18            .byte	$18
08417 1E02                        18            .byte	$18
08418 1E03                        18            .byte	$18
08419 1E04                        0E            .byte	$E
08420 1E05                        18            .byte	$18
08421 1E06                        18            .byte	$18
08422 1E07                        18            .byte	$18
08423 1E08                        70            .byte	$70
08424 1E09                        00            .byte	0
08425 1E0A                        00            .byte	0
08426 1E0B                        00            .byte	0
08427                                           ! 1080  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00,
08428 1E0C                        00            .byte	0
08429 1E0D                        00            .byte	0
08430 1E0E                        76            .byte	$76
08431 1E0F                        DC            .byte	$DC
08432 1E10                        00            .byte	0
08433 1E11                        00            .byte	0
08434                                           ! 1080  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08435 1E12                        00            .byte	0
08436 1E13                        00            .byte	0
08437 1E14                        00            .byte	0
08438 1E15                        00            .byte	0
08439 1E16                        00            .byte	0
08440 1E17                        00            .byte	0
08441 1E18                        00            .byte	0
08442 1E19                        00            .byte	0
08443                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08444 1E1A                        00            .byte	0
08445 1E1B                        00            .byte	0
08446 1E1C                        00            .byte	0
08447 1E1D                        00            .byte	0
08448 1E1E                        10            .byte	$10
08449 1E1F                        38            .byte	$38
08450 1E20                        6C            .byte	$6C
08451 1E21                        C6            .byte	$C6
08452 1E22                        C6            .byte	$C6
08453 1E23                        FE            .byte	$FE
08454 1E24                        00            .byte	0
08455 1E25                        00            .byte	0
08456 1E26                        00            .byte	0
08457 1E27                        00            .byte	0
08458                                           ! 1082  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08459 1E28                        00            .byte	0
08460 1E29                        00            .byte	0
08461 1E2A                        3C            .byte	$3C
08462 1E2B                        66            .byte	$66
08463 1E2C                        C2            .byte	$C2
08464 1E2D                        C0            .byte	$C0
08465 1E2E                        C0            .byte	$C0
08466 1E2F                        C2            .byte	$C2
08467 1E30                        66            .byte	$66
08468 1E31                        3C            .byte	$3C
08469 1E32                        0C            .byte	$C
08470 1E33                        06            .byte	6
08471 1E34                        7C            .byte	$7C
08472 1E35                        00            .byte	0
08473                                           ! 1083  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08474 1E36                        00            .byte	0
08475 1E37                        00            .byte	0
08476 1E38                        CC            .byte	$CC
08477 1E39                        CC            .byte	$CC
08478 1E3A                        00            .byte	0
08479 1E3B                        CC            .byte	$CC
08480 1E3C                        CC            .byte	$CC
08481 1E3D                        CC            .byte	$CC
08482 1E3E                        CC            .byte	$CC
08483 1E3F                        CC            .byte	$CC
08484 1E40                        76            .byte	$76
08485 1E41                        00            .byte	0
08486 1E42                        00            .byte	0
08487 1E43                        00            .byte	0
08488                                           ! 1084  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08489 1E44                        00            .byte	0
08490 1E45                        0C            .byte	$C
08491 1E46                        18            .byte	$18
08492 1E47                        30            .byte	$30
08493 1E48                        00            .byte	0
08494 1E49                        7C            .byte	$7C
08495 1E4A                        C6            .byte	$C6
08496 1E4B                        FE            .byte	$FE
08497 1E4C                        C0            .byte	$C0
08498 1E4D                        C6            .byte	$C6
08499 1E4E                        7C            .byte	$7C
08500 1E4F                        00            .byte	0
08501 1E50                        00            .byte	0
08502 1E51                        00            .byte	0
08503                                           ! 1085  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08504 1E52                        00            .byte	0
08505 1E53                        10            .byte	$10
08506 1E54                        38            .byte	$38
08507 1E55                        6C            .byte	$6C
08508 1E56                        00            .byte	0
08509 1E57                        78            .byte	$78
08510 1E58                        0C            .byte	$C
08511 1E59                        7C            .byte	$7C
08512 1E5A                        CC            .byte	$CC
08513 1E5B                        CC            .byte	$CC
08514 1E5C                        76            .byte	$76
08515 1E5D                        00            .byte	0
08516 1E5E                        00            .byte	0
08517 1E5F                        00            .byte	0
08518                                           ! 1086  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08519 1E60                        00            .byte	0
08520 1E61                        00            .byte	0
08521 1E62                        CC            .byte	$CC
08522 1E63                        CC            .byte	$CC
08523 1E64                        00            .byte	0
08524 1E65                        78            .byte	$78
08525 1E66                        0C            .byte	$C
08526 1E67                        7C            .byte	$7C
08527 1E68                        CC            .byte	$CC
08528 1E69                        CC            .byte	$CC
08529 1E6A                        76            .byte	$76
08530 1E6B                        00            .byte	0
08531 1E6C                        00            .byte	0
08532 1E6D                        00            .byte	0
08533                                           ! 1087  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08534 1E6E                        00            .byte	0
08535 1E6F                        60            .byte	$60
08536 1E70                        30            .byte	$30
08537 1E71                        18            .byte	$18
08538 1E72                        00            .byte	0
08539 1E73                        78            .byte	$78
08540 1E74                        0C            .byte	$C
08541 1E75                        7C            .byte	$7C
08542 1E76                        CC            .byte	$CC
08543 1E77                        CC            .byte	$CC
08544 1E78                        76            .byte	$76
08545 1E79                        00            .byte	0
08546 1E7A                        00            .byte	0
08547 1E7B                        00            .byte	0
08548                                           ! 1088  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08549 1E7C                        00            .byte	0
08550 1E7D                        38            .byte	$38
08551 1E7E                        6C            .byte	$6C
08552 1E7F                        38            .byte	$38
08553 1E80                        00            .byte	0
08554 1E81                        78            .byte	$78
08555 1E82                        0C            .byte	$C
08556 1E83                        7C            .byte	$7C
08557 1E84                        CC            .byte	$CC
08558 1E85                        CC            .byte	$CC
08559 1E86                        76            .byte	$76
08560 1E87                        00            .byte	0
08561 1E88                        00            .byte	0
08562 1E89                        00            .byte	0
08563                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08564 1E8A                        00            .byte	0
08565 1E8B                        00            .byte	0
08566 1E8C                        00            .byte	0
08567 1E8D                        00            .byte	0
08568 1E8E                        3C            .byte	$3C
08569 1E8F                        66            .byte	$66
08570 1E90                        60            .byte	$60
08571 1E91                        66            .byte	$66
08572 1E92                        3C            .byte	$3C
08573 1E93                        0C            .byte	$C
08574 1E94                        06            .byte	6
08575 1E95                        3C            .byte	$3C
08576 1E96                        00            .byte	0
08577 1E97                        00            .byte	0
08578                                           ! 1090  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08579 1E98                        00            .byte	0
08580 1E99                        10            .byte	$10
08581 1E9A                        38            .byte	$38
08582 1E9B                        6C            .byte	$6C
08583 1E9C                        00            .byte	0
08584 1E9D                        7C            .byte	$7C
08585 1E9E                        C6            .byte	$C6
08586 1E9F                        FE            .byte	$FE
08587 1EA0                        C0            .byte	$C0
08588 1EA1                        C6            .byte	$C6
08589 1EA2                        7C            .byte	$7C
08590 1EA3                        00            .byte	0
08591 1EA4                        00            .byte	0
08592 1EA5                        00            .byte	0
08593                                           ! 1091  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08594 1EA6                        00            .byte	0
08595 1EA7                        00            .byte	0
08596 1EA8                        CC            .byte	$CC
08597 1EA9                        CC            .byte	$CC
08598 1EAA                        00            .byte	0
08599 1EAB                        7C            .byte	$7C
08600 1EAC                        C6            .byte	$C6
08601 1EAD                        FE            .byte	$FE
08602 1EAE                        C0            .byte	$C0
08603 1EAF                        C6            .byte	$C6
08604 1EB0                        7C            .byte	$7C
08605 1EB1                        00            .byte	0
08606 1EB2                        00            .byte	0
08607 1EB3                        00            .byte	0
08608                                           ! 1092  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08609 1EB4                        00            .byte	0
08610 1EB5                        60            .byte	$60
08611 1EB6                        30            .byte	$30
08612 1EB7                        18            .byte	$18
08613 1EB8                        00            .byte	0
08614 1EB9                        7C            .byte	$7C
08615 1EBA                        C6            .byte	$C6
08616 1EBB                        FE            .byte	$FE
08617 1EBC                        C0            .byte	$C0
08618 1EBD                        C6            .byte	$C6
08619 1EBE                        7C            .byte	$7C
08620 1EBF                        00            .byte	0
08621 1EC0                        00            .byte	0
08622 1EC1                        00            .byte	0
08623                                           ! 1093  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08624 1EC2                        00            .byte	0
08625 1EC3                        00            .byte	0
08626 1EC4                        66            .byte	$66
08627 1EC5                        66            .byte	$66
08628 1EC6                        00            .byte	0
08629 1EC7                        38            .byte	$38
08630 1EC8                        18            .byte	$18
08631 1EC9                        18            .byte	$18
08632 1ECA                        18            .byte	$18
08633 1ECB                        18            .byte	$18
08634 1ECC                        3C            .byte	$3C
08635 1ECD                        00            .byte	0
08636 1ECE                        00            .byte	0
08637 1ECF                        00            .byte	0
08638                                           ! 1094  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08639 1ED0                        00            .byte	0
08640 1ED1                        18            .byte	$18
08641 1ED2                        3C            .byte	$3C
08642 1ED3                        66            .byte	$66
08643 1ED4                        00            .byte	0
08644 1ED5                        38            .byte	$38
08645 1ED6                        18            .byte	$18
08646 1ED7                        18            .byte	$18
08647 1ED8                        18            .byte	$18
08648 1ED9                        18            .byte	$18
08649 1EDA                        3C            .byte	$3C
08650 1EDB                        00            .byte	0
08651 1EDC                        00            .byte	0
08652 1EDD                        00            .byte	0
08653                                           ! 1095  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08654 1EDE                        00            .byte	0
08655 1EDF                        60            .byte	$60
08656 1EE0                        30            .byte	$30
08657 1EE1                        18            .byte	$18
08658 1EE2                        00            .byte	0
08659 1EE3                        38            .byte	$38
08660 1EE4                        18            .byte	$18
08661 1EE5                        18            .byte	$18
08662 1EE6                        18            .byte	$18
08663 1EE7                        18            .byte	$18
08664 1EE8                        3C            .byte	$3C
08665 1EE9                        00            .byte	0
08666 1EEA                        00            .byte	0
08667 1EEB                        00            .byte	0
08668                                           ! 1096  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08669 1EEC                        00            .byte	0
08670 1EED                        C6            .byte	$C6
08671 1EEE                        C6            .byte	$C6
08672 1EEF                        10            .byte	$10
08673 1EF0                        38            .byte	$38
08674 1EF1                        6C            .byte	$6C
08675 1EF2                        C6            .byte	$C6
08676 1EF3                        C6            .byte	$C6
08677 1EF4                        FE            .byte	$FE
08678 1EF5                        C6            .byte	$C6
08679 1EF6                        C6            .byte	$C6
08680 1EF7                        00            .byte	0
08681 1EF8                        00            .byte	0
08682 1EF9                        00            .byte	0
08683                                           ! 1097  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08684 1EFA                        38            .byte	$38
08685 1EFB                        6C            .byte	$6C
08686 1EFC                        38            .byte	$38
08687 1EFD                        00            .byte	0
08688 1EFE                        38            .byte	$38
08689 1EFF                        6C            .byte	$6C
08690 1F00                        C6            .byte	$C6
08691 1F01                        C6            .byte	$C6
08692 1F02                        FE            .byte	$FE
08693 1F03                        C6            .byte	$C6
08694 1F04                        C6            .byte	$C6
08695 1F05                        00            .byte	0
08696 1F06                        00            .byte	0
08697 1F07                        00            .byte	0
08698                                           ! 1098  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08699 1F08                        18            .byte	$18
08700 1F09                        30            .byte	$30
08701 1F0A                        60            .byte	$60
08702 1F0B                        00            .byte	0
08703 1F0C                        FE            .byte	$FE
08704 1F0D                        66            .byte	$66
08705 1F0E                        60            .byte	$60
08706 1F0F                        7C            .byte	$7C
08707 1F10                        60            .byte	$60
08708 1F11                        66            .byte	$66
08709 1F12                        FE            .byte	$FE
08710 1F13                        00            .byte	0
08711 1F14                        00            .byte	0
08712 1F15                        00            .byte	0
08713                                           ! 1099  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08714 1F16                        00            .byte	0
08715 1F17                        00            .byte	0
08716 1F18                        00            .byte	0
08717 1F19                        00            .byte	0
08718 1F1A                        CC            .byte	$CC
08719 1F1B                        76            .byte	$76
08720 1F1C                        36            .byte	$36
08721 1F1D                        7E            .byte	$7E
08722 1F1E                        D8            .byte	$D8
08723 1F1F                        D8            .byte	$D8
08724 1F20                        6E            .byte	$6E
08725 1F21                        00            .byte	0
08726 1F22                        00            .byte	0
08727 1F23                        00            .byte	0
08728                                           ! 1100  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08729 1F24                        00            .byte	0
08730 1F25                        00            .byte	0
08731 1F26                        3E            .byte	$3E
08732 1F27                        6C            .byte	$6C
08733 1F28                        CC            .byte	$CC
08734 1F29                        CC            .byte	$CC
08735 1F2A                        FE            .byte	$FE
08736 1F2B                        CC            .byte	$CC
08737 1F2C                        CC            .byte	$CC
08738 1F2D                        CC            .byte	$CC
08739 1F2E                        CE            .byte	$CE
08740 1F2F                        00            .byte	0
08741 1F30                        00            .byte	0
08742 1F31                        00            .byte	0
08743                                           ! 1101  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08744 1F32                        00            .byte	0
08745 1F33                        10            .byte	$10
08746 1F34                        38            .byte	$38
08747 1F35                        6C            .byte	$6C
08748 1F36                        00            .byte	0
08749 1F37                        7C            .byte	$7C
08750 1F38                        C6            .byte	$C6
08751 1F39                        C6            .byte	$C6
08752 1F3A                        C6            .byte	$C6
08753 1F3B                        C6            .byte	$C6
08754 1F3C                        7C            .byte	$7C
08755 1F3D                        00            .byte	0
08756 1F3E                        00            .byte	0
08757 1F3F                        00            .byte	0
08758                                           ! 1102  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08759 1F40                        00            .byte	0
08760 1F41                        00            .byte	0
08761 1F42                        C6            .byte	$C6
08762 1F43                        C6            .byte	$C6
08763 1F44                        00            .byte	0
08764 1F45                        7C            .byte	$7C
08765 1F46                        C6            .byte	$C6
08766 1F47                        C6            .byte	$C6
08767 1F48                        C6            .byte	$C6
08768 1F49                        C6            .byte	$C6
08769 1F4A                        7C            .byte	$7C
08770 1F4B                        00            .byte	0
08771 1F4C                        00            .byte	0
08772 1F4D                        00            .byte	0
08773                                           ! 1103  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08774 1F4E                        00            .byte	0
08775 1F4F                        60            .byte	$60
08776 1F50                        30            .byte	$30
08777 1F51                        18            .byte	$18
08778 1F52                        00            .byte	0
08779 1F53                        7C            .byte	$7C
08780 1F54                        C6            .byte	$C6
08781 1F55                        C6            .byte	$C6
08782 1F56                        C6            .byte	$C6
08783 1F57                        C6            .byte	$C6
08784 1F58                        7C            .byte	$7C
08785 1F59                        00            .byte	0
08786 1F5A                        00            .byte	0
08787 1F5B                        00            .byte	0
08788                                           ! 1104  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0
08789 1F5C                        00            .byte	0
08790 1F5D                        30            .byte	$30
08791 1F5E                        78            .byte	$78
08792 1F5F                        CC            .byte	$CC
08793 1F60                        00            .byte	0
08794 1F61                        CC            .byte	$CC
08795 1F62                        CC            .byte	$CC
08796 1F63                        CC            .byte	$CC
08797                                           ! 1104 xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08798 1F64                        CC            .byte	$CC
08799 1F65                        CC            .byte	$CC
08800 1F66                        76            .byte	$76
08801 1F67                        00            .byte	0
08802 1F68                        00            .byte	0
08803 1F69                        00            .byte	0
08804                                           ! 1105  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08805 1F6A                        00            .byte	0
08806 1F6B                        60            .byte	$60
08807 1F6C                        30            .byte	$30
08808 1F6D                        18            .byte	$18
08809 1F6E                        00            .byte	0
08810 1F6F                        CC            .byte	$CC
08811 1F70                        CC            .byte	$CC
08812 1F71                        CC            .byte	$CC
08813 1F72                        CC            .byte	$CC
08814 1F73                        CC            .byte	$CC
08815 1F74                        76            .byte	$76
08816 1F75                        00            .byte	0
08817 1F76                        00            .byte	0
08818 1F77                        00            .byte	0
08819                                           ! 1106  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08820 1F78                        00            .byte	0
08821 1F79                        00            .byte	0
08822 1F7A                        C6            .byte	$C6
08823 1F7B                        C6            .byte	$C6
08824 1F7C                        00            .byte	0
08825 1F7D                        C6            .byte	$C6
08826 1F7E                        C6            .byte	$C6
08827 1F7F                        C6            .byte	$C6
08828 1F80                        C6            .byte	$C6
08829 1F81                        7E            .byte	$7E
08830 1F82                        06            .byte	6
08831 1F83                        0C            .byte	$C
08832 1F84                        78            .byte	$78
08833 1F85                        00            .byte	0
08834                                           ! 1107  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08835 1F86                        00            .byte	0
08836 1F87                        C6            .byte	$C6
08837 1F88                        C6            .byte	$C6
08838 1F89                        38            .byte	$38
08839 1F8A                        6C            .byte	$6C
08840 1F8B                        C6            .byte	$C6
08841 1F8C                        C6            .byte	$C6
08842 1F8D                        C6            .byte	$C6
08843 1F8E                        C6            .byte	$C6
08844 1F8F                        6C            .byte	$6C
08845 1F90                        38            .byte	$38
08846 1F91                        00            .byte	0
08847 1F92                        00            .byte	0
08848 1F93                        00            .byte	0
08849                                           ! 1108  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08850 1F94                        00            .byte	0
08851 1F95                        C6            .byte	$C6
08852 1F96                        C6            .byte	$C6
08853 1F97                        00            .byte	0
08854 1F98                        C6            .byte	$C6
08855 1F99                        C6            .byte	$C6
08856 1F9A                        C6            .byte	$C6
08857 1F9B                        C6            .byte	$C6
08858 1F9C                        C6            .byte	$C6
08859 1F9D                        C6            .byte	$C6
08860 1F9E                        7C            .byte	$7C
08861 1F9F                        00            .byte	0
08862 1FA0                        00            .byte	0
08863 1FA1                        00            .byte	0
08864                                           ! 1109  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08865 1FA2                        00            .byte	0
08866 1FA3                        18            .byte	$18
08867 1FA4                        18            .byte	$18
08868 1FA5                        3C            .byte	$3C
08869 1FA6                        66            .byte	$66
08870 1FA7                        60            .byte	$60
08871 1FA8                        60            .byte	$60
08872 1FA9                        66            .byte	$66
08873 1FAA                        3C            .byte	$3C
08874 1FAB                        18            .byte	$18
08875 1FAC                        18            .byte	$18
08876 1FAD                        00            .byte	0
08877 1FAE                        00            .byte	0
08878 1FAF                        00            .byte	0
08879                                           ! 1110  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08880 1FB0                        00            .byte	0
08881 1FB1                        38            .byte	$38
08882 1FB2                        6C            .byte	$6C
08883 1FB3                        64            .byte	$64
08884 1FB4                        60            .byte	$60
08885 1FB5                        F0            .byte	$F0
08886 1FB6                        60            .byte	$60
08887 1FB7                        60            .byte	$60
08888 1FB8                        60            .byte	$60
08889 1FB9                        E6            .byte	$E6
08890 1FBA                        FC            .byte	$FC
08891 1FBB                        00            .byte	0
08892 1FBC                        00            .byte	0
08893 1FBD                        00            .byte	0
08894                                           ! 1111  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08895 1FBE                        00            .byte	0
08896 1FBF                        00            .byte	0
08897 1FC0                        66            .byte	$66
08898 1FC1                        66            .byte	$66
08899 1FC2                        3C            .byte	$3C
08900 1FC3                        18            .byte	$18
08901 1FC4                        7E            .byte	$7E
08902 1FC5                        18            .byte	$18
08903 1FC6                        7E            .byte	$7E
08904 1FC7                        18            .byte	$18
08905 1FC8                        18            .byte	$18
08906 1FC9                        00            .byte	0
08907 1FCA                        00            .byte	0
08908 1FCB                        00            .byte	0
08909                                           ! 1112  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08910 1FCC                        00            .byte	0
08911 1FCD                        F8            .byte	$F8
08912 1FCE                        CC            .byte	$CC
08913 1FCF                        CC            .byte	$CC
08914 1FD0                        F8            .byte	$F8
08915 1FD1                        C4            .byte	$C4
08916 1FD2                        CC            .byte	$CC
08917 1FD3                        DE            .byte	$DE
08918 1FD4                        CC            .byte	$CC
08919 1FD5                        CC            .byte	$CC
08920 1FD6                        C6            .byte	$C6
08921 1FD7                        00            .byte	0
08922 1FD8                        00            .byte	0
08923 1FD9                        00            .byte	0
08924                                           ! 1113  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08925 1FDA                        00            .byte	0
08926 1FDB                        0E            .byte	$E
08927 1FDC                        1B            .byte	$1B
08928 1FDD                        18            .byte	$18
08929 1FDE                        18            .byte	$18
08930 1FDF                        18            .byte	$18
08931 1FE0                        7E            .byte	$7E
08932 1FE1                        18            .byte	$18
08933 1FE2                        18            .byte	$18
08934 1FE3                        18            .byte	$18
08935 1FE4                        18            .byte	$18
08936 1FE5                        D8            .byte	$D8
08937 1FE6                        70            .byte	$70
08938 1FE7                        00            .byte	0
08939                                           ! 1114  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08940 1FE8                        00            .byte	0
08941 1FE9                        18            .byte	$18
08942 1FEA                        30            .byte	$30
08943 1FEB                        60            .byte	$60
08944 1FEC                        00            .byte	0
08945 1FED                        78            .byte	$78
08946 1FEE                        0C            .byte	$C
08947 1FEF                        7C            .byte	$7C
08948 1FF0                        CC            .byte	$CC
08949 1FF1                        CC            .byte	$CC
08950 1FF2                        76            .byte	$76
08951 1FF3                        00            .byte	0
08952 1FF4                        00            .byte	0
08953 1FF5                        00            .byte	0
08954                                           ! 1115  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08955 1FF6                        00            .byte	0
08956 1FF7                        0C            .byte	$C
08957 1FF8                        18            .byte	$18
08958 1FF9                        30            .byte	$30
08959 1FFA                        00            .byte	0
08960 1FFB                        38            .byte	$38
08961 1FFC                        18            .byte	$18
08962 1FFD                        18            .byte	$18
08963 1FFE                        18            .byte	$18
08964 1FFF                        18            .byte	$18
08965 2000                        3C            .byte	$3C
08966 2001                        00            .byte	0
08967 2002                        00            .byte	0
08968 2003                        00            .byte	0
08969                                           ! 1116  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08970 2004                        00            .byte	0
08971 2005                        18            .byte	$18
08972 2006                        30            .byte	$30
08973 2007                        60            .byte	$60
08974 2008                        00            .byte	0
08975 2009                        7C            .byte	$7C
08976 200A                        C6            .byte	$C6
08977 200B                        C6            .byte	$C6
08978 200C                        C6            .byte	$C6
08979 200D                        C6            .byte	$C6
08980 200E                        7C            .byte	$7C
08981 200F                        00            .byte	0
08982 2010                        00            .byte	0
08983 2011                        00            .byte	0
08984                                           ! 1117  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08985 2012                        00            .byte	0
08986 2013                        18            .byte	$18
08987 2014                        30            .byte	$30
08988 2015                        60            .byte	$60
08989 2016                        00            .byte	0
08990 2017                        CC            .byte	$CC
08991 2018                        CC            .byte	$CC
08992 2019                        CC            .byte	$CC
08993 201A                        CC            .byte	$CC
08994 201B                        CC            .byte	$CC
08995 201C                        76            .byte	$76
08996 201D                        00            .byte	0
08997 201E                        00            .byte	0
08998 201F                        00            .byte	0
08999                                           ! 1118  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09000 2020                        00            .byte	0
09001 2021                        00            .byte	0
09002 2022                        76            .byte	$76
09003 2023                        DC            .byte	$DC
09004 2024                        00            .byte	0
09005 2025                        DC            .byte	$DC
09006 2026                        66            .byte	$66
09007 2027                        66            .byte	$66
09008 2028                        66            .byte	$66
09009 2029                        66            .byte	$66
09010 202A                        66            .byte	$66
09011 202B                        00            .byte	0
09012 202C                        00            .byte	0
09013 202D                        00            .byte	0
09014                                           ! 1119  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09015 202E                        76            .byte	$76
09016 202F                        DC            .byte	$DC
09017 2030                        00            .byte	0
09018 2031                        C6            .byte	$C6
09019 2032                        E6            .byte	$E6
09020 2033                        F6            .byte	$F6
09021 2034                        FE            .byte	$FE
09022 2035                        DE            .byte	$DE
09023 2036                        CE            .byte	$CE
09024 2037                        C6            .byte	$C6
09025 2038                        C6            .byte	$C6
09026 2039                        00            .byte	0
09027 203A                        00            .byte	0
09028 203B                        00            .byte	0
09029                                           ! 1120  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09030 203C                        00            .byte	0
09031 203D                        3C            .byte	$3C
09032 203E                        6C            .byte	$6C
09033 203F                        6C            .byte	$6C
09034 2040                        3E            .byte	$3E
09035 2041                        00            .byte	0
09036 2042                        7E            .byte	$7E
09037 2043                        00            .byte	0
09038 2044                        00            .byte	0
09039 2045                        00            .byte	0
09040 2046                        00            .byte	0
09041 2047                        00            .byte	0
09042 2048                        00            .byte	0
09043 2049                        00            .byte	0
09044                                           ! 1121  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09045 204A                        00            .byte	0
09046 204B                        38            .byte	$38
09047 204C                        6C            .byte	$6C
09048 204D                        6C            .byte	$6C
09049 204E                        38            .byte	$38
09050 204F                        00            .byte	0
09051 2050                        7C            .byte	$7C
09052 2051                        00            .byte	0
09053 2052                        00            .byte	0
09054 2053                        00            .byte	0
09055 2054                        00            .byte	0
09056 2055                        00            .byte	0
09057 2056                        00            .byte	0
09058 2057                        00            .byte	0
09059                                           ! 1122  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09060 2058                        00            .byte	0
09061 2059                        00            .byte	0
09062 205A                        30            .byte	$30
09063 205B                        30            .byte	$30
09064 205C                        00            .byte	0
09065 205D                        30            .byte	$30
09066 205E                        30            .byte	$30
09067 205F                        60            .byte	$60
09068 2060                        C6            .byte	$C6
09069 2061                        C6            .byte	$C6
09070 2062                        7C            .byte	$7C
09071 2063                        00            .byte	0
09072 2064                        00            .byte	0
09073 2065                        00            .byte	0
09074                                           ! 1123  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09075 2066                        00            .byte	0
09076 2067                        00            .byte	0
09077 2068                        00            .byte	0
09078 2069                        00            .byte	0
09079 206A                        00            .byte	0
09080 206B                        00            .byte	0
09081 206C                        FE            .byte	$FE
09082 206D                        C0            .byte	$C0
09083 206E                        C0            .byte	$C0
09084 206F                        C0            .byte	$C0
09085 2070                        00            .byte	0
09086 2071                        00            .byte	0
09087 2072                        00            .byte	0
09088 2073                        00            .byte	0
09089                                           ! 1124  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09090 2074                        00            .byte	0
09091 2075                        00            .byte	0
09092 2076                        00            .byte	0
09093 2077                        00            .byte	0
09094 2078                        00            .byte	0
09095 2079                        00            .byte	0
09096 207A                        FE            .byte	$FE
09097 207B                        06            .byte	6
09098 207C                        06            .byte	6
09099 207D                        06            .byte	6
09100 207E                        00            .byte	0
09101 207F                        00            .byte	0
09102 2080                        00            .byte	0
09103 2081                        00            .byte	0
09104                                           ! 1125  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09105 2082                        00            .byte	0
09106 2083                        C0            .byte	$C0
09107 2084                        C0            .byte	$C0
09108 2085                        C6            .byte	$C6
09109 2086                        CC            .byte	$CC
09110 2087                        D8            .byte	$D8
09111 2088                        30            .byte	$30
09112 2089                        60            .byte	$60
09113 208A                        DC            .byte	$DC
09114 208B                        86            .byte	$86
09115 208C                        0C            .byte	$C
09116 208D                        18            .byte	$18
09117 208E                        3E            .byte	$3E
09118 208F                        00            .byte	0
09119                                           ! 1126  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09120 2090                        00            .byte	0
09121 2091                        C0            .byte	$C0
09122 2092                        C0            .byte	$C0
09123 2093                        C6            .byte	$C6
09124 2094                        CC            .byte	$CC
09125 2095                        D8            .byte	$D8
09126 2096                        30            .byte	$30
09127 2097                        66            .byte	$66
09128 2098                        CE            .byte	$CE
09129 2099                        9E            .byte	$9E
09130 209A                        3E            .byte	$3E
09131 209B                        06            .byte	6
09132 209C                        06            .byte	6
09133 209D                        00            .byte	0
09134                                           ! 1127  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09135 209E                        00            .byte	0
09136 209F                        00            .byte	0
09137 20A0                        18            .byte	$18
09138 20A1                        18            .byte	$18
09139 20A2                        00            .byte	0
09140 20A3                        18            .byte	$18
09141 20A4                        18            .byte	$18
09142 20A5                        3C            .byte	$3C
09143 20A6                        3C            .byte	$3C
09144 20A7                        3C            .byte	$3C
09145 20A8                        18            .byte	$18
09146 20A9                        00            .byte	0
09147 20AA                        00            .byte	0
09148 20AB                        00            .byte	0
09149                                           ! 1128  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x0
09150 20AC                        00            .byte	0
09151 20AD                        00            .byte	0
09152 20AE                        00            .byte	0
09153 20AF                        00            .byte	0
09154 20B0                        36            .byte	$36
09155 20B1                        6C            .byte	$6C
09156 20B2                        D8            .byte	$D8
09157 20B3                        6C            .byte	$6C
09158 20B4                        36            .byte	$36
09159                                           ! 1128 0, 0x00, 0x00, 0x00, 0x00,
09160 20B5                        00            .byte	0
09161 20B6                        00            .byte	0
09162 20B7                        00            .byte	0
09163 20B8                        00            .byte	0
09164 20B9                        00            .byte	0
09165                                           ! 1129  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09166 20BA                        00            .byte	0
09167 20BB                        00            .byte	0
09168 20BC                        00            .byte	0
09169 20BD                        00            .byte	0
09170 20BE                        D8            .byte	$D8
09171 20BF                        6C            .byte	$6C
09172 20C0                        36            .byte	$36
09173 20C1                        6C            .byte	$6C
09174 20C2                        D8            .byte	$D8
09175 20C3                        00            .byte	0
09176 20C4                        00            .byte	0
09177 20C5                        00            .byte	0
09178 20C6                        00            .byte	0
09179 20C7                        00            .byte	0
09180                                           ! 1130  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09181 20C8                        11            .byte	$11
09182 20C9                        44            .byte	$44
09183 20CA                        11            .byte	$11
09184 20CB                        44            .byte	$44
09185 20CC                        11            .byte	$11
09186 20CD                        44            .byte	$44
09187 20CE                        11            .byte	$11
09188 20CF                        44            .byte	$44
09189 20D0                        11            .byte	$11
09190 20D1                        44            .byte	$44
09191 20D2                        11            .byte	$11
09192 20D3                        44            .byte	$44
09193 20D4                        11            .byte	$11
09194 20D5                        44            .byte	$44
09195                                           ! 1131  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09196 20D6                        55            .byte	$55
09197 20D7                        AA            .byte	$AA
09198 20D8                        55            .byte	$55
09199 20D9                        AA            .byte	$AA
09200 20DA                        55            .byte	$55
09201 20DB                        AA            .byte	$AA
09202 20DC                        55            .byte	$55
09203 20DD                        AA            .byte	$AA
09204 20DE                        55            .byte	$55
09205 20DF                        AA            .byte	$AA
09206 20E0                        55            .byte	$55
09207 20E1                        AA            .byte	$AA
09208 20E2                        55            .byte	$55
09209 20E3                        AA            .byte	$AA
09210                                           ! 1132  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09211 20E4                        DD            .byte	$DD
09212 20E5                        77            .byte	$77
09213 20E6                        DD            .byte	$DD
09214 20E7                        77            .byte	$77
09215 20E8                        DD            .byte	$DD
09216 20E9                        77            .byte	$77
09217 20EA                        DD            .byte	$DD
09218 20EB                        77            .byte	$77
09219 20EC                        DD            .byte	$DD
09220 20ED                        77            .byte	$77
09221 20EE                        DD            .byte	$DD
09222 20EF                        77            .byte	$77
09223 20F0                        DD            .byte	$DD
09224 20F1                        77            .byte	$77
09225                                           ! 1133  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09226 20F2                        18            .byte	$18
09227 20F3                        18            .byte	$18
09228 20F4                        18            .byte	$18
09229 20F5                        18            .byte	$18
09230 20F6                        18            .byte	$18
09231 20F7                        18            .byte	$18
09232 20F8                        18            .byte	$18
09233 20F9                        18            .byte	$18
09234 20FA                        18            .byte	$18
09235 20FB                        18            .byte	$18
09236 20FC                        18            .byte	$18
09237 20FD                        18            .byte	$18
09238 20FE                        18            .byte	$18
09239 20FF                        18            .byte	$18
09240                                           ! 1134  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09241 2100                        18            .byte	$18
09242 2101                        18            .byte	$18
09243 2102                        18            .byte	$18
09244 2103                        18            .byte	$18
09245 2104                        18            .byte	$18
09246 2105                        18            .byte	$18
09247 2106                        18            .byte	$18
09248 2107                        F8            .byte	$F8
09249 2108                        18            .byte	$18
09250 2109                        18            .byte	$18
09251 210A                        18            .byte	$18
09252 210B                        18            .byte	$18
09253 210C                        18            .byte	$18
09254 210D                        18            .byte	$18
09255                                           ! 1135  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09256 210E                        18            .byte	$18
09257 210F                        18            .byte	$18
09258 2110                        18            .byte	$18
09259 2111                        18            .byte	$18
09260 2112                        18            .byte	$18
09261 2113                        F8            .byte	$F8
09262 2114                        18            .byte	$18
09263 2115                        F8            .byte	$F8
09264 2116                        18            .byte	$18
09265 2117                        18            .byte	$18
09266 2118                        18            .byte	$18
09267 2119                        18            .byte	$18
09268 211A                        18            .byte	$18
09269 211B                        18            .byte	$18
09270                                           ! 1136  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09271 211C                        36            .byte	$36
09272 211D                        36            .byte	$36
09273 211E                        36            .byte	$36
09274 211F                        36            .byte	$36
09275 2120                        36            .byte	$36
09276 2121                        36            .byte	$36
09277 2122                        36            .byte	$36
09278 2123                        F6            .byte	$F6
09279 2124                        36            .byte	$36
09280 2125                        36            .byte	$36
09281 2126                        36            .byte	$36
09282 2127                        36            .byte	$36
09283 2128                        36            .byte	$36
09284 2129                        36            .byte	$36
09285                                           ! 1137  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09286 212A                        00            .byte	0
09287 212B                        00            .byte	0
09288 212C                        00            .byte	0
09289 212D                        00            .byte	0
09290 212E                        00            .byte	0
09291 212F                        00            .byte	0
09292 2130                        00            .byte	0
09293 2131                        FE            .byte	$FE
09294 2132                        36            .byte	$36
09295 2133                        36            .byte	$36
09296 2134                        36            .byte	$36
09297 2135                        36            .byte	$36
09298 2136                        36            .byte	$36
09299 2137                        36            .byte	$36
09300                                           ! 1138  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09301 2138                        00            .byte	0
09302 2139                        00            .byte	0
09303 213A                        00            .byte	0
09304 213B                        00            .byte	0
09305 213C                        00            .byte	0
09306 213D                        F8            .byte	$F8
09307 213E                        18            .byte	$18
09308 213F                        F8            .byte	$F8
09309 2140                        18            .byte	$18
09310 2141                        18            .byte	$18
09311 2142                        18            .byte	$18
09312 2143                        18            .byte	$18
09313 2144                        18            .byte	$18
09314 2145                        18            .byte	$18
09315                                           ! 1139  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09316 2146                        36            .byte	$36
09317 2147                        36            .byte	$36
09318 2148                        36            .byte	$36
09319 2149                        36            .byte	$36
09320 214A                        36            .byte	$36
09321 214B                        F6            .byte	$F6
09322 214C                        06            .byte	6
09323 214D                        F6            .byte	$F6
09324 214E                        36            .byte	$36
09325 214F                        36            .byte	$36
09326 2150                        36            .byte	$36
09327 2151                        36            .byte	$36
09328 2152                        36            .byte	$36
09329 2153                        36            .byte	$36
09330                                           ! 1140  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09331 2154                        36            .byte	$36
09332 2155                        36            .byte	$36
09333 2156                        36            .byte	$36
09334 2157                        36            .byte	$36
09335 2158                        36            .byte	$36
09336 2159                        36            .byte	$36
09337 215A                        36            .byte	$36
09338 215B                        36            .byte	$36
09339 215C                        36            .byte	$36
09340 215D                        36            .byte	$36
09341 215E                        36            .byte	$36
09342 215F                        36            .byte	$36
09343 2160                        36            .byte	$36
09344 2161                        36            .byte	$36
09345                                           ! 1141  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09346 2162                        00            .byte	0
09347 2163                        00            .byte	0
09348 2164                        00            .byte	0
09349 2165                        00            .byte	0
09350 2166                        00            .byte	0
09351 2167                        FE            .byte	$FE
09352 2168                        06            .byte	6
09353 2169                        F6            .byte	$F6
09354 216A                        36            .byte	$36
09355 216B                        36            .byte	$36
09356 216C                        36            .byte	$36
09357 216D                        36            .byte	$36
09358 216E                        36            .byte	$36
09359 216F                        36            .byte	$36
09360                                           ! 1142  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09361 2170                        36            .byte	$36
09362 2171                        36            .byte	$36
09363 2172                        36            .byte	$36
09364 2173                        36            .byte	$36
09365 2174                        36            .byte	$36
09366 2175                        F6            .byte	$F6
09367 2176                        06            .byte	6
09368 2177                        FE            .byte	$FE
09369 2178                        00            .byte	0
09370 2179                        00            .byte	0
09371 217A                        00            .byte	0
09372 217B                        00            .byte	0
09373 217C                        00            .byte	0
09374 217D                        00            .byte	0
09375                                           ! 1143  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09376 217E                        36            .byte	$36
09377 217F                        36            .byte	$36
09378 2180                        36            .byte	$36
09379 2181                        36            .byte	$36
09380 2182                        36            .byte	$36
09381 2183                        36            .byte	$36
09382 2184                        36            .byte	$36
09383 2185                        FE            .byte	$FE
09384 2186                        00            .byte	0
09385 2187                        00            .byte	0
09386 2188                        00            .byte	0
09387 2189                        00            .byte	0
09388 218A                        00            .byte	0
09389 218B                        00            .byte	0
09390                                           ! 1144  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09391 218C                        18            .byte	$18
09392 218D                        18            .byte	$18
09393 218E                        18            .byte	$18
09394 218F                        18            .byte	$18
09395 2190                        18            .byte	$18
09396 2191                        F8            .byte	$F8
09397 2192                        18            .byte	$18
09398 2193                        F8            .byte	$F8
09399 2194                        00            .byte	0
09400 2195                        00            .byte	0
09401 2196                        00            .byte	0
09402 2197                        00            .byte	0
09403 2198                        00            .byte	0
09404 2199                        00            .byte	0
09405                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09406 219A                        00            .byte	0
09407 219B                        00            .byte	0
09408 219C                        00            .byte	0
09409 219D                        00            .byte	0
09410 219E                        00            .byte	0
09411 219F                        00            .byte	0
09412 21A0                        00            .byte	0
09413 21A1                        F8            .byte	$F8
09414 21A2                        18            .byte	$18
09415 21A3                        18            .byte	$18
09416 21A4                        18            .byte	$18
09417 21A5                        18            .byte	$18
09418 21A6                        18            .byte	$18
09419 21A7                        18            .byte	$18
09420                                           ! 1146  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09421 21A8                        18            .byte	$18
09422 21A9                        18            .byte	$18
09423 21AA                        18            .byte	$18
09424 21AB                        18            .byte	$18
09425 21AC                        18            .byte	$18
09426 21AD                        18            .byte	$18
09427 21AE                        18            .byte	$18
09428 21AF                        1F            .byte	$1F
09429 21B0                        00            .byte	0
09430 21B1                        00            .byte	0
09431 21B2                        00            .byte	0
09432 21B3                        00            .byte	0
09433 21B4                        00            .byte	0
09434 21B5                        00            .byte	0
09435                                           ! 1147  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09436 21B6                        18            .byte	$18
09437 21B7                        18            .byte	$18
09438 21B8                        18            .byte	$18
09439 21B9                        18            .byte	$18
09440 21BA                        18            .byte	$18
09441 21BB                        18            .byte	$18
09442 21BC                        18            .byte	$18
09443 21BD                        FF            .byte	$FF
09444 21BE                        00            .byte	0
09445 21BF                        00            .byte	0
09446 21C0                        00            .byte	0
09447 21C1                        00            .byte	0
09448 21C2                        00            .byte	0
09449 21C3                        00            .byte	0
09450                                           ! 1148  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09451 21C4                        00            .byte	0
09452 21C5                        00            .byte	0
09453 21C6                        00            .byte	0
09454 21C7                        00            .byte	0
09455 21C8                        00            .byte	0
09456 21C9                        00            .byte	0
09457 21CA                        00            .byte	0
09458 21CB                        FF            .byte	$FF
09459 21CC                        18            .byte	$18
09460 21CD                        18            .byte	$18
09461 21CE                        18            .byte	$18
09462 21CF                        18            .byte	$18
09463 21D0                        18            .byte	$18
09464 21D1                        18            .byte	$18
09465                                           ! 1149  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09466 21D2                        18            .byte	$18
09467 21D3                        18            .byte	$18
09468 21D4                        18            .byte	$18
09469 21D5                        18            .byte	$18
09470 21D6                        18            .byte	$18
09471 21D7                        18            .byte	$18
09472 21D8                        18            .byte	$18
09473 21D9                        1F            .byte	$1F
09474 21DA                        18            .byte	$18
09475 21DB                        18            .byte	$18
09476 21DC                        18            .byte	$18
09477 21DD                        18            .byte	$18
09478 21DE                        18            .byte	$18
09479 21DF                        18            .byte	$18
09480                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09481 21E0                        00            .byte	0
09482 21E1                        00            .byte	0
09483 21E2                        00            .byte	0
09484 21E3                        00            .byte	0
09485 21E4                        00            .byte	0
09486 21E5                        00            .byte	0
09487 21E6                        00            .byte	0
09488 21E7                        FF            .byte	$FF
09489 21E8                        00            .byte	0
09490 21E9                        00            .byte	0
09491 21EA                        00            .byte	0
09492 21EB                        00            .byte	0
09493 21EC                        00            .byte	0
09494 21ED                        00            .byte	0
09495                                           ! 1151  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09496 21EE                        18            .byte	$18
09497 21EF                        18            .byte	$18
09498 21F0                        18            .byte	$18
09499 21F1                        18            .byte	$18
09500 21F2                        18            .byte	$18
09501 21F3                        18            .byte	$18
09502 21F4                        18            .byte	$18
09503 21F5                        FF            .byte	$FF
09504 21F6                        18            .byte	$18
09505 21F7                        18            .byte	$18
09506 21F8                        18            .byte	$18
09507 21F9                        18            .byte	$18
09508 21FA                        18            .byte	$18
09509 21FB                        18            .byte	$18
09510                                           ! 1152  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
09511 21FC                        18            .byte	$18
09512 21FD                        18            .byte	$18
09513 21FE                        18            .byte	$18
09514 21FF                        18            .byte	$18
09515 2200                        18            .byte	$18
09516 2201                        1F            .byte	$1F
09517 2202                        18            .byte	$18
09518 2203                        1F            .byte	$1F
09519 2204                        18            .byte	$18
09520 2205                        18            .byte	$18
09521                                           ! 1152  0x18, 0x18, 0x18,
09522 2206                        18            .byte	$18
09523 2207                        18            .byte	$18
09524 2208                        18            .byte	$18
09525 2209                        18            .byte	$18
09526                                           ! 1153  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09527 220A                        36            .byte	$36
09528 220B                        36            .byte	$36
09529 220C                        36            .byte	$36
09530 220D                        36            .byte	$36
09531 220E                        36            .byte	$36
09532 220F                        36            .byte	$36
09533 2210                        36            .byte	$36
09534 2211                        37            .byte	$37
09535 2212                        36            .byte	$36
09536 2213                        36            .byte	$36
09537 2214                        36            .byte	$36
09538 2215                        36            .byte	$36
09539 2216                        36            .byte	$36
09540 2217                        36            .byte	$36
09541                                           ! 1154  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09542 2218                        36            .byte	$36
09543 2219                        36            .byte	$36
09544 221A                        36            .byte	$36
09545 221B                        36            .byte	$36
09546 221C                        36            .byte	$36
09547 221D                        37            .byte	$37
09548 221E                        30            .byte	$30
09549 221F                        3F            .byte	$3F
09550 2220                        00            .byte	0
09551 2221                        00            .byte	0
09552 2222                        00            .byte	0
09553 2223                        00            .byte	0
09554 2224                        00            .byte	0
09555 2225                        00            .byte	0
09556                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09557 2226                        00            .byte	0
09558 2227                        00            .byte	0
09559 2228                        00            .byte	0
09560 2229                        00            .byte	0
09561 222A                        00            .byte	0
09562 222B                        3F            .byte	$3F
09563 222C                        30            .byte	$30
09564 222D                        37            .byte	$37
09565 222E                        36            .byte	$36
09566 222F                        36            .byte	$36
09567 2230                        36            .byte	$36
09568 2231                        36            .byte	$36
09569 2232                        36            .byte	$36
09570 2233                        36            .byte	$36
09571                                           ! 1156  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09572 2234                        36            .byte	$36
09573 2235                        36            .byte	$36
09574 2236                        36            .byte	$36
09575 2237                        36            .byte	$36
09576 2238                        36            .byte	$36
09577 2239                        F7            .byte	$F7
09578 223A                        00            .byte	0
09579 223B                        FF            .byte	$FF
09580 223C                        00            .byte	0
09581 223D                        00            .byte	0
09582 223E                        00            .byte	0
09583 223F                        00            .byte	0
09584 2240                        00            .byte	0
09585 2241                        00            .byte	0
09586                                           ! 1157  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09587 2242                        00            .byte	0
09588 2243                        00            .byte	0
09589 2244                        00            .byte	0
09590 2245                        00            .byte	0
09591 2246                        00            .byte	0
09592 2247                        FF            .byte	$FF
09593 2248                        00            .byte	0
09594 2249                        F7            .byte	$F7
09595 224A                        36            .byte	$36
09596 224B                        36            .byte	$36
09597 224C                        36            .byte	$36
09598 224D                        36            .byte	$36
09599 224E                        36            .byte	$36
09600 224F                        36            .byte	$36
09601                                           ! 1158  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09602 2250                        36            .byte	$36
09603 2251                        36            .byte	$36
09604 2252                        36            .byte	$36
09605 2253                        36            .byte	$36
09606 2254                        36            .byte	$36
09607 2255                        37            .byte	$37
09608 2256                        30            .byte	$30
09609 2257                        37            .byte	$37
09610 2258                        36            .byte	$36
09611 2259                        36            .byte	$36
09612 225A                        36            .byte	$36
09613 225B                        36            .byte	$36
09614 225C                        36            .byte	$36
09615 225D                        36            .byte	$36
09616                                           ! 1159  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09617 225E                        00            .byte	0
09618 225F                        00            .byte	0
09619 2260                        00            .byte	0
09620 2261                        00            .byte	0
09621 2262                        00            .byte	0
09622 2263                        FF            .byte	$FF
09623 2264                        00            .byte	0
09624 2265                        FF            .byte	$FF
09625 2266                        00            .byte	0
09626 2267                        00            .byte	0
09627 2268                        00            .byte	0
09628 2269                        00            .byte	0
09629 226A                        00            .byte	0
09630 226B                        00            .byte	0
09631                                           ! 1160  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09632 226C                        36            .byte	$36
09633 226D                        36            .byte	$36
09634 226E                        36            .byte	$36
09635 226F                        36            .byte	$36
09636 2270                        36            .byte	$36
09637 2271                        F7            .byte	$F7
09638 2272                        00            .byte	0
09639 2273                        F7            .byte	$F7
09640 2274                        36            .byte	$36
09641 2275                        36            .byte	$36
09642 2276                        36            .byte	$36
09643 2277                        36            .byte	$36
09644 2278                        36            .byte	$36
09645 2279                        36            .byte	$36
09646                                           ! 1161  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09647 227A                        18            .byte	$18
09648 227B                        18            .byte	$18
09649 227C                        18            .byte	$18
09650 227D                        18            .byte	$18
09651 227E                        18            .byte	$18
09652 227F                        FF            .byte	$FF
09653 2280                        00            .byte	0
09654 2281                        FF            .byte	$FF
09655 2282                        00            .byte	0
09656 2283                        00            .byte	0
09657 2284                        00            .byte	0
09658 2285                        00            .byte	0
09659 2286                        00            .byte	0
09660 2287                        00            .byte	0
09661                                           ! 1162  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09662 2288                        36            .byte	$36
09663 2289                        36            .byte	$36
09664 228A                        36            .byte	$36
09665 228B                        36            .byte	$36
09666 228C                        36            .byte	$36
09667 228D                        36            .byte	$36
09668 228E                        36            .byte	$36
09669 228F                        FF            .byte	$FF
09670 2290                        00            .byte	0
09671 2291                        00            .byte	0
09672 2292                        00            .byte	0
09673 2293                        00            .byte	0
09674 2294                        00            .byte	0
09675 2295                        00            .byte	0
09676                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09677 2296                        00            .byte	0
09678 2297                        00            .byte	0
09679 2298                        00            .byte	0
09680 2299                        00            .byte	0
09681 229A                        00            .byte	0
09682 229B                        FF            .byte	$FF
09683 229C                        00            .byte	0
09684 229D                        FF            .byte	$FF
09685 229E                        18            .byte	$18
09686 229F                        18            .byte	$18
09687 22A0                        18            .byte	$18
09688 22A1                        18            .byte	$18
09689 22A2                        18            .byte	$18
09690 22A3                        18            .byte	$18
09691                                           ! 1164  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09692 22A4                        00            .byte	0
09693 22A5                        00            .byte	0
09694 22A6                        00            .byte	0
09695 22A7                        00            .byte	0
09696 22A8                        00            .byte	0
09697 22A9                        00            .byte	0
09698 22AA                        00            .byte	0
09699 22AB                        FF            .byte	$FF
09700 22AC                        36            .byte	$36
09701 22AD                        36            .byte	$36
09702 22AE                        36            .byte	$36
09703 22AF                        36            .byte	$36
09704 22B0                        36            .byte	$36
09705 22B1                        36            .byte	$36
09706                                           ! 1165  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09707 22B2                        36            .byte	$36
09708 22B3                        36            .byte	$36
09709 22B4                        36            .byte	$36
09710 22B5                        36            .byte	$36
09711 22B6                        36            .byte	$36
09712 22B7                        36            .byte	$36
09713 22B8                        36            .byte	$36
09714 22B9                        3F            .byte	$3F
09715 22BA                        00            .byte	0
09716 22BB                        00            .byte	0
09717 22BC                        00            .byte	0
09718 22BD                        00            .byte	0
09719 22BE                        00            .byte	0
09720 22BF                        00            .byte	0
09721                                           ! 1166  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09722 22C0                        18            .byte	$18
09723 22C1                        18            .byte	$18
09724 22C2                        18            .byte	$18
09725 22C3                        18            .byte	$18
09726 22C4                        18            .byte	$18
09727 22C5                        1F            .byte	$1F
09728 22C6                        18            .byte	$18
09729 22C7                        1F            .byte	$1F
09730 22C8                        00            .byte	0
09731 22C9                        00            .byte	0
09732 22CA                        00            .byte	0
09733 22CB                        00            .byte	0
09734 22CC                        00            .byte	0
09735 22CD                        00            .byte	0
09736                                           ! 1167  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09737 22CE                        00            .byte	0
09738 22CF                        00            .byte	0
09739 22D0                        00            .byte	0
09740 22D1                        00            .byte	0
09741 22D2                        00            .byte	0
09742 22D3                        1F            .byte	$1F
09743 22D4                        18            .byte	$18
09744 22D5                        1F            .byte	$1F
09745 22D6                        18            .byte	$18
09746 22D7                        18            .byte	$18
09747 22D8                        18            .byte	$18
09748 22D9                        18            .byte	$18
09749 22DA                        18            .byte	$18
09750 22DB                        18            .byte	$18
09751                                           ! 1168  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09752 22DC                        00            .byte	0
09753 22DD                        00            .byte	0
09754 22DE                        00            .byte	0
09755 22DF                        00            .byte	0
09756 22E0                        00            .byte	0
09757 22E1                        00            .byte	0
09758 22E2                        00            .byte	0
09759 22E3                        3F            .byte	$3F
09760 22E4                        36            .byte	$36
09761 22E5                        36            .byte	$36
09762 22E6                        36            .byte	$36
09763 22E7                        36            .byte	$36
09764 22E8                        36            .byte	$36
09765 22E9                        36            .byte	$36
09766                                           ! 1169  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09767 22EA                        36            .byte	$36
09768 22EB                        36            .byte	$36
09769 22EC                        36            .byte	$36
09770 22ED                        36            .byte	$36
09771 22EE                        36            .byte	$36
09772 22EF                        36            .byte	$36
09773 22F0                        36            .byte	$36
09774 22F1                        FF            .byte	$FF
09775 22F2                        36            .byte	$36
09776 22F3                        36            .byte	$36
09777 22F4                        36            .byte	$36
09778 22F5                        36            .byte	$36
09779 22F6                        36            .byte	$36
09780 22F7                        36            .byte	$36
09781                                           ! 1170  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09782 22F8                        18            .byte	$18
09783 22F9                        18            .byte	$18
09784 22FA                        18            .byte	$18
09785 22FB                        18            .byte	$18
09786 22FC                        18            .byte	$18
09787 22FD                        FF            .byte	$FF
09788 22FE                        18            .byte	$18
09789 22FF                        FF            .byte	$FF
09790 2300                        18            .byte	$18
09791 2301                        18            .byte	$18
09792 2302                        18            .byte	$18
09793 2303                        18            .byte	$18
09794 2304                        18            .byte	$18
09795 2305                        18            .byte	$18
09796                                           ! 1171  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09797 2306                        18            .byte	$18
09798 2307                        18            .byte	$18
09799 2308                        18            .byte	$18
09800 2309                        18            .byte	$18
09801 230A                        18            .byte	$18
09802 230B                        18            .byte	$18
09803 230C                        18            .byte	$18
09804 230D                        F8            .byte	$F8
09805 230E                        00            .byte	0
09806 230F                        00            .byte	0
09807 2310                        00            .byte	0
09808 2311                        00            .byte	0
09809 2312                        00            .byte	0
09810 2313                        00            .byte	0
09811                                           ! 1172  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09812 2314                        00            .byte	0
09813 2315                        00            .byte	0
09814 2316                        00            .byte	0
09815 2317                        00            .byte	0
09816 2318                        00            .byte	0
09817 2319                        00            .byte	0
09818 231A                        00            .byte	0
09819 231B                        1F            .byte	$1F
09820 231C                        18            .byte	$18
09821 231D                        18            .byte	$18
09822 231E                        18            .byte	$18
09823 231F                        18            .byte	$18
09824 2320                        18            .byte	$18
09825 2321                        18            .byte	$18
09826                                           ! 1173  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09827 2322                        FF            .byte	$FF
09828 2323                        FF            .byte	$FF
09829 2324                        FF            .byte	$FF
09830 2325                        FF            .byte	$FF
09831 2326                        FF            .byte	$FF
09832 2327                        FF            .byte	$FF
09833 2328                        FF            .byte	$FF
09834 2329                        FF            .byte	$FF
09835 232A                        FF            .byte	$FF
09836 232B                        FF            .byte	$FF
09837 232C                        FF            .byte	$FF
09838 232D                        FF            .byte	$FF
09839 232E                        FF            .byte	$FF
09840 232F                        FF            .byte	$FF
09841                                           ! 1174  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09842 2330                        00            .byte	0
09843 2331                        00            .byte	0
09844 2332                        00            .byte	0
09845 2333                        00            .byte	0
09846 2334                        00            .byte	0
09847 2335                        00            .byte	0
09848 2336                        00            .byte	0
09849 2337                        FF            .byte	$FF
09850 2338                        FF            .byte	$FF
09851 2339                        FF            .byte	$FF
09852 233A                        FF            .byte	$FF
09853 233B                        FF            .byte	$FF
09854 233C                        FF            .byte	$FF
09855 233D                        FF            .byte	$FF
09856                                           ! 1175  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09857 233E                        F0            .byte	$F0
09858 233F                        F0            .byte	$F0
09859 2340                        F0            .byte	$F0
09860 2341                        F0            .byte	$F0
09861 2342                        F0            .byte	$F0
09862 2343                        F0            .byte	$F0
09863 2344                        F0            .byte	$F0
09864 2345                        F0            .byte	$F0
09865 2346                        F0            .byte	$F0
09866 2347                        F0            .byte	$F0
09867 2348                        F0            .byte	$F0
09868 2349                        F0            .byte	$F0
09869 234A                        F0            .byte	$F0
09870 234B                        F0            .byte	$F0
09871                                           ! 1176  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0
09872 234C                        0F            .byte	$F
09873 234D                        0F            .byte	$F
09874 234E                        0F            .byte	$F
09875 234F                        0F            .byte	$F
09876 2350                        0F            .byte	$F
09877 2351                        0F            .byte	$F
09878 2352                        0F            .byte	$F
09879 2353                        0F            .byte	$F
09880 2354                        0F            .byte	$F
09881 2355                        0F            .byte	$F
09882 2356                        0F            .byte	$F
09883 2357                        0F            .byte	$F
09884                                           ! 1176 x0f, 0x0f,
09885 2358                        0F            .byte	$F
09886 2359                        0F            .byte	$F
09887                                           ! 1177  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09888 235A                        FF            .byte	$FF
09889 235B                        FF            .byte	$FF
09890 235C                        FF            .byte	$FF
09891 235D                        FF            .byte	$FF
09892 235E                        FF            .byte	$FF
09893 235F                        FF            .byte	$FF
09894 2360                        FF            .byte	$FF
09895 2361                        00            .byte	0
09896 2362                        00            .byte	0
09897 2363                        00            .byte	0
09898 2364                        00            .byte	0
09899 2365                        00            .byte	0
09900 2366                        00            .byte	0
09901 2367                        00            .byte	0
09902                                           ! 1178  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09903 2368                        00            .byte	0
09904 2369                        00            .byte	0
09905 236A                        00            .byte	0
09906 236B                        00            .byte	0
09907 236C                        00            .byte	0
09908 236D                        76            .byte	$76
09909 236E                        DC            .byte	$DC
09910 236F                        D8            .byte	$D8
09911 2370                        D8            .byte	$D8
09912 2371                        DC            .byte	$DC
09913 2372                        76            .byte	$76
09914 2373                        00            .byte	0
09915 2374                        00            .byte	0
09916 2375                        00            .byte	0
09917                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09918 2376                        00            .byte	0
09919 2377                        00            .byte	0
09920 2378                        00            .byte	0
09921 2379                        00            .byte	0
09922 237A                        7C            .byte	$7C
09923 237B                        C6            .byte	$C6
09924 237C                        FC            .byte	$FC
09925 237D                        C6            .byte	$C6
09926 237E                        C6            .byte	$C6
09927 237F                        FC            .byte	$FC
09928 2380                        C0            .byte	$C0
09929 2381                        C0            .byte	$C0
09930 2382                        40            .byte	$40
09931 2383                        00            .byte	0
09932                                           ! 1180  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09933 2384                        00            .byte	0
09934 2385                        00            .byte	0
09935 2386                        FE            .byte	$FE
09936 2387                        C6            .byte	$C6
09937 2388                        C6            .byte	$C6
09938 2389                        C0            .byte	$C0
09939 238A                        C0            .byte	$C0
09940 238B                        C0            .byte	$C0
09941 238C                        C0            .byte	$C0
09942 238D                        C0            .byte	$C0
09943 238E                        C0            .byte	$C0
09944 238F                        00            .byte	0
09945 2390                        00            .byte	0
09946 2391                        00            .byte	0
09947                                           ! 1181  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09948 2392                        00            .byte	0
09949 2393                        00            .byte	0
09950 2394                        00            .byte	0
09951 2395                        00            .byte	0
09952 2396                        FE            .byte	$FE
09953 2397                        6C            .byte	$6C
09954 2398                        6C            .byte	$6C
09955 2399                        6C            .byte	$6C
09956 239A                        6C            .byte	$6C
09957 239B                        6C            .byte	$6C
09958 239C                        6C            .byte	$6C
09959 239D                        00            .byte	0
09960 239E                        00            .byte	0
09961 239F                        00            .byte	0
09962                                           ! 1182  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09963 23A0                        00            .byte	0
09964 23A1                        00            .byte	0
09965 23A2                        FE            .byte	$FE
09966 23A3                        C6            .byte	$C6
09967 23A4                        60            .byte	$60
09968 23A5                        30            .byte	$30
09969 23A6                        18            .byte	$18
09970 23A7                        30            .byte	$30
09971 23A8                        60            .byte	$60
09972 23A9                        C6            .byte	$C6
09973 23AA                        FE            .byte	$FE
09974 23AB                        00            .byte	0
09975 23AC                        00            .byte	0
09976 23AD                        00            .byte	0
09977                                           ! 1183  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
09978 23AE                        00            .byte	0
09979 23AF                        00            .byte	0
09980 23B0                        00            .byte	0
09981 23B1                        00            .byte	0
09982 23B2                        00            .byte	0
09983 23B3                        7E            .byte	$7E
09984 23B4                        D8            .byte	$D8
09985 23B5                        D8            .byte	$D8
09986 23B6                        D8            .byte	$D8
09987 23B7                        D8            .byte	$D8
09988 23B8                        70            .byte	$70
09989 23B9                        00            .byte	0
09990 23BA                        00            .byte	0
09991 23BB                        00            .byte	0
09992                                           ! 1184  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
09993 23BC                        00            .byte	0
09994 23BD                        00            .byte	0
09995 23BE                        00            .byte	0
09996 23BF                        00            .byte	0
09997 23C0                        66            .byte	$66
09998 23C1                        66            .byte	$66
09999 23C2                        66            .byte	$66
10000 23C3                        66            .byte	$66
10001 23C4                        7C            .byte	$7C
10002 23C5                        60            .byte	$60
10003 23C6                        60            .byte	$60
10004 23C7                        C0            .byte	$C0
10005 23C8                        00            .byte	0
10006 23C9                        00            .byte	0
10007                                           ! 1185  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10008 23CA                        00            .byte	0
10009 23CB                        00            .byte	0
10010 23CC                        00            .byte	0
10011 23CD                        00            .byte	0
10012 23CE                        76            .byte	$76
10013 23CF                        DC            .byte	$DC
10014 23D0                        18            .byte	$18
10015 23D1                        18            .byte	$18
10016 23D2                        18            .byte	$18
10017 23D3                        18            .byte	$18
10018 23D4                        18            .byte	$18
10019 23D5                        00            .byte	0
10020 23D6                        00            .byte	0
10021 23D7                        00            .byte	0
10022                                           ! 1186  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10023 23D8                        00            .byte	0
10024 23D9                        00            .byte	0
10025 23DA                        7E            .byte	$7E
10026 23DB                        18            .byte	$18
10027 23DC                        3C            .byte	$3C
10028 23DD                        66            .byte	$66
10029 23DE                        66            .byte	$66
10030 23DF                        66            .byte	$66
10031 23E0                        3C            .byte	$3C
10032 23E1                        18            .byte	$18
10033 23E2                        7E            .byte	$7E
10034 23E3                        00            .byte	0
10035 23E4                        00            .byte	0
10036 23E5                        00            .byte	0
10037                                           ! 1187  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10038 23E6                        00            .byte	0
10039 23E7                        00            .byte	0
10040 23E8                        38            .byte	$38
10041 23E9                        6C            .byte	$6C
10042 23EA                        C6            .byte	$C6
10043 23EB                        C6            .byte	$C6
10044 23EC                        FE            .byte	$FE
10045 23ED                        C6            .byte	$C6
10046 23EE                        C6            .byte	$C6
10047 23EF                        6C            .byte	$6C
10048 23F0                        38            .byte	$38
10049 23F1                        00            .byte	0
10050 23F2                        00            .byte	0
10051 23F3                        00            .byte	0
10052                                           ! 1188  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10053 23F4                        00            .byte	0
10054 23F5                        00            .byte	0
10055 23F6                        38            .byte	$38
10056 23F7                        6C            .byte	$6C
10057 23F8                        C6            .byte	$C6
10058 23F9                        C6            .byte	$C6
10059 23FA                        C6            .byte	$C6
10060 23FB                        6C            .byte	$6C
10061 23FC                        6C            .byte	$6C
10062 23FD                        6C            .byte	$6C
10063 23FE                        EE            .byte	$EE
10064 23FF                        00            .byte	0
10065 2400                        00            .byte	0
10066 2401                        00            .byte	0
10067                                           ! 1189  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10068 2402                        00            .byte	0
10069 2403                        00            .byte	0
10070 2404                        1E            .byte	$1E
10071 2405                        30            .byte	$30
10072 2406                        18            .byte	$18
10073 2407                        0C            .byte	$C
10074 2408                        3E            .byte	$3E
10075 2409                        66            .byte	$66
10076 240A                        66            .byte	$66
10077 240B                        66            .byte	$66
10078 240C                        3C            .byte	$3C
10079 240D                        00            .byte	0
10080 240E                        00            .byte	0
10081 240F                        00            .byte	0
10082                                           ! 1190  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10083 2410                        00            .byte	0
10084 2411                        00            .byte	0
10085 2412                        00            .byte	0
10086 2413                        00            .byte	0
10087 2414                        00            .byte	0
10088 2415                        7E            .byte	$7E
10089 2416                        DB            .byte	$DB
10090 2417                        DB            .byte	$DB
10091 2418                        7E            .byte	$7E
10092 2419                        00            .byte	0
10093 241A                        00            .byte	0
10094 241B                        00            .byte	0
10095 241C                        00            .byte	0
10096 241D                        00            .byte	0
10097                                           ! 1191  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10098 241E                        00            .byte	0
10099 241F                        00            .byte	0
10100 2420                        03            .byte	3
10101 2421                        06            .byte	6
10102 2422                        7E            .byte	$7E
10103 2423                        DB            .byte	$DB
10104 2424                        DB            .byte	$DB
10105 2425                        F3            .byte	$F3
10106 2426                        7E            .byte	$7E
10107 2427                        60            .byte	$60
10108 2428                        C0            .byte	$C0
10109 2429                        00            .byte	0
10110 242A                        00            .byte	0
10111 242B                        00            .byte	0
10112                                           ! 1192  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10113 242C                        00            .byte	0
10114 242D                        00            .byte	0
10115 242E                        1C            .byte	$1C
10116 242F                        30            .byte	$30
10117 2430                        60            .byte	$60
10118 2431                        60            .byte	$60
10119 2432                        7C            .byte	$7C
10120 2433                        60            .byte	$60
10121 2434                        60            .byte	$60
10122 2435                        30            .byte	$30
10123 2436                        1C            .byte	$1C
10124 2437                        00            .byte	0
10125 2438                        00            .byte	0
10126 2439                        00            .byte	0
10127                                           ! 1193  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10128 243A                        00            .byte	0
10129 243B                        00            .byte	0
10130 243C                        00            .byte	0
10131 243D                        7C            .byte	$7C
10132 243E                        C6            .byte	$C6
10133 243F                        C6            .byte	$C6
10134 2440                        C6            .byte	$C6
10135 2441                        C6            .byte	$C6
10136 2442                        C6            .byte	$C6
10137 2443                        C6            .byte	$C6
10138 2444                        C6            .byte	$C6
10139 2445                        00            .byte	0
10140 2446                        00            .byte	0
10141 2447                        00            .byte	0
10142                                           ! 1194  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10143 2448                        00            .byte	0
10144 2449                        00            .byte	0
10145 244A                        00            .byte	0
10146 244B                        FE            .byte	$FE
10147 244C                        00            .byte	0
10148 244D                        00            .byte	0
10149 244E                        FE            .byte	$FE
10150 244F                        00            .byte	0
10151 2450                        00            .byte	0
10152 2451                        FE            .byte	$FE
10153 2452                        00            .byte	0
10154 2453                        00            .byte	0
10155 2454                        00            .byte	0
10156 2455                        00            .byte	0
10157                                           ! 1195  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10158 2456                        00            .byte	0
10159 2457                        00            .byte	0
10160 2458                        00            .byte	0
10161 2459                        18            .byte	$18
10162 245A                        18            .byte	$18
10163 245B                        7E            .byte	$7E
10164 245C                        18            .byte	$18
10165 245D                        18            .byte	$18
10166 245E                        00            .byte	0
10167 245F                        00            .byte	0
10168 2460                        FF            .byte	$FF
10169 2461                        00            .byte	0
10170 2462                        00            .byte	0
10171 2463                        00            .byte	0
10172                                           ! 1196  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10173 2464                        00            .byte	0
10174 2465                        00            .byte	0
10175 2466                        30            .byte	$30
10176 2467                        18            .byte	$18
10177 2468                        0C            .byte	$C
10178 2469                        06            .byte	6
10179 246A                        0C            .byte	$C
10180 246B                        18            .byte	$18
10181 246C                        30            .byte	$30
10182 246D                        00            .byte	0
10183 246E                        7E            .byte	$7E
10184 246F                        00            .byte	0
10185 2470                        00            .byte	0
10186 2471                        00            .byte	0
10187                                           ! 1197  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10188 2472                        00            .byte	0
10189 2473                        00            .byte	0
10190 2474                        0C            .byte	$C
10191 2475                        18            .byte	$18
10192 2476                        30            .byte	$30
10193 2477                        60            .byte	$60
10194 2478                        30            .byte	$30
10195 2479                        18            .byte	$18
10196 247A                        0C            .byte	$C
10197 247B                        00            .byte	0
10198 247C                        7E            .byte	$7E
10199 247D                        00            .byte	0
10200 247E                        00            .byte	0
10201 247F                        00            .byte	0
10202                                           ! 1198  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10203 2480                        00            .byte	0
10204 2481                        00            .byte	0
10205 2482                        0E            .byte	$E
10206 2483                        1B            .byte	$1B
10207 2484                        1B            .byte	$1B
10208 2485                        18            .byte	$18
10209 2486                        18            .byte	$18
10210 2487                        18            .byte	$18
10211 2488                        18            .byte	$18
10212 2489                        18            .byte	$18
10213 248A                        18            .byte	$18
10214 248B                        18            .byte	$18
10215 248C                        18            .byte	$18
10216 248D                        18            .byte	$18
10217                                           ! 1199  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10218 248E                        18            .byte	$18
10219 248F                        18            .byte	$18
10220 2490                        18            .byte	$18
10221 2491                        18            .byte	$18
10222 2492                        18            .byte	$18
10223 2493                        18            .byte	$18
10224 2494                        18            .byte	$18
10225 2495                        18            .byte	$18
10226 2496                        D8            .byte	$D8
10227 2497                        D8            .byte	$D8
10228 2498                        70            .byte	$70
10229 2499                        00            .byte	0
10230 249A                        00            .byte	0
10231 249B                        00            .byte	0
10232                                           ! 1200  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x0
10233 249C                        00            .byte	0
10234 249D                        00            .byte	0
10235 249E                        00            .byte	0
10236 249F                        18            .byte	$18
10237 24A0                        18            .byte	$18
10238 24A1                        00            .byte	0
10239 24A2                        7E            .byte	$7E
10240 24A3                        00            .byte	0
10241 24A4                        18            .byte	$18
10242 24A5                        18            .byte	$18
10243 24A6                        00            .byte	0
10244 24A7                        00            .byte	0
10245 24A8                        00            .byte	0
10246                                           ! 1200 0,
10247 24A9                        00            .byte	0
10248                                           ! 1201  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10249 24AA                        00            .byte	0
10250 24AB                        00            .byte	0
10251 24AC                        00            .byte	0
10252 24AD                        00            .byte	0
10253 24AE                        76            .byte	$76
10254 24AF                        DC            .byte	$DC
10255 24B0                        00            .byte	0
10256 24B1                        76            .byte	$76
10257 24B2                        DC            .byte	$DC
10258 24B3                        00            .byte	0
10259 24B4                        00            .byte	0
10260 24B5                        00            .byte	0
10261 24B6                        00            .byte	0
10262 24B7                        00            .byte	0
10263                                           ! 1202  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10264 24B8                        00            .byte	0
10265 24B9                        38            .byte	$38
10266 24BA                        6C            .byte	$6C
10267 24BB                        6C            .byte	$6C
10268 24BC                        38            .byte	$38
10269 24BD                        00            .byte	0
10270 24BE                        00            .byte	0
10271 24BF                        00            .byte	0
10272 24C0                        00            .byte	0
10273 24C1                        00            .byte	0
10274 24C2                        00            .byte	0
10275 24C3                        00            .byte	0
10276 24C4                        00            .byte	0
10277 24C5                        00            .byte	0
10278                                           ! 1203  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10279 24C6                        00            .byte	0
10280 24C7                        00            .byte	0
10281 24C8                        00            .byte	0
10282 24C9                        00            .byte	0
10283 24CA                        00            .byte	0
10284 24CB                        00            .byte	0
10285 24CC                        18            .byte	$18
10286 24CD                        18            .byte	$18
10287 24CE                        00            .byte	0
10288 24CF                        00            .byte	0
10289 24D0                        00            .byte	0
10290 24D1                        00            .byte	0
10291 24D2                        00            .byte	0
10292 24D3                        00            .byte	0
10293                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10294 24D4                        00            .byte	0
10295 24D5                        00            .byte	0
10296 24D6                        00            .byte	0
10297 24D7                        00            .byte	0
10298 24D8                        00            .byte	0
10299 24D9                        00            .byte	0
10300 24DA                        00            .byte	0
10301 24DB                        18            .byte	$18
10302 24DC                        00            .byte	0
10303 24DD                        00            .byte	0
10304 24DE                        00            .byte	0
10305 24DF                        00            .byte	0
10306 24E0                        00            .byte	0
10307 24E1                        00            .byte	0
10308                                           ! 1205  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10309 24E2                        00            .byte	0
10310 24E3                        0F            .byte	$F
10311 24E4                        0C            .byte	$C
10312 24E5                        0C            .byte	$C
10313 24E6                        0C            .byte	$C
10314 24E7                        0C            .byte	$C
10315 24E8                        0C            .byte	$C
10316 24E9                        EC            .byte	$EC
10317 24EA                        6C            .byte	$6C
10318 24EB                        3C            .byte	$3C
10319 24EC                        1C            .byte	$1C
10320 24ED                        00            .byte	0
10321 24EE                        00            .byte	0
10322 24EF                        00            .byte	0
10323                                           ! 1206  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10324 24F0                        00            .byte	0
10325 24F1                        D8            .byte	$D8
10326 24F2                        6C            .byte	$6C
10327 24F3                        6C            .byte	$6C
10328 24F4                        6C            .byte	$6C
10329 24F5                        6C            .byte	$6C
10330 24F6                        6C            .byte	$6C
10331 24F7                        00            .byte	0
10332 24F8                        00            .byte	0
10333 24F9                        00            .byte	0
10334 24FA                        00            .byte	0
10335 24FB                        00            .byte	0
10336 24FC                        00            .byte	0
10337 24FD                        00            .byte	0
10338                                           ! 1207  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10339 24FE                        00            .byte	0
10340 24FF                        70            .byte	$70
10341 2500                        D8            .byte	$D8
10342 2501                        30            .byte	$30
10343 2502                        60            .byte	$60
10344 2503                        C8            .byte	$C8
10345 2504                        F8            .byte	$F8
10346 2505                        00            .byte	0
10347 2506                        00            .byte	0
10348 2507                        00            .byte	0
10349 2508                        00            .byte	0
10350 2509                        00            .byte	0
10351 250A                        00            .byte	0
10352 250B                        00            .byte	0
10353                                           ! 1208  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10354 250C                        00            .byte	0
10355 250D                        00            .byte	0
10356 250E                        00            .byte	0
10357 250F                        00            .byte	0
10358 2510                        7C            .byte	$7C
10359 2511                        7C            .byte	$7C
10360 2512                        7C            .byte	$7C
10361 2513                        7C            .byte	$7C
10362 2514                        7C            .byte	$7C
10363 2515                        7C            .byte	$7C
10364 2516                        00            .byte	0
10365 2517                        00            .byte	0
10366 2518                        00            .byte	0
10367 2519                        00            .byte	0
10368                                           ! 1209  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10369 251A                        00            .byte	0
10370 251B                        00            .byte	0
10371 251C                        00            .byte	0
10372 251D                        00            .byte	0
10373 251E                        00            .byte	0
10374 251F                        00            .byte	0
10375 2520                        00            .byte	0
10376 2521                        00            .byte	0
10377 2522                        00            .byte	0
10378 2523                        00            .byte	0
10379 2524                        00            .byte	0
10380 2525                        00            .byte	0
10381 2526                        00            .byte	0
10382                                           ! 1210 };
10383 2527                        00            .byte	0
10384                                           !BCC_EOS
10385                                           ! 1211 static Bit8u vgafont16[256*16]=
10386                                           ! 1212 {
10387                       00002528            _vgafont16:
10388                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10389 2528                        00            .byte	0
10390 2529                        00            .byte	0
10391 252A                        00            .byte	0
10392 252B                        00            .byte	0
10393 252C                        00            .byte	0
10394 252D                        00            .byte	0
10395 252E                        00            .byte	0
10396 252F                        00            .byte	0
10397 2530                        00            .byte	0
10398 2531                        00            .byte	0
10399 2532                        00            .byte	0
10400 2533                        00            .byte	0
10401 2534                        00            .byte	0
10402 2535                        00            .byte	0
10403 2536                        00            .byte	0
10404 2537                        00            .byte	0
10405                                           ! 1214  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10406 2538                        00            .byte	0
10407 2539                        00            .byte	0
10408 253A                        7E            .byte	$7E
10409 253B                        81            .byte	$81
10410 253C                        A5            .byte	$A5
10411 253D                        81            .byte	$81
10412 253E                        81            .byte	$81
10413 253F                        BD            .byte	$BD
10414 2540                        99            .byte	$99
10415 2541                        81            .byte	$81
10416 2542                        81            .byte	$81
10417 2543                        7E            .byte	$7E
10418 2544                        00            .byte	0
10419 2545                        00            .byte	0
10420 2546                        00            .byte	0
10421 2547                        00            .byte	0
10422                                           ! 1215  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10423 2548                        00            .byte	0
10424 2549                        00            .byte	0
10425 254A                        7E            .byte	$7E
10426 254B                        FF            .byte	$FF
10427 254C                        DB            .byte	$DB
10428 254D                        FF            .byte	$FF
10429 254E                        FF            .byte	$FF
10430 254F                        C3            .byte	$C3
10431 2550                        E7            .byte	$E7
10432 2551                        FF            .byte	$FF
10433 2552                        FF            .byte	$FF
10434 2553                        7E            .byte	$7E
10435 2554                        00            .byte	0
10436 2555                        00            .byte	0
10437 2556                        00            .byte	0
10438 2557                        00            .byte	0
10439                                           ! 1216  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10440 2558                        00            .byte	0
10441 2559                        00            .byte	0
10442 255A                        00            .byte	0
10443 255B                        00            .byte	0
10444 255C                        6C            .byte	$6C
10445 255D                        FE            .byte	$FE
10446 255E                        FE            .byte	$FE
10447 255F                        FE            .byte	$FE
10448 2560                        FE            .byte	$FE
10449 2561                        7C            .byte	$7C
10450 2562                        38            .byte	$38
10451 2563                        10            .byte	$10
10452 2564                        00            .byte	0
10453 2565                        00            .byte	0
10454 2566                        00            .byte	0
10455 2567                        00            .byte	0
10456                                           ! 1217  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10457 2568                        00            .byte	0
10458 2569                        00            .byte	0
10459 256A                        00            .byte	0
10460 256B                        00            .byte	0
10461 256C                        10            .byte	$10
10462 256D                        38            .byte	$38
10463 256E                        7C            .byte	$7C
10464 256F                        FE            .byte	$FE
10465 2570                        7C            .byte	$7C
10466 2571                        38            .byte	$38
10467 2572                        10            .byte	$10
10468 2573                        00            .byte	0
10469 2574                        00            .byte	0
10470 2575                        00            .byte	0
10471 2576                        00            .byte	0
10472 2577                        00            .byte	0
10473                                           ! 1218  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10474 2578                        00            .byte	0
10475 2579                        00            .byte	0
10476 257A                        00            .byte	0
10477 257B                        18            .byte	$18
10478 257C                        3C            .byte	$3C
10479 257D                        3C            .byte	$3C
10480 257E                        E7            .byte	$E7
10481 257F                        E7            .byte	$E7
10482 2580                        E7            .byte	$E7
10483 2581                        18            .byte	$18
10484 2582                        18            .byte	$18
10485 2583                        3C            .byte	$3C
10486 2584                        00            .byte	0
10487 2585                        00            .byte	0
10488 2586                        00            .byte	0
10489 2587                        00            .byte	0
10490                                           ! 1219  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10491 2588                        00            .byte	0
10492 2589                        00            .byte	0
10493 258A                        00            .byte	0
10494 258B                        18            .byte	$18
10495 258C                        3C            .byte	$3C
10496 258D                        7E            .byte	$7E
10497 258E                        FF            .byte	$FF
10498 258F                        FF            .byte	$FF
10499 2590                        7E            .byte	$7E
10500 2591                        18            .byte	$18
10501 2592                        18            .byte	$18
10502 2593                        3C            .byte	$3C
10503 2594                        00            .byte	0
10504 2595                        00            .byte	0
10505 2596                        00            .byte	0
10506 2597                        00            .byte	0
10507                                           ! 1220  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10508 2598                        00            .byte	0
10509 2599                        00            .byte	0
10510 259A                        00            .byte	0
10511 259B                        00            .byte	0
10512 259C                        00            .byte	0
10513 259D                        00            .byte	0
10514 259E                        18            .byte	$18
10515 259F                        3C            .byte	$3C
10516 25A0                        3C            .byte	$3C
10517 25A1                        18            .byte	$18
10518 25A2                        00            .byte	0
10519 25A3                        00            .byte	0
10520 25A4                        00            .byte	0
10521 25A5                        00            .byte	0
10522 25A6                        00            .byte	0
10523 25A7                        00            .byte	0
10524                                           ! 1221  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10525 25A8                        FF            .byte	$FF
10526 25A9                        FF            .byte	$FF
10527 25AA                        FF            .byte	$FF
10528 25AB                        FF            .byte	$FF
10529 25AC                        FF            .byte	$FF
10530 25AD                        FF            .byte	$FF
10531 25AE                        E7            .byte	$E7
10532 25AF                        C3            .byte	$C3
10533 25B0                        C3            .byte	$C3
10534 25B1                        E7            .byte	$E7
10535 25B2                        FF            .byte	$FF
10536 25B3                        FF            .byte	$FF
10537 25B4                        FF            .byte	$FF
10538 25B5                        FF            .byte	$FF
10539 25B6                        FF            .byte	$FF
10540 25B7                        FF            .byte	$FF
10541                                           ! 1222  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10542 25B8                        00            .byte	0
10543 25B9                        00            .byte	0
10544 25BA                        00            .byte	0
10545 25BB                        00            .byte	0
10546 25BC                        00            .byte	0
10547 25BD                        3C            .byte	$3C
10548 25BE                        66            .byte	$66
10549 25BF                        42            .byte	$42
10550 25C0                        42            .byte	$42
10551 25C1                        66            .byte	$66
10552 25C2                        3C            .byte	$3C
10553 25C3                        00            .byte	0
10554 25C4                        00            .byte	0
10555 25C5                        00            .byte	0
10556 25C6                        00            .byte	0
10557 25C7                        00            .byte	0
10558                                           ! 1223  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10559 25C8                        FF            .byte	$FF
10560 25C9                        FF            .byte	$FF
10561 25CA                        FF            .byte	$FF
10562 25CB                        FF            .byte	$FF
10563 25CC                        FF            .byte	$FF
10564 25CD                        C3            .byte	$C3
10565 25CE                        99            .byte	$99
10566 25CF                        BD            .byte	$BD
10567 25D0                        BD            .byte	$BD
10568 25D1                        99            .byte	$99
10569 25D2                        C3            .byte	$C3
10570 25D3                        FF            .byte	$FF
10571 25D4                        FF            .byte	$FF
10572 25D5                        FF            .byte	$FF
10573 25D6                        FF            .byte	$FF
10574 25D7                        FF            .byte	$FF
10575                                           ! 1224  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10576 25D8                        00            .byte	0
10577 25D9                        00            .byte	0
10578 25DA                        1E            .byte	$1E
10579 25DB                        0E            .byte	$E
10580 25DC                        1A            .byte	$1A
10581 25DD                        32            .byte	$32
10582 25DE                        78            .byte	$78
10583 25DF                        CC            .byte	$CC
10584 25E0                        CC            .byte	$CC
10585 25E1                        CC            .byte	$CC
10586 25E2                        CC            .byte	$CC
10587 25E3                        78            .byte	$78
10588 25E4                        00            .byte	0
10589 25E5                        00            .byte	0
10590 25E6                        00            .byte	0
10591 25E7                        00            .byte	0
10592                                           ! 1225  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0
10593 25E8                        00            .byte	0
10594 25E9                        00            .byte	0
10595 25EA                        3C            .byte	$3C
10596 25EB                        66            .byte	$66
10597 25EC                        66            .byte	$66
10598 25ED                        66            .byte	$66
10599 25EE                        66            .byte	$66
10600 25EF                        3C            .byte	$3C
10601 25F0                        18            .byte	$18
10602 25F1                        7E            .byte	$7E
10603 25F2                        18            .byte	$18
10604 25F3                        18            .byte	$18
10605 25F4                        00            .byte	0
10606                                           ! 1225 x00, 0x00, 0x00,
10607 25F5                        00            .byte	0
10608 25F6                        00            .byte	0
10609 25F7                        00            .byte	0
10610                                           ! 1226  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10611 25F8                        00            .byte	0
10612 25F9                        00            .byte	0
10613 25FA                        3F            .byte	$3F
10614 25FB                        33            .byte	$33
10615 25FC                        3F            .byte	$3F
10616 25FD                        30            .byte	$30
10617 25FE                        30            .byte	$30
10618 25FF                        30            .byte	$30
10619 2600                        30            .byte	$30
10620 2601                        70            .byte	$70
10621 2602                        F0            .byte	$F0
10622 2603                        E0            .byte	$E0
10623 2604                        00            .byte	0
10624 2605                        00            .byte	0
10625 2606                        00            .byte	0
10626 2607                        00            .byte	0
10627                                           ! 1227  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10628 2608                        00            .byte	0
10629 2609                        00            .byte	0
10630 260A                        7F            .byte	$7F
10631 260B                        63            .byte	$63
10632 260C                        7F            .byte	$7F
10633 260D                        63            .byte	$63
10634 260E                        63            .byte	$63
10635 260F                        63            .byte	$63
10636 2610                        63            .byte	$63
10637 2611                        67            .byte	$67
10638 2612                        E7            .byte	$E7
10639 2613                        E6            .byte	$E6
10640 2614                        C0            .byte	$C0
10641 2615                        00            .byte	0
10642 2616                        00            .byte	0
10643 2617                        00            .byte	0
10644                                           ! 1228  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10645 2618                        00            .byte	0
10646 2619                        00            .byte	0
10647 261A                        00            .byte	0
10648 261B                        18            .byte	$18
10649 261C                        18            .byte	$18
10650 261D                        DB            .byte	$DB
10651 261E                        3C            .byte	$3C
10652 261F                        E7            .byte	$E7
10653 2620                        3C            .byte	$3C
10654 2621                        DB            .byte	$DB
10655 2622                        18            .byte	$18
10656 2623                        18            .byte	$18
10657 2624                        00            .byte	0
10658 2625                        00            .byte	0
10659 2626                        00            .byte	0
10660 2627                        00            .byte	0
10661                                           ! 1229  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10662 2628                        00            .byte	0
10663 2629                        80            .byte	$80
10664 262A                        C0            .byte	$C0
10665 262B                        E0            .byte	$E0
10666 262C                        F0            .byte	$F0
10667 262D                        F8            .byte	$F8
10668 262E                        FE            .byte	$FE
10669 262F                        F8            .byte	$F8
10670 2630                        F0            .byte	$F0
10671 2631                        E0            .byte	$E0
10672 2632                        C0            .byte	$C0
10673 2633                        80            .byte	$80
10674 2634                        00            .byte	0
10675 2635                        00            .byte	0
10676 2636                        00            .byte	0
10677 2637                        00            .byte	0
10678                                           ! 1230  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10679 2638                        00            .byte	0
10680 2639                        02            .byte	2
10681 263A                        06            .byte	6
10682 263B                        0E            .byte	$E
10683 263C                        1E            .byte	$1E
10684 263D                        3E            .byte	$3E
10685 263E                        FE            .byte	$FE
10686 263F                        3E            .byte	$3E
10687 2640                        1E            .byte	$1E
10688 2641                        0E            .byte	$E
10689 2642                        06            .byte	6
10690 2643                        02            .byte	2
10691 2644                        00            .byte	0
10692 2645                        00            .byte	0
10693 2646                        00            .byte	0
10694 2647                        00            .byte	0
10695                                           ! 1231  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10696 2648                        00            .byte	0
10697 2649                        00            .byte	0
10698 264A                        18            .byte	$18
10699 264B                        3C            .byte	$3C
10700 264C                        7E            .byte	$7E
10701 264D                        18            .byte	$18
10702 264E                        18            .byte	$18
10703 264F                        18            .byte	$18
10704 2650                        7E            .byte	$7E
10705 2651                        3C            .byte	$3C
10706 2652                        18            .byte	$18
10707 2653                        00            .byte	0
10708 2654                        00            .byte	0
10709 2655                        00            .byte	0
10710 2656                        00            .byte	0
10711 2657                        00            .byte	0
10712                                           ! 1232  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10713 2658                        00            .byte	0
10714 2659                        00            .byte	0
10715 265A                        66            .byte	$66
10716 265B                        66            .byte	$66
10717 265C                        66            .byte	$66
10718 265D                        66            .byte	$66
10719 265E                        66            .byte	$66
10720 265F                        66            .byte	$66
10721 2660                        66            .byte	$66
10722 2661                        00            .byte	0
10723 2662                        66            .byte	$66
10724 2663                        66            .byte	$66
10725 2664                        00            .byte	0
10726 2665                        00            .byte	0
10727 2666                        00            .byte	0
10728 2667                        00            .byte	0
10729                                           ! 1233  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10730 2668                        00            .byte	0
10731 2669                        00            .byte	0
10732 266A                        7F            .byte	$7F
10733 266B                        DB            .byte	$DB
10734 266C                        DB            .byte	$DB
10735 266D                        DB            .byte	$DB
10736 266E                        7B            .byte	$7B
10737 266F                        1B            .byte	$1B
10738 2670                        1B            .byte	$1B
10739 2671                        1B            .byte	$1B
10740 2672                        1B            .byte	$1B
10741 2673                        1B            .byte	$1B
10742 2674                        00            .byte	0
10743 2675                        00            .byte	0
10744 2676                        00            .byte	0
10745 2677                        00            .byte	0
10746                                           ! 1234  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10747 2678                        00            .byte	0
10748 2679                        7C            .byte	$7C
10749 267A                        C6            .byte	$C6
10750 267B                        60            .byte	$60
10751 267C                        38            .byte	$38
10752 267D                        6C            .byte	$6C
10753 267E                        C6            .byte	$C6
10754 267F                        C6            .byte	$C6
10755 2680                        6C            .byte	$6C
10756 2681                        38            .byte	$38
10757 2682                        0C            .byte	$C
10758 2683                        C6            .byte	$C6
10759 2684                        7C            .byte	$7C
10760 2685                        00            .byte	0
10761 2686                        00            .byte	0
10762 2687                        00            .byte	0
10763                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10764 2688                        00            .byte	0
10765 2689                        00            .byte	0
10766 268A                        00            .byte	0
10767 268B                        00            .byte	0
10768 268C                        00            .byte	0
10769 268D                        00            .byte	0
10770 268E                        00            .byte	0
10771 268F                        00            .byte	0
10772 2690                        FE            .byte	$FE
10773 2691                        FE            .byte	$FE
10774 2692                        FE            .byte	$FE
10775 2693                        FE            .byte	$FE
10776 2694                        00            .byte	0
10777 2695                        00            .byte	0
10778 2696                        00            .byte	0
10779 2697                        00            .byte	0
10780                                           ! 1236  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10781 2698                        00            .byte	0
10782 2699                        00            .byte	0
10783 269A                        18            .byte	$18
10784 269B                        3C            .byte	$3C
10785 269C                        7E            .byte	$7E
10786 269D                        18            .byte	$18
10787 269E                        18            .byte	$18
10788 269F                        18            .byte	$18
10789 26A0                        7E            .byte	$7E
10790 26A1                        3C            .byte	$3C
10791 26A2                        18            .byte	$18
10792 26A3                        7E            .byte	$7E
10793 26A4                        00            .byte	0
10794 26A5                        00            .byte	0
10795 26A6                        00            .byte	0
10796 26A7                        00            .byte	0
10797                                           ! 1237  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10798 26A8                        00            .byte	0
10799 26A9                        00            .byte	0
10800 26AA                        18            .byte	$18
10801 26AB                        3C            .byte	$3C
10802 26AC                        7E            .byte	$7E
10803 26AD                        18            .byte	$18
10804 26AE                        18            .byte	$18
10805 26AF                        18            .byte	$18
10806 26B0                        18            .byte	$18
10807 26B1                        18            .byte	$18
10808 26B2                        18            .byte	$18
10809 26B3                        18            .byte	$18
10810 26B4                        00            .byte	0
10811 26B5                        00            .byte	0
10812 26B6                        00            .byte	0
10813 26B7                        00            .byte	0
10814                                           ! 1238  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10815 26B8                        00            .byte	0
10816 26B9                        00            .byte	0
10817 26BA                        18            .byte	$18
10818 26BB                        18            .byte	$18
10819 26BC                        18            .byte	$18
10820 26BD                        18            .byte	$18
10821 26BE                        18            .byte	$18
10822 26BF                        18            .byte	$18
10823 26C0                        18            .byte	$18
10824 26C1                        7E            .byte	$7E
10825 26C2                        3C            .byte	$3C
10826 26C3                        18            .byte	$18
10827 26C4                        00            .byte	0
10828 26C5                        00            .byte	0
10829 26C6                        00            .byte	0
10830 26C7                        00            .byte	0
10831                                           ! 1239  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10832 26C8                        00            .byte	0
10833 26C9                        00            .byte	0
10834 26CA                        00            .byte	0
10835 26CB                        00            .byte	0
10836 26CC                        00            .byte	0
10837 26CD                        18            .byte	$18
10838 26CE                        0C            .byte	$C
10839 26CF                        FE            .byte	$FE
10840 26D0                        0C            .byte	$C
10841 26D1                        18            .byte	$18
10842 26D2                        00            .byte	0
10843 26D3                        00            .byte	0
10844 26D4                        00            .byte	0
10845 26D5                        00            .byte	0
10846 26D6                        00            .byte	0
10847 26D7                        00            .byte	0
10848                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10849 26D8                        00            .byte	0
10850 26D9                        00            .byte	0
10851 26DA                        00            .byte	0
10852 26DB                        00            .byte	0
10853 26DC                        00            .byte	0
10854 26DD                        30            .byte	$30
10855 26DE                        60            .byte	$60
10856 26DF                        FE            .byte	$FE
10857 26E0                        60            .byte	$60
10858 26E1                        30            .byte	$30
10859 26E2                        00            .byte	0
10860 26E3                        00            .byte	0
10861 26E4                        00            .byte	0
10862 26E5                        00            .byte	0
10863 26E6                        00            .byte	0
10864 26E7                        00            .byte	0
10865                                           ! 1241  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10866 26E8                        00            .byte	0
10867 26E9                        00            .byte	0
10868 26EA                        00            .byte	0
10869 26EB                        00            .byte	0
10870 26EC                        00            .byte	0
10871 26ED                        00            .byte	0
10872 26EE                        C0            .byte	$C0
10873 26EF                        C0            .byte	$C0
10874 26F0                        C0            .byte	$C0
10875 26F1                        FE            .byte	$FE
10876 26F2                        00            .byte	0
10877 26F3                        00            .byte	0
10878 26F4                        00            .byte	0
10879 26F5                        00            .byte	0
10880 26F6                        00            .byte	0
10881 26F7                        00            .byte	0
10882                                           ! 1242  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10883 26F8                        00            .byte	0
10884 26F9                        00            .byte	0
10885 26FA                        00            .byte	0
10886 26FB                        00            .byte	0
10887 26FC                        00            .byte	0
10888 26FD                        24            .byte	$24
10889 26FE                        66            .byte	$66
10890 26FF                        FF            .byte	$FF
10891 2700                        66            .byte	$66
10892 2701                        24            .byte	$24
10893 2702                        00            .byte	0
10894 2703                        00            .byte	0
10895 2704                        00            .byte	0
10896 2705                        00            .byte	0
10897 2706                        00            .byte	0
10898 2707                        00            .byte	0
10899                                           ! 1243  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10900 2708                        00            .byte	0
10901 2709                        00            .byte	0
10902 270A                        00            .byte	0
10903 270B                        00            .byte	0
10904 270C                        10            .byte	$10
10905 270D                        38            .byte	$38
10906 270E                        38            .byte	$38
10907 270F                        7C            .byte	$7C
10908 2710                        7C            .byte	$7C
10909 2711                        FE            .byte	$FE
10910 2712                        FE            .byte	$FE
10911 2713                        00            .byte	0
10912 2714                        00            .byte	0
10913 2715                        00            .byte	0
10914 2716                        00            .byte	0
10915 2717                        00            .byte	0
10916                                           ! 1244  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10917 2718                        00            .byte	0
10918 2719                        00            .byte	0
10919 271A                        00            .byte	0
10920 271B                        00            .byte	0
10921 271C                        FE            .byte	$FE
10922 271D                        FE            .byte	$FE
10923 271E                        7C            .byte	$7C
10924 271F                        7C            .byte	$7C
10925 2720                        38            .byte	$38
10926 2721                        38            .byte	$38
10927 2722                        10            .byte	$10
10928 2723                        00            .byte	0
10929 2724                        00            .byte	0
10930 2725                        00            .byte	0
10931 2726                        00            .byte	0
10932 2727                        00            .byte	0
10933                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10934 2728                        00            .byte	0
10935 2729                        00            .byte	0
10936 272A                        00            .byte	0
10937 272B                        00            .byte	0
10938 272C                        00            .byte	0
10939 272D                        00            .byte	0
10940 272E                        00            .byte	0
10941 272F                        00            .byte	0
10942 2730                        00            .byte	0
10943 2731                        00            .byte	0
10944 2732                        00            .byte	0
10945 2733                        00            .byte	0
10946 2734                        00            .byte	0
10947 2735                        00            .byte	0
10948 2736                        00            .byte	0
10949 2737                        00            .byte	0
10950                                           ! 1246  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 
10951 2738                        00            .byte	0
10952 2739                        00            .byte	0
10953 273A                        18            .byte	$18
10954 273B                        3C            .byte	$3C
10955 273C                        3C            .byte	$3C
10956 273D                        3C            .byte	$3C
10957 273E                        18            .byte	$18
10958 273F                        18            .byte	$18
10959 2740                        18            .byte	$18
10960 2741                        00            .byte	0
10961 2742                        18            .byte	$18
10962 2743                        18            .byte	$18
10963 2744                        00            .byte	0
10964 2745                        00            .byte	0
10965 2746                        00            .byte	0
10966                                           ! 1246 0x00,
10967 2747                        00            .byte	0
10968                                           ! 1247  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10969 2748                        00            .byte	0
10970 2749                        66            .byte	$66
10971 274A                        66            .byte	$66
10972 274B                        66            .byte	$66
10973 274C                        24            .byte	$24
10974 274D                        00            .byte	0
10975 274E                        00            .byte	0
10976 274F                        00            .byte	0
10977 2750                        00            .byte	0
10978 2751                        00            .byte	0
10979 2752                        00            .byte	0
10980 2753                        00            .byte	0
10981 2754                        00            .byte	0
10982 2755                        00            .byte	0
10983 2756                        00            .byte	0
10984 2757                        00            .byte	0
10985                                           ! 1248  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
10986 2758                        00            .byte	0
10987 2759                        00            .byte	0
10988 275A                        00            .byte	0
10989 275B                        6C            .byte	$6C
10990 275C                        6C            .byte	$6C
10991 275D                        FE            .byte	$FE
10992 275E                        6C            .byte	$6C
10993 275F                        6C            .byte	$6C
10994 2760                        6C            .byte	$6C
10995 2761                        FE            .byte	$FE
10996 2762                        6C            .byte	$6C
10997 2763                        6C            .byte	$6C
10998 2764                        00            .byte	0
10999 2765                        00            .byte	0
11000 2766                        00            .byte	0
11001 2767                        00            .byte	0
11002                                           ! 1249  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11003 2768                        18            .byte	$18
11004 2769                        18            .byte	$18
11005 276A                        7C            .byte	$7C
11006 276B                        C6            .byte	$C6
11007 276C                        C2            .byte	$C2
11008 276D                        C0            .byte	$C0
11009 276E                        7C            .byte	$7C
11010 276F                        06            .byte	6
11011 2770                        06            .byte	6
11012 2771                        86            .byte	$86
11013 2772                        C6            .byte	$C6
11014 2773                        7C            .byte	$7C
11015 2774                        18            .byte	$18
11016 2775                        18            .byte	$18
11017 2776                        00            .byte	0
11018 2777                        00            .byte	0
11019                                           ! 1250  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11020 2778                        00            .byte	0
11021 2779                        00            .byte	0
11022 277A                        00            .byte	0
11023 277B                        00            .byte	0
11024 277C                        C2            .byte	$C2
11025 277D                        C6            .byte	$C6
11026 277E                        0C            .byte	$C
11027 277F                        18            .byte	$18
11028 2780                        30            .byte	$30
11029 2781                        60            .byte	$60
11030 2782                        C6            .byte	$C6
11031 2783                        86            .byte	$86
11032 2784                        00            .byte	0
11033 2785                        00            .byte	0
11034 2786                        00            .byte	0
11035 2787                        00            .byte	0
11036                                           ! 1251  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11037 2788                        00            .byte	0
11038 2789                        00            .byte	0
11039 278A                        38            .byte	$38
11040 278B                        6C            .byte	$6C
11041 278C                        6C            .byte	$6C
11042 278D                        38            .byte	$38
11043 278E                        76            .byte	$76
11044 278F                        DC            .byte	$DC
11045 2790                        CC            .byte	$CC
11046 2791                        CC            .byte	$CC
11047 2792                        CC            .byte	$CC
11048 2793                        76            .byte	$76
11049 2794                        00            .byte	0
11050 2795                        00            .byte	0
11051 2796                        00            .byte	0
11052 2797                        00            .byte	0
11053                                           ! 1252  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11054 2798                        00            .byte	0
11055 2799                        30            .byte	$30
11056 279A                        30            .byte	$30
11057 279B                        30            .byte	$30
11058 279C                        60            .byte	$60
11059 279D                        00            .byte	0
11060 279E                        00            .byte	0
11061 279F                        00            .byte	0
11062 27A0                        00            .byte	0
11063 27A1                        00            .byte	0
11064 27A2                        00            .byte	0
11065 27A3                        00            .byte	0
11066 27A4                        00            .byte	0
11067 27A5                        00            .byte	0
11068 27A6                        00            .byte	0
11069 27A7                        00            .byte	0
11070                                           ! 1253  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11071 27A8                        00            .byte	0
11072 27A9                        00            .byte	0
11073 27AA                        0C            .byte	$C
11074 27AB                        18            .byte	$18
11075 27AC                        30            .byte	$30
11076 27AD                        30            .byte	$30
11077 27AE                        30            .byte	$30
11078 27AF                        30            .byte	$30
11079 27B0                        30            .byte	$30
11080 27B1                        30            .byte	$30
11081 27B2                        18            .byte	$18
11082 27B3                        0C            .byte	$C
11083 27B4                        00            .byte	0
11084 27B5                        00            .byte	0
11085 27B6                        00            .byte	0
11086 27B7                        00            .byte	0
11087                                           ! 1254  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11088 27B8                        00            .byte	0
11089 27B9                        00            .byte	0
11090 27BA                        30            .byte	$30
11091 27BB                        18            .byte	$18
11092 27BC                        0C            .byte	$C
11093 27BD                        0C            .byte	$C
11094 27BE                        0C            .byte	$C
11095 27BF                        0C            .byte	$C
11096 27C0                        0C            .byte	$C
11097 27C1                        0C            .byte	$C
11098 27C2                        18            .byte	$18
11099 27C3                        30            .byte	$30
11100 27C4                        00            .byte	0
11101 27C5                        00            .byte	0
11102 27C6                        00            .byte	0
11103 27C7                        00            .byte	0
11104                                           ! 1255  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11105 27C8                        00            .byte	0
11106 27C9                        00            .byte	0
11107 27CA                        00            .byte	0
11108 27CB                        00            .byte	0
11109 27CC                        00            .byte	0
11110 27CD                        66            .byte	$66
11111 27CE                        3C            .byte	$3C
11112 27CF                        FF            .byte	$FF
11113 27D0                        3C            .byte	$3C
11114 27D1                        66            .byte	$66
11115 27D2                        00            .byte	0
11116 27D3                        00            .byte	0
11117 27D4                        00            .byte	0
11118 27D5                        00            .byte	0
11119 27D6                        00            .byte	0
11120 27D7                        00            .byte	0
11121                                           ! 1256  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11122 27D8                        00            .byte	0
11123 27D9                        00            .byte	0
11124 27DA                        00            .byte	0
11125 27DB                        00            .byte	0
11126 27DC                        00            .byte	0
11127 27DD                        18            .byte	$18
11128 27DE                        18            .byte	$18
11129 27DF                        7E            .byte	$7E
11130 27E0                        18            .byte	$18
11131 27E1                        18            .byte	$18
11132 27E2                        00            .byte	0
11133 27E3                        00            .byte	0
11134 27E4                        00            .byte	0
11135 27E5                        00            .byte	0
11136 27E6                        00            .byte	0
11137 27E7                        00            .byte	0
11138                                           ! 1257  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11139 27E8                        00            .byte	0
11140 27E9                        00            .byte	0
11141 27EA                        00            .byte	0
11142 27EB                        00            .byte	0
11143 27EC                        00            .byte	0
11144 27ED                        00            .byte	0
11145 27EE                        00            .byte	0
11146 27EF                        00            .byte	0
11147 27F0                        00            .byte	0
11148 27F1                        18            .byte	$18
11149 27F2                        18            .byte	$18
11150 27F3                        18            .byte	$18
11151 27F4                        30            .byte	$30
11152 27F5                        00            .byte	0
11153 27F6                        00            .byte	0
11154 27F7                        00            .byte	0
11155                                           ! 1258  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11156 27F8                        00            .byte	0
11157 27F9                        00            .byte	0
11158 27FA                        00            .byte	0
11159 27FB                        00            .byte	0
11160 27FC                        00            .byte	0
11161 27FD                        00            .byte	0
11162 27FE                        00            .byte	0
11163 27FF                        FE            .byte	$FE
11164 2800                        00            .byte	0
11165 2801                        00            .byte	0
11166 2802                        00            .byte	0
11167 2803                        00            .byte	0
11168 2804                        00            .byte	0
11169 2805                        00            .byte	0
11170 2806                        00            .byte	0
11171 2807                        00            .byte	0
11172                                           ! 1259  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11173 2808                        00            .byte	0
11174 2809                        00            .byte	0
11175 280A                        00            .byte	0
11176 280B                        00            .byte	0
11177 280C                        00            .byte	0
11178 280D                        00            .byte	0
11179 280E                        00            .byte	0
11180 280F                        00            .byte	0
11181 2810                        00            .byte	0
11182 2811                        00            .byte	0
11183 2812                        18            .byte	$18
11184 2813                        18            .byte	$18
11185 2814                        00            .byte	0
11186 2815                        00            .byte	0
11187 2816                        00            .byte	0
11188 2817                        00            .byte	0
11189                                           ! 1260  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11190 2818                        00            .byte	0
11191 2819                        00            .byte	0
11192 281A                        00            .byte	0
11193 281B                        00            .byte	0
11194 281C                        02            .byte	2
11195 281D                        06            .byte	6
11196 281E                        0C            .byte	$C
11197 281F                        18            .byte	$18
11198 2820                        30            .byte	$30
11199 2821                        60            .byte	$60
11200 2822                        C0            .byte	$C0
11201 2823                        80            .byte	$80
11202 2824                        00            .byte	0
11203 2825                        00            .byte	0
11204 2826                        00            .byte	0
11205 2827                        00            .byte	0
11206                                           ! 1261  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11207 2828                        00            .byte	0
11208 2829                        00            .byte	0
11209 282A                        3C            .byte	$3C
11210 282B                        66            .byte	$66
11211 282C                        C3            .byte	$C3
11212 282D                        C3            .byte	$C3
11213 282E                        DB            .byte	$DB
11214 282F                        DB            .byte	$DB
11215 2830                        C3            .byte	$C3
11216 2831                        C3            .byte	$C3
11217 2832                        66            .byte	$66
11218 2833                        3C            .byte	$3C
11219 2834                        00            .byte	0
11220 2835                        00            .byte	0
11221 2836                        00            .byte	0
11222 2837                        00            .byte	0
11223                                           ! 1262  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11224 2838                        00            .byte	0
11225 2839                        00            .byte	0
11226 283A                        18            .byte	$18
11227 283B                        38            .byte	$38
11228 283C                        78            .byte	$78
11229 283D                        18            .byte	$18
11230 283E                        18            .byte	$18
11231 283F                        18            .byte	$18
11232 2840                        18            .byte	$18
11233 2841                        18            .byte	$18
11234 2842                        18            .byte	$18
11235 2843                        7E            .byte	$7E
11236 2844                        00            .byte	0
11237 2845                        00            .byte	0
11238 2846                        00            .byte	0
11239 2847                        00            .byte	0
11240                                           ! 1263  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11241 2848                        00            .byte	0
11242 2849                        00            .byte	0
11243 284A                        7C            .byte	$7C
11244 284B                        C6            .byte	$C6
11245 284C                        06            .byte	6
11246 284D                        0C            .byte	$C
11247 284E                        18            .byte	$18
11248 284F                        30            .byte	$30
11249 2850                        60            .byte	$60
11250 2851                        C0            .byte	$C0
11251 2852                        C6            .byte	$C6
11252 2853                        FE            .byte	$FE
11253 2854                        00            .byte	0
11254 2855                        00            .byte	0
11255 2856                        00            .byte	0
11256 2857                        00            .byte	0
11257                                           ! 1264  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11258 2858                        00            .byte	0
11259 2859                        00            .byte	0
11260 285A                        7C            .byte	$7C
11261 285B                        C6            .byte	$C6
11262 285C                        06            .byte	6
11263 285D                        06            .byte	6
11264 285E                        3C            .byte	$3C
11265 285F                        06            .byte	6
11266 2860                        06            .byte	6
11267 2861                        06            .byte	6
11268 2862                        C6            .byte	$C6
11269 2863                        7C            .byte	$7C
11270 2864                        00            .byte	0
11271 2865                        00            .byte	0
11272 2866                        00            .byte	0
11273 2867                        00            .byte	0
11274                                           ! 1265  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11275 2868                        00            .byte	0
11276 2869                        00            .byte	0
11277 286A                        0C            .byte	$C
11278 286B                        1C            .byte	$1C
11279 286C                        3C            .byte	$3C
11280 286D                        6C            .byte	$6C
11281 286E                        CC            .byte	$CC
11282 286F                        FE            .byte	$FE
11283 2870                        0C            .byte	$C
11284 2871                        0C            .byte	$C
11285 2872                        0C            .byte	$C
11286 2873                        1E            .byte	$1E
11287 2874                        00            .byte	0
11288 2875                        00            .byte	0
11289 2876                        00            .byte	0
11290 2877                        00            .byte	0
11291                                           ! 1266  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11292 2878                        00            .byte	0
11293 2879                        00            .byte	0
11294 287A                        FE            .byte	$FE
11295 287B                        C0            .byte	$C0
11296 287C                        C0            .byte	$C0
11297 287D                        C0            .byte	$C0
11298 287E                        FC            .byte	$FC
11299 287F                        06            .byte	6
11300 2880                        06            .byte	6
11301 2881                        06            .byte	6
11302 2882                        C6            .byte	$C6
11303 2883                        7C            .byte	$7C
11304 2884                        00            .byte	0
11305 2885                        00            .byte	0
11306 2886                        00            .byte	0
11307 2887                        00            .byte	0
11308                                           ! 1267  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11309 2888                        00            .byte	0
11310 2889                        00            .byte	0
11311 288A                        38            .byte	$38
11312 288B                        60            .byte	$60
11313 288C                        C0            .byte	$C0
11314 288D                        C0            .byte	$C0
11315 288E                        FC            .byte	$FC
11316 288F                        C6            .byte	$C6
11317 2890                        C6            .byte	$C6
11318 2891                        C6            .byte	$C6
11319 2892                        C6            .byte	$C6
11320 2893                        7C            .byte	$7C
11321 2894                        00            .byte	0
11322 2895                        00            .byte	0
11323 2896                        00            .byte	0
11324 2897                        00            .byte	0
11325                                           ! 1268  0x00
11326                                           ! 1268 , 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11327 2898                        00            .byte	0
11328 2899                        00            .byte	0
11329 289A                        FE            .byte	$FE
11330 289B                        C6            .byte	$C6
11331 289C                        06            .byte	6
11332 289D                        06            .byte	6
11333 289E                        0C            .byte	$C
11334 289F                        18            .byte	$18
11335 28A0                        30            .byte	$30
11336 28A1                        30            .byte	$30
11337 28A2                        30            .byte	$30
11338 28A3                        30            .byte	$30
11339 28A4                        00            .byte	0
11340 28A5                        00            .byte	0
11341 28A6                        00            .byte	0
11342 28A7                        00            .byte	0
11343                                           ! 1269  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11344 28A8                        00            .byte	0
11345 28A9                        00            .byte	0
11346 28AA                        7C            .byte	$7C
11347 28AB                        C6            .byte	$C6
11348 28AC                        C6            .byte	$C6
11349 28AD                        C6            .byte	$C6
11350 28AE                        7C            .byte	$7C
11351 28AF                        C6            .byte	$C6
11352 28B0                        C6            .byte	$C6
11353 28B1                        C6            .byte	$C6
11354 28B2                        C6            .byte	$C6
11355 28B3                        7C            .byte	$7C
11356 28B4                        00            .byte	0
11357 28B5                        00            .byte	0
11358 28B6                        00            .byte	0
11359 28B7                        00            .byte	0
11360                                           ! 1270  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11361 28B8                        00            .byte	0
11362 28B9                        00            .byte	0
11363 28BA                        7C            .byte	$7C
11364 28BB                        C6            .byte	$C6
11365 28BC                        C6            .byte	$C6
11366 28BD                        C6            .byte	$C6
11367 28BE                        7E            .byte	$7E
11368 28BF                        06            .byte	6
11369 28C0                        06            .byte	6
11370 28C1                        06            .byte	6
11371 28C2                        0C            .byte	$C
11372 28C3                        78            .byte	$78
11373 28C4                        00            .byte	0
11374 28C5                        00            .byte	0
11375 28C6                        00            .byte	0
11376 28C7                        00            .byte	0
11377                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11378 28C8                        00            .byte	0
11379 28C9                        00            .byte	0
11380 28CA                        00            .byte	0
11381 28CB                        00            .byte	0
11382 28CC                        18            .byte	$18
11383 28CD                        18            .byte	$18
11384 28CE                        00            .byte	0
11385 28CF                        00            .byte	0
11386 28D0                        00            .byte	0
11387 28D1                        18            .byte	$18
11388 28D2                        18            .byte	$18
11389 28D3                        00            .byte	0
11390 28D4                        00            .byte	0
11391 28D5                        00            .byte	0
11392 28D6                        00            .byte	0
11393 28D7                        00            .byte	0
11394                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11395 28D8                        00            .byte	0
11396 28D9                        00            .byte	0
11397 28DA                        00            .byte	0
11398 28DB                        00            .byte	0
11399 28DC                        18            .byte	$18
11400 28DD                        18            .byte	$18
11401 28DE                        00            .byte	0
11402 28DF                        00            .byte	0
11403 28E0                        00            .byte	0
11404 28E1                        18            .byte	$18
11405 28E2                        18            .byte	$18
11406 28E3                        30            .byte	$30
11407 28E4                        00            .byte	0
11408 28E5                        00            .byte	0
11409 28E6                        00            .byte	0
11410 28E7                        00            .byte	0
11411                                           ! 1273  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11412 28E8                        00            .byte	0
11413 28E9                        00            .byte	0
11414 28EA                        00            .byte	0
11415 28EB                        06            .byte	6
11416 28EC                        0C            .byte	$C
11417 28ED                        18            .byte	$18
11418 28EE                        30            .byte	$30
11419 28EF                        60            .byte	$60
11420 28F0                        30            .byte	$30
11421 28F1                        18            .byte	$18
11422 28F2                        0C            .byte	$C
11423 28F3                        06            .byte	6
11424 28F4                        00            .byte	0
11425 28F5                        00            .byte	0
11426 28F6                        00            .byte	0
11427 28F7                        00            .byte	0
11428                                           ! 1274  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11429 28F8                        00            .byte	0
11430 28F9                        00            .byte	0
11431 28FA                        00            .byte	0
11432 28FB                        00            .byte	0
11433 28FC                        00            .byte	0
11434 28FD                        7E            .byte	$7E
11435 28FE                        00            .byte	0
11436 28FF                        00            .byte	0
11437 2900                        7E            .byte	$7E
11438 2901                        00            .byte	0
11439 2902                        00            .byte	0
11440 2903                        00            .byte	0
11441 2904                        00            .byte	0
11442 2905                        00            .byte	0
11443 2906                        00            .byte	0
11444 2907                        00            .byte	0
11445                                           ! 1275  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11446 2908                        00            .byte	0
11447 2909                        00            .byte	0
11448 290A                        00            .byte	0
11449 290B                        60            .byte	$60
11450 290C                        30            .byte	$30
11451 290D                        18            .byte	$18
11452 290E                        0C            .byte	$C
11453 290F                        06            .byte	6
11454 2910                        0C            .byte	$C
11455 2911                        18            .byte	$18
11456 2912                        30            .byte	$30
11457 2913                        60            .byte	$60
11458 2914                        00            .byte	0
11459 2915                        00            .byte	0
11460 2916                        00            .byte	0
11461 2917                        00            .byte	0
11462                                           ! 1276  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11463 2918                        00            .byte	0
11464 2919                        00            .byte	0
11465 291A                        7C            .byte	$7C
11466 291B                        C6            .byte	$C6
11467 291C                        C6            .byte	$C6
11468 291D                        0C            .byte	$C
11469 291E                        18            .byte	$18
11470 291F                        18            .byte	$18
11471 2920                        18            .byte	$18
11472 2921                        00            .byte	0
11473 2922                        18            .byte	$18
11474 2923                        18            .byte	$18
11475 2924                        00            .byte	0
11476 2925                        00            .byte	0
11477 2926                        00            .byte	0
11478 2927                        00            .byte	0
11479                                           ! 1277  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11480 2928                        00            .byte	0
11481 2929                        00            .byte	0
11482 292A                        00            .byte	0
11483 292B                        7C            .byte	$7C
11484 292C                        C6            .byte	$C6
11485 292D                        C6            .byte	$C6
11486 292E                        DE            .byte	$DE
11487 292F                        DE            .byte	$DE
11488 2930                        DE            .byte	$DE
11489 2931                        DC            .byte	$DC
11490 2932                        C0            .byte	$C0
11491 2933                        7C            .byte	$7C
11492 2934                        00            .byte	0
11493 2935                        00            .byte	0
11494 2936                        00            .byte	0
11495 2937                        00            .byte	0
11496                                           ! 1278  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11497 2938                        00            .byte	0
11498 2939                        00            .byte	0
11499 293A                        10            .byte	$10
11500 293B                        38            .byte	$38
11501 293C                        6C            .byte	$6C
11502 293D                        C6            .byte	$C6
11503 293E                        C6            .byte	$C6
11504 293F                        FE            .byte	$FE
11505 2940                        C6            .byte	$C6
11506 2941                        C6            .byte	$C6
11507 2942                        C6            .byte	$C6
11508 2943                        C6            .byte	$C6
11509 2944                        00            .byte	0
11510 2945                        00            .byte	0
11511 2946                        00            .byte	0
11512 2947                        00            .byte	0
11513                                           ! 1279  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11514 2948                        00            .byte	0
11515 2949                        00            .byte	0
11516 294A                        FC            .byte	$FC
11517 294B                        66            .byte	$66
11518 294C                        66            .byte	$66
11519 294D                        66            .byte	$66
11520 294E                        7C            .byte	$7C
11521 294F                        66            .byte	$66
11522 2950                        66            .byte	$66
11523 2951                        66            .byte	$66
11524 2952                        66            .byte	$66
11525 2953                        FC            .byte	$FC
11526 2954                        00            .byte	0
11527 2955                        00            .byte	0
11528 2956                        00            .byte	0
11529 2957                        00            .byte	0
11530                                           ! 1280  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11531 2958                        00            .byte	0
11532 2959                        00            .byte	0
11533 295A                        3C            .byte	$3C
11534 295B                        66            .byte	$66
11535 295C                        C2            .byte	$C2
11536 295D                        C0            .byte	$C0
11537 295E                        C0            .byte	$C0
11538 295F                        C0            .byte	$C0
11539 2960                        C0            .byte	$C0
11540 2961                        C2            .byte	$C2
11541 2962                        66            .byte	$66
11542 2963                        3C            .byte	$3C
11543 2964                        00            .byte	0
11544 2965                        00            .byte	0
11545 2966                        00            .byte	0
11546 2967                        00            .byte	0
11547                                           ! 1281  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11548 2968                        00            .byte	0
11549 2969                        00            .byte	0
11550 296A                        F8            .byte	$F8
11551 296B                        6C            .byte	$6C
11552 296C                        66            .byte	$66
11553 296D                        66            .byte	$66
11554 296E                        66            .byte	$66
11555 296F                        66            .byte	$66
11556 2970                        66            .byte	$66
11557 2971                        66            .byte	$66
11558 2972                        6C            .byte	$6C
11559 2973                        F8            .byte	$F8
11560 2974                        00            .byte	0
11561 2975                        00            .byte	0
11562 2976                        00            .byte	0
11563 2977                        00            .byte	0
11564                                           ! 1282  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11565 2978                        00            .byte	0
11566 2979                        00            .byte	0
11567 297A                        FE            .byte	$FE
11568 297B                        66            .byte	$66
11569 297C                        62            .byte	$62
11570 297D                        68            .byte	$68
11571 297E                        78            .byte	$78
11572 297F                        68            .byte	$68
11573 2980                        60            .byte	$60
11574 2981                        62            .byte	$62
11575 2982                        66            .byte	$66
11576 2983                        FE            .byte	$FE
11577 2984                        00            .byte	0
11578 2985                        00            .byte	0
11579 2986                        00            .byte	0
11580 2987                        00            .byte	0
11581                                           ! 1283  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11582 2988                        00            .byte	0
11583 2989                        00            .byte	0
11584 298A                        FE            .byte	$FE
11585 298B                        66            .byte	$66
11586 298C                        62            .byte	$62
11587 298D                        68            .byte	$68
11588 298E                        78            .byte	$78
11589 298F                        68            .byte	$68
11590 2990                        60            .byte	$60
11591 2991                        60            .byte	$60
11592 2992                        60            .byte	$60
11593 2993                        F0            .byte	$F0
11594 2994                        00            .byte	0
11595 2995                        00            .byte	0
11596 2996                        00            .byte	0
11597 2997                        00            .byte	0
11598                                           ! 1284  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11599 2998                        00            .byte	0
11600 2999                        00            .byte	0
11601 299A                        3C            .byte	$3C
11602 299B                        66            .byte	$66
11603 299C                        C2            .byte	$C2
11604 299D                        C0            .byte	$C0
11605 299E                        C0            .byte	$C0
11606 299F                        DE            .byte	$DE
11607 29A0                        C6            .byte	$C6
11608 29A1                        C6            .byte	$C6
11609 29A2                        66            .byte	$66
11610 29A3                        3A            .byte	$3A
11611 29A4                        00            .byte	0
11612 29A5                        00            .byte	0
11613 29A6                        00            .byte	0
11614 29A7                        00            .byte	0
11615                                           ! 1285  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11616 29A8                        00            .byte	0
11617 29A9                        00            .byte	0
11618 29AA                        C6            .byte	$C6
11619 29AB                        C6            .byte	$C6
11620 29AC                        C6            .byte	$C6
11621 29AD                        C6            .byte	$C6
11622 29AE                        FE            .byte	$FE
11623 29AF                        C6            .byte	$C6
11624 29B0                        C6            .byte	$C6
11625 29B1                        C6            .byte	$C6
11626 29B2                        C6            .byte	$C6
11627 29B3                        C6            .byte	$C6
11628 29B4                        00            .byte	0
11629 29B5                        00            .byte	0
11630 29B6                        00            .byte	0
11631 29B7                        00            .byte	0
11632                                           ! 1286  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11633 29B8                        00            .byte	0
11634 29B9                        00            .byte	0
11635 29BA                        3C            .byte	$3C
11636 29BB                        18            .byte	$18
11637 29BC                        18            .byte	$18
11638 29BD                        18            .byte	$18
11639 29BE                        18            .byte	$18
11640 29BF                        18            .byte	$18
11641 29C0                        18            .byte	$18
11642 29C1                        18            .byte	$18
11643 29C2                        18            .byte	$18
11644 29C3                        3C            .byte	$3C
11645 29C4                        00            .byte	0
11646 29C5                        00            .byte	0
11647 29C6                        00            .byte	0
11648 29C7                        00            .byte	0
11649                                           ! 1287  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11650 29C8                        00            .byte	0
11651 29C9                        00            .byte	0
11652 29CA                        1E            .byte	$1E
11653 29CB                        0C            .byte	$C
11654 29CC                        0C            .byte	$C
11655 29CD                        0C            .byte	$C
11656 29CE                        0C            .byte	$C
11657 29CF                        0C            .byte	$C
11658 29D0                        CC            .byte	$CC
11659 29D1                        CC            .byte	$CC
11660 29D2                        CC            .byte	$CC
11661 29D3                        78            .byte	$78
11662 29D4                        00            .byte	0
11663 29D5                        00            .byte	0
11664 29D6                        00            .byte	0
11665 29D7                        00            .byte	0
11666                                           ! 1288  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11667 29D8                        00            .byte	0
11668 29D9                        00            .byte	0
11669 29DA                        E6            .byte	$E6
11670 29DB                        66            .byte	$66
11671 29DC                        66            .byte	$66
11672 29DD                        6C            .byte	$6C
11673 29DE                        78            .byte	$78
11674 29DF                        78            .byte	$78
11675 29E0                        6C            .byte	$6C
11676 29E1                        66            .byte	$66
11677 29E2                        66            .byte	$66
11678 29E3                        E6            .byte	$E6
11679 29E4                        00            .byte	0
11680 29E5                        00            .byte	0
11681 29E6                        00            .byte	0
11682 29E7                        00            .byte	0
11683                                           ! 1289  0x00, 0x00, 0xf
11684 29E8                        00            .byte	0
11685 29E9                        00            .byte	0
11686                                           ! 1289 0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11687 29EA                        F0            .byte	$F0
11688 29EB                        60            .byte	$60
11689 29EC                        60            .byte	$60
11690 29ED                        60            .byte	$60
11691 29EE                        60            .byte	$60
11692 29EF                        60            .byte	$60
11693 29F0                        60            .byte	$60
11694 29F1                        62            .byte	$62
11695 29F2                        66            .byte	$66
11696 29F3                        FE            .byte	$FE
11697 29F4                        00            .byte	0
11698 29F5                        00            .byte	0
11699 29F6                        00            .byte	0
11700 29F7                        00            .byte	0
11701                                           ! 1290  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11702 29F8                        00            .byte	0
11703 29F9                        00            .byte	0
11704 29FA                        C3            .byte	$C3
11705 29FB                        E7            .byte	$E7
11706 29FC                        FF            .byte	$FF
11707 29FD                        FF            .byte	$FF
11708 29FE                        DB            .byte	$DB
11709 29FF                        C3            .byte	$C3
11710 2A00                        C3            .byte	$C3
11711 2A01                        C3            .byte	$C3
11712 2A02                        C3            .byte	$C3
11713 2A03                        C3            .byte	$C3
11714 2A04                        00            .byte	0
11715 2A05                        00            .byte	0
11716 2A06                        00            .byte	0
11717 2A07                        00            .byte	0
11718                                           ! 1291  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11719 2A08                        00            .byte	0
11720 2A09                        00            .byte	0
11721 2A0A                        C6            .byte	$C6
11722 2A0B                        E6            .byte	$E6
11723 2A0C                        F6            .byte	$F6
11724 2A0D                        FE            .byte	$FE
11725 2A0E                        DE            .byte	$DE
11726 2A0F                        CE            .byte	$CE
11727 2A10                        C6            .byte	$C6
11728 2A11                        C6            .byte	$C6
11729 2A12                        C6            .byte	$C6
11730 2A13                        C6            .byte	$C6
11731 2A14                        00            .byte	0
11732 2A15                        00            .byte	0
11733 2A16                        00            .byte	0
11734 2A17                        00            .byte	0
11735                                           ! 1292  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11736 2A18                        00            .byte	0
11737 2A19                        00            .byte	0
11738 2A1A                        7C            .byte	$7C
11739 2A1B                        C6            .byte	$C6
11740 2A1C                        C6            .byte	$C6
11741 2A1D                        C6            .byte	$C6
11742 2A1E                        C6            .byte	$C6
11743 2A1F                        C6            .byte	$C6
11744 2A20                        C6            .byte	$C6
11745 2A21                        C6            .byte	$C6
11746 2A22                        C6            .byte	$C6
11747 2A23                        7C            .byte	$7C
11748 2A24                        00            .byte	0
11749 2A25                        00            .byte	0
11750 2A26                        00            .byte	0
11751 2A27                        00            .byte	0
11752                                           ! 1293  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11753 2A28                        00            .byte	0
11754 2A29                        00            .byte	0
11755 2A2A                        FC            .byte	$FC
11756 2A2B                        66            .byte	$66
11757 2A2C                        66            .byte	$66
11758 2A2D                        66            .byte	$66
11759 2A2E                        7C            .byte	$7C
11760 2A2F                        60            .byte	$60
11761 2A30                        60            .byte	$60
11762 2A31                        60            .byte	$60
11763 2A32                        60            .byte	$60
11764 2A33                        F0            .byte	$F0
11765 2A34                        00            .byte	0
11766 2A35                        00            .byte	0
11767 2A36                        00            .byte	0
11768 2A37                        00            .byte	0
11769                                           ! 1294  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11770 2A38                        00            .byte	0
11771 2A39                        00            .byte	0
11772 2A3A                        7C            .byte	$7C
11773 2A3B                        C6            .byte	$C6
11774 2A3C                        C6            .byte	$C6
11775 2A3D                        C6            .byte	$C6
11776 2A3E                        C6            .byte	$C6
11777 2A3F                        C6            .byte	$C6
11778 2A40                        C6            .byte	$C6
11779 2A41                        D6            .byte	$D6
11780 2A42                        DE            .byte	$DE
11781 2A43                        7C            .byte	$7C
11782 2A44                        0C            .byte	$C
11783 2A45                        0E            .byte	$E
11784 2A46                        00            .byte	0
11785 2A47                        00            .byte	0
11786                                           ! 1295  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11787 2A48                        00            .byte	0
11788 2A49                        00            .byte	0
11789 2A4A                        FC            .byte	$FC
11790 2A4B                        66            .byte	$66
11791 2A4C                        66            .byte	$66
11792 2A4D                        66            .byte	$66
11793 2A4E                        7C            .byte	$7C
11794 2A4F                        6C            .byte	$6C
11795 2A50                        66            .byte	$66
11796 2A51                        66            .byte	$66
11797 2A52                        66            .byte	$66
11798 2A53                        E6            .byte	$E6
11799 2A54                        00            .byte	0
11800 2A55                        00            .byte	0
11801 2A56                        00            .byte	0
11802 2A57                        00            .byte	0
11803                                           ! 1296  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11804 2A58                        00            .byte	0
11805 2A59                        00            .byte	0
11806 2A5A                        7C            .byte	$7C
11807 2A5B                        C6            .byte	$C6
11808 2A5C                        C6            .byte	$C6
11809 2A5D                        60            .byte	$60
11810 2A5E                        38            .byte	$38
11811 2A5F                        0C            .byte	$C
11812 2A60                        06            .byte	6
11813 2A61                        C6            .byte	$C6
11814 2A62                        C6            .byte	$C6
11815 2A63                        7C            .byte	$7C
11816 2A64                        00            .byte	0
11817 2A65                        00            .byte	0
11818 2A66                        00            .byte	0
11819 2A67                        00            .byte	0
11820                                           ! 1297  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11821 2A68                        00            .byte	0
11822 2A69                        00            .byte	0
11823 2A6A                        FF            .byte	$FF
11824 2A6B                        DB            .byte	$DB
11825 2A6C                        99            .byte	$99
11826 2A6D                        18            .byte	$18
11827 2A6E                        18            .byte	$18
11828 2A6F                        18            .byte	$18
11829 2A70                        18            .byte	$18
11830 2A71                        18            .byte	$18
11831 2A72                        18            .byte	$18
11832 2A73                        3C            .byte	$3C
11833 2A74                        00            .byte	0
11834 2A75                        00            .byte	0
11835 2A76                        00            .byte	0
11836 2A77                        00            .byte	0
11837                                           ! 1298  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11838 2A78                        00            .byte	0
11839 2A79                        00            .byte	0
11840 2A7A                        C6            .byte	$C6
11841 2A7B                        C6            .byte	$C6
11842 2A7C                        C6            .byte	$C6
11843 2A7D                        C6            .byte	$C6
11844 2A7E                        C6            .byte	$C6
11845 2A7F                        C6            .byte	$C6
11846 2A80                        C6            .byte	$C6
11847 2A81                        C6            .byte	$C6
11848 2A82                        C6            .byte	$C6
11849 2A83                        7C            .byte	$7C
11850 2A84                        00            .byte	0
11851 2A85                        00            .byte	0
11852 2A86                        00            .byte	0
11853 2A87                        00            .byte	0
11854                                           ! 1299  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11855 2A88                        00            .byte	0
11856 2A89                        00            .byte	0
11857 2A8A                        C3            .byte	$C3
11858 2A8B                        C3            .byte	$C3
11859 2A8C                        C3            .byte	$C3
11860 2A8D                        C3            .byte	$C3
11861 2A8E                        C3            .byte	$C3
11862 2A8F                        C3            .byte	$C3
11863 2A90                        C3            .byte	$C3
11864 2A91                        66            .byte	$66
11865 2A92                        3C            .byte	$3C
11866 2A93                        18            .byte	$18
11867 2A94                        00            .byte	0
11868 2A95                        00            .byte	0
11869 2A96                        00            .byte	0
11870 2A97                        00            .byte	0
11871                                           ! 1300  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11872 2A98                        00            .byte	0
11873 2A99                        00            .byte	0
11874 2A9A                        C3            .byte	$C3
11875 2A9B                        C3            .byte	$C3
11876 2A9C                        C3            .byte	$C3
11877 2A9D                        C3            .byte	$C3
11878 2A9E                        C3            .byte	$C3
11879 2A9F                        DB            .byte	$DB
11880 2AA0                        DB            .byte	$DB
11881 2AA1                        FF            .byte	$FF
11882 2AA2                        66            .byte	$66
11883 2AA3                        66            .byte	$66
11884 2AA4                        00            .byte	0
11885 2AA5                        00            .byte	0
11886 2AA6                        00            .byte	0
11887 2AA7                        00            .byte	0
11888                                           ! 1301  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11889 2AA8                        00            .byte	0
11890 2AA9                        00            .byte	0
11891 2AAA                        C3            .byte	$C3
11892 2AAB                        C3            .byte	$C3
11893 2AAC                        66            .byte	$66
11894 2AAD                        3C            .byte	$3C
11895 2AAE                        18            .byte	$18
11896 2AAF                        18            .byte	$18
11897 2AB0                        3C            .byte	$3C
11898 2AB1                        66            .byte	$66
11899 2AB2                        C3            .byte	$C3
11900 2AB3                        C3            .byte	$C3
11901 2AB4                        00            .byte	0
11902 2AB5                        00            .byte	0
11903 2AB6                        00            .byte	0
11904 2AB7                        00            .byte	0
11905                                           ! 1302  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11906 2AB8                        00            .byte	0
11907 2AB9                        00            .byte	0
11908 2ABA                        C3            .byte	$C3
11909 2ABB                        C3            .byte	$C3
11910 2ABC                        C3            .byte	$C3
11911 2ABD                        66            .byte	$66
11912 2ABE                        3C            .byte	$3C
11913 2ABF                        18            .byte	$18
11914 2AC0                        18            .byte	$18
11915 2AC1                        18            .byte	$18
11916 2AC2                        18            .byte	$18
11917 2AC3                        3C            .byte	$3C
11918 2AC4                        00            .byte	0
11919 2AC5                        00            .byte	0
11920 2AC6                        00            .byte	0
11921 2AC7                        00            .byte	0
11922                                           ! 1303  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11923 2AC8                        00            .byte	0
11924 2AC9                        00            .byte	0
11925 2ACA                        FF            .byte	$FF
11926 2ACB                        C3            .byte	$C3
11927 2ACC                        86            .byte	$86
11928 2ACD                        0C            .byte	$C
11929 2ACE                        18            .byte	$18
11930 2ACF                        30            .byte	$30
11931 2AD0                        60            .byte	$60
11932 2AD1                        C1            .byte	$C1
11933 2AD2                        C3            .byte	$C3
11934 2AD3                        FF            .byte	$FF
11935 2AD4                        00            .byte	0
11936 2AD5                        00            .byte	0
11937 2AD6                        00            .byte	0
11938 2AD7                        00            .byte	0
11939                                           ! 1304  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11940 2AD8                        00            .byte	0
11941 2AD9                        00            .byte	0
11942 2ADA                        3C            .byte	$3C
11943 2ADB                        30            .byte	$30
11944 2ADC                        30            .byte	$30
11945 2ADD                        30            .byte	$30
11946 2ADE                        30            .byte	$30
11947 2ADF                        30            .byte	$30
11948 2AE0                        30            .byte	$30
11949 2AE1                        30            .byte	$30
11950 2AE2                        30            .byte	$30
11951 2AE3                        3C            .byte	$3C
11952 2AE4                        00            .byte	0
11953 2AE5                        00            .byte	0
11954 2AE6                        00            .byte	0
11955 2AE7                        00            .byte	0
11956                                           ! 1305  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11957 2AE8                        00            .byte	0
11958 2AE9                        00            .byte	0
11959 2AEA                        00            .byte	0
11960 2AEB                        80            .byte	$80
11961 2AEC                        C0            .byte	$C0
11962 2AED                        E0            .byte	$E0
11963 2AEE                        70            .byte	$70
11964 2AEF                        38            .byte	$38
11965 2AF0                        1C            .byte	$1C
11966 2AF1                        0E            .byte	$E
11967 2AF2                        06            .byte	6
11968 2AF3                        02            .byte	2
11969 2AF4                        00            .byte	0
11970 2AF5                        00            .byte	0
11971 2AF6                        00            .byte	0
11972 2AF7                        00            .byte	0
11973                                           ! 1306  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
11974 2AF8                        00            .byte	0
11975 2AF9                        00            .byte	0
11976 2AFA                        3C            .byte	$3C
11977 2AFB                        0C            .byte	$C
11978 2AFC                        0C            .byte	$C
11979 2AFD                        0C            .byte	$C
11980 2AFE                        0C            .byte	$C
11981 2AFF                        0C            .byte	$C
11982 2B00                        0C            .byte	$C
11983 2B01                        0C            .byte	$C
11984 2B02                        0C            .byte	$C
11985 2B03                        3C            .byte	$3C
11986 2B04                        00            .byte	0
11987 2B05                        00            .byte	0
11988 2B06                        00            .byte	0
11989 2B07                        00            .byte	0
11990                                           ! 1307  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11991 2B08                        10            .byte	$10
11992 2B09                        38            .byte	$38
11993 2B0A                        6C            .byte	$6C
11994 2B0B                        C6            .byte	$C6
11995 2B0C                        00            .byte	0
11996 2B0D                        00            .byte	0
11997 2B0E                        00            .byte	0
11998 2B0F                        00            .byte	0
11999 2B10                        00            .byte	0
12000 2B11                        00            .byte	0
12001 2B12                        00            .byte	0
12002 2B13                        00            .byte	0
12003 2B14                        00            .byte	0
12004 2B15                        00            .byte	0
12005 2B16                        00            .byte	0
12006 2B17                        00            .byte	0
12007                                           ! 1308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12008 2B18                        00            .byte	0
12009 2B19                        00            .byte	0
12010 2B1A                        00            .byte	0
12011 2B1B                        00            .byte	0
12012 2B1C                        00            .byte	0
12013 2B1D                        00            .byte	0
12014 2B1E                        00            .byte	0
12015 2B1F                        00            .byte	0
12016 2B20                        00            .byte	0
12017 2B21                        00            .byte	0
12018 2B22                        00            .byte	0
12019 2B23                        00            .byte	0
12020 2B24                        00            .byte	0
12021 2B25                        FF            .byte	$FF
12022 2B26                        00            .byte	0
12023 2B27                        00            .byte	0
12024                                           ! 1309  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12025 2B28                        30            .byte	$30
12026 2B29                        30            .byte	$30
12027 2B2A                        18            .byte	$18
12028 2B2B                        00            .byte	0
12029 2B2C                        00            .byte	0
12030 2B2D                        00            .byte	0
12031 2B2E                        00            .byte	0
12032 2B2F                        00            .byte	0
12033 2B30                        00            .byte	0
12034 2B31                        00            .byte	0
12035 2B32                        00            .byte	0
12036 2B33                        00            .byte	0
12037 2B34                        00            .byte	0
12038 2B35                        00            .byte	0
12039 2B36                        00            .byte	0
12040 2B37                        00            .byte	0
12041                                           ! 1310  0x00, 0x00, 0x00, 0x00, 0x
12042 2B38                        00            .byte	0
12043 2B39                        00            .byte	0
12044 2B3A                        00            .byte	0
12045 2B3B                        00            .byte	0
12046                                           ! 1310 00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12047 2B3C                        00            .byte	0
12048 2B3D                        78            .byte	$78
12049 2B3E                        0C            .byte	$C
12050 2B3F                        7C            .byte	$7C
12051 2B40                        CC            .byte	$CC
12052 2B41                        CC            .byte	$CC
12053 2B42                        CC            .byte	$CC
12054 2B43                        76            .byte	$76
12055 2B44                        00            .byte	0
12056 2B45                        00            .byte	0
12057 2B46                        00            .byte	0
12058 2B47                        00            .byte	0
12059                                           ! 1311  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12060 2B48                        00            .byte	0
12061 2B49                        00            .byte	0
12062 2B4A                        E0            .byte	$E0
12063 2B4B                        60            .byte	$60
12064 2B4C                        60            .byte	$60
12065 2B4D                        78            .byte	$78
12066 2B4E                        6C            .byte	$6C
12067 2B4F                        66            .byte	$66
12068 2B50                        66            .byte	$66
12069 2B51                        66            .byte	$66
12070 2B52                        66            .byte	$66
12071 2B53                        7C            .byte	$7C
12072 2B54                        00            .byte	0
12073 2B55                        00            .byte	0
12074 2B56                        00            .byte	0
12075 2B57                        00            .byte	0
12076                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12077 2B58                        00            .byte	0
12078 2B59                        00            .byte	0
12079 2B5A                        00            .byte	0
12080 2B5B                        00            .byte	0
12081 2B5C                        00            .byte	0
12082 2B5D                        7C            .byte	$7C
12083 2B5E                        C6            .byte	$C6
12084 2B5F                        C0            .byte	$C0
12085 2B60                        C0            .byte	$C0
12086 2B61                        C0            .byte	$C0
12087 2B62                        C6            .byte	$C6
12088 2B63                        7C            .byte	$7C
12089 2B64                        00            .byte	0
12090 2B65                        00            .byte	0
12091 2B66                        00            .byte	0
12092 2B67                        00            .byte	0
12093                                           ! 1313  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12094 2B68                        00            .byte	0
12095 2B69                        00            .byte	0
12096 2B6A                        1C            .byte	$1C
12097 2B6B                        0C            .byte	$C
12098 2B6C                        0C            .byte	$C
12099 2B6D                        3C            .byte	$3C
12100 2B6E                        6C            .byte	$6C
12101 2B6F                        CC            .byte	$CC
12102 2B70                        CC            .byte	$CC
12103 2B71                        CC            .byte	$CC
12104 2B72                        CC            .byte	$CC
12105 2B73                        76            .byte	$76
12106 2B74                        00            .byte	0
12107 2B75                        00            .byte	0
12108 2B76                        00            .byte	0
12109 2B77                        00            .byte	0
12110                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12111 2B78                        00            .byte	0
12112 2B79                        00            .byte	0
12113 2B7A                        00            .byte	0
12114 2B7B                        00            .byte	0
12115 2B7C                        00            .byte	0
12116 2B7D                        7C            .byte	$7C
12117 2B7E                        C6            .byte	$C6
12118 2B7F                        FE            .byte	$FE
12119 2B80                        C0            .byte	$C0
12120 2B81                        C0            .byte	$C0
12121 2B82                        C6            .byte	$C6
12122 2B83                        7C            .byte	$7C
12123 2B84                        00            .byte	0
12124 2B85                        00            .byte	0
12125 2B86                        00            .byte	0
12126 2B87                        00            .byte	0
12127                                           ! 1315  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12128 2B88                        00            .byte	0
12129 2B89                        00            .byte	0
12130 2B8A                        38            .byte	$38
12131 2B8B                        6C            .byte	$6C
12132 2B8C                        64            .byte	$64
12133 2B8D                        60            .byte	$60
12134 2B8E                        F0            .byte	$F0
12135 2B8F                        60            .byte	$60
12136 2B90                        60            .byte	$60
12137 2B91                        60            .byte	$60
12138 2B92                        60            .byte	$60
12139 2B93                        F0            .byte	$F0
12140 2B94                        00            .byte	0
12141 2B95                        00            .byte	0
12142 2B96                        00            .byte	0
12143 2B97                        00            .byte	0
12144                                           ! 1316  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12145 2B98                        00            .byte	0
12146 2B99                        00            .byte	0
12147 2B9A                        00            .byte	0
12148 2B9B                        00            .byte	0
12149 2B9C                        00            .byte	0
12150 2B9D                        76            .byte	$76
12151 2B9E                        CC            .byte	$CC
12152 2B9F                        CC            .byte	$CC
12153 2BA0                        CC            .byte	$CC
12154 2BA1                        CC            .byte	$CC
12155 2BA2                        CC            .byte	$CC
12156 2BA3                        7C            .byte	$7C
12157 2BA4                        0C            .byte	$C
12158 2BA5                        CC            .byte	$CC
12159 2BA6                        78            .byte	$78
12160 2BA7                        00            .byte	0
12161                                           ! 1317  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12162 2BA8                        00            .byte	0
12163 2BA9                        00            .byte	0
12164 2BAA                        E0            .byte	$E0
12165 2BAB                        60            .byte	$60
12166 2BAC                        60            .byte	$60
12167 2BAD                        6C            .byte	$6C
12168 2BAE                        76            .byte	$76
12169 2BAF                        66            .byte	$66
12170 2BB0                        66            .byte	$66
12171 2BB1                        66            .byte	$66
12172 2BB2                        66            .byte	$66
12173 2BB3                        E6            .byte	$E6
12174 2BB4                        00            .byte	0
12175 2BB5                        00            .byte	0
12176 2BB6                        00            .byte	0
12177 2BB7                        00            .byte	0
12178                                           ! 1318  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12179 2BB8                        00            .byte	0
12180 2BB9                        00            .byte	0
12181 2BBA                        18            .byte	$18
12182 2BBB                        18            .byte	$18
12183 2BBC                        00            .byte	0
12184 2BBD                        38            .byte	$38
12185 2BBE                        18            .byte	$18
12186 2BBF                        18            .byte	$18
12187 2BC0                        18            .byte	$18
12188 2BC1                        18            .byte	$18
12189 2BC2                        18            .byte	$18
12190 2BC3                        3C            .byte	$3C
12191 2BC4                        00            .byte	0
12192 2BC5                        00            .byte	0
12193 2BC6                        00            .byte	0
12194 2BC7                        00            .byte	0
12195                                           ! 1319  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12196 2BC8                        00            .byte	0
12197 2BC9                        00            .byte	0
12198 2BCA                        06            .byte	6
12199 2BCB                        06            .byte	6
12200 2BCC                        00            .byte	0
12201 2BCD                        0E            .byte	$E
12202 2BCE                        06            .byte	6
12203 2BCF                        06            .byte	6
12204 2BD0                        06            .byte	6
12205 2BD1                        06            .byte	6
12206 2BD2                        06            .byte	6
12207 2BD3                        06            .byte	6
12208 2BD4                        66            .byte	$66
12209 2BD5                        66            .byte	$66
12210 2BD6                        3C            .byte	$3C
12211 2BD7                        00            .byte	0
12212                                           ! 1320  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12213 2BD8                        00            .byte	0
12214 2BD9                        00            .byte	0
12215 2BDA                        E0            .byte	$E0
12216 2BDB                        60            .byte	$60
12217 2BDC                        60            .byte	$60
12218 2BDD                        66            .byte	$66
12219 2BDE                        6C            .byte	$6C
12220 2BDF                        78            .byte	$78
12221 2BE0                        78            .byte	$78
12222 2BE1                        6C            .byte	$6C
12223 2BE2                        66            .byte	$66
12224 2BE3                        E6            .byte	$E6
12225 2BE4                        00            .byte	0
12226 2BE5                        00            .byte	0
12227 2BE6                        00            .byte	0
12228 2BE7                        00            .byte	0
12229                                           ! 1321  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12230 2BE8                        00            .byte	0
12231 2BE9                        00            .byte	0
12232 2BEA                        38            .byte	$38
12233 2BEB                        18            .byte	$18
12234 2BEC                        18            .byte	$18
12235 2BED                        18            .byte	$18
12236 2BEE                        18            .byte	$18
12237 2BEF                        18            .byte	$18
12238 2BF0                        18            .byte	$18
12239 2BF1                        18            .byte	$18
12240 2BF2                        18            .byte	$18
12241 2BF3                        3C            .byte	$3C
12242 2BF4                        00            .byte	0
12243 2BF5                        00            .byte	0
12244 2BF6                        00            .byte	0
12245 2BF7                        00            .byte	0
12246                                           ! 1322  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12247 2BF8                        00            .byte	0
12248 2BF9                        00            .byte	0
12249 2BFA                        00            .byte	0
12250 2BFB                        00            .byte	0
12251 2BFC                        00            .byte	0
12252 2BFD                        E6            .byte	$E6
12253 2BFE                        FF            .byte	$FF
12254 2BFF                        DB            .byte	$DB
12255 2C00                        DB            .byte	$DB
12256 2C01                        DB            .byte	$DB
12257 2C02                        DB            .byte	$DB
12258 2C03                        DB            .byte	$DB
12259 2C04                        00            .byte	0
12260 2C05                        00            .byte	0
12261 2C06                        00            .byte	0
12262 2C07                        00            .byte	0
12263                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12264 2C08                        00            .byte	0
12265 2C09                        00            .byte	0
12266 2C0A                        00            .byte	0
12267 2C0B                        00            .byte	0
12268 2C0C                        00            .byte	0
12269 2C0D                        DC            .byte	$DC
12270 2C0E                        66            .byte	$66
12271 2C0F                        66            .byte	$66
12272 2C10                        66            .byte	$66
12273 2C11                        66            .byte	$66
12274 2C12                        66            .byte	$66
12275 2C13                        66            .byte	$66
12276 2C14                        00            .byte	0
12277 2C15                        00            .byte	0
12278 2C16                        00            .byte	0
12279 2C17                        00            .byte	0
12280                                           ! 1324  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12281 2C18                        00            .byte	0
12282 2C19                        00            .byte	0
12283 2C1A                        00            .byte	0
12284 2C1B                        00            .byte	0
12285 2C1C                        00            .byte	0
12286 2C1D                        7C            .byte	$7C
12287 2C1E                        C6            .byte	$C6
12288 2C1F                        C6            .byte	$C6
12289 2C20                        C6            .byte	$C6
12290 2C21                        C6            .byte	$C6
12291 2C22                        C6            .byte	$C6
12292 2C23                        7C            .byte	$7C
12293 2C24                        00            .byte	0
12294 2C25                        00            .byte	0
12295 2C26                        00            .byte	0
12296 2C27                        00            .byte	0
12297                                           ! 1325  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12298 2C28                        00            .byte	0
12299 2C29                        00            .byte	0
12300 2C2A                        00            .byte	0
12301 2C2B                        00            .byte	0
12302 2C2C                        00            .byte	0
12303 2C2D                        DC            .byte	$DC
12304 2C2E                        66            .byte	$66
12305 2C2F                        66            .byte	$66
12306 2C30                        66            .byte	$66
12307 2C31                        66            .byte	$66
12308 2C32                        66            .byte	$66
12309 2C33                        7C            .byte	$7C
12310 2C34                        60            .byte	$60
12311 2C35                        60            .byte	$60
12312 2C36                        F0            .byte	$F0
12313 2C37                        00            .byte	0
12314                                           ! 1326  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12315 2C38                        00            .byte	0
12316 2C39                        00            .byte	0
12317 2C3A                        00            .byte	0
12318 2C3B                        00            .byte	0
12319 2C3C                        00            .byte	0
12320 2C3D                        76            .byte	$76
12321 2C3E                        CC            .byte	$CC
12322 2C3F                        CC            .byte	$CC
12323 2C40                        CC            .byte	$CC
12324 2C41                        CC            .byte	$CC
12325 2C42                        CC            .byte	$CC
12326 2C43                        7C            .byte	$7C
12327 2C44                        0C            .byte	$C
12328 2C45                        0C            .byte	$C
12329 2C46                        1E            .byte	$1E
12330 2C47                        00            .byte	0
12331                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12332 2C48                        00            .byte	0
12333 2C49                        00            .byte	0
12334 2C4A                        00            .byte	0
12335 2C4B                        00            .byte	0
12336 2C4C                        00            .byte	0
12337 2C4D                        DC            .byte	$DC
12338 2C4E                        76            .byte	$76
12339 2C4F                        66            .byte	$66
12340 2C50                        60            .byte	$60
12341 2C51                        60            .byte	$60
12342 2C52                        60            .byte	$60
12343 2C53                        F0            .byte	$F0
12344 2C54                        00            .byte	0
12345 2C55                        00            .byte	0
12346 2C56                        00            .byte	0
12347 2C57                        00            .byte	0
12348                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12349 2C58                        00            .byte	0
12350 2C59                        00            .byte	0
12351 2C5A                        00            .byte	0
12352 2C5B                        00            .byte	0
12353 2C5C                        00            .byte	0
12354 2C5D                        7C            .byte	$7C
12355 2C5E                        C6            .byte	$C6
12356 2C5F                        60            .byte	$60
12357 2C60                        38            .byte	$38
12358 2C61                        0C            .byte	$C
12359 2C62                        C6            .byte	$C6
12360 2C63                        7C            .byte	$7C
12361 2C64                        00            .byte	0
12362 2C65                        00            .byte	0
12363 2C66                        00            .byte	0
12364 2C67                        00            .byte	0
12365                                           ! 1329  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12366 2C68                        00            .byte	0
12367 2C69                        00            .byte	0
12368 2C6A                        10            .byte	$10
12369 2C6B                        30            .byte	$30
12370 2C6C                        30            .byte	$30
12371 2C6D                        FC            .byte	$FC
12372 2C6E                        30            .byte	$30
12373 2C6F                        30            .byte	$30
12374 2C70                        30            .byte	$30
12375 2C71                        30            .byte	$30
12376 2C72                        36            .byte	$36
12377 2C73                        1C            .byte	$1C
12378 2C74                        00            .byte	0
12379 2C75                        00            .byte	0
12380 2C76                        00            .byte	0
12381 2C77                        00            .byte	0
12382                                           ! 1330  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12383 2C78                        00            .byte	0
12384 2C79                        00            .byte	0
12385 2C7A                        00            .byte	0
12386 2C7B                        00            .byte	0
12387 2C7C                        00            .byte	0
12388 2C7D                        CC            .byte	$CC
12389 2C7E                        CC            .byte	$CC
12390 2C7F                        CC            .byte	$CC
12391 2C80                        CC            .byte	$CC
12392 2C81                        CC            .byte	$CC
12393 2C82                        CC            .byte	$CC
12394 2C83                        76            .byte	$76
12395 2C84                        00            .byte	0
12396 2C85                        00            .byte	0
12397 2C86                        00            .byte	0
12398 2C87                        00            .byte	0
12399                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0
12400 2C88                        00            .byte	0
12401 2C89                        00            .byte	0
12402 2C8A                        00            .byte	0
12403 2C8B                        00            .byte	0
12404 2C8C                        00            .byte	0
12405 2C8D                        C3            .byte	$C3
12406                                           ! 1331 xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12407 2C8E                        C3            .byte	$C3
12408 2C8F                        C3            .byte	$C3
12409 2C90                        C3            .byte	$C3
12410 2C91                        66            .byte	$66
12411 2C92                        3C            .byte	$3C
12412 2C93                        18            .byte	$18
12413 2C94                        00            .byte	0
12414 2C95                        00            .byte	0
12415 2C96                        00            .byte	0
12416 2C97                        00            .byte	0
12417                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12418 2C98                        00            .byte	0
12419 2C99                        00            .byte	0
12420 2C9A                        00            .byte	0
12421 2C9B                        00            .byte	0
12422 2C9C                        00            .byte	0
12423 2C9D                        C3            .byte	$C3
12424 2C9E                        C3            .byte	$C3
12425 2C9F                        C3            .byte	$C3
12426 2CA0                        DB            .byte	$DB
12427 2CA1                        DB            .byte	$DB
12428 2CA2                        FF            .byte	$FF
12429 2CA3                        66            .byte	$66
12430 2CA4                        00            .byte	0
12431 2CA5                        00            .byte	0
12432 2CA6                        00            .byte	0
12433 2CA7                        00            .byte	0
12434                                           ! 1333  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12435 2CA8                        00            .byte	0
12436 2CA9                        00            .byte	0
12437 2CAA                        00            .byte	0
12438 2CAB                        00            .byte	0
12439 2CAC                        00            .byte	0
12440 2CAD                        C3            .byte	$C3
12441 2CAE                        66            .byte	$66
12442 2CAF                        3C            .byte	$3C
12443 2CB0                        18            .byte	$18
12444 2CB1                        3C            .byte	$3C
12445 2CB2                        66            .byte	$66
12446 2CB3                        C3            .byte	$C3
12447 2CB4                        00            .byte	0
12448 2CB5                        00            .byte	0
12449 2CB6                        00            .byte	0
12450 2CB7                        00            .byte	0
12451                                           ! 1334  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12452 2CB8                        00            .byte	0
12453 2CB9                        00            .byte	0
12454 2CBA                        00            .byte	0
12455 2CBB                        00            .byte	0
12456 2CBC                        00            .byte	0
12457 2CBD                        C6            .byte	$C6
12458 2CBE                        C6            .byte	$C6
12459 2CBF                        C6            .byte	$C6
12460 2CC0                        C6            .byte	$C6
12461 2CC1                        C6            .byte	$C6
12462 2CC2                        C6            .byte	$C6
12463 2CC3                        7E            .byte	$7E
12464 2CC4                        06            .byte	6
12465 2CC5                        0C            .byte	$C
12466 2CC6                        F8            .byte	$F8
12467 2CC7                        00            .byte	0
12468                                           ! 1335  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12469 2CC8                        00            .byte	0
12470 2CC9                        00            .byte	0
12471 2CCA                        00            .byte	0
12472 2CCB                        00            .byte	0
12473 2CCC                        00            .byte	0
12474 2CCD                        FE            .byte	$FE
12475 2CCE                        CC            .byte	$CC
12476 2CCF                        18            .byte	$18
12477 2CD0                        30            .byte	$30
12478 2CD1                        60            .byte	$60
12479 2CD2                        C6            .byte	$C6
12480 2CD3                        FE            .byte	$FE
12481 2CD4                        00            .byte	0
12482 2CD5                        00            .byte	0
12483 2CD6                        00            .byte	0
12484 2CD7                        00            .byte	0
12485                                           ! 1336  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12486 2CD8                        00            .byte	0
12487 2CD9                        00            .byte	0
12488 2CDA                        0E            .byte	$E
12489 2CDB                        18            .byte	$18
12490 2CDC                        18            .byte	$18
12491 2CDD                        18            .byte	$18
12492 2CDE                        70            .byte	$70
12493 2CDF                        18            .byte	$18
12494 2CE0                        18            .byte	$18
12495 2CE1                        18            .byte	$18
12496 2CE2                        18            .byte	$18
12497 2CE3                        0E            .byte	$E
12498 2CE4                        00            .byte	0
12499 2CE5                        00            .byte	0
12500 2CE6                        00            .byte	0
12501 2CE7                        00            .byte	0
12502                                           ! 1337  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12503 2CE8                        00            .byte	0
12504 2CE9                        00            .byte	0
12505 2CEA                        18            .byte	$18
12506 2CEB                        18            .byte	$18
12507 2CEC                        18            .byte	$18
12508 2CED                        18            .byte	$18
12509 2CEE                        00            .byte	0
12510 2CEF                        18            .byte	$18
12511 2CF0                        18            .byte	$18
12512 2CF1                        18            .byte	$18
12513 2CF2                        18            .byte	$18
12514 2CF3                        18            .byte	$18
12515 2CF4                        00            .byte	0
12516 2CF5                        00            .byte	0
12517 2CF6                        00            .byte	0
12518 2CF7                        00            .byte	0
12519                                           ! 1338  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12520 2CF8                        00            .byte	0
12521 2CF9                        00            .byte	0
12522 2CFA                        70            .byte	$70
12523 2CFB                        18            .byte	$18
12524 2CFC                        18            .byte	$18
12525 2CFD                        18            .byte	$18
12526 2CFE                        0E            .byte	$E
12527 2CFF                        18            .byte	$18
12528 2D00                        18            .byte	$18
12529 2D01                        18            .byte	$18
12530 2D02                        18            .byte	$18
12531 2D03                        70            .byte	$70
12532 2D04                        00            .byte	0
12533 2D05                        00            .byte	0
12534 2D06                        00            .byte	0
12535 2D07                        00            .byte	0
12536                                           ! 1339  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12537 2D08                        00            .byte	0
12538 2D09                        00            .byte	0
12539 2D0A                        76            .byte	$76
12540 2D0B                        DC            .byte	$DC
12541 2D0C                        00            .byte	0
12542 2D0D                        00            .byte	0
12543 2D0E                        00            .byte	0
12544 2D0F                        00            .byte	0
12545 2D10                        00            .byte	0
12546 2D11                        00            .byte	0
12547 2D12                        00            .byte	0
12548 2D13                        00            .byte	0
12549 2D14                        00            .byte	0
12550 2D15                        00            .byte	0
12551 2D16                        00            .byte	0
12552 2D17                        00            .byte	0
12553                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12554 2D18                        00            .byte	0
12555 2D19                        00            .byte	0
12556 2D1A                        00            .byte	0
12557 2D1B                        00            .byte	0
12558 2D1C                        10            .byte	$10
12559 2D1D                        38            .byte	$38
12560 2D1E                        6C            .byte	$6C
12561 2D1F                        C6            .byte	$C6
12562 2D20                        C6            .byte	$C6
12563 2D21                        C6            .byte	$C6
12564 2D22                        FE            .byte	$FE
12565 2D23                        00            .byte	0
12566 2D24                        00            .byte	0
12567 2D25                        00            .byte	0
12568 2D26                        00            .byte	0
12569 2D27                        00            .byte	0
12570                                           ! 1341  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12571 2D28                        00            .byte	0
12572 2D29                        00            .byte	0
12573 2D2A                        3C            .byte	$3C
12574 2D2B                        66            .byte	$66
12575 2D2C                        C2            .byte	$C2
12576 2D2D                        C0            .byte	$C0
12577 2D2E                        C0            .byte	$C0
12578 2D2F                        C0            .byte	$C0
12579 2D30                        C2            .byte	$C2
12580 2D31                        66            .byte	$66
12581 2D32                        3C            .byte	$3C
12582 2D33                        0C            .byte	$C
12583 2D34                        06            .byte	6
12584 2D35                        7C            .byte	$7C
12585 2D36                        00            .byte	0
12586 2D37                        00            .byte	0
12587                                           ! 1342  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12588 2D38                        00            .byte	0
12589 2D39                        00            .byte	0
12590 2D3A                        CC            .byte	$CC
12591 2D3B                        00            .byte	0
12592 2D3C                        00            .byte	0
12593 2D3D                        CC            .byte	$CC
12594 2D3E                        CC            .byte	$CC
12595 2D3F                        CC            .byte	$CC
12596 2D40                        CC            .byte	$CC
12597 2D41                        CC            .byte	$CC
12598 2D42                        CC            .byte	$CC
12599 2D43                        76            .byte	$76
12600 2D44                        00            .byte	0
12601 2D45                        00            .byte	0
12602 2D46                        00            .byte	0
12603 2D47                        00            .byte	0
12604                                           ! 1343  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12605 2D48                        00            .byte	0
12606 2D49                        0C            .byte	$C
12607 2D4A                        18            .byte	$18
12608 2D4B                        30            .byte	$30
12609 2D4C                        00            .byte	0
12610 2D4D                        7C            .byte	$7C
12611 2D4E                        C6            .byte	$C6
12612 2D4F                        FE            .byte	$FE
12613 2D50                        C0            .byte	$C0
12614 2D51                        C0            .byte	$C0
12615 2D52                        C6            .byte	$C6
12616 2D53                        7C            .byte	$7C
12617 2D54                        00            .byte	0
12618 2D55                        00            .byte	0
12619 2D56                        00            .byte	0
12620 2D57                        00            .byte	0
12621                                           ! 1344  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12622 2D58                        00            .byte	0
12623 2D59                        10            .byte	$10
12624 2D5A                        38            .byte	$38
12625 2D5B                        6C            .byte	$6C
12626 2D5C                        00            .byte	0
12627 2D5D                        78            .byte	$78
12628 2D5E                        0C            .byte	$C
12629 2D5F                        7C            .byte	$7C
12630 2D60                        CC            .byte	$CC
12631 2D61                        CC            .byte	$CC
12632 2D62                        CC            .byte	$CC
12633 2D63                        76            .byte	$76
12634 2D64                        00            .byte	0
12635 2D65                        00            .byte	0
12636 2D66                        00            .byte	0
12637 2D67                        00            .byte	0
12638                                           ! 1345  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12639 2D68                        00            .byte	0
12640 2D69                        00            .byte	0
12641 2D6A                        CC            .byte	$CC
12642 2D6B                        00            .byte	0
12643 2D6C                        00            .byte	0
12644 2D6D                        78            .byte	$78
12645 2D6E                        0C            .byte	$C
12646 2D6F                        7C            .byte	$7C
12647 2D70                        CC            .byte	$CC
12648 2D71                        CC            .byte	$CC
12649 2D72                        CC            .byte	$CC
12650 2D73                        76            .byte	$76
12651 2D74                        00            .byte	0
12652 2D75                        00            .byte	0
12653 2D76                        00            .byte	0
12654 2D77                        00            .byte	0
12655                                           ! 1346  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12656 2D78                        00            .byte	0
12657 2D79                        60            .byte	$60
12658 2D7A                        30            .byte	$30
12659 2D7B                        18            .byte	$18
12660 2D7C                        00            .byte	0
12661 2D7D                        78            .byte	$78
12662 2D7E                        0C            .byte	$C
12663 2D7F                        7C            .byte	$7C
12664 2D80                        CC            .byte	$CC
12665 2D81                        CC            .byte	$CC
12666 2D82                        CC            .byte	$CC
12667 2D83                        76            .byte	$76
12668 2D84                        00            .byte	0
12669 2D85                        00            .byte	0
12670 2D86                        00            .byte	0
12671 2D87                        00            .byte	0
12672                                           ! 1347  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12673 2D88                        00            .byte	0
12674 2D89                        38            .byte	$38
12675 2D8A                        6C            .byte	$6C
12676 2D8B                        38            .byte	$38
12677 2D8C                        00            .byte	0
12678 2D8D                        78            .byte	$78
12679 2D8E                        0C            .byte	$C
12680 2D8F                        7C            .byte	$7C
12681 2D90                        CC            .byte	$CC
12682 2D91                        CC            .byte	$CC
12683 2D92                        CC            .byte	$CC
12684 2D93                        76            .byte	$76
12685 2D94                        00            .byte	0
12686 2D95                        00            .byte	0
12687 2D96                        00            .byte	0
12688 2D97                        00            .byte	0
12689                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12690 2D98                        00            .byte	0
12691 2D99                        00            .byte	0
12692 2D9A                        00            .byte	0
12693 2D9B                        00            .byte	0
12694 2D9C                        3C            .byte	$3C
12695 2D9D                        66            .byte	$66
12696 2D9E                        60            .byte	$60
12697 2D9F                        60            .byte	$60
12698 2DA0                        66            .byte	$66
12699 2DA1                        3C            .byte	$3C
12700 2DA2                        0C            .byte	$C
12701 2DA3                        06            .byte	6
12702 2DA4                        3C            .byte	$3C
12703 2DA5                        00            .byte	0
12704 2DA6                        00            .byte	0
12705 2DA7                        00            .byte	0
12706                                           ! 1349  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12707 2DA8                        00            .byte	0
12708 2DA9                        10            .byte	$10
12709 2DAA                        38            .byte	$38
12710 2DAB                        6C            .byte	$6C
12711 2DAC                        00            .byte	0
12712 2DAD                        7C            .byte	$7C
12713 2DAE                        C6            .byte	$C6
12714 2DAF                        FE            .byte	$FE
12715 2DB0                        C0            .byte	$C0
12716 2DB1                        C0            .byte	$C0
12717 2DB2                        C6            .byte	$C6
12718 2DB3                        7C            .byte	$7C
12719 2DB4                        00            .byte	0
12720 2DB5                        00            .byte	0
12721 2DB6                        00            .byte	0
12722 2DB7                        00            .byte	0
12723                                           ! 1350  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12724 2DB8                        00            .byte	0
12725 2DB9                        00            .byte	0
12726 2DBA                        C6            .byte	$C6
12727 2DBB                        00            .byte	0
12728 2DBC                        00            .byte	0
12729 2DBD                        7C            .byte	$7C
12730 2DBE                        C6            .byte	$C6
12731 2DBF                        FE            .byte	$FE
12732 2DC0                        C0            .byte	$C0
12733 2DC1                        C0            .byte	$C0
12734 2DC2                        C6            .byte	$C6
12735 2DC3                        7C            .byte	$7C
12736 2DC4                        00            .byte	0
12737 2DC5                        00            .byte	0
12738 2DC6                        00            .byte	0
12739 2DC7                        00            .byte	0
12740                                           ! 1351  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12741 2DC8                        00            .byte	0
12742 2DC9                        60            .byte	$60
12743 2DCA                        30            .byte	$30
12744 2DCB                        18            .byte	$18
12745 2DCC                        00            .byte	0
12746 2DCD                        7C            .byte	$7C
12747 2DCE                        C6            .byte	$C6
12748 2DCF                        FE            .byte	$FE
12749 2DD0                        C0            .byte	$C0
12750 2DD1                        C0            .byte	$C0
12751 2DD2                        C6            .byte	$C6
12752 2DD3                        7C            .byte	$7C
12753 2DD4                        00            .byte	0
12754 2DD5                        00            .byte	0
12755 2DD6                        00            .byte	0
12756 2DD7                        00            .byte	0
12757                                           ! 1352  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 
12758 2DD8                        00            .byte	0
12759 2DD9                        00            .byte	0
12760 2DDA                        66            .byte	$66
12761 2DDB                        00            .byte	0
12762 2DDC                        00            .byte	0
12763 2DDD                        38            .byte	$38
12764 2DDE                        18            .byte	$18
12765 2DDF                        18            .byte	$18
12766                                           ! 1352 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12767 2DE0                        18            .byte	$18
12768 2DE1                        18            .byte	$18
12769 2DE2                        18            .byte	$18
12770 2DE3                        3C            .byte	$3C
12771 2DE4                        00            .byte	0
12772 2DE5                        00            .byte	0
12773 2DE6                        00            .byte	0
12774 2DE7                        00            .byte	0
12775                                           ! 1353  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12776 2DE8                        00            .byte	0
12777 2DE9                        18            .byte	$18
12778 2DEA                        3C            .byte	$3C
12779 2DEB                        66            .byte	$66
12780 2DEC                        00            .byte	0
12781 2DED                        38            .byte	$38
12782 2DEE                        18            .byte	$18
12783 2DEF                        18            .byte	$18
12784 2DF0                        18            .byte	$18
12785 2DF1                        18            .byte	$18
12786 2DF2                        18            .byte	$18
12787 2DF3                        3C            .byte	$3C
12788 2DF4                        00            .byte	0
12789 2DF5                        00            .byte	0
12790 2DF6                        00            .byte	0
12791 2DF7                        00            .byte	0
12792                                           ! 1354  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12793 2DF8                        00            .byte	0
12794 2DF9                        60            .byte	$60
12795 2DFA                        30            .byte	$30
12796 2DFB                        18            .byte	$18
12797 2DFC                        00            .byte	0
12798 2DFD                        38            .byte	$38
12799 2DFE                        18            .byte	$18
12800 2DFF                        18            .byte	$18
12801 2E00                        18            .byte	$18
12802 2E01                        18            .byte	$18
12803 2E02                        18            .byte	$18
12804 2E03                        3C            .byte	$3C
12805 2E04                        00            .byte	0
12806 2E05                        00            .byte	0
12807 2E06                        00            .byte	0
12808 2E07                        00            .byte	0
12809                                           ! 1355  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12810 2E08                        00            .byte	0
12811 2E09                        C6            .byte	$C6
12812 2E0A                        00            .byte	0
12813 2E0B                        10            .byte	$10
12814 2E0C                        38            .byte	$38
12815 2E0D                        6C            .byte	$6C
12816 2E0E                        C6            .byte	$C6
12817 2E0F                        C6            .byte	$C6
12818 2E10                        FE            .byte	$FE
12819 2E11                        C6            .byte	$C6
12820 2E12                        C6            .byte	$C6
12821 2E13                        C6            .byte	$C6
12822 2E14                        00            .byte	0
12823 2E15                        00            .byte	0
12824 2E16                        00            .byte	0
12825 2E17                        00            .byte	0
12826                                           ! 1356  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12827 2E18                        38            .byte	$38
12828 2E19                        6C            .byte	$6C
12829 2E1A                        38            .byte	$38
12830 2E1B                        00            .byte	0
12831 2E1C                        38            .byte	$38
12832 2E1D                        6C            .byte	$6C
12833 2E1E                        C6            .byte	$C6
12834 2E1F                        C6            .byte	$C6
12835 2E20                        FE            .byte	$FE
12836 2E21                        C6            .byte	$C6
12837 2E22                        C6            .byte	$C6
12838 2E23                        C6            .byte	$C6
12839 2E24                        00            .byte	0
12840 2E25                        00            .byte	0
12841 2E26                        00            .byte	0
12842 2E27                        00            .byte	0
12843                                           ! 1357  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12844 2E28                        18            .byte	$18
12845 2E29                        30            .byte	$30
12846 2E2A                        60            .byte	$60
12847 2E2B                        00            .byte	0
12848 2E2C                        FE            .byte	$FE
12849 2E2D                        66            .byte	$66
12850 2E2E                        60            .byte	$60
12851 2E2F                        7C            .byte	$7C
12852 2E30                        60            .byte	$60
12853 2E31                        60            .byte	$60
12854 2E32                        66            .byte	$66
12855 2E33                        FE            .byte	$FE
12856 2E34                        00            .byte	0
12857 2E35                        00            .byte	0
12858 2E36                        00            .byte	0
12859 2E37                        00            .byte	0
12860                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12861 2E38                        00            .byte	0
12862 2E39                        00            .byte	0
12863 2E3A                        00            .byte	0
12864 2E3B                        00            .byte	0
12865 2E3C                        00            .byte	0
12866 2E3D                        6E            .byte	$6E
12867 2E3E                        3B            .byte	$3B
12868 2E3F                        1B            .byte	$1B
12869 2E40                        7E            .byte	$7E
12870 2E41                        D8            .byte	$D8
12871 2E42                        DC            .byte	$DC
12872 2E43                        77            .byte	$77
12873 2E44                        00            .byte	0
12874 2E45                        00            .byte	0
12875 2E46                        00            .byte	0
12876 2E47                        00            .byte	0
12877                                           ! 1359  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12878 2E48                        00            .byte	0
12879 2E49                        00            .byte	0
12880 2E4A                        3E            .byte	$3E
12881 2E4B                        6C            .byte	$6C
12882 2E4C                        CC            .byte	$CC
12883 2E4D                        CC            .byte	$CC
12884 2E4E                        FE            .byte	$FE
12885 2E4F                        CC            .byte	$CC
12886 2E50                        CC            .byte	$CC
12887 2E51                        CC            .byte	$CC
12888 2E52                        CC            .byte	$CC
12889 2E53                        CE            .byte	$CE
12890 2E54                        00            .byte	0
12891 2E55                        00            .byte	0
12892 2E56                        00            .byte	0
12893 2E57                        00            .byte	0
12894                                           ! 1360  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12895 2E58                        00            .byte	0
12896 2E59                        10            .byte	$10
12897 2E5A                        38            .byte	$38
12898 2E5B                        6C            .byte	$6C
12899 2E5C                        00            .byte	0
12900 2E5D                        7C            .byte	$7C
12901 2E5E                        C6            .byte	$C6
12902 2E5F                        C6            .byte	$C6
12903 2E60                        C6            .byte	$C6
12904 2E61                        C6            .byte	$C6
12905 2E62                        C6            .byte	$C6
12906 2E63                        7C            .byte	$7C
12907 2E64                        00            .byte	0
12908 2E65                        00            .byte	0
12909 2E66                        00            .byte	0
12910 2E67                        00            .byte	0
12911                                           ! 1361  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12912 2E68                        00            .byte	0
12913 2E69                        00            .byte	0
12914 2E6A                        C6            .byte	$C6
12915 2E6B                        00            .byte	0
12916 2E6C                        00            .byte	0
12917 2E6D                        7C            .byte	$7C
12918 2E6E                        C6            .byte	$C6
12919 2E6F                        C6            .byte	$C6
12920 2E70                        C6            .byte	$C6
12921 2E71                        C6            .byte	$C6
12922 2E72                        C6            .byte	$C6
12923 2E73                        7C            .byte	$7C
12924 2E74                        00            .byte	0
12925 2E75                        00            .byte	0
12926 2E76                        00            .byte	0
12927 2E77                        00            .byte	0
12928                                           ! 1362  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12929 2E78                        00            .byte	0
12930 2E79                        60            .byte	$60
12931 2E7A                        30            .byte	$30
12932 2E7B                        18            .byte	$18
12933 2E7C                        00            .byte	0
12934 2E7D                        7C            .byte	$7C
12935 2E7E                        C6            .byte	$C6
12936 2E7F                        C6            .byte	$C6
12937 2E80                        C6            .byte	$C6
12938 2E81                        C6            .byte	$C6
12939 2E82                        C6            .byte	$C6
12940 2E83                        7C            .byte	$7C
12941 2E84                        00            .byte	0
12942 2E85                        00            .byte	0
12943 2E86                        00            .byte	0
12944 2E87                        00            .byte	0
12945                                           ! 1363  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12946 2E88                        00            .byte	0
12947 2E89                        30            .byte	$30
12948 2E8A                        78            .byte	$78
12949 2E8B                        CC            .byte	$CC
12950 2E8C                        00            .byte	0
12951 2E8D                        CC            .byte	$CC
12952 2E8E                        CC            .byte	$CC
12953 2E8F                        CC            .byte	$CC
12954 2E90                        CC            .byte	$CC
12955 2E91                        CC            .byte	$CC
12956 2E92                        CC            .byte	$CC
12957 2E93                        76            .byte	$76
12958 2E94                        00            .byte	0
12959 2E95                        00            .byte	0
12960 2E96                        00            .byte	0
12961 2E97                        00            .byte	0
12962                                           ! 1364  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12963 2E98                        00            .byte	0
12964 2E99                        60            .byte	$60
12965 2E9A                        30            .byte	$30
12966 2E9B                        18            .byte	$18
12967 2E9C                        00            .byte	0
12968 2E9D                        CC            .byte	$CC
12969 2E9E                        CC            .byte	$CC
12970 2E9F                        CC            .byte	$CC
12971 2EA0                        CC            .byte	$CC
12972 2EA1                        CC            .byte	$CC
12973 2EA2                        CC            .byte	$CC
12974 2EA3                        76            .byte	$76
12975 2EA4                        00            .byte	0
12976 2EA5                        00            .byte	0
12977 2EA6                        00            .byte	0
12978 2EA7                        00            .byte	0
12979                                           ! 1365  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
12980 2EA8                        00            .byte	0
12981 2EA9                        00            .byte	0
12982 2EAA                        C6            .byte	$C6
12983 2EAB                        00            .byte	0
12984 2EAC                        00            .byte	0
12985 2EAD                        C6            .byte	$C6
12986 2EAE                        C6            .byte	$C6
12987 2EAF                        C6            .byte	$C6
12988 2EB0                        C6            .byte	$C6
12989 2EB1                        C6            .byte	$C6
12990 2EB2                        C6            .byte	$C6
12991 2EB3                        7E            .byte	$7E
12992 2EB4                        06            .byte	6
12993 2EB5                        0C            .byte	$C
12994 2EB6                        78            .byte	$78
12995 2EB7                        00            .byte	0
12996                                           ! 1366  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12997 2EB8                        00            .byte	0
12998 2EB9                        C6            .byte	$C6
12999 2EBA                        00            .byte	0
13000 2EBB                        7C            .byte	$7C
13001 2EBC                        C6            .byte	$C6
13002 2EBD                        C6            .byte	$C6
13003 2EBE                        C6            .byte	$C6
13004 2EBF                        C6            .byte	$C6
13005 2EC0                        C6            .byte	$C6
13006 2EC1                        C6            .byte	$C6
13007 2EC2                        C6            .byte	$C6
13008 2EC3                        7C            .byte	$7C
13009 2EC4                        00            .byte	0
13010 2EC5                        00            .byte	0
13011 2EC6                        00            .byte	0
13012 2EC7                        00            .byte	0
13013                                           ! 1367  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13014 2EC8                        00            .byte	0
13015 2EC9                        C6            .byte	$C6
13016 2ECA                        00            .byte	0
13017 2ECB                        C6            .byte	$C6
13018 2ECC                        C6            .byte	$C6
13019 2ECD                        C6            .byte	$C6
13020 2ECE                        C6            .byte	$C6
13021 2ECF                        C6            .byte	$C6
13022 2ED0                        C6            .byte	$C6
13023 2ED1                        C6            .byte	$C6
13024 2ED2                        C6            .byte	$C6
13025 2ED3                        7C            .byte	$7C
13026 2ED4                        00            .byte	0
13027 2ED5                        00            .byte	0
13028 2ED6                        00            .byte	0
13029 2ED7                        00            .byte	0
13030                                           ! 1368  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13031 2ED8                        00            .byte	0
13032 2ED9                        18            .byte	$18
13033 2EDA                        18            .byte	$18
13034 2EDB                        7E            .byte	$7E
13035 2EDC                        C3            .byte	$C3
13036 2EDD                        C0            .byte	$C0
13037 2EDE                        C0            .byte	$C0
13038 2EDF                        C0            .byte	$C0
13039 2EE0                        C3            .byte	$C3
13040 2EE1                        7E            .byte	$7E
13041 2EE2                        18            .byte	$18
13042 2EE3                        18            .byte	$18
13043 2EE4                        00            .byte	0
13044 2EE5                        00            .byte	0
13045 2EE6                        00            .byte	0
13046 2EE7                        00            .byte	0
13047                                           ! 1369  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13048 2EE8                        00            .byte	0
13049 2EE9                        38            .byte	$38
13050 2EEA                        6C            .byte	$6C
13051 2EEB                        64            .byte	$64
13052 2EEC                        60            .byte	$60
13053 2EED                        F0            .byte	$F0
13054 2EEE                        60            .byte	$60
13055 2EEF                        60            .byte	$60
13056 2EF0                        60            .byte	$60
13057 2EF1                        60            .byte	$60
13058 2EF2                        E6            .byte	$E6
13059 2EF3                        FC            .byte	$FC
13060 2EF4                        00            .byte	0
13061 2EF5                        00            .byte	0
13062 2EF6                        00            .byte	0
13063 2EF7                        00            .byte	0
13064                                           ! 1370  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13065 2EF8                        00            .byte	0
13066 2EF9                        00            .byte	0
13067 2EFA                        C3            .byte	$C3
13068 2EFB                        66            .byte	$66
13069 2EFC                        3C            .byte	$3C
13070 2EFD                        18            .byte	$18
13071 2EFE                        FF            .byte	$FF
13072 2EFF                        18            .byte	$18
13073 2F00                        FF            .byte	$FF
13074 2F01                        18            .byte	$18
13075 2F02                        18            .byte	$18
13076 2F03                        18            .byte	$18
13077 2F04                        00            .byte	0
13078 2F05                        00            .byte	0
13079 2F06                        00            .byte	0
13080 2F07                        00            .byte	0
13081                                           ! 1371  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13082 2F08                        00            .byte	0
13083 2F09                        FC            .byte	$FC
13084 2F0A                        66            .byte	$66
13085 2F0B                        66            .byte	$66
13086 2F0C                        7C            .byte	$7C
13087 2F0D                        62            .byte	$62
13088 2F0E                        66            .byte	$66
13089 2F0F                        6F            .byte	$6F
13090 2F10                        66            .byte	$66
13091 2F11                        66            .byte	$66
13092 2F12                        66            .byte	$66
13093 2F13                        F3            .byte	$F3
13094 2F14                        00            .byte	0
13095 2F15                        00            .byte	0
13096 2F16                        00            .byte	0
13097 2F17                        00            .byte	0
13098                                           ! 1372  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13099 2F18                        00            .byte	0
13100 2F19                        0E            .byte	$E
13101 2F1A                        1B            .byte	$1B
13102 2F1B                        18            .byte	$18
13103 2F1C                        18            .byte	$18
13104 2F1D                        18            .byte	$18
13105 2F1E                        7E            .byte	$7E
13106 2F1F                        18            .byte	$18
13107 2F20                        18            .byte	$18
13108 2F21                        18            .byte	$18
13109 2F22                        18            .byte	$18
13110 2F23                        18            .byte	$18
13111 2F24                        D8            .byte	$D8
13112 2F25                        70            .byte	$70
13113 2F26                        00            .byte	0
13114 2F27                        00            .byte	0
13115                                           ! 1373  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc,
13116 2F28                        00            .byte	0
13117 2F29                        18            .byte	$18
13118 2F2A                        30            .byte	$30
13119 2F2B                        60            .byte	$60
13120 2F2C                        00            .byte	0
13121 2F2D                        78            .byte	$78
13122 2F2E                        0C            .byte	$C
13123 2F2F                        7C            .byte	$7C
13124 2F30                        CC            .byte	$CC
13125                                           ! 1373  0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13126 2F31                        CC            .byte	$CC
13127 2F32                        CC            .byte	$CC
13128 2F33                        76            .byte	$76
13129 2F34                        00            .byte	0
13130 2F35                        00            .byte	0
13131 2F36                        00            .byte	0
13132 2F37                        00            .byte	0
13133                                           ! 1374  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13134 2F38                        00            .byte	0
13135 2F39                        0C            .byte	$C
13136 2F3A                        18            .byte	$18
13137 2F3B                        30            .byte	$30
13138 2F3C                        00            .byte	0
13139 2F3D                        38            .byte	$38
13140 2F3E                        18            .byte	$18
13141 2F3F                        18            .byte	$18
13142 2F40                        18            .byte	$18
13143 2F41                        18            .byte	$18
13144 2F42                        18            .byte	$18
13145 2F43                        3C            .byte	$3C
13146 2F44                        00            .byte	0
13147 2F45                        00            .byte	0
13148 2F46                        00            .byte	0
13149 2F47                        00            .byte	0
13150                                           ! 1375  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13151 2F48                        00            .byte	0
13152 2F49                        18            .byte	$18
13153 2F4A                        30            .byte	$30
13154 2F4B                        60            .byte	$60
13155 2F4C                        00            .byte	0
13156 2F4D                        7C            .byte	$7C
13157 2F4E                        C6            .byte	$C6
13158 2F4F                        C6            .byte	$C6
13159 2F50                        C6            .byte	$C6
13160 2F51                        C6            .byte	$C6
13161 2F52                        C6            .byte	$C6
13162 2F53                        7C            .byte	$7C
13163 2F54                        00            .byte	0
13164 2F55                        00            .byte	0
13165 2F56                        00            .byte	0
13166 2F57                        00            .byte	0
13167                                           ! 1376  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13168 2F58                        00            .byte	0
13169 2F59                        18            .byte	$18
13170 2F5A                        30            .byte	$30
13171 2F5B                        60            .byte	$60
13172 2F5C                        00            .byte	0
13173 2F5D                        CC            .byte	$CC
13174 2F5E                        CC            .byte	$CC
13175 2F5F                        CC            .byte	$CC
13176 2F60                        CC            .byte	$CC
13177 2F61                        CC            .byte	$CC
13178 2F62                        CC            .byte	$CC
13179 2F63                        76            .byte	$76
13180 2F64                        00            .byte	0
13181 2F65                        00            .byte	0
13182 2F66                        00            .byte	0
13183 2F67                        00            .byte	0
13184                                           ! 1377  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13185 2F68                        00            .byte	0
13186 2F69                        00            .byte	0
13187 2F6A                        76            .byte	$76
13188 2F6B                        DC            .byte	$DC
13189 2F6C                        00            .byte	0
13190 2F6D                        DC            .byte	$DC
13191 2F6E                        66            .byte	$66
13192 2F6F                        66            .byte	$66
13193 2F70                        66            .byte	$66
13194 2F71                        66            .byte	$66
13195 2F72                        66            .byte	$66
13196 2F73                        66            .byte	$66
13197 2F74                        00            .byte	0
13198 2F75                        00            .byte	0
13199 2F76                        00            .byte	0
13200 2F77                        00            .byte	0
13201                                           ! 1378  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13202 2F78                        76            .byte	$76
13203 2F79                        DC            .byte	$DC
13204 2F7A                        00            .byte	0
13205 2F7B                        C6            .byte	$C6
13206 2F7C                        E6            .byte	$E6
13207 2F7D                        F6            .byte	$F6
13208 2F7E                        FE            .byte	$FE
13209 2F7F                        DE            .byte	$DE
13210 2F80                        CE            .byte	$CE
13211 2F81                        C6            .byte	$C6
13212 2F82                        C6            .byte	$C6
13213 2F83                        C6            .byte	$C6
13214 2F84                        00            .byte	0
13215 2F85                        00            .byte	0
13216 2F86                        00            .byte	0
13217 2F87                        00            .byte	0
13218                                           ! 1379  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13219 2F88                        00            .byte	0
13220 2F89                        3C            .byte	$3C
13221 2F8A                        6C            .byte	$6C
13222 2F8B                        6C            .byte	$6C
13223 2F8C                        3E            .byte	$3E
13224 2F8D                        00            .byte	0
13225 2F8E                        7E            .byte	$7E
13226 2F8F                        00            .byte	0
13227 2F90                        00            .byte	0
13228 2F91                        00            .byte	0
13229 2F92                        00            .byte	0
13230 2F93                        00            .byte	0
13231 2F94                        00            .byte	0
13232 2F95                        00            .byte	0
13233 2F96                        00            .byte	0
13234 2F97                        00            .byte	0
13235                                           ! 1380  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13236 2F98                        00            .byte	0
13237 2F99                        38            .byte	$38
13238 2F9A                        6C            .byte	$6C
13239 2F9B                        6C            .byte	$6C
13240 2F9C                        38            .byte	$38
13241 2F9D                        00            .byte	0
13242 2F9E                        7C            .byte	$7C
13243 2F9F                        00            .byte	0
13244 2FA0                        00            .byte	0
13245 2FA1                        00            .byte	0
13246 2FA2                        00            .byte	0
13247 2FA3                        00            .byte	0
13248 2FA4                        00            .byte	0
13249 2FA5                        00            .byte	0
13250 2FA6                        00            .byte	0
13251 2FA7                        00            .byte	0
13252                                           ! 1381  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13253 2FA8                        00            .byte	0
13254 2FA9                        00            .byte	0
13255 2FAA                        30            .byte	$30
13256 2FAB                        30            .byte	$30
13257 2FAC                        00            .byte	0
13258 2FAD                        30            .byte	$30
13259 2FAE                        30            .byte	$30
13260 2FAF                        60            .byte	$60
13261 2FB0                        C0            .byte	$C0
13262 2FB1                        C6            .byte	$C6
13263 2FB2                        C6            .byte	$C6
13264 2FB3                        7C            .byte	$7C
13265 2FB4                        00            .byte	0
13266 2FB5                        00            .byte	0
13267 2FB6                        00            .byte	0
13268 2FB7                        00            .byte	0
13269                                           ! 1382  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13270 2FB8                        00            .byte	0
13271 2FB9                        00            .byte	0
13272 2FBA                        00            .byte	0
13273 2FBB                        00            .byte	0
13274 2FBC                        00            .byte	0
13275 2FBD                        00            .byte	0
13276 2FBE                        FE            .byte	$FE
13277 2FBF                        C0            .byte	$C0
13278 2FC0                        C0            .byte	$C0
13279 2FC1                        C0            .byte	$C0
13280 2FC2                        C0            .byte	$C0
13281 2FC3                        00            .byte	0
13282 2FC4                        00            .byte	0
13283 2FC5                        00            .byte	0
13284 2FC6                        00            .byte	0
13285 2FC7                        00            .byte	0
13286                                           ! 1383  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13287 2FC8                        00            .byte	0
13288 2FC9                        00            .byte	0
13289 2FCA                        00            .byte	0
13290 2FCB                        00            .byte	0
13291 2FCC                        00            .byte	0
13292 2FCD                        00            .byte	0
13293 2FCE                        FE            .byte	$FE
13294 2FCF                        06            .byte	6
13295 2FD0                        06            .byte	6
13296 2FD1                        06            .byte	6
13297 2FD2                        06            .byte	6
13298 2FD3                        00            .byte	0
13299 2FD4                        00            .byte	0
13300 2FD5                        00            .byte	0
13301 2FD6                        00            .byte	0
13302 2FD7                        00            .byte	0
13303                                           ! 1384  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13304 2FD8                        00            .byte	0
13305 2FD9                        C0            .byte	$C0
13306 2FDA                        C0            .byte	$C0
13307 2FDB                        C2            .byte	$C2
13308 2FDC                        C6            .byte	$C6
13309 2FDD                        CC            .byte	$CC
13310 2FDE                        18            .byte	$18
13311 2FDF                        30            .byte	$30
13312 2FE0                        60            .byte	$60
13313 2FE1                        CE            .byte	$CE
13314 2FE2                        9B            .byte	$9B
13315 2FE3                        06            .byte	6
13316 2FE4                        0C            .byte	$C
13317 2FE5                        1F            .byte	$1F
13318 2FE6                        00            .byte	0
13319 2FE7                        00            .byte	0
13320                                           ! 1385  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13321 2FE8                        00            .byte	0
13322 2FE9                        C0            .byte	$C0
13323 2FEA                        C0            .byte	$C0
13324 2FEB                        C2            .byte	$C2
13325 2FEC                        C6            .byte	$C6
13326 2FED                        CC            .byte	$CC
13327 2FEE                        18            .byte	$18
13328 2FEF                        30            .byte	$30
13329 2FF0                        66            .byte	$66
13330 2FF1                        CE            .byte	$CE
13331 2FF2                        96            .byte	$96
13332 2FF3                        3E            .byte	$3E
13333 2FF4                        06            .byte	6
13334 2FF5                        06            .byte	6
13335 2FF6                        00            .byte	0
13336 2FF7                        00            .byte	0
13337                                           ! 1386  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13338 2FF8                        00            .byte	0
13339 2FF9                        00            .byte	0
13340 2FFA                        18            .byte	$18
13341 2FFB                        18            .byte	$18
13342 2FFC                        00            .byte	0
13343 2FFD                        18            .byte	$18
13344 2FFE                        18            .byte	$18
13345 2FFF                        18            .byte	$18
13346 3000                        3C            .byte	$3C
13347 3001                        3C            .byte	$3C
13348 3002                        3C            .byte	$3C
13349 3003                        18            .byte	$18
13350 3004                        00            .byte	0
13351 3005                        00            .byte	0
13352 3006                        00            .byte	0
13353 3007                        00            .byte	0
13354                                           ! 1387  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13355 3008                        00            .byte	0
13356 3009                        00            .byte	0
13357 300A                        00            .byte	0
13358 300B                        00            .byte	0
13359 300C                        00            .byte	0
13360 300D                        36            .byte	$36
13361 300E                        6C            .byte	$6C
13362 300F                        D8            .byte	$D8
13363 3010                        6C            .byte	$6C
13364 3011                        36            .byte	$36
13365 3012                        00            .byte	0
13366 3013                        00            .byte	0
13367 3014                        00            .byte	0
13368 3015                        00            .byte	0
13369 3016                        00            .byte	0
13370 3017                        00            .byte	0
13371                                           ! 1388  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13372 3018                        00            .byte	0
13373 3019                        00            .byte	0
13374 301A                        00            .byte	0
13375 301B                        00            .byte	0
13376 301C                        00            .byte	0
13377 301D                        D8            .byte	$D8
13378 301E                        6C            .byte	$6C
13379 301F                        36            .byte	$36
13380 3020                        6C            .byte	$6C
13381 3021                        D8            .byte	$D8
13382 3022                        00            .byte	0
13383 3023                        00            .byte	0
13384 3024                        00            .byte	0
13385 3025                        00            .byte	0
13386 3026                        00            .byte	0
13387 3027                        00            .byte	0
13388                                           ! 1389  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13389 3028                        11            .byte	$11
13390 3029                        44            .byte	$44
13391 302A                        11            .byte	$11
13392 302B                        44            .byte	$44
13393 302C                        11            .byte	$11
13394 302D                        44            .byte	$44
13395 302E                        11            .byte	$11
13396 302F                        44            .byte	$44
13397 3030                        11            .byte	$11
13398 3031                        44            .byte	$44
13399 3032                        11            .byte	$11
13400 3033                        44            .byte	$44
13401 3034                        11            .byte	$11
13402 3035                        44            .byte	$44
13403 3036                        11            .byte	$11
13404 3037                        44            .byte	$44
13405                                           ! 1390  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13406 3038                        55            .byte	$55
13407 3039                        AA            .byte	$AA
13408 303A                        55            .byte	$55
13409 303B                        AA            .byte	$AA
13410 303C                        55            .byte	$55
13411 303D                        AA            .byte	$AA
13412 303E                        55            .byte	$55
13413 303F                        AA            .byte	$AA
13414 3040                        55            .byte	$55
13415 3041                        AA            .byte	$AA
13416 3042                        55            .byte	$55
13417 3043                        AA            .byte	$AA
13418 3044                        55            .byte	$55
13419 3045                        AA            .byte	$AA
13420 3046                        55            .byte	$55
13421 3047                        AA            .byte	$AA
13422                                           ! 1391  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13423 3048                        DD            .byte	$DD
13424 3049                        77            .byte	$77
13425 304A                        DD            .byte	$DD
13426 304B                        77            .byte	$77
13427 304C                        DD            .byte	$DD
13428 304D                        77            .byte	$77
13429 304E                        DD            .byte	$DD
13430 304F                        77            .byte	$77
13431 3050                        DD            .byte	$DD
13432 3051                        77            .byte	$77
13433 3052                        DD            .byte	$DD
13434 3053                        77            .byte	$77
13435 3054                        DD            .byte	$DD
13436 3055                        77            .byte	$77
13437 3056                        DD            .byte	$DD
13438 3057                        77            .byte	$77
13439                                           ! 1392  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13440 3058                        18            .byte	$18
13441 3059                        18            .byte	$18
13442 305A                        18            .byte	$18
13443 305B                        18            .byte	$18
13444 305C                        18            .byte	$18
13445 305D                        18            .byte	$18
13446 305E                        18            .byte	$18
13447 305F                        18            .byte	$18
13448 3060                        18            .byte	$18
13449 3061                        18            .byte	$18
13450 3062                        18            .byte	$18
13451 3063                        18            .byte	$18
13452 3064                        18            .byte	$18
13453 3065                        18            .byte	$18
13454 3066                        18            .byte	$18
13455 3067                        18            .byte	$18
13456                                           ! 1393  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13457 3068                        18            .byte	$18
13458 3069                        18            .byte	$18
13459 306A                        18            .byte	$18
13460 306B                        18            .byte	$18
13461 306C                        18            .byte	$18
13462 306D                        18            .byte	$18
13463 306E                        18            .byte	$18
13464 306F                        F8            .byte	$F8
13465 3070                        18            .byte	$18
13466 3071                        18            .byte	$18
13467 3072                        18            .byte	$18
13468 3073                        18            .byte	$18
13469 3074                        18            .byte	$18
13470 3075                        18            .byte	$18
13471 3076                        18            .byte	$18
13472 3077                        18            .byte	$18
13473                                           ! 1394  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18
13474 3078                        18            .byte	$18
13475 3079                        18            .byte	$18
13476 307A                        18            .byte	$18
13477 307B                        18            .byte	$18
13478 307C                        18            .byte	$18
13479 307D                        F8            .byte	$F8
13480 307E                        18            .byte	$18
13481 307F                        F8            .byte	$F8
13482 3080                        18            .byte	$18
13483 3081                        18            .byte	$18
13484 3082                        18            .byte	$18
13485                                           ! 1394 , 0x18, 0x18, 0x18, 0x18,
13486 3083                        18            .byte	$18
13487 3084                        18            .byte	$18
13488 3085                        18            .byte	$18
13489 3086                        18            .byte	$18
13490 3087                        18            .byte	$18
13491                                           ! 1395  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13492 3088                        36            .byte	$36
13493 3089                        36            .byte	$36
13494 308A                        36            .byte	$36
13495 308B                        36            .byte	$36
13496 308C                        36            .byte	$36
13497 308D                        36            .byte	$36
13498 308E                        36            .byte	$36
13499 308F                        F6            .byte	$F6
13500 3090                        36            .byte	$36
13501 3091                        36            .byte	$36
13502 3092                        36            .byte	$36
13503 3093                        36            .byte	$36
13504 3094                        36            .byte	$36
13505 3095                        36            .byte	$36
13506 3096                        36            .byte	$36
13507 3097                        36            .byte	$36
13508                                           ! 1396  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13509 3098                        00            .byte	0
13510 3099                        00            .byte	0
13511 309A                        00            .byte	0
13512 309B                        00            .byte	0
13513 309C                        00            .byte	0
13514 309D                        00            .byte	0
13515 309E                        00            .byte	0
13516 309F                        FE            .byte	$FE
13517 30A0                        36            .byte	$36
13518 30A1                        36            .byte	$36
13519 30A2                        36            .byte	$36
13520 30A3                        36            .byte	$36
13521 30A4                        36            .byte	$36
13522 30A5                        36            .byte	$36
13523 30A6                        36            .byte	$36
13524 30A7                        36            .byte	$36
13525                                           ! 1397  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13526 30A8                        00            .byte	0
13527 30A9                        00            .byte	0
13528 30AA                        00            .byte	0
13529 30AB                        00            .byte	0
13530 30AC                        00            .byte	0
13531 30AD                        F8            .byte	$F8
13532 30AE                        18            .byte	$18
13533 30AF                        F8            .byte	$F8
13534 30B0                        18            .byte	$18
13535 30B1                        18            .byte	$18
13536 30B2                        18            .byte	$18
13537 30B3                        18            .byte	$18
13538 30B4                        18            .byte	$18
13539 30B5                        18            .byte	$18
13540 30B6                        18            .byte	$18
13541 30B7                        18            .byte	$18
13542                                           ! 1398  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13543 30B8                        36            .byte	$36
13544 30B9                        36            .byte	$36
13545 30BA                        36            .byte	$36
13546 30BB                        36            .byte	$36
13547 30BC                        36            .byte	$36
13548 30BD                        F6            .byte	$F6
13549 30BE                        06            .byte	6
13550 30BF                        F6            .byte	$F6
13551 30C0                        36            .byte	$36
13552 30C1                        36            .byte	$36
13553 30C2                        36            .byte	$36
13554 30C3                        36            .byte	$36
13555 30C4                        36            .byte	$36
13556 30C5                        36            .byte	$36
13557 30C6                        36            .byte	$36
13558 30C7                        36            .byte	$36
13559                                           ! 1399  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13560 30C8                        36            .byte	$36
13561 30C9                        36            .byte	$36
13562 30CA                        36            .byte	$36
13563 30CB                        36            .byte	$36
13564 30CC                        36            .byte	$36
13565 30CD                        36            .byte	$36
13566 30CE                        36            .byte	$36
13567 30CF                        36            .byte	$36
13568 30D0                        36            .byte	$36
13569 30D1                        36            .byte	$36
13570 30D2                        36            .byte	$36
13571 30D3                        36            .byte	$36
13572 30D4                        36            .byte	$36
13573 30D5                        36            .byte	$36
13574 30D6                        36            .byte	$36
13575 30D7                        36            .byte	$36
13576                                           ! 1400  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13577 30D8                        00            .byte	0
13578 30D9                        00            .byte	0
13579 30DA                        00            .byte	0
13580 30DB                        00            .byte	0
13581 30DC                        00            .byte	0
13582 30DD                        FE            .byte	$FE
13583 30DE                        06            .byte	6
13584 30DF                        F6            .byte	$F6
13585 30E0                        36            .byte	$36
13586 30E1                        36            .byte	$36
13587 30E2                        36            .byte	$36
13588 30E3                        36            .byte	$36
13589 30E4                        36            .byte	$36
13590 30E5                        36            .byte	$36
13591 30E6                        36            .byte	$36
13592 30E7                        36            .byte	$36
13593                                           ! 1401  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13594 30E8                        36            .byte	$36
13595 30E9                        36            .byte	$36
13596 30EA                        36            .byte	$36
13597 30EB                        36            .byte	$36
13598 30EC                        36            .byte	$36
13599 30ED                        F6            .byte	$F6
13600 30EE                        06            .byte	6
13601 30EF                        FE            .byte	$FE
13602 30F0                        00            .byte	0
13603 30F1                        00            .byte	0
13604 30F2                        00            .byte	0
13605 30F3                        00            .byte	0
13606 30F4                        00            .byte	0
13607 30F5                        00            .byte	0
13608 30F6                        00            .byte	0
13609 30F7                        00            .byte	0
13610                                           ! 1402  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13611 30F8                        36            .byte	$36
13612 30F9                        36            .byte	$36
13613 30FA                        36            .byte	$36
13614 30FB                        36            .byte	$36
13615 30FC                        36            .byte	$36
13616 30FD                        36            .byte	$36
13617 30FE                        36            .byte	$36
13618 30FF                        FE            .byte	$FE
13619 3100                        00            .byte	0
13620 3101                        00            .byte	0
13621 3102                        00            .byte	0
13622 3103                        00            .byte	0
13623 3104                        00            .byte	0
13624 3105                        00            .byte	0
13625 3106                        00            .byte	0
13626 3107                        00            .byte	0
13627                                           ! 1403  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13628 3108                        18            .byte	$18
13629 3109                        18            .byte	$18
13630 310A                        18            .byte	$18
13631 310B                        18            .byte	$18
13632 310C                        18            .byte	$18
13633 310D                        F8            .byte	$F8
13634 310E                        18            .byte	$18
13635 310F                        F8            .byte	$F8
13636 3110                        00            .byte	0
13637 3111                        00            .byte	0
13638 3112                        00            .byte	0
13639 3113                        00            .byte	0
13640 3114                        00            .byte	0
13641 3115                        00            .byte	0
13642 3116                        00            .byte	0
13643 3117                        00            .byte	0
13644                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13645 3118                        00            .byte	0
13646 3119                        00            .byte	0
13647 311A                        00            .byte	0
13648 311B                        00            .byte	0
13649 311C                        00            .byte	0
13650 311D                        00            .byte	0
13651 311E                        00            .byte	0
13652 311F                        F8            .byte	$F8
13653 3120                        18            .byte	$18
13654 3121                        18            .byte	$18
13655 3122                        18            .byte	$18
13656 3123                        18            .byte	$18
13657 3124                        18            .byte	$18
13658 3125                        18            .byte	$18
13659 3126                        18            .byte	$18
13660 3127                        18            .byte	$18
13661                                           ! 1405  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13662 3128                        18            .byte	$18
13663 3129                        18            .byte	$18
13664 312A                        18            .byte	$18
13665 312B                        18            .byte	$18
13666 312C                        18            .byte	$18
13667 312D                        18            .byte	$18
13668 312E                        18            .byte	$18
13669 312F                        1F            .byte	$1F
13670 3130                        00            .byte	0
13671 3131                        00            .byte	0
13672 3132                        00            .byte	0
13673 3133                        00            .byte	0
13674 3134                        00            .byte	0
13675 3135                        00            .byte	0
13676 3136                        00            .byte	0
13677 3137                        00            .byte	0
13678                                           ! 1406  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13679 3138                        18            .byte	$18
13680 3139                        18            .byte	$18
13681 313A                        18            .byte	$18
13682 313B                        18            .byte	$18
13683 313C                        18            .byte	$18
13684 313D                        18            .byte	$18
13685 313E                        18            .byte	$18
13686 313F                        FF            .byte	$FF
13687 3140                        00            .byte	0
13688 3141                        00            .byte	0
13689 3142                        00            .byte	0
13690 3143                        00            .byte	0
13691 3144                        00            .byte	0
13692 3145                        00            .byte	0
13693 3146                        00            .byte	0
13694 3147                        00            .byte	0
13695                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13696 3148                        00            .byte	0
13697 3149                        00            .byte	0
13698 314A                        00            .byte	0
13699 314B                        00            .byte	0
13700 314C                        00            .byte	0
13701 314D                        00            .byte	0
13702 314E                        00            .byte	0
13703 314F                        FF            .byte	$FF
13704 3150                        18            .byte	$18
13705 3151                        18            .byte	$18
13706 3152                        18            .byte	$18
13707 3153                        18            .byte	$18
13708 3154                        18            .byte	$18
13709 3155                        18            .byte	$18
13710 3156                        18            .byte	$18
13711 3157                        18            .byte	$18
13712                                           ! 1408  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13713 3158                        18            .byte	$18
13714 3159                        18            .byte	$18
13715 315A                        18            .byte	$18
13716 315B                        18            .byte	$18
13717 315C                        18            .byte	$18
13718 315D                        18            .byte	$18
13719 315E                        18            .byte	$18
13720 315F                        1F            .byte	$1F
13721 3160                        18            .byte	$18
13722 3161                        18            .byte	$18
13723 3162                        18            .byte	$18
13724 3163                        18            .byte	$18
13725 3164                        18            .byte	$18
13726 3165                        18            .byte	$18
13727 3166                        18            .byte	$18
13728 3167                        18            .byte	$18
13729                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13730 3168                        00            .byte	0
13731 3169                        00            .byte	0
13732 316A                        00            .byte	0
13733 316B                        00            .byte	0
13734 316C                        00            .byte	0
13735 316D                        00            .byte	0
13736 316E                        00            .byte	0
13737 316F                        FF            .byte	$FF
13738 3170                        00            .byte	0
13739 3171                        00            .byte	0
13740 3172                        00            .byte	0
13741 3173                        00            .byte	0
13742 3174                        00            .byte	0
13743 3175                        00            .byte	0
13744 3176                        00            .byte	0
13745 3177                        00            .byte	0
13746                                           ! 1410  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13747 3178                        18            .byte	$18
13748 3179                        18            .byte	$18
13749 317A                        18            .byte	$18
13750 317B                        18            .byte	$18
13751 317C                        18            .byte	$18
13752 317D                        18            .byte	$18
13753 317E                        18            .byte	$18
13754 317F                        FF            .byte	$FF
13755 3180                        18            .byte	$18
13756 3181                        18            .byte	$18
13757 3182                        18            .byte	$18
13758 3183                        18            .byte	$18
13759 3184                        18            .byte	$18
13760 3185                        18            .byte	$18
13761 3186                        18            .byte	$18
13762 3187                        18            .byte	$18
13763                                           ! 1411  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13764 3188                        18            .byte	$18
13765 3189                        18            .byte	$18
13766 318A                        18            .byte	$18
13767 318B                        18            .byte	$18
13768 318C                        18            .byte	$18
13769 318D                        1F            .byte	$1F
13770 318E                        18            .byte	$18
13771 318F                        1F            .byte	$1F
13772 3190                        18            .byte	$18
13773 3191                        18            .byte	$18
13774 3192                        18            .byte	$18
13775 3193                        18            .byte	$18
13776 3194                        18            .byte	$18
13777 3195                        18            .byte	$18
13778 3196                        18            .byte	$18
13779 3197                        18            .byte	$18
13780                                           ! 1412  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13781 3198                        36            .byte	$36
13782 3199                        36            .byte	$36
13783 319A                        36            .byte	$36
13784 319B                        36            .byte	$36
13785 319C                        36            .byte	$36
13786 319D                        36            .byte	$36
13787 319E                        36            .byte	$36
13788 319F                        37            .byte	$37
13789 31A0                        36            .byte	$36
13790 31A1                        36            .byte	$36
13791 31A2                        36            .byte	$36
13792 31A3                        36            .byte	$36
13793 31A4                        36            .byte	$36
13794 31A5                        36            .byte	$36
13795 31A6                        36            .byte	$36
13796 31A7                        36            .byte	$36
13797                                           ! 1413  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13798 31A8                        36            .byte	$36
13799 31A9                        36            .byte	$36
13800 31AA                        36            .byte	$36
13801 31AB                        36            .byte	$36
13802 31AC                        36            .byte	$36
13803 31AD                        37            .byte	$37
13804 31AE                        30            .byte	$30
13805 31AF                        3F            .byte	$3F
13806 31B0                        00            .byte	0
13807 31B1                        00            .byte	0
13808 31B2                        00            .byte	0
13809 31B3                        00            .byte	0
13810 31B4                        00            .byte	0
13811 31B5                        00            .byte	0
13812 31B6                        00            .byte	0
13813 31B7                        00            .byte	0
13814                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13815 31B8                        00            .byte	0
13816 31B9                        00            .byte	0
13817 31BA                        00            .byte	0
13818 31BB                        00            .byte	0
13819 31BC                        00            .byte	0
13820 31BD                        3F            .byte	$3F
13821 31BE                        30            .byte	$30
13822 31BF                        37            .byte	$37
13823 31C0                        36            .byte	$36
13824 31C1                        36            .byte	$36
13825 31C2                        36            .byte	$36
13826 31C3                        36            .byte	$36
13827 31C4                        36            .byte	$36
13828 31C5                        36            .byte	$36
13829 31C6                        36            .byte	$36
13830 31C7                        36            .byte	$36
13831                                           ! 1415  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0
13832 31C8                        36            .byte	$36
13833 31C9                        36            .byte	$36
13834 31CA                        36            .byte	$36
13835 31CB                        36            .byte	$36
13836 31CC                        36            .byte	$36
13837 31CD                        F7            .byte	$F7
13838 31CE                        00            .byte	0
13839 31CF                        FF            .byte	$FF
13840 31D0                        00            .byte	0
13841 31D1                        00            .byte	0
13842 31D2                        00            .byte	0
13843 31D3                        00            .byte	0
13844 31D4                        00            .byte	0
13845                                           ! 1415 0, 0x00, 0x00,
13846 31D5                        00            .byte	0
13847 31D6                        00            .byte	0
13848 31D7                        00            .byte	0
13849                                           ! 1416  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13850 31D8                        00            .byte	0
13851 31D9                        00            .byte	0
13852 31DA                        00            .byte	0
13853 31DB                        00            .byte	0
13854 31DC                        00            .byte	0
13855 31DD                        FF            .byte	$FF
13856 31DE                        00            .byte	0
13857 31DF                        F7            .byte	$F7
13858 31E0                        36            .byte	$36
13859 31E1                        36            .byte	$36
13860 31E2                        36            .byte	$36
13861 31E3                        36            .byte	$36
13862 31E4                        36            .byte	$36
13863 31E5                        36            .byte	$36
13864 31E6                        36            .byte	$36
13865 31E7                        36            .byte	$36
13866                                           ! 1417  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13867 31E8                        36            .byte	$36
13868 31E9                        36            .byte	$36
13869 31EA                        36            .byte	$36
13870 31EB                        36            .byte	$36
13871 31EC                        36            .byte	$36
13872 31ED                        37            .byte	$37
13873 31EE                        30            .byte	$30
13874 31EF                        37            .byte	$37
13875 31F0                        36            .byte	$36
13876 31F1                        36            .byte	$36
13877 31F2                        36            .byte	$36
13878 31F3                        36            .byte	$36
13879 31F4                        36            .byte	$36
13880 31F5                        36            .byte	$36
13881 31F6                        36            .byte	$36
13882 31F7                        36            .byte	$36
13883                                           ! 1418  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13884 31F8                        00            .byte	0
13885 31F9                        00            .byte	0
13886 31FA                        00            .byte	0
13887 31FB                        00            .byte	0
13888 31FC                        00            .byte	0
13889 31FD                        FF            .byte	$FF
13890 31FE                        00            .byte	0
13891 31FF                        FF            .byte	$FF
13892 3200                        00            .byte	0
13893 3201                        00            .byte	0
13894 3202                        00            .byte	0
13895 3203                        00            .byte	0
13896 3204                        00            .byte	0
13897 3205                        00            .byte	0
13898 3206                        00            .byte	0
13899 3207                        00            .byte	0
13900                                           ! 1419  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13901 3208                        36            .byte	$36
13902 3209                        36            .byte	$36
13903 320A                        36            .byte	$36
13904 320B                        36            .byte	$36
13905 320C                        36            .byte	$36
13906 320D                        F7            .byte	$F7
13907 320E                        00            .byte	0
13908 320F                        F7            .byte	$F7
13909 3210                        36            .byte	$36
13910 3211                        36            .byte	$36
13911 3212                        36            .byte	$36
13912 3213                        36            .byte	$36
13913 3214                        36            .byte	$36
13914 3215                        36            .byte	$36
13915 3216                        36            .byte	$36
13916 3217                        36            .byte	$36
13917                                           ! 1420  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13918 3218                        18            .byte	$18
13919 3219                        18            .byte	$18
13920 321A                        18            .byte	$18
13921 321B                        18            .byte	$18
13922 321C                        18            .byte	$18
13923 321D                        FF            .byte	$FF
13924 321E                        00            .byte	0
13925 321F                        FF            .byte	$FF
13926 3220                        00            .byte	0
13927 3221                        00            .byte	0
13928 3222                        00            .byte	0
13929 3223                        00            .byte	0
13930 3224                        00            .byte	0
13931 3225                        00            .byte	0
13932 3226                        00            .byte	0
13933 3227                        00            .byte	0
13934                                           ! 1421  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13935 3228                        36            .byte	$36
13936 3229                        36            .byte	$36
13937 322A                        36            .byte	$36
13938 322B                        36            .byte	$36
13939 322C                        36            .byte	$36
13940 322D                        36            .byte	$36
13941 322E                        36            .byte	$36
13942 322F                        FF            .byte	$FF
13943 3230                        00            .byte	0
13944 3231                        00            .byte	0
13945 3232                        00            .byte	0
13946 3233                        00            .byte	0
13947 3234                        00            .byte	0
13948 3235                        00            .byte	0
13949 3236                        00            .byte	0
13950 3237                        00            .byte	0
13951                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13952 3238                        00            .byte	0
13953 3239                        00            .byte	0
13954 323A                        00            .byte	0
13955 323B                        00            .byte	0
13956 323C                        00            .byte	0
13957 323D                        FF            .byte	$FF
13958 323E                        00            .byte	0
13959 323F                        FF            .byte	$FF
13960 3240                        18            .byte	$18
13961 3241                        18            .byte	$18
13962 3242                        18            .byte	$18
13963 3243                        18            .byte	$18
13964 3244                        18            .byte	$18
13965 3245                        18            .byte	$18
13966 3246                        18            .byte	$18
13967 3247                        18            .byte	$18
13968                                           ! 1423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13969 3248                        00            .byte	0
13970 3249                        00            .byte	0
13971 324A                        00            .byte	0
13972 324B                        00            .byte	0
13973 324C                        00            .byte	0
13974 324D                        00            .byte	0
13975 324E                        00            .byte	0
13976 324F                        FF            .byte	$FF
13977 3250                        36            .byte	$36
13978 3251                        36            .byte	$36
13979 3252                        36            .byte	$36
13980 3253                        36            .byte	$36
13981 3254                        36            .byte	$36
13982 3255                        36            .byte	$36
13983 3256                        36            .byte	$36
13984 3257                        36            .byte	$36
13985                                           ! 1424  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13986 3258                        36            .byte	$36
13987 3259                        36            .byte	$36
13988 325A                        36            .byte	$36
13989 325B                        36            .byte	$36
13990 325C                        36            .byte	$36
13991 325D                        36            .byte	$36
13992 325E                        36            .byte	$36
13993 325F                        3F            .byte	$3F
13994 3260                        00            .byte	0
13995 3261                        00            .byte	0
13996 3262                        00            .byte	0
13997 3263                        00            .byte	0
13998 3264                        00            .byte	0
13999 3265                        00            .byte	0
14000 3266                        00            .byte	0
14001 3267                        00            .byte	0
14002                                           ! 1425  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14003 3268                        18            .byte	$18
14004 3269                        18            .byte	$18
14005 326A                        18            .byte	$18
14006 326B                        18            .byte	$18
14007 326C                        18            .byte	$18
14008 326D                        1F            .byte	$1F
14009 326E                        18            .byte	$18
14010 326F                        1F            .byte	$1F
14011 3270                        00            .byte	0
14012 3271                        00            .byte	0
14013 3272                        00            .byte	0
14014 3273                        00            .byte	0
14015 3274                        00            .byte	0
14016 3275                        00            .byte	0
14017 3276                        00            .byte	0
14018 3277                        00            .byte	0
14019                                           ! 1426  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14020 3278                        00            .byte	0
14021 3279                        00            .byte	0
14022 327A                        00            .byte	0
14023 327B                        00            .byte	0
14024 327C                        00            .byte	0
14025 327D                        1F            .byte	$1F
14026 327E                        18            .byte	$18
14027 327F                        1F            .byte	$1F
14028 3280                        18            .byte	$18
14029 3281                        18            .byte	$18
14030 3282                        18            .byte	$18
14031 3283                        18            .byte	$18
14032 3284                        18            .byte	$18
14033 3285                        18            .byte	$18
14034 3286                        18            .byte	$18
14035 3287                        18            .byte	$18
14036                                           ! 1427  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14037 3288                        00            .byte	0
14038 3289                        00            .byte	0
14039 328A                        00            .byte	0
14040 328B                        00            .byte	0
14041 328C                        00            .byte	0
14042 328D                        00            .byte	0
14043 328E                        00            .byte	0
14044 328F                        3F            .byte	$3F
14045 3290                        36            .byte	$36
14046 3291                        36            .byte	$36
14047 3292                        36            .byte	$36
14048 3293                        36            .byte	$36
14049 3294                        36            .byte	$36
14050 3295                        36            .byte	$36
14051 3296                        36            .byte	$36
14052 3297                        36            .byte	$36
14053                                           ! 1428  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14054 3298                        36            .byte	$36
14055 3299                        36            .byte	$36
14056 329A                        36            .byte	$36
14057 329B                        36            .byte	$36
14058 329C                        36            .byte	$36
14059 329D                        36            .byte	$36
14060 329E                        36            .byte	$36
14061 329F                        FF            .byte	$FF
14062 32A0                        36            .byte	$36
14063 32A1                        36            .byte	$36
14064 32A2                        36            .byte	$36
14065 32A3                        36            .byte	$36
14066 32A4                        36            .byte	$36
14067 32A5                        36            .byte	$36
14068 32A6                        36            .byte	$36
14069 32A7                        36            .byte	$36
14070                                           ! 1429  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14071 32A8                        18            .byte	$18
14072 32A9                        18            .byte	$18
14073 32AA                        18            .byte	$18
14074 32AB                        18            .byte	$18
14075 32AC                        18            .byte	$18
14076 32AD                        FF            .byte	$FF
14077 32AE                        18            .byte	$18
14078 32AF                        FF            .byte	$FF
14079 32B0                        18            .byte	$18
14080 32B1                        18            .byte	$18
14081 32B2                        18            .byte	$18
14082 32B3                        18            .byte	$18
14083 32B4                        18            .byte	$18
14084 32B5                        18            .byte	$18
14085 32B6                        18            .byte	$18
14086 32B7                        18            .byte	$18
14087                                           ! 1430  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14088 32B8                        18            .byte	$18
14089 32B9                        18            .byte	$18
14090 32BA                        18            .byte	$18
14091 32BB                        18            .byte	$18
14092 32BC                        18            .byte	$18
14093 32BD                        18            .byte	$18
14094 32BE                        18            .byte	$18
14095 32BF                        F8            .byte	$F8
14096 32C0                        00            .byte	0
14097 32C1                        00            .byte	0
14098 32C2                        00            .byte	0
14099 32C3                        00            .byte	0
14100 32C4                        00            .byte	0
14101 32C5                        00            .byte	0
14102 32C6                        00            .byte	0
14103 32C7                        00            .byte	0
14104                                           ! 1431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14105 32C8                        00            .byte	0
14106 32C9                        00            .byte	0
14107 32CA                        00            .byte	0
14108 32CB                        00            .byte	0
14109 32CC                        00            .byte	0
14110 32CD                        00            .byte	0
14111 32CE                        00            .byte	0
14112 32CF                        1F            .byte	$1F
14113 32D0                        18            .byte	$18
14114 32D1                        18            .byte	$18
14115 32D2                        18            .byte	$18
14116 32D3                        18            .byte	$18
14117 32D4                        18            .byte	$18
14118 32D5                        18            .byte	$18
14119 32D6                        18            .byte	$18
14120 32D7                        18            .byte	$18
14121                                           ! 1432  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14122 32D8                        FF            .byte	$FF
14123 32D9                        FF            .byte	$FF
14124 32DA                        FF            .byte	$FF
14125 32DB                        FF            .byte	$FF
14126 32DC                        FF            .byte	$FF
14127 32DD                        FF            .byte	$FF
14128 32DE                        FF            .byte	$FF
14129 32DF                        FF            .byte	$FF
14130 32E0                        FF            .byte	$FF
14131 32E1                        FF            .byte	$FF
14132 32E2                        FF            .byte	$FF
14133 32E3                        FF            .byte	$FF
14134 32E4                        FF            .byte	$FF
14135 32E5                        FF            .byte	$FF
14136 32E6                        FF            .byte	$FF
14137 32E7                        FF            .byte	$FF
14138                                           ! 1433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14139 32E8                        00            .byte	0
14140 32E9                        00            .byte	0
14141 32EA                        00            .byte	0
14142 32EB                        00            .byte	0
14143 32EC                        00            .byte	0
14144 32ED                        00            .byte	0
14145 32EE                        00            .byte	0
14146 32EF                        FF            .byte	$FF
14147 32F0                        FF            .byte	$FF
14148 32F1                        FF            .byte	$FF
14149 32F2                        FF            .byte	$FF
14150 32F3                        FF            .byte	$FF
14151 32F4                        FF            .byte	$FF
14152 32F5                        FF            .byte	$FF
14153 32F6                        FF            .byte	$FF
14154 32F7                        FF            .byte	$FF
14155                                           ! 1434  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14156 32F8                        F0            .byte	$F0
14157 32F9                        F0            .byte	$F0
14158 32FA                        F0            .byte	$F0
14159 32FB                        F0            .byte	$F0
14160 32FC                        F0            .byte	$F0
14161 32FD                        F0            .byte	$F0
14162 32FE                        F0            .byte	$F0
14163 32FF                        F0            .byte	$F0
14164 3300                        F0            .byte	$F0
14165 3301                        F0            .byte	$F0
14166 3302                        F0            .byte	$F0
14167 3303                        F0            .byte	$F0
14168 3304                        F0            .byte	$F0
14169 3305                        F0            .byte	$F0
14170 3306                        F0            .byte	$F0
14171 3307                        F0            .byte	$F0
14172                                           ! 1435  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14173 3308                        0F            .byte	$F
14174 3309                        0F            .byte	$F
14175 330A                        0F            .byte	$F
14176 330B                        0F            .byte	$F
14177 330C                        0F            .byte	$F
14178 330D                        0F            .byte	$F
14179 330E                        0F            .byte	$F
14180 330F                        0F            .byte	$F
14181 3310                        0F            .byte	$F
14182 3311                        0F            .byte	$F
14183 3312                        0F            .byte	$F
14184 3313                        0F            .byte	$F
14185 3314                        0F            .byte	$F
14186 3315                        0F            .byte	$F
14187 3316                        0F            .byte	$F
14188 3317                        0F            .byte	$F
14189                                           ! 1436  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
14190 3318                        FF            .byte	$FF
14191 3319                        FF            .byte	$FF
14192 331A                        FF            .byte	$FF
14193 331B                        FF            .byte	$FF
14194 331C                        FF            .byte	$FF
14195 331D                        FF            .byte	$FF
14196 331E                        FF            .byte	$FF
14197 331F                        00            .byte	0
14198 3320                        00            .byte	0
14199 3321                        00            .byte	0
14200 3322                        00            .byte	0
14201 3323                        00            .byte	0
14202 3324                        00            .byte	0
14203 3325                        00            .byte	0
14204 3326                        00            .byte	0
14205                                           ! 1436 00,
14206 3327                        00            .byte	0
14207                                           ! 1437  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14208 3328                        00            .byte	0
14209 3329                        00            .byte	0
14210 332A                        00            .byte	0
14211 332B                        00            .byte	0
14212 332C                        00            .byte	0
14213 332D                        76            .byte	$76
14214 332E                        DC            .byte	$DC
14215 332F                        D8            .byte	$D8
14216 3330                        D8            .byte	$D8
14217 3331                        D8            .byte	$D8
14218 3332                        DC            .byte	$DC
14219 3333                        76            .byte	$76
14220 3334                        00            .byte	0
14221 3335                        00            .byte	0
14222 3336                        00            .byte	0
14223 3337                        00            .byte	0
14224                                           ! 1438  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14225 3338                        00            .byte	0
14226 3339                        00            .byte	0
14227 333A                        78            .byte	$78
14228 333B                        CC            .byte	$CC
14229 333C                        CC            .byte	$CC
14230 333D                        CC            .byte	$CC
14231 333E                        D8            .byte	$D8
14232 333F                        CC            .byte	$CC
14233 3340                        C6            .byte	$C6
14234 3341                        C6            .byte	$C6
14235 3342                        C6            .byte	$C6
14236 3343                        CC            .byte	$CC
14237 3344                        00            .byte	0
14238 3345                        00            .byte	0
14239 3346                        00            .byte	0
14240 3347                        00            .byte	0
14241                                           ! 1439  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14242 3348                        00            .byte	0
14243 3349                        00            .byte	0
14244 334A                        FE            .byte	$FE
14245 334B                        C6            .byte	$C6
14246 334C                        C6            .byte	$C6
14247 334D                        C0            .byte	$C0
14248 334E                        C0            .byte	$C0
14249 334F                        C0            .byte	$C0
14250 3350                        C0            .byte	$C0
14251 3351                        C0            .byte	$C0
14252 3352                        C0            .byte	$C0
14253 3353                        C0            .byte	$C0
14254 3354                        00            .byte	0
14255 3355                        00            .byte	0
14256 3356                        00            .byte	0
14257 3357                        00            .byte	0
14258                                           ! 1440  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14259 3358                        00            .byte	0
14260 3359                        00            .byte	0
14261 335A                        00            .byte	0
14262 335B                        00            .byte	0
14263 335C                        FE            .byte	$FE
14264 335D                        6C            .byte	$6C
14265 335E                        6C            .byte	$6C
14266 335F                        6C            .byte	$6C
14267 3360                        6C            .byte	$6C
14268 3361                        6C            .byte	$6C
14269 3362                        6C            .byte	$6C
14270 3363                        6C            .byte	$6C
14271 3364                        00            .byte	0
14272 3365                        00            .byte	0
14273 3366                        00            .byte	0
14274 3367                        00            .byte	0
14275                                           ! 1441  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14276 3368                        00            .byte	0
14277 3369                        00            .byte	0
14278 336A                        00            .byte	0
14279 336B                        FE            .byte	$FE
14280 336C                        C6            .byte	$C6
14281 336D                        60            .byte	$60
14282 336E                        30            .byte	$30
14283 336F                        18            .byte	$18
14284 3370                        30            .byte	$30
14285 3371                        60            .byte	$60
14286 3372                        C6            .byte	$C6
14287 3373                        FE            .byte	$FE
14288 3374                        00            .byte	0
14289 3375                        00            .byte	0
14290 3376                        00            .byte	0
14291 3377                        00            .byte	0
14292                                           ! 1442  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14293 3378                        00            .byte	0
14294 3379                        00            .byte	0
14295 337A                        00            .byte	0
14296 337B                        00            .byte	0
14297 337C                        00            .byte	0
14298 337D                        7E            .byte	$7E
14299 337E                        D8            .byte	$D8
14300 337F                        D8            .byte	$D8
14301 3380                        D8            .byte	$D8
14302 3381                        D8            .byte	$D8
14303 3382                        D8            .byte	$D8
14304 3383                        70            .byte	$70
14305 3384                        00            .byte	0
14306 3385                        00            .byte	0
14307 3386                        00            .byte	0
14308 3387                        00            .byte	0
14309                                           ! 1443  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14310 3388                        00            .byte	0
14311 3389                        00            .byte	0
14312 338A                        00            .byte	0
14313 338B                        00            .byte	0
14314 338C                        66            .byte	$66
14315 338D                        66            .byte	$66
14316 338E                        66            .byte	$66
14317 338F                        66            .byte	$66
14318 3390                        66            .byte	$66
14319 3391                        7C            .byte	$7C
14320 3392                        60            .byte	$60
14321 3393                        60            .byte	$60
14322 3394                        C0            .byte	$C0
14323 3395                        00            .byte	0
14324 3396                        00            .byte	0
14325 3397                        00            .byte	0
14326                                           ! 1444  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14327 3398                        00            .byte	0
14328 3399                        00            .byte	0
14329 339A                        00            .byte	0
14330 339B                        00            .byte	0
14331 339C                        76            .byte	$76
14332 339D                        DC            .byte	$DC
14333 339E                        18            .byte	$18
14334 339F                        18            .byte	$18
14335 33A0                        18            .byte	$18
14336 33A1                        18            .byte	$18
14337 33A2                        18            .byte	$18
14338 33A3                        18            .byte	$18
14339 33A4                        00            .byte	0
14340 33A5                        00            .byte	0
14341 33A6                        00            .byte	0
14342 33A7                        00            .byte	0
14343                                           ! 1445  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14344 33A8                        00            .byte	0
14345 33A9                        00            .byte	0
14346 33AA                        00            .byte	0
14347 33AB                        7E            .byte	$7E
14348 33AC                        18            .byte	$18
14349 33AD                        3C            .byte	$3C
14350 33AE                        66            .byte	$66
14351 33AF                        66            .byte	$66
14352 33B0                        66            .byte	$66
14353 33B1                        3C            .byte	$3C
14354 33B2                        18            .byte	$18
14355 33B3                        7E            .byte	$7E
14356 33B4                        00            .byte	0
14357 33B5                        00            .byte	0
14358 33B6                        00            .byte	0
14359 33B7                        00            .byte	0
14360                                           ! 1446  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14361 33B8                        00            .byte	0
14362 33B9                        00            .byte	0
14363 33BA                        00            .byte	0
14364 33BB                        38            .byte	$38
14365 33BC                        6C            .byte	$6C
14366 33BD                        C6            .byte	$C6
14367 33BE                        C6            .byte	$C6
14368 33BF                        FE            .byte	$FE
14369 33C0                        C6            .byte	$C6
14370 33C1                        C6            .byte	$C6
14371 33C2                        6C            .byte	$6C
14372 33C3                        38            .byte	$38
14373 33C4                        00            .byte	0
14374 33C5                        00            .byte	0
14375 33C6                        00            .byte	0
14376 33C7                        00            .byte	0
14377                                           ! 1447  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14378 33C8                        00            .byte	0
14379 33C9                        00            .byte	0
14380 33CA                        38            .byte	$38
14381 33CB                        6C            .byte	$6C
14382 33CC                        C6            .byte	$C6
14383 33CD                        C6            .byte	$C6
14384 33CE                        C6            .byte	$C6
14385 33CF                        6C            .byte	$6C
14386 33D0                        6C            .byte	$6C
14387 33D1                        6C            .byte	$6C
14388 33D2                        6C            .byte	$6C
14389 33D3                        EE            .byte	$EE
14390 33D4                        00            .byte	0
14391 33D5                        00            .byte	0
14392 33D6                        00            .byte	0
14393 33D7                        00            .byte	0
14394                                           ! 1448  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14395 33D8                        00            .byte	0
14396 33D9                        00            .byte	0
14397 33DA                        1E            .byte	$1E
14398 33DB                        30            .byte	$30
14399 33DC                        18            .byte	$18
14400 33DD                        0C            .byte	$C
14401 33DE                        3E            .byte	$3E
14402 33DF                        66            .byte	$66
14403 33E0                        66            .byte	$66
14404 33E1                        66            .byte	$66
14405 33E2                        66            .byte	$66
14406 33E3                        3C            .byte	$3C
14407 33E4                        00            .byte	0
14408 33E5                        00            .byte	0
14409 33E6                        00            .byte	0
14410 33E7                        00            .byte	0
14411                                           ! 1449  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14412 33E8                        00            .byte	0
14413 33E9                        00            .byte	0
14414 33EA                        00            .byte	0
14415 33EB                        00            .byte	0
14416 33EC                        00            .byte	0
14417 33ED                        7E            .byte	$7E
14418 33EE                        DB            .byte	$DB
14419 33EF                        DB            .byte	$DB
14420 33F0                        DB            .byte	$DB
14421 33F1                        7E            .byte	$7E
14422 33F2                        00            .byte	0
14423 33F3                        00            .byte	0
14424 33F4                        00            .byte	0
14425 33F5                        00            .byte	0
14426 33F6                        00            .byte	0
14427 33F7                        00            .byte	0
14428                                           ! 1450  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14429 33F8                        00            .byte	0
14430 33F9                        00            .byte	0
14431 33FA                        00            .byte	0
14432 33FB                        03            .byte	3
14433 33FC                        06            .byte	6
14434 33FD                        7E            .byte	$7E
14435 33FE                        DB            .byte	$DB
14436 33FF                        DB            .byte	$DB
14437 3400                        F3            .byte	$F3
14438 3401                        7E            .byte	$7E
14439 3402                        60            .byte	$60
14440 3403                        C0            .byte	$C0
14441 3404                        00            .byte	0
14442 3405                        00            .byte	0
14443 3406                        00            .byte	0
14444 3407                        00            .byte	0
14445                                           ! 1451  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14446 3408                        00            .byte	0
14447 3409                        00            .byte	0
14448 340A                        1C            .byte	$1C
14449 340B                        30            .byte	$30
14450 340C                        60            .byte	$60
14451 340D                        60            .byte	$60
14452 340E                        7C            .byte	$7C
14453 340F                        60            .byte	$60
14454 3410                        60            .byte	$60
14455 3411                        60            .byte	$60
14456 3412                        30            .byte	$30
14457 3413                        1C            .byte	$1C
14458 3414                        00            .byte	0
14459 3415                        00            .byte	0
14460 3416                        00            .byte	0
14461 3417                        00            .byte	0
14462                                           ! 1452  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14463 3418                        00            .byte	0
14464 3419                        00            .byte	0
14465 341A                        00            .byte	0
14466 341B                        7C            .byte	$7C
14467 341C                        C6            .byte	$C6
14468 341D                        C6            .byte	$C6
14469 341E                        C6            .byte	$C6
14470 341F                        C6            .byte	$C6
14471 3420                        C6            .byte	$C6
14472 3421                        C6            .byte	$C6
14473 3422                        C6            .byte	$C6
14474 3423                        C6            .byte	$C6
14475 3424                        00            .byte	0
14476 3425                        00            .byte	0
14477 3426                        00            .byte	0
14478 3427                        00            .byte	0
14479                                           ! 1453  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14480 3428                        00            .byte	0
14481 3429                        00            .byte	0
14482 342A                        00            .byte	0
14483 342B                        00            .byte	0
14484 342C                        FE            .byte	$FE
14485 342D                        00            .byte	0
14486 342E                        00            .byte	0
14487 342F                        FE            .byte	$FE
14488 3430                        00            .byte	0
14489 3431                        00            .byte	0
14490 3432                        FE            .byte	$FE
14491 3433                        00            .byte	0
14492 3434                        00            .byte	0
14493 3435                        00            .byte	0
14494 3436                        00            .byte	0
14495 3437                        00            .byte	0
14496                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14497 3438                        00            .byte	0
14498 3439                        00            .byte	0
14499 343A                        00            .byte	0
14500 343B                        00            .byte	0
14501 343C                        18            .byte	$18
14502 343D                        18            .byte	$18
14503 343E                        7E            .byte	$7E
14504 343F                        18            .byte	$18
14505 3440                        18            .byte	$18
14506 3441                        00            .byte	0
14507 3442                        00            .byte	0
14508 3443                        FF            .byte	$FF
14509 3444                        00            .byte	0
14510 3445                        00            .byte	0
14511 3446                        00            .byte	0
14512 3447                        00            .byte	0
14513                                           ! 1455  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14514 3448                        00            .byte	0
14515 3449                        00            .byte	0
14516 344A                        00            .byte	0
14517 344B                        30            .byte	$30
14518 344C                        18            .byte	$18
14519 344D                        0C            .byte	$C
14520 344E                        06            .byte	6
14521 344F                        0C            .byte	$C
14522 3450                        18            .byte	$18
14523 3451                        30            .byte	$30
14524 3452                        00            .byte	0
14525 3453                        7E            .byte	$7E
14526 3454                        00            .byte	0
14527 3455                        00            .byte	0
14528 3456                        00            .byte	0
14529 3457                        00            .byte	0
14530                                           ! 1456  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14531 3458                        00            .byte	0
14532 3459                        00            .byte	0
14533 345A                        00            .byte	0
14534 345B                        0C            .byte	$C
14535 345C                        18            .byte	$18
14536 345D                        30            .byte	$30
14537 345E                        60            .byte	$60
14538 345F                        30            .byte	$30
14539 3460                        18            .byte	$18
14540 3461                        0C            .byte	$C
14541 3462                        00            .byte	0
14542 3463                        7E            .byte	$7E
14543 3464                        00            .byte	0
14544 3465                        00            .byte	0
14545 3466                        00            .byte	0
14546 3467                        00            .byte	0
14547                                           ! 1457  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14548 3468                        00            .byte	0
14549 3469                        00            .byte	0
14550 346A                        0E            .byte	$E
14551 346B                        1B            .byte	$1B
14552 346C                        1B            .byte	$1B
14553 346D                        18            .byte	$18
14554 346E                        18            .byte	$18
14555 346F                        18            .byte	$18
14556 3470                        18            .byte	$18
14557 3471                        18            .byte	$18
14558 3472                        18            .byte	$18
14559 3473                        18            .byte	$18
14560 3474                        18            .byte	$18
14561 3475                        18            .byte	$18
14562 3476                        18            .byte	$18
14563 3477                        18            .byte	$18
14564                                           ! 1458  0x18, 
14565 3478                        18            .byte	$18
14566                                           ! 1458 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14567 3479                        18            .byte	$18
14568 347A                        18            .byte	$18
14569 347B                        18            .byte	$18
14570 347C                        18            .byte	$18
14571 347D                        18            .byte	$18
14572 347E                        18            .byte	$18
14573 347F                        18            .byte	$18
14574 3480                        D8            .byte	$D8
14575 3481                        D8            .byte	$D8
14576 3482                        D8            .byte	$D8
14577 3483                        70            .byte	$70
14578 3484                        00            .byte	0
14579 3485                        00            .byte	0
14580 3486                        00            .byte	0
14581 3487                        00            .byte	0
14582                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14583 3488                        00            .byte	0
14584 3489                        00            .byte	0
14585 348A                        00            .byte	0
14586 348B                        00            .byte	0
14587 348C                        18            .byte	$18
14588 348D                        18            .byte	$18
14589 348E                        00            .byte	0
14590 348F                        7E            .byte	$7E
14591 3490                        00            .byte	0
14592 3491                        18            .byte	$18
14593 3492                        18            .byte	$18
14594 3493                        00            .byte	0
14595 3494                        00            .byte	0
14596 3495                        00            .byte	0
14597 3496                        00            .byte	0
14598 3497                        00            .byte	0
14599                                           ! 1460  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14600 3498                        00            .byte	0
14601 3499                        00            .byte	0
14602 349A                        00            .byte	0
14603 349B                        00            .byte	0
14604 349C                        00            .byte	0
14605 349D                        76            .byte	$76
14606 349E                        DC            .byte	$DC
14607 349F                        00            .byte	0
14608 34A0                        76            .byte	$76
14609 34A1                        DC            .byte	$DC
14610 34A2                        00            .byte	0
14611 34A3                        00            .byte	0
14612 34A4                        00            .byte	0
14613 34A5                        00            .byte	0
14614 34A6                        00            .byte	0
14615 34A7                        00            .byte	0
14616                                           ! 1461  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14617 34A8                        00            .byte	0
14618 34A9                        38            .byte	$38
14619 34AA                        6C            .byte	$6C
14620 34AB                        6C            .byte	$6C
14621 34AC                        38            .byte	$38
14622 34AD                        00            .byte	0
14623 34AE                        00            .byte	0
14624 34AF                        00            .byte	0
14625 34B0                        00            .byte	0
14626 34B1                        00            .byte	0
14627 34B2                        00            .byte	0
14628 34B3                        00            .byte	0
14629 34B4                        00            .byte	0
14630 34B5                        00            .byte	0
14631 34B6                        00            .byte	0
14632 34B7                        00            .byte	0
14633                                           ! 1462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14634 34B8                        00            .byte	0
14635 34B9                        00            .byte	0
14636 34BA                        00            .byte	0
14637 34BB                        00            .byte	0
14638 34BC                        00            .byte	0
14639 34BD                        00            .byte	0
14640 34BE                        00            .byte	0
14641 34BF                        18            .byte	$18
14642 34C0                        18            .byte	$18
14643 34C1                        00            .byte	0
14644 34C2                        00            .byte	0
14645 34C3                        00            .byte	0
14646 34C4                        00            .byte	0
14647 34C5                        00            .byte	0
14648 34C6                        00            .byte	0
14649 34C7                        00            .byte	0
14650                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14651 34C8                        00            .byte	0
14652 34C9                        00            .byte	0
14653 34CA                        00            .byte	0
14654 34CB                        00            .byte	0
14655 34CC                        00            .byte	0
14656 34CD                        00            .byte	0
14657 34CE                        00            .byte	0
14658 34CF                        00            .byte	0
14659 34D0                        18            .byte	$18
14660 34D1                        00            .byte	0
14661 34D2                        00            .byte	0
14662 34D3                        00            .byte	0
14663 34D4                        00            .byte	0
14664 34D5                        00            .byte	0
14665 34D6                        00            .byte	0
14666 34D7                        00            .byte	0
14667                                           ! 1464  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14668 34D8                        00            .byte	0
14669 34D9                        0F            .byte	$F
14670 34DA                        0C            .byte	$C
14671 34DB                        0C            .byte	$C
14672 34DC                        0C            .byte	$C
14673 34DD                        0C            .byte	$C
14674 34DE                        0C            .byte	$C
14675 34DF                        EC            .byte	$EC
14676 34E0                        6C            .byte	$6C
14677 34E1                        6C            .byte	$6C
14678 34E2                        3C            .byte	$3C
14679 34E3                        1C            .byte	$1C
14680 34E4                        00            .byte	0
14681 34E5                        00            .byte	0
14682 34E6                        00            .byte	0
14683 34E7                        00            .byte	0
14684                                           ! 1465  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14685 34E8                        00            .byte	0
14686 34E9                        D8            .byte	$D8
14687 34EA                        6C            .byte	$6C
14688 34EB                        6C            .byte	$6C
14689 34EC                        6C            .byte	$6C
14690 34ED                        6C            .byte	$6C
14691 34EE                        6C            .byte	$6C
14692 34EF                        00            .byte	0
14693 34F0                        00            .byte	0
14694 34F1                        00            .byte	0
14695 34F2                        00            .byte	0
14696 34F3                        00            .byte	0
14697 34F4                        00            .byte	0
14698 34F5                        00            .byte	0
14699 34F6                        00            .byte	0
14700 34F7                        00            .byte	0
14701                                           ! 1466  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14702 34F8                        00            .byte	0
14703 34F9                        70            .byte	$70
14704 34FA                        D8            .byte	$D8
14705 34FB                        30            .byte	$30
14706 34FC                        60            .byte	$60
14707 34FD                        C8            .byte	$C8
14708 34FE                        F8            .byte	$F8
14709 34FF                        00            .byte	0
14710 3500                        00            .byte	0
14711 3501                        00            .byte	0
14712 3502                        00            .byte	0
14713 3503                        00            .byte	0
14714 3504                        00            .byte	0
14715 3505                        00            .byte	0
14716 3506                        00            .byte	0
14717 3507                        00            .byte	0
14718                                           ! 1467  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14719 3508                        00            .byte	0
14720 3509                        00            .byte	0
14721 350A                        00            .byte	0
14722 350B                        00            .byte	0
14723 350C                        7C            .byte	$7C
14724 350D                        7C            .byte	$7C
14725 350E                        7C            .byte	$7C
14726 350F                        7C            .byte	$7C
14727 3510                        7C            .byte	$7C
14728 3511                        7C            .byte	$7C
14729 3512                        7C            .byte	$7C
14730 3513                        00            .byte	0
14731 3514                        00            .byte	0
14732 3515                        00            .byte	0
14733 3516                        00            .byte	0
14734 3517                        00            .byte	0
14735                                           ! 1468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14736 3518                        00            .byte	0
14737 3519                        00            .byte	0
14738 351A                        00            .byte	0
14739 351B                        00            .byte	0
14740 351C                        00            .byte	0
14741 351D                        00            .byte	0
14742 351E                        00            .byte	0
14743 351F                        00            .byte	0
14744 3520                        00            .byte	0
14745 3521                        00            .byte	0
14746 3522                        00            .byte	0
14747 3523                        00            .byte	0
14748 3524                        00            .byte	0
14749 3525                        00            .byte	0
14750 3526                        00            .byte	0
14751                                           ! 1469 };
14752 3527                        00            .byte	0
14753                                           !BCC_EOS
14754                                           ! 1470 static Bit8u vgafont14alt[1]={0x00};
14755                       00003528            _vgafont14alt:
14756 3528                        00            .byte	0
14757                                           !BCC_EOS
14758                                           ! 1471 static Bit8u vgafont16alt[1]={0x00};
14759                       00003529            _vgafont16alt:
14760 3529                        00            .byte	0
14761                                           !BCC_EOS
14762                                           ! 1472 #asm
14763                                           !BCC_ASM
14764                       0000352A            init_vga_card:
14765                                           ;; switch to color mode and enable CPU access 480 lines
14766 352A           BA                   03C2    mov dx, #0x3C2
14767 352D           B0                     C3    mov al, #0xC3
14768 352F           EE                           outb dx,al
14769                                           ;; more than 64k 3C4/04
14770 3530           BA                   03C4    mov dx, #0x3C4
14771 3533           B0                     04    mov al, #0x04
14772 3535           EE                           outb dx,al
14773 3536           BA                   03C5    mov dx, #0x3C5
14774 3539           B0                     02    mov al, #0x02
14775 353B           EE                           outb dx,al
14776 353C           BB                   3546    mov bx, #msg_vga_init
14777 353F           53                           push bx
14778 3540           E8         4807              call _printf
14779 3543           44                           inc sp
14780 3544           44                           inc sp
14781 3545           C3                           ret
14782                       00003546            msg_vga_init:
14783 3546                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14784 3586                        0D            .byte 0x0d,0x0a,0x00
14785                                           ! 1494 endasm
14786                                           !BCC_ENDASM
14787                                           ! 1495 #asm
14788                                           !BCC_ASM
14789                       00003589            init_bios_area:
14790 3589           1E                           push ds
14791 358A           B8                   0040    mov ax, # 0x40
14792 358D           8ED8                         mov ds, ax
14793                                           ;; init detected hardware BIOS Area
14794 358F           BB                   0010    mov bx, # 0x10
14795 3592           8B07                         mov ax, [bx]
14796 3594           25                   FFCF    and ax, #0xffcf
14797                                           ;; set 80x25 color (not clear from RBIL but usual)
14798 3597           0D                   0020    or ax, #0x0020
14799 359A           8907                         mov [bx], ax
14800                                           ;; Just for the first int10 find its children
14801                                           ;; the default char height
14802 359C           BB                   0085    mov bx, # 0x85
14803 359F           B0                     10    mov al, #0x10
14804 35A1           8807                         mov [bx], al
14805                                           ;; Clear the screen
14806 35A3           BB                   0087    mov bx, # 0x87
14807 35A6           B0                     60    mov al, #0x60
14808 35A8           8807                         mov [bx], al
14809                                           ;; Set the basic screen we have
14810 35AA           BB                   0088    mov bx, # 0x88
14811 35AD           B0                     F9    mov al, #0xf9
14812 35AF           8807                         mov [bx], al
14813                                           ;; Set the basic modeset options
14814 35B1           BB                   0089    mov bx, # 0x89
14815 35B4           B0                     51    mov al, #0x51
14816 35B6           8807                         mov [bx], al
14817                                           ;; Set the default MSR
14818 35B8           BB                   0065    mov bx, # 0x65
14819 35BB           B0                     09    mov al, #0x09
14820 35BD           8807                         mov [bx], al
14821 35BF           1F                           pop ds
14822 35C0           C3                           ret
14823                       000035C1            _video_save_pointer_table:
14824 35C1                      0258              .word _video_param_table
14825 35C3                      C000              .word 0xc000
14826 35C5                      0000              .word 0
14827 35C7                      0000              .word 0
14828 35C9                      0000              .word 0
14829 35CB                      0000              .word 0
14830 35CD                      0000              .word 0
14831 35CF                      0000              .word 0
14832 35D1                      0000              .word 0
14833 35D3                      0000              .word 0
14834 35D5                      0000              .word 0
14835 35D7                      0000              .word 0
14836 35D9                      0000              .word 0
14837 35DB                      0000              .word 0
14838                                           ! 1545 endasm
14839                                           !BCC_ENDASM
14840                                           ! 1546 static void display_splash_screen()
14841                                           ! 1547 {
14842                                           
14843                       000035DD            _display_splash_screen:
14844                                           ! 1548 }
14845 35DD           C3                         ret
14846                                           ! 1549 static void display_info()
14847                                           ! 1550 {
14848                       000035DE            _display_info:
14849                                           ! 1551 #asm
14850                                           !BCC_ASM
14851 35DE           B8                   C000   mov ax,#0xc000
14852 35E1           8ED8                        mov ds,ax
14853 35E3           BE                   0022   mov si,#vgabios_name
14854 35E6           E8         0013             call _display_string
14855 35E9           BE                   0038   mov si,#vgabios_version
14856 35EC           E8         000D             call _display_string
14857                                            ;;mov si,#vgabios_copyright
14858                                            ;;call _display_string
14859                                            ;;mov si,#crlf
14860                                            ;;call _display_string
14861 35EF           BE                   007E   mov si,#vgabios_license
14862 35F2           E8         0007             call _display_string
14863 35F5           BE                   00B3   mov si,#vgabios_website
14864 35F8           E8         0001             call _display_string
14865                                           ! 1566 endasm
14866                                           !BCC_ENDASM
14867                                           ! 1567 }
14868 35FB           C3                         ret
14869                                           ! 1568 static void display_string()
14870                                           ! 1569 {
14871                       000035FC            _display_string:
14872                                           ! 1570 #asm
14873                                           !BCC_ASM
14874 35FC           8CD8                        mov ax,ds
14875 35FE           8EC0                        mov es,ax
14876 3600           89F7                        mov di,si
14877 3602           31C9                        xor cx,cx
14878 3604           F7D1                        not cx
14879 3606           30C0                        xor al,al
14880 3608           FC                          cld
14881 3609           F2                          repne
14882 360A           AE                           scasb
14883 360B           F7D1                        not cx
14884 360D           49                          dec cx
14885 360E           51                          push cx
14886 360F           B8                   0300   mov ax,#0x0300
14887 3612           BB                   0000   mov bx,#0x0000
14888 3615           CD                     10   int #0x10
14889 3617           59                          pop cx
14890 3618           B8                   1301   mov ax,#0x1301
14891 361B           BB                   000B   mov bx,#0x000b
14892 361E           89F5                        mov bp,si
14893 3620           CD                     10   int #0x10
14894                                           ! 1591 endasm
14895                                           !BCC_ENDASM
14896                                           ! 1592 }
14897 3622           C3                         ret
14898                                           ! 1593 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14899                                           ! 1594   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14900                       00003623            _int10_debugmsg:
14901                                           !BCC_EOS
14902                                           ! 1595 {
14903                                           ! 1596  if(( AX >> 8 )!=0x0E)
14904 3623           55                         push	bp
14905 3624           89E5                       mov	bp,sp
14906                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14907 3626           8B46         12            mov	ax,$12[bp]
14908 3629           88E0                       mov	al,ah
14909 362B           30E4                       xor	ah,ah
14910                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
14911 362D           3D                   000E  cmp	ax,*$E
14912 3630           74           20            je  	.1
14913                       00003632            .2:
14914                                           ! 1597   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
14915                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
14916 3632           FF76         0E            push	$E[bp]
14917                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
14918 3635           FF76         10            push	$10[bp]
14919                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
14920 3638           FF76         0C            push	$C[bp]
14921                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
14922 363B           8A46         12            mov	al,$12[bp]
14923                                           ! Debug: list unsigned char = al+0 (used reg = )
14924 363E           30E4                       xor	ah,ah
14925 3640           50                         push	ax
14926                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
14927 3641           8B46         12            mov	ax,$12[bp]
14928 3644           88E0                       mov	al,ah
14929 3646           30E4                       xor	ah,ah
14930                                           ! Debug: list unsigned int = ax+0 (used reg = )
14931 3648           50                         push	ax
14932                                           ! Debug: list * char = .3+0 (used reg = )
14933 3649           BB                   7F6E  mov	bx,#.3
14934 364C           53                         push	bx
14935                                           ! Debug: func () void = printf+0 (used reg = )
14936 364D           E8         46FA            call	_printf
14937 3650           89EC                       mov	sp,bp
14938                                           !BCC_EOS
14939                                           ! 1598 }
14940                       00003652            .1:
14941 3652           5D                         pop	bp
14942 3653           C3                         ret
14943                                           ! 1599 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14944                                           ! Register BX used in function int10_debugmsg
14945                                           ! 1600   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14946                       00003654            _int10_func:
14947                                           !BCC_EOS
14948                                           ! 1601 {
14949                                           ! 1602  switch(( AX >> 8 ))
14950 3654           55                         push	bp
14951 3655           89E5                       mov	bp,sp
14952                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14953 3657           8B46         12            mov	ax,$12[bp]
14954 365A           88E0                       mov	al,ah
14955 365C           30E4                       xor	ah,ah
14956                                           ! 1603   {
14957 365E           E9         0448            br 	.6
14958                                           ! 1604    case 0x00:
14959                                           ! 1605      biosfn_set_video_mode(( AX & 0x00ff ));
14960                       00003661            .7:
14961                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14962 3661           8A46         12            mov	al,$12[bp]
14963                                           ! Debug: list unsigned char = al+0 (used reg = )
14964 3664           30E4                       xor	ah,ah
14965 3666           50                         push	ax
14966                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14967 3667           E8         0490            call	_biosfn_set_video_mode
14968 366A           44                         inc	sp
14969 366B           44                         inc	sp
14970                                           !BCC_EOS
14971                                           ! 1606      switch(( AX & 0x00ff )&0x7F)
14972                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14973 366C           8A46         12            mov	al,$12[bp]
14974                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
14975 366F           24                     7F  and	al,*$7F
14976                                           ! 1607       {case 6:
14977 3671           EB           24            jmp .A
14978                                           ! 1608         AX = ((AX & 0xff00) | (0x3F));
14979                       00003673            .B:
14980                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
14981 3673           8B46         12            mov	ax,$12[bp]
14982 3676           30C0                       xor	al,al
14983                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
14984 3678           0C                     3F  or	al,*$3F
14985                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
14986 367A           8946         12            mov	$12[bp],ax
14987                                           !BCC_EOS
14988                                           ! 1609         break;
14989 367D           EB           3D            jmp .8
14990                                           !BCC_EOS
14991                                           ! 1610        case 0:
14992                                           ! 1611        case 1:
14993                       0000367F            .C:
14994                                           ! 1612        case 2:
14995                       0000367F            .D:
14996                                           ! 1613        case 3:
14997                       0000367F            .E:
14998                                           ! 1614        case 4:
14999                       0000367F            .F:
15000                                           ! 1615        case 5:
15001                       0000367F            .10:
15002                                           ! 1616        case 7:
15003                       0000367F            .11:
15004                                           ! 1617         AX = ((AX & 0xff00) | (0x30));
15005                       0000367F            .12:
15006                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15007 367F           8B46         12            mov	ax,$12[bp]
15008 3682           30C0                       xor	al,al
15009                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15010 3684           0C                     30  or	al,*$30
15011                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15012 3686           8946         12            mov	$12[bp],ax
15013                                           !BCC_EOS
15014                                           ! 1618         break;
15015 3689           EB           31            jmp .8
15016                                           !BCC_EOS
15017                                           ! 1619       default:
15018                                           ! 1620         AX = ((AX & 0xff00) | (0x20));
15019                       0000368B            .13:
15020                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15021 368B           8B46         12            mov	ax,$12[bp]
15022 368E           30C0                       xor	al,al
15023                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15024 3690           0C                     20  or	al,*$20
15025                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15026 3692           8946         12            mov	$12[bp],ax
15027                                           !BCC_EOS
15028                                           ! 1621       }
15029                                           ! 1622      break;
15030 3695           EB           25            jmp .8
15031                       00003697            .A:
15032 3697           2C                     00  sub	al,*0
15033 3699           72           F0            jb 	.13
15034 369B           3C                     07  cmp	al,*7
15035 369D           77           1B            ja  	.14
15036 369F           30E4                       xor	ah,ah
15037 36A1           D1E0                       shl	ax,*1
15038 36A3           89C3                       mov	bx,ax
15039 36A5           2E                         seg	cs
15040 36A6           FFA7       36AA            br	.15[bx]
15041                       000036AA            .15:
15042 36AA                      367F            .word	.C
15043 36AC                      367F            .word	.D
15044 36AE                      367F            .word	.E
15045 36B0                      367F            .word	.F
15046 36B2                      367F            .word	.10
15047 36B4                      367F            .word	.11
15048 36B6                      3673            .word	.B
15049 36B8                      367F            .word	.12
15050                       000036BA            .14:
15051 36BA           EB           CF            jmp	.13
15052                       000036BC            .8:
15053 36BC           E9         0439            br 	.4
15054                                           !BCC_EOS
15055                                           ! 1623    case 0x01:
15056                                           ! 1624      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15057                       000036BF            .16:
15058                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15059 36BF           8A46         10            mov	al,$10[bp]
15060                                           ! Debug: list unsigned char = al+0 (used reg = )
15061 36C2           30E4                       xor	ah,ah
15062 36C4           50                         push	ax
15063                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15064 36C5           8B46         10            mov	ax,$10[bp]
15065 36C8           88E0                       mov	al,ah
15066 36CA           30E4                       xor	ah,ah
15067                                           ! Debug: list unsigned int = ax+0 (used reg = )
15068 36CC           50                         push	ax
15069                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15070 36CD           E8         0ACB            call	_biosfn_set_cursor_shape
15071 36D0           83C4                   04  add	sp,*4
15072                                           !BCC_EOS
15073                                           ! 1625      break;
15074 36D3           E9         0422            br 	.4
15075                                           !BCC_EOS
15076                                           ! 1626    case 0x02:
15077                                           ! 1627      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15078                       000036D6            .17:
15079                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15080 36D6           FF76         0E            push	$E[bp]
15081                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15082 36D9           8B46         0C            mov	ax,$C[bp]
15083 36DC           88E0                       mov	al,ah
15084 36DE           30E4                       xor	ah,ah
15085                                           ! Debug: list unsigned int = ax+0 (used reg = )
15086 36E0           50                         push	ax
15087                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15088 36E1           E8         0BD2            call	_biosfn_set_cursor_pos
15089 36E4           83C4                   04  add	sp,*4
15090                                           !BCC_EOS
15091                                           ! 1628      break;
15092 36E7           E9         040E            br 	.4
15093                                           !BCC_EOS
15094                                           ! 1629    case 0x03:
15095                                           ! 1630      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX)
15096                       000036EA            .18:
15097                                           ! 1630 ;
15098                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15099 36EA           8D5E         0E            lea	bx,$E[bp]
15100 36ED           53                         push	bx
15101                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15102 36EE           8D5E         10            lea	bx,$10[bp]
15103 36F1           53                         push	bx
15104                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15105 36F2           8B46         0C            mov	ax,$C[bp]
15106 36F5           88E0                       mov	al,ah
15107 36F7           30E4                       xor	ah,ah
15108                                           ! Debug: list unsigned int = ax+0 (used reg = )
15109 36F9           50                         push	ax
15110                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15111 36FA           E8         0CBA            call	_biosfn_get_cursor_pos
15112 36FD           83C4                   06  add	sp,*6
15113                                           !BCC_EOS
15114                                           ! 1631      break;
15115 3700           E9         03F5            br 	.4
15116                                           !BCC_EOS
15117                                           ! 1632    case 0x04:
15118                                           ! 1633      unimplemented();
15119                       00003703            .19:
15120                                           ! Debug: func () void = unimplemented+0 (used reg = )
15121 3703           E8         4628            call	_unimplemented
15122                                           !BCC_EOS
15123                                           ! 1634      AX=0x00;
15124                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15125 3706           31C0                       xor	ax,ax
15126 3708           8946         12            mov	$12[bp],ax
15127                                           !BCC_EOS
15128                                           ! 1635      BX=0x00;
15129                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15130 370B           31C0                       xor	ax,ax
15131 370D           8946         0C            mov	$C[bp],ax
15132                                           !BCC_EOS
15133                                           ! 1636      CX=0x00;
15134                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15135 3710           31C0                       xor	ax,ax
15136 3712           8946         10            mov	$10[bp],ax
15137                                           !BCC_EOS
15138                                           ! 1637      DX=0x00;
15139                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15140 3715           31C0                       xor	ax,ax
15141 3717           8946         0E            mov	$E[bp],ax
15142                                           !BCC_EOS
15143                                           ! 1638      break;
15144 371A           E9         03DB            br 	.4
15145                                           !BCC_EOS
15146                                           ! 1639    case 0x05:
15147                                           ! 1640      biosfn_set_active_page(( AX & 0x00ff ));
15148                       0000371D            .1A:
15149                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15150 371D           8A46         12            mov	al,$12[bp]
15151                                           ! Debug: list unsigned char = al+0 (used reg = )
15152 3720           30E4                       xor	ah,ah
15153 3722           50                         push	ax
15154                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15155 3723           E8         0D06            call	_biosfn_set_active_page
15156 3726           44                         inc	sp
15157 3727           44                         inc	sp
15158                                           !BCC_EOS
15159                                           ! 1641      break;
15160 3728           E9         03CD            br 	.4
15161                                           !BCC_EOS
15162                                           ! 1642    case 0x06:
15163                                           ! 1643      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15164                       0000372B            .1B:
15165                                           ! Debug: list int = const 1 (used reg = )
15166 372B           B8                   0001  mov	ax,*1
15167 372E           50                         push	ax
15168                                           ! Debug: list int = const $FF (used reg = )
15169 372F           B8                   00FF  mov	ax,#$FF
15170 3732           50                         push	ax
15171                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15172 3733           8A46         0E            mov	al,$E[bp]
15173                                           ! Debug: list unsigned char = al+0 (used reg = )
15174 3736           30E4                       xor	ah,ah
15175 3738           50                         push	ax
15176                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15177 3739           8B46         0E            mov	ax,$E[bp]
15178 373C           88E0                       mov	al,ah
15179 373E           30E4                       xor	ah,ah
15180                                           ! Debug: list unsigned int = ax+0 (used reg = )
15181 3740           50                         push	ax
15182                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15183 3741           8A46         10            mov	al,$10[bp]
15184                                           ! Debug: list unsigned char = al+0 (used reg = )
15185 3744           30E4                       xor	ah,ah
15186 3746           50                         push	ax
15187                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15188 3747           8B46         10            mov	ax,$10[bp]
15189 374A           88E0                       mov	al,ah
15190 374C           30E4                       xor	ah,ah
15191                                           ! Debug: list unsigned int = ax+0 (used reg = )
15192 374E           50                         push	ax
15193                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15194 374F           8B46         0C            mov	ax,$C[bp]
15195 3752           88E0                       mov	al,ah
15196 3754           30E4                       xor	ah,ah
15197                                           ! Debug: list unsigned int = ax+0 (used reg = )
15198 3756           50                         push	ax
15199                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15200 3757           8A46         12            mov	al,$12[bp]
15201                                           ! Debug: list unsigned char = al+0 (used reg = )
15202 375A           30E4                       xor	ah,ah
15203 375C           50                         push	ax
15204                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15205 375D           E8         1163            call	_biosfn_scroll
15206 3760           83C4                   10  add	sp,*$10
15207                                           !BCC_EOS
15208                                           ! 1644      break;
15209 3763           E9         0392            br 	.4
15210                                           !BCC_EOS
15211                                           ! 1645    case 0x07:
15212                                           ! 1646      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15213                       00003766            .1C:
15214                                           ! Debug: list int = const 0 (used reg = )
15215 3766           31C0                       xor	ax,ax
15216 3768           50                         push	ax
15217                                           ! Debug: list int = const $FF (used reg = )
15218 3769           B8                   00FF  mov	ax,#$FF
15219 376C           50                         push	ax
15220                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15221 376D           8A46         0E            mov	al,$E[bp]
15222                                           ! Debug: list unsigned char = al+0 (used reg = )
15223 3770           30E4                       xor	ah,ah
15224 3772           50                         push	ax
15225                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15226 3773           8B46         0E            mov	ax,$E[bp]
15227 3776           88E0                       mov	al,ah
15228 3778           30E4                       xor	ah,ah
15229                                           ! Debug: list unsigned int = ax+0 (used reg = )
15230 377A           50                         push	ax
15231                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15232 377B           8A46         10            mov	al,$10[bp]
15233                                           ! Debug: list unsigned char = al+0 (used reg = )
15234 377E           30E4                       xor	ah,ah
15235 3780           50                         push	ax
15236                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15237 3781           8B46         10            mov	ax,$10[bp]
15238 3784           88E0                       mov	al,ah
15239 3786           30E4                       xor	ah,ah
15240                                           ! Debug: list unsigned int = ax+0 (used reg = )
15241 3788           50                         push	ax
15242                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15243 3789           8B46         0C            mov	ax,$C[bp]
15244 378C           88E0                       mov	al,ah
15245 378E           30E4                       xor	ah,ah
15246                                           ! Debug: list unsigned int = ax+0 (used reg = )
15247 3790           50                         push	ax
15248                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15249 3791           8A46         12            mov	al,$12[bp]
15250                                           ! Debug: list unsigned char = al+0 (used reg = )
15251 3794           30E4                       xor	ah,ah
15252 3796           50                         push	ax
15253                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15254 3797           E8         1129            call	_biosfn_scroll
15255 379A           83C4                   10  add	sp,*$10
15256                                           !BCC_EOS
15257                                           ! 1647      break;
15258 379D           E9         0358            br 	.4
15259                                           !BCC_EOS
15260                                           ! 1648    case 0x08:
15261                                           ! 1649      biosfn_read_char_attr(( BX >> 8 ),&AX);
15262                       000037A0            .1D:
15263                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15264 37A0           8D5E         12            lea	bx,$12[bp]
15265 37A3           53                         push	bx
15266                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15267 37A4           8B46         0C            mov	ax,$C[bp]
15268 37A7           88E0                       mov	al,ah
15269 37A9           30E4                       xor	ah,ah
15270                                           ! Debug: list unsigned int = ax+0 (used reg = )
15271 37AB           50                         push	ax
15272                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15273 37AC           E8         184F            call	_biosfn_read_char_attr
15274 37AF           83C4                   04  add	sp,*4
15275                                           !BCC_EOS
15276                                           ! 1650      break;
15277 37B2           E9         0343            br 	.4
15278                                           !BCC_EOS
15279                                           ! 1651    case 0x09:
15280                                           ! 1652      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15281                       000037B5            .1E:
15282                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15283 37B5           FF76         10            push	$10[bp]
15284                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15285 37B8           8A46         0C            mov	al,$C[bp]
15286                                           ! Debug: list unsigned char = al+0 (used reg = )
15287 37BB           30E4                       xor	ah,ah
15288 37BD           50                         push	ax
15289                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15290 37BE           8B46         0C            mov	ax,$C[bp]
15291 37C1           88E0                       mov	al,ah
15292 37C3           30E4                       xor	ah,ah
15293                                           ! Debug: list unsigned int = ax+0 (used reg = )
15294 37C5           50                         push	ax
15295                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15296 37C6           8A46         12            mov	al,$12[bp]
15297                                           ! Debug: list unsigned char = al+0 (used reg = )
15298 37C9           30E4                       xor	ah,ah
15299 37CB           50                         push	ax
15300                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15301 37CC           E8         1D7D            call	_biosfn_write_char_attr
15302 37CF           83C4                   08  add	sp,*8
15303                                           !BCC_EOS
15304                                           ! 1653      break;
15305 37D2           E9         0323            br 	.4
15306                                           !BCC_EOS
15307                                           ! 1654    case 0x0A:
15308                                           ! 1655      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15309                       000037D5            .1F:
15310                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15311 37D5           FF76         10            push	$10[bp]
15312                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15313 37D8           8A46         0C            mov	al,$C[bp]
15314                                           ! Debug: list unsigned char = al+0 (used reg = )
15315 37DB           30E4                       xor	ah,ah
15316 37DD           50                         push	ax
15317                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15318 37DE           8B46         0C            mov	ax,$C[bp]
15319 37E1           88E0                       mov	al,ah
15320 37E3           30E4                       xor	ah,ah
15321                                           ! Debug: list unsigned int = ax+0 (used reg = )
15322 37E5           50                         push	ax
15323                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15324 37E6           8A46         12            mov	al,$12[bp]
15325                                           ! Debug: list unsigned char = al+0 (used reg = )
15326 37E9           30E4                       xor	ah,ah
15327 37EB           50                         push	ax
15328                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15329 37EC           E8         1F57            call	_biosfn_write_char_only
15330 37EF           83C4                   08  add	sp,*8
15331                                           !BCC_EOS
15332                                           ! 1656      break;
15333 37F2           E9         0303            br 	.4
15334                                           !BCC_EOS
15335                                           ! 1657    case 0x0C:
15336                                           ! 1658      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15337                       000037F5            .20:
15338                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15339 37F5           FF76         0E            push	$E[bp]
15340                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15341 37F8           FF76         10            push	$10[bp]
15342                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15343 37FB           8A46         12            mov	al,$12[bp]
15344                                           ! Debug: list unsigned char = al+0 (used reg = )
15345 37FE           30E4                       xor	ah,ah
15346 3800           50                         push	ax
15347                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15348 3801           8B46         0C            mov	ax,$C[bp]
15349 3804           88E0                       mov	al,ah
15350 3806           30E4                       xor	ah,ah
15351                                           ! Debug: list unsigned int = ax+0 (used reg = )
15352 3808           50                         push	ax
15353                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15354 3809           E8         21B3            call	_biosfn_write_pixel
15355 380C           83C4                   08  add	sp,*8
15356                                           !BCC_EOS
15357                                           ! 1659      break;
15358 380F           E9         02E6            br 	.4
15359                                           !BCC_EOS
15360                                           ! 1660    case 0x0D:
15361                                           ! 1661      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15362                       00003812            .21:
15363                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15364 3812           8D5E         12            lea	bx,$12[bp]
15365 3815           53                         push	bx
15366                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15367 3816           FF76         0E            push	$E[bp]
15368                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15369 3819           FF76         10            push	$10[bp]
15370                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15371 381C           8B46         0C            mov	ax,$C[bp]
15372 381F           88E0                       mov	al,ah
15373 3821           30E4                       xor	ah,ah
15374                                           ! Debug: list unsigned int = ax+0 (used reg = )
15375 3823           50                         push	ax
15376                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15377 3824           E8         243C            call	_biosfn_read_pixel
15378 3827           83C4                   08  add	sp,*8
15379                                           !BCC_EOS
15380                                           ! 1662      break;
15381 382A           E9         02CB            br 	.4
15382                                           !BCC_EOS
15383                                           ! 1663    case 0x0E:
15384                                           ! 1664      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15385                       0000382D            .22:
15386                                           ! Debug: list int = const 2 (used reg = )
15387 382D           B8                   0002  mov	ax,*2
15388 3830           50                         push	ax
15389                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15390 3831           8A46         0C            mov	al,$C[bp]
15391                                           ! Debug: list unsigned char = al+0 (used reg = )
15392 3834           30E4                       xor	ah,ah
15393 3836           50                         push	ax
15394                                           ! Debug: list int = const $FF (used reg = )
15395 3837           B8                   00FF  mov	ax,#$FF
15396 383A           50                         push	ax
15397                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15398 383B           8A46         12            mov	al,$12[bp]
15399                                           ! Debug: list unsigned char = al+0 (used reg = )
15400 383E           30E4                       xor	ah,ah
15401 3840           50                         push	ax
15402                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15403 3841           E8         262B            call	_biosfn_write_teletype
15404 3844           83C4                   08  add	sp,*8
15405                                           !BCC_EOS
15406                                           ! 1665      break;
15407 3847           E9         02AE            br 	.4
15408                                           !BCC_EOS
15409                                           ! 1666    case 0x10:
15410                                           ! 1667      biosfn_perform_gray_scale_summing(BX,CX);
15411                       0000384A            .23:
15412                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15413 384A           FF76         10            push	$10[bp]
15414                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15415 384D           FF76         0C            push	$C[bp]
15416                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15417 3850           E8         2C7F            call	_biosfn_perform_gray_scale_summing
15418 3853           83C4                   04  add	sp,*4
15419                                           !BCC_EOS
15420                                           ! 1668      break;
15421 3856           E9         029F            br 	.4
15422                                           !BCC_EOS
15423                                           ! 1669    case 0x11:
15424                                           ! 1670      switch(( AX & 0x00ff ))
15425                       00003859            .24:
15426                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15427 3859           8A46         12            mov	al,$12[bp]
15428                                           ! 1671       {
15429 385C           E9         00E4            br 	.27
15430                                           ! 1672        case 0x00:
15431                                           ! 1673        case 0x10:
15432                       0000385F            .28:
15433                                           ! 1674         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15434                       0000385F            .29:
15435                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15436 385F           8B46         0C            mov	ax,$C[bp]
15437 3862           88E0                       mov	al,ah
15438 3864           30E4                       xor	ah,ah
15439                                           ! Debug: list unsigned int = ax+0 (used reg = )
15440 3866           50                         push	ax
15441                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15442 3867           8A46         0C            mov	al,$C[bp]
15443                                           ! Debug: list unsigned char = al+0 (used reg = )
15444 386A           30E4                       xor	ah,ah
15445 386C           50                         push	ax
15446                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15447 386D           FF76         0E            push	$E[bp]
15448                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15449 3870           FF76         10            push	$10[bp]
15450                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15451 3873           FF76         08            push	8[bp]
15452                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15453 3876           FF76         16            push	$16[bp]
15454                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15455 3879           8A46         12            mov	al,$12[bp]
15456                                           ! Debug: list unsigned char = al+0 (used reg = )
15457 387C           30E4                       xor	ah,ah
15458 387E           50                         push	ax
15459                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15460 387F           E8         2EF8            call	_biosfn_load_text_user_pat
15461 3882           83C4                   0E  add	sp,*$E
15462                                           !BCC_EOS
15463                                           ! 1675         break;
15464 3885           E9         011F            br 	.25
15465                                           !BCC_EOS
15466                                           ! 1676        case 0x01:
15467                                           ! 1677        case 0x11:
15468                       00003888            .2A:
15469                                           ! 1678         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15470                       00003888            .2B:
15471                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15472 3888           8A46         0C            mov	al,$C[bp]
15473                                           ! Debug: list unsigned char = al+0 (used reg = )
15474 388B           30E4                       xor	ah,ah
15475 388D           50                         push	ax
15476                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15477 388E           8A46         12            mov	al,$12[bp]
15478                                           ! Debug: list unsigned char = al+0 (used reg = )
15479 3891           30E4                       xor	ah,ah
15480 3893           50                         push	ax
15481                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15482 3894           E8         2F7F            call	_biosfn_load_text_8_14_pat
15483 3897           83C4                   04  add	sp,*4
15484                                           !BCC_EOS
15485                                           ! 1679         break;
15486 389A           E9         010A            br 	.25
15487                                           !BCC_EOS
15488                                           ! 1680        case 0x02:
15489                                           ! 1681        case 0x12:
15490                       0000389D            .2C:
15491                                           ! 1682         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15492                       0000389D            .2D:
15493                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15494 389D           8A46         0C            mov	al,$C[bp]
15495                                           ! Debug: list unsigned char = al+0 (used reg = )
15496 38A0           30E4                       xor	ah,ah
15497 38A2           50                         push	ax
15498                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15499 38A3           8A46         12            mov	al,$12[bp]
15500                                           ! Debug: list unsigned char = al+0 (used reg = )
15501 38A6           30E4                       xor	ah,ah
15502 38A8           50                         push	ax
15503                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15504 38A9           E8         3001            call	_biosfn_load_text_8_8_pat
15505 38AC           83C4                   04  add	sp,*4
15506                                           !BCC_EOS
15507                                           ! 1683         break;
15508 38AF           E9         00F5            br 	.25
15509                                           !BCC_EOS
15510                                           ! 1684        case 0x04:
15511                                           ! 1685        case 0x14:
15512                       000038B2            .2E:
15513                                           ! 1686         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15514                       000038B2            .2F:
15515                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15516 38B2           8A46         0C            mov	al,$C[bp]
15517                                           ! Debug: list unsigned char = al+0 (used reg = )
15518 38B5           30E4                       xor	ah,ah
15519 38B7           50                         push	ax
15520                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15521 38B8           8A46         12            mov	al,$12[bp]
15522                                           ! Debug: list unsigned char = al+0 (used reg = )
15523 38BB           30E4                       xor	ah,ah
15524 38BD           50                         push	ax
15525                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15526 38BE           E8         308A            call	_biosfn_load_text_8_16_pat
15527 38C1           83C4                   04  add	sp,*4
15528                                           !BCC_EOS
15529                                           ! 1687         break;
15530 38C4           E9         00E0            br 	.25
15531                                           !BCC_EOS
15532                                           ! 1688        case 0x20:
15533                                           ! 1689         biosfn_load_gfx_8_8_chars(ES,BP);
15534                       000038C7            .30:
15535                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15536 38C7           FF76         08            push	8[bp]
15537                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15538 38CA           FF76         16            push	$16[bp]
15539                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15540 38CD           E8         310C            call	_biosfn_load_gfx_8_8_chars
15541 38D0           83C4                   04  add	sp,*4
15542                                           !BCC_EOS
15543                                           ! 1690         break;
15544 38D3           E9         00D1            br 	.25
15545                                           !BCC_EOS
15546                                           ! 1691        case 0x21:
15547                                           ! 1692         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15548                       000038D6            .31:
15549                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15550 38D6           8A46         0E            mov	al,$E[bp]
15551                                           ! Debug: list unsigned char = al+0 (used reg = )
15552 38D9           30E4                       xor	ah,ah
15553 38DB           50                         push	ax
15554                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15555 38DC           8A46         0C            mov	al,$C[bp]
15556                                           ! Debug: list unsigned char = al+0 (used reg = )
15557 38DF           30E4                       xor	ah,ah
15558 38E1           50                         push	ax
15559                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15560 38E2           FF76         10            push	$10[bp]
15561                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15562 38E5           FF76         08            push	8[bp]
15563                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15564 38E8           FF76         16            push	$16[bp]
15565                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15566 38EB           E8         30F6            call	_biosfn_load_gfx_user_chars
15567 38EE           83C4                   0A  add	sp,*$A
15568                                           !BCC_EOS
15569                                           ! 1693         break;
15570 38F1           E9         00B3            br 	.25
15571                                           !BCC_EOS
15572                                           ! 1694        case 0x22:
15573                                           ! 1695         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15574                       000038F4            .32:
15575                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15576 38F4           8A46         0C            mov	al,$C[bp]
15577                                           ! Debug: list unsigned char = al+0 (used reg = )
15578 38F7           30E4                       xor	ah,ah
15579 38F9           50                         push	ax
15580                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15581 38FA           E8         30EF            call	_biosfn_load_gfx_8_14_chars
15582 38FD           44                         inc	sp
15583 38FE           44                         inc	sp
15584                                           !BCC_EOS
15585                                           ! 1696         break;
15586 38FF           E9         00A5            br 	.25
15587                                           !BCC_EOS
15588                                           ! 1697        case 0x23:
15589                                           ! 1698         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15590                       00003902            .33:
15591                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15592 3902           8A46         0C            mov	al,$C[bp]
15593                                           ! Debug: list unsigned char = al+0 (used reg = )
15594 3905           30E4                       xor	ah,ah
15595 3907           50                         push	ax
15596                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15597 3908           E8         30E9            call	_biosfn_load_gfx_8_8_dd_chars
15598 390B           44                         inc	sp
15599 390C           44                         inc	sp
15600                                           !BCC_EOS
15601                                           ! 1699         break;
15602 390D           E9         0097            br 	.25
15603                                           !BCC_EOS
15604                                           ! 1700        case 0x24:
15605                                           ! 1701         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ))
15606                       00003910            .34:
15607                                           ! 1701 ;
15608                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15609 3910           8A46         0C            mov	al,$C[bp]
15610                                           ! Debug: list unsigned char = al+0 (used reg = )
15611 3913           30E4                       xor	ah,ah
15612 3915           50                         push	ax
15613                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15614 3916           E8         30E3            call	_biosfn_load_gfx_8_16_chars
15615 3919           44                         inc	sp
15616 391A           44                         inc	sp
15617                                           !BCC_EOS
15618                                           ! 1702         break;
15619 391B           E9         0089            br 	.25
15620                                           !BCC_EOS
15621                                           ! 1703        case 0x30:
15622                                           ! 1704         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15623                       0000391E            .35:
15624                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15625 391E           8D5E         0E            lea	bx,$E[bp]
15626 3921           53                         push	bx
15627                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15628 3922           8D5E         10            lea	bx,$10[bp]
15629 3925           53                         push	bx
15630                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15631 3926           8D5E         08            lea	bx,8[bp]
15632 3929           53                         push	bx
15633                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15634 392A           8D5E         16            lea	bx,$16[bp]
15635 392D           53                         push	bx
15636                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15637 392E           8B46         0C            mov	ax,$C[bp]
15638 3931           88E0                       mov	al,ah
15639 3933           30E4                       xor	ah,ah
15640                                           ! Debug: list unsigned int = ax+0 (used reg = )
15641 3935           50                         push	ax
15642                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15643 3936           E8         30CB            call	_biosfn_get_font_info
15644 3939           83C4                   0A  add	sp,*$A
15645                                           !BCC_EOS
15646                                           ! 1705         break;
15647 393C           EB           69            jmp .25
15648                                           !BCC_EOS
15649                                           ! 1706        default:
15650                                           ! 1707         unknown();
15651                       0000393E            .36:
15652                                           ! Debug: func () void = unknown+0 (used reg = )
15653 393E           E8         43FB            call	_unknown
15654                                           !BCC_EOS
15655                                           ! 1708       }
15656                                           ! 1709      break;
15657 3941           EB           64            jmp .25
15658                       00003943            .27:
15659 3943           2C                     00  sub	al,*0
15660 3945   7503    E9         FF15            beq 	.28
15661 394A           2C                     01  sub	al,*1
15662 394C   7503    E9         FF37            beq 	.2A
15663 3951           2C                     01  sub	al,*1
15664 3953   7503    E9         FF45            beq 	.2C
15665 3958           2C                     02  sub	al,*2
15666 395A   7503    E9         FF53            beq 	.2E
15667 395F           2C                     0C  sub	al,*$C
15668 3961   7503    E9         FEF9            beq 	.29
15669 3966           2C                     01  sub	al,*1
15670 3968   7503    E9         FF1B            beq 	.2B
15671 396D           2C                     01  sub	al,*1
15672 396F   7503    E9         FF29            beq 	.2D
15673 3974           2C                     02  sub	al,*2
15674 3976   7503    E9         FF37            beq 	.2F
15675 397B           2C                     0C  sub	al,*$C
15676 397D   7503    E9         FF45            beq 	.30
15677 3982           2C                     01  sub	al,*1
15678 3984   7503    E9         FF4D            beq 	.31
15679 3989           2C                     01  sub	al,*1
15680 398B   7503    E9         FF64            beq 	.32
15681 3990           2C                     01  sub	al,*1
15682 3992   7503    E9         FF6B            beq 	.33
15683 3997           2C                     01  sub	al,*1
15684 3999   7503    E9         FF72            beq 	.34
15685 399E           2C                     0C  sub	al,*$C
15686 39A0   7503    E9         FF79            beq 	.35
15687 39A5           EB           97            jmp	.36
15688                       000039A7            .25:
15689 39A7           E9         014E            br 	.4
15690                                           !BCC_EOS
15691                                           ! 1710    case 0x12:
15692                                           ! 1711      switch(( BX & 0x00ff ))
15693                       000039AA            .37:
15694                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15695 39AA           8A46         0C            mov	al,$C[bp]
15696                                           ! 1712       {
15697 39AD           EB           3F            jmp .3A
15698                                           ! 1713        case 0x20:
15699                                           ! 1714         biosfn_alternate_prtsc();
15700                       000039AF            .3B:
15701                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15702 39AF           E8         323D            call	_biosfn_alternate_prtsc
15703                                           !BCC_EOS
15704                                           ! 1715         break;
15705 39B2           EB           48            jmp .38
15706                                           !BCC_EOS
15707                                           ! 1716        case 0x35:
15708                                           ! 1717         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15709                       000039B4            .3C:
15710                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15711 39B4           FF76         0E            push	$E[bp]
15712                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15713 39B7           FF76         16            push	$16[bp]
15714                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15715 39BA           8A46         12            mov	al,$12[bp]
15716                                           ! Debug: list unsigned char = al+0 (used reg = )
15717 39BD           30E4                       xor	ah,ah
15718 39BF           50                         push	ax
15719                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15720 39C0           E8         3343            call	_biosfn_switch_video_interface
15721 39C3           83C4                   06  add	sp,*6
15722                                           !BCC_EOS
15723                                           ! 1718         AX = ((AX & 0xff00) | (0x12));
15724                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15725 39C6           8B46         12            mov	ax,$12[bp]
15726 39C9           30C0                       xor	al,al
15727                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15728 39CB           0C                     12  or	al,*$12
15729                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15730 39CD           8946         12            mov	$12[bp],ax
15731                                           !BCC_EOS
15732                                           ! 1719         break;
15733 39D0           EB           2A            jmp .38
15734                                           !BCC_EOS
15735                                           ! 1720        case 0x36:
15736                                           ! 1721         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15737                       000039D2            .3D:
15738                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15739 39D2           8A46         12            mov	al,$12[bp]
15740                                           ! Debug: list unsigned char = al+0 (used reg = )
15741 39D5           30E4                       xor	ah,ah
15742 39D7           50                         push	ax
15743                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15744 39D8           E8         3333            call	_biosfn_enable_video_refresh_control
15745 39DB           44                         inc	sp
15746 39DC           44                         inc	sp
15747                                           !BCC_EOS
15748                                           ! 1722         AX = ((AX & 0xff00) | (0x12));
15749                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15750 39DD           8B46         12            mov	ax,$12[bp]
15751 39E0           30C0                       xor	al,al
15752                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15753 39E2           0C                     12  or	al,*$12
15754                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15755 39E4           8946         12            mov	$12[bp],ax
15756                                           !BCC_EOS
15757                                           ! 1723         break;
15758 39E7           EB           13            jmp .38
15759                                           !BCC_EOS
15760                                           ! 1724        default:
15761                                           ! 1725         unknown();
15762                       000039E9            .3E:
15763                                           ! Debug: func () void = unknown+0 (used reg = )
15764 39E9           E8         4350            call	_unknown
15765                                           !BCC_EOS
15766                                           ! 1726       }
15767                                           ! 1727      break;
15768 39EC           EB           0E            jmp .38
15769                       000039EE            .3A:
15770 39EE           2C                     20  sub	al,*$20
15771 39F0           74           BD            je 	.3B
15772 39F2           2C                     15  sub	al,*$15
15773 39F4           74           BE            je 	.3C
15774 39F6           2C                     01  sub	al,*1
15775 39F8           74           D8            je 	.3D
15776 39FA           EB           ED            jmp	.3E
15777                       000039FC            .38:
15778 39FC           E9         00F9            br 	.4
15779                                           !BCC_EOS
15780                                           ! 1728    case 0x13:
15781                                           ! 1729      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15782                       000039FF            .3F:
15783                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15784 39FF           FF76         08            push	8[bp]
15785                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15786 3A02           FF76         16            push	$16[bp]
15787                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15788 3A05           8A46         0E            mov	al,$E[bp]
15789                                           ! Debug: list unsigned char = al+0 (used reg = )
15790 3A08           30E4                       xor	ah,ah
15791 3A0A           50                         push	ax
15792                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15793 3A0B           8B46         0E            mov	ax,$E[bp]
15794 3A0E           88E0                       mov	al,ah
15795 3A10           30E4                       xor	ah,ah
15796                                           ! Debug: list unsigned int = ax+0 (used reg = )
15797 3A12           50                         push	ax
15798                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15799 3A13           FF76         10            push	$10[bp]
15800                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15801 3A16           8A46         0C            mov	al,$C[bp]
15802                                           ! Debug: list unsigned char = al+0 (used reg = )
15803 3A19           30E4                       xor	ah,ah
15804 3A1B           50                         push	ax
15805                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15806 3A1C           8B46         0C            mov	ax,$C[bp]
15807 3A1F           88E0                       mov	al,ah
15808 3A21           30E4                       xor	ah,ah
15809                                           ! Debug: list unsigned int = ax+0 (used reg = )
15810 3A23           50                         push	ax
15811                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15812 3A24           8A46         12            mov	al,$12[bp]
15813                                           ! Debug: list unsigned char = al+0 (used reg = )
15814 3A27           30E4                       xor	ah,ah
15815 3A29           50                         push	ax
15816                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15817 3A2A           E8         32E9            call	_biosfn_write_string
15818 3A2D           83C4                   10  add	sp,*$10
15819                                           !BCC_EOS
15820                                           ! 1730      break;
15821 3A30           E9         00C5            br 	.4
15822                                           !BCC_EOS
15823                                           ! 1731    case 0x1B:
15824                                           ! 1732      biosfn_read_state_info(BX,ES,DI);
15825                       00003A33            .40:
15826                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15827 3A33           FF76         04            push	4[bp]
15828                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15829 3A36           FF76         16            push	$16[bp]
15830                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15831 3A39           FF76         0C            push	$C[bp]
15832                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15833 3A3C           E8         3423            call	_biosfn_read_state_info
15834 3A3F           83C4                   06  add	sp,*6
15835                                           !BCC_EOS
15836                                           ! 1733      AX = ((AX & 0xff00) | (0x1B));
15837                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15838 3A42           8B46         12            mov	ax,$12[bp]
15839 3A45           30C0                       xor	al,al
15840                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15841 3A47           0C                     1B  or	al,*$1B
15842                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15843 3A49           8946         12            mov	$12[bp],ax
15844                                           !BCC_EOS
15845                                           ! 1734      break;
15846 3A4C           E9         00A9            br 	.4
15847                                           !BCC_EOS
15848                                           ! 1735    case 0x1C:
15849                                           ! 1736      switch(( AX & 0x00ff ))
15850                       00003A4F            .41:
15851                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15852 3A4F           8A46         12            mov	al,$12[bp]
15853                                           ! 1737       {
15854 3A52           EB           36            jmp .44
15855                                           ! 1738        case 0x00:
15856                                           ! 1739         biosfn_read_video_state_size(CX,&BX);
15857                       00003A54            .45:
15858                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15859 3A54           8D5E         0C            lea	bx,$C[bp]
15860 3A57           53                         push	bx
15861                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15862 3A58           FF76         10            push	$10[bp]
15863                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15864 3A5B           E8         3583            call	_biosfn_read_video_state_size
15865 3A5E           83C4                   04  add	sp,*4
15866                                           !BCC_EOS
15867                                           ! 1740         break;
15868 3A61           EB           35            jmp .42
15869                                           !BCC_EOS
15870                                           ! 1741        case 0x01:
15871                                           ! 1742         biosfn_save_video_state(CX,ES,BX);
15872                       00003A63            .46:
15873                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15874 3A63           FF76         0C            push	$C[bp]
15875                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15876 3A66           FF76         16            push	$16[bp]
15877                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15878 3A69           FF76         10            push	$10[bp]
15879                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15880 3A6C           E8         3596            call	_biosfn_save_video_state
15881 3A6F           83C4                   06  add	sp,*6
15882                                           !BCC_EOS
15883                                           ! 1743         break;
15884 3A72           EB           24            jmp .42
15885                                           !BCC_EOS
15886                                           ! 1744        case 0x02:
15887                                           ! 1745         biosfn_restore_video_state(CX,ES,BX);
15888                       00003A74            .47:
15889                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15890 3A74           FF76         0C            push	$C[bp]
15891                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15892 3A77           FF76         16            push	$16[bp]
15893                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15894 3A7A           FF76         10            push	$10[bp]
15895                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15896 3A7D           E8         3B52            call	_biosfn_restore_video_state
15897 3A80           83C4                   06  add	sp,*6
15898                                           !BCC_EOS
15899                                           ! 1746         break;
15900 3A83           EB           13            jmp .42
15901                                           !BCC_EOS
15902                                           ! 1747        default:
15903                                           ! 1748         unknown();
15904                       00003A85            .48:
15905                                           ! Debug: func () void = unknown+0 (used reg = )
15906 3A85           E8         42B4            call	_unknown
15907                                           !BCC_EOS
15908                                           ! 1749       }
15909                                           ! 1750      AX = ((AX & 0xff00) | (0x1C));
15910 3A88           EB           0E            jmp .42
15911                       00003A8A            .44:
15912 3A8A           2C                     00  sub	al,*0
15913 3A8C           74           C6            je 	.45
15914 3A8E           2C                     01  sub	al,*1
15915 3A90           74           D1            je 	.46
15916 3A92           2C                     01  sub	al,*1
15917 3A94           74           DE            je 	.47
15918 3A96           EB           ED            jmp	.48
15919                       00003A98            .42:
15920                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15921 3A98           8B46         12            mov	ax,$12[bp]
15922 3A9B           30C0                       xor	al,al
15923                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15924 3A9D           0C                     1C  or	al,*$1C
15925                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15926 3A9F           8946         12            mov	$12[bp],ax
15927                                           !BCC_EOS
15928                                           ! 1751      break;
15929 3AA2           EB           54            jmp .4
15930                                           !BCC_EOS
15931                                           ! 1752    default:
15932                                           ! 1753      unknown();
15933                       00003AA4            .49:
15934                                           ! Debug: func () void = unknown+0 (used reg = )
15935 3AA4           E8         4295            call	_unknown
15936                                           !BCC_EOS
15937                                           ! 1754   }
15938                                           ! 1755 }
15939 3AA7           EB           4F            jmp .4
15940                       00003AA9            .6:
15941 3AA9           2D                   0000  sub	ax,*0
15942 3AAC           7C           F6            jl 	.49
15943 3AAE           3D                   001C  cmp	ax,*$1C
15944 3AB1           77           43            ja  	.4A
15945 3AB3           D1E0                       shl	ax,*1
15946 3AB5           89C3                       mov	bx,ax
15947 3AB7           2E                         seg	cs
15948 3AB8           FFA7       3ABC            br	.4B[bx]
15949                       00003ABC            .4B:
15950 3ABC                      3661            .word	.7
15951 3ABE                      36BF            .word	.16
15952 3AC0                      36D6            .word	.17
15953 3AC2                      36EA            .word	.18
15954 3AC4                      3703            .word	.19
15955 3AC6                      371D            .word	.1A
15956 3AC8                      372B            .word	.1B
15957 3ACA                      3766            .word	.1C
15958 3ACC                      37A0            .word	.1D
15959 3ACE                      37B5            .word	.1E
15960 3AD0                      37D5            .word	.1F
15961 3AD2                      3AA4            .word	.49
15962 3AD4                      37F5            .word	.20
15963 3AD6                      3812            .word	.21
15964 3AD8                      382D            .word	.22
15965 3ADA                      3AA4            .word	.49
15966 3ADC                      384A            .word	.23
15967 3ADE                      3859            .word	.24
15968 3AE0                      39AA            .word	.37
15969 3AE2                      39FF            .word	.3F
15970 3AE4                      3AA4            .word	.49
15971 3AE6                      3AA4            .word	.49
15972 3AE8                      3AA4            .word	.49
15973 3AEA                      3AA4            .word	.49
15974 3AEC                      3AA4            .word	.49
15975 3AEE                      3AA4            .word	.49
15976 3AF0                      3AA4            .word	.49
15977 3AF2                      3A33            .word	.40
15978 3AF4                      3A4F            .word	.41
15979                       00003AF6            .4A:
15980 3AF6           EB           AC            jmp	.49
15981                       00003AF8            .4:
15982                       FFFFFFFE            ..FFFF	=	-2
15983 3AF8           5D                         pop	bp
15984 3AF9           C3                         ret
15985                                           ! 1756 static void biosfn_set_video_mode(mode) Bit8u mode;
15986                                           ! Register BX used in function int10_func
15987                       00003AFA            _biosfn_set_video_mode:
15988                                           !BCC_EOS
15989                                           ! 1757 {
15990                                           ! 1758  Bit8u noclearmem=mode&0x80;
15991 3AFA           55                         push	bp
15992 3AFB           89E5                       mov	bp,sp
15993 3AFD           4C                         dec	sp
15994                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
15995 3AFE           8A46         04            mov	al,4[bp]
15996 3B01           24                     80  and	al,#$80
15997                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
15998 3B03           8846         FF            mov	-1[bp],al
15999                                           !BCC_EOS
16000                                           ! 1759  Bit8u line,mmask,*palette,vpti;
16001                                           !BCC_EOS
16002                                           ! 1760  Bit16u i,twidth,theightm1,cheight;
16003                                           !BCC_EOS
16004                                           ! 1761  Bit8u modeset_ctl,video_ctl,vga_switches;
16005                                           !BCC_EOS
16006                                           ! 1762  Bit16u crtc_addr;
16007                                           !BCC_EOS
16008                                           ! 1763  mode=mode&0x7f;
16009 3B06           83C4                   EB  add	sp,*-$15
16010                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16011 3B09           8A46         04            mov	al,4[bp]
16012 3B0C           24                     7F  and	al,*$7F
16013                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16014 3B0E           8846         04            mov	4[bp],al
16015                                           !BCC_EOS
16016                                           ! 1764  line=find_vga_entry(mode);
16017                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16018 3B11           8A46         04            mov	al,4[bp]
16019 3B14           30E4                       xor	ah,ah
16020 3B16           50                         push	ax
16021                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16022 3B17           E8         4099            call	_find_vga_entry
16023 3B1A           44                         inc	sp
16024 3B1B           44                         inc	sp
16025                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16026 3B1C           8846         FE            mov	-2[bp],al
16027                                           !BCC_EOS
16028                                           ! 1765  printf("mode search %02x found line %02x\n",mode,line);
16029                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16030 3B1F           8A46         FE            mov	al,-2[bp]
16031 3B22           30E4                       xor	ah,ah
16032 3B24           50                         push	ax
16033                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16034 3B25           8A46         04            mov	al,4[bp]
16035 3B28           30E4                       xor	ah,ah
16036 3B2A           50                         push	ax
16037                                           ! Debug: list * char = .4C+0 (used reg = )
16038 3B2B           BB                   7F4C  mov	bx,#.4C
16039 3B2E           53                         push	bx
16040                                           ! Debug: func () void = printf+0 (used reg = )
16041 3B2F           E8         4218            call	_printf
16042 3B32           83C4                   06  add	sp,*6
16043                                           !BCC_EOS
16044                                           ! 1766  if(line==0xFF)
16045                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16046 3B35           8A46         FE            mov	al,-2[bp]
16047 3B38           3C                     FF  cmp	al,#$FF
16048 3B3A           75           04            jne 	.4D
16049                       00003B3C            .4E:
16050                                           ! 1767   return;
16051 3B3C           89EC                       mov	sp,bp
16052 3B3E           5D                         pop	bp
16053 3B3F           C3                         ret
16054                                           !BCC_EOS
16055                                           ! 1768  vpti=line_to_vpti[line];
16056                       00003B40            .4D:
16057                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16058 3B40           8A46         FE            mov	al,-2[bp]
16059 3B43           30E4                       xor	ah,ah
16060 3B45           89C3                       mov	bx,ax
16061                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16062 3B47           8A87       0244            mov	al,_line_to_vpti[bx]
16063 3B4B           8846         F9            mov	-7[bp],al
16064                                           !BCC_EOS
16065                                           ! 1769  twidth=video_param_table[vpti].twidth;
16066                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16067 3B4E           8A46         F9            mov	al,-7[bp]
16068 3B51           30E4                       xor	ah,ah
16069 3B53           B1                     06  mov	cl,*6
16070 3B55           D3E0                       shl	ax,cl
16071 3B57           89C3                       mov	bx,ax
16072                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16073 3B59           8A87       0258            mov	al,_video_param_table[bx]
16074 3B5D           30E4                       xor	ah,ah
16075 3B5F           8946         F4            mov	-$C[bp],ax
16076                                           !BCC_EOS
16077                                           ! 1770  theightm1=video_param_table[vpti].theightm1;
16078                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16079 3B62           8A46         F9            mov	al,-7[bp]
16080 3B65           30E4                       xor	ah,ah
16081 3B67           B1                     06  mov	cl,*6
16082 3B69           D3E0                       shl	ax,cl
16083 3B6B           89C3                       mov	bx,ax
16084 3B6D           81C3                 0258  add	bx,#_video_param_table
16085                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16086 3B71           8A47         01            mov	al,1[bx]
16087 3B74           30E4                       xor	ah,ah
16088 3B76           8946         F2            mov	-$E[bp],ax
16089                                           !BCC_EOS
16090                                           ! 1771  cheight=video_param_table[vpti].cheight;
16091                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16092 3B79           8A46         F9            mov	al,-7[bp]
16093 3B7C           30E4                       xor	ah,ah
16094 3B7E           B1                     06  mov	cl,*6
16095 3B80           D3E0                       shl	ax,cl
16096 3B82           89C3                       mov	bx,ax
16097 3B84           81C3                 0258  add	bx,#_video_param_table
16098                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16099 3B88           8A47         02            mov	al,2[bx]
16100 3B8B           30E4                       xor	ah,ah
16101 3B8D           8946         F0            mov	-$10[bp],ax
16102                                           !BCC_EOS
16103                                           ! 1772  video_ctl=read_byte(0x40,0x87);
16104                                           ! Debug: list int = const $87 (used reg = )
16105 3B90           B8                   0087  mov	ax,#$87
16106 3B93           50                         push	ax
16107                                           ! Debug: list int = const $40 (used reg = )
16108 3B94           B8                   0040  mov	ax,*$40
16109 3B97           50                         push	ax
16110                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16111 3B98           E8         4104            call	_read_byte
16112 3B9B           83C4                   04  add	sp,*4
16113                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16114 3B9E           8846         EE            mov	-$12[bp],al
16115                                           !BCC_EOS
16116                                           ! 1773  vga_switches=read_byte(0x40,0x88);
16117                                           ! Debug: list int = const $88 (used reg = )
16118 3BA1           B8                   0088  mov	ax,#$88
16119 3BA4           50                         push	ax
16120                                           ! Debug: list int = const $40 (used reg = )
16121 3BA5           B8                   0040  mov	ax,*$40
16122 3BA8           50                         push	ax
16123                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16124 3BA9           E8         40F3            call	_read_byte
16125 3BAC           83C4                   04  add	sp,*4
16126                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16127 3BAF           8846         ED            mov	-$13[bp],al
16128                                           !BCC_EOS
16129                                           ! 1774  modeset_ctl=read_byte(0x40,0x89);
16130                                           ! Debug: list int = const $89 (used reg = )
16131 3BB2           B8                   0089  mov	ax,#$89
16132 3BB5           50                         push	ax
16133                                           ! Debug: list int = const $40 (used reg = )
16134 3BB6           B8                   0040  mov	ax,*$40
16135 3BB9           50                         push	ax
16136                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16137 3BBA           E8         40E2            call	_read_byte
16138 3BBD           83C4                   04  add	sp,*4
16139                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16140 3BC0           8846         EF            mov	-$11[bp],al
16141                                           !BCC_EOS
16142                                           ! 1775  if((modeset_ctl&0x08)==0)
16143                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16144 3BC3           8A46         EF            mov	al,-$11[bp]
16145 3BC6           24                     08  and	al,*8
16146                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16147 3BC8           84C0                       test	al,al
16148 3BCA   7403    E9         0146            bne 	.4F
16149                       00003BCF            .50:
16150                                           ! 1776   {
16151                                           ! 1777    outb(0x3c6,vga_modes[line].pelmask);
16152                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16153 3BCF           8A46         FE            mov	al,-2[bp]
16154 3BD2           30E4                       xor	ah,ah
16155 3BD4           B1                     03  mov	cl,*3
16156 3BD6           D3E0                       shl	ax,cl
16157 3BD8           89C3                       mov	bx,ax
16158 3BDA           81C3                 01C4  add	bx,#_vga_modes
16159                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16160 3BDE           8A47         06            mov	al,6[bx]
16161 3BE1           30E4                       xor	ah,ah
16162 3BE3           50                         push	ax
16163                                           ! Debug: list int = const $3C6 (used reg = )
16164 3BE4           B8                   03C6  mov	ax,#$3C6
16165 3BE7           50                         push	ax
16166                                           ! Debug: func () void = outb+0 (used reg = )
16167 3BE8           E8         4120            call	_outb
16168 3BEB           83C4                   04  add	sp,*4
16169                                           !BCC_EOS
16170                                           ! 1778    outb(0x3c8,0x00);
16171                                           ! Debug: list int = const 0 (used reg = )
16172 3BEE           31C0                       xor	ax,ax
16173 3BF0           50                         push	ax
16174                                           ! Debug: list int = const $3C8 (used reg = )
16175 3BF1           B8                   03C8  mov	ax,#$3C8
16176 3BF4           50                         push	ax
16177                                           ! Debug: func () void = outb+0 (used reg = )
16178 3BF5           E8         4113            call	_outb
16179 3BF8           83C4                   04  add	sp,*4
16180                                           !BCC_EOS
16181                                           ! 1779    switch(vga_modes[line].dacmodel)
16182                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16183 3BFB           8A46         FE            mov	al,-2[bp]
16184 3BFE           30E4                       xor	ah,ah
16185 3C00           B1                     03  mov	cl,*3
16186 3C02           D3E0                       shl	ax,cl
16187 3C04           89C3                       mov	bx,ax
16188 3C06           81C3                 01C4  add	bx,#_vga_modes
16189 3C0A           8A47         07            mov	al,7[bx]
16190                                           ! 1780     {case 0:
16191 3C0D           EB           22            jmp .53
16192                                           ! 1781       palette=&palette0;
16193                       00003C0F            .54:
16194                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16195 3C0F           BB                   09D8  mov	bx,#_palette0
16196 3C12           895E         FA            mov	-6[bp],bx
16197                                           !BCC_EOS
16198                                           ! 1782       break;
16199 3C15           EB           2A            jmp .51
16200                                           !BCC_EOS
16201                                           ! 1783      case 1:
16202                                           ! 1784       
16203                                           ! 1784 palette=&palette1;
16204                       00003C17            .55:
16205                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16206 3C17           BB                   0A98  mov	bx,#_palette1
16207 3C1A           895E         FA            mov	-6[bp],bx
16208                                           !BCC_EOS
16209                                           ! 1785       break;
16210 3C1D           EB           22            jmp .51
16211                                           !BCC_EOS
16212                                           ! 1786      case 2:
16213                                           ! 1787       palette=&palette2;
16214                       00003C1F            .56:
16215                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16216 3C1F           BB                   0B58  mov	bx,#_palette2
16217 3C22           895E         FA            mov	-6[bp],bx
16218                                           !BCC_EOS
16219                                           ! 1788       break;
16220 3C25           EB           1A            jmp .51
16221                                           !BCC_EOS
16222                                           ! 1789      case 3:
16223                                           ! 1790       palette=&palette3;
16224                       00003C27            .57:
16225                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16226 3C27           BB                   0C18  mov	bx,#_palette3
16227 3C2A           895E         FA            mov	-6[bp],bx
16228                                           !BCC_EOS
16229                                           ! 1791       break;
16230 3C2D           EB           12            jmp .51
16231                                           !BCC_EOS
16232                                           ! 1792     }
16233                                           ! 1793    for(i=0;i<0x0100;i++)
16234 3C2F           EB           10            jmp .51
16235                       00003C31            .53:
16236 3C31           2C                     00  sub	al,*0
16237 3C33           74           DA            je 	.54
16238 3C35           2C                     01  sub	al,*1
16239 3C37           74           DE            je 	.55
16240 3C39           2C                     01  sub	al,*1
16241 3C3B           74           E2            je 	.56
16242 3C3D           2C                     01  sub	al,*1
16243 3C3F           74           E6            je 	.57
16244                       00003C41            .51:
16245                       FFFFFFE8            ..FFFE	=	-$18
16246                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16247 3C41           31C0                       xor	ax,ax
16248 3C43           8946         F6            mov	-$A[bp],ax
16249                                           !BCC_EOS
16250                                           !BCC_EOS
16251                                           ! 1794     {if(i<=dac_regs[vga_modes[line].dacmodel])
16252 3C46           E9         00AB            br 	.5A
16253                       00003C49            .5B:
16254                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16255 3C49           8A46         FE            mov	al,-2[bp]
16256 3C4C           30E4                       xor	ah,ah
16257 3C4E           B1                     03  mov	cl,*3
16258 3C50           D3E0                       shl	ax,cl
16259 3C52           89C3                       mov	bx,ax
16260 3C54           81C3                 01C4  add	bx,#_vga_modes
16261                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16262 3C58           8A47         07            mov	al,7[bx]
16263 3C5B           30E4                       xor	ah,ah
16264 3C5D           89C3                       mov	bx,ax
16265                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16266 3C5F           8A87       0254            mov	al,_dac_regs[bx]
16267 3C63           30E4                       xor	ah,ah
16268 3C65           3B46         F6            cmp	ax,-$A[bp]
16269 3C68           72           5C            jb  	.5C
16270                       00003C6A            .5D:
16271                                           ! 1795       {outb(0x3c9,palette[(i*3)+0]);
16272                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16273 3C6A           8B46         F6            mov	ax,-$A[bp]
16274 3C6D           89C2                       mov	dx,ax
16275 3C6F           D1E0                       shl	ax,*1
16276 3C71           01D0                       add	ax,dx
16277                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16278                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16279 3C73           0346         FA            add	ax,-6[bp]
16280 3C76           89C3                       mov	bx,ax
16281                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16282 3C78           8A07                       mov	al,[bx]
16283 3C7A           30E4                       xor	ah,ah
16284 3C7C           50                         push	ax
16285                                           ! Debug: list int = const $3C9 (used reg = )
16286 3C7D           B8                   03C9  mov	ax,#$3C9
16287 3C80           50                         push	ax
16288                                           ! Debug: func () void = outb+0 (used reg = )
16289 3C81           E8         4087            call	_outb
16290 3C84           83C4                   04  add	sp,*4
16291                                           !BCC_EOS
16292                                           ! 1796        outb(0x3c9,palette[(i*3)+1]);
16293                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16294 3C87           8B46         F6            mov	ax,-$A[bp]
16295 3C8A           89C2                       mov	dx,ax
16296 3C8C           D1E0                       shl	ax,*1
16297 3C8E           01D0                       add	ax,dx
16298                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16299                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16300 3C90           40                         inc	ax
16301 3C91           0346         FA            add	ax,-6[bp]
16302 3C94           89C3                       mov	bx,ax
16303                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16304 3C96           8A07                       mov	al,[bx]
16305 3C98           30E4                       xor	ah,ah
16306 3C9A           50                         push	ax
16307                                           ! Debug: list int = const $3C9 (used reg = )
16308 3C9B           B8                   03C9  mov	ax,#$3C9
16309 3C9E           50                         push	ax
16310                                           ! Debug: func () void = outb+0 (used reg = )
16311 3C9F           E8         4069            call	_outb
16312 3CA2           83C4                   04  add	sp,*4
16313                                           !BCC_EOS
16314                                           ! 1797        outb(0x3c9,palette[(i*3)+2]);
16315                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16316 3CA5           8B46         F6            mov	ax,-$A[bp]
16317 3CA8           89C2                       mov	dx,ax
16318 3CAA           D1E0                       shl	ax,*1
16319 3CAC           01D0                       add	ax,dx
16320                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16321                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16322 3CAE           40                         inc	ax
16323 3CAF           40                         inc	ax
16324 3CB0           0346         FA            add	ax,-6[bp]
16325 3CB3           89C3                       mov	bx,ax
16326                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16327 3CB5           8A07                       mov	al,[bx]
16328 3CB7           30E4                       xor	ah,ah
16329 3CB9           50                         push	ax
16330                                           ! Debug: list int = const $3C9 (used reg = )
16331 3CBA           B8                   03C9  mov	ax,#$3C9
16332 3CBD           50                         push	ax
16333                                           ! Debug: func () void = outb+0 (used reg = )
16334 3CBE           E8         404A            call	_outb
16335 3CC1           83C4                   04  add	sp,*4
16336                                           !BCC_EOS
16337                                           ! 1798       }
16338                                           ! 1799      else
16339                                           ! 1800       {outb(0x3c9,0);
16340 3CC4           EB           27            jmp .5E
16341                       00003CC6            .5C:
16342                                           ! Debug: list int = const 0 (used reg = )
16343 3CC6           31C0                       xor	ax,ax
16344 3CC8           50                         push	ax
16345                                           ! Debug: list int = const $3C9 (used reg = )
16346 3CC9           B8                   03C9  mov	ax,#$3C9
16347 3CCC           50                         push	ax
16348                                           ! Debug: func () void = outb+0 (used reg = )
16349 3CCD           E8         403B            call	_outb
16350 3CD0           83C4                   04  add	sp,*4
16351                                           !BCC_EOS
16352                                           ! 1801        outb(0x3c9,0);
16353                                           ! Debug: list int = const 0 (used reg = )
16354 3CD3           31C0                       xor	ax,ax
16355 3CD5           50                         push	ax
16356                                           ! Debug: list int = const $3C9 (used reg = )
16357 3CD6           B8                   03C9  mov	ax,#$3C9
16358 3CD9           50                         push	ax
16359                                           ! Debug: func () void = outb+0 (used reg = )
16360 3CDA           E8         402E            call	_outb
16361 3CDD           83C4                   04  add	sp,*4
16362                                           !BCC_EOS
16363                                           ! 1802        outb(0x3c9,0);
16364                                           ! Debug: list int = const 0 (used reg = )
16365 3CE0           31C0                       xor	ax,ax
16366 3CE2           50                         push	ax
16367                                           ! Debug: list int = const $3C9 (used reg = )
16368 3CE3           B8                   03C9  mov	ax,#$3C9
16369 3CE6           50                         push	ax
16370                                           ! Debug: func () void = outb+0 (used reg = )
16371 3CE7           E8         4021            call	_outb
16372 3CEA           83C4                   04  add	sp,*4
16373                                           !BCC_EOS
16374                                           ! 1803       }
16375                                           ! 1804     }
16376                       00003CED            .5E:
16377                                           ! 1805    if((modeset_ctl&0x02)==0x02)
16378                       00003CED            .59:
16379                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16380 3CED           8B46         F6            mov	ax,-$A[bp]
16381 3CF0           40                         inc	ax
16382 3CF1           8946         F6            mov	-$A[bp],ax
16383                       00003CF4            .5A:
16384                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16385 3CF4           8B46         F6            mov	ax,-$A[bp]
16386 3CF7           3D                   0100  cmp	ax,#$100
16387 3CFA   7303    E9         FF4A            blo 	.5B
16388                       00003CFF            .5F:
16389                       00003CFF            .58:
16390                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16391 3CFF           8A46         EF            mov	al,-$11[bp]
16392 3D02           24                     02  and	al,*2
16393                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16394 3D04           3C                     02  cmp	al,*2
16395 3D06           75           0D            jne 	.60
16396                       00003D08            .61:
16397                                           ! 1806     {
16398                                           ! 1807      biosfn_perform_gray_scale_summing(0x00, 0x100);
16399                                           ! Debug: list int = const $100 (used reg = )
16400 3D08           B8                   0100  mov	ax,#$100
16401 3D0B           50                         push	ax
16402                                           ! Debug: list int = const 0 (used reg = )
16403 3D0C           31C0                       xor	ax,ax
16404 3D0E           50                         push	ax
16405                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16406 3D0F           E8         27C0            call	_biosfn_perform_gray_scale_summing
16407 3D12           83C4                   04  add	sp,*4
16408                                           !BCC_EOS
16409                                           ! 1808     }
16410                                           ! 1809   }
16411                       00003D15            .60:
16412                                           ! 1810  inb(0x3da);
16413                       00003D15            .4F:
16414                                           ! Debug: list int = const $3DA (used reg = )
16415 3D15           B8                   03DA  mov	ax,#$3DA
16416 3D18           50                         push	ax
16417                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16418 3D19           E8         3FD9            call	_inb
16419 3D1C           44                         inc	sp
16420 3D1D           44                         inc	sp
16421                                           !BCC_EOS
16422                                           ! 1811  for(i=0;i<=0x13;i++)
16423                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16424 3D1E           31C0                       xor	ax,ax
16425 3D20           8946         F6            mov	-$A[bp],ax
16426                                           !BCC_EOS
16427                                           !BCC_EOS
16428                                           ! 1812   {outb(0x3c0,i);
16429 3D23           EB           38            jmp .64
16430                       00003D25            .65:
16431                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16432 3D25           FF76         F6            push	-$A[bp]
16433                                           ! Debug: list int = const $3C0 (used reg = )
16434 3D28           B8                   03C0  mov	ax,#$3C0
16435 3D2B           50                         push	ax
16436                                           ! Debug: func () void = outb+0 (used reg = )
16437 3D2C           E8         3FDC            call	_outb
16438 3D2F           83C4                   04  add	sp,*4
16439                                           !BCC_EOS
16440                                           ! 1813    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16441                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16442 3D32           8A46         F9            mov	al,-7[bp]
16443 3D35           30E4                       xor	ah,ah
16444 3D37           B1                     06  mov	cl,*6
16445 3D39           D3E0                       shl	ax,cl
16446 3D3B           89C3                       mov	bx,ax
16447 3D3D           81C3                 0258  add	bx,#_video_param_table
16448                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16449 3D41           8B46         F6            mov	ax,-$A[bp]
16450 3D44           01C3                       add	bx,ax
16451                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16452 3D46           8A47         23            mov	al,$23[bx]
16453 3D49           30E4                       xor	ah,ah
16454 3D4B           50                         push	ax
16455                                           ! Debug: list int = const $3C0 (used reg = )
16456 3D4C           B8                   03C0  mov	ax,#$3C0
16457 3D4F           50                         push	ax
16458                                           ! Debug: func () void = outb+0 (used reg = )
16459 3D50           E8         3FB8            call	_outb
16460 3D53           83C4                   04  add	sp,*4
16461                                           !BCC_EOS
16462                                           ! 1814   }
16463                                           ! 1815  outb(0x3c0,0x14);
16464                       00003D56            .63:
16465                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16466 3D56           8B46         F6            mov	ax,-$A[bp]
16467 3D59           40                         inc	ax
16468 3D5A           8946         F6            mov	-$A[bp],ax
16469                       00003D5D            .64:
16470                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16471 3D5D           8B46         F6            mov	ax,-$A[bp]
16472 3D60           3D                   0013  cmp	ax,*$13
16473 3D63           76           C0            jbe	.65
16474                       00003D65            .66:
16475                       00003D65            .62:
16476                                           ! Debug: list int = const $14 (used reg = )
16477 3D65           B8                   0014  mov	ax,*$14
16478 3D68           50                         push	ax
16479                                           ! Debug: list int = const $3C0 (used reg = )
16480 3D69           B8                   03C0  mov	ax,#$3C0
16481 3D6C           50                         push	ax
16482                                           ! Debug: func () void = outb+0 (used reg = )
16483 3D6D           E8         3F9B            call	_outb
16484 3D70           83C4                   04  add	sp,*4
16485                                           !BCC_EOS
16486                                           ! 1816  outb(0x3c0,0x00);
16487                                           ! Debug: list int = const 0 (used reg = )
16488 3D73           31C0                       xor	ax,ax
16489 3D75           50                         push	ax
16490                                           ! Debug: list int = const $3C0 (used reg = )
16491 3D76           B8                   03C0  mov	ax,#$3C0
16492 3D79           50                         push	ax
16493                                           ! Debug: func () void = outb+0 (used reg = )
16494 3D7A           E8         3F8E            call	_outb
16495 3D7D           83C4                   04  add	sp,*4
16496                                           !BCC_EOS
16497                                           ! 1817  outb(0x3c4,0);
16498                                           ! Debug: list int = const 0 (used reg = )
16499 3D80           31C0                       xor	ax,ax
16500 3D82           50                         push	ax
16501                                           ! Debug: list int = const $3C4 (used reg = )
16502 3D83           B8                   03C4  mov	ax,#$3C4
16503 3D86           50                         push	ax
16504                                           ! Debug: func () void = outb+0 (used reg = )
16505 3D87           E8         3F81            call	_outb
16506 3D8A           83C4                   04  add	sp,*4
16507                                           !BCC_EOS
16508                                           ! 1818  outb(0x3c5,0x03);
16509                                           ! Debug: list int = const 3 (used reg = )
16510 3D8D           B8                   0003  mov	ax,*3
16511 3D90           50                         push	ax
16512                                           ! Debug: list int = const $3C5 (used reg = )
16513 3D91           B8                   03C5  mov	ax,#$3C5
16514 3D94           50                         push	ax
16515                                           ! Debug: func () void = outb+0 (used reg = )
16516 3D95           E8         3F73            call	_outb
16517 3D98           83C4                   04  add	sp,*4
16518                                           !BCC_EOS
16519                                           ! 1819  for(i=1;i<=4;i++)
16520                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16521 3D9B           B8                   0001  mov	ax,*1
16522 3D9E           8946         F6            mov	-$A[bp],ax
16523                                           !BCC_EOS
16524                                           !BCC_EOS
16525                                           ! 1820   {outb(0x3c4,i);
16526 3DA1           EB           3F            jmp .69
16527                       00003DA3            .6A:
16528                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16529 3DA3           FF76         F6            push	-$A[bp]
16530                                           ! Debug: list int = const $3C4 (used reg = )
16531 3DA6           B8                   03C4  mov	ax,#$3C4
16532 3DA9           50                         push	ax
16533                                           ! Debug: func () void = outb+0 (used reg = )
16534 3DAA           E8         3F5E            call	_outb
16535 3DAD           83C4                   04  add	sp,*4
16536                                           !BCC_EOS
16537                                           ! 1821    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16538                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16539 3DB0           8B46         F6            mov	ax,-$A[bp]
16540 3DB3           48                         dec	ax
16541 3DB4           50                         push	ax
16542                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16543 3DB5           8A46         F9            mov	al,-7[bp]
16544 3DB8           30E4                       xor	ah,ah
16545 3DBA           B1                     06  mov	cl,*6
16546 3DBC           D3E0                       shl	ax,cl
16547 3DBE           89C3                       mov	bx,ax
16548 3DC0           81C3                 0258  add	bx,#_video_param_table
16549                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16550 3DC4           8B46         E8            mov	ax,-$18[bp]
16551 3DC7           01C3                       add	bx,ax
16552 3DC9           44                         inc	sp
16553 3DCA           44                         inc	sp
16554                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16555 3DCB           8A47         05            mov	al,5[bx]
16556 3DCE           30E4                       xor	ah,ah
16557 3DD0           50                         push	ax
16558                                           ! Debug: list int = const $3C5 (used reg = )
16559 3DD1           B8                   03C5  mov	ax,#$3C5
16560 3DD4           50                         push	ax
16561                                           ! Debug: func () void = outb+0 (used reg = )
16562 3DD5           E8         3F33            call	_outb
16563 3DD8           83C4                   04  add	sp,*4
16564                                           !BCC_EOS
16565                                           ! 1822   }
16566                                           ! 1823  for(i=0;i<=8;i++)
16567                       00003DDB            .68:
16568                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16569 3DDB           8B46         F6            mov	ax,-$A[bp]
16570 3DDE           40                         inc	ax
16571 3DDF           8946         F6            mov	-$A[bp],ax
16572                       00003DE2            .69:
16573                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16574 3DE2           8B46         F6            mov	ax,-$A[bp]
16575 3DE5           3D                   0004  cmp	ax,*4
16576 3DE8           76           B9            jbe	.6A
16577                       00003DEA            .6B:
16578                       00003DEA            .67:
16579                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16580 3DEA           31C0                       xor	ax,ax
16581 3DEC           8946         F6            mov	-$A[bp],ax
16582                                           !BCC_EOS
16583                                           !BCC_EOS
16584                                           ! 1824   {outb(0x3ce,i);
16585 3DEF           EB           38            jmp .6E
16586                       00003DF1            .6F:
16587                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16588 3DF1           FF76         F6            push	-$A[bp]
16589                                           ! Debug: list int = const $3CE (used reg = )
16590 3DF4           B8                   03CE  mov	ax,#$3CE
16591 3DF7           50                         push	ax
16592                                           ! Debug: func () void = outb+0 (used reg = )
16593 3DF8           E8         3F10            call	_outb
16594 3DFB           83C4                   04  add	sp,*4
16595                                           !BCC_EOS
16596                                           ! 1825    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16597                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16598 3DFE           8A46         F9            mov	al,-7[bp]
16599 3E01           30E4                       xor	ah,ah
16600 3E03           B1                     06  mov	cl,*6
16601 3E05           D3E0                       shl	ax,cl
16602 3E07           89C3                       mov	bx,ax
16603 3E09           81C3                 0258  add	bx,#_video_param_table
16604                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16605 3E0D           8B46         F6            mov	ax,-$A[bp]
16606 3E10           01C3                       add	bx,ax
16607                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16608 3E12           8A47         37            mov	al,$37[bx]
16609 3E15           30E4                       xor	ah,ah
16610 3E17           50                         push	ax
16611                                           ! Debug: list int = const $3CF (used reg = )
16612 3E18           B8                   03CF  mov	ax,#$3CF
16613 3E1B           50                         push	ax
16614                                           ! Debug: func () void = outb+0 (used reg = )
16615 3E1C           E8         3EEC            call	_outb
16616 3E1F           83C4                   04  add	sp,*4
16617                                           !BCC_EOS
16618                                           ! 1826   }
16619                                           ! 1827  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16620                       00003E22            .6D:
16621                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16622 3E22           8B46         F6            mov	ax,-$A[bp]
16623 3E25           40                         inc	ax
16624 3E26           8946         F6            mov	-$A[bp],ax
16625                       00003E29            .6E:
16626                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16627 3E29           8B46         F6            mov	ax,-$A[bp]
16628 3E2C           3D                   0008  cmp	ax,*8
16629 3E2F           76           C0            jbe	.6F
16630                       00003E31            .70:
16631                       00003E31            .6C:
16632                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16633 3E31           8A46         FE            mov	al,-2[bp]
16634 3E34           30E4                       xor	ah,ah
16635 3E36           B1                     03  mov	cl,*3
16636 3E38           D3E0                       shl	ax,cl
16637 3E3A           89C3                       mov	bx,ax
16638 3E3C           81C3                 01C4  add	bx,#_vga_modes
16639                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16640 3E40           8A47         02            mov	al,2[bx]
16641 3E43           3C                     01  cmp	al,*1
16642 3E45           75           05            jne 	.71
16643                       00003E47            .72:
16644 3E47           B8                   03B4  mov	ax,#$3B4
16645 3E4A           EB           03            jmp .73
16646                       00003E4C            .71:
16647 3E4C           B8                   03D4  mov	ax,#$3D4
16648                       00003E4F            .73:
16649                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16650 3E4F           8946         EA            mov	-$16[bp],ax
16651                                           !BCC_EOS
16652                                           ! 1828  outw(crtc_addr,0x0011);
16653                                           ! Debug: list int = const $11 (used reg = )
16654 3E52           B8                   0011  mov	ax,*$11
16655 3E55           50                         push	ax
16656                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16657 3E56           FF76         EA            push	-$16[bp]
16658                                           ! Debug: func () void = outw+0 (used reg = )
16659 3E59           E8         3EBF            call	_outw
16660 3E5C           83C4                   04  add	sp,*4
16661                                           !BCC_EOS
16662                                           ! 1829  for(i=0;i<=0x18;i++)
16663                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16664 3E5F           31C0                       xor	ax,ax
16665 3E61           8946         F6            mov	-$A[bp],ax
16666                                           !BCC_EOS
16667                                           !BCC_EOS
16668                                           ! 1830   {outb(crtc_addr,i);
16669 3E64           EB           38            jmp .76
16670                       00003E66            .77:
16671                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16672 3E66           FF76         F6            push	-$A[bp]
16673                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16674 3E69           FF76         EA            push	-$16[bp]
16675                                           ! Debug: func () void = outb+0 (used reg = )
16676 3E6C           E8         3E9C            call	_outb
16677 3E6F           83C4                   04  add	sp,*4
16678                                           !BCC_EOS
16679                                           ! 1831    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16680                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16681 3E72           8A46         F9            mov	al,-7[bp]
16682 3E75           30E4                       xor	ah,ah
16683 3E77           B1                     06  mov	cl,*6
16684 3E79           D3E0                       shl	ax,cl
16685 3E7B           89C3                       mov	bx,ax
16686 3E7D           81C3                 0258  add	bx,#_video_param_table
16687                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16688 3E81           8B46         F6            mov	ax,-$A[bp]
16689 3E84           01C3                       add	bx,ax
16690                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16691 3E86           8A47         0A            mov	al,$A[bx]
16692 3E89           30E4                       xor	ah,ah
16693 3E8B           50                         push	ax
16694                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16695 3E8C           8B46         EA            mov	ax,-$16[bp]
16696                                           ! Debug: list unsigned int = ax+1 (used reg = )
16697 3E8F           40                         inc	ax
16698 3E90           50                         push	ax
16699                                           ! Debug: func () void = outb+0 (used reg = )
16700 3E91           E8         3E77            call	_outb
16701 3E94           83C4                   04  add	sp,*4
16702                                           !BCC_EOS
16703                                           ! 1832   }
16704                                           ! 1833  outb(0x3c2,video_param_table[vpti].miscreg);
16705                       00003E97            .75:
16706                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16707 3E97           8B46         F6            mov	ax,-$A[bp]
16708 3E9A           40                         inc	ax
16709 3E9B           8946         F6            mov	-$A[bp],ax
16710                       00003E9E            .76:
16711                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16712 3E9E           8B46         F6            mov	ax,-$A[bp]
16713 3EA1           3D                   0018  cmp	ax,*$18
16714 3EA4           76           C0            jbe	.77
16715                       00003EA6            .78:
16716                       00003EA6            .74:
16717                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16718 3EA6           8A46         F9            mov	al,-7[bp]
16719 3EA9           30E4                       xor	ah,ah
16720 3EAB           B1                     06  mov	cl,*6
16721 3EAD           D3E0                       shl	ax,cl
16722 3EAF           89C3                       mov	bx,ax
16723 3EB1           81C3                 0258  add	bx,#_video_param_table
16724                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16725 3EB5           8A47         09            mov	al,9[bx]
16726 3EB8           30E4                       xor	ah,ah
16727 3EBA           50                         push	ax
16728                                           ! Debug: list int = const $3C2 (used reg = )
16729 3EBB           B8                   03C2  mov	ax,#$3C2
16730 3EBE           50                         push	ax
16731                                           ! Debug: func () void = outb+0 (used reg = )
16732 3EBF           E8         3E49            call	_outb
16733 3EC2           83C4                   04  add	sp,*4
16734                                           !BCC_EOS
16735                                           ! 1834  outb(0x3c0,0x20);
16736                                           ! Debug: list int = const $20 (used reg = )
16737 3EC5           B8                   0020  mov	ax,*$20
16738 3EC8           50                         push	ax
16739                                           ! Debug: list int = const $3C0 (used reg = )
16740 3EC9           B8                   03C0  mov	ax,#$3C0
16741 3ECC           50                         push	ax
16742                                           ! Debug: func () void = outb+0 (used reg = )
16743 3ECD           E8         3E3B            call	_outb
16744 3ED0           83C4                   04  add	sp,*4
16745                                           !BCC_EOS
16746                                           ! 1835  inb(0x3da);
16747                                           ! Debug: list int = const $3DA (used reg = )
16748 3ED3           B8                   03DA  mov	ax,#$3DA
16749 3ED6           50                         push	ax
16750                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16751 3ED7           E8         3E1B            call	_inb
16752 3EDA           44                         inc	sp
16753 3EDB           44                         inc	sp
16754                                           !BCC_EOS
16755                                           ! 1836  if(noclearmem==0x00)
16756                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16757 3EDC           8A46         FF            mov	al,-1[bp]
16758 3EDF           84C0                       test	al,al
16759 3EE1   7403    E9         00C1            bne 	.79
16760                       00003EE6            .7A:
16761                                           ! 1837   {
16762                                           ! 1838    if(vga_modes[line].class==0x00)
16763                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16764 3EE6           8A46         FE            mov	al,-2[bp]
16765 3EE9           30E4                       xor	ah,ah
16766 3EEB           B1                     03  mov	cl,*3
16767 3EED           D3E0                       shl	ax,cl
16768 3EEF           89C3                       mov	bx,ax
16769 3EF1           81C3                 01C4  add	bx,#_vga_modes
16770                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16771 3EF5           8A47         01            mov	al,1[bx]
16772 3EF8           84C0                       test	al,al
16773 3EFA           75           26            jne 	.7B
16774                       00003EFC            .7C:
16775                                           ! 1839     {
16776                                           ! 1840      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16777                                           ! Debug: list int = const $4000 (used reg = )
16778 3EFC           B8                   4000  mov	ax,#$4000
16779 3EFF           50                         push	ax
16780                                           ! Debug: list int = const $720 (used reg = )
16781 3F00           B8                   0720  mov	ax,#$720
16782 3F03           50                         push	ax
16783                                           ! Debug: list int = const 0 (used reg = )
16784 3F04           31C0                       xor	ax,ax
16785 3F06           50                         push	ax
16786                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16787 3F07           8A46         FE            mov	al,-2[bp]
16788 3F0A           30E4                       xor	ah,ah
16789 3F0C           B1                     03  mov	cl,*3
16790 3F0E           D3E0                       shl	ax,cl
16791 3F10           89C3                       mov	bx,ax
16792 3F12           81C3                 01C4  add	bx,#_vga_modes
16793                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16794 3F16           FF77         04            push	4[bx]
16795                                           ! Debug: func () void = memsetw+0 (used reg = )
16796 3F19           E8         3CFE            call	_memsetw
16797 3F1C           83C4                   08  add	sp,*8
16798                                           !BCC_EOS
16799                                           ! 1841     }
16800                                           ! 1842    else
16801                                           ! 1843     {
16802 3F1F           E9         0085            br 	.7D
16803                       00003F22            .7B:
16804                                           ! 1844      if(mode<0x0d)
16805                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16806 3F22           8A46         04            mov	al,4[bp]
16807 3F25           3C                     0D  cmp	al,*$D
16808 3F27           73           24            jae 	.7E
16809                       00003F29            .7F:
16810                                           ! 1845       {
16811                                           ! 1846        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16812                                           ! Debug: list int = const $4000 (used reg = )
16813 3F29           B8                   4000  mov	ax,#$4000
16814 3F2C           50                         push	ax
16815                                           ! Debug: list int = const 0 (used reg = )
16816 3F2D           31C0                       xor	ax,ax
16817 3F2F           50                         push	ax
16818                                           ! Debug: list int = const 0 (used reg = )
16819 3F30           31C0                       xor	ax,ax
16820 3F32           50                         push	ax
16821                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16822 3F33           8A46         FE            mov	al,-2[bp]
16823 3F36           30E4                       xor	ah,ah
16824 3F38           B1                     03  mov	cl,*3
16825 3F3A           D3E0                       shl	ax,cl
16826 3F3C           89C3                       mov	bx,ax
16827 3F3E           81C3                 01C4  add	bx,#_vga_modes
16828                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16829 3F42           FF77         04            push	4[bx]
16830                                           ! Debug: func () void = memsetw+0 (used reg = )
16831 3F45           E8         3CD2            call	_memsetw
16832 3F48           83C4                   08  add	sp,*8
16833                                           !BCC_EOS
16834                                           ! 1847       }
16835                                           ! 1848      else
16836                                           ! 1849       {
16837 3F4B           EB           5A            jmp .80
16838                       00003F4D            .7E:
16839                                           ! 1850        outb( 0x3c4, 0x02 );
16840                                           ! Debug: list int = const 2 (used reg = )
16841 3F4D           B8                   0002  mov	ax,*2
16842 3F50           50                         push	ax
16843                                           ! Debug: list int = const $3C4 (used reg = )
16844 3F51           B8                   03C4  mov	ax,#$3C4
16845 3F54           50                         push	ax
16846                                           ! Debug: func () void = outb+0 (used reg = )
16847 3F55           E8         3DB3            call	_outb
16848 3F58           83C4                   04  add	sp,*4
16849                                           !BCC_EOS
16850                                           ! 1851        mmask = inb( 0x3c5 );
16851                                           ! Debug: list int = const $3C5 (used reg = )
16852 3F5B           B8                   03C5  mov	ax,#$3C5
16853 3F5E           50                         push	ax
16854                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16855 3F5F           E8         3D93            call	_inb
16856 3F62           44                         inc	sp
16857 3F63           44                         inc	sp
16858                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16859 3F64           8846         FD            mov	-3[bp],al
16860                                           !BCC_EOS
16861                                           ! 1852        outb( 0x3c5, 0x0f );
16862                                           ! Debug: list int = const $F (used reg = )
16863 3F67           B8                   000F  mov	ax,*$F
16864 3F6A           50                         push	ax
16865                                           ! Debug: list int = const $3C5 (used reg = )
16866 3F6B           B8                   03C5  mov	ax,#$3C5
16867 3F6E           50                         push	ax
16868                                           ! Debug: func () void = outb+0 (used reg = )
16869 3F6F           E8         3D99            call	_outb
16870 3F72           83C4                   04  add	sp,*4
16871                                           !BCC_EOS
16872                                           ! 1853        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16873                                           ! Debug: list unsigned int = const $8000 (used reg = )
16874 3F75           B8                   8000  mov	ax,#$8000
16875 3F78           50                         push	ax
16876                                           ! Debug: list int = const 0 (used reg = )
16877 3F79           31C0                       xor	ax,ax
16878 3F7B           50                         push	ax
16879                                           ! Debug: list int = const 0 (used reg = )
16880 3F7C           31C0                       xor	ax,ax
16881 3F7E           50                         push	ax
16882                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16883 3F7F           8A46         FE            mov	al,-2[bp]
16884 3F82           30E4                       xor	ah,ah
16885 3F84           B1                     03  mov	cl,*3
16886 3F86           D3E0                       shl	ax,cl
16887 3F88           89C3                       mov	bx,ax
16888 3F8A           81C3                 01C4  add	bx,#_vga_modes
16889                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16890 3F8E           FF77         04            push	4[bx]
16891                                           ! Debug: func () void = memsetw+0 (used reg = )
16892 3F91           E8         3C86            call	_memsetw
16893 3F94           83C4                   08  add	sp,*8
16894                                           !BCC_EOS
16895                                           ! 1854        outb( 0x3c5, mmask );
16896                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16897 3F97           8A46         FD            mov	al,-3[bp]
16898 3F9A           30E4                       xor	ah,ah
16899 3F9C           50                         push	ax
16900                                           ! Debug: list int = const $3C5 (used reg = )
16901 3F9D           B8                   03C5  mov	ax,#$3C5
16902 3FA0           50                         push	ax
16903                                           ! Debug: func () void = outb+0 (used reg = )
16904 3FA1           E8         3D67            call	_outb
16905 3FA4           83C4                   04  add	sp,*4
16906                                           !BCC_EOS
16907                                           ! 1855       }
16908                                           ! 1856     }
16909                       00003FA7            .80:
16910                                           ! 1857   }
16911                       00003FA7            .7D:
16912                                           ! 1858  write_byte(0x40,0x49,mode);
16913                       00003FA7            .79:
16914                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16915 3FA7           8A46         04            mov	al,4[bp]
16916 3FAA           30E4                       xor	ah,ah
16917 3FAC           50                         push	ax
16918                                           ! Debug: list int = const $49 (used reg = )
16919 3FAD           B8                   0049  mov	ax,*$49
16920 3FB0           50                         push	ax
16921                                           ! Debug: list int = const $40 (used reg = )
16922 3FB1           B8                   0040  mov	ax,*$40
16923 3FB4           50                         push	ax
16924                                           ! Debug: func () void = write_byte+0 (used reg = )
16925 3FB5           E8         3D0D            call	_write_byte
16926 3FB8           83C4                   06  add	sp,*6
16927                                           !BCC_EOS
16928                                           ! 1859  write_word(0x40,0x4A,twidth);
16929                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16930 3FBB           FF76         F4            push	-$C[bp]
16931                                           ! Debug: list int = const $4A (used reg = )
16932 3FBE           B8                   004A  mov	ax,*$4A
16933 3FC1           50                         push	ax
16934                                           ! Debug: list int = const $40 (used reg = )
16935 3FC2           B8                   0040  mov	ax,*$40
16936 3FC5           50                         push	ax
16937                                           ! Debug: func () void = write_word+0 (used reg = )
16938 3FC6           E8         3D14            call	_write_word
16939 3FC9           83C4                   06  add	sp,*6
16940                                           !BCC_EOS
16941                                           ! 1860  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16942                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16943 3FCC           8A46         F9            mov	al,-7[bp]
16944 3FCF           30E4                       xor	ah,ah
16945 3FD1           B1                     06  mov	cl,*6
16946 3FD3           D3E0                       shl	ax,cl
16947 3FD5           89C3                       mov	bx,ax
16948 3FD7           81C3                 0258  add	bx,#_video_param_table
16949                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16950                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16951                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16952 3FDB           FF77         03            push	3[bx]
16953                                           ! Debug: list int = const $4C (used reg = )
16954 3FDE           B8                   004C  mov	ax,*$4C
16955 3FE1           50                         push	ax
16956                                           ! Debug: list int = const $40 (used reg = )
16957 3FE2           B8                   0040  mov	ax,*$40
16958 3FE5           50                         push	ax
16959                                           ! Debug: func () void = write_word+0 (used reg = )
16960 3FE6           E8         3CF4            call	_write_word
16961 3FE9           83C4                   06  add	sp,*6
16962                                           !BCC_EOS
16963                                           ! 1861  write_word(0x40,0x63,crtc_addr);
16964                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16965 3FEC           FF76         EA            push	-$16[bp]
16966                                           ! Debug: list int = const $63 (used reg = )
16967 3FEF           B8                   0063  mov	ax,*$63
16968 3FF2           50                         push	ax
16969                                           ! Debug: list int = const $40 (used reg = )
16970 3FF3           B8                   0040  mov	ax,*$40
16971 3FF6           50                         push	ax
16972                                           ! Debug: func () void = write_word+0 (used reg = )
16973 3FF7           E8         3CE3            call	_write_word
16974 3FFA           83C4                   06  add	sp,*6
16975                                           !BCC_EOS
16976                                           ! 1862  write_byte(0x40,0x84,theightm1);
16977                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
16978 3FFD           FF76         F2            push	-$E[bp]
16979                                           ! Debug: list int = const $84 (used reg = )
16980 4000           B8                   0084  mov	ax,#$84
16981 4003           50                         push	ax
16982                                           ! Debug: list int = const $40 (used reg = )
16983 4004           B8                   0040  mov	ax,*$40
16984 4007           50                         push	ax
16985                                           ! Debug: func () void = write_byte+0 (used reg = )
16986 4008           E8         3CBA            call	_write_byte
16987 400B           83C4                   06  add	sp,*6
16988                                           !BCC_EOS
16989                                           ! 1863  write_word(0x40,0x85,cheight);
16990                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
16991 400E           FF76         F0            push	-$10[bp]
16992                                           ! Debug: list int = const $85 (used reg = )
16993 4011           B8                   0085  mov	ax,#$85
16994 4014           50                         push	ax
16995                                           ! Debug: list int = const $40 (used reg = )
16996 4015           B8                   0040  mov	ax,*$40
16997 4018           50                         push	ax
16998                                           ! Debug: func () void = write_word+0 (used reg = )
16999 4019           E8         3CC1            call	_write_word
17000 401C           83C4                   06  add	sp,*6
17001                                           !BCC_EOS
17002                                           ! 1864  write_byte(0x40,0x87,(0x60|noclearmem));
17003                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17004                                           ! Debug: expression subtree swapping
17005 401F           8A46         FF            mov	al,-1[bp]
17006 4022           0C                     60  or	al,*$60
17007                                           ! Debug: list unsigned char = al+0 (used reg = )
17008 4024           30E4                       xor	ah,ah
17009 4026           50                         push	ax
17010                                           ! Debug: list int = const $87 (used reg = )
17011 4027           B8                   0087  mov	ax,#$87
17012 402A           50                         push	ax
17013                                           ! Debug: list int = const $40 (used reg = )
17014 402B           B8                   0040  mov	ax,*$40
17015 402E           50                         push	ax
17016                                           ! Debug: func () void = write_byte+0 (used reg = )
17017 402F           E8         3C93            call	_write_byte
17018 4032           83C4                   06  add	sp,*6
17019                                           !BCC_EOS
17020                                           ! 1865  write_byte(0x40,0x88,0xF9);
17021                                           ! Debug: list int = const $F9 (used reg = )
17022 4035           B8                   00F9  mov	ax,#$F9
17023 4038           50                         push	ax
17024                                           ! Debug: list int = const $88 (used reg = )
17025 4039           B8                   0088  mov	ax,#$88
17026 403C           50                         push	ax
17027                                           ! Debug: list int = const $40 (used reg = )
17028 403D           B8                   0040  mov	ax,*$40
17029 4040           50                         push	ax
17030                                           ! Debug: func () void = write_byte+0 (used reg = )
17031 4041           E8         3C81            call	_write_byte
17032 4044           83C4                   06  add	sp,*6
17033                                           !BCC_EOS
17034                                           ! 1866  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17035                                           ! Debug: list int = const $89 (used reg = )
17036 4047           B8                   0089  mov	ax,#$89
17037 404A           50                         push	ax
17038                                           ! Debug: list int = const $40 (used reg = )
17039 404B           B8                   0040  mov	ax,*$40
17040 404E           50                         push	ax
17041                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17042 404F           E8         3C4D            call	_read_byte
17043 4052           83C4                   04  add	sp,*4
17044                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17045 4055           24                     7F  and	al,*$7F
17046                                           ! Debug: list unsigned char = al+0 (used reg = )
17047 4057           30E4                       xor	ah,ah
17048 4059           50                         push	ax
17049                                           ! Debug: list int = const $89 (used reg = )
17050 405A           B8                   0089  mov	ax,#$89
17051 405D           50                         push	ax
17052                                           ! Debug: list int = const $40 (used reg = )
17053 405E           B8                   0040  mov	ax,*$40
17054 4061           50                         push	ax
17055                                           ! Debug: func () void = write_byte+0 (used reg = )
17056 4062           E8         3C60            call	_write_byte
17057 4065           83C4                   06  add	sp,*6
17058                                           !BCC_EOS
17059                                           ! 1867  write_byte(0x40,0x8A,0x08);
17060                                           ! Debug: list int = const 8 (used reg = )
17061 4068           B8                   0008  mov	ax,*8
17062 406B           50                         push	ax
17063                                           ! Debug: list int = const $8A (used reg = )
17064 406C           B8                   008A  mov	ax,#$8A
17065 406F           50                         push	ax
17066                                           ! Debug: list int = const $40 (used reg = )
17067 4070           B8                   0040  mov	ax,*$40
17068 4073           50                         push	ax
17069                                           ! Debug: func () void = write_byte+0 (used reg = )
17070 4074           E8         3C4E            call	_write_byte
17071 4077           83C4                   06  add	sp,*6
17072                                           !BCC_EOS
17073                                           ! 1868  write_word(0x40,0xA8, video_save_pointer_table);
17074                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17075 407A           BB                   35C1  mov	bx,#_video_save_pointer_table
17076 407D           53                         push	bx
17077                                           ! Debug: list int = const $A8 (used reg = )
17078 407E           B8                   00A8  mov	ax,#$A8
17079 4081           50                         push	ax
17080                                           ! Debug: list int = const $40 (used reg = )
17081 4082           B8                   0040  mov	ax,*$40
17082 4085           50                         push	ax
17083                                           ! Debug: func () void = write_word+0 (used reg = )
17084 4086           E8         3C54            call	_write_word
17085 4089           83C4                   06  add	sp,*6
17086                                           !BCC_EOS
17087                                           ! 1869  write_word(0x40,0
17088                                           ! 1869 xA8 +2, 0xc000);
17089                                           ! Debug: list unsigned int = const $C000 (used reg = )
17090 408C           B8                   C000  mov	ax,#$C000
17091 408F           50                         push	ax
17092                                           ! Debug: list int = const $AA (used reg = )
17093 4090           B8                   00AA  mov	ax,#$AA
17094 4093           50                         push	ax
17095                                           ! Debug: list int = const $40 (used reg = )
17096 4094           B8                   0040  mov	ax,*$40
17097 4097           50                         push	ax
17098                                           ! Debug: func () void = write_word+0 (used reg = )
17099 4098           E8         3C42            call	_write_word
17100 409B           83C4                   06  add	sp,*6
17101                                           !BCC_EOS
17102                                           ! 1870  write_byte(0x40,0x65,0x00);
17103                                           ! Debug: list int = const 0 (used reg = )
17104 409E           31C0                       xor	ax,ax
17105 40A0           50                         push	ax
17106                                           ! Debug: list int = const $65 (used reg = )
17107 40A1           B8                   0065  mov	ax,*$65
17108 40A4           50                         push	ax
17109                                           ! Debug: list int = const $40 (used reg = )
17110 40A5           B8                   0040  mov	ax,*$40
17111 40A8           50                         push	ax
17112                                           ! Debug: func () void = write_byte+0 (used reg = )
17113 40A9           E8         3C19            call	_write_byte
17114 40AC           83C4                   06  add	sp,*6
17115                                           !BCC_EOS
17116                                           ! 1871  write_byte(0x40,0x66,0x00);
17117                                           ! Debug: list int = const 0 (used reg = )
17118 40AF           31C0                       xor	ax,ax
17119 40B1           50                         push	ax
17120                                           ! Debug: list int = const $66 (used reg = )
17121 40B2           B8                   0066  mov	ax,*$66
17122 40B5           50                         push	ax
17123                                           ! Debug: list int = const $40 (used reg = )
17124 40B6           B8                   0040  mov	ax,*$40
17125 40B9           50                         push	ax
17126                                           ! Debug: func () void = write_byte+0 (used reg = )
17127 40BA           E8         3C08            call	_write_byte
17128 40BD           83C4                   06  add	sp,*6
17129                                           !BCC_EOS
17130                                           ! 1872  if(vga_modes[line].class==0x00)
17131                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17132 40C0           8A46         FE            mov	al,-2[bp]
17133 40C3           30E4                       xor	ah,ah
17134 40C5           B1                     03  mov	cl,*3
17135 40C7           D3E0                       shl	ax,cl
17136 40C9           89C3                       mov	bx,ax
17137 40CB           81C3                 01C4  add	bx,#_vga_modes
17138                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17139 40CF           8A47         01            mov	al,1[bx]
17140 40D2           84C0                       test	al,al
17141 40D4           75           0E            jne 	.81
17142                       000040D6            .82:
17143                                           ! 1873   {
17144                                           ! 1874    biosfn_set_cursor_shape(0x06,0x07);
17145                                           ! Debug: list int = const 7 (used reg = )
17146 40D6           B8                   0007  mov	ax,*7
17147 40D9           50                         push	ax
17148                                           ! Debug: list int = const 6 (used reg = )
17149 40DA           B8                   0006  mov	ax,*6
17150 40DD           50                         push	ax
17151                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17152 40DE           E8         00BA            call	_biosfn_set_cursor_shape
17153 40E1           83C4                   04  add	sp,*4
17154                                           !BCC_EOS
17155                                           ! 1875   }
17156                                           ! 1876  for(i=0;i<8;i++)
17157                       000040E4            .81:
17158                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17159 40E4           31C0                       xor	ax,ax
17160 40E6           8946         F6            mov	-$A[bp],ax
17161                                           !BCC_EOS
17162                                           !BCC_EOS
17163                                           ! 1877   biosfn_set_cursor_pos(i,0x0000);
17164 40E9           EB           13            jmp .85
17165                       000040EB            .86:
17166                                           ! Debug: list int = const 0 (used reg = )
17167 40EB           31C0                       xor	ax,ax
17168 40ED           50                         push	ax
17169                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17170 40EE           FF76         F6            push	-$A[bp]
17171                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17172 40F1           E8         01C2            call	_biosfn_set_cursor_pos
17173 40F4           83C4                   04  add	sp,*4
17174                                           !BCC_EOS
17175                                           ! 1878  biosfn_set_active_page(0x00);
17176                       000040F7            .84:
17177                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17178 40F7           8B46         F6            mov	ax,-$A[bp]
17179 40FA           40                         inc	ax
17180 40FB           8946         F6            mov	-$A[bp],ax
17181                       000040FE            .85:
17182                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17183 40FE           8B46         F6            mov	ax,-$A[bp]
17184 4101           3D                   0008  cmp	ax,*8
17185 4104           72           E5            jb 	.86
17186                       00004106            .87:
17187                       00004106            .83:
17188                                           ! Debug: list int = const 0 (used reg = )
17189 4106           31C0                       xor	ax,ax
17190 4108           50                         push	ax
17191                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17192 4109           E8         0320            call	_biosfn_set_active_page
17193 410C           44                         inc	sp
17194 410D           44                         inc	sp
17195                                           !BCC_EOS
17196                                           ! 1879  if(vga_modes[line].class==0x00)
17197                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17198 410E           8A46         FE            mov	al,-2[bp]
17199 4111           30E4                       xor	ah,ah
17200 4113           B1                     03  mov	cl,*3
17201 4115           D3E0                       shl	ax,cl
17202 4117           89C3                       mov	bx,ax
17203 4119           81C3                 01C4  add	bx,#_vga_modes
17204                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17205 411D           8A47         01            mov	al,1[bx]
17206 4120           84C0                       test	al,al
17207 4122           75           0E            jne 	.88
17208                       00004124            .89:
17209                                           ! 1880   {
17210                                           ! 1881 #asm
17211                                           !BCC_EOS
17212                                           !BCC_ASM
17213                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17214                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17215                       00000008            _biosfn_set_video_mode.theightm1	set	8
17216                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17217                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17218                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17219                       00000014            _biosfn_set_video_mode.line	set	$14
17220                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17221                       00000006            _biosfn_set_video_mode.cheight	set	6
17222                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17223                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17224                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17225                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17226                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17227                       0000000C            _biosfn_set_video_mode.i	set	$C
17228                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17229                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17230                       00000004            .biosfn_set_video_mode.mode	set	4
17231                       00000010            _biosfn_set_video_mode.palette	set	$10
17232                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17233                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17234                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17235                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17236                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17237                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17238                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17239                       00000013            _biosfn_set_video_mode.mmask	set	$13
17240                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17241                                             ;; copy and activate 8x16 font
17242 4124           B8                   1104    mov ax, #0x1104
17243 4127           B3                     00    mov bl, #0x00
17244 4129           CD                     10    int #0x10
17245 412B           B8                   1103    mov ax, #0x1103
17246 412E           B3                     00    mov bl, #0x00
17247 4130           CD                     10    int #0x10
17248                                           ! 1889 endasm
17249                                           !BCC_ENDASM
17250                                           !BCC_EOS
17251                                           ! 1890   }
17252                                           ! 1891 #asm
17253                       00004132            .88:
17254                                           !BCC_EOS
17255                                           !BCC_ASM
17256                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17257                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17258                       00000008            _biosfn_set_video_mode.theightm1	set	8
17259                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17260                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17261                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17262                       00000014            _biosfn_set_video_mode.line	set	$14
17263                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17264                       00000006            _biosfn_set_video_mode.cheight	set	6
17265                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17266                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17267                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17268                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17269                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17270                       0000000C            _biosfn_set_video_mode.i	set	$C
17271                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17272                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17273                       00000004            .biosfn_set_video_mode.mode	set	4
17274                       00000010            _biosfn_set_video_mode.palette	set	$10
17275                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17276                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17277                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17278                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17279                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17280                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17281                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17282                       00000013            _biosfn_set_video_mode.mmask	set	$13
17283                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17284                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4132           1E                           push ds
 +a   4133           31C0                         xor ax, ax
 +a   4135           8ED8                         mov ds, ax
 +a   4137           B8                   1328    mov ax,  #_vgafont8+128*8
 +a   413A           A3         007C              mov 0x1f*4, ax
 +a   413D           B8                   C000    mov ax,  #0xC000
 +a   4140           A3         007E              mov 0x1f*4+2, ax
 +a   4143           1F                           pop ds
17285                                           ! 1893 endasm
17286                                           !BCC_ENDASM
17287                                           !BCC_EOS
17288                                           ! 1894   switch(cheight)
17289 4144           8B46         F0            mov	ax,-$10[bp]
17290                                           ! 1895    {case 8:
17291 4147           E9         003E            br 	.8C
17292                                           ! 1896 #asm
17293                       0000414A            .8D:
17294                                           !BCC_EOS
17295                                           !BCC_ASM
17296                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17297                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17298                       00000008            _biosfn_set_video_mode.theightm1	set	8
17299                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17300                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17301                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17302                       00000014            _biosfn_set_video_mode.line	set	$14
17303                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17304                       00000006            _biosfn_set_video_mode.cheight	set	6
17305                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17306                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17307                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17308                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17309                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17310                       0000000C            _biosfn_set_video_mode.i	set	$C
17311                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17312                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17313                       00000004            .biosfn_set_video_mode.mode	set	4
17314                       00000010            _biosfn_set_video_mode.palette	set	$10
17315                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17316                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17317                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17318                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17319                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17320                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17321                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17322                       00000013            _biosfn_set_video_mode.mmask	set	$13
17323                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17324                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   414A           1E                           push ds
 +a   414B           31C0                         xor ax, ax
 +a   414D           8ED8                         mov ds, ax
 +a   414F           B8                   0F28    mov ax,  #_vgafont8
 +a   4152           A3         010C              mov 0x43*4, ax
 +a   4155           B8                   C000    mov ax,  #0xC000
 +a   4158           A3         010E              mov 0x43*4+2, ax
 +a   415B           1F                           pop ds
17325                                           ! 1898 endasm
17326                                           !BCC_ENDASM
17327                                           !BCC_EOS
17328                                           ! 1899      break;
17329 415C           EB           39            jmp .8A
17330                                           !BCC_EOS
17331                                           ! 1900     case 14:
17332                                           ! 1901 #asm
17333                       0000415E            .8E:
17334                                           !BCC_EOS
17335                                           !BCC_ASM
17336                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17337                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17338                       00000008            _biosfn_set_video_mode.theightm1	set	8
17339                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17340                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17341                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17342                       00000014            _biosfn_set_video_mode.line	set	$14
17343                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17344                       00000006            _biosfn_set_video_mode.cheight	set	6
17345                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17346                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17347                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17348                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17349                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17350                       0000000C            _biosfn_set_video_mode.i	set	$C
17351                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17352                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17353                       00000004            .biosfn_set_video_mode.mode	set	4
17354                       00000010            _biosfn_set_video_mode.palette	set	$10
17355                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17356                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17357                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17358                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17359                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17360                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17361                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17362                       00000013            _biosfn_set_video_mode.mmask	set	$13
17363                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17364                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   415E           1E                           push ds
 +a   415F           31C0                         xor ax, ax
 +a   4161           8ED8                         mov ds, ax
 +a   4163           B8                   1728    mov ax,  #_vgafont14
 +a   4166           A3         010C              mov 0x43*4, ax
 +a   4169           B8                   C000    mov ax,  #0xC000
 +a   416C           A3         010E              mov 0x43*4+2, ax
 +a   416F           1F                           pop ds
17365                                           ! 1903 endasm
17366                                           !BCC_ENDASM
17367                                           !BCC_EOS
17368                                           ! 1904      break;
17369 4170           EB           25            jmp .8A
17370                                           !BCC_EOS
17371                                           ! 1905     case 16:
17372                                           ! 1906 #asm
17373                       00004172            .8F:
17374                                           !BCC_EOS
17375                                           !BCC_ASM
17376                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17377                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17378                       00000008            _biosfn_set_video_mode.theightm1	set	8
17379                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17380                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17381                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17382                       00000014            _biosfn_set_video_mode.line	set	$14
17383                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17384                       00000006            _biosfn_set_video_mode.cheight	set	6
17385                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17386                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17387                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17388                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17389                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17390                       0000000C            _biosfn_set_video_mode.i	set	$C
17391                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17392                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17393                       00000004            .biosfn_set_video_mode.mode	set	4
17394                       00000010            _biosfn_set_video_mode.palette	set	$10
17395                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17396                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17397                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17398                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17399                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17400                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17401                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17402                       00000013            _biosfn_set_video_mode.mmask	set	$13
17403                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17404                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4172           1E                           push ds
 +a   4173           31C0                         xor ax, ax
 +a   4175           8ED8                         mov ds, ax
 +a   4177           B8                   2528    mov ax,  #_vgafont16
 +a   417A           A3         010C              mov 0x43*4, ax
 +a   417D           B8                   C000    mov ax,  #0xC000
 +a   4180           A3         010E              mov 0x43*4+2, ax
 +a   4183           1F                           pop ds
17405                                           ! 1908 endasm
17406                                           !BCC_ENDASM
17407                                           !BCC_EOS
17408                                           ! 1909      break;
17409 4184           EB           11            jmp .8A
17410                                           !BCC_EOS
17411                                           ! 1910    }
17412                                           ! 1911 }
17413 4186           EB           0F            jmp .8A
17414                       00004188            .8C:
17415 4188           2D                   0008  sub	ax,*8
17416 418B           74           BD            je 	.8D
17417 418D           2D                   0006  sub	ax,*6
17418 4190           74           CC            je 	.8E
17419 4192           2D                   0002  sub	ax,*2
17420 4195           74           DB            je 	.8F
17421                       00004197            .8A:
17422                       FFFFFFE8            ..FFFD	=	-$18
17423 4197           89EC                       mov	sp,bp
17424 4199           5D                         pop	bp
17425 419A           C3                         ret
17426                                           ! 1912 static void biosfn_set_cursor_shape (CH,CL)
17427                                           ! Register BX used in function biosfn_set_video_mode
17428                                           ! 1913 Bit8u CH;Bit8u CL;
17429                       0000419B            _biosfn_set_cursor_shape:
17430                                           !BCC_EOS
17431                                           !BCC_EOS
17432                                           ! 1914 {Bit16u cheight,curs,crtc_addr;
17433                                           !BCC_EOS
17434                                           ! 1915  Bit8u modeset_ctl;
17435                                           !BCC_EOS
17436                                           ! 1916  CH&=0x3f;
17437 419B           55                         push	bp
17438 419C           89E5                       mov	bp,sp
17439 419E           83C4                   F8  add	sp,*-8
17440                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17441 41A1           8A46         04            mov	al,4[bp]
17442 41A4           24                     3F  and	al,*$3F
17443 41A6           8846         04            mov	4[bp],al
17444                                           !BCC_EOS
17445                                           ! 1917  CL&=0x1f;
17446                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17447 41A9           8A46         06            mov	al,6[bp]
17448 41AC           24                     1F  and	al,*$1F
17449 41AE           8846         06            mov	6[bp],al
17450                                           !BCC_EOS
17451                                           ! 1918  curs=(CH<<8)+CL;
17452                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17453 41B1           8A46         04            mov	al,4[bp]
17454 41B4           30E4                       xor	ah,ah
17455 41B6           88C4                       mov	ah,al
17456 41B8           30C0                       xor	al,al
17457                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17458 41BA           0246         06            add	al,6[bp]
17459 41BD           80D4                   00  adc	ah,*0
17460                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17461 41C0           8946         FC            mov	-4[bp],ax
17462                                           !BCC_EOS
17463                                           ! 1919  write_word(0x40,0x60,curs);
17464                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17465 41C3           FF76         FC            push	-4[bp]
17466                                           ! Debug: list int = const $60 (used reg = )
17467 41C6           B8                   0060  mov	ax,*$60
17468 41C9           50                         push	ax
17469                                           ! Debug: list int = const $40 (used reg = )
17470 41CA           B8                   0040  mov	ax,*$40
17471 41CD           50                         push	ax
17472                                           ! Debug: func () void = write_word+0 (used reg = )
17473 41CE           E8         3B0C            call	_write_word
17474 41D1           83C4                   06  add	sp,*6
17475                                           !BCC_EOS
17476                                           ! 1920  modeset_ctl=read_byte(0x40,0x89);
17477                                           ! Debug: list int = const $89 (used reg = )
17478 41D4           B8                   0089  mov	ax,#$89
17479 41D7           50                         push	ax
17480                                           ! Debug: list int = const $40 (used reg = )
17481 41D8           B8                   0040  mov	ax,*$40
17482 41DB           50                         push	ax
17483                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17484 41DC           E8         3AC0            call	_read_byte
17485 41DF           83C4                   04  add	sp,*4
17486                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17487 41E2           8846         F9            mov	-7[bp],al
17488                                           !BCC_EOS
17489                                           ! 1921  cheight = read_word(0x40,0x85);
17490                                           ! Debug: list int = const $85 (used reg = )
17491 41E5           B8                   0085  mov	ax,#$85
17492 41E8           50                         push	ax
17493                                           ! Debug: list int = const $40 (used reg = )
17494 41E9           B8                   0040  mov	ax,*$40
17495 41EC           50                         push	ax
17496                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17497 41ED           E8         3AC2            call	_read_word
17498 41F0           83C4                   04  add	sp,*4
17499                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17500 41F3           8946         FE            mov	-2[bp],ax
17501                                           !BCC_EOS
17502                                           ! 1922  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17503                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17504 41F6           8A46         F9            mov	al,-7[bp]
17505 41F9           24                     01  and	al,*1
17506 41FB           84C0                       test	al,al
17507 41FD           74           66            je  	.90
17508                       000041FF            .94:
17509                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17510 41FF           8B46         FE            mov	ax,-2[bp]
17511 4202           3D                   0008  cmp	ax,*8
17512 4205           76           5E            jbe 	.90
17513                       00004207            .93:
17514                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17515 4207           8A46         06            mov	al,6[bp]
17516 420A           3C                     08  cmp	al,*8
17517 420C           73           57            jae 	.90
17518                       0000420E            .92:
17519                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17520 420E           8A46         04            mov	al,4[bp]
17521 4211           3C                     20  cmp	al,*$20
17522 4213           73           50            jae 	.90
17523                       00004215            .91:
17524                                           ! 1923   {
17525                                           ! 1924    if(CL!=(CH+1))
17526                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17527 4215           8A46         04            mov	al,4[bp]
17528 4218           30E4                       xor	ah,ah
17529                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17530                                           ! Debug: expression subtree swapping
17531 421A           40                         inc	ax
17532 421B           50                         push	ax
17533 421C           8A46         06            mov	al,6[bp]
17534 421F           30E4                       xor	ah,ah
17535 4221           3B46         F6            cmp	ax,-$A[bp]
17536 4224           8D66         F8            lea	sp,-8[bp]
17537 4227           74           15            je  	.95
17538                       00004229            .96:
17539                                           ! 1925     {
17540                                           ! 1926      CH = ((CH+1) * cheight / 8) -1;
17541                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17542 4229           8A46         04            mov	al,4[bp]
17543 422C           30E4                       xor	ah,ah
17544                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17545 422E           40                         inc	ax
17546 422F           8B4E         FE            mov	cx,-2[bp]
17547 4232           F7E9                       imul	cx
17548                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17549 4234           B1                     03  mov	cl,*3
17550 4236           D3E8                       shr	ax,cl
17551                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17552                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17553 4238           48                         dec	ax
17554 4239           8846         04            mov	4[bp],al
17555                                           !BCC_EOS
17556                                           ! 1927     }
17557                                           ! 1928    else
17558                                           ! 1929     {
17559 423C           EB           14            jmp .97
17560                       0000423E            .95:
17561                                           ! 1930      CH = ((CL+1) * cheight / 8) - 2;
17562                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17563 423E           8A46         06            mov	al,6[bp]
17564 4241           30E4                       xor	ah,ah
17565                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17566 4243           40                         inc	ax
17567 4244           8B4E         FE            mov	cx,-2[bp]
17568 4247           F7E9                       imul	cx
17569                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17570 4249           B1                     03  mov	cl,*3
17571 424B           D3E8                       shr	ax,cl
17572                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17573                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17574 424D           48                         dec	ax
17575 424E           48                         dec	ax
17576 424F           8846         04            mov	4[bp],al
17577                                           !BCC_EOS
17578                                           ! 1931     }
17579                                           ! 1932    CL = ((CL+1) * cheight / 8) - 1;
17580                       00004252            .97:
17581                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17582 4252           8A46         06            mov	al,6[bp]
17583 4255           30E4                       xor	ah,ah
17584                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17585 4257           40                         inc	ax
17586 4258           8B4E         FE            mov	cx,-2[bp]
17587 425B           F7E9                       imul	cx
17588                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17589 425D           B1                     03  mov	cl,*3
17590 425F           D3E8                       shr	ax,cl
17591                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17592                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17593 4261           48                         dec	ax
17594 4262           8846         06            mov	6[bp],al
17595                                           !BCC_EOS
17596                                           ! 1933   }
17597                                           ! 1934  crtc_addr=read_word(0x40,0x63);
17598                       00004265            .90:
17599                                           ! Debug: list int = const $63 (used reg = )
17600 4265           B8                   0063  mov	ax,*$63
17601 4268           50                         push	ax
17602                                           ! Debug: list int = const $40 (used reg = )
17603 4269           B8                   0040  mov	ax,*$40
17604 426C           50                         push	ax
17605                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17606 426D           E8         3A42            call	_read_word
17607 4270           83C4                   04  add	sp,*4
17608                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17609 4273           8946         FA            mov	-6[bp],ax
17610                                           !BCC_EOS
17611                                           ! 1935  outb(crtc_addr,0x0a);
17612                                           ! Debug: list int = const $A (used reg = )
17613 4276           B8                   000A  mov	ax,*$A
17614 4279           50                         push	ax
17615                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17616 427A           FF76         FA            push	-6[bp]
17617                                           ! Debug: func () void = outb+0 (used reg = )
17618 427D           E8         3A8B            call	_outb
17619 4280           83C4                   04  add	sp,*4
17620                                           !BCC_EOS
17621                                           ! 1936  outb(crtc_addr+1,CH);
17622                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17623 4283           8A46         04            mov	al,4[bp]
17624 4286           30E4                       xor	ah,ah
17625 4288           50                         push	ax
17626                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17627 4289           8B46         FA            mov	ax,-6[bp]
17628                                           ! Debug: list unsigned int = ax+1 (used reg = )
17629 428C           40                         inc	ax
17630 428D           50                         push	ax
17631                                           ! Debug: func () void = outb+0 (used reg = )
17632 428E           E8         3A7A            call	_outb
17633 4291           83C4                   04  add	sp,*4
17634                                           !BCC_EOS
17635                                           ! 1937  outb(crtc_addr,0x0b);
17636                                           ! Debug: list int = const $B (used reg = )
17637 4294           B8                   000B  mov	ax,*$B
17638 4297           50                         push	ax
17639                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17640 4298           FF76         FA            push	-6[bp]
17641                                           ! Debug: func () void = outb+0 (used reg = )
17642 429B           E8         3A6D            call	_outb
17643 429E           83C4                   04  add	sp,*4
17644                                           !BCC_EOS
17645                                           ! 1938  outb(crtc_addr+1,CL);
17646                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17647 42A1           8A46         06            mov	al,6[bp]
17648 42A4           30E4                       xor	ah,ah
17649 42A6           50                         push	ax
17650                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17651 42A7           8B46         FA            mov	ax,-6[bp]
17652                                           ! Debug: list unsigned int = ax+1 (used reg = )
17653 42AA           40                         inc	ax
17654 42AB           50                         push	ax
17655                                           ! Debug: func () void = outb+0 (used reg = )
17656 42AC           E8         3A5C            call	_outb
17657 42AF           83C4                   04  add	sp,*4
17658                                           !BCC_EOS
17659                                           ! 1939 }
17660 42B2           89EC                       mov	sp,bp
17661 42B4           5D                         pop	bp
17662 42B5           C3                         ret
17663                                           ! 1940 static void biosfn_set_cursor_pos (page, cursor)
17664                                           ! 1941 Bit8u page;Bit16u cursor;
17665                       000042B6            _biosfn_set_cursor_pos:
17666                                           !BCC_EOS
17667                                           !BCC_EOS
17668                                           ! 1942 {
17669                                           ! 1943  Bit8u xcurs,ycurs,current;
17670                                           !BCC_EOS
17671                                           ! 1944  Bit16u nbcols,nbrows,address,crtc_addr;
17672                                           !BCC_EOS
17673                                           ! 1945  if(page>7)return;
17674 42B6           55                         push	bp
17675 42B7           89E5                       mov	bp,sp
17676 42B9           83C4                   F4  add	sp,*-$C
17677                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17678 42BC           8A46         04            mov	al,4[bp]
17679 42BF           3C                     07  cmp	al,*7
17680 42C1           76           04            jbe 	.98
17681                       000042C3            .99:
17682 42C3           89EC                       mov	sp,bp
17683 42C5           5D                         pop	bp
17684 42C6           C3                         ret
17685                                           !BCC_EOS
17686                                           ! 1946  write_word(0x40, 0x50 +2*page, cursor);
17687                       000042C7            .98:
17688                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17689 42C7           FF76         06            push	6[bp]
17690                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17691                                           ! Debug: expression subtree swapping
17692 42CA           8A46         04            mov	al,4[bp]
17693 42CD           30E4                       xor	ah,ah
17694 42CF           D1E0                       shl	ax,*1
17695                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17696                                           ! Debug: expression subtree swapping
17697                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17698 42D1           05                   0050  add	ax,*$50
17699 42D4           50                         push	ax
17700                                           ! Debug: list int = const $40 (used reg = )
17701 42D5           B8                   0040  mov	ax,*$40
17702 42D8           50                         push	ax
17703                                           ! Debug: func () void = write_word+0 (used reg = )
17704 42D9           E8         3A01            call	_write_word
17705 42DC           83C4                   06  add	sp,*6
17706                                           !BCC_EOS
17707                                           ! 1947  current=read_byte(0x40,0x62);
17708                                           ! Debug: list int = const $62 (used reg = )
17709 42DF           B8                   0062  mov	ax,*$62
17710 42E2           50                         push	ax
17711                                           ! Debug: list int = const $40 (used reg = )
17712 42E3           B8                   0040  mov	ax,*$40
17713 42E6           50                         push	ax
17714                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17715 42E7           E8         39B5            call	_read_byte
17716 42EA           83C4                   04  add	sp,*4
17717                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17718 42ED           8846         FD            mov	-3[bp],al
17719                                           !BCC_EOS
17720                                           ! 1948  if(page==current)
17721                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17722 42F0           8A46         04            mov	al,4[bp]
17723 42F3           3A46         FD            cmp	al,-3[bp]
17724 42F6   7403    E9         00B8            bne 	.9A
17725                       000042FB            .9B:
17726                                           ! 1949   {
17727                                           ! 1950    nbcols=read_word(0x40,0x4A);
17728                                           ! Debug: list int = const $4A (used reg = )
17729 42FB           B8                   004A  mov	ax,*$4A
17730 42FE           50                         push	ax
17731                                           ! Debug: list int = const $40 (used reg = )
17732 42FF           B8                   0040  mov	ax,*$40
17733 4302           50                         push	ax
17734                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17735 4303           E8         39AC            call	_read_word
17736 4306           83C4                   04  add	sp,*4
17737                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17738 4309           8946         FA            mov	-6[bp],ax
17739                                           !BCC_EOS
17740                                           ! 1951    nbrows=read_byte(0x40,0x84)+1;
17741                                           ! Debug: list int = const $84 (used reg = )
17742 430C           B8                   0084  mov	ax,#$84
17743 430F           50                         push	ax
17744                                           ! Debug: list int = const $40 (used reg = )
17745 4310           B8                   0040  mov	ax,*$40
17746 4313           50                         push	ax
17747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17748 4314           E8         3988            call	_read_byte
17749 4317           83C4                   04  add	sp,*4
17750                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17751 431A           30E4                       xor	ah,ah
17752                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17753 431C           40                         inc	ax
17754 431D           8946         F8            mov	-8[bp],ax
17755                                           !BCC_EOS
17756                                           ! 1952    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17757                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17758 4320           8A46         06            mov	al,6[bp]
17759                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17760 4323           8846         FF            mov	-1[bp],al
17761                                           !BCC_EOS
17762                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17763 4326           8B46         06            mov	ax,6[bp]
17764 4329           30C0                       xor	al,al
17765                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17766 432B           88E0                       mov	al,ah
17767 432D           30E4                       xor	ah,ah
17768                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17769 432F           8846         FE            mov	-2[bp],al
17770                                           !BCC_EOS
17771                                           ! 1953    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17772                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17773 4332           8A46         FE            mov	al,-2[bp]
17774 4335           30E4                       xor	ah,ah
17775 4337           8B4E         FA            mov	cx,-6[bp]
17776 433A           F7E9                       imul	cx
17777 433C           50                         push	ax
17778                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17779 433D           8B46         FA            mov	ax,-6[bp]
17780 4340           8B4E         F8            mov	cx,-8[bp]
17781 4343           F7E9                       imul	cx
17782                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17783 4345           0C                     FF  or	al,#$FF
17784                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17785                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17786 4347           89C3                       mov	bx,ax
17787 4349           8A46         04            mov	al,4[bp]
17788 434C           30E4                       xor	ah,ah
17789 434E           93                         xchg	ax,bx
17790 434F           40                         inc	ax
17791 4350           89D9                       mov	cx,bx
17792 4352           F7E9                       imul	cx
17793                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17794 4354           0246         FF            add	al,-1[bp]
17795 4357           80D4                   00  adc	ah,*0
17796                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17797 435A           0346         F2            add	ax,-$E[bp]
17798 435D           44                         inc	sp
17799 435E           44                         inc	sp
17800                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17801 435F           8946         F6            mov	-$A[bp],ax
17802                                           !BCC_EOS
17803                                           ! 1954    crtc_addr=read_word(0x40,0x63);
17804                                           ! Debug: list int = const $63 (used reg = )
17805 4362           B8                   0063  mov	ax,*$63
17806 4365           50                         push	ax
17807                                           ! Debug: list int = const $40 (used reg = )
17808 4366           B8                   0040  mov	ax,*$40
17809 4369           50                         push	ax
17810                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17811 436A           E8         3945            call	_read_word
17812 436D           83C4                   04  add	sp,*4
17813                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17814 4370           8946         F4            mov	-$C[bp],ax
17815                                           !BCC_EOS
17816                                           ! 1955    outb(crtc_addr,0x0e);
17817                                           ! Debug: list int = const $E (used reg = )
17818 4373           B8                   000E  mov	ax,*$E
17819 4376           50                         push	ax
17820                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17821 4377           FF76         F4            push	-$C[bp]
17822                                           ! Debug: func () void = outb+0 (used reg = )
17823 437A           E8         398E            call	_outb
17824 437D           83C4                   04  add	sp,*4
17825                                           !BCC_EOS
17826                                           ! 1956    outb(crtc_addr+1,(address&0xff00)>>8);
17827                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17828 4380           8B46         F6            mov	ax,-$A[bp]
17829 4383           30C0                       xor	al,al
17830                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17831 4385           88E0                       mov	al,ah
17832 4387           30E4                       xor	ah,ah
17833                                           ! Debug: list unsigned int = ax+0 (used reg = )
17834 4389           50                         push	ax
17835                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17836 438A           8B46         F4            mov	ax,-$C[bp]
17837                                           ! Debug: list unsigned int = ax+1 (used reg = )
17838 438D           40                         inc	ax
17839 438E           50                         push	ax
17840                                           ! Debug: func () void = outb+0 (used reg = )
17841 438F           E8         3979            call	_outb
17842 4392           83C4                   04  add	sp,*4
17843                                           !BCC_EOS
17844                                           ! 1957    outb(crtc_addr,0x0f);
17845                                           ! Debug: list int = const $F (used reg = )
17846 4395           B8                   000F  mov	ax,*$F
17847 4398           50                         push	ax
17848                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17849 4399           FF76         F4            push	-$C[bp]
17850                                           ! Debug: func () void = outb+0 (used reg = )
17851 439C           E8         396C            call	_outb
17852 439F           83C4                   04  add	sp,*4
17853                                           !BCC_EOS
17854                                           ! 1958    outb(crtc_addr+1,address&0x00ff);
17855                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17856 43A2           8A46         F6            mov	al,-$A[bp]
17857                                           ! Debug: list unsigned char = al+0 (used reg = )
17858 43A5           30E4                       xor	ah,ah
17859 43A7           50                         push	ax
17860                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17861 43A8           8B46         F4            mov	ax,-$C[bp]
17862                                           ! Debug: list unsigned int = ax+1 (used reg = )
17863 43AB           40                         inc	ax
17864 43AC           50                         push	ax
17865                                           ! Debug: func () void = outb+0 (used reg = )
17866 43AD           E8         395B            call	_outb
17867 43B0           83C4                   04  add	sp,*4
17868                                           !BCC_EOS
17869                                           ! 1959   }
17870                                           ! 1960 }
17871                       000043B3            .9A:
17872 43B3           89EC                       mov	sp,bp
17873 43B5           5D                         pop	bp
17874 43B6           C3                         ret
17875                                           ! 1961 static void biosfn_get_cursor_pos (page,shape, pos)
17876                                           ! Register BX used in function biosfn_set_cursor_pos
17877                                           ! 1962 Bit8u page;Bi
17878                       000043B7            _biosfn_get_cursor_pos:
17879                                           !BCC_EOS
17880                                           ! 1962 t16u *shape;Bit16u *pos;
17881                                           !BCC_EOS
17882                                           !BCC_EOS
17883                                           ! 1963 {
17884                                           ! 1964  Bit16u ss=get_SS();
17885 43B7           55                         push	bp
17886 43B8           89E5                       mov	bp,sp
17887 43BA           4C                         dec	sp
17888 43BB           4C                         dec	sp
17889                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17890 43BC           E8         396C            call	_get_SS
17891                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17892 43BF           8946         FE            mov	-2[bp],ax
17893                                           !BCC_EOS
17894                                           ! 1965  write_word(ss, shape, 0);
17895                                           ! Debug: list int = const 0 (used reg = )
17896 43C2           31C0                       xor	ax,ax
17897 43C4           50                         push	ax
17898                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17899 43C5           FF76         06            push	6[bp]
17900                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17901 43C8           FF76         FE            push	-2[bp]
17902                                           ! Debug: func () void = write_word+0 (used reg = )
17903 43CB           E8         390F            call	_write_word
17904 43CE           83C4                   06  add	sp,*6
17905                                           !BCC_EOS
17906                                           ! 1966  write_word(ss, pos, 0);
17907                                           ! Debug: list int = const 0 (used reg = )
17908 43D1           31C0                       xor	ax,ax
17909 43D3           50                         push	ax
17910                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17911 43D4           FF76         08            push	8[bp]
17912                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17913 43D7           FF76         FE            push	-2[bp]
17914                                           ! Debug: func () void = write_word+0 (used reg = )
17915 43DA           E8         3900            call	_write_word
17916 43DD           83C4                   06  add	sp,*6
17917                                           !BCC_EOS
17918                                           ! 1967  if(page>7)return;
17919                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17920 43E0           8A46         04            mov	al,4[bp]
17921 43E3           3C                     07  cmp	al,*7
17922 43E5           76           04            jbe 	.9C
17923                       000043E7            .9D:
17924 43E7           89EC                       mov	sp,bp
17925 43E9           5D                         pop	bp
17926 43EA           C3                         ret
17927                                           !BCC_EOS
17928                                           ! 1968  write_word(ss,shape,read_word(0x40,0x60));
17929                       000043EB            .9C:
17930                                           ! Debug: list int = const $60 (used reg = )
17931 43EB           B8                   0060  mov	ax,*$60
17932 43EE           50                         push	ax
17933                                           ! Debug: list int = const $40 (used reg = )
17934 43EF           B8                   0040  mov	ax,*$40
17935 43F2           50                         push	ax
17936                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17937 43F3           E8         38BC            call	_read_word
17938 43F6           83C4                   04  add	sp,*4
17939                                           ! Debug: list unsigned short = ax+0 (used reg = )
17940 43F9           50                         push	ax
17941                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17942 43FA           FF76         06            push	6[bp]
17943                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17944 43FD           FF76         FE            push	-2[bp]
17945                                           ! Debug: func () void = write_word+0 (used reg = )
17946 4400           E8         38DA            call	_write_word
17947 4403           83C4                   06  add	sp,*6
17948                                           !BCC_EOS
17949                                           ! 1969  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17950                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17951 4406           8A46         04            mov	al,4[bp]
17952 4409           30E4                       xor	ah,ah
17953 440B           D1E0                       shl	ax,*1
17954                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17955                                           ! Debug: expression subtree swapping
17956                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17957 440D           05                   0050  add	ax,*$50
17958 4410           50                         push	ax
17959                                           ! Debug: list int = const $40 (used reg = )
17960 4411           B8                   0040  mov	ax,*$40
17961 4414           50                         push	ax
17962                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17963 4415           E8         389A            call	_read_word
17964 4418           83C4                   04  add	sp,*4
17965                                           ! Debug: list unsigned short = ax+0 (used reg = )
17966 441B           50                         push	ax
17967                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17968 441C           FF76         08            push	8[bp]
17969                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17970 441F           FF76         FE            push	-2[bp]
17971                                           ! Debug: func () void = write_word+0 (used reg = )
17972 4422           E8         38B8            call	_write_word
17973 4425           83C4                   06  add	sp,*6
17974                                           !BCC_EOS
17975                                           ! 1970 }
17976 4428           89EC                       mov	sp,bp
17977 442A           5D                         pop	bp
17978 442B           C3                         ret
17979                                           ! 1971 static void biosfn_set_active_page (page)
17980                                           ! 1972 Bit8u page;
17981                       0000442C            _biosfn_set_active_page:
17982                                           !BCC_EOS
17983                                           ! 1973 {
17984                                           ! 1974  Bit16u cursor,dummy,crtc_addr;
17985                                           !BCC_EOS
17986                                           ! 1975  Bit16u nbcols,nbrows,address;
17987                                           !BCC_EOS
17988                                           ! 1976  Bit8u mode,line;
17989                                           !BCC_EOS
17990                                           ! 1977  if(page>7)return;
17991 442C           55                         push	bp
17992 442D           89E5                       mov	bp,sp
17993 442F           83C4                   F2  add	sp,*-$E
17994                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
17995 4432           8A46         04            mov	al,4[bp]
17996 4435           3C                     07  cmp	al,*7
17997 4437           76           04            jbe 	.9E
17998                       00004439            .9F:
17999 4439           89EC                       mov	sp,bp
18000 443B           5D                         pop	bp
18001 443C           C3                         ret
18002                                           !BCC_EOS
18003                                           ! 1978  mode=read_byte(0x40,0x49);
18004                       0000443D            .9E:
18005                                           ! Debug: list int = const $49 (used reg = )
18006 443D           B8                   0049  mov	ax,*$49
18007 4440           50                         push	ax
18008                                           ! Debug: list int = const $40 (used reg = )
18009 4441           B8                   0040  mov	ax,*$40
18010 4444           50                         push	ax
18011                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18012 4445           E8         3857            call	_read_byte
18013 4448           83C4                   04  add	sp,*4
18014                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18015 444B           8846         F3            mov	-$D[bp],al
18016                                           !BCC_EOS
18017                                           ! 1979  line=find_vga_entry(mode);
18018                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18019 444E           8A46         F3            mov	al,-$D[bp]
18020 4451           30E4                       xor	ah,ah
18021 4453           50                         push	ax
18022                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18023 4454           E8         375C            call	_find_vga_entry
18024 4457           44                         inc	sp
18025 4458           44                         inc	sp
18026                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18027 4459           8846         F2            mov	-$E[bp],al
18028                                           !BCC_EOS
18029                                           ! 1980  if(line==0xFF)return;
18030                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18031 445C           8A46         F2            mov	al,-$E[bp]
18032 445F           3C                     FF  cmp	al,#$FF
18033 4461           75           04            jne 	.A0
18034                       00004463            .A1:
18035 4463           89EC                       mov	sp,bp
18036 4465           5D                         pop	bp
18037 4466           C3                         ret
18038                                           !BCC_EOS
18039                                           ! 1981  biosfn_get_cursor_pos(page,&dummy,&cursor);
18040                       00004467            .A0:
18041                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18042 4467           8D5E         FE            lea	bx,-2[bp]
18043 446A           53                         push	bx
18044                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18045 446B           8D5E         FC            lea	bx,-4[bp]
18046 446E           53                         push	bx
18047                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18048 446F           8A46         04            mov	al,4[bp]
18049 4472           30E4                       xor	ah,ah
18050 4474           50                         push	ax
18051                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18052 4475           E8         FF3F            call	_biosfn_get_cursor_pos
18053 4478           83C4                   06  add	sp,*6
18054                                           !BCC_EOS
18055                                           ! 1982  if(vga_modes[line].class==0x00)
18056                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18057 447B           8A46         F2            mov	al,-$E[bp]
18058 447E           30E4                       xor	ah,ah
18059 4480           B1                     03  mov	cl,*3
18060 4482           D3E0                       shl	ax,cl
18061 4484           89C3                       mov	bx,ax
18062 4486           81C3                 01C4  add	bx,#_vga_modes
18063                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18064 448A           8A47         01            mov	al,1[bx]
18065 448D           84C0                       test	al,al
18066 448F           75           6E            jne 	.A2
18067                       00004491            .A3:
18068                                           ! 1983   {
18069                                           ! 1984    nbcols=read_word(0x40,0x4A);
18070                                           ! Debug: list int = const $4A (used reg = )
18071 4491           B8                   004A  mov	ax,*$4A
18072 4494           50                         push	ax
18073                                           ! Debug: list int = const $40 (used reg = )
18074 4495           B8                   0040  mov	ax,*$40
18075 4498           50                         push	ax
18076                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18077 4499           E8         3816            call	_read_word
18078 449C           83C4                   04  add	sp,*4
18079                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18080 449F           8946         F8            mov	-8[bp],ax
18081                                           !BCC_EOS
18082                                           ! 1985    nbrows=read_byte(0x40,0x84)+1;
18083                                           ! Debug: list int = const $84 (used reg = )
18084 44A2           B8                   0084  mov	ax,#$84
18085 44A5           50                         push	ax
18086                                           ! Debug: list int = const $40 (used reg = )
18087 44A6           B8                   0040  mov	ax,*$40
18088 44A9           50                         push	ax
18089                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18090 44AA           E8         37F2            call	_read_byte
18091 44AD           83C4                   04  add	sp,*4
18092                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18093 44B0           30E4                       xor	ah,ah
18094                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18095 44B2           40                         inc	ax
18096 44B3           8946         F6            mov	-$A[bp],ax
18097                                           !BCC_EOS
18098                                           ! 1986    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18099                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18100 44B6           8B46         F8            mov	ax,-8[bp]
18101 44B9           8B4E         F6            mov	cx,-$A[bp]
18102 44BC           F7E9                       imul	cx
18103                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18104 44BE           D1E0                       shl	ax,*1
18105                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18106 44C0           0C                     FF  or	al,#$FF
18107                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18108                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18109 44C2           89C3                       mov	bx,ax
18110 44C4           8A46         04            mov	al,4[bp]
18111 44C7           30E4                       xor	ah,ah
18112 44C9           93                         xchg	ax,bx
18113 44CA           40                         inc	ax
18114 44CB           89D9                       mov	cx,bx
18115 44CD           F7E9                       imul	cx
18116                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18117 44CF           8946         F4            mov	-$C[bp],ax
18118                                           !BCC_EOS
18119                                           ! 1987    write_word(0x40,0x4E,address);
18120                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18121 44D2           FF76         F4            push	-$C[bp]
18122                                           ! Debug: list int = const $4E (used reg = )
18123 44D5           B8                   004E  mov	ax,*$4E
18124 44D8           50                         push	ax
18125                                           ! Debug: list int = const $40 (used reg = )
18126 44D9           B8                   0040  mov	ax,*$40
18127 44DC           50                         push	ax
18128                                           ! Debug: func () void = write_word+0 (used reg = )
18129 44DD           E8         37FD            call	_write_word
18130 44E0           83C4                   06  add	sp,*6
18131                                           !BCC_EOS
18132                                           ! 1988    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18133                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18134 44E3           8B46         F8            mov	ax,-8[bp]
18135 44E6           8B4E         F6            mov	cx,-$A[bp]
18136 44E9           F7E9                       imul	cx
18137                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18138 44EB           0C                     FF  or	al,#$FF
18139                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18140                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18141 44ED           89C3                       mov	bx,ax
18142 44EF           8A46         04            mov	al,4[bp]
18143 44F2           30E4                       xor	ah,ah
18144 44F4           93                         xchg	ax,bx
18145 44F5           40                         inc	ax
18146 44F6           89D9                       mov	cx,bx
18147 44F8           F7E9                       imul	cx
18148                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18149 44FA           8946         F4            mov	-$C[bp],ax
18150                                           !BCC_EOS
18151                                           ! 1989   }
18152                                           ! 1990  else
18153                                           ! 1991   {
18154 44FD           EB           24            jmp .A4
18155                       000044FF            .A2:
18156                                           ! 1992    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18157                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18158 44FF           8A46         F2            mov	al,-$E[bp]
18159 4502           30E4                       xor	ah,ah
18160 4504           89C3                       mov	bx,ax
18161                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18162 4506           8A87       0244            mov	al,_line_to_vpti[bx]
18163 450A           30E4                       xor	ah,ah
18164 450C           B1                     06  mov	cl,*6
18165 450E           D3E0                       shl	ax,cl
18166 4510           89C3                       mov	bx,ax
18167 4512           81C3                 0258  add	bx,#_video_param_table
18168                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18169                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18170                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18171 4516           8A46         04            mov	al,4[bp]
18172 4519           30E4                       xor	ah,ah
18173 451B           8B4F         03            mov	cx,3[bx]
18174 451E           F7E9                       imul	cx
18175                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18176 4520           8946         F4            mov	-$C[bp],ax
18177                                           !BCC_EOS
18178                                           ! 1993   }
18179                                           ! 1994  crtc_addr=read_word(0x40,0x63);
18180                       00004523            .A4:
18181                                           ! Debug: list int = const $63 (used reg = )
18182 4523           B8                   0063  mov	ax,*$63
18183 4526           50                         push	ax
18184                                           ! Debug: list int = const $40 (used reg = )
18185 4527           B8                   0040  mov	ax,*$40
18186 452A           50                         push	ax
18187                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18188 452B           E8         3784            call	_read_word
18189 452E           83C4                   04  add	sp,*4
18190                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18191 4531           8946         FA            mov	-6[bp],ax
18192                                           !BCC_EOS
18193                                           ! 1995  outb(crtc_addr,0x0c);
18194                                           ! Debug: list int = const $C (used reg = )
18195 4534           B8                   000C  mov	ax,*$C
18196 4537           50                         push	ax
18197                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18198 4538           FF76         FA            push	-6[bp]
18199                                           ! Debug: func () void = outb+0 (used reg = )
18200 453B           E8         37CD            call	_outb
18201 453E           83C4                   04  add	sp,*4
18202                                           !BCC_EOS
18203                                           ! 1996  outb(crtc_addr+1,(address&0xff00)>>8);
18204                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18205 4541           8B46         F4            mov	ax,-$C[bp]
18206 4544           30C0                       xor	al,al
18207                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18208 4546           88E0                       mov	al,ah
18209 4548           30E4                       xor	ah,ah
18210                                           ! Debug: list unsigned int = ax+0 (used reg = )
18211 454A           50                         push	ax
18212                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18213 454B           8B46         FA            mov	ax,-6[bp]
18214                                           ! Debug: list unsigned int = ax+1 (used reg = )
18215 454E           40                         inc	ax
18216 454F           50                         push	ax
18217                                           ! Debug: func () void = outb+0 (used reg = )
18218 4550           E8         37B8            call	_outb
18219 4553           83C4                   04  add	sp,*4
18220                                           !BCC_EOS
18221                                           ! 1997  outb(crtc_addr,0x0d);
18222                                           ! Debug: list int = const $D (used reg = )
18223 4556           B8                   000D  mov	ax,*$D
18224 4559           50                         push	ax
18225                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18226 455A           FF76         FA            push	-6[bp]
18227                                           ! Debug: func () void = outb+0 (used reg = )
18228 455D           E8         37AB            call	_outb
18229 4560           83C4                   04  add	sp,*4
18230                                           !BCC_EOS
18231                                           ! 1998  outb(crtc_addr+1,address&0x00ff);
18232                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18233 4563           8A46         F4            mov	al,-$C[bp]
18234                                           ! Debug: list unsigned char = al+0 (used reg = )
18235 4566           30E4                       xor	ah,ah
18236 4568           50                         push	ax
18237                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18238 4569           8B46         FA            mov	ax,-6[bp]
18239                                           ! Debug: list unsigned int = ax+1 (used reg = )
18240 456C           40                         inc	ax
18241 456D           50                         push	ax
18242                                           ! Debug: func () void = outb+0 (used reg = )
18243 456E           E8         379A            call	_outb
18244 4571           83C4                   04  add	sp,*4
18245                                           !BCC_EOS
18246                                           ! 1999  write_byte(0x40,0x62,page);
18247                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18248 4574           8A46         04            mov	al,4[bp]
18249 4577           30E4                       xor	ah,ah
18250 4579           50                         push	ax
18251                                           ! Debug: list int = const $62 (used reg = )
18252 457A           B8                   0062  mov	ax,*$62
18253 457D           50                         push	ax
18254                                           ! Debug: list int = const $40 (used reg = )
18255 457E           B8                   0040  mov	ax,*$40
18256 4581           50                         push	ax
18257                                           ! Debug: func () void = write_byte+0 (used reg = )
18258 4582           E8         3740            call	_write_byte
18259 4585           83C4                   06  add	sp,*6
18260                                           !BCC_EOS
18261                                           ! 2000  printf("Set active page %02x address %04x\n",page,address);
18262                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18263 4588           FF76         F4            push	-$C[bp]
18264                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18265 458B           8A46         04            mov	al,4[bp]
18266 458E           30E4                       xor	ah,ah
18267 4590           50                         push	ax
18268                                           ! Debug: list * char = .A5+0 (used reg = )
18269 4591           BB                   7F29  mov	bx,#.A5
18270 4594           53                         push	bx
18271                                           ! Debug: func () void = printf+0 (used reg = )
18272 4595           E8         37B2            call	_printf
18273 4598           83C4                   06  add	sp,*6
18274                                           !BCC_EOS
18275                                           ! 2001  biosfn_set_cursor_pos(page,cursor);
18276                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18277 459B           FF76         FE            push	-2[bp]
18278                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18279 459E           8A46         04            mov	al,4[bp]
18280 45A1           30E4                       xor	ah,ah
18281 45A3           50                         push	ax
18282                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18283 45A4           E8         FD0F            call	_biosfn_set_cursor_pos
18284 45A7           83C4                   04  add	sp,*4
18285                                           !BCC_EOS
18286                                           ! 2002 }
18287 45AA           89EC                       mov	sp,bp
18288 45AC           5D                         pop	bp
18289 45AD           C3                         ret
18290                                           ! 2003 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18291                                           ! Register BX used in function biosfn_set_active_page
18292                                           ! 2004 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18293                       000045AE            _vgamem_copy_pl4:
18294                                           !BCC_EOS
18295                                           !BCC_EOS
18296                                           !BCC_EOS
18297                                           !BCC_EOS
18298                                           !BCC_EOS
18299                                           !BCC_EOS
18300                                           ! 2005 {
18301                                           ! 2006  Bit16u src,dest;
18302                                           !BCC_EOS
18303                                           ! 2007  Bit8u i;
18304                                           !BCC_EOS
18305                                           ! 2008  src=ysrc*cheight*nbcols+xstart;
18306 45AE           55                         push	bp
18307 45AF           89E5                       mov	bp,sp
18308 45B1           83C4                   FA  add	sp,*-6
18309                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18310 45B4           8A46         0E            mov	al,$E[bp]
18311 45B7           30E4                       xor	ah,ah
18312 45B9           89C3                       mov	bx,ax
18313 45BB           8A46         06            mov	al,6[bp]
18314 45BE           30E4                       xor	ah,ah
18315 45C0           89D9                       mov	cx,bx
18316 45C2           F7E9                       imul	cx
18317                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18318 45C4           89C3                       mov	bx,ax
18319 45C6           8A46         0C            mov	al,$C[bp]
18320 45C9           30E4                       xor	ah,ah
18321 45CB           93                         xchg	ax,bx
18322 45CC           89D9                       mov	cx,bx
18323 45CE           F7E9                       imul	cx
18324                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18325 45D0           0246         04            add	al,4[bp]
18326 45D3           80D4                   00  adc	ah,*0
18327                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18328 45D6           8946         FE            mov	-2[bp],ax
18329                                           !BCC_EOS
18330                                           ! 2009  dest=ydest*cheight*nbcols+xstart;
18331                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18332 45D9           8A46         0E            mov	al,$E[bp]
18333 45DC           30E4                       xor	ah,ah
18334 45DE           89C3                       mov	bx,ax
18335 45E0           8A46         08            mov	al,8[bp]
18336 45E3           30E4                       xor	ah,ah
18337 45E5           89D9                       mov	cx,bx
18338 45E7           F7E9                       imul	cx
18339                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18340 45E9           89C3                       mov	bx,ax
18341 45EB           8A46         0C            mov	al,$C[bp]
18342 45EE           30E4                       xor	ah,ah
18343 45F0           93                         xchg	ax,bx
18344 45F1           89D9                       mov	cx,bx
18345 45F3           F7E9                       imul	cx
18346                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18347 45F5           0246         04            add	al,4[bp]
18348 45F8           80D4                   00  adc	ah,*0
18349                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18350 45FB           8946         FC            mov	-4[bp],ax
18351                                           !BCC_EOS
18352                                           ! 2010  outw(0x3ce, 0x0105);
18353                                           ! Debug: list int = const $105 (used reg = )
18354 45FE           B8                   0105  mov	ax,#$105
18355 4601           50                         push	ax
18356                                           ! Debug: list int = const $3CE (used reg = )
18357 4602           B8                   03CE  mov	ax,#$3CE
18358 4605           50                         push	ax
18359                                           ! Debug: func () void = outw+0 (used reg = )
18360 4606           E8         3712            call	_outw
18361 4609           83C4                   04  add	sp,*4
18362                                           !BCC_EOS
18363                                           ! 2011  for(i=0;i<cheight;i++)
18364                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18365 460C           30C0                       xor	al,al
18366 460E           8846         FB            mov	-5[bp],al
18367                                           !BCC_EOS
18368                                           !BCC_EOS
18369                                           ! 2012   {
18370 4611           EB           43            jmp .A8
18371                       00004613            .A9:
18372                                           ! 2013    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18373                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18374 4613           8A46         0A            mov	al,$A[bp]
18375 4616           30E4                       xor	ah,ah
18376 4618           50                         push	ax
18377                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18378 4619           8A46         0C            mov	al,$C[bp]
18379 461C           30E4                       xor	ah,ah
18380 461E           89C3                       mov	bx,ax
18381 4620           8A46         FB            mov	al,-5[bp]
18382 4623           30E4                       xor	ah,ah
18383 4625           89D9                       mov	cx,bx
18384 4627           F7E9                       imul	cx
18385                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18386                                           ! Debug: expression subtree swapping
18387 4629           0346         FE            add	ax,-2[bp]
18388                                           ! Debug: list unsigned int = ax+0 (used reg = )
18389 462C           50                         push	ax
18390                                           ! Debug: list unsigned int = const $A000 (used reg = )
18391 462D           B8                   A000  mov	ax,#$A000
18392 4630           50                         push	ax
18393                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18394 4631           8A46         0C            mov	al,$C[bp]
18395 4634           30E4                       xor	ah,ah
18396 4636           89C3                       mov	bx,ax
18397 4638           8A46         FB            mov	al,-5[bp]
18398 463B           30E4                       xor	ah,ah
18399 463D           89D9                       mov	cx,bx
18400 463F           F7E9                       imul	cx
18401                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18402                                           ! Debug: expression subtree swapping
18403 4641           0346         FC            add	ax,-4[bp]
18404                                           ! Debug: list unsigned int = ax+0 (used reg = )
18405 4644           50                         push	ax
18406                                           ! Debug: list unsigned int = const $A000 (used reg = )
18407 4645           B8                   A000  mov	ax,#$A000
18408 4648           50                         push	ax
18409                                           ! Debug: func () void = memcpyb+0 (used reg = )
18410 4649           E8         35F3            call	_memcpyb
18411 464C           83C4                   0A  add	sp,*$A
18412                                           !BCC_EOS
18413                                           ! 2014   }
18414                                           ! 2015  outw(0x3ce, 0x0005);
18415                       0000464F            .A7:
18416                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18417 464F           8A46         FB            mov	al,-5[bp]
18418 4652           40                         inc	ax
18419 4653           8846         FB            mov	-5[bp],al
18420                       00004656            .A8:
18421                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18422 4656           8A46         FB            mov	al,-5[bp]
18423 4659           3A46         0E            cmp	al,$E[bp]
18424 465C           72           B5            jb 	.A9
18425                       0000465E            .AA:
18426                       0000465E            .A6:
18427                                           ! Debug: list int = const 5 (used reg = )
18428 465E           B8                   0005  mov	ax,*5
18429 4661           50                         push	ax
18430                                           ! Debug: list int = const $3CE (used reg = )
18431 4662           B8                   03CE  mov	ax,#$3CE
18432 4665           50                         push	ax
18433                                           ! Debug: func () void = outw+0 (used reg = )
18434 4666           E8         36B2            call	_outw
18435 4669           83C4                   04  add	sp,*4
18436                                           !BCC_EOS
18437                                           ! 2016 }
18438 466C           89EC                       mov	sp,bp
18439 466E           5D                         pop	bp
18440 466F           C3                         ret
18441                                           ! 2017 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18442                                           ! Register BX used in function vgamem_copy_pl4
18443                                           ! 2018 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18444                       00004670            _vgamem_fill_pl4:
18445                                           !BCC_EOS
18446                                           !BCC_EOS
18447                                           !BCC_EOS
18448                                           !BCC_EOS
18449                                           !BCC_EOS
18450                                           !BCC_EOS
18451                                           ! 2019 {
18452                                           ! 2020  Bit16u dest;
18453                                           !BCC_EOS
18454                                           ! 2021  Bit8u i;
18455                                           !BCC_EOS
18456                                           ! 2022  dest=ystart*cheight*nbcols+xstart;
18457 4670           55                         push	bp
18458 4671           89E5                       mov	bp,sp
18459 4673           83C4                   FC  add	sp,*-4
18460                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18461 4676           8A46         0C            mov	al,$C[bp]
18462 4679           30E4                       xor	ah,ah
18463 467B           89C3                       mov	bx,ax
18464 467D           8A46         06            mov	al,6[bp]
18465 4680           30E4                       xor	ah,ah
18466 4682           89D9                       mov	cx,bx
18467 4684           F7E9                       imul	cx
18468                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18469 4686           89C3                       mov	bx,ax
18470 4688           8A46         0A            mov	al,$A[bp]
18471 468B           30E4                       xor	ah,ah
18472 468D           93                         xchg	ax,bx
18473 468E           89D9                       mov	cx,bx
18474 4690           F7E9                       imul	cx
18475                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18476 4692           0246         04            add	al,4[bp]
18477 4695           80D4                   00  adc	ah,*0
18478                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18479 4698           8946         FE            mov	-2[bp],ax
18480                                           !BCC_EOS
18481                                           ! 2023  outw(0x3ce, 0x0205);
18482                                           ! Debug: list int = const $205 (used reg = )
18483 469B           B8                   0205  mov	ax,#$205
18484 469E           50                         push	ax
18485                                           ! Debug: list int = const $3CE (used reg = )
18486 469F           B8                   03CE  mov	ax,#$3CE
18487 46A2           50                         push	ax
18488                                           ! Debug: func () void = outw+0 (used reg = )
18489 46A3           E8         3675            call	_outw
18490 46A6           83C4                   04  add	sp,*4
18491                                           !BCC_EOS
18492                                           ! 2024  for(i=0;i<cheight;i++)
18493                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18494 46A9           30C0                       xor	al,al
18495 46AB           8846         FD            mov	-3[bp],al
18496                                           !BCC_EOS
18497                                           !BCC_EOS
18498                                           ! 2025   {
18499 46AE           EB           31            jmp .AD
18500                       000046B0            .AE:
18501                                           ! 2026    memsetb(0xa000,dest+i*nbcols,attr,cols);
18502                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18503 46B0           8A46         08            mov	al,8[bp]
18504 46B3           30E4                       xor	ah,ah
18505 46B5           50                         push	ax
18506                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18507 46B6           8A46         0E            mov	al,$E[bp]
18508 46B9           30E4                       xor	ah,ah
18509 46BB           50                         push	ax
18510                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18511 46BC           8A46         0A            mov	al,$A[bp]
18512 46BF           30E4                       xor	ah,ah
18513 46C1           89C3                       mov	bx,ax
18514 46C3           8A46         FD            mov	al,-3[bp]
18515 46C6           30E4                       xor	ah,ah
18516 46C8           89D9                       mov	cx,bx
18517 46CA           F7E9                       imul	cx
18518                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18519                                           ! Debug: expression subtree swapping
18520 46CC           0346         FE            add	ax,-2[bp]
18521                                           ! Debug: list unsigned int = ax+0 (used reg = )
18522 46CF           50                         push	ax
18523                                           ! Debug: list unsigned int = const $A000 (used reg = )
18524 46D0           B8                   A000  mov	ax,#$A000
18525 46D3           50                         push	ax
18526                                           ! Debug: func () void = memsetb+0 (used reg = )
18527 46D4           E8         351E            call	_memsetb
18528 46D7           83C4                   08  add	sp,*8
18529                                           !BCC_EOS
18530                                           ! 2027   }
18531                                           ! 2028  outw(0x3ce, 0x0005);
18532                       000046DA            .AC:
18533                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18534 46DA           8A46         FD            mov	al,-3[bp]
18535 46DD           40                         inc	ax
18536 46DE           8846         FD            mov	-3[bp],al
18537                       000046E1            .AD:
18538                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18539 46E1           8A46         FD            mov	al,-3[bp]
18540 46E4           3A46         0C            cmp	al,$C[bp]
18541 46E7           72           C7            jb 	.AE
18542                       000046E9            .AF:
18543                       000046E9            .AB:
18544                                           ! Debug: list int = const 5 (used reg = )
18545 46E9           B8                   0005  mov	ax,*5
18546 46EC           50                         push	ax
18547                                           ! Debug: list int = const $3CE (used reg = )
18548 46ED           B8                   03CE  mov	ax,#$3CE
18549 46F0           50                         push	ax
18550                                           ! Debug: func () void = outw+0 (used reg = )
18551 46F1           E8         3627            call	_outw
18552 46F4           83C4                   04  add	sp,*4
18553                                           !BCC_EOS
18554                                           ! 2029 }
18555 46F7           89EC                       mov	sp,bp
18556 46F9           5D                         pop	bp
18557 46FA           C3                         ret
18558                                           ! 2030 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18559                                           ! Register BX used in function vgamem_fill_pl4
18560                                           ! 2031 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18561                       000046FB            _vgamem_copy_cga:
18562                                           !BCC_EOS
18563                                           !BCC_EOS
18564                                           !BCC_EOS
18565                                           !BCC_EOS
18566                                           !BCC_EOS
18567                                           !BCC_EOS
18568                                           ! 2032 {
18569                                           ! 2033  Bit16u src,dest;
18570                                           !BCC_EOS
18571                                           ! 2034  Bit8u i;
18572                                           !BCC_EOS
18573                                           ! 2035  src=((ysrc*cheight*nbcols)>>1)+xstart;
18574 46FB           55                         push	bp
18575 46FC           89E5                       mov	bp,sp
18576 46FE           83C4                   FA  add	sp,*-6
18577                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18578 4701           8A46         0E            mov	al,$E[bp]
18579 4704           30E4                       xor	ah,ah
18580 4706           89C3                       mov	bx,ax
18581 4708           8A46         06            mov	al,6[bp]
18582 470B           30E4                       xor	ah,ah
18583 470D           89D9                       mov	cx,bx
18584 470F           F7E9                       imul	cx
18585                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18586 4711           89C3                       mov	bx,ax
18587 4713           8A46         0C            mov	al,$C[bp]
18588 4716           30E4                       xor	ah,ah
18589 4718           93                         xchg	ax,bx
18590 4719           89D9                       mov	cx,bx
18591 471B           F7E9                       imul	cx
18592                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18593 471D           D1E8                       shr	ax,*1
18594                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18595 471F           0246         04            add	al,4[bp]
18596 4722           80D4                   00  adc	ah,*0
18597                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18598 4725           8946         FE            mov	-2[bp],ax
18599                                           !BCC_EOS
18600                                           ! 2036  dest=((ydest*che
18601                                           ! 2036 ight*nbcols)>>1)+xstart;
18602                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18603 4728           8A46         0E            mov	al,$E[bp]
18604 472B           30E4                       xor	ah,ah
18605 472D           89C3                       mov	bx,ax
18606 472F           8A46         08            mov	al,8[bp]
18607 4732           30E4                       xor	ah,ah
18608 4734           89D9                       mov	cx,bx
18609 4736           F7E9                       imul	cx
18610                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18611 4738           89C3                       mov	bx,ax
18612 473A           8A46         0C            mov	al,$C[bp]
18613 473D           30E4                       xor	ah,ah
18614 473F           93                         xchg	ax,bx
18615 4740           89D9                       mov	cx,bx
18616 4742           F7E9                       imul	cx
18617                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18618 4744           D1E8                       shr	ax,*1
18619                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18620 4746           0246         04            add	al,4[bp]
18621 4749           80D4                   00  adc	ah,*0
18622                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18623 474C           8946         FC            mov	-4[bp],ax
18624                                           !BCC_EOS
18625                                           ! 2037  for(i=0;i<cheight;i++)
18626                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18627 474F           30C0                       xor	al,al
18628 4751           8846         FB            mov	-5[bp],al
18629                                           !BCC_EOS
18630                                           !BCC_EOS
18631                                           ! 2038   {
18632 4754           E9         00A8            br 	.B2
18633                       00004757            .B3:
18634                                           ! 2039    if (i & 1)
18635                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18636 4757           8A46         FB            mov	al,-5[bp]
18637 475A           24                     01  and	al,*1
18638 475C           84C0                       test	al,al
18639 475E           74           56            je  	.B4
18640                       00004760            .B5:
18641                                           ! 2040      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18642                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18643 4760           8A46         0A            mov	al,$A[bp]
18644 4763           30E4                       xor	ah,ah
18645 4765           50                         push	ax
18646                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18647 4766           8A46         FB            mov	al,-5[bp]
18648 4769           30E4                       xor	ah,ah
18649 476B           D1E8                       shr	ax,*1
18650                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18651 476D           89C3                       mov	bx,ax
18652 476F           8A46         0C            mov	al,$C[bp]
18653 4772           30E4                       xor	ah,ah
18654 4774           93                         xchg	ax,bx
18655 4775           89D9                       mov	cx,bx
18656 4777           F7E9                       imul	cx
18657 4779           50                         push	ax
18658                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18659                                           ! Debug: expression subtree swapping
18660 477A           8B46         FE            mov	ax,-2[bp]
18661                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18662 477D           05                   2000  add	ax,#$2000
18663 4780           0346         F6            add	ax,-$A[bp]
18664 4783           44                         inc	sp
18665 4784           44                         inc	sp
18666                                           ! Debug: list unsigned int = ax+0 (used reg = )
18667 4785           50                         push	ax
18668                                           ! Debug: list unsigned int = const $B800 (used reg = )
18669 4786           B8                   B800  mov	ax,#$B800
18670 4789           50                         push	ax
18671                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18672 478A           8A46         FB            mov	al,-5[bp]
18673 478D           30E4                       xor	ah,ah
18674 478F           D1E8                       shr	ax,*1
18675                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18676 4791           89C3                       mov	bx,ax
18677 4793           8A46         0C            mov	al,$C[bp]
18678 4796           30E4                       xor	ah,ah
18679 4798           93                         xchg	ax,bx
18680 4799           89D9                       mov	cx,bx
18681 479B           F7E9                       imul	cx
18682 479D           50                         push	ax
18683                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18684                                           ! Debug: expression subtree swapping
18685 479E           8B46         FC            mov	ax,-4[bp]
18686                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18687 47A1           05                   2000  add	ax,#$2000
18688 47A4           0346         F2            add	ax,-$E[bp]
18689 47A7           44                         inc	sp
18690 47A8           44                         inc	sp
18691                                           ! Debug: list unsigned int = ax+0 (used reg = )
18692 47A9           50                         push	ax
18693                                           ! Debug: list unsigned int = const $B800 (used reg = )
18694 47AA           B8                   B800  mov	ax,#$B800
18695 47AD           50                         push	ax
18696                                           ! Debug: func () void = memcpyb+0 (used reg = )
18697 47AE           E8         348E            call	_memcpyb
18698 47B1           83C4                   0A  add	sp,*$A
18699                                           !BCC_EOS
18700                                           ! 2041    else
18701                                           ! 2042      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18702 47B4           EB           42            jmp .B6
18703                       000047B6            .B4:
18704                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18705 47B6           8A46         0A            mov	al,$A[bp]
18706 47B9           30E4                       xor	ah,ah
18707 47BB           50                         push	ax
18708                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18709 47BC           8A46         FB            mov	al,-5[bp]
18710 47BF           30E4                       xor	ah,ah
18711 47C1           D1E8                       shr	ax,*1
18712                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18713 47C3           89C3                       mov	bx,ax
18714 47C5           8A46         0C            mov	al,$C[bp]
18715 47C8           30E4                       xor	ah,ah
18716 47CA           93                         xchg	ax,bx
18717 47CB           89D9                       mov	cx,bx
18718 47CD           F7E9                       imul	cx
18719                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18720                                           ! Debug: expression subtree swapping
18721 47CF           0346         FE            add	ax,-2[bp]
18722                                           ! Debug: list unsigned int = ax+0 (used reg = )
18723 47D2           50                         push	ax
18724                                           ! Debug: list unsigned int = const $B800 (used reg = )
18725 47D3           B8                   B800  mov	ax,#$B800
18726 47D6           50                         push	ax
18727                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18728 47D7           8A46         FB            mov	al,-5[bp]
18729 47DA           30E4                       xor	ah,ah
18730 47DC           D1E8                       shr	ax,*1
18731                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18732 47DE           89C3                       mov	bx,ax
18733 47E0           8A46         0C            mov	al,$C[bp]
18734 47E3           30E4                       xor	ah,ah
18735 47E5           93                         xchg	ax,bx
18736 47E6           89D9                       mov	cx,bx
18737 47E8           F7E9                       imul	cx
18738                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18739                                           ! Debug: expression subtree swapping
18740 47EA           0346         FC            add	ax,-4[bp]
18741                                           ! Debug: list unsigned int = ax+0 (used reg = )
18742 47ED           50                         push	ax
18743                                           ! Debug: list unsigned int = const $B800 (used reg = )
18744 47EE           B8                   B800  mov	ax,#$B800
18745 47F1           50                         push	ax
18746                                           ! Debug: func () void = memcpyb+0 (used reg = )
18747 47F2           E8         344A            call	_memcpyb
18748 47F5           83C4                   0A  add	sp,*$A
18749                                           !BCC_EOS
18750                                           ! 2043   }
18751                       000047F8            .B6:
18752                                           ! 2044 }
18753                       000047F8            .B1:
18754                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18755 47F8           8A46         FB            mov	al,-5[bp]
18756 47FB           40                         inc	ax
18757 47FC           8846         FB            mov	-5[bp],al
18758                       000047FF            .B2:
18759                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18760 47FF           8A46         FB            mov	al,-5[bp]
18761 4802           3A46         0E            cmp	al,$E[bp]
18762 4805   7303    E9         FF4D            blo 	.B3
18763                       0000480A            .B7:
18764                       0000480A            .B0:
18765 480A           89EC                       mov	sp,bp
18766 480C           5D                         pop	bp
18767 480D           C3                         ret
18768                                           ! 2045 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18769                                           ! Register BX used in function vgamem_copy_cga
18770                                           ! 2046 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18771                       0000480E            _vgamem_fill_cga:
18772                                           !BCC_EOS
18773                                           !BCC_EOS
18774                                           !BCC_EOS
18775                                           !BCC_EOS
18776                                           !BCC_EOS
18777                                           !BCC_EOS
18778                                           ! 2047 {
18779                                           ! 2048  Bit16u dest;
18780                                           !BCC_EOS
18781                                           ! 2049  Bit8u i;
18782                                           !BCC_EOS
18783                                           ! 2050  dest=((ystart*cheight*nbcols)>>1)+xstart;
18784 480E           55                         push	bp
18785 480F           89E5                       mov	bp,sp
18786 4811           83C4                   FC  add	sp,*-4
18787                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18788 4814           8A46         0C            mov	al,$C[bp]
18789 4817           30E4                       xor	ah,ah
18790 4819           89C3                       mov	bx,ax
18791 481B           8A46         06            mov	al,6[bp]
18792 481E           30E4                       xor	ah,ah
18793 4820           89D9                       mov	cx,bx
18794 4822           F7E9                       imul	cx
18795                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18796 4824           89C3                       mov	bx,ax
18797 4826           8A46         0A            mov	al,$A[bp]
18798 4829           30E4                       xor	ah,ah
18799 482B           93                         xchg	ax,bx
18800 482C           89D9                       mov	cx,bx
18801 482E           F7E9                       imul	cx
18802                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18803 4830           D1E8                       shr	ax,*1
18804                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18805 4832           0246         04            add	al,4[bp]
18806 4835           80D4                   00  adc	ah,*0
18807                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18808 4838           8946         FE            mov	-2[bp],ax
18809                                           !BCC_EOS
18810                                           ! 2051  for(i=0;i<cheight;i++)
18811                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18812 483B           30C0                       xor	al,al
18813 483D           8846         FD            mov	-3[bp],al
18814                                           !BCC_EOS
18815                                           !BCC_EOS
18816                                           ! 2052   {
18817 4840           EB           75            jmp .BA
18818                       00004842            .BB:
18819                                           ! 2053    if (i & 1)
18820                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18821 4842           8A46         FD            mov	al,-3[bp]
18822 4845           24                     01  and	al,*1
18823 4847           84C0                       test	al,al
18824 4849           74           38            je  	.BC
18825                       0000484B            .BD:
18826                                           ! 2054      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18827                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18828 484B           8A46         08            mov	al,8[bp]
18829 484E           30E4                       xor	ah,ah
18830 4850           50                         push	ax
18831                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18832 4851           8A46         0E            mov	al,$E[bp]
18833 4854           30E4                       xor	ah,ah
18834 4856           50                         push	ax
18835                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18836 4857           8A46         FD            mov	al,-3[bp]
18837 485A           30E4                       xor	ah,ah
18838 485C           D1E8                       shr	ax,*1
18839                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18840 485E           89C3                       mov	bx,ax
18841 4860           8A46         0A            mov	al,$A[bp]
18842 4863           30E4                       xor	ah,ah
18843 4865           93                         xchg	ax,bx
18844 4866           89D9                       mov	cx,bx
18845 4868           F7E9                       imul	cx
18846 486A           50                         push	ax
18847                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18848                                           ! Debug: expression subtree swapping
18849 486B           8B46         FE            mov	ax,-2[bp]
18850                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18851 486E           05                   2000  add	ax,#$2000
18852 4871           0346         F6            add	ax,-$A[bp]
18853 4874           44                         inc	sp
18854 4875           44                         inc	sp
18855                                           ! Debug: list unsigned int = ax+0 (used reg = )
18856 4876           50                         push	ax
18857                                           ! Debug: list unsigned int = const $B800 (used reg = )
18858 4877           B8                   B800  mov	ax,#$B800
18859 487A           50                         push	ax
18860                                           ! Debug: func () void = memsetb+0 (used reg = )
18861 487B           E8         3377            call	_memsetb
18862 487E           83C4                   08  add	sp,*8
18863                                           !BCC_EOS
18864                                           ! 2055    else
18865                                           ! 2056      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18866 4881           EB           2D            jmp .BE
18867                       00004883            .BC:
18868                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18869 4883           8A46         08            mov	al,8[bp]
18870 4886           30E4                       xor	ah,ah
18871 4888           50                         push	ax
18872                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18873 4889           8A46         0E            mov	al,$E[bp]
18874 488C           30E4                       xor	ah,ah
18875 488E           50                         push	ax
18876                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18877 488F           8A46         FD            mov	al,-3[bp]
18878 4892           30E4                       xor	ah,ah
18879 4894           D1E8                       shr	ax,*1
18880                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18881 4896           89C3                       mov	bx,ax
18882 4898           8A46         0A            mov	al,$A[bp]
18883 489B           30E4                       xor	ah,ah
18884 489D           93                         xchg	ax,bx
18885 489E           89D9                       mov	cx,bx
18886 48A0           F7E9                       imul	cx
18887                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18888                                           ! Debug: expression subtree swapping
18889 48A2           0346         FE            add	ax,-2[bp]
18890                                           ! Debug: list unsigned int = ax+0 (used reg = )
18891 48A5           50                         push	ax
18892                                           ! Debug: list unsigned int = const $B800 (used reg = )
18893 48A6           B8                   B800  mov	ax,#$B800
18894 48A9           50                         push	ax
18895                                           ! Debug: func () void = memsetb+0 (used reg = )
18896 48AA           E8         3348            call	_memsetb
18897 48AD           83C4                   08  add	sp,*8
18898                                           !BCC_EOS
18899                                           ! 2057   }
18900                       000048B0            .BE:
18901                                           ! 2058 }
18902                       000048B0            .B9:
18903                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18904 48B0           8A46         FD            mov	al,-3[bp]
18905 48B3           40                         inc	ax
18906 48B4           8846         FD            mov	-3[bp],al
18907                       000048B7            .BA:
18908                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18909 48B7           8A46         FD            mov	al,-3[bp]
18910 48BA           3A46         0C            cmp	al,$C[bp]
18911 48BD           72           83            jb 	.BB
18912                       000048BF            .BF:
18913                       000048BF            .B8:
18914 48BF           89EC                       mov	sp,bp
18915 48C1           5D                         pop	bp
18916 48C2           C3                         ret
18917                                           ! 2059 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18918                                           ! Register BX used in function vgamem_fill_cga
18919                                           ! 2060 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18920                       000048C3            _biosfn_scroll:
18921                                           !BCC_EOS
18922                                           !BCC_EOS
18923                                           !BCC_EOS
18924                                           !BCC_EOS
18925                                           !BCC_EOS
18926                                           !BCC_EOS
18927                                           !BCC_EOS
18928                                           !BCC_EOS
18929                                           ! 2061 {
18930                                           ! 2062  Bit8u mode,line,cheight,bpp,cols;
18931                                           !BCC_EOS
18932                                           ! 2063  Bit16u nbcols,nbrows,i;
18933                                           !BCC_EOS
18934                                           ! 2064  Bit16u address;
18935                                           !BCC_EOS
18936                                           ! 2065  if(rul>rlr)return;
18937 48C3           55                         push	bp
18938 48C4           89E5                       mov	bp,sp
18939 48C6           83C4                   F2  add	sp,*-$E
18940                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18941 48C9           8A46         08            mov	al,8[bp]
18942 48CC           3A46         0C            cmp	al,$C[bp]
18943 48CF           76           04            jbe 	.C0
18944                       000048D1            .C1:
18945 48D1           89EC                       mov	sp,bp
18946 48D3           5D                         pop	bp
18947 48D4           C3                         ret
18948                                           !BCC_EOS
18949                                           ! 2066  if(cul>clr)return;
18950                       000048D5            .C0:
18951                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18952 48D5           8A46         0A            mov	al,$A[bp]
18953 48D8           3A46         0E            cmp	al,$E[bp]
18954 48DB           76           04            jbe 	.C2
18955                       000048DD            .C3:
18956 48DD           89EC                       mov	sp,bp
18957 48DF           5D                         pop	bp
18958 48E0           C3                         ret
18959                                           !BCC_EOS
18960                                           ! 2067  mode=read_byte(0x40,0x49);
18961                       000048E1            .C2:
18962                                           ! Debug: list int = const $49 (used reg = )
18963 48E1           B8                   0049  mov	ax,*$49
18964 48E4           50                         push	ax
18965                                           ! Debug: list int = const $40 (used reg = )
18966 48E5           B8                   0040  mov	ax,*$40
18967 48E8           50                         push	ax
18968                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18969 48E9           E8         33B3            call	_read_byte
18970 48EC           83C4                   04  add	sp,*4
18971                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
18972 48EF           8846         FF            mov	-1[bp],al
18973                                           !BCC_EOS
18974                                           ! 2068  line=find_vga_entry(mode);
18975                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
18976 48F2           8A46         FF            mov	al,-1[bp]
18977 48F5           30E4                       xor	ah,ah
18978 48F7           50                         push	ax
18979                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18980 48F8           E8         32B8            call	_find_vga_entry
18981 48FB           44                         inc	sp
18982 48FC           44                         inc	sp
18983                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
18984 48FD           8846         FE            mov	-2[bp],al
18985                                           !BCC_EOS
18986                                           ! 2069  if(line==0xFF)return;
18987                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
18988 4900           8A46         FE            mov	al,-2[bp]
18989 4903           3C                     FF  cmp	al,#$FF
18990 4905           75           04            jne 	.C4
18991                       00004907            .C5:
18992 4907           89EC                       mov	sp,bp
18993 4909           5D                         pop	bp
18994 490A           C3                         ret
18995                                           !BCC_EOS
18996                                           ! 2070  nbrows=read_byte(0x40,0x84)+1;
18997                       0000490B            .C4:
18998                                           ! Debug: list int = const $84 (used reg = )
18999 490B           B8                   0084  mov	ax,#$84
19000 490E           50                         push	ax
19001                                           ! Debug: list int = const $40 (used reg = )
19002 490F           B8                   0040  mov	ax,*$40
19003 4912           50                         push	ax
19004                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19005 4913           E8         3389            call	_read_byte
19006 4916           83C4                   04  add	sp,*4
19007                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19008 4919           30E4                       xor	ah,ah
19009                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19010 491B           40                         inc	ax
19011 491C           8946         F6            mov	-$A[bp],ax
19012                                           !BCC_EOS
19013                                           ! 2071  nbcols=read_word(0x40,0x4A);
19014                                           ! Debug: list int = const $4A (used reg = )
19015 491F           B8                   004A  mov	ax,*$4A
19016 4922           50                         push	ax
19017                                           ! Debug: list int = const $40 (used reg = )
19018 4923           B8                   0040  mov	ax,*$40
19019 4926           50                         push	ax
19020                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19021 4927           E8         3388            call	_read_word
19022 492A           83C4                   04  add	sp,*4
19023                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19024 492D           8946         F8            mov	-8[bp],ax
19025                                           !BCC_EOS
19026                                           ! 2072  if(page==0xFF)
19027                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19028 4930           8A46         10            mov	al,$10[bp]
19029 4933           3C                     FF  cmp	al,#$FF
19030 4935           75           11            jne 	.C6
19031                       00004937            .C7:
19032                                           ! 2073   page=read_byte(0x40,0x62);
19033                                           ! Debug: list int = const $62 (used reg = )
19034 4937           B8                   0062  mov	ax,*$62
19035 493A           50                         push	ax
19036                                           ! Debug: list int = const $40 (used reg = )
19037 493B           B8                   0040  mov	ax,*$40
19038 493E           50                         push	ax
19039                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19040 493F           E8         335D            call	_read_byte
19041 4942           83C4                   04  add	sp,*4
19042                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19043 4945           8846         10            mov	$10[bp],al
19044                                           !BCC_EOS
19045                                           ! 2074  if(rlr>=nbrows)rlr=nbrows-1;
19046                       00004948            .C6:
19047                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19048 4948           8A46         0C            mov	al,$C[bp]
19049 494B           30E4                       xor	ah,ah
19050 494D           3B46         F6            cmp	ax,-$A[bp]
19051 4950           72           07            jb  	.C8
19052                       00004952            .C9:
19053                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19054 4952           8B46         F6            mov	ax,-$A[bp]
19055                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19056 4955           48                         dec	ax
19057 4956           8846         0C            mov	$C[bp],al
19058                                           !BCC_EOS
19059                                           ! 2075  if(clr>=nbcols)clr=nbcols-1;
19060                       00004959            .C8:
19061                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19062 4959           8A46         0E            mov	al,$E[bp]
19063 495C           30E4                       xor	ah,ah
19064 495E           3B46         F8            cmp	ax,-8[bp]
19065 4961           72           07            jb  	.CA
19066                       00004963            .CB:
19067                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19068 4963           8B46         F8            mov	ax,-8[bp]
19069                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19070 4966           48                         dec	ax
19071 4967           8846         0E            mov	$E[bp],al
19072                                           !BCC_EOS
19073                                           ! 2076  if(nblines>nbrows)nblines=0;
19074                       0000496A            .CA:
19075                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19076 496A           8A46         04            mov	al,4[bp]
19077 496D           30E4                       xor	ah,ah
19078 496F           3B46         F6            cmp	ax,-$A[bp]
19079 4972           76           05            jbe 	.CC
19080                       00004974            .CD:
19081                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19082 4974           30C0                       xor	al,al
19083 4976           8846         04            mov	4[bp],al
19084                                           !BCC_EOS
19085                                           ! 2077  cols=clr-cul+1;
19086                       00004979            .CC:
19087                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19088 4979           8A46         0E            mov	al,$E[bp]
19089 497C           30E4                       xor	ah,ah
19090 497E           2A46         0A            sub	al,$A[bp]
19091 4981           80DC                   00  sbb	ah,*0
19092                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19093                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19094 4984           40                         inc	ax
19095 4985           8846         FB            mov	-5[bp],al
19096                                           !BCC_EOS
19097                                           ! 2078  if(vga_modes[line].class==0x00)
19098                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19099 4988           8A46         FE            mov	al,-2[bp]
19100 498B           30E4                       xor	ah,ah
19101 498D           B1                     03  mov	cl,*3
19102 498F           D3E0                       shl	ax,cl
19103 4991           89C3                       mov	bx,ax
19104 4993           81C3                 01C4  add	bx,#_vga_modes
19105                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19106 4997           8A47         01            mov	al,1[bx]
19107 499A           84C0                       test	al,al
19108 499C   7403    E9         026C            bne 	.CE
19109                       000049A1            .CF:
19110                                           ! 2079   {
19111                                           ! 2080    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19112                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19113 49A1           8B46         F8            mov	ax,-8[bp]
19114 49A4           8B4E         F6            mov	cx,-$A[bp]
19115 49A7           F7E9                       imul	cx
19116                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19117 49A9           D1E0                       shl	ax,*1
19118                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19119 49AB           0C                     FF  or	al,#$FF
19120                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19121                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19122 49AD           89C3                       mov	bx,ax
19123 49AF           8A46         10            mov	al,$10[bp]
19124 49B2           30E4                       xor	ah,ah
19125 49B4           93                         xchg	ax,bx
19126 49B5           40                         inc	ax
19127 49B6           89D9                       mov	cx,bx
19128 49B8           F7E9                       imul	cx
19129                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19130 49BA           8946         F2            mov	-$E[bp],ax
19131                                           !BCC_EOS
19132                                           ! 2081    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19133                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19134 49BD           8A46         10            mov	al,$10[bp]
19135 49C0           30E4                       xor	ah,ah
19136 49C2           50                         push	ax
19137                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19138 49C3           FF76         F8            push	-8[bp]
19139                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19140 49C6           FF76         F6            push	-$A[bp]
19141                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19142 49C9           FF76         F2            push	-$E[bp]
19143                                           ! Debug: list * char = .D0+0 (used reg = )
19144 49CC           BB                   7F02  mov	bx,#.D0
19145 49CF           53                         push	bx
19146                                           ! Debug: func () void = printf+0 (used reg = )
19147 49D0           E8         3377            call	_printf
19148 49D3           83C4                   0A  add	sp,*$A
19149                                           !BCC_EOS
19150                                           ! 2082    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19151                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19152 49D6           8A46         04            mov	al,4[bp]
19153 49D9           84C0                       test	al,al
19154 49DB           75           67            jne 	.D1
19155                       000049DD            .D6:
19156                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19157 49DD           8A46         08            mov	al,8[bp]
19158 49E0           84C0                       test	al,al
19159 49E2           75           60            jne 	.D1
19160                       000049E4            .D5:
19161                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19162 49E4           8A46         0A            mov	al,$A[bp]
19163 49E7           84C0                       test	al,al
19164 49E9           75           59            jne 	.D1
19165                       000049EB            .D4:
19166                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19167 49EB           8B46         F6            mov	ax,-$A[bp]
19168                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19169                                           ! Debug: expression subtree swapping
19170 49EE           48                         dec	ax
19171 49EF           50                         push	ax
19172 49F0           8A46         0C            mov	al,$C[bp]
19173 49F3           30E4                       xor	ah,ah
19174 49F5           3B46         F0            cmp	ax,-$10[bp]
19175 49F8           8D66         F2            lea	sp,-$E[bp]
19176 49FB           75           47            jne 	.D1
19177                       000049FD            .D3:
19178                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19179 49FD           8B46         F8            mov	ax,-8[bp]
19180                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19181                                           ! Debug: expression subtree swapping
19182 4A00           48                         dec	ax
19183 4A01           50                         push	ax
19184 4A02           8A46         0E            mov	al,$E[bp]
19185 4A05           30E4                       xor	ah,ah
19186 4A07           3B46         F0            cmp	ax,-$10[bp]
19187 4A0A           8D66         F2            lea	sp,-$E[bp]
19188 4A0D           75           35            jne 	.D1
19189                       00004A0F            .D2:
19190                                           ! 2083     {
19191                                           ! 2084      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19192                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19193 4A0F           8B46         F6            mov	ax,-$A[bp]
19194 4A12           8B4E         F8            mov	cx,-8[bp]
19195 4A15           F7E9                       imul	cx
19196                                           ! Debug: list unsigned int = ax+0 (used reg = )
19197 4A17           50                         push	ax
19198                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19199 4A18           8A46         06            mov	al,6[bp]
19200 4A1B           30E4                       xor	ah,ah
19201                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19202 4A1D           B9                   0100  mov	cx,#$100
19203 4A20           F7E9                       imul	cx
19204                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19205                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19206 4A22           05                   0020  add	ax,*$20
19207 4A25           50                         push	ax
19208                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19209 4A26           FF76         F2            push	-$E[bp]
19210                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19211 4A29           8A46         FE            mov	al,-2[bp]
19212 4A2C           30E4                       xor	ah,ah
19213 4A2E           B1                     03  mov	cl,*3
19214 4A30           D3E0                       shl	ax,cl
19215 4A32           89C3                       mov	bx,ax
19216 4A34           81C3                 01C4  add	bx,#_vga_modes
19217                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19218 4A38           FF77         04            push	4[bx]
19219                                           ! Debug: func () void = memsetw+0 (used reg = )
19220 4A3B           E8         31DC            call	_memsetw
19221 4A3E           83C4                   08  add	sp,*8
19222                                           !BCC_EOS
19223                                           ! 2085     }
19224                                           ! 2086    else
19225                                           ! 2087     {
19226 4A41           E9         01C6            br 	.D7
19227                       00004A44            .D1:
19228                                           ! 2088      if(dir==1)
19229                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19230 4A44           8A46         12            mov	al,$12[bp]
19231 4A47           3C                     01  cmp	al,*1
19232 4A49   7403    E9         00DD            bne 	.D8
19233                       00004A4E            .D9:
19234                                           ! 2089       {for(i=rul;i<=rlr;i++)
19235                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19236 4A4E           8A46         08            mov	al,8[bp]
19237 4A51           30E4                       xor	ah,ah
19238 4A53           8946         F4            mov	-$C[bp],ax
19239                                           !BCC_EOS
19240                                           !BCC_EOS
19241                                           ! 2090         {
19242 4A56           E9         00C2            br 	.DC
19243                       00004A59            .DD:
19244                                           ! 2091          if((i+nblines>rlr)||(nblines==0))
19245                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19246 4A59           8B46         F4            mov	ax,-$C[bp]
19247 4A5C           0246         04            add	al,4[bp]
19248 4A5F           80D4                   00  adc	ah,*0
19249                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19250 4A62           50                         push	ax
19251 4A63           8A46         0C            mov	al,$C[bp]
19252 4A66           30E4                       xor	ah,ah
19253 4A68           3B46         F0            cmp	ax,-$10[bp]
19254 4A6B           8D66         F2            lea	sp,-$E[bp]
19255 4A6E           72           07            jb  	.DF
19256                       00004A70            .E0:
19257                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19258 4A70           8A46         04            mov	al,4[bp]
19259 4A73           84C0                       test	al,al
19260 4A75           75           42            jne 	.DE
19261                       00004A77            .DF:
19262                                           ! 2092           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19263                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19264 4A77           8A46         FB            mov	al,-5[bp]
19265 4A7A           30E4                       xor	ah,ah
19266 4A7C           50                         push	ax
19267                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19268 4A7D           8A46         06            mov	al,6[bp]
19269 4A80           30E4                       xor	ah,ah
19270                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19271 4A82           B9                   0100  mov	cx,#$100
19272 4A85           F7E9                       imul	cx
19273                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19274                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19275 4A87           05                   0020  add	ax,*$20
19276 4A8A           50                         push	ax
19277                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19278 4A8B           8B46         F4            mov	ax,-$C[bp]
19279 4A8E           8B4E         F8            mov	cx,-8[bp]
19280 4A91           F7E9                       imul	cx
19281                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19282 4A93           0246         0A            add	al,$A[bp]
19283 4A96           80D4                   00  adc	ah,*0
19284                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19285 4A99           D1E0                       shl	ax,*1
19286                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19287                                           ! Debug: expression subtree swapping
19288 4A9B           0346         F2            add	ax,-$E[bp]
19289                                           ! Debug: list unsigned int = ax+0 (used reg = )
19290 4A9E           50                         push	ax
19291                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19292 4A9F           8A46         FE            mov	al,-2[bp]
19293 4AA2           30E4                       xor	ah,ah
19294 4AA4           B1                     03  mov	cl,*3
19295 4AA6           D3E0                       shl	ax,cl
19296 4AA8           89C3                       mov	bx,ax
19297 4AAA           81C3                 01C4  add	bx,#_vga_modes
19298                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19299 4AAE           FF77         04            push	4[bx]
19300                                           ! Debug: func () void = memsetw+0 (used reg = )
19301 4AB1           E8         3166            call	_memsetw
19302 4AB4           83C4                   08  add	sp,*8
19303                                           !BCC_EOS
19304                                           ! 2093          else
19305                                           ! 2094           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19306 4AB7           EB           5B            jmp .E1
19307                       00004AB9            .DE:
19308                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19309 4AB9           8A46         FB            mov	al,-5[bp]
19310 4ABC           30E4                       xor	ah,ah
19311 4ABE           50                         push	ax
19312                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19313 4ABF           8B46         F4            mov	ax,-$C[bp]
19314 4AC2           0246         04            add	al,4[bp]
19315 4AC5           80D4                   00  adc	ah,*0
19316                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19317 4AC8           8B4E         F8            mov	cx,-8[bp]
19318 4ACB           F7E9                       imul	cx
19319                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19320 4ACD           0246         0A            add	al,$A[bp]
19321 4AD0           80D4                   00  adc	ah,*0
19322                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19323 4AD3           D1E0                       shl	ax,*1
19324                                           ! Debug: list unsigned int = ax+0 (used reg = )
19325 4AD5           50                         push	ax
19326                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19327 4AD6           8A46         FE            mov	al,-2[bp]
19328 4AD9           30E4                       xor	ah,ah
19329 4ADB           B1                     03  mov	cl,*3
19330 4ADD           D3E0                       shl	ax,cl
19331 4ADF           89C3                       mov	bx,ax
19332 4AE1           81C3                 01C4  add	bx,#_vga_modes
19333                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19334 4AE5           FF77         04            push	4[bx]
19335                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19336 4AE8           8B46         F4            mov	ax,-$C[bp]
19337 4AEB           8B4E         F8            mov	cx,-8[bp]
19338 4AEE           F7E9                       imul	cx
19339                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19340 4AF0           0246         0A            add	al,$A[bp]
19341 4AF3           80D4                   00  adc	ah,*0
19342                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19343 4AF6           D1E0                       shl	ax,*1
19344                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19345                                           ! Debug: expression subtree swapping
19346 4AF8           0346         F2            add	ax,-$E[bp]
19347                                           ! Debug: list unsigned int = ax+0 (used reg = )
19348 4AFB           50                         push	ax
19349                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19350 4AFC           8A46         FE            mov	al,-2[bp]
19351 4AFF           30E4                       xor	ah,ah
19352 4B01           B1                     03  mov	cl,*3
19353 4B03           D3E0                       shl	ax,cl
19354 4B05           89C3                       mov	bx,ax
19355 4B07           81C3                 01C4  add	bx,#_vga_modes
19356                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19357 4B0B           FF77         04            push	4[bx]
19358                                           ! Debug: func () void = memcpyw+0 (used reg = )
19359 4B0E           E8         315E            call	_memcpyw
19360 4B11           83C4                   0A  add	sp,*$A
19361                                           !BCC_EOS
19362                                           ! 2095         }
19363                       00004B14            .E1:
19364                                           ! 2096       }
19365                       00004B14            .DB:
19366                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19367 4B14           8B46         F4            mov	ax,-$C[bp]
19368 4B17           40                         inc	ax
19369 4B18           8946         F4            mov	-$C[bp],ax
19370                       00004B1B            .DC:
19371                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19372 4B1B           8A46         0C            mov	al,$C[bp]
19373 4B1E           30E4                       xor	ah,ah
19374 4B20           3B46         F4            cmp	ax,-$C[bp]
19375 4B23   7203    E9         FF31            bhis	.DD
19376                       00004B28            .E2:
19377                       00004B28            .DA:
19378                                           ! 2097      else
19379                                           ! 2098       {for(i=rlr;i>=rul;i--)
19380 4B28           E9         00DF            br 	.E3
19381                       00004B2B            .D8:
19382                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19383 4B2B           8A46         0C            mov	al,$C[bp]
19384 4B2E           30E4                       xor	ah,ah
19385 4B30           8946         F4            mov	-$C[bp],ax
19386                                           !BCC_EOS
19387                                           !BCC_EOS
19388                                           ! 2099         {
19389 4B33           E9         00C7            br 	.E6
19390                       00004B36            .E7:
19391                                           ! 2100          if((i<rul+nblines)||(nblines==0))
19392                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19393 4B36           8A46         08            mov	al,8[bp]
19394 4B39           30E4                       xor	ah,ah
19395 4B3B           0246         04            add	al,4[bp]
19396 4B3E           80D4                   00  adc	ah,*0
19397                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19398 4B41           3B46         F4            cmp	ax,-$C[bp]
19399 4B44           77           07            ja  	.E9
19400                       00004B46            .EA:
19401                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19402 4B46           8A46         04            mov	al,4[bp]
19403 4B49           84C0                       test	al,al
19404 4B4B           75           42            jne 	.E8
19405                       00004B4D            .E9:
19406                                           ! 2101           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+'
19407                                           ! 2101  ',cols);
19408                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19409 4B4D           8A46         FB            mov	al,-5[bp]
19410 4B50           30E4                       xor	ah,ah
19411 4B52           50                         push	ax
19412                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19413 4B53           8A46         06            mov	al,6[bp]
19414 4B56           30E4                       xor	ah,ah
19415                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19416 4B58           B9                   0100  mov	cx,#$100
19417 4B5B           F7E9                       imul	cx
19418                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19419                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19420 4B5D           05                   0020  add	ax,*$20
19421 4B60           50                         push	ax
19422                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19423 4B61           8B46         F4            mov	ax,-$C[bp]
19424 4B64           8B4E         F8            mov	cx,-8[bp]
19425 4B67           F7E9                       imul	cx
19426                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19427 4B69           0246         0A            add	al,$A[bp]
19428 4B6C           80D4                   00  adc	ah,*0
19429                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19430 4B6F           D1E0                       shl	ax,*1
19431                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19432                                           ! Debug: expression subtree swapping
19433 4B71           0346         F2            add	ax,-$E[bp]
19434                                           ! Debug: list unsigned int = ax+0 (used reg = )
19435 4B74           50                         push	ax
19436                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19437 4B75           8A46         FE            mov	al,-2[bp]
19438 4B78           30E4                       xor	ah,ah
19439 4B7A           B1                     03  mov	cl,*3
19440 4B7C           D3E0                       shl	ax,cl
19441 4B7E           89C3                       mov	bx,ax
19442 4B80           81C3                 01C4  add	bx,#_vga_modes
19443                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19444 4B84           FF77         04            push	4[bx]
19445                                           ! Debug: func () void = memsetw+0 (used reg = )
19446 4B87           E8         3090            call	_memsetw
19447 4B8A           83C4                   08  add	sp,*8
19448                                           !BCC_EOS
19449                                           ! 2102          else
19450                                           ! 2103           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19451 4B8D           EB           5B            jmp .EB
19452                       00004B8F            .E8:
19453                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19454 4B8F           8A46         FB            mov	al,-5[bp]
19455 4B92           30E4                       xor	ah,ah
19456 4B94           50                         push	ax
19457                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19458 4B95           8B46         F4            mov	ax,-$C[bp]
19459 4B98           2A46         04            sub	al,4[bp]
19460 4B9B           80DC                   00  sbb	ah,*0
19461                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19462 4B9E           8B4E         F8            mov	cx,-8[bp]
19463 4BA1           F7E9                       imul	cx
19464                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19465 4BA3           0246         0A            add	al,$A[bp]
19466 4BA6           80D4                   00  adc	ah,*0
19467                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19468 4BA9           D1E0                       shl	ax,*1
19469                                           ! Debug: list unsigned int = ax+0 (used reg = )
19470 4BAB           50                         push	ax
19471                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19472 4BAC           8A46         FE            mov	al,-2[bp]
19473 4BAF           30E4                       xor	ah,ah
19474 4BB1           B1                     03  mov	cl,*3
19475 4BB3           D3E0                       shl	ax,cl
19476 4BB5           89C3                       mov	bx,ax
19477 4BB7           81C3                 01C4  add	bx,#_vga_modes
19478                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19479 4BBB           FF77         04            push	4[bx]
19480                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19481 4BBE           8B46         F4            mov	ax,-$C[bp]
19482 4BC1           8B4E         F8            mov	cx,-8[bp]
19483 4BC4           F7E9                       imul	cx
19484                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19485 4BC6           0246         0A            add	al,$A[bp]
19486 4BC9           80D4                   00  adc	ah,*0
19487                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19488 4BCC           D1E0                       shl	ax,*1
19489                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19490                                           ! Debug: expression subtree swapping
19491 4BCE           0346         F2            add	ax,-$E[bp]
19492                                           ! Debug: list unsigned int = ax+0 (used reg = )
19493 4BD1           50                         push	ax
19494                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19495 4BD2           8A46         FE            mov	al,-2[bp]
19496 4BD5           30E4                       xor	ah,ah
19497 4BD7           B1                     03  mov	cl,*3
19498 4BD9           D3E0                       shl	ax,cl
19499 4BDB           89C3                       mov	bx,ax
19500 4BDD           81C3                 01C4  add	bx,#_vga_modes
19501                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19502 4BE1           FF77         04            push	4[bx]
19503                                           ! Debug: func () void = memcpyw+0 (used reg = )
19504 4BE4           E8         3088            call	_memcpyw
19505 4BE7           83C4                   0A  add	sp,*$A
19506                                           !BCC_EOS
19507                                           ! 2104          if (i>rlr) break;
19508                       00004BEA            .EB:
19509                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19510 4BEA           8A46         0C            mov	al,$C[bp]
19511 4BED           30E4                       xor	ah,ah
19512 4BEF           3B46         F4            cmp	ax,-$C[bp]
19513 4BF2           73           02            jae 	.EC
19514                       00004BF4            .ED:
19515 4BF4           EB           14            jmp .E4
19516                                           !BCC_EOS
19517                                           ! 2105         }
19518                       00004BF6            .EC:
19519                                           ! 2106       }
19520                       00004BF6            .E5:
19521                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19522 4BF6           8B46         F4            mov	ax,-$C[bp]
19523 4BF9           48                         dec	ax
19524 4BFA           8946         F4            mov	-$C[bp],ax
19525                       00004BFD            .E6:
19526                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19527 4BFD           8A46         08            mov	al,8[bp]
19528 4C00           30E4                       xor	ah,ah
19529 4C02           3B46         F4            cmp	ax,-$C[bp]
19530 4C05   7703    E9         FF2C            blos	.E7
19531                       00004C0A            .EE:
19532                       00004C0A            .E4:
19533                                           ! 2107     }
19534                       00004C0A            .E3:
19535                                           ! 2108   }
19536                       00004C0A            .D7:
19537                                           ! 2109  else
19538                                           ! 2110   {
19539 4C0A           E9         03ED            br 	.EF
19540                       00004C0D            .CE:
19541                                           ! 2111    cheight=video_param_table[line_to_vpti[line]].cheight;
19542                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19543 4C0D           8A46         FE            mov	al,-2[bp]
19544 4C10           30E4                       xor	ah,ah
19545 4C12           89C3                       mov	bx,ax
19546                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19547 4C14           8A87       0244            mov	al,_line_to_vpti[bx]
19548 4C18           30E4                       xor	ah,ah
19549 4C1A           B1                     06  mov	cl,*6
19550 4C1C           D3E0                       shl	ax,cl
19551 4C1E           89C3                       mov	bx,ax
19552 4C20           81C3                 0258  add	bx,#_video_param_table
19553                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19554 4C24           8A47         02            mov	al,2[bx]
19555 4C27           8846         FD            mov	-3[bp],al
19556                                           !BCC_EOS
19557                                           ! 2112    switch(vga_modes[line].memmodel)
19558                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19559 4C2A           8A46         FE            mov	al,-2[bp]
19560 4C2D           30E4                       xor	ah,ah
19561 4C2F           B1                     03  mov	cl,*3
19562 4C31           D3E0                       shl	ax,cl
19563 4C33           89C3                       mov	bx,ax
19564 4C35           81C3                 01C4  add	bx,#_vga_modes
19565 4C39           8A47         02            mov	al,2[bx]
19566                                           ! 2113     {
19567 4C3C           E9         03A4            br 	.F2
19568                                           ! 2114      case 0x04:
19569                                           ! 2115      case 0x03:
19570                       00004C3F            .F3:
19571                                           ! 2116        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19572                       00004C3F            .F4:
19573                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19574 4C3F           8A46         04            mov	al,4[bp]
19575 4C42           84C0                       test	al,al
19576 4C44   7403    E9         008A            bne 	.F5
19577                       00004C49            .FA:
19578                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19579 4C49           8A46         08            mov	al,8[bp]
19580 4C4C           84C0                       test	al,al
19581 4C4E   7403    E9         0080            bne 	.F5
19582                       00004C53            .F9:
19583                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19584 4C53           8A46         0A            mov	al,$A[bp]
19585 4C56           84C0                       test	al,al
19586 4C58           75           79            jne 	.F5
19587                       00004C5A            .F8:
19588                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19589 4C5A           8B46         F6            mov	ax,-$A[bp]
19590                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19591                                           ! Debug: expression subtree swapping
19592 4C5D           48                         dec	ax
19593 4C5E           50                         push	ax
19594 4C5F           8A46         0C            mov	al,$C[bp]
19595 4C62           30E4                       xor	ah,ah
19596 4C64           3B46         F0            cmp	ax,0+..FFFC[bp]
19597 4C67           8D66         F2            lea	sp,2+..FFFC[bp]
19598 4C6A           75           67            jne 	.F5
19599                       00004C6C            .F7:
19600                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19601 4C6C           8B46         F8            mov	ax,-8[bp]
19602                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19603                                           ! Debug: expression subtree swapping
19604 4C6F           48                         dec	ax
19605 4C70           50                         push	ax
19606 4C71           8A46         0E            mov	al,$E[bp]
19607 4C74           30E4                       xor	ah,ah
19608 4C76           3B46         F0            cmp	ax,0+..FFFC[bp]
19609 4C79           8D66         F2            lea	sp,2+..FFFC[bp]
19610 4C7C           75           55            jne 	.F5
19611                       00004C7E            .F6:
19612                                           ! 2117         {
19613                                           ! 2118          outw(0x3ce, 0x0205);
19614                                           ! Debug: list int = const $205 (used reg = )
19615 4C7E           B8                   0205  mov	ax,#$205
19616 4C81           50                         push	ax
19617                                           ! Debug: list int = const $3CE (used reg = )
19618 4C82           B8                   03CE  mov	ax,#$3CE
19619 4C85           50                         push	ax
19620                                           ! Debug: func () void = outw+0 (used reg = )
19621 4C86           E8         3092            call	_outw
19622 4C89           83C4                   04  add	sp,*4
19623                                           !BCC_EOS
19624                                           ! 2119          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19625                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19626 4C8C           8B46         F6            mov	ax,-$A[bp]
19627 4C8F           8B4E         F8            mov	cx,-8[bp]
19628 4C92           F7E9                       imul	cx
19629                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19630 4C94           89C3                       mov	bx,ax
19631 4C96           8A46         FD            mov	al,-3[bp]
19632 4C99           30E4                       xor	ah,ah
19633 4C9B           93                         xchg	ax,bx
19634 4C9C           89D9                       mov	cx,bx
19635 4C9E           F7E9                       imul	cx
19636                                           ! Debug: list unsigned int = ax+0 (used reg = )
19637 4CA0           50                         push	ax
19638                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19639 4CA1           8A46         06            mov	al,6[bp]
19640 4CA4           30E4                       xor	ah,ah
19641 4CA6           50                         push	ax
19642                                           ! Debug: list int = const 0 (used reg = )
19643 4CA7           31C0                       xor	ax,ax
19644 4CA9           50                         push	ax
19645                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19646 4CAA           8A46         FE            mov	al,-2[bp]
19647 4CAD           30E4                       xor	ah,ah
19648 4CAF           B1                     03  mov	cl,*3
19649 4CB1           D3E0                       shl	ax,cl
19650 4CB3           89C3                       mov	bx,ax
19651 4CB5           81C3                 01C4  add	bx,#_vga_modes
19652                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19653 4CB9           FF77         04            push	4[bx]
19654                                           ! Debug: func () void = memsetb+0 (used reg = )
19655 4CBC           E8         2F36            call	_memsetb
19656 4CBF           83C4                   08  add	sp,*8
19657                                           !BCC_EOS
19658                                           ! 2120          outw(0x3ce, 0x0005);
19659                                           ! Debug: list int = const 5 (used reg = )
19660 4CC2           B8                   0005  mov	ax,*5
19661 4CC5           50                         push	ax
19662                                           ! Debug: list int = const $3CE (used reg = )
19663 4CC6           B8                   03CE  mov	ax,#$3CE
19664 4CC9           50                         push	ax
19665                                           ! Debug: func () void = outw+0 (used reg = )
19666 4CCA           E8         304E            call	_outw
19667 4CCD           83C4                   04  add	sp,*4
19668                                           !BCC_EOS
19669                                           ! 2121         }
19670                                           ! 2122        else
19671                                           ! 2123         {
19672 4CD0           E9         0123            br 	.FB
19673                       00004CD3            .F5:
19674                                           ! 2124          if(dir==1)
19675                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19676 4CD3           8A46         12            mov	al,$12[bp]
19677 4CD6           3C                     01  cmp	al,*1
19678 4CD8   7403    E9         008A            bne 	.FC
19679                       00004CDD            .FD:
19680                                           ! 2125           {for(i=rul;i<=rlr;i++)
19681                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19682 4CDD           8A46         08            mov	al,8[bp]
19683 4CE0           30E4                       xor	ah,ah
19684 4CE2           8946         F4            mov	-$C[bp],ax
19685                                           !BCC_EOS
19686                                           !BCC_EOS
19687                                           ! 2126             {
19688 4CE5           EB           73            jmp .100
19689                       00004CE7            .101:
19690                                           ! 2127              if((i+nblines>rlr)||(nblines==0))
19691                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19692 4CE7           8B46         F4            mov	ax,-$C[bp]
19693 4CEA           0246         04            add	al,4[bp]
19694 4CED           80D4                   00  adc	ah,*0
19695                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19696 4CF0           50                         push	ax
19697 4CF1           8A46         0C            mov	al,$C[bp]
19698 4CF4           30E4                       xor	ah,ah
19699 4CF6           3B46         F0            cmp	ax,0+..FFFC[bp]
19700 4CF9           8D66         F2            lea	sp,2+..FFFC[bp]
19701 4CFC           72           07            jb  	.103
19702                       00004CFE            .104:
19703                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19704 4CFE           8A46         04            mov	al,4[bp]
19705 4D01           84C0                       test	al,al
19706 4D03           75           26            jne 	.102
19707                       00004D05            .103:
19708                                           ! 2128               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19709                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19710 4D05           8A46         06            mov	al,6[bp]
19711 4D08           30E4                       xor	ah,ah
19712 4D0A           50                         push	ax
19713                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19714 4D0B           8A46         FD            mov	al,-3[bp]
19715 4D0E           30E4                       xor	ah,ah
19716 4D10           50                         push	ax
19717                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19718 4D11           FF76         F8            push	-8[bp]
19719                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19720 4D14           8A46         FB            mov	al,-5[bp]
19721 4D17           30E4                       xor	ah,ah
19722 4D19           50                         push	ax
19723                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19724 4D1A           FF76         F4            push	-$C[bp]
19725                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19726 4D1D           8A46         0A            mov	al,$A[bp]
19727 4D20           30E4                       xor	ah,ah
19728 4D22           50                         push	ax
19729                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19730 4D23           E8         F94A            call	_vgamem_fill_pl4
19731 4D26           83C4                   0C  add	sp,*$C
19732                                           !BCC_EOS
19733                                           ! 2129              else
19734                                           ! 2130               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19735 4D29           EB           28            jmp .105
19736                       00004D2B            .102:
19737                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19738 4D2B           8A46         FD            mov	al,-3[bp]
19739 4D2E           30E4                       xor	ah,ah
19740 4D30           50                         push	ax
19741                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19742 4D31           FF76         F8            push	-8[bp]
19743                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19744 4D34           8A46         FB            mov	al,-5[bp]
19745 4D37           30E4                       xor	ah,ah
19746 4D39           50                         push	ax
19747                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19748 4D3A           FF76         F4            push	-$C[bp]
19749                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19750 4D3D           8B46         F4            mov	ax,-$C[bp]
19751 4D40           0246         04            add	al,4[bp]
19752 4D43           80D4                   00  adc	ah,*0
19753                                           ! Debug: list unsigned int = ax+0 (used reg = )
19754 4D46           50                         push	ax
19755                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19756 4D47           8A46         0A            mov	al,$A[bp]
19757 4D4A           30E4                       xor	ah,ah
19758 4D4C           50                         push	ax
19759                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19760 4D4D           E8         F85E            call	_vgamem_copy_pl4
19761 4D50           83C4                   0C  add	sp,*$C
19762                                           !BCC_EOS
19763                                           ! 2131             }
19764                       00004D53            .105:
19765                                           ! 2132           }
19766                       00004D53            .FF:
19767                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19768 4D53           8B46         F4            mov	ax,-$C[bp]
19769 4D56           40                         inc	ax
19770 4D57           8946         F4            mov	-$C[bp],ax
19771                       00004D5A            .100:
19772                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19773 4D5A           8A46         0C            mov	al,$C[bp]
19774 4D5D           30E4                       xor	ah,ah
19775 4D5F           3B46         F4            cmp	ax,-$C[bp]
19776 4D62           73           83            jae	.101
19777                       00004D64            .106:
19778                       00004D64            .FE:
19779                                           ! 2133          else
19780                                           ! 2134           {for(i=rlr;i>=rul;i--)
19781 4D64           E9         008F            br 	.107
19782                       00004D67            .FC:
19783                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19784 4D67           8A46         0C            mov	al,$C[bp]
19785 4D6A           30E4                       xor	ah,ah
19786 4D6C           8946         F4            mov	-$C[bp],ax
19787                                           !BCC_EOS
19788                                           !BCC_EOS
19789                                           ! 2135             {
19790 4D6F           EB           78            jmp .10A
19791                       00004D71            .10B:
19792                                           ! 2136              if((i<rul+nblines)||(nblines==0))
19793                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19794 4D71           8A46         08            mov	al,8[bp]
19795 4D74           30E4                       xor	ah,ah
19796 4D76           0246         04            add	al,4[bp]
19797 4D79           80D4                   00  adc	ah,*0
19798                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19799 4D7C           3B46         F4            cmp	ax,-$C[bp]
19800 4D7F           77           07            ja  	.10D
19801                       00004D81            .10E:
19802                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19803 4D81           8A46         04            mov	al,4[bp]
19804 4D84           84C0                       test	al,al
19805 4D86           75           26            jne 	.10C
19806                       00004D88            .10D:
19807                                           ! 2137               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19808                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19809 4D88           8A46         06            mov	al,6[bp]
19810 4D8B           30E4                       xor	ah,ah
19811 4D8D           50                         push	ax
19812                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19813 4D8E           8A46         FD            mov	al,-3[bp]
19814 4D91           30E4                       xor	ah,ah
19815 4D93           50                         push	ax
19816                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19817 4D94           FF76         F8            push	-8[bp]
19818                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19819 4D97           8A46         FB            mov	al,-5[bp]
19820 4D9A           30E4                       xor	ah,ah
19821 4D9C           50                         push	ax
19822                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19823 4D9D           FF76         F4            push	-$C[bp]
19824                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19825 4DA0           8A46         0A            mov	al,$A[bp]
19826 4DA3           30E4                       xor	ah,ah
19827 4DA5           50                         push	ax
19828                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19829 4DA6           E8         F8C7            call	_vgamem_fill_pl4
19830 4DA9           83C4                   0C  add	sp,*$C
19831                                           !BCC_EOS
19832                                           ! 2138              else
19833                                           ! 2139               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19834 4DAC           EB           28            jmp .10F
19835                       00004DAE            .10C:
19836                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19837 4DAE           8A46         FD            mov	al,-3[bp]
19838 4DB1           30E4                       xor	ah,ah
19839 4DB3           50                         push	ax
19840                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19841 4DB4           FF76         F8            push	-8[bp]
19842                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19843 4DB7           8A46         FB            mov	al,-5[bp]
19844 4DBA           30E4                       xor	ah,ah
19845 4DBC           50                         push	ax
19846                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19847 4DBD           8B46         F4            mov	ax,-$C[bp]
19848 4DC0           2A46         04            sub	al,4[bp]
19849 4DC3           80DC                   00  sbb	ah,*0
19850                                           ! Debug: list unsigned int = ax+0 (used reg = )
19851 4DC6           50                         push	ax
19852                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19853 4DC7           FF76         F4            push	-$C[bp]
19854                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19855 4DCA           8A46         0A            mov	al,$A[bp]
19856 4DCD           30E4                       xor	ah,ah
19857 4DCF           50                         push	ax
19858                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19859 4DD0           E8         F7DB            call	_vgamem_copy_pl4
19860 4DD3           83C4                   0C  add	sp,*$C
19861                                           !BCC_EOS
19862                                           ! 2140              if (i>rlr) break;
19863                       00004DD6            .10F:
19864                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19865 4DD6           8A46         0C            mov	al,$C[bp]
19866 4DD9           30E4                       xor	ah,ah
19867 4DDB           3B46         F4            cmp	ax,-$C[bp]
19868 4DDE           73           02            jae 	.110
19869                       00004DE0            .111:
19870 4DE0           EB           14            jmp .108
19871                                           !BCC_EOS
19872                                           ! 2141             }
19873                       00004DE2            .110:
19874                                           ! 2142           }
19875                       00004DE2            .109:
19876                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19877 4DE2           8B46         F4            mov	ax,-$C[bp]
19878 4DE5           48                         dec	ax
19879 4DE6           8946         F4            mov	-$C[bp],ax
19880                       00004DE9            .10A:
19881                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19882 4DE9           8A46         08            mov	al,8[bp]
19883 4DEC           30E4                       xor	ah,ah
19884 4DEE           3B46         F4            cmp	ax,-$C[bp]
19885 4DF1   7703    E9         FF7B            blos	.10B
19886                       00004DF6            .112:
19887                       00004DF6            .108:
19888                                           ! 2143         }
19889                       00004DF6            .107:
19890                                           ! 2144        break;
19891                       00004DF6            .FB:
19892 4DF6           E9         0201            br 	.F0
19893                                           !BCC_EOS
19894                                           ! 2145      case 0x02:
19895                                           ! 2146        bpp=vga_modes[line].pixbits;
19896                       00004DF9            .113:
19897                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19898 4DF9           8A46         FE            mov	al,-2[bp]
19899 4DFC           30E4                       xor	ah,ah
19900 4DFE           B1                     03  mov	cl,*3
19901 4E00           D3E0                       shl	ax,cl
19902 4E02           89C3                       mov	bx,ax
19903 4E04           81C3                 01C4  add	bx,#_vga_modes
19904                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19905 4E08           8A47         03            mov	al,3[bx]
19906 4E0B           8846         FC            mov	-4[bp],al
19907                                           !BCC_EOS
19908                                           ! 2147        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19909                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19910 4E0E           8A46         04            mov	al,4[bp]
19911 4E11           84C0                       test	al,al
19912 4E13           75           77            jne 	.114
19913                       00004E15            .119:
19914                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19915 4E15           8A46         08            mov	al,8[bp]
19916 4E18           84C0                       test	al,al
19917 4E1A           75           70            jne 	.114
19918                       00004E1C            .118:
19919                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19920 4E1C           8A46         0A            mov	al,$A[bp]
19921 4E1F           84C0                       test	al,al
19922 4E21           75           69            jne 	.114
19923                       00004E23            .117:
19924                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19925 4E23           8B46         F6            mov	ax,-$A[bp]
19926                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19927                                           ! Debug: expression subtree swapping
19928 4E26           48                         dec	ax
19929 4E27           50                         push	ax
19930 4E28           8A46         0C            mov	al,$C[bp]
19931 4E2B           30E4                       xor	ah,ah
19932 4E2D           3B46         F0            cmp	ax,0+..FFFC[bp]
19933 4E30           8D66         F2            lea	sp,2+..FFFC[bp]
19934 4E33           75           57            jne 	.114
19935                       00004E35            .116:
19936                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19937 4E35           8B46         F8            mov	ax,-8[bp]
19938                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19939                                           ! Debug: expression subtree swapping
19940 4E38           48                         dec	ax
19941 4E39           50                         push	ax
19942 4E3A           8A46         0E            mov	al,$E[bp]
19943 4E3D           30E4                       xor	ah,ah
19944 4E3F           3B46         F0            cmp	ax,0+..FFFC[bp]
19945 4E42           8D66         F2            lea	sp,2+..FFFC[bp]
19946 4E45           75           45            jne 	.114
19947                       00004E47            .115:
19948                                           ! 2148         {
19949                                           ! 2149          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19950                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19951 4E47           8B46         F6            mov	ax,-$A[bp]
19952 4E4A           8B4E         F8            mov	cx,-8[bp]
19953 4E4D           F7E9                       imul	cx
19954                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19955 4E4F           89C3                       mov	bx,ax
19956 4E51           8A46         FD            mov	al,-3[bp]
19957 4E54           30E4                       xor	ah,ah
19958 4E56           93                         xchg	ax,bx
19959 4E57           89D9                       mov	cx,bx
19960 4E59           F7E9                       imul	cx
19961                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19962 4E5B           89C3                       mov	bx,ax
19963 4E5D           8A46         FC            mov	al,-4[bp]
19964 4E60           30E4                       xor	ah,ah
19965 4E62           93                         xchg	ax,bx
19966 4E63           89D9                       mov	cx,bx
19967 4E65           F7E9                       imul	cx
19968                                           ! Debug: list unsigned int = ax+0 (used reg = )
19969 4E67           50                         push	ax
19970                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19971 4E68           8A46         06            mov	al,6[bp]
19972 4E6B           30E4                       xor	ah,ah
19973 4E6D           50                         push	ax
19974                                           ! Debug: list int = const 0 (used reg = )
19975 4E6E           31C0                       xor	ax,ax
19976 4E70           50                         push	ax
19977                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19978 4E71           8A46         FE            mov	al,-2[bp]
19979 4E74           30E4                       xor	ah,ah
19980 4E76           B1                     03  mov	cl,*3
19981 4E78           D3E0                       shl	ax,cl
19982 4E7A           89C3                       mov	bx,ax
19983 4E7C           81C3                 01C4  add	bx,#_vga_modes
19984                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19985 4E80           FF77         04            push	4[bx]
19986                                           ! Debug: func () void = memsetb+0 (used reg = )
19987 4E83           E8         2D6F            call	_memsetb
19988 4E86           83C4                   08  add	sp,*8
19989                                           !BCC_EOS
19990                                           ! 2150         }
19991                                           ! 2151        else
19992                                           ! 2152         {
19993 4E89           E9         0147            br 	.11A
19994                       00004E8C            .114:
19995                                           ! 2153          if(bpp==2)
19996                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
19997 4E8C           8A46         FC            mov	al,-4[bp]
19998 4E8F           3C                     02  cmp	al,*2
19999 4E91           75           1C            jne 	.11B
20000                       00004E93            .11C:
20001                                           ! 2154           {
20002                                           ! 2155            cul<<=1;
20003                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20004 4E93           8A46         0A            mov	al,$A[bp]
20005 4E96           30E4                       xor	ah,ah
20006 4E98           D1E0                       shl	ax,*1
20007 4E9A           8846         0A            mov	$A[bp],al
20008                                           !BCC_EOS
20009                                           ! 2156            cols<<=1;
20010                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20011 4E9D           8A46         FB            mov	al,-5[bp]
20012 4EA0           30E4                       xor	ah,ah
20013 4EA2           D1E0                       shl	ax,*1
20014 4EA4           8846         FB            mov	-5[bp],al
20015                                           !BCC_EOS
20016                                           ! 2157            nbcols<<=1;
20017                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20018 4EA7           8B46         F8            mov	ax,-8[bp]
20019 4EAA           D1E0                       shl	ax,*1
20020 4EAC           8946         F8            mov	-8[bp],ax
20021                                           !BCC_EOS
20022                                           ! 2158           }
20023                                           ! 2159          if(dir==1)
20024                       00004EAF            .11B:
20025                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20026 4EAF           8A46         12            mov	al,$12[bp]
20027 4EB2           3C                     01  cmp	al,*1
20028 4EB4   7403    E9         008A            bne 	.11D
20029                       00004EB9            .11E:
20030                                           ! 2160           {for(i=rul;i<=rlr;i++)
20031                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20032 4EB9           8A46         08            mov	al,8[bp]
20033 4EBC           30E4                       xor	ah,ah
20034 4EBE           8946         F4            mov	-$C[bp],ax
20035                                           !BCC_EOS
20036                                           !BCC_EOS
20037                                           ! 2161             {
20038 4EC1           EB           73            jmp .121
20039                       00004EC3            .122:
20040                                           ! 2162              if((i+nblines>rlr)||(nblines==0))
20041                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20042 4EC3           8B46         F4            mov	ax,-$C[bp]
20043 4EC6           0246         04            add	al,4[bp]
20044 4EC9           80D4                   00  adc	ah,*0
20045                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20046 4ECC           50                         push	ax
20047 4ECD           8A46         0C            mov	al,$C[bp]
20048 4ED0           30E4                       xor	ah,ah
20049 4ED2           3B46         F0            cmp	ax,0+..FFFC[bp]
20050 4ED5           8D66         F2            lea	sp,2+..FFFC[bp]
20051 4ED8           72           07            jb  	.124
20052                       00004EDA            .125:
20053                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20054 4EDA           8A46         04            mov	al,4[bp]
20055 4EDD           84C0                       test	al,al
20056 4EDF           75           26            jne 	.123
20057                       00004EE1            .124:
20058                                           ! 2163               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20059                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20060 4EE1           8A46         06            mov	al,6[bp]
20061 4EE4           30E4                       xor	ah,ah
20062 4EE6           50                         push	ax
20063                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20064 4EE7           8A46         FD            mov	al,-3[bp]
20065 4EEA           30E4                       xor	ah,ah
20066 4EEC           50                         push	ax
20067                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20068 4EED           FF76         F8            push	-8[bp]
20069                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20070 4EF0           8A46         FB            mov	al,-5[bp]
20071 4EF3           30E4                       xor	ah,ah
20072 4EF5           50                         push	ax
20073                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20074 4EF6           FF76         F4            push	-$C[bp]
20075                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20076 4EF9           8A46         0A            mov	al,$A[bp]
20077 4EFC           30E4                       xor	ah,ah
20078 4EFE           50                         push	ax
20079                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20080 4EFF           E8         F90C            call	_vgamem_fill_cga
20081 4F02           83C4                   0C  add	sp,*$C
20082                                           !BCC_EOS
20083                                           ! 2164              else
20084                                           ! 2165               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20085 4F05           EB           28            jmp .126
20086                       00004F07            .123:
20087                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20088 4F07           8A46         FD            mov	al,-3[bp]
20089 4F0A           30E4                       xor	ah,ah
20090 4F0C           50                         push	ax
20091                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20092 4F0D           FF76         F8            push	-8[bp]
20093                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20094 4F10           8A46         FB            mov	al,-5[bp]
20095 4F13           30E4                       xor	ah,ah
20096 4F15           50                         push	ax
20097                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20098 4F16           FF76         F4            push	-$C[bp]
20099                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20100 4F19           8B46         F4            mov	ax,-$C[bp]
20101 4F1C           0246         04            add	al,4[bp]
20102 4F1F           80D4                   00  adc	ah,*0
20103                                           ! Debug: list unsigned int = ax+0 (used reg = )
20104 4F22           50                         push	ax
20105                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20106 4F23           8A46         0A            mov	al,$A[bp]
20107 4F26           30E4                       xor	ah,ah
20108 4F28           50                         push	ax
20109                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20110 4F29           E8         F7CF            call	_vgamem_copy_cga
20111 4F2C           83C4                   0C  add	sp,*$C
20112                                           !BCC_EOS
20113                                           ! 2166             }
20114                       00004F2F            .126:
20115                                           ! 2167           }
20116                       00004F2F            .120:
20117                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20118 4F2F           8B46         F4            mov	ax,-$C[bp]
20119 4F32           40                         inc	ax
20120 4F33           8946         F4            mov	-$C[bp],ax
20121                       00004F36            .121:
20122                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20123 4F36           8A46         0C            mov	al,$C[bp]
20124 4F39           30E4                       xor	ah,ah
20125 4F3B           3B46         F4            cmp	ax,-$C[bp]
20126 4F3E           73           83            jae	.122
20127                       00004F40            .127:
20128                       00004F40            .11F:
20129                                           ! 2168          else
20130                                           ! 2169           {for(i=rlr;i>=rul;i--)
20131 4F40           E9         0090            br 	.128
20132                       00004F43            .11D:
20133                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20134 4F43           8A46         0C            mov	al,$C[bp]
20135 4F46           30E4                       xor	ah,ah
20136 4F48           8946         F4            mov	-$C[bp],ax
20137                                           !BCC_EOS
20138                                           !BCC_EOS
20139                                           ! 2170             {
20140 4F4B           E9         0078            br 	.12B
20141                       00004F4E            .12C:
20142                                           ! 2171              if((i<rul+nblines)||(nblines==0))
20143                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20144 4F4E           8A46         08            mov	al,8[bp]
20145 4F51           30E4                       xor	ah,ah
20146 4F53           0246         04            add	al,4[bp]
20147 4F56           80D4                   00  adc	ah,*0
20148                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20149 4F59           3B46         F4            cmp	ax,-$C[bp]
20150 4F5C           77           07            ja  	.12E
20151                       00004F5E            .12F:
20152                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20153 4F5E           8A46         04            mov	al,4[bp]
20154 4F61           84C0                       test	al,al
20155 4F63           75           26            jne 	.12D
20156                       00004F65            .12E:
20157                                           ! 2172               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20158                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20159 4F65           8A46         06            mov	al,6[bp]
20160 4F68           30E4                       xor	ah,ah
20161 4F6A           50                         push	ax
20162                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20163 4F6B           8A46         FD            mov	al,-3[bp]
20164 4F6E           30E4                       xor	ah,ah
20165 4F70           50                         push	ax
20166                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20167 4F71           FF76         F8            push	-8[bp]
20168                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20169 4F74           8A46         FB            mov	al,-5[bp]
20170 4F77           30E4                       xor	ah,ah
20171 4F79           50                         push	ax
20172                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20173 4F7A           FF76         F4            push	-$C[bp]
20174                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20175 4F7D           8A46         0A            mov	al,$A[bp]
20176 4F80           30E4                       xor	ah,ah
20177 4F82           50                         push	ax
20178                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20179 4F83           E8         F888            call	_vgamem_fill_cga
20180 4F86           83C4                   0C  add	sp,*$C
20181                                           !BCC_EOS
20182                                           ! 2173              else
20183                                           ! 2174              
20184                                           ! 2174  vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20185 4F89           EB           28            jmp .130
20186                       00004F8B            .12D:
20187                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20188 4F8B           8A46         FD            mov	al,-3[bp]
20189 4F8E           30E4                       xor	ah,ah
20190 4F90           50                         push	ax
20191                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20192 4F91           FF76         F8            push	-8[bp]
20193                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20194 4F94           8A46         FB            mov	al,-5[bp]
20195 4F97           30E4                       xor	ah,ah
20196 4F99           50                         push	ax
20197                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20198 4F9A           8B46         F4            mov	ax,-$C[bp]
20199 4F9D           2A46         04            sub	al,4[bp]
20200 4FA0           80DC                   00  sbb	ah,*0
20201                                           ! Debug: list unsigned int = ax+0 (used reg = )
20202 4FA3           50                         push	ax
20203                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20204 4FA4           FF76         F4            push	-$C[bp]
20205                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20206 4FA7           8A46         0A            mov	al,$A[bp]
20207 4FAA           30E4                       xor	ah,ah
20208 4FAC           50                         push	ax
20209                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20210 4FAD           E8         F74B            call	_vgamem_copy_cga
20211 4FB0           83C4                   0C  add	sp,*$C
20212                                           !BCC_EOS
20213                                           ! 2175              if (i>rlr) break;
20214                       00004FB3            .130:
20215                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20216 4FB3           8A46         0C            mov	al,$C[bp]
20217 4FB6           30E4                       xor	ah,ah
20218 4FB8           3B46         F4            cmp	ax,-$C[bp]
20219 4FBB           73           02            jae 	.131
20220                       00004FBD            .132:
20221 4FBD           EB           14            jmp .129
20222                                           !BCC_EOS
20223                                           ! 2176             }
20224                       00004FBF            .131:
20225                                           ! 2177           }
20226                       00004FBF            .12A:
20227                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20228 4FBF           8B46         F4            mov	ax,-$C[bp]
20229 4FC2           48                         dec	ax
20230 4FC3           8946         F4            mov	-$C[bp],ax
20231                       00004FC6            .12B:
20232                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20233 4FC6           8A46         08            mov	al,8[bp]
20234 4FC9           30E4                       xor	ah,ah
20235 4FCB           3B46         F4            cmp	ax,-$C[bp]
20236 4FCE   7703    E9         FF7B            blos	.12C
20237                       00004FD3            .133:
20238                       00004FD3            .129:
20239                                           ! 2178         }
20240                       00004FD3            .128:
20241                                           ! 2179        break;
20242                       00004FD3            .11A:
20243 4FD3           EB           25            jmp .F0
20244                                           !BCC_EOS
20245                                           ! 2180      default:
20246                                           ! 2181        printf("Scroll in graphics mode ");
20247                       00004FD5            .134:
20248                                           ! Debug: list * char = .135+0 (used reg = )
20249 4FD5           BB                   7EE9  mov	bx,#.135
20250 4FD8           53                         push	bx
20251                                           ! Debug: func () void = printf+0 (used reg = )
20252 4FD9           E8         2D6E            call	_printf
20253 4FDC           44                         inc	sp
20254 4FDD           44                         inc	sp
20255                                           !BCC_EOS
20256                                           ! 2182        unimplemented();
20257                                           ! Debug: func () void = unimplemented+0 (used reg = )
20258 4FDE           E8         2D4D            call	_unimplemented
20259                                           !BCC_EOS
20260                                           ! 2183     }
20261                                           ! 2184   }
20262 4FE1           EB           17            jmp .F0
20263                       00004FE3            .F2:
20264 4FE3           2C                     02  sub	al,*2
20265 4FE5   7503    E9         FE0F            beq 	.113
20266 4FEA           2C                     01  sub	al,*1
20267 4FEC   7503    E9         FC4E            beq 	.F4
20268 4FF1           2C                     01  sub	al,*1
20269 4FF3   7503    E9         FC47            beq 	.F3
20270 4FF8           EB           DB            jmp	.134
20271                       00004FFA            .F0:
20272                       FFFFFFF0            ..FFFC	=	-$10
20273                                           ! 2185 }
20274                       00004FFA            .EF:
20275 4FFA           89EC                       mov	sp,bp
20276 4FFC           5D                         pop	bp
20277 4FFD           C3                         ret
20278                                           ! 2186 static void biosfn_read_char_attr (page,car)
20279                                           ! Register BX used in function biosfn_scroll
20280                                           ! 2187 Bit8u page;Bit16u *car;
20281                       00004FFE            _biosfn_read_char_attr:
20282                                           !BCC_EOS
20283                                           !BCC_EOS
20284                                           ! 2188 {Bit16u ss=get_SS();
20285 4FFE           55                         push	bp
20286 4FFF           89E5                       mov	bp,sp
20287 5001           4C                         dec	sp
20288 5002           4C                         dec	sp
20289                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20290 5003           E8         2D25            call	_get_SS
20291                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20292 5006           8946         FE            mov	-2[bp],ax
20293                                           !BCC_EOS
20294                                           ! 2189  Bit8u xcurs,ycurs,mode,line;
20295                                           !BCC_EOS
20296                                           ! 2190  Bit16u nbcols,nbrows,address;
20297                                           !BCC_EOS
20298                                           ! 2191  Bit16u cursor,dummy;
20299                                           !BCC_EOS
20300                                           ! 2192  mode=read_byte(0x40,0x49);
20301 5009           83C4                   F2  add	sp,*-$E
20302                                           ! Debug: list int = const $49 (used reg = )
20303 500C           B8                   0049  mov	ax,*$49
20304 500F           50                         push	ax
20305                                           ! Debug: list int = const $40 (used reg = )
20306 5010           B8                   0040  mov	ax,*$40
20307 5013           50                         push	ax
20308                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20309 5014           E8         2C88            call	_read_byte
20310 5017           83C4                   04  add	sp,*4
20311                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20312 501A           8846         FB            mov	-5[bp],al
20313                                           !BCC_EOS
20314                                           ! 2193  line=find_vga_entry(mode);
20315                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20316 501D           8A46         FB            mov	al,-5[bp]
20317 5020           30E4                       xor	ah,ah
20318 5022           50                         push	ax
20319                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20320 5023           E8         2B8D            call	_find_vga_entry
20321 5026           44                         inc	sp
20322 5027           44                         inc	sp
20323                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20324 5028           8846         FA            mov	-6[bp],al
20325                                           !BCC_EOS
20326                                           ! 2194  if(line==0xFF)return;
20327                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20328 502B           8A46         FA            mov	al,-6[bp]
20329 502E           3C                     FF  cmp	al,#$FF
20330 5030           75           04            jne 	.136
20331                       00005032            .137:
20332 5032           89EC                       mov	sp,bp
20333 5034           5D                         pop	bp
20334 5035           C3                         ret
20335                                           !BCC_EOS
20336                                           ! 2195  biosfn_get_cursor_pos(page,&dummy,&cursor);
20337                       00005036            .136:
20338                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20339 5036           8D5E         F2            lea	bx,-$E[bp]
20340 5039           53                         push	bx
20341                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20342 503A           8D5E         F0            lea	bx,-$10[bp]
20343 503D           53                         push	bx
20344                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20345 503E           8A46         04            mov	al,4[bp]
20346 5041           30E4                       xor	ah,ah
20347 5043           50                         push	ax
20348                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20349 5044           E8         F370            call	_biosfn_get_cursor_pos
20350 5047           83C4                   06  add	sp,*6
20351                                           !BCC_EOS
20352                                           ! 2196  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20353                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20354 504A           8A46         F2            mov	al,-$E[bp]
20355                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20356 504D           8846         FD            mov	-3[bp],al
20357                                           !BCC_EOS
20358                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20359 5050           8B46         F2            mov	ax,-$E[bp]
20360 5053           30C0                       xor	al,al
20361                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20362 5055           88E0                       mov	al,ah
20363 5057           30E4                       xor	ah,ah
20364                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20365 5059           8846         FC            mov	-4[bp],al
20366                                           !BCC_EOS
20367                                           ! 2197  nbrows=read_byte(0x40,0x84)+1;
20368                                           ! Debug: list int = const $84 (used reg = )
20369 505C           B8                   0084  mov	ax,#$84
20370 505F           50                         push	ax
20371                                           ! Debug: list int = const $40 (used reg = )
20372 5060           B8                   0040  mov	ax,*$40
20373 5063           50                         push	ax
20374                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20375 5064           E8         2C38            call	_read_byte
20376 5067           83C4                   04  add	sp,*4
20377                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20378 506A           30E4                       xor	ah,ah
20379                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20380 506C           40                         inc	ax
20381 506D           8946         F6            mov	-$A[bp],ax
20382                                           !BCC_EOS
20383                                           ! 2198  nbcols=read_word(0x40,0x4A);
20384                                           ! Debug: list int = const $4A (used reg = )
20385 5070           B8                   004A  mov	ax,*$4A
20386 5073           50                         push	ax
20387                                           ! Debug: list int = const $40 (used reg = )
20388 5074           B8                   0040  mov	ax,*$40
20389 5077           50                         push	ax
20390                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20391 5078           E8         2C37            call	_read_word
20392 507B           83C4                   04  add	sp,*4
20393                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20394 507E           8946         F8            mov	-8[bp],ax
20395                                           !BCC_EOS
20396                                           ! 2199  if(vga_modes[line].class==0x00)
20397                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20398 5081           8A46         FA            mov	al,-6[bp]
20399 5084           30E4                       xor	ah,ah
20400 5086           B1                     03  mov	cl,*3
20401 5088           D3E0                       shl	ax,cl
20402 508A           89C3                       mov	bx,ax
20403 508C           81C3                 01C4  add	bx,#_vga_modes
20404                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20405 5090           8A47         01            mov	al,1[bx]
20406 5093           84C0                       test	al,al
20407 5095           75           5E            jne 	.138
20408                       00005097            .139:
20409                                           ! 2200   {
20410                                           ! 2201    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20411                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20412 5097           8A46         FC            mov	al,-4[bp]
20413 509A           30E4                       xor	ah,ah
20414 509C           8B4E         F8            mov	cx,-8[bp]
20415 509F           F7E9                       imul	cx
20416                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20417                                           ! Debug: expression subtree swapping
20418 50A1           0246         FD            add	al,-3[bp]
20419 50A4           80D4                   00  adc	ah,*0
20420                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20421 50A7           D1E0                       shl	ax,*1
20422 50A9           50                         push	ax
20423                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20424 50AA           8B46         F8            mov	ax,-8[bp]
20425 50AD           8B4E         F6            mov	cx,-$A[bp]
20426 50B0           F7E9                       imul	cx
20427                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20428 50B2           D1E0                       shl	ax,*1
20429                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20430 50B4           0C                     FF  or	al,#$FF
20431                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20432                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20433 50B6           89C3                       mov	bx,ax
20434 50B8           8A46         04            mov	al,4[bp]
20435 50BB           30E4                       xor	ah,ah
20436 50BD           93                         xchg	ax,bx
20437 50BE           40                         inc	ax
20438 50BF           89D9                       mov	cx,bx
20439 50C1           F7E9                       imul	cx
20440                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20441 50C3           0346         EE            add	ax,-$12[bp]
20442 50C6           44                         inc	sp
20443 50C7           44                         inc	sp
20444                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20445 50C8           8946         F4            mov	-$C[bp],ax
20446                                           !BCC_EOS
20447                                           ! 2202    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20448                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20449 50CB           FF76         F4            push	-$C[bp]
20450                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20451 50CE           8A46         FA            mov	al,-6[bp]
20452 50D1           30E4                       xor	ah,ah
20453 50D3           B1                     03  mov	cl,*3
20454 50D5           D3E0                       shl	ax,cl
20455 50D7           89C3                       mov	bx,ax
20456 50D9           81C3                 01C4  add	bx,#_vga_modes
20457                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20458 50DD           FF77         04            push	4[bx]
20459                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20460 50E0           E8         2BCF            call	_read_word
20461 50E3           83C4                   04  add	sp,*4
20462                                           ! Debug: list unsigned short = ax+0 (used reg = )
20463 50E6           50                         push	ax
20464                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20465 50E7           FF76         06            push	6[bp]
20466                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20467 50EA           FF76         FE            push	-2[bp]
20468                                           ! Debug: func () void = write_word+0 (used reg = )
20469 50ED           E8         2BED            call	_write_word
20470 50F0           83C4                   06  add	sp,*6
20471                                           !BCC_EOS
20472                                           ! 2203   }
20473                                           ! 2204  else
20474                                           ! 2205   {
20475 50F3           EB           03            jmp .13A
20476                       000050F5            .138:
20477                                           ! 2206    unimplemented();
20478                                           ! Debug: func () void = unimplemented+0 (used reg = )
20479 50F5           E8         2C36            call	_unimplemented
20480                                           !BCC_EOS
20481                                           ! 2207   }
20482                                           ! 2208 }
20483                       000050F8            .13A:
20484 50F8           89EC                       mov	sp,bp
20485 50FA           5D                         pop	bp
20486 50FB           C3                         ret
20487                                           ! 2209 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20488                                           ! Register BX used in function biosfn_read_char_attr
20489                                           ! 2210 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20490                       000050FC            _write_gfx_char_pl4:
20491                                           !BCC_EOS
20492                                           !BCC_EOS
20493                                           !BCC_EOS
20494                                           !BCC_EOS
20495                                           !BCC_EOS
20496                                           !BCC_EOS
20497                                           ! 2211 {
20498                                           ! 2212  Bit8u i,j,mask;
20499                                           !BCC_EOS
20500                                           ! 2213  Bit8u *fdata;
20501                                           !BCC_EOS
20502                                           ! 2214  Bit16u addr,dest,src;
20503                                           !BCC_EOS
20504                                           ! 2215  switch(cheight)
20505 50FC           55                         push	bp
20506 50FD           89E5                       mov	bp,sp
20507 50FF           83C4                   F4  add	sp,*-$C
20508 5102           8A46         0E            mov	al,$E[bp]
20509                                           ! 2216   {case 14:
20510 5105           EB           18            jmp .13D
20511                                           ! 2217     fdata = &vgafont14;
20512                       00005107            .13E:
20513                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20514 5107           BB                   1728  mov	bx,#_vgafont14
20515 510A           895E         FA            mov	-6[bp],bx
20516                                           !BCC_EOS
20517                                           ! 2218     break;
20518 510D           EB           1A            jmp .13B
20519                                           !BCC_EOS
20520                                           ! 2219    case 16:
20521                                           ! 2220     fdata = &vgafont16;
20522                       0000510F            .13F:
20523                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20524 510F           BB                   2528  mov	bx,#_vgafont16
20525 5112           895E         FA            mov	-6[bp],bx
20526                                           !BCC_EOS
20527                                           ! 2221     break;
20528 5115           EB           12            jmp .13B
20529                                           !BCC_EOS
20530                                           ! 2222    default:
20531                                           ! 2223     fdata = &vgafont8;
20532                       00005117            .140:
20533                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20534 5117           BB                   0F28  mov	bx,#_vgafont8
20535 511A           895E         FA            mov	-6[bp],bx
20536                                           !BCC_EOS
20537                                           ! 2224   }
20538                                           ! 2225  addr=xcurs+ycurs*cheight*nbcols;
20539 511D           EB           0A            jmp .13B
20540                       0000511F            .13D:
20541 511F           2C                     0E  sub	al,*$E
20542 5121           74           E4            je 	.13E
20543 5123           2C                     02  sub	al,*2
20544 5125           74           E8            je 	.13F
20545 5127           EB           EE            jmp	.140
20546                       00005129            .13B:
20547                       FFFFFFF2            ..FFFB	=	-$E
20548                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20549 5129           8A46         0E            mov	al,$E[bp]
20550 512C           30E4                       xor	ah,ah
20551 512E           89C3                       mov	bx,ax
20552 5130           8A46         0A            mov	al,$A[bp]
20553 5133           30E4                       xor	ah,ah
20554 5135           89D9                       mov	cx,bx
20555 5137           F7E9                       imul	cx
20556                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20557 5139           89C3                       mov	bx,ax
20558 513B           8A46         0C            mov	al,$C[bp]
20559 513E           30E4                       xor	ah,ah
20560 5140           93                         xchg	ax,bx
20561 5141           89D9                       mov	cx,bx
20562 5143           F7E9                       imul	cx
20563                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20564                                           ! Debug: expression subtree swapping
20565 5145           0246         08            add	al,8[bp]
20566 5148           80D4                   00  adc	ah,*0
20567                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20568 514B           8946         F8            mov	-8[bp],ax
20569                                           !BCC_EOS
20570                                           ! 2226  src = car * cheight;
20571                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20572 514E           8A46         0E            mov	al,$E[bp]
20573 5151           30E4                       xor	ah,ah
20574 5153           89C3                       mov	bx,ax
20575 5155           8A46         04            mov	al,4[bp]
20576 5158           30E4                       xor	ah,ah
20577 515A           89D9                       mov	cx,bx
20578 515C           F7E9                       imul	cx
20579                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20580 515E           8946         F4            mov	-$C[bp],ax
20581                                           !BCC_EOS
20582                                           ! 2227  outw(0x3c4, 0x0f02);
20583                                           ! Debug: list int = const $F02 (used reg = )
20584 5161           B8                   0F02  mov	ax,#$F02
20585 5164           50                         push	ax
20586                                           ! Debug: list int = const $3C4 (used reg = )
20587 5165           B8                   03C4  mov	ax,#$3C4
20588 5168           50                         push	ax
20589                                           ! Debug: func () void = outw+0 (used reg = )
20590 5169           E8         2BAF            call	_outw
20591 516C           83C4                   04  add	sp,*4
20592                                           !BCC_EOS
20593                                           ! 2228  outw(0x3ce, 0x0205);
20594                                           ! Debug: list int = const $205 (used reg = )
20595 516F           B8                   0205  mov	ax,#$205
20596 5172           50                         push	ax
20597                                           ! Debug: list int = const $3CE (used reg = )
20598 5173           B8                   03CE  mov	ax,#$3CE
20599 5176           50                         push	ax
20600                                           ! Debug: func () void = outw+0 (used reg = )
20601 5177           E8         2BA1            call	_outw
20602 517A           83C4                   04  add	sp,*4
20603                                           !BCC_EOS
20604                                           ! 2229  if(attr&0x80)
20605                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20606 517D           8A46         06            mov	al,6[bp]
20607 5180           24                     80  and	al,#$80
20608 5182           84C0                       test	al,al
20609 5184           74           10            je  	.141
20610                       00005186            .142:
20611                                           ! 2230   {
20612                                           ! 2231    outw(0x3ce, 0x1803);
20613                                           ! Debug: list int = const $1803 (used reg = )
20614 5186           B8                   1803  mov	ax,#$1803
20615 5189           50                         push	ax
20616                                           ! Debug: list int = const $3CE (used reg = )
20617 518A           B8                   03CE  mov	ax,#$3CE
20618 518D           50                         push	ax
20619                                           ! Debug: func () void = outw+0 (used reg = )
20620 518E           E8         2B8A            call	_outw
20621 5191           83C4                   04  add	sp,*4
20622                                           !BCC_EOS
20623                                           ! 2232   }
20624                                           ! 2233  else
20625                                           ! 2234   {
20626 5194           EB           0E            jmp .143
20627                       00005196            .141:
20628                                           ! 2235    outw(0x3ce, 0x0003);
20629                                           ! Debug: list int = const 3 (used reg = )
20630 5196           B8                   0003  mov	ax,*3
20631 5199           50                         push	ax
20632                                           ! Debug: list int = const $3CE (used reg = )
20633 519A           B8                   03CE  mov	ax,#$3CE
20634 519D           50                         push	ax
20635                                           ! Debug: func () void = outw+0 (used reg = )
20636 519E           E8         2B7A            call	_outw
20637 51A1           83C4                   04  add	sp,*4
20638                                           !BCC_EOS
20639                                           ! 2236   }
20640                                           ! 2237  for(i=0;i<cheight;i++)
20641                       000051A4            .143:
20642                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20643 51A4           30C0                       xor	al,al
20644 51A6           8846         FF            mov	-1[bp],al
20645                                           !BCC_EOS
20646                                           !BCC_EOS
20647                                           ! 2238   {
20648 51A9           E9         00A7            br 	.146
20649                       000051AC            .147:
20650                                           ! 2239    dest=addr+i*nbcols;
20651                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20652 51AC           8A46         0C            mov	al,$C[bp]
20653 51AF           30E4                       xor	ah,ah
20654 51B1           89C3                       mov	bx,ax
20655 51B3           8A46         FF            mov	al,-1[bp]
20656 51B6           30E4                       xor	ah,ah
20657 51B8           89D9                       mov	cx,bx
20658 51BA           F7E9                       imul	cx
20659                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20660                                           ! Debug: expression subtree swapping
20661 51BC           0346         F8            add	ax,-8[bp]
20662                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20663 51BF           8946         F6            mov	-$A[bp],ax
20664                                           !BCC_EOS
20665                                           ! 2240    for(j=0;j<8;j++)
20666                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20667 51C2           30C0                       xor	al,al
20668 51C4           8846         FE            mov	-2[bp],al
20669                                           !BCC_EOS
20670                                           !BCC_EOS
20671                                           ! 2241     {
20672 51C7           EB           79            jmp .14A
20673                       000051C9            .14B:
20674                                           ! 2242      mask=0x80>>j;
20675                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20676 51C9           8A46         FE            mov	al,-2[bp]
20677 51CC           30E4                       xor	ah,ah
20678 51CE           89C3                       mov	bx,ax
20679 51D0           B8                   0080  mov	ax,#$80
20680 51D3           89D9                       mov	cx,bx
20681 51D5           D3F8                       sar	ax,cl
20682                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20683 51D7           8846         FD            mov	-3[bp],al
20684                                           !BCC_EOS
20685                                           ! 2243      outw(0x3ce, (mask << 8) | 0x08);
20686                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20687 51DA           8A46         FD            mov	al,-3[bp]
20688 51DD           30E4                       xor	ah,ah
20689 51DF           88C4                       mov	ah,al
20690 51E1           30C0                       xor	al,al
20691                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20692 51E3           0C                     08  or	al,*8
20693                                           ! Debug: list unsigned int = ax+0 (used reg = )
20694 51E5           50                         push	ax
20695                                           ! Debug: list int = const $3CE (used reg = )
20696 51E6           B8                   03CE  mov	ax,#$3CE
20697 51E9           50                         push	ax
20698                                           ! Debug: func () void = outw+0 (used reg = )
20699 51EA           E8         2B2E            call	_outw
20700 51ED           83C4                   04  add	sp,*4
20701                                           !BCC_EOS
20702                                           ! 2244      read_byte(0xa000,dest);
20703                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20704 51F0           FF76         F6            push	-$A[bp]
20705                                           ! Debug: list unsigned int = const $A000 (used reg = )
20706 51F3           B8                   A000  mov	ax,#$A000
20707 51F6           50                         push	ax
20708                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20709 51F7           E8         2AA5            call	_read_byte
20710 51FA           83C4                   04  add	sp,*4
20711                                           !BCC_EOS
20712                                           ! 2245      if(fdata[src+i]&mask)
20713                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20714 51FD           8B46         F4            mov	ax,-$C[bp]
20715 5200           0246         FF            add	al,-1[bp]
20716 5203           80D4                   00  adc	ah,*0
20717                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20718 5206           0346         FA            add	ax,-6[bp]
20719 5209           89C3                       mov	bx,ax
20720                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20721 520B           8A07                       mov	al,[bx]
20722 520D           2246         FD            and	al,-3[bp]
20723 5210           84C0                       test	al,al
20724 5212           74           17            je  	.14C
20725                       00005214            .14D:
20726                                           ! 2246       {
20727                                           ! 2247        write_byte(0xa000,dest,attr&0x0f);
20728                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20729 5214           8A46         06            mov	al,6[bp]
20730 5217           24                     0F  and	al,*$F
20731                                           ! Debug: list unsigned char = al+0 (used reg = )
20732 5219           30E4                       xor	ah,ah
20733 521B           50                         push	ax
20734                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20735 521C           FF76         F6            push	-$A[bp]
20736                                           ! Debug: list unsigned int = const $A000 (used reg = )
20737 521F           B8                   A000  mov	ax,#$A000
20738 5222           50                         push	ax
20739                                           ! Debug: func () void = write_byte+0 (used reg = )
20740 5223           E8         2A9F            call	_write_byte
20741 5226           83C4                   06  add	sp,*6
20742                                           !BCC_EOS
20743                                           ! 2248       }
20744                                           ! 2249      else
20745                                           ! 2250       {
20746 5229           EB           10            jmp .14E
20747                       0000522B            .14C:
20748                                           ! 2251        write_byte(0xa000,dest,0x00);
20749                                           ! Debug: list int = const 0 (used reg = )
20750 522B           31C0                       xor	ax,ax
20751 522D           50                         push	ax
20752                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20753 522E           FF76         F6            push	-$A[bp]
20754                                           ! Debug: list unsigned int = const $A000 (used reg = )
20755 5231           B8                   A000  mov	ax,#$A000
20756 5234           50                         push	ax
20757                                           ! Debug: func () void = write_byte+0 (used reg = )
20758 5235           E8         2A8D            call	_write_byte
20759 5238           83C4                   06  add	sp,*6
20760                                           !BCC_EOS
20761                                           ! 2252       }
20762                                           ! 2253     }
20763                       0000523B            .14E:
20764                                           ! 2254   }
20765                       0000523B            .149:
20766                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20767 523B           8A46         FE            mov	al,-2[bp]
20768 523E           40                         inc	ax
20769 523F           8846         FE            mov	-2[bp],al
20770                       00005242            .14A:
20771                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20772 5242           8A46         FE            mov	al,-2[bp]
20773 5245           3C                     08  cmp	al,*8
20774 5247   7303    E9         FF7D            blo 	.14B
20775                       0000524C            .14F:
20776                       0000524C            .148:
20777                                           ! 2255 #asm
20778                       0000524C            .145:
20779                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20780 524C           8A46         FF            mov	al,-1[bp]
20781 524F           40                         inc	ax
20782 5250           8846         FF            mov	-1[bp],al
20783                       00005253            .146:
20784                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20785 5253           8A46         FF            mov	al,-1[bp]
20786 5256           3A46         0E            cmp	al,$E[bp]
20787 5259   7303    E9         FF4E            blo 	.147
20788                       0000525E            .150:
20789                       0000525E            .144:
20790                                           !BCC_EOS
20791                                           !BCC_ASM
20792                       0000000A            _write_gfx_char_pl4.j	set	$A
20793                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20794                       00000006            _write_gfx_char_pl4.fdata	set	6
20795                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20796                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20797                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20798                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20799                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20800                       0000000B            _write_gfx_char_pl4.i	set	$B
20801                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20802                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20803                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20804                       00000009            _write_gfx_char_pl4.mask	set	9
20805                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20806                       00000002            _write_gfx_char_pl4.dest	set	2
20807                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20808                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20809                       00000008            .write_gfx_char_pl4.xcurs	set	8
20810                       00000000            _write_gfx_char_pl4.src	set	0
20811                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20812                       00000012            _write_gfx_char_pl4.attr	set	$12
20813                       00000006            .write_gfx_char_pl4.attr	set	6
20814                       00000010            _write_gfx_char_pl4.car	set	$10
20815                       00000004            .write_gfx_char_pl4.car	set	4
20816                       00000004            _write_gfx_char_pl4.addr	set	4
20817                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20818 525E           BA                   03CE    mov dx, # 0x3ce
20819 5261           B8                   FF08    mov ax, #0xff08
20820 5264           EF                           out dx, ax
20821 5265           B8                   0005    mov ax, #0x0005
20822 5268           EF                           out dx, ax
20823 5269           B8                   0003    mov ax, #0x0003
20824 526C           EF                           out dx, ax
20825                                           ! 2263 endasm
20826                                           !BCC_ENDASM
20827                                           !BCC_EOS
20828                                           ! 2264 }
20829 526D           89EC                       mov	sp,bp
20830 526F           5D                         pop	bp
20831 5270           C3                         ret
20832                                           ! 2265 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20833                                           ! Register BX used in function write_gfx_char_pl4
20834                                           ! 2266 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20835                       00005271            _write_gfx_char_cga:
20836                                           !BCC_EOS
20837                                           !BCC_EOS
20838                                           !BCC_EOS
20839                                           !BCC_EOS
20840                                           !BCC_EOS
20841                                           !BCC_EOS
20842                                           ! 2267 {
20843                                           ! 2268  Bit8u i,j,mask,data;
20844                                           !BCC_EOS
20845                                           ! 2269  Bit8u *fdata;
20846                                           !BCC_EOS
20847                                           ! 2270  Bit16u addr,dest,src;
20848                                           !BCC_EOS
20849                                           ! 2271  fdata = &vgafont8;
20850 5271           55                         push	bp
20851 5272           89E5                       mov	bp,sp
20852 5274           83C4                   F4  add	sp,*-$C
20853                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20854 5277           BB                   0F28  mov	bx,#_vgafont8
20855 527A           895E         FA            mov	-6[bp],bx
20856                                           !BCC_EOS
20857                                           ! 2272  ad
20858                                           ! 2272 dr=(xcurs*bpp)+ycurs*320;
20859                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20860 527D           8A46         0A            mov	al,$A[bp]
20861 5280           30E4                       xor	ah,ah
20862 5282           B9                   0140  mov	cx,#$140
20863 5285           F7E9                       imul	cx
20864 5287           50                         push	ax
20865                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20866 5288           8A46         0E            mov	al,$E[bp]
20867 528B           30E4                       xor	ah,ah
20868 528D           89C3                       mov	bx,ax
20869 528F           8A46         08            mov	al,8[bp]
20870 5292           30E4                       xor	ah,ah
20871 5294           89D9                       mov	cx,bx
20872 5296           F7E9                       imul	cx
20873                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20874 5298           0346         F2            add	ax,-$E[bp]
20875 529B           44                         inc	sp
20876 529C           44                         inc	sp
20877                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20878 529D           8946         F8            mov	-8[bp],ax
20879                                           !BCC_EOS
20880                                           ! 2273  src = car * 8;
20881                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20882 52A0           8A46         04            mov	al,4[bp]
20883 52A3           30E4                       xor	ah,ah
20884 52A5           B1                     03  mov	cl,*3
20885 52A7           D3E0                       shl	ax,cl
20886                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20887 52A9           8946         F4            mov	-$C[bp],ax
20888                                           !BCC_EOS
20889                                           ! 2274  for(i=0;i<8;i++)
20890                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20891 52AC           30C0                       xor	al,al
20892 52AE           8846         FF            mov	-1[bp],al
20893                                           !BCC_EOS
20894                                           !BCC_EOS
20895                                           ! 2275   {
20896 52B1           E9         01B5            br 	.153
20897                       000052B4            .154:
20898                                           ! 2276    dest=addr+(i>>1)*80;
20899                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20900 52B4           8A46         FF            mov	al,-1[bp]
20901 52B7           30E4                       xor	ah,ah
20902 52B9           D1E8                       shr	ax,*1
20903                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20904 52BB           B9                   0050  mov	cx,*$50
20905 52BE           F7E9                       imul	cx
20906                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20907                                           ! Debug: expression subtree swapping
20908 52C0           0346         F8            add	ax,-8[bp]
20909                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20910 52C3           8946         F6            mov	-$A[bp],ax
20911                                           !BCC_EOS
20912                                           ! 2277    if (i & 1) dest += 0x2000;
20913                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20914 52C6           8A46         FF            mov	al,-1[bp]
20915 52C9           24                     01  and	al,*1
20916 52CB           84C0                       test	al,al
20917 52CD           74           09            je  	.155
20918                       000052CF            .156:
20919                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20920 52CF           8B46         F6            mov	ax,-$A[bp]
20921 52D2           05                   2000  add	ax,#$2000
20922 52D5           8946         F6            mov	-$A[bp],ax
20923                                           !BCC_EOS
20924                                           ! 2278    mask = 0x80;
20925                       000052D8            .155:
20926                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20927 52D8           B0                     80  mov	al,#$80
20928 52DA           8846         FD            mov	-3[bp],al
20929                                           !BCC_EOS
20930                                           ! 2279    if (bpp == 1)
20931                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20932 52DD           8A46         0E            mov	al,$E[bp]
20933 52E0           3C                     01  cmp	al,*1
20934 52E2   7403    E9         00B3            bne 	.157
20935                       000052E7            .158:
20936                                           ! 2280     {
20937                                           ! 2281      if (attr & 0x80)
20938                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20939 52E7           8A46         06            mov	al,6[bp]
20940 52EA           24                     80  and	al,#$80
20941 52EC           84C0                       test	al,al
20942 52EE           74           12            je  	.159
20943                       000052F0            .15A:
20944                                           ! 2282       {
20945                                           ! 2283        data = read_byte(0xb800,dest);
20946                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20947 52F0           FF76         F6            push	-$A[bp]
20948                                           ! Debug: list unsigned int = const $B800 (used reg = )
20949 52F3           B8                   B800  mov	ax,#$B800
20950 52F6           50                         push	ax
20951                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20952 52F7           E8         29A5            call	_read_byte
20953 52FA           83C4                   04  add	sp,*4
20954                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20955 52FD           8846         FC            mov	-4[bp],al
20956                                           !BCC_EOS
20957                                           ! 2284       }
20958                                           ! 2285      else
20959                                           ! 2286       {
20960 5300           EB           05            jmp .15B
20961                       00005302            .159:
20962                                           ! 2287        data = 0x00;
20963                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20964 5302           30C0                       xor	al,al
20965 5304           8846         FC            mov	-4[bp],al
20966                                           !BCC_EOS
20967                                           ! 2288       }
20968                                           ! 2289      for(j=0;j<8;j++)
20969                       00005307            .15B:
20970                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20971 5307           30C0                       xor	al,al
20972 5309           8846         FE            mov	-2[bp],al
20973                                           !BCC_EOS
20974                                           !BCC_EOS
20975                                           ! 2290       {
20976 530C           EB           6F            jmp .15E
20977                       0000530E            .15F:
20978                                           ! 2291        if (fdata[src+i] & mask)
20979                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20980 530E           8B46         F4            mov	ax,-$C[bp]
20981 5311           0246         FF            add	al,-1[bp]
20982 5314           80D4                   00  adc	ah,*0
20983                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20984 5317           0346         FA            add	ax,-6[bp]
20985 531A           89C3                       mov	bx,ax
20986                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20987 531C           8A07                       mov	al,[bx]
20988 531E           2246         FD            and	al,-3[bp]
20989 5321           84C0                       test	al,al
20990 5323           74           47            je  	.160
20991                       00005325            .161:
20992                                           ! 2292         {
20993                                           ! 2293          if (attr & 0x80)
20994                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20995 5325           8A46         06            mov	al,6[bp]
20996 5328           24                     80  and	al,#$80
20997 532A           84C0                       test	al,al
20998 532C           74           20            je  	.162
20999                       0000532E            .163:
21000                                           ! 2294           {
21001                                           ! 2295            data ^= (attr & 0x01) << (7-j);
21002                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21003 532E           B8                   0007  mov	ax,*7
21004 5331           2A46         FE            sub	al,-2[bp]
21005 5334           80DC                   00  sbb	ah,*0
21006 5337           50                         push	ax
21007                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21008 5338           8A46         06            mov	al,6[bp]
21009 533B           24                     01  and	al,*1
21010                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21011 533D           30E4                       xor	ah,ah
21012 533F           8B4E         F2            mov	cx,-$E[bp]
21013 5342           D3E0                       shl	ax,cl
21014 5344           44                         inc	sp
21015 5345           44                         inc	sp
21016                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21017 5346           3246         FC            xor	al,-4[bp]
21018 5349           8846         FC            mov	-4[bp],al
21019                                           !BCC_EOS
21020                                           ! 2296           }
21021                                           ! 2297          else
21022                                           ! 2298           {
21023 534C           EB           1E            jmp .164
21024                       0000534E            .162:
21025                                           ! 2299            data |= (attr & 0x01) << (7-j);
21026                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21027 534E           B8                   0007  mov	ax,*7
21028 5351           2A46         FE            sub	al,-2[bp]
21029 5354           80DC                   00  sbb	ah,*0
21030 5357           50                         push	ax
21031                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21032 5358           8A46         06            mov	al,6[bp]
21033 535B           24                     01  and	al,*1
21034                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21035 535D           30E4                       xor	ah,ah
21036 535F           8B4E         F2            mov	cx,-$E[bp]
21037 5362           D3E0                       shl	ax,cl
21038 5364           44                         inc	sp
21039 5365           44                         inc	sp
21040                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21041 5366           0A46         FC            or	al,-4[bp]
21042 5369           8846         FC            mov	-4[bp],al
21043                                           !BCC_EOS
21044                                           ! 2300           }
21045                                           ! 2301         }
21046                       0000536C            .164:
21047                                           ! 2302        mask >>= 1;
21048                       0000536C            .160:
21049                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21050 536C           8A46         FD            mov	al,-3[bp]
21051 536F           30E4                       xor	ah,ah
21052 5371           D1E8                       shr	ax,*1
21053 5373           8846         FD            mov	-3[bp],al
21054                                           !BCC_EOS
21055                                           ! 2303       }
21056                                           ! 2304      write_byte(0xb800,dest,data);
21057                       00005376            .15D:
21058                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21059 5376           8A46         FE            mov	al,-2[bp]
21060 5379           40                         inc	ax
21061 537A           8846         FE            mov	-2[bp],al
21062                       0000537D            .15E:
21063                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21064 537D           8A46         FE            mov	al,-2[bp]
21065 5380           3C                     08  cmp	al,*8
21066 5382           72           8A            jb 	.15F
21067                       00005384            .165:
21068                       00005384            .15C:
21069                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21070 5384           8A46         FC            mov	al,-4[bp]
21071 5387           30E4                       xor	ah,ah
21072 5389           50                         push	ax
21073                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21074 538A           FF76         F6            push	-$A[bp]
21075                                           ! Debug: list unsigned int = const $B800 (used reg = )
21076 538D           B8                   B800  mov	ax,#$B800
21077 5390           50                         push	ax
21078                                           ! Debug: func () void = write_byte+0 (used reg = )
21079 5391           E8         2931            call	_write_byte
21080 5394           83C4                   06  add	sp,*6
21081                                           !BCC_EOS
21082                                           ! 2305     }
21083                                           ! 2306    else
21084                                           ! 2307     {
21085 5397           E9         00C8            br 	.166
21086                       0000539A            .157:
21087                                           ! 2308      while (mask > 0)
21088                                           ! 2309       {
21089 539A           E9         00BB            br 	.168
21090                       0000539D            .169:
21091                                           ! 2310        if (attr & 0x80)
21092                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21093 539D           8A46         06            mov	al,6[bp]
21094 53A0           24                     80  and	al,#$80
21095 53A2           84C0                       test	al,al
21096 53A4           74           12            je  	.16A
21097                       000053A6            .16B:
21098                                           ! 2311         {
21099                                           ! 2312          data = read_byte(0xb800,dest);
21100                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21101 53A6           FF76         F6            push	-$A[bp]
21102                                           ! Debug: list unsigned int = const $B800 (used reg = )
21103 53A9           B8                   B800  mov	ax,#$B800
21104 53AC           50                         push	ax
21105                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21106 53AD           E8         28EF            call	_read_byte
21107 53B0           83C4                   04  add	sp,*4
21108                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21109 53B3           8846         FC            mov	-4[bp],al
21110                                           !BCC_EOS
21111                                           ! 2313         }
21112                                           ! 2314        else
21113                                           ! 2315         {
21114 53B6           EB           05            jmp .16C
21115                       000053B8            .16A:
21116                                           ! 2316          data = 0x00;
21117                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21118 53B8           30C0                       xor	al,al
21119 53BA           8846         FC            mov	-4[bp],al
21120                                           !BCC_EOS
21121                                           ! 2317         }
21122                                           ! 2318        for(j=0;j<4;j++)
21123                       000053BD            .16C:
21124                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21125 53BD           30C0                       xor	al,al
21126 53BF           8846         FE            mov	-2[bp],al
21127                                           !BCC_EOS
21128                                           !BCC_EOS
21129                                           ! 2319         {
21130 53C2           EB           73            jmp .16F
21131                       000053C4            .170:
21132                                           ! 2320          if (fdata[src+i] & mask)
21133                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21134 53C4           8B46         F4            mov	ax,-$C[bp]
21135 53C7           0246         FF            add	al,-1[bp]
21136 53CA           80D4                   00  adc	ah,*0
21137                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21138 53CD           0346         FA            add	ax,-6[bp]
21139 53D0           89C3                       mov	bx,ax
21140                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21141 53D2           8A07                       mov	al,[bx]
21142 53D4           2246         FD            and	al,-3[bp]
21143 53D7           84C0                       test	al,al
21144 53D9           74           4B            je  	.171
21145                       000053DB            .172:
21146                                           ! 2321           {
21147                                           ! 2322            if (attr & 0x80)
21148                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21149 53DB           8A46         06            mov	al,6[bp]
21150 53DE           24                     80  and	al,#$80
21151 53E0           84C0                       test	al,al
21152 53E2           74           22            je  	.173
21153                       000053E4            .174:
21154                                           ! 2323             {
21155                                           ! 2324              data ^= (attr & 0x03) << ((3-j)*2);
21156                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21157 53E4           B8                   0003  mov	ax,*3
21158 53E7           2A46         FE            sub	al,-2[bp]
21159 53EA           80DC                   00  sbb	ah,*0
21160                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21161 53ED           D1E0                       shl	ax,*1
21162 53EF           50                         push	ax
21163                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21164 53F0           8A46         06            mov	al,6[bp]
21165 53F3           24                     03  and	al,*3
21166                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21167 53F5           30E4                       xor	ah,ah
21168 53F7           8B4E         F2            mov	cx,-$E[bp]
21169 53FA           D3E0                       shl	ax,cl
21170 53FC           44                         inc	sp
21171 53FD           44                         inc	sp
21172                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21173 53FE           3246         FC            xor	al,-4[bp]
21174 5401           8846         FC            mov	-4[bp],al
21175                                           !BCC_EOS
21176                                           ! 2325             }
21177                                           ! 2326            else
21178                                           ! 2327             {
21179 5404           EB           20            jmp .175
21180                       00005406            .173:
21181                                           ! 2328              data |= (attr & 0x03) << ((3-j)*2);
21182                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21183 5406           B8                   0003  mov	ax,*3
21184 5409           2A46         FE            sub	al,-2[bp]
21185 540C           80DC                   00  sbb	ah,*0
21186                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21187 540F           D1E0                       shl	ax,*1
21188 5411           50                         push	ax
21189                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21190 5412           8A46         06            mov	al,6[bp]
21191 5415           24                     03  and	al,*3
21192                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21193 5417           30E4                       xor	ah,ah
21194 5419           8B4E         F2            mov	cx,-$E[bp]
21195 541C           D3E0                       shl	ax,cl
21196 541E           44                         inc	sp
21197 541F           44                         inc	sp
21198                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21199 5420           0A46         FC            or	al,-4[bp]
21200 5423           8846         FC            mov	-4[bp],al
21201                                           !BCC_EOS
21202                                           ! 2329             }
21203                                           ! 2330           }
21204                       00005426            .175:
21205                                           ! 2331          mask >>= 1;
21206                       00005426            .171:
21207                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21208 5426           8A46         FD            mov	al,-3[bp]
21209 5429           30E4                       xor	ah,ah
21210 542B           D1E8                       shr	ax,*1
21211 542D           8846         FD            mov	-3[bp],al
21212                                           !BCC_EOS
21213                                           ! 2332         }
21214                                           ! 2333        write_byte(0xb800,dest,data);
21215                       00005430            .16E:
21216                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21217 5430           8A46         FE            mov	al,-2[bp]
21218 5433           40                         inc	ax
21219 5434           8846         FE            mov	-2[bp],al
21220                       00005437            .16F:
21221                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21222 5437           8A46         FE            mov	al,-2[bp]
21223 543A           3C                     04  cmp	al,*4
21224 543C           72           86            jb 	.170
21225                       0000543E            .176:
21226                       0000543E            .16D:
21227                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21228 543E           8A46         FC            mov	al,-4[bp]
21229 5441           30E4                       xor	ah,ah
21230 5443           50                         push	ax
21231                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21232 5444           FF76         F6            push	-$A[bp]
21233                                           ! Debug: list unsigned int = const $B800 (used reg = )
21234 5447           B8                   B800  mov	ax,#$B800
21235 544A           50                         push	ax
21236                                           ! Debug: func () void = write_byte+0 (used reg = )
21237 544B           E8         2877            call	_write_byte
21238 544E           83C4                   06  add	sp,*6
21239                                           !BCC_EOS
21240                                           ! 2334        dest += 1;
21241                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21242 5451           8B46         F6            mov	ax,-$A[bp]
21243 5454           40                         inc	ax
21244 5455           8946         F6            mov	-$A[bp],ax
21245                                           !BCC_EOS
21246                                           ! 2335       }
21247                                           ! 2336     }
21248                       00005458            .168:
21249                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21250 5458           8A46         FD            mov	al,-3[bp]
21251 545B           84C0                       test	al,al
21252 545D   7403    E9         FF3B            bne 	.169
21253                       00005462            .177:
21254                       00005462            .167:
21255                                           ! 2337   }
21256                       00005462            .166:
21257                                           ! 2338 }
21258                       00005462            .152:
21259                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21260 5462           8A46         FF            mov	al,-1[bp]
21261 5465           40                         inc	ax
21262 5466           8846         FF            mov	-1[bp],al
21263                       00005469            .153:
21264                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21265 5469           8A46         FF            mov	al,-1[bp]
21266 546C           3C                     08  cmp	al,*8
21267 546E   7303    E9         FE41            blo 	.154
21268                       00005473            .178:
21269                       00005473            .151:
21270 5473           89EC                       mov	sp,bp
21271 5475           5D                         pop	bp
21272 5476           C3                         ret
21273                                           ! 2339 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21274                                           ! Register BX used in function write_gfx_char_cga
21275                                           ! 2340 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21276                       00005477            _write_gfx_char_lin:
21277                                           !BCC_EOS
21278                                           !BCC_EOS
21279                                           !BCC_EOS
21280                                           !BCC_EOS
21281                                           !BCC_EOS
21282                                           ! 2341 {
21283                                           ! 2342  Bit8u i,j,mask,data;
21284                                           !BCC_EOS
21285                                           ! 2343  Bit8u *fdata;
21286                                           !BCC_EOS
21287                                           ! 2344  Bit16u addr,dest,src;
21288                                           !BCC_EOS
21289                                           ! 2345  fdata = &vgafont8;
21290 5477           55                         push	bp
21291 5478           89E5                       mov	bp,sp
21292 547A           83C4                   F4  add	sp,*-$C
21293                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21294 547D           BB                   0F28  mov	bx,#_vgafont8
21295 5480           895E         FA            mov	-6[bp],bx
21296                                           !BCC_EOS
21297                                           ! 2346  addr=xcurs*8+ycurs*nbcols*64;
21298                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21299 5483           8A46         0C            mov	al,$C[bp]
21300 5486           30E4                       xor	ah,ah
21301 5488           89C3                       mov	bx,ax
21302 548A           8A46         0A            mov	al,$A[bp]
21303 548D           30E4                       xor	ah,ah
21304 548F           89D9                       mov	cx,bx
21305 5491           F7E9                       imul	cx
21306                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21307 5493           B1                     06  mov	cl,*6
21308 5495           D3E0                       shl	ax,cl
21309 5497           50                         push	ax
21310                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21311 5498           8A46         08            mov	al,8[bp]
21312 549B           30E4                       xor	ah,ah
21313 549D           B1                     03  mov	cl,*3
21314 549F           D3E0                       shl	ax,cl
21315                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21316 54A1           0346         F2            add	ax,-$E[bp]
21317 54A4           44                         inc	sp
21318 54A5           44                         inc	sp
21319                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21320 54A6           8946         F8            mov	-8[bp],ax
21321                                           !BCC_EOS
21322                                           ! 2347  src = car * 8;
21323                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21324 54A9           8A46         04            mov	al,4[bp]
21325 54AC           30E4                       xor	ah,ah
21326 54AE           B1                     03  mov	cl,*3
21327 54B0           D3E0                       shl	ax,cl
21328                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21329 54B2           8946         F4            mov	-$C[bp],ax
21330                                           !BCC_EOS
21331                                           ! 2348  for(i=0;i<8;i++)
21332                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21333 54B5           30C0                       xor	al,al
21334 54B7           8846         FF            mov	-1[bp],al
21335                                           !BCC_EOS
21336                                           !BCC_EOS
21337                                           ! 2349   {
21338 54BA           E9         0081            br 	.17B
21339                       000054BD            .17C:
21340                                           ! 2350    dest=addr+i*nbcols*8;
21341                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21342 54BD           8A46         0C            mov	al,$C[bp]
21343 54C0           30E4                       xor	ah,ah
21344 54C2           89C3                       mov	bx,ax
21345 54C4           8A46         FF            mov	al,-1[bp]
21346 54C7           30E4                       xor	ah,ah
21347 54C9           89D9                       mov	cx,bx
21348 54CB           F7E9                       imul	cx
21349                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21350 54CD           B1                     03  mov	cl,*3
21351 54CF           D3E0                       shl	ax,cl
21352                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21353                                           ! Debug: expression subtree swapping
21354 54D1           0346         F8            add	ax,-8[bp]
21355                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21356 54D4           8946         F6            mov	-$A[bp],ax
21357                                           !BCC_EOS
21358                                           ! 2351    mask = 0x80;
21359                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21360 54D7           B0                     80  mov	al,#$80
21361 54D9           8846         FD            mov	-3[bp],al
21362                                           !BCC_EOS
21363                                           ! 2352    for(j=0;j<8;j++)
21364                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21365 54DC           30C0                       xor	al,al
21366 54DE           8846         FE            mov	-2[bp],al
21367                                           !BCC_EOS
21368                                           !BCC_EOS
21369                                           ! 2353     {
21370 54E1           EB           4D            jmp .17F
21371                       000054E3            .180:
21372                                           ! 2354      data = 0x00;
21373                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21374 54E3           30C0                       xor	al,al
21375 54E5           8846         FC            mov	-4[bp],al
21376                                           !BCC_EOS
21377                                           ! 2355      if (fdata[src+i] & mask)
21378                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21379 54E8           8B46         F4            mov	ax,-$C[bp]
21380 54EB           0246         FF            add	al,-1[bp]
21381 54EE           80D4                   00  adc	ah,*0
21382                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21383 54F1           0346         FA            add	ax,-6[bp]
21384 54F4           89C3                       mov	bx,ax
21385                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21386 54F6           8A07                       mov	al,[bx]
21387 54F8           2246         FD            and	al,-3[bp]
21388 54FB           84C0                       test	al,al
21389 54FD           74           06            je  	.181
21390                       000054FF            .182:
21391                                           ! 2356       {
21392                                           ! 2357        data = attr;
21393                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21394 54FF           8A46         06            mov	al,6[bp]
21395 5502           8846         FC            mov	-4[bp],al
21396                                           !BCC_EOS
21397                                           ! 2358       }
21398                                           ! 2359      write_byte(0xa000,dest+j,data);
21399                       00005505            .181:
21400                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21401 5505           8A46         FC            mov	al,-4[bp]
21402 5508           30E4                       xor	ah,ah
21403 550A           50                         push	ax
21404                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21405 550B           8B46         F6            mov	ax,-$A[bp]
21406 550E           0246         FE            add	al,-2[bp]
21407 5511           80D4                   00  adc	ah,*0
21408                                           ! Debug: list unsigned int = ax+0 (used reg = )
21409 5514           50                         push	ax
21410                                           ! Debug: list unsigned int = const $A000 (used reg = )
21411 5515           B8                   A000  mov	ax,#$A000
21412 5518           50                         push	ax
21413                                           ! Debug: func () void = write_byte+0 (used reg = )
21414 5519           E8         27A9            call	_write_byte
21415 551C           83C4                   06  add	sp,*6
21416                                           !BCC_EOS
21417                                           ! 2360      mask >>= 1;
21418                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21419 551F           8A46         FD            mov	al,-3[bp]
21420 5522           30E4                       xor	ah,ah
21421 5524           D1E8                       shr	ax,*1
21422 5526           8846         FD            mov	-3[bp],al
21423                                           !BCC_EOS
21424                                           ! 2361     }
21425                                           ! 2362   }
21426                       00005529            .17E:
21427                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21428 5529           8A46         FE            mov	al,-2[bp]
21429 552C           40                         inc	ax
21430 552D           8846         FE            mov	-2[bp],al
21431                       00005530            .17F:
21432                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21433 5530           8A46         FE            mov	al,-2[bp]
21434 5533           3C                     08  cmp	al,*8
21435 5535           72           AC            jb 	.180
21436                       00005537            .183:
21437                       00005537            .17D:
21438                                           ! 2363 }
21439                       00005537            .17A:
21440                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21441 5537           8A46         FF            mov	al,-1[bp]
21442 553A           40                         inc	ax
21443 553B           8846         FF            mov	-1[bp],al
21444                       0000553E            .17B:
21445                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21446 553E           8A46         FF            mov	al,-1[bp]
21447 5541           3C                     08  cmp	al,*8
21448 5543   7303    E9         FF75            blo 	.17C
21449                       00005548            .184:
21450                       00005548            .179:
21451 5548           89EC                       mov	sp,bp
21452 554A           5D                         pop	bp
21453 554B           C3                         ret
21454                                           ! 2364 static void biosfn_write_char_attr (car,page,attr,count)
21455                                           ! Register BX used in function write_gfx_char_lin
21456                                           ! 2365 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21457                       0000554C            _biosfn_write_char_attr:
21458                                           !BCC_EOS
21459                                           !BCC_EOS
21460                                           !BCC_EOS
21461                                           !BCC_EOS
21462                                           ! 2366 {
21463                                           ! 2367  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21464                                           !BCC_EOS
21465                                           ! 2368  Bit16u nbcols,nbrows,address;
21466                                           !BCC_EOS
21467                                           ! 2369  Bit16u cursor,dummy;
21468                                           !BCC_EOS
21469                                           ! 2370  mode=read_byte(0x40,0x49);
21470 554C           55                         push	bp
21471 554D           89E5                       mov	bp,sp
21472 554F           83C4                   F0  add	sp,*-$10
21473                                           ! Debug: list int = const $49 (used reg = )
21474 5552           B8                   0049  mov	ax,*$49
21475 5555           50                         push	ax
21476                                           ! Debug: list int = const $40 (used reg = )
21477 5556           B8                   0040  mov	ax,*$40
21478 5559           50                         push	ax
21479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21480 555A           E8         2742            call	_read_byte
21481 555D           83C4                   04  add	sp,*4
21482                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21483 5560           8846         FC            mov	-4[bp],al
21484                                           !BCC_EOS
21485                                           ! 2371  line=find_vga_entry(mode);
21486                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21487 5563           8A46         FC            mov	al,-4[bp]
21488 5566           30E4                       xor	ah,ah
21489 5568           50                         push	ax
21490                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21491 5569           E8         2647            call	_find_vga_entry
21492 556C           44                         inc	sp
21493 556D           44                         inc	sp
21494                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21495 556E           8846         FB            mov	-5[bp],al
21496                                           !BCC_EOS
21497                                           ! 2372  if(line==0xFF)return;
21498                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21499 5571           8A46         FB            mov	al,-5[bp]
21500 5574           3C                     FF  cmp	al,#$FF
21501 5576           75           04            jne 	.185
21502                       00005578            .186:
21503 5578           89EC                       mov	sp,bp
21504 557A           5D                         pop	bp
21505 557B           C3                         ret
21506                                           !BCC_EOS
21507                                           ! 2373  biosfn_get_cursor_pos(page,&dummy,&cursor);
21508                       0000557C            .185:
21509                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21510 557C           8D5E         F2            lea	bx,-$E[bp]
21511 557F           53                         push	bx
21512                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21513 5580           8D5E         F0            lea	bx,-$10[bp]
21514 5583           53                         push	bx
21515                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21516 5584           8A46         06            mov	al,6[bp]
21517 5587           30E4                       xor	ah,ah
21518 5589           50                         push	ax
21519                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21520 558A           E8         EE2A            call	_biosfn_get_cursor_pos
21521 558D           83C4                   06  add	sp,*6
21522                                           !BCC_EOS
21523                                           ! 2374  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21524                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21525 5590           8A46         F2            mov	al,-$E[bp]
21526                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21527 5593           8846         FE            mov	-2[bp],al
21528                                           !BCC_EOS
21529                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21530 5596           8B46         F2            mov	ax,-$E[bp]
21531 5599           30C0                       xor	al,al
21532                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21533 559B           88E0                       mov	al,ah
21534 559D           30E4                       xor	ah,ah
21535                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21536 559F           8846         FD            mov	-3[bp],al
21537                                           !BCC_EOS
21538                                           ! 2375  nbrows=r
21539                                           ! 2375 ead_byte(0x40,0x84)+1;
21540                                           ! Debug: list int = const $84 (used reg = )
21541 55A2           B8                   0084  mov	ax,#$84
21542 55A5           50                         push	ax
21543                                           ! Debug: list int = const $40 (used reg = )
21544 55A6           B8                   0040  mov	ax,*$40
21545 55A9           50                         push	ax
21546                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21547 55AA           E8         26F2            call	_read_byte
21548 55AD           83C4                   04  add	sp,*4
21549                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21550 55B0           30E4                       xor	ah,ah
21551                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21552 55B2           40                         inc	ax
21553 55B3           8946         F6            mov	-$A[bp],ax
21554                                           !BCC_EOS
21555                                           ! 2376  nbcols=read_word(0x40,0x4A);
21556                                           ! Debug: list int = const $4A (used reg = )
21557 55B6           B8                   004A  mov	ax,*$4A
21558 55B9           50                         push	ax
21559                                           ! Debug: list int = const $40 (used reg = )
21560 55BA           B8                   0040  mov	ax,*$40
21561 55BD           50                         push	ax
21562                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21563 55BE           E8         26F1            call	_read_word
21564 55C1           83C4                   04  add	sp,*4
21565                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21566 55C4           8946         F8            mov	-8[bp],ax
21567                                           !BCC_EOS
21568                                           ! 2377  if(vga_modes[line].class==0x00)
21569                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21570 55C7           8A46         FB            mov	al,-5[bp]
21571 55CA           30E4                       xor	ah,ah
21572 55CC           B1                     03  mov	cl,*3
21573 55CE           D3E0                       shl	ax,cl
21574 55D0           89C3                       mov	bx,ax
21575 55D2           81C3                 01C4  add	bx,#_vga_modes
21576                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21577 55D6           8A47         01            mov	al,1[bx]
21578 55D9           84C0                       test	al,al
21579 55DB           75           6A            jne 	.187
21580                       000055DD            .188:
21581                                           ! 2378   {
21582                                           ! 2379    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21583                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21584 55DD           8A46         FD            mov	al,-3[bp]
21585 55E0           30E4                       xor	ah,ah
21586 55E2           8B4E         F8            mov	cx,-8[bp]
21587 55E5           F7E9                       imul	cx
21588                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21589                                           ! Debug: expression subtree swapping
21590 55E7           0246         FE            add	al,-2[bp]
21591 55EA           80D4                   00  adc	ah,*0
21592                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21593 55ED           D1E0                       shl	ax,*1
21594 55EF           50                         push	ax
21595                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21596 55F0           8B46         F8            mov	ax,-8[bp]
21597 55F3           8B4E         F6            mov	cx,-$A[bp]
21598 55F6           F7E9                       imul	cx
21599                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21600 55F8           D1E0                       shl	ax,*1
21601                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21602 55FA           0C                     FF  or	al,#$FF
21603                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21604                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21605 55FC           89C3                       mov	bx,ax
21606 55FE           8A46         06            mov	al,6[bp]
21607 5601           30E4                       xor	ah,ah
21608 5603           93                         xchg	ax,bx
21609 5604           40                         inc	ax
21610 5605           89D9                       mov	cx,bx
21611 5607           F7E9                       imul	cx
21612                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21613 5609           0346         EE            add	ax,-$12[bp]
21614 560C           44                         inc	sp
21615 560D           44                         inc	sp
21616                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21617 560E           8946         F4            mov	-$C[bp],ax
21618                                           !BCC_EOS
21619                                           ! 2380    dummy=((Bit16u)attr<<8)+car;
21620                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21621 5611           8A46         08            mov	al,8[bp]
21622 5614           30E4                       xor	ah,ah
21623                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21624 5616           88C4                       mov	ah,al
21625 5618           30C0                       xor	al,al
21626                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21627 561A           0246         04            add	al,4[bp]
21628 561D           80D4                   00  adc	ah,*0
21629                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21630 5620           8946         F0            mov	-$10[bp],ax
21631                                           !BCC_EOS
21632                                           ! 2381    memsetw(vga_modes[line].sstart,address,dummy,count);
21633                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21634 5623           FF76         0A            push	$A[bp]
21635                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21636 5626           FF76         F0            push	-$10[bp]
21637                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21638 5629           FF76         F4            push	-$C[bp]
21639                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21640 562C           8A46         FB            mov	al,-5[bp]
21641 562F           30E4                       xor	ah,ah
21642 5631           B1                     03  mov	cl,*3
21643 5633           D3E0                       shl	ax,cl
21644 5635           89C3                       mov	bx,ax
21645 5637           81C3                 01C4  add	bx,#_vga_modes
21646                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21647 563B           FF77         04            push	4[bx]
21648                                           ! Debug: func () void = memsetw+0 (used reg = )
21649 563E           E8         25D9            call	_memsetw
21650 5641           83C4                   08  add	sp,*8
21651                                           !BCC_EOS
21652                                           ! 2382   }
21653                                           ! 2383  else
21654                                           ! 2384   {
21655 5644           E9         00FB            br 	.189
21656                       00005647            .187:
21657                                           ! 2385    cheight=video_param_table[line_to_vpti[line]].cheight;
21658                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21659 5647           8A46         FB            mov	al,-5[bp]
21660 564A           30E4                       xor	ah,ah
21661 564C           89C3                       mov	bx,ax
21662                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21663 564E           8A87       0244            mov	al,_line_to_vpti[bx]
21664 5652           30E4                       xor	ah,ah
21665 5654           B1                     06  mov	cl,*6
21666 5656           D3E0                       shl	ax,cl
21667 5658           89C3                       mov	bx,ax
21668 565A           81C3                 0258  add	bx,#_video_param_table
21669                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21670 565E           8A47         02            mov	al,2[bx]
21671 5661           8846         FF            mov	-1[bp],al
21672                                           !BCC_EOS
21673                                           ! 2386    bpp=vga_modes[line].pixbits;
21674                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21675 5664           8A46         FB            mov	al,-5[bp]
21676 5667           30E4                       xor	ah,ah
21677 5669           B1                     03  mov	cl,*3
21678 566B           D3E0                       shl	ax,cl
21679 566D           89C3                       mov	bx,ax
21680 566F           81C3                 01C4  add	bx,#_vga_modes
21681                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21682 5673           8A47         03            mov	al,3[bx]
21683 5676           8846         FA            mov	-6[bp],al
21684                                           !BCC_EOS
21685                                           ! 2387    while((count-->0) && (xcurs<nbcols))
21686                                           ! 2388     {
21687 5679           E9         00AD            br 	.18B
21688                       0000567C            .18C:
21689                                           ! 2389      switch(vga_modes[line].memmodel)
21690                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21691 567C           8A46         FB            mov	al,-5[bp]
21692 567F           30E4                       xor	ah,ah
21693 5681           B1                     03  mov	cl,*3
21694 5683           D3E0                       shl	ax,cl
21695 5685           89C3                       mov	bx,ax
21696 5687           81C3                 01C4  add	bx,#_vga_modes
21697 568B           8A47         02            mov	al,2[bx]
21698                                           ! 2390       {
21699 568E           EB           7A            jmp .18F
21700                                           ! 2391        case 0x04:
21701                                           ! 2392        case 0x03:
21702                       00005690            .190:
21703                                           ! 2393          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21704                       00005690            .191:
21705                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21706 5690           8A46         FF            mov	al,-1[bp]
21707 5693           30E4                       xor	ah,ah
21708 5695           50                         push	ax
21709                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21710 5696           FF76         F8            push	-8[bp]
21711                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21712 5699           8A46         FD            mov	al,-3[bp]
21713 569C           30E4                       xor	ah,ah
21714 569E           50                         push	ax
21715                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21716 569F           8A46         FE            mov	al,-2[bp]
21717 56A2           30E4                       xor	ah,ah
21718 56A4           50                         push	ax
21719                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21720 56A5           8A46         08            mov	al,8[bp]
21721 56A8           30E4                       xor	ah,ah
21722 56AA           50                         push	ax
21723                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21724 56AB           8A46         04            mov	al,4[bp]
21725 56AE           30E4                       xor	ah,ah
21726 56B0           50                         push	ax
21727                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21728 56B1           E8         FA48            call	_write_gfx_char_pl4
21729 56B4           83C4                   0C  add	sp,*$C
21730                                           !BCC_EOS
21731                                           ! 2394          break;
21732 56B7           EB           69            jmp .18D
21733                                           !BCC_EOS
21734                                           ! 2395        case 0x02:
21735                                           ! 2396          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21736                       000056B9            .192:
21737                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21738 56B9           8A46         FA            mov	al,-6[bp]
21739 56BC           30E4                       xor	ah,ah
21740 56BE           50                         push	ax
21741                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21742 56BF           FF76         F8            push	-8[bp]
21743                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21744 56C2           8A46         FD            mov	al,-3[bp]
21745 56C5           30E4                       xor	ah,ah
21746 56C7           50                         push	ax
21747                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21748 56C8           8A46         FE            mov	al,-2[bp]
21749 56CB           30E4                       xor	ah,ah
21750 56CD           50                         push	ax
21751                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21752 56CE           8A46         08            mov	al,8[bp]
21753 56D1           30E4                       xor	ah,ah
21754 56D3           50                         push	ax
21755                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21756 56D4           8A46         04            mov	al,4[bp]
21757 56D7           30E4                       xor	ah,ah
21758 56D9           50                         push	ax
21759                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21760 56DA           E8         FB94            call	_write_gfx_char_cga
21761 56DD           83C4                   0C  add	sp,*$C
21762                                           !BCC_EOS
21763                                           ! 2397          break;
21764 56E0           EB           40            jmp .18D
21765                                           !BCC_EOS
21766                                           ! 2398        case 0x05:
21767                                           ! 2399          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21768                       000056E2            .193:
21769                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21770 56E2           FF76         F8            push	-8[bp]
21771                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21772 56E5           8A46         FD            mov	al,-3[bp]
21773 56E8           30E4                       xor	ah,ah
21774 56EA           50                         push	ax
21775                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21776 56EB           8A46         FE            mov	al,-2[bp]
21777 56EE           30E4                       xor	ah,ah
21778 56F0           50                         push	ax
21779                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21780 56F1           8A46         08            mov	al,8[bp]
21781 56F4           30E4                       xor	ah,ah
21782 56F6           50                         push	ax
21783                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21784 56F7           8A46         04            mov	al,4[bp]
21785 56FA           30E4                       xor	ah,ah
21786 56FC           50                         push	ax
21787                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21788 56FD           E8         FD77            call	_write_gfx_char_lin
21789 5700           83C4                   0A  add	sp,*$A
21790                                           !BCC_EOS
21791                                           ! 2400          break;
21792 5703           EB           1D            jmp .18D
21793                                           !BCC_EOS
21794                                           ! 2401        default:
21795                                           ! 2402          unimplemented();
21796                       00005705            .194:
21797                                           ! Debug: func () void = unimplemented+0 (used reg = )
21798 5705           E8         2626            call	_unimplemented
21799                                           !BCC_EOS
21800                                           ! 2403       }
21801                                           ! 2404      xcurs++;
21802 5708           EB           18            jmp .18D
21803                       0000570A            .18F:
21804 570A           2C                     02  sub	al,*2
21805 570C           74           AB            je 	.192
21806 570E           2C                     01  sub	al,*1
21807 5710   7503    E9         FF7B            beq 	.191
21808 5715           2C                     01  sub	al,*1
21809 5717   7503    E9         FF74            beq 	.190
21810 571C           2C                     01  sub	al,*1
21811 571E           74           C2            je 	.193
21812 5720           EB           E3            jmp	.194
21813                       00005722            .18D:
21814                       FFFFFFEE            ..FFFA	=	-$12
21815                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21816 5722           8A46         FE            mov	al,-2[bp]
21817 5725           40                         inc	ax
21818 5726           8846         FE            mov	-2[bp],al
21819                                           !BCC_EOS
21820                                           ! 2405     }
21821                                           ! 2406   }
21822                       00005729            .18B:
21823                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21824 5729           8B46         0A            mov	ax,$A[bp]
21825 572C           48                         dec	ax
21826 572D           8946         0A            mov	$A[bp],ax
21827                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21828 5730           3D                   FFFF  cmp	ax,*-1
21829 5733           74           0D            je  	.195
21830                       00005735            .196:
21831                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21832 5735           8A46         FE            mov	al,-2[bp]
21833 5738           30E4                       xor	ah,ah
21834 573A           3B46         F8            cmp	ax,-8[bp]
21835 573D   7303    E9         FF3A            blo 	.18C
21836                       00005742            .195:
21837                       00005742            .18A:
21838                                           ! 2407 }
21839                       00005742            .189:
21840 5742           89EC                       mov	sp,bp
21841 5744           5D                         pop	bp
21842 5745           C3                         ret
21843                                           ! 2408 static void biosfn_write_char_only (car,page,attr,count)
21844                                           ! Register BX used in function biosfn_write_char_attr
21845                                           ! 2409 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21846                       00005746            _biosfn_write_char_only:
21847                                           !BCC_EOS
21848                                           !BCC_EOS
21849                                           !BCC_EOS
21850                                           !BCC_EOS
21851                                           ! 2410 {
21852                                           ! 2411  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21853                                           !BCC_EOS
21854                                           ! 2412  Bit16u nbcols,nbrows,address;
21855                                           !BCC_EOS
21856                                           ! 2413  Bit16u cursor,dummy;
21857                                           !BCC_EOS
21858                                           ! 2414  mode=read_byte(0x40,0x49);
21859 5746           55                         push	bp
21860 5747           89E5                       mov	bp,sp
21861 5749           83C4                   F0  add	sp,*-$10
21862                                           ! Debug: list int = const $49 (used reg = )
21863 574C           B8                   0049  mov	ax,*$49
21864 574F           50                         push	ax
21865                                           ! Debug: list int = const $40 (used reg = )
21866 5750           B8                   0040  mov	ax,*$40
21867 5753           50                         push	ax
21868                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21869 5754           E8         2548            call	_read_byte
21870 5757           83C4                   04  add	sp,*4
21871                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21872 575A           8846         FC            mov	-4[bp],al
21873                                           !BCC_EOS
21874                                           ! 2415  line=find_vga_entry(mode);
21875                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21876 575D           8A46         FC            mov	al,-4[bp]
21877 5760           30E4                       xor	ah,ah
21878 5762           50                         push	ax
21879                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21880 5763           E8         244D            call	_find_vga_entry
21881 5766           44                         inc	sp
21882 5767           44                         inc	sp
21883                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21884 5768           8846         FB            mov	-5[bp],al
21885                                           !BCC_EOS
21886                                           ! 2416  if(line==0xFF)return;
21887                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21888 576B           8A46         FB            mov	al,-5[bp]
21889 576E           3C                     FF  cmp	al,#$FF
21890 5770           75           04            jne 	.197
21891                       00005772            .198:
21892 5772           89EC                       mov	sp,bp
21893 5774           5D                         pop	bp
21894 5775           C3                         ret
21895                                           !BCC_EOS
21896                                           ! 2417  biosfn_get_cursor_pos(page,&dummy,&cursor);
21897                       00005776            .197:
21898                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21899 5776           8D5E         F2            lea	bx,-$E[bp]
21900 5779           53                         push	bx
21901                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21902 577A           8D5E         F0            lea	bx,-$10[bp]
21903 577D           53                         push	bx
21904                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21905 577E           8A46         06            mov	al,6[bp]
21906 5781           30E4                       xor	ah,ah
21907 5783           50                         push	ax
21908                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21909 5784           E8         EC30            call	_biosfn_get_cursor_pos
21910 5787           83C4                   06  add	sp,*6
21911                                           !BCC_EOS
21912                                           ! 2418  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21913                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21914 578A           8A46         F2            mov	al,-$E[bp]
21915                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21916 578D           8846         FE            mov	-2[bp],al
21917                                           !BCC_EOS
21918                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21919 5790           8B46         F2            mov	ax,-$E[bp]
21920 5793           30C0                       xor	al,al
21921                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21922 5795           88E0                       mov	al,ah
21923 5797           30E4                       xor	ah,ah
21924                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21925 5799           8846         FD            mov	-3[bp],al
21926                                           !BCC_EOS
21927                                           ! 2419  nbrows=read_byte(0x40,0x84)+1;
21928                                           ! Debug: list int = const $84 (used reg = )
21929 579C           B8                   0084  mov	ax,#$84
21930 579F           50                         push	ax
21931                                           ! Debug: list int = const $40 (used reg = )
21932 57A0           B8                   0040  mov	ax,*$40
21933 57A3           50                         push	ax
21934                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21935 57A4           E8         24F8            call	_read_byte
21936 57A7           83C4                   04  add	sp,*4
21937                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21938 57AA           30E4                       xor	ah,ah
21939                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21940 57AC           40                         inc	ax
21941 57AD           8946         F6            mov	-$A[bp],ax
21942                                           !BCC_EOS
21943                                           ! 2420  nbcols=read_word(0x40,0x4A);
21944                                           ! Debug: list int = const $4A (used reg = )
21945 57B0           B8                   004A  mov	ax,*$4A
21946 57B3           50                         push	ax
21947                                           ! Debug: list int = const $40 (used reg = )
21948 57B4           B8                   0040  mov	ax,*$40
21949 57B7           50                         push	ax
21950                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21951 57B8           E8         24F7            call	_read_word
21952 57BB           83C4                   04  add	sp,*4
21953                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21954 57BE           8946         F8            mov	-8[bp],ax
21955                                           !BCC_EOS
21956                                           ! 2421  if(vga_modes[line].class==0x00)
21957                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21958 57C1           8A46         FB            mov	al,-5[bp]
21959 57C4           30E4                       xor	ah,ah
21960 57C6           B1                     03  mov	cl,*3
21961 57C8           D3E0                       shl	ax,cl
21962 57CA           89C3                       mov	bx,ax
21963 57CC           81C3                 01C4  add	bx,#_vga_modes
21964                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21965 57D0           8A47         01            mov	al,1[bx]
21966 57D3           84C0                       test	al,al
21967 57D5           75           6E            jne 	.199
21968                       000057D7            .19A:
21969                                           ! 2422   {
21970                                           ! 2423    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21971                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21972 57D7           8A46         FD            mov	al,-3[bp]
21973 57DA           30E4                       xor	ah,ah
21974 57DC           8B4E         F8            mov	cx,-8[bp]
21975 57DF           F7E9                       imul	cx
21976                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21977                                           ! Debug: expression subtree swapping
21978 57E1           0246         FE            add	al,-2[bp]
21979 57E4           80D4                   00  adc	ah,*0
21980                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21981 57E7           D1E0                       shl	ax,*1
21982 57E9           50                         push	ax
21983                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21984 57EA           8B46         F8            mov	ax,-8[bp]
21985 57ED           8B4E         F6            mov	cx,-$A[bp]
21986 57F0           F7E9                       imul	cx
21987                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21988 57F2           D1E0                       shl	ax,*1
21989                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21990 57F4           0C                     FF  or	al,#$FF
21991                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21992                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21993 57F6           89C3                       mov	bx,ax
21994 57F8           8A46         06            mov	al,6[bp]
21995 57FB           30E4                       xor	ah,ah
21996 57FD           93                         xchg	ax,bx
21997 57FE           40                         inc	ax
21998 57FF           89D9                       mov	cx,bx
21999 5801           F7E9                       imul	cx
22000                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22001 5803           0346         EE            add	ax,-$12[bp]
22002 5806           44                         inc	sp
22003 5807           44                         inc	sp
22004                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22005 5808           8946         F4            mov	-$C[bp],ax
22006                                           !BCC_EOS
22007                                           ! 2424    while(count-->0)
22008                                           ! 2425     {write_byte(vga_modes[line].sstart,address,car);
22009 580B           EB           29            jmp .19C
22010                       0000580D            .19D:
22011                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22012 580D           8A46         04            mov	al,4[bp]
22013 5810           30E4                       xor	ah,ah
22014 5812           50                         push	ax
22015                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22016 5813           FF76         F4            push	-$C[bp]
22017                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22018 5816           8A46         FB            mov	al,-5[bp]
22019 5819           30E4                       xor	ah,ah
22020 581B           B1                     03  mov	cl,*3
22021 581D           D3E0                       shl	ax,cl
22022 581F           89C3                       mov	bx,ax
22023 5821           81C3                 01C4  add	bx,#_vga_modes
22024                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22025 5825           FF77         04            push	4[bx]
22026                                           ! Debug: func () void = write_byte+0 (used reg = )
22027 5828           E8         249A            call	_write_byte
22028 582B           83C4                   06  add	sp,*6
22029                                           !BCC_EOS
22030                                           ! 2426      address+=2;
22031                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22032 582E           8B46         F4            mov	ax,-$C[bp]
22033 5831           40                         inc	ax
22034 5832           40                         inc	ax
22035 5833           8946         F4            mov	-$C[bp],ax
22036                                           !BCC_EOS
22037                                           ! 2427     }
22038                                           ! 2428   }
22039                       00005836            .19C:
22040                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22041 5836           8B46         0A            mov	ax,$A[bp]
22042 5839           48                         dec	ax
22043 583A           8946         0A            mov	$A[bp],ax
22044                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22045 583D           3D                   FFFF  cmp	ax,*-1
22046 5840           75           CB            jne	.19D
22047                       00005842            .19E:
22048                       00005842            .19B:
22049                                           ! 2429  else
22050                                           ! 2430   {
22051 5842           E9         00FB            br 	.19F
22052                       00005845            .199:
22053                                           ! 2431    cheight=video_param_table[line_to_vpti[line]].cheight;
22054                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22055 5845           8A46         FB            mov	al,-5[bp]
22056 5848           30E4                       xor	ah,ah
22057 584A           89C3                       mov	bx,ax
22058                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22059 584C           8A87       0244            mov	al,_line_to_vpti[bx]
22060 5850           30E4                       xor	ah,ah
22061 5852           B1                     06  mov	cl,*6
22062 5854           D3E0                       shl	ax,cl
22063 5856           89C3                       mov	bx,ax
22064 5858           81C3                 0258  add	bx,#_video_param_table
22065                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22066 585C           8A47         02            mov	al,2[bx]
22067 585F           8846         FF            mov	-1[bp],al
22068                                           !BCC_EOS
22069                                           ! 2432    bpp=vga_modes[line].pixbits;
22070                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22071 5862           8A46         FB            mov	al,-5[bp]
22072 5865           30E4                       xor	ah,ah
22073 5867           B1                     03  mov	cl,*3
22074 5869           D3E0                       shl	ax,cl
22075 586B           89C3                       mov	bx,ax
22076 586D           81C3                 01C4  add	bx,#_vga_modes
22077                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22078 5871           8A47         03            mov	al,3[bx]
22079 5874           8846         FA            mov	-6[bp],al
22080                                           !BCC_EOS
22081                                           ! 2433    while((count-->0) && (xcurs<nbcols))
22082                                           ! 2434     {
22083 5877           E9         00AD            br 	.1A1
22084                       0000587A            .1A2:
22085                                           ! 2435      switch(vga_modes[line].memmodel)
22086                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22087 587A           8A46         FB            mov	al,-5[bp]
22088 587D           30E4                       xor	ah,ah
22089 587F           B1                     03  mov	cl,*3
22090 5881           D3E0                       shl	ax,cl
22091 5883           89C3                       mov	bx,ax
22092 5885           81C3                 01C4  add	bx,#_vga_modes
22093 5889           8A47         02            mov	al,2[bx]
22094                                           ! 2436       {
22095 588C           EB           7A            jmp .1A5
22096                                           ! 2437        case 0x04:
22097                                           ! 2438        case 0x03:
22098                       0000588E            .1A6:
22099                                           ! 2439          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22100                       0000588E            .1A7:
22101                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22102 588E           8A46         FF            mov	al,-1[bp]
22103 5891           30E4                       xor	ah,ah
22104 5893           50                         push	ax
22105                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22106 5894           FF76         F8            push	-8[bp]
22107                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22108 5897           8A46         FD            mov	al,-3[bp]
22109 589A           30E4                       xor	ah,ah
22110 589C           50                         push	ax
22111                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22112 589D           8A46         FE            mov	al,-2[bp]
22113 58A0           30E4                       xor	ah,ah
22114 58A2           50                         push	ax
22115                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22116 58A3           8A46         08            mov	al,8[bp]
22117 58A6           30E4                       xor	ah,ah
22118 58A8           50                         push	ax
22119                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22120 58A9           8A46         04            mov	al,4[bp]
22121 58AC           30E4                       xor	ah,ah
22122 58AE           50                         push	ax
22123                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22124 58AF           E8         F84A            call	_write_gfx_char_pl4
22125 58B2           83C4                   0C  add	sp,*$C
22126                                           !BCC_EOS
22127                                           ! 2440          break;
22128 58B5           EB           69            jmp .1A3
22129                                           !BCC_EOS
22130                                           ! 2441        case 0x02:
22131                                           ! 2442          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22132                       000058B7            .1A8:
22133                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22134 58B7           8A46         FA            mov	al,-6[bp]
22135 58BA           30E4                       xor	ah,ah
22136 58BC           50                         push	ax
22137                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22138 58BD           FF76         F8            push	-8[bp]
22139                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22140 58C0           8A46         FD            mov	al,-3[bp]
22141 58C3           30E4                       xor	ah,ah
22142 58C5           50                         push	ax
22143                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22144 58C6           8A46         FE            mov	al,-2[bp]
22145 58C9           30E4                       xor	ah,ah
22146 58CB           50                         push	ax
22147                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22148 58CC           8A46         08            mov	al,8[bp]
22149 58CF           30E4                       xor	ah,ah
22150 58D1           50                         push	ax
22151                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22152 58D2           8A46         04            mov	al,4[bp]
22153 58D5           30E4                       xor	ah,ah
22154 58D7           50                         push	ax
22155                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22156 58D8           E8         F996            call	_write_gfx_char_cga
22157 58DB           83C4                   0C  add	sp,*$C
22158                                           !BCC_EOS
22159                                           ! 2443          break;
22160 58DE           EB           40            jmp .1A3
22161                                           !BCC_EOS
22162                                           ! 2444        case 0x05:
22163                                           ! 2445          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22164                       000058E0            .1A9:
22165                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22166 58E0           FF76         F8            push	-8[bp]
22167                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22168 58E3           8A46         FD            mov	al,-3[bp]
22169 58E6           30E4                       xor	ah,ah
22170 58E8           50                         push	ax
22171                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22172 58E9           8A46         FE            mov	al,-2[bp]
22173 58EC           30E4                       xor	ah,ah
22174 58EE           50                         push	ax
22175                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22176 58EF           8A46         08            mov	al,8[bp]
22177 58F2           30E4                       xor	ah,ah
22178 58F4           50                         push	ax
22179                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22180 58F5           8A46         04            mov	al,4[bp]
22181 58F8           30E4                       xor	ah,ah
22182 58FA           50                         push	ax
22183                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22184 58FB           E8         FB79            call	_write_gfx_char_lin
22185 58FE           83C4                   0A  add	sp,*$A
22186                                           !BCC_EOS
22187                                           ! 2446          break;
22188 5901           EB           1D            jmp .1A3
22189                                           !BCC_EOS
22190                                           ! 2447        default:
22191                                           ! 2448          unimplemented();
22192                       00005903            .1AA:
22193                                           ! Debug: func () void = unimplemented+0 (used reg = )
22194 5903           E8         2428            call	_unimplemented
22195                                           !BCC_EOS
22196                                           ! 2449       }
22197                                           ! 2450      xcurs++;
22198 5906           EB           18            jmp .1A3
22199                       00005908            .1A5:
22200 5908           2C                     02  sub	al,*2
22201 590A           74           AB            je 	.1A8
22202 590C           2C                     01  sub	al,*1
22203 590E   7503    E9         FF7B            beq 	.1A7
22204 5913           2C                     01  sub	al,*1
22205 5915   7503    E9         FF74            beq 	.1A6
22206 591A           2C                     01  sub	al,*1
22207 591C           74           C2            je 	.1A9
22208 591E           EB           E3            jmp	.1AA
22209                       00005920            .1A3:
22210                       FFFFFFEE            ..FFF9	=	-$12
22211                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22212 5920           8A46         FE            mov	al,-2[bp]
22213 5923           40                         inc	ax
22214 5924           8846         FE            mov	-2[bp],al
22215                                           !BCC_EOS
22216                                           ! 2451     }
22217                                           ! 2452   }
22218                       00005927            .1A1:
22219                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22220 5927           8B46         0A            mov	ax,$A[bp]
22221 592A           48                         dec	ax
22222 592B           8946         0A            mov	$A[bp],ax
22223                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22224 592E           3D                   FFFF  cmp	ax,*-1
22225 5931           74           0D            je  	.1AB
22226                       00005933            .1AC:
22227                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22228 5933           8A46         FE            mov	al,-2[bp]
22229 5936           30E4                       xor	ah,ah
22230 5938           3B46         F8            cmp	ax,-8[bp]
22231 593B   7303    E9         FF3A            blo 	.1A2
22232                       00005940            .1AB:
22233                       00005940            .1A0:
22234                                           ! 2453 }
22235                       00005940            .19F:
22236 5940           89EC                       mov	sp,bp
22237 5942           5D                         pop	bp
22238 5943           C3                         ret
22239                                           ! 2454 #a
22240                                           ! 2454 sm
22241                                           !BCC_ASM
22242                       00000008            _biosfn_write_char_only.count	set	8
22243                       00000006            _biosfn_write_char_only.attr	set	6
22244                       00000004            _biosfn_write_char_only.page	set	4
22245                       00000002            _biosfn_write_char_only.car	set	2
22246                       00005944            biosfn_group_0B:
22247 5944           80FF                   00    cmp bh, #0x00
22248 5947           74           09              je biosfn_set_border_color
22249 5949           80FF                   01    cmp bh, #0x01
22250 594C           74           43              je biosfn_set_palette
22251 594E           E8         23EB              call _unknown
22252 5951           C3                           ret
22253                       00005952            biosfn_set_border_color:
22254 5952           50                           push ax
22255 5953           53                           push bx
22256 5954           51                           push cx
22257 5955           52                           push dx
22258 5956           BA                   03DA    mov dx, # 0x3da
22259 5959           EC                           in al, dx
22260 595A           BA                   03C0    mov dx, # 0x3c0
22261 595D           B0                     00    mov al, #0x00
22262 595F           EE                           out dx, al
22263 5960           88D8                         mov al, bl
22264 5962           24                     0F    and al, #0x0f
22265 5964           A8                     08    test al, #0x08
22266 5966           74           02              jz set_low_border
22267 5968           04                     08    add al, #0x08
22268                       0000596A            set_low_border:
22269 596A           EE                           out dx, al
22270 596B           B1                     01    mov cl, #0x01
22271 596D           80E3                   10    and bl, #0x10
22272                       00005970            set_intensity_loop:
22273 5970           BA                   03C0    mov dx, # 0x3c0
22274 5973           88C8                         mov al, cl
22275 5975           EE                           out dx, al
22276 5976           BA                   03C1    mov dx, # 0x3c1
22277 5979           EC                           in al, dx
22278 597A           24                     EF    and al, #0xef
22279 597C           08D8                         or al, bl
22280 597E           BA                   03C0    mov dx, # 0x3c0
22281 5981           EE                           out dx, al
22282 5982           FEC1                         inc cl
22283 5984           80F9                   04    cmp cl, #0x04
22284 5987           75           E7              jne set_intensity_loop
22285 5989           B0                     20    mov al, #0x20
22286 598B           EE                           out dx, al
22287 598C           5A                           pop dx
22288 598D           59                           pop cx
22289 598E           5B                           pop bx
22290 598F           58                           pop ax
22291 5990           C3                           ret
22292                       00005991            biosfn_set_palette:
22293 5991           50                           push ax
22294 5992           53                           push bx
22295 5993           51                           push cx
22296 5994           52                           push dx
22297 5995           BA                   03DA    mov dx, # 0x3da
22298 5998           EC                           in al, dx
22299 5999           B1                     01    mov cl, #0x01
22300 599B           80E3                   01    and bl, #0x01
22301                       0000599E            set_cga_palette_loop:
22302 599E           BA                   03C0    mov dx, # 0x3c0
22303 59A1           88C8                         mov al, cl
22304 59A3           EE                           out dx, al
22305 59A4           BA                   03C1    mov dx, # 0x3c1
22306 59A7           EC                           in al, dx
22307 59A8           24                     FE    and al, #0xfe
22308 59AA           08D8                         or al, bl
22309 59AC           BA                   03C0    mov dx, # 0x3c0
22310 59AF           EE                           out dx, al
22311 59B0           FEC1                         inc cl
22312 59B2           80F9                   04    cmp cl, #0x04
22313 59B5           75           E7              jne set_cga_palette_loop
22314 59B7           B0                     20    mov al, #0x20
22315 59B9           EE                           out dx, al
22316 59BA           5A                           pop dx
22317 59BB           59                           pop cx
22318 59BC           5B                           pop bx
22319 59BD           58                           pop ax
22320 59BE           C3                           ret
22321                                           ! 2530 endasm
22322                                           !BCC_ENDASM
22323                                           ! 2531 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22324                                           ! Register BX used in function biosfn_write_char_only
22325                       000059BF            _biosfn_write_pixel:
22326                                           !BCC_EOS
22327                                           !BCC_EOS
22328                                           !BCC_EOS
22329                                           !BCC_EOS
22330                                           ! 2532 {
22331                                           ! 2533  Bit8u mode,line,mask,attr,data;
22332                                           !BCC_EOS
22333                                           ! 2534  Bit16u addr;
22334                                           !BCC_EOS
22335                                           ! 2535  mode=read_byte(0x40,0x49);
22336 59BF           55                         push	bp
22337 59C0           89E5                       mov	bp,sp
22338 59C2           83C4                   F8  add	sp,*-8
22339                                           ! Debug: list int = const $49 (used reg = )
22340 59C5           B8                   0049  mov	ax,*$49
22341 59C8           50                         push	ax
22342                                           ! Debug: list int = const $40 (used reg = )
22343 59C9           B8                   0040  mov	ax,*$40
22344 59CC           50                         push	ax
22345                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22346 59CD           E8         22CF            call	_read_byte
22347 59D0           83C4                   04  add	sp,*4
22348                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22349 59D3           8846         FF            mov	-1[bp],al
22350                                           !BCC_EOS
22351                                           ! 2536  line=find_vga_entry(mode);
22352                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22353 59D6           8A46         FF            mov	al,-1[bp]
22354 59D9           30E4                       xor	ah,ah
22355 59DB           50                         push	ax
22356                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22357 59DC           E8         21D4            call	_find_vga_entry
22358 59DF           44                         inc	sp
22359 59E0           44                         inc	sp
22360                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22361 59E1           8846         FE            mov	-2[bp],al
22362                                           !BCC_EOS
22363                                           ! 2537  if(line==0xFF)return;
22364                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22365 59E4           8A46         FE            mov	al,-2[bp]
22366 59E7           3C                     FF  cmp	al,#$FF
22367 59E9           75           04            jne 	.1AD
22368                       000059EB            .1AE:
22369 59EB           89EC                       mov	sp,bp
22370 59ED           5D                         pop	bp
22371 59EE           C3                         ret
22372                                           !BCC_EOS
22373                                           ! 2538  if(vga_modes[line].class==0x00)return;
22374                       000059EF            .1AD:
22375                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22376 59EF           8A46         FE            mov	al,-2[bp]
22377 59F2           30E4                       xor	ah,ah
22378 59F4           B1                     03  mov	cl,*3
22379 59F6           D3E0                       shl	ax,cl
22380 59F8           89C3                       mov	bx,ax
22381 59FA           81C3                 01C4  add	bx,#_vga_modes
22382                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22383 59FE           8A47         01            mov	al,1[bx]
22384 5A01           84C0                       test	al,al
22385 5A03           75           04            jne 	.1AF
22386                       00005A05            .1B0:
22387 5A05           89EC                       mov	sp,bp
22388 5A07           5D                         pop	bp
22389 5A08           C3                         ret
22390                                           !BCC_EOS
22391                                           ! 2539  switch(vga_modes[line].memmodel)
22392                       00005A09            .1AF:
22393                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22394 5A09           8A46         FE            mov	al,-2[bp]
22395 5A0C           30E4                       xor	ah,ah
22396 5A0E           B1                     03  mov	cl,*3
22397 5A10           D3E0                       shl	ax,cl
22398 5A12           89C3                       mov	bx,ax
22399 5A14           81C3                 01C4  add	bx,#_vga_modes
22400 5A18           8A47         02            mov	al,2[bx]
22401                                           ! 2540   {
22402 5A1B           E9         0226            br 	.1B3
22403                                           ! 2541    case 0x04:
22404                                           ! 2542    case 0x03:
22405                       00005A1E            .1B4:
22406                                           ! 2543      addr = CX/8+DX*read_word(0x40,0x4A);
22407                       00005A1E            .1B5:
22408                                           ! Debug: list int = const $4A (used reg = )
22409 5A1E           B8                   004A  mov	ax,*$4A
22410 5A21           50                         push	ax
22411                                           ! Debug: list int = const $40 (used reg = )
22412 5A22           B8                   0040  mov	ax,*$40
22413 5A25           50                         push	ax
22414                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22415 5A26           E8         2289            call	_read_word
22416 5A29           83C4                   04  add	sp,*4
22417                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22418                                           ! Debug: expression subtree swapping
22419 5A2C           8B4E         0A            mov	cx,$A[bp]
22420 5A2F           F7E9                       imul	cx
22421 5A31           50                         push	ax
22422                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22423 5A32           8B46         08            mov	ax,8[bp]
22424 5A35           B1                     03  mov	cl,*3
22425 5A37           D3E8                       shr	ax,cl
22426                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22427 5A39           0346         F6            add	ax,0+..FFF8[bp]
22428 5A3C           44                         inc	sp
22429 5A3D           44                         inc	sp
22430                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22431 5A3E           8946         F8            mov	-8[bp],ax
22432                                           !BCC_EOS
22433                                           ! 2544      mask = 0x80 >> (CX & 0x07);
22434                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22435 5A41           8A46         08            mov	al,8[bp]
22436 5A44           24                     07  and	al,*7
22437                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22438 5A46           30E4                       xor	ah,ah
22439 5A48           89C3                       mov	bx,ax
22440 5A4A           B8                   0080  mov	ax,#$80
22441 5A4D           89D9                       mov	cx,bx
22442 5A4F           D3F8                       sar	ax,cl
22443                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22444 5A51           8846         FD            mov	-3[bp],al
22445                                           !BCC_EOS
22446                                           ! 2545      outw(0x3ce, (mask << 8) | 0x08);
22447                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22448 5A54           8A46         FD            mov	al,-3[bp]
22449 5A57           30E4                       xor	ah,ah
22450 5A59           88C4                       mov	ah,al
22451 5A5B           30C0                       xor	al,al
22452                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22453 5A5D           0C                     08  or	al,*8
22454                                           ! Debug: list unsigned int = ax+0 (used reg = )
22455 5A5F           50                         push	ax
22456                                           ! Debug: list int = const $3CE (used reg = )
22457 5A60           B8                   03CE  mov	ax,#$3CE
22458 5A63           50                         push	ax
22459                                           ! Debug: func () void = outw+0 (used reg = )
22460 5A64           E8         22B4            call	_outw
22461 5A67           83C4                   04  add	sp,*4
22462                                           !BCC_EOS
22463                                           ! 2546      outw(0x3ce, 0x0205);
22464                                           ! Debug: list int = const $205 (used reg = )
22465 5A6A           B8                   0205  mov	ax,#$205
22466 5A6D           50                         push	ax
22467                                           ! Debug: list int = const $3CE (used reg = )
22468 5A6E           B8                   03CE  mov	ax,#$3CE
22469 5A71           50                         push	ax
22470                                           ! Debug: func () void = outw+0 (used reg = )
22471 5A72           E8         22A6            call	_outw
22472 5A75           83C4                   04  add	sp,*4
22473                                           !BCC_EOS
22474                                           ! 2547      data = read_byte(0xa000,addr);
22475                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22476 5A78           FF76         F8            push	-8[bp]
22477                                           ! Debug: list unsigned int = const $A000 (used reg = )
22478 5A7B           B8                   A000  mov	ax,#$A000
22479 5A7E           50                         push	ax
22480                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22481 5A7F           E8         221D            call	_read_byte
22482 5A82           83C4                   04  add	sp,*4
22483                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22484 5A85           8846         FB            mov	-5[bp],al
22485                                           !BCC_EOS
22486                                           ! 2548      if (AL & 0x80)
22487                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22488 5A88           8A46         06            mov	al,6[bp]
22489 5A8B           24                     80  and	al,#$80
22490 5A8D           84C0                       test	al,al
22491 5A8F           74           0E            je  	.1B6
22492                       00005A91            .1B7:
22493                                           ! 2549       {
22494                                           ! 2550        outw(0x3ce, 0x1803);
22495                                           ! Debug: list int = const $1803 (used reg = )
22496 5A91           B8                   1803  mov	ax,#$1803
22497 5A94           50                         push	ax
22498                                           ! Debug: list int = const $3CE (used reg = )
22499 5A95           B8                   03CE  mov	ax,#$3CE
22500 5A98           50                         push	ax
22501                                           ! Debug: func () void = outw+0 (used reg = )
22502 5A99           E8         227F            call	_outw
22503 5A9C           83C4                   04  add	sp,*4
22504                                           !BCC_EOS
22505                                           ! 2551       }
22506                                           ! 2552      write_byte(0xa000,addr,AL);
22507                       00005A9F            .1B6:
22508                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22509 5A9F           8A46         06            mov	al,6[bp]
22510 5AA2           30E4                       xor	ah,ah
22511 5AA4           50                         push	ax
22512                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22513 5AA5           FF76         F8            push	-8[bp]
22514                                           ! Debug: list unsigned int = const $A000 (used reg = )
22515 5AA8           B8                   A000  mov	ax,#$A000
22516 5AAB           50                         push	ax
22517                                           ! Debug: func () void = write_byte+0 (used reg = )
22518 5AAC           E8         2216            call	_write_byte
22519 5AAF           83C4                   06  add	sp,*6
22520                                           !BCC_EOS
22521                                           ! 2553 #asm
22522                                           !BCC_EOS
22523                                           !BCC_ASM
22524                       0000000C            _biosfn_write_pixel.BH	set	$C
22525                       00000004            .biosfn_write_pixel.BH	set	4
22526                       00000010            _biosfn_write_pixel.CX	set	$10
22527                       00000008            .biosfn_write_pixel.CX	set	8
22528                       00000006            _biosfn_write_pixel.line	set	6
22529                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22530                       0000000E            _biosfn_write_pixel.AL	set	$E
22531                       00000006            .biosfn_write_pixel.AL	set	6
22532                       00000003            _biosfn_write_pixel.data	set	3
22533                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22534                       00000012            _biosfn_write_pixel.DX	set	$12
22535                       0000000A            .biosfn_write_pixel.DX	set	$A
22536                       00000005            _biosfn_write_pixel.mask	set	5
22537                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22538                       00000004            _biosfn_write_pixel.attr	set	4
22539                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22540                       00000007            _biosfn_write_pixel.mode	set	7
22541                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22542                       00000000            _biosfn_write_pixel.addr	set	0
22543                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22544 5AB2           BA                   03CE       mov dx, # 0x3ce
22545 5AB5           B8                   FF08       mov ax, #0xff08
22546 5AB8           EF                              out dx, ax
22547 5AB9           B8                   0005       mov ax, #0x0005
22548 5ABC           EF                              out dx, ax
22549 5ABD           B8                   0003       mov ax, #0x0003
22550 5AC0           EF                              out dx, ax
22551                                           ! 2561 endasm
22552                                           !BCC_ENDASM
22553                                           !BCC_EOS
22554                                           ! 2562      break;
22555 5AC1           E9         019B            br 	.1B1
22556                                           !BCC_EOS
22557                                           ! 2563    case 0x02:
22558                                           ! 2564      if(vga_modes[line].pixbits==2)
22559                       00005AC4            .1B8:
22560                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22561 5AC4           8A46         FE            mov	al,-2[bp]
22562 5AC7           30E4                       xor	ah,ah
22563 5AC9           B1                     03  mov	cl,*3
22564 5ACB           D3E0                       shl	ax,cl
22565 5ACD           89C3                       mov	bx,ax
22566 5ACF           81C3                 01C4  add	bx,#_vga_modes
22567                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22568 5AD3           8A47         03            mov	al,3[bx]
22569 5AD6           3C                     02  cmp	al,*2
22570 5AD8           75           1C            jne 	.1B9
22571                       00005ADA            .1BA:
22572                                           ! 2565       {
22573                                           ! 2566        addr=(CX>>2)+(DX>>1)*80;
22574                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22575 5ADA           8B46         0A            mov	ax,$A[bp]
22576 5ADD           D1E8                       shr	ax,*1
22577                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22578 5ADF           B9                   0050  mov	cx,*$50
22579 5AE2           F7E9                       imul	cx
22580 5AE4           50                         push	ax
22581                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22582 5AE5           8B46         08            mov	ax,8[bp]
22583 5AE8           D1E8                       shr	ax,*1
22584 5AEA           D1E8                       shr	ax,*1
22585                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22586 5AEC           0346         F6            add	ax,0+..FFF8[bp]
22587 5AEF           44                         inc	sp
22588 5AF0           44                         inc	sp
22589                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22590 5AF1           8946         F8            mov	-8[bp],ax
22591                                           !BCC_EOS
22592                                           ! 2567       }
22593                                           ! 2568      else
22594                                           ! 2569       {
22595 5AF4           EB           1A            jmp .1BB
22596                       00005AF6            .1B9:
22597                                           ! 2570        addr=(CX>>3)+(DX>>1)*80;
22598                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22599 5AF6           8B46         0A            mov	ax,$A[bp]
22600 5AF9           D1E8                       shr	ax,*1
22601                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22602 5AFB           B9                   0050  mov	cx,*$50
22603 5AFE           F7E9                       imul	cx
22604 5B00           50                         push	ax
22605                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22606 5B01           8B46         08            mov	ax,8[bp]
22607 5B04           B1                     03  mov	cl,*3
22608 5B06           D3E8                       shr	ax,cl
22609                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22610 5B08           0346         F6            add	ax,0+..FFF8[bp]
22611 5B0B           44                         inc	sp
22612 5B0C           44                         inc	sp
22613                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22614 5B0D           8946         F8            mov	-8[bp],ax
22615                                           !BCC_EOS
22616                                           ! 2571       }
22617                                           ! 2572      if (DX & 1) addr += 0x2000;
22618                       00005B10            .1BB:
22619                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22620 5B10           8A46         0A            mov	al,$A[bp]
22621 5B13           24                     01  and	al,*1
22622 5B15           84C0                       test	al,al
22623 5B17           74           09            je  	.1BC
22624                       00005B19            .1BD:
22625                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22626 5B19           8B46         F8            mov	ax,-8[bp]
22627 5B1C           05                   2000  add	ax,#$2000
22628 5B1F           8946         F8            mov	-8[bp],ax
22629                                           !BCC_EOS
22630                                           ! 2573      data = read_b
22631                       00005B22            .1BC:
22632                                           ! 2573 yte(0xb800,addr);
22633                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22634 5B22           FF76         F8            push	-8[bp]
22635                                           ! Debug: list unsigned int = const $B800 (used reg = )
22636 5B25           B8                   B800  mov	ax,#$B800
22637 5B28           50                         push	ax
22638                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22639 5B29           E8         2173            call	_read_byte
22640 5B2C           83C4                   04  add	sp,*4
22641                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22642 5B2F           8846         FB            mov	-5[bp],al
22643                                           !BCC_EOS
22644                                           ! 2574      if(vga_modes[line].pixbits==2)
22645                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22646 5B32           8A46         FE            mov	al,-2[bp]
22647 5B35           30E4                       xor	ah,ah
22648 5B37           B1                     03  mov	cl,*3
22649 5B39           D3E0                       shl	ax,cl
22650 5B3B           89C3                       mov	bx,ax
22651 5B3D           81C3                 01C4  add	bx,#_vga_modes
22652                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22653 5B41           8A47         03            mov	al,3[bx]
22654 5B44           3C                     02  cmp	al,*2
22655 5B46           75           46            jne 	.1BE
22656                       00005B48            .1BF:
22657                                           ! 2575       {
22658                                           ! 2576        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22659                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22660 5B48           8A46         08            mov	al,8[bp]
22661 5B4B           24                     03  and	al,*3
22662                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22663 5B4D           50                         push	ax
22664 5B4E           B8                   0003  mov	ax,*3
22665 5B51           2A46         F6            sub	al,0+..FFF8[bp]
22666 5B54           80DC                   00  sbb	ah,*0
22667 5B57           44                         inc	sp
22668 5B58           44                         inc	sp
22669                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22670 5B59           D1E0                       shl	ax,*1
22671 5B5B           50                         push	ax
22672                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22673 5B5C           8A46         06            mov	al,6[bp]
22674 5B5F           24                     03  and	al,*3
22675                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22676 5B61           30E4                       xor	ah,ah
22677 5B63           8B4E         F6            mov	cx,0+..FFF8[bp]
22678 5B66           D3E0                       shl	ax,cl
22679 5B68           44                         inc	sp
22680 5B69           44                         inc	sp
22681                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22682 5B6A           8846         FC            mov	-4[bp],al
22683                                           !BCC_EOS
22684                                           ! 2577        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22685                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22686 5B6D           8A46         08            mov	al,8[bp]
22687 5B70           24                     03  and	al,*3
22688                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22689 5B72           50                         push	ax
22690 5B73           B8                   0003  mov	ax,*3
22691 5B76           2A46         F6            sub	al,0+..FFF8[bp]
22692 5B79           80DC                   00  sbb	ah,*0
22693 5B7C           44                         inc	sp
22694 5B7D           44                         inc	sp
22695                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22696 5B7E           D1E0                       shl	ax,*1
22697                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22698 5B80           89C3                       mov	bx,ax
22699 5B82           B8                   0003  mov	ax,*3
22700 5B85           89D9                       mov	cx,bx
22701 5B87           D3E0                       shl	ax,cl
22702                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22703 5B89           8846         FD            mov	-3[bp],al
22704                                           !BCC_EOS
22705                                           ! 2578       }
22706                                           ! 2579      else
22707                                           ! 2580       {
22708 5B8C           EB           40            jmp .1C0
22709                       00005B8E            .1BE:
22710                                           ! 2581        attr = (AL & 0x01) << (7 - (CX & 0x07));
22711                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22712 5B8E           8A46         08            mov	al,8[bp]
22713 5B91           24                     07  and	al,*7
22714                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22715 5B93           50                         push	ax
22716 5B94           B8                   0007  mov	ax,*7
22717 5B97           2A46         F6            sub	al,0+..FFF8[bp]
22718 5B9A           80DC                   00  sbb	ah,*0
22719 5B9D           44                         inc	sp
22720 5B9E           44                         inc	sp
22721 5B9F           50                         push	ax
22722                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22723 5BA0           8A46         06            mov	al,6[bp]
22724 5BA3           24                     01  and	al,*1
22725                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22726 5BA5           30E4                       xor	ah,ah
22727 5BA7           8B4E         F6            mov	cx,0+..FFF8[bp]
22728 5BAA           D3E0                       shl	ax,cl
22729 5BAC           44                         inc	sp
22730 5BAD           44                         inc	sp
22731                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22732 5BAE           8846         FC            mov	-4[bp],al
22733                                           !BCC_EOS
22734                                           ! 2582        mask = 0x01 << (7 - (CX & 0x07));
22735                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22736 5BB1           8A46         08            mov	al,8[bp]
22737 5BB4           24                     07  and	al,*7
22738                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22739 5BB6           50                         push	ax
22740 5BB7           B8                   0007  mov	ax,*7
22741 5BBA           2A46         F6            sub	al,0+..FFF8[bp]
22742 5BBD           80DC                   00  sbb	ah,*0
22743 5BC0           44                         inc	sp
22744 5BC1           44                         inc	sp
22745                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22746 5BC2           89C3                       mov	bx,ax
22747 5BC4           B8                   0001  mov	ax,*1
22748 5BC7           89D9                       mov	cx,bx
22749 5BC9           D3E0                       shl	ax,cl
22750                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22751 5BCB           8846         FD            mov	-3[bp],al
22752                                           !BCC_EOS
22753                                           ! 2583       }
22754                                           ! 2584      if (AL & 0x80)
22755                       00005BCE            .1C0:
22756                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22757 5BCE           8A46         06            mov	al,6[bp]
22758 5BD1           24                     80  and	al,#$80
22759 5BD3           84C0                       test	al,al
22760 5BD5           74           0B            je  	.1C1
22761                       00005BD7            .1C2:
22762                                           ! 2585       {
22763                                           ! 2586        data ^= attr;
22764                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22765 5BD7           8A46         FB            mov	al,-5[bp]
22766 5BDA           3246         FC            xor	al,-4[bp]
22767 5BDD           8846         FB            mov	-5[bp],al
22768                                           !BCC_EOS
22769                                           ! 2587       }
22770                                           ! 2588      else
22771                                           ! 2589       {
22772 5BE0           EB           16            jmp .1C3
22773                       00005BE2            .1C1:
22774                                           ! 2590        data &= ~mask;
22775                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22776 5BE2           8A46         FD            mov	al,-3[bp]
22777 5BE5           30E4                       xor	ah,ah
22778 5BE7           F7D0                       not	ax
22779                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22780 5BE9           2246         FB            and	al,-5[bp]
22781 5BEC           8846         FB            mov	-5[bp],al
22782                                           !BCC_EOS
22783                                           ! 2591        data |= attr;
22784                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22785 5BEF           8A46         FB            mov	al,-5[bp]
22786 5BF2           0A46         FC            or	al,-4[bp]
22787 5BF5           8846         FB            mov	-5[bp],al
22788                                           !BCC_EOS
22789                                           ! 2592       }
22790                                           ! 2593      write_byte(0xb800,addr,data);
22791                       00005BF8            .1C3:
22792                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22793 5BF8           8A46         FB            mov	al,-5[bp]
22794 5BFB           30E4                       xor	ah,ah
22795 5BFD           50                         push	ax
22796                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22797 5BFE           FF76         F8            push	-8[bp]
22798                                           ! Debug: list unsigned int = const $B800 (used reg = )
22799 5C01           B8                   B800  mov	ax,#$B800
22800 5C04           50                         push	ax
22801                                           ! Debug: func () void = write_byte+0 (used reg = )
22802 5C05           E8         20BD            call	_write_byte
22803 5C08           83C4                   06  add	sp,*6
22804                                           !BCC_EOS
22805                                           ! 2594      break;
22806 5C0B           EB           52            jmp .1B1
22807                                           !BCC_EOS
22808                                           ! 2595    case 0x05:
22809                                           ! 2596      addr=CX+DX*(read_word(0x40,0x4A)*8);
22810                       00005C0D            .1C4:
22811                                           ! Debug: list int = const $4A (used reg = )
22812 5C0D           B8                   004A  mov	ax,*$4A
22813 5C10           50                         push	ax
22814                                           ! Debug: list int = const $40 (used reg = )
22815 5C11           B8                   0040  mov	ax,*$40
22816 5C14           50                         push	ax
22817                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22818 5C15           E8         209A            call	_read_word
22819 5C18           83C4                   04  add	sp,*4
22820                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22821 5C1B           B1                     03  mov	cl,*3
22822 5C1D           D3E0                       shl	ax,cl
22823                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22824                                           ! Debug: expression subtree swapping
22825 5C1F           8B4E         0A            mov	cx,$A[bp]
22826 5C22           F7E9                       imul	cx
22827                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22828                                           ! Debug: expression subtree swapping
22829 5C24           0346         08            add	ax,8[bp]
22830                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22831 5C27           8946         F8            mov	-8[bp],ax
22832                                           !BCC_EOS
22833                                           ! 2597      write_byte(0xa000,addr,AL);
22834                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22835 5C2A           8A46         06            mov	al,6[bp]
22836 5C2D           30E4                       xor	ah,ah
22837 5C2F           50                         push	ax
22838                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22839 5C30           FF76         F8            push	-8[bp]
22840                                           ! Debug: list unsigned int = const $A000 (used reg = )
22841 5C33           B8                   A000  mov	ax,#$A000
22842 5C36           50                         push	ax
22843                                           ! Debug: func () void = write_byte+0 (used reg = )
22844 5C37           E8         208B            call	_write_byte
22845 5C3A           83C4                   06  add	sp,*6
22846                                           !BCC_EOS
22847                                           ! 2598      break;
22848 5C3D           EB           20            jmp .1B1
22849                                           !BCC_EOS
22850                                           ! 2599    default:
22851                                           ! 2600      unimplemented();
22852                       00005C3F            .1C5:
22853                                           ! Debug: func () void = unimplemented+0 (used reg = )
22854 5C3F           E8         20EC            call	_unimplemented
22855                                           !BCC_EOS
22856                                           ! 2601   }
22857                                           ! 2602 }
22858 5C42           EB           1B            jmp .1B1
22859                       00005C44            .1B3:
22860 5C44           2C                     02  sub	al,*2
22861 5C46   7503    E9         FE79            beq 	.1B8
22862 5C4B           2C                     01  sub	al,*1
22863 5C4D   7503    E9         FDCC            beq 	.1B5
22864 5C52           2C                     01  sub	al,*1
22865 5C54   7503    E9         FDC5            beq 	.1B4
22866 5C59           2C                     01  sub	al,*1
22867 5C5B           74           B0            je 	.1C4
22868 5C5D           EB           E0            jmp	.1C5
22869                       00005C5F            .1B1:
22870                       FFFFFFF6            ..FFF8	=	-$A
22871 5C5F           89EC                       mov	sp,bp
22872 5C61           5D                         pop	bp
22873 5C62           C3                         ret
22874                                           ! 2603 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22875                                           ! Register BX used in function biosfn_write_pixel
22876                       00005C63            _biosfn_read_pixel:
22877                                           !BCC_EOS
22878                                           !BCC_EOS
22879                                           !BCC_EOS
22880                                           !BCC_EOS
22881                                           ! 2604 {
22882                                           ! 2605  Bit8u mode,line,mask,attr,data,i;
22883                                           !BCC_EOS
22884                                           ! 2606  Bit16u addr;
22885                                           !BCC_EOS
22886                                           ! 2607  Bit16u ss=get_SS();
22887 5C63           55                         push	bp
22888 5C64           89E5                       mov	bp,sp
22889 5C66           83C4                   F6  add	sp,*-$A
22890                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22891 5C69           E8         20BF            call	_get_SS
22892                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22893 5C6C           8946         F6            mov	-$A[bp],ax
22894                                           !BCC_EOS
22895                                           ! 2608  mode=read_byte(0x40,0x49);
22896                                           ! Debug: list int = const $49 (used reg = )
22897 5C6F           B8                   0049  mov	ax,*$49
22898 5C72           50                         push	ax
22899                                           ! Debug: list int = const $40 (used reg = )
22900 5C73           B8                   0040  mov	ax,*$40
22901 5C76           50                         push	ax
22902                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22903 5C77           E8         2025            call	_read_byte
22904 5C7A           83C4                   04  add	sp,*4
22905                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22906 5C7D           8846         FF            mov	-1[bp],al
22907                                           !BCC_EOS
22908                                           ! 2609  line=find_vga_entry(mode);
22909                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22910 5C80           8A46         FF            mov	al,-1[bp]
22911 5C83           30E4                       xor	ah,ah
22912 5C85           50                         push	ax
22913                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22914 5C86           E8         1F2A            call	_find_vga_entry
22915 5C89           44                         inc	sp
22916 5C8A           44                         inc	sp
22917                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22918 5C8B           8846         FE            mov	-2[bp],al
22919                                           !BCC_EOS
22920                                           ! 2610  if(line==0xFF)return;
22921                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22922 5C8E           8A46         FE            mov	al,-2[bp]
22923 5C91           3C                     FF  cmp	al,#$FF
22924 5C93           75           04            jne 	.1C6
22925                       00005C95            .1C7:
22926 5C95           89EC                       mov	sp,bp
22927 5C97           5D                         pop	bp
22928 5C98           C3                         ret
22929                                           !BCC_EOS
22930                                           ! 2611  if(vga_modes[line].class==0x00)return;
22931                       00005C99            .1C6:
22932                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22933 5C99           8A46         FE            mov	al,-2[bp]
22934 5C9C           30E4                       xor	ah,ah
22935 5C9E           B1                     03  mov	cl,*3
22936 5CA0           D3E0                       shl	ax,cl
22937 5CA2           89C3                       mov	bx,ax
22938 5CA4           81C3                 01C4  add	bx,#_vga_modes
22939                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22940 5CA8           8A47         01            mov	al,1[bx]
22941 5CAB           84C0                       test	al,al
22942 5CAD           75           04            jne 	.1C8
22943                       00005CAF            .1C9:
22944 5CAF           89EC                       mov	sp,bp
22945 5CB1           5D                         pop	bp
22946 5CB2           C3                         ret
22947                                           !BCC_EOS
22948                                           ! 2612  switch(vga_modes[line].memmodel)
22949                       00005CB3            .1C8:
22950                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22951 5CB3           8A46         FE            mov	al,-2[bp]
22952 5CB6           30E4                       xor	ah,ah
22953 5CB8           B1                     03  mov	cl,*3
22954 5CBA           D3E0                       shl	ax,cl
22955 5CBC           89C3                       mov	bx,ax
22956 5CBE           81C3                 01C4  add	bx,#_vga_modes
22957 5CC2           8A47         02            mov	al,2[bx]
22958                                           ! 2613   {
22959 5CC5           E9         016A            br 	.1CC
22960                                           ! 2614    case 0x04:
22961                                           ! 2615    case 0x03:
22962                       00005CC8            .1CD:
22963                                           ! 2616      addr = CX/8+DX*read_word(0x40,0x4A);
22964                       00005CC8            .1CE:
22965                                           ! Debug: list int = const $4A (used reg = )
22966 5CC8           B8                   004A  mov	ax,*$4A
22967 5CCB           50                         push	ax
22968                                           ! Debug: list int = const $40 (used reg = )
22969 5CCC           B8                   0040  mov	ax,*$40
22970 5CCF           50                         push	ax
22971                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22972 5CD0           E8         1FDF            call	_read_word
22973 5CD3           83C4                   04  add	sp,*4
22974                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
22975                                           ! Debug: expression subtree swapping
22976 5CD6           8B4E         08            mov	cx,8[bp]
22977 5CD9           F7E9                       imul	cx
22978 5CDB           50                         push	ax
22979                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
22980 5CDC           8B46         06            mov	ax,6[bp]
22981 5CDF           B1                     03  mov	cl,*3
22982 5CE1           D3E8                       shr	ax,cl
22983                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
22984 5CE3           0346         F4            add	ax,0+..FFF7[bp]
22985 5CE6           44                         inc	sp
22986 5CE7           44                         inc	sp
22987                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
22988 5CE8           8946         F8            mov	-8[bp],ax
22989                                           !BCC_EOS
22990                                           ! 2617      mask = 0x80 >> (CX & 0x07);
22991                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
22992 5CEB           8A46         06            mov	al,6[bp]
22993 5CEE           24                     07  and	al,*7
22994                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22995 5CF0           30E4                       xor	ah,ah
22996 5CF2           89C3                       mov	bx,ax
22997 5CF4           B8                   0080  mov	ax,#$80
22998 5CF7           89D9                       mov	cx,bx
22999 5CF9           D3F8                       sar	ax,cl
23000                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23001 5CFB           8846         FD            mov	-3[bp],al
23002                                           !BCC_EOS
23003                                           ! 2618      attr = 0x00;
23004                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23005 5CFE           30C0                       xor	al,al
23006 5D00           8846         FC            mov	-4[bp],al
23007                                           !BCC_EOS
23008                                           ! 2619      for(i=0;i<4;i++)
23009                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23010 5D03           30C0                       xor	al,al
23011 5D05           8846         FA            mov	-6[bp],al
23012                                           !BCC_EOS
23013                                           !BCC_EOS
23014                                           ! 2620       {
23015 5D08           EB           4B            jmp .1D1
23016                       00005D0A            .1D2:
23017                                           ! 2621        outw(0x3ce, (i << 8) | 0x04);
23018                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23019 5D0A           8A46         FA            mov	al,-6[bp]
23020 5D0D           30E4                       xor	ah,ah
23021 5D0F           88C4                       mov	ah,al
23022 5D11           30C0                       xor	al,al
23023                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23024 5D13           0C                     04  or	al,*4
23025                                           ! Debug: list unsigned int = ax+0 (used reg = )
23026 5D15           50                         push	ax
23027                                           ! Debug: list int = const $3CE (used reg = )
23028 5D16           B8                   03CE  mov	ax,#$3CE
23029 5D19           50                         push	ax
23030                                           ! Debug: func () void = outw+0 (used reg = )
23031 5D1A           E8         1FFE            call	_outw
23032 5D1D           83C4                   04  add	sp,*4
23033                                           !BCC_EOS
23034                                           ! 2622        data = read_byte(0xa000,addr) & mask;
23035                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23036 5D20           FF76         F8            push	-8[bp]
23037                                           ! Debug: list unsigned int = const $A000 (used reg = )
23038 5D23           B8                   A000  mov	ax,#$A000
23039 5D26           50                         push	ax
23040                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23041 5D27           E8         1F75            call	_read_byte
23042 5D2A           83C4                   04  add	sp,*4
23043                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23044 5D2D           2246         FD            and	al,-3[bp]
23045                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23046 5D30           8846         FB            mov	-5[bp],al
23047                                           !BCC_EOS
23048                                           ! 2623        if (data > 0) attr |= (0x01 << i);
23049                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23050 5D33           8A46         FB            mov	al,-5[bp]
23051 5D36           84C0                       test	al,al
23052 5D38           74           14            je  	.1D3
23053                       00005D3A            .1D4:
23054                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23055 5D3A           8A46         FA            mov	al,-6[bp]
23056 5D3D           30E4                       xor	ah,ah
23057 5D3F           89C3                       mov	bx,ax
23058 5D41           B8                   0001  mov	ax,*1
23059 5D44           89D9                       mov	cx,bx
23060 5D46           D3E0                       shl	ax,cl
23061                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23062 5D48           0A46         FC            or	al,-4[bp]
23063 5D4B           8846         FC            mov	-4[bp],al
23064                                           !BCC_EOS
23065                                           ! 2624       }
23066                       00005D4E            .1D3:
23067                                           ! 2625      break;
23068                       00005D4E            .1D0:
23069                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23070 5D4E           8A46         FA            mov	al,-6[bp]
23071 5D51           40                         inc	ax
23072 5D52           8846         FA            mov	-6[bp],al
23073                       00005D55            .1D1:
23074                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23075 5D55           8A46         FA            mov	al,-6[bp]
23076 5D58           3C                     04  cmp	al,*4
23077 5D5A           72           AE            jb 	.1D2
23078                       00005D5C            .1D5:
23079                       00005D5C            .1CF:
23080 5D5C           E9         00EE            br 	.1CA
23081                                           !BCC_EOS
23082                                           ! 2626    case 0x02:
23083                                           ! 2627      addr=(CX>>2)+(DX>>1)*80;
23084                       00005D5F            .1D6:
23085                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23086 5D5F           8B46         08            mov	ax,8[bp]
23087 5D62           D1E8                       shr	ax,*1
23088                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23089 5D64           B9                   0050  mov	cx,*$50
23090 5D67           F7E9                       imul	cx
23091 5D69           50                         push	ax
23092                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23093 5D6A           8B46         06            mov	ax,6[bp]
23094 5D6D           D1E8                       shr	ax,*1
23095 5D6F           D1E8                       shr	ax,*1
23096                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23097 5D71           0346         F4            add	ax,0+..FFF7[bp]
23098 5D74           44                         inc	sp
23099 5D75           44                         inc	sp
23100                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23101 5D76           8946         F8            mov	-8[bp],ax
23102                                           !BCC_EOS
23103                                           ! 2628      if (DX & 1) addr += 0x2000;
23104                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23105 5D79           8A46         08            mov	al,8[bp]
23106 5D7C           24                     01  and	al,*1
23107 5D7E           84C0                       test	al,al
23108 5D80           74           09            je  	.1D7
23109                       00005D82            .1D8:
23110                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23111 5D82           8B46         F8            mov	ax,-8[bp]
23112 5D85           05                   2000  add	ax,#$2000
23113 5D88           8946         F8            mov	-8[bp],ax
23114                                           !BCC_EOS
23115                                           ! 2629      data = read_byte(0xb800,addr);
23116                       00005D8B            .1D7:
23117                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23118 5D8B           FF76         F8            push	-8[bp]
23119                                           ! Debug: list unsigned int = const $B800 (used reg = )
23120 5D8E           B8                   B800  mov	ax,#$B800
23121 5D91           50                         push	ax
23122                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23123 5D92           E8         1F0A            call	_read_byte
23124 5D95           83C4                   04  add	sp,*4
23125                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23126 5D98           8846         FB            mov	-5[bp],al
23127                                           !BCC_EOS
23128                                           ! 2630      if(vga_modes[line].pixbits==2)
23129                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23130 5D9B           8A46         FE            mov	al,-2[bp]
23131 5D9E           30E4                       xor	ah,ah
23132 5DA0           B1                     03  mov	cl,*3
23133 5DA2           D3E0                       shl	ax,cl
23134 5DA4           89C3                       mov	bx,ax
23135 5DA6           81C3                 01C4  add	bx,#_vga_modes
23136                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23137 5DAA           8A47         03            mov	al,3[bx]
23138 5DAD           3C                     02  cmp	al,*2
23139 5DAF           75           25            jne 	.1D9
23140                       00005DB1            .1DA:
23141                                           ! 2631       {
23142                                           ! 2632        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23143                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23144 5DB1           8A46         06            mov	al,6[bp]
23145 5DB4           24                     03  and	al,*3
23146                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23147 5DB6           50                         push	ax
23148 5DB7           B8                   0003  mov	ax,*3
23149 5DBA           2A46         F4            sub	al,0+..FFF7[bp]
23150 5DBD           80DC                   00  sbb	ah,*0
23151 5DC0           44                         inc	sp
23152 5DC1           44                         inc	sp
23153                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23154 5DC2           D1E0                       shl	ax,*1
23155                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23156 5DC4           89C3                       mov	bx,ax
23157 5DC6           8A46         FB            mov	al,-5[bp]
23158 5DC9           30E4                       xor	ah,ah
23159 5DCB           89D9                       mov	cx,bx
23160 5DCD           D3E8                       shr	ax,cl
23161                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23162 5DCF           24                     03  and	al,*3
23163                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23164 5DD1           8846         FC            mov	-4[bp],al
23165                                           !BCC_EOS
23166                                           ! 2633       }
23167                                           ! 2634      else
23168                                           ! 2635       {
23169 5DD4           EB           21            jmp .1DB
23170                       00005DD6            .1D9:
23171                                           ! 2636        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23172                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23173 5DD6           8A46         06            mov	al,6[bp]
23174 5DD9           24                     07  and	al,*7
23175                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23176 5DDB           50                         push	ax
23177 5DDC           B8                   0007  mov	ax,*7
23178 5DDF           2A46         F4            sub	al,0+..FFF7[bp]
23179 5DE2           80DC                   00  sbb	ah,*0
23180 5DE5           44                         inc	sp
23181 5DE6           44                         inc	sp
23182                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23183 5DE7           89C3                       mov	bx,ax
23184 5DE9           8A46         FB            mov	al,-5[bp]
23185 5DEC           30E4                       xor	ah,ah
23186 5DEE           89D9                       mov	cx,bx
23187 5DF0           D3E8                       shr	ax,cl
23188                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23189 5DF2           24                     01  and	al,*1
23190                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23191 5DF4           8846         FC            mov	-4[bp],al
23192                                           !BCC_EOS
23193                                           ! 2637       }
23194                                           ! 2638      break;
23195                       00005DF7            .1DB:
23196 5DF7           EB           54            jmp .1CA
23197                                           !BCC_EOS
23198                                           ! 2639    case 0x05:
23199                                           ! 2640      addr=CX+DX*(read_word(0x40,0x4A)*8);
23200                       00005DF9            .1DC:
23201                                           ! Debug: list int = const $4A (used reg = )
23202 5DF9           B8                   004A  mov	ax,*$4A
23203 5DFC           50                         push	ax
23204                                           ! Debug: list int = const $40 (used reg = )
23205 5DFD           B8                   0040  mov	ax,*$40
23206 5E00           50                         push	ax
23207                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23208 5E01           E8         1EAE            call	_read_word
23209 5E04           83C4                   04  add	sp,*4
23210                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23211 5E07           B1                     03  mov	cl,*3
23212 5E09           D3E0                       shl	ax,cl
23213                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23214                                           ! Debug: expression subtree swapping
23215 5E0B           8B4E         08            mov	cx,8[bp]
23216 5E0E           F7E9                       imul	cx
23217                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23218                                           ! Debug: expression subtree swapping
23219 5E10           0346         06            add	ax,6[bp]
23220                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23221 5E13           8946         F8            mov	-8[bp],ax
23222                                           !BCC_EOS
23223                                           ! 2641      attr=read_byte(0xa000,addr);
23224                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23225 5E16           FF76         F8            push	-8[bp]
23226                                           ! Debug: list unsigned int = const $A000 (used reg = )
23227 5E19           B8                   A000  mov	ax,#$A000
23228 5E1C           50                         push	ax
23229                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23230 5E1D           E8         1E7F            call	_read_byte
23231 5E20           83C4                   04  add	sp,*4
23232                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23233 5E23           8846         FC            mov	-4[bp],al
23234                                           !BCC_EOS
23235                                           ! 2642      break;
23236 5E26           EB           25            jmp .1CA
23237                                           !BCC_EOS
23238                                           ! 2643    default:
23239                                           ! 2644      unimplemented();
23240                       00005E28            .1DD:
23241                                           ! Debug: func () void = unimplemented+0 (used reg = )
23242 5E28           E8         1F03            call	_unimplemented
23243                                           !BCC_EOS
23244                                           ! 2645      attr = 0;
23245                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23246 5E2B           30C0                       xor	al,al
23247 5E2D           8846         FC            mov	-4[bp],al
23248                                           !BCC_EOS
23249                                           ! 2646   }
23250                                           ! 2647  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23251 5E30           EB           1B            jmp .1CA
23252                       00005E32            .1CC:
23253 5E32           2C                     02  sub	al,*2
23254 5E34   7503    E9         FF26            beq 	.1D6
23255 5E39           2C                     01  sub	al,*1
23256 5E3B   7503    E9         FE88            beq 	.1CE
23257 5E40           2C                     01  sub	al,*1
23258 5E42   7503    E9         FE81            beq 	.1CD
23259 5E47           2C                     01  sub	al,*1
23260 5E49           74           AE            je 	.1DC
23261 5E4B           EB           DB            jmp	.1DD
23262                       00005E4D            .1CA:
23263                       FFFFFFF4            ..FFF7	=	-$C
23264                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23265 5E4D           FF76         0A            push	$A[bp]
23266                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23267 5E50           FF76         F6            push	-$A[bp]
23268                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23269 5E53           E8         1E5C            call	_read_word
23270 5E56           83C4                   04  add	sp,*4
23271                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23272 5E59           30C0                       xor	al,al
23273                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23274 5E5B           0A46         FC            or	al,-4[bp]
23275                                           ! Debug: list unsigned int = ax+0 (used reg = )
23276 5E5E           50                         push	ax
23277                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23278 5E5F           FF76         0A            push	$A[bp]
23279                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23280 5E62           FF76         F6            push	-$A[bp]
23281                                           ! Debug: func () void = write_word+0 (used reg = )
23282 5E65           E8         1E75            call	_write_word
23283 5E68           83C4                   06  add	sp,*6
23284                                           !BCC_EOS
23285                                           ! 2648 }
23286 5E6B           89EC                       mov	sp,bp
23287 5E6D           5D                         pop	bp
23288 5E6E           C3                         ret
23289                                           ! 2649 static void biosfn_write_teletype (car, page, attr, flag)
23290                                           ! Register BX used in function biosfn_read_pixel
23291                                           ! 2650 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23292                       00005E6F            _biosfn_write_teletype:
23293                                           !BCC_EOS
23294                                           !BCC_EOS
23295                                           !BCC_EOS
23296                                           !BCC_EOS
23297                                           ! 2651 {
23298                                           ! 2652  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23299                                           !BCC_EOS
23300                                           ! 2653  Bit16u nbcols,nbrows,address;
23301                                           !BCC_EOS
23302                                           ! 2654  Bit16u cursor,dummy;
23303                                           !BCC_EOS
23304                                           ! 2655  if(page==0xff)
23305 5E6F           55                         push	bp
23306 5E70           89E5                       mov	bp,sp
23307 5E72           83C4                   F0  add	sp,*-$10
23308                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23309 5E75           8A46         06            mov	al,6[bp]
23310 5E78           3C                     FF  cmp	al,#$FF
23311 5E7A           75           11            jne 	.1DE
23312                       00005E7C            .1DF:
23313                                           ! 2656   page=read_byte(0x40,0x62);
23314                                           ! Debug: list int = const $62 (used reg = )
23315 5E7C           B8                   0062  mov	ax,*$62
23316 5E7F           50                         push	ax
23317                                           ! Debug: list int = const $40 (used reg = )
23318 5E80           B8                   0040  mov	ax,*$40
23319 5E83           50                         push	ax
23320                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23321 5E84           E8         1E18            call	_read_byte
23322 5E87           83C4                   04  add	sp,*4
23323                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23324 5E8A           8846         06            mov	6[bp],al
23325                                           !BCC_EOS
23326                                           ! 2657  mode=read_byte(0x40,0x49);
23327                       00005E8D            .1DE:
23328                                           ! Debug: list int = const $49 (used reg = )
23329 5E8D           B8                   0049  mov	ax,*$49
23330 5E90           50                         push	ax
23331                                           ! Debug: list int = const $40 (used reg = )
23332 5E91           B8                   0040  mov	ax,*$40
23333 5E94           50                         push	ax
23334                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23335 5E95           E8         1E07            call	_read_byte
23336 5E98           83C4                   04  add	sp,*4
23337                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23338 5E9B           8846         FC            mov	-4[bp],al
23339                                           !BCC_EOS
23340                                           ! 2658  line=find_vga_entry(mode);
23341                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23342 5E9E           8A46         FC            mov	al,-4[bp]
23343 5EA1           30E4                       xor	ah,ah
23344 5EA3           50                         push	ax
23345                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23346 5EA4           E8         1D0C            call	_find_vga_entry
23347 5EA7           44                         inc	sp
23348 5EA8           44                         inc	sp
23349                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23350 5EA9           8846         FB            mov	-5[bp],al
23351                                           !BCC_EOS
23352                                           ! 2659  if(line==0xFF)ret
23353                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23354 5EAC           8A46         FB            mov	al,-5[bp]
23355 5EAF           3C                     FF  cmp	al,#$FF
23356 5EB1           75           04            jne 	.1E0
23357                       00005EB3            .1E1:
23358                                           ! 2659 urn;
23359 5EB3           89EC                       mov	sp,bp
23360 5EB5           5D                         pop	bp
23361 5EB6           C3                         ret
23362                                           !BCC_EOS
23363                                           ! 2660  biosfn_get_cursor_pos(page,&dummy,&cursor);
23364                       00005EB7            .1E0:
23365                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23366 5EB7           8D5E         F2            lea	bx,-$E[bp]
23367 5EBA           53                         push	bx
23368                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23369 5EBB           8D5E         F0            lea	bx,-$10[bp]
23370 5EBE           53                         push	bx
23371                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23372 5EBF           8A46         06            mov	al,6[bp]
23373 5EC2           30E4                       xor	ah,ah
23374 5EC4           50                         push	ax
23375                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23376 5EC5           E8         E4EF            call	_biosfn_get_cursor_pos
23377 5EC8           83C4                   06  add	sp,*6
23378                                           !BCC_EOS
23379                                           ! 2661  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23380                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23381 5ECB           8A46         F2            mov	al,-$E[bp]
23382                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23383 5ECE           8846         FE            mov	-2[bp],al
23384                                           !BCC_EOS
23385                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23386 5ED1           8B46         F2            mov	ax,-$E[bp]
23387 5ED4           30C0                       xor	al,al
23388                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23389 5ED6           88E0                       mov	al,ah
23390 5ED8           30E4                       xor	ah,ah
23391                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23392 5EDA           8846         FD            mov	-3[bp],al
23393                                           !BCC_EOS
23394                                           ! 2662  nbrows=read_byte(0x40,0x84)+1;
23395                                           ! Debug: list int = const $84 (used reg = )
23396 5EDD           B8                   0084  mov	ax,#$84
23397 5EE0           50                         push	ax
23398                                           ! Debug: list int = const $40 (used reg = )
23399 5EE1           B8                   0040  mov	ax,*$40
23400 5EE4           50                         push	ax
23401                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23402 5EE5           E8         1DB7            call	_read_byte
23403 5EE8           83C4                   04  add	sp,*4
23404                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23405 5EEB           30E4                       xor	ah,ah
23406                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23407 5EED           40                         inc	ax
23408 5EEE           8946         F6            mov	-$A[bp],ax
23409                                           !BCC_EOS
23410                                           ! 2663  nbcols=read_word(0x40,0x4A);
23411                                           ! Debug: list int = const $4A (used reg = )
23412 5EF1           B8                   004A  mov	ax,*$4A
23413 5EF4           50                         push	ax
23414                                           ! Debug: list int = const $40 (used reg = )
23415 5EF5           B8                   0040  mov	ax,*$40
23416 5EF8           50                         push	ax
23417                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23418 5EF9           E8         1DB6            call	_read_word
23419 5EFC           83C4                   04  add	sp,*4
23420                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23421 5EFF           8946         F8            mov	-8[bp],ax
23422                                           !BCC_EOS
23423                                           ! 2664  switch(car)
23424 5F02           8A46         04            mov	al,4[bp]
23425                                           ! 2665   {
23426 5F05           E9         01F3            br 	.1E4
23427                                           ! 2666    case 7:
23428                                           ! 2667     break;
23429                       00005F08            .1E5:
23430 5F08           E9         0216            br 	.1E2
23431                                           !BCC_EOS
23432                                           ! 2668    case 8:
23433                                           ! 2669     if(xcurs>0)xcurs--;
23434                       00005F0B            .1E6:
23435                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23436 5F0B           8A46         FE            mov	al,-2[bp]
23437 5F0E           84C0                       test	al,al
23438 5F10           74           07            je  	.1E7
23439                       00005F12            .1E8:
23440                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23441 5F12           8A46         FE            mov	al,-2[bp]
23442 5F15           48                         dec	ax
23443 5F16           8846         FE            mov	-2[bp],al
23444                                           !BCC_EOS
23445                                           ! 2670     break;
23446                       00005F19            .1E7:
23447 5F19           E9         0205            br 	.1E2
23448                                           !BCC_EOS
23449                                           ! 2671    case '\r':
23450                                           ! 2672     xcurs=0;
23451                       00005F1C            .1E9:
23452                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23453 5F1C           30C0                       xor	al,al
23454 5F1E           8846         FE            mov	-2[bp],al
23455                                           !BCC_EOS
23456                                           ! 2673     break;
23457 5F21           E9         01FD            br 	.1E2
23458                                           !BCC_EOS
23459                                           ! 2674    case '\n':
23460                                           ! 2675     ycurs++;
23461                       00005F24            .1EA:
23462                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23463 5F24           8A46         FD            mov	al,-3[bp]
23464 5F27           40                         inc	ax
23465 5F28           8846         FD            mov	-3[bp],al
23466                                           !BCC_EOS
23467                                           ! 2676     break;
23468 5F2B           E9         01F3            br 	.1E2
23469                                           !BCC_EOS
23470                                           ! 2677    case '\t':
23471                                           ! 2678     do
23472                       00005F2E            .1EB:
23473                                           ! 2679      {
23474                       00005F2E            .1EE:
23475                                           ! 2680       biosfn_write_teletype(' ',page,attr,flag);
23476                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23477 5F2E           8A46         0A            mov	al,$A[bp]
23478 5F31           30E4                       xor	ah,ah
23479 5F33           50                         push	ax
23480                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23481 5F34           8A46         08            mov	al,8[bp]
23482 5F37           30E4                       xor	ah,ah
23483 5F39           50                         push	ax
23484                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23485 5F3A           8A46         06            mov	al,6[bp]
23486 5F3D           30E4                       xor	ah,ah
23487 5F3F           50                         push	ax
23488                                           ! Debug: list int = const $20 (used reg = )
23489 5F40           B8                   0020  mov	ax,*$20
23490 5F43           50                         push	ax
23491                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23492 5F44           E8         FF28            call	_biosfn_write_teletype
23493 5F47           83C4                   08  add	sp,*8
23494                                           !BCC_EOS
23495                                           ! 2681       biosfn_get_cursor_pos(page,&dummy,&cursor);
23496                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23497 5F4A           8D5E         F2            lea	bx,-$E[bp]
23498 5F4D           53                         push	bx
23499                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23500 5F4E           8D5E         F0            lea	bx,-$10[bp]
23501 5F51           53                         push	bx
23502                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23503 5F52           8A46         06            mov	al,6[bp]
23504 5F55           30E4                       xor	ah,ah
23505 5F57           50                         push	ax
23506                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23507 5F58           E8         E45C            call	_biosfn_get_cursor_pos
23508 5F5B           83C4                   06  add	sp,*6
23509                                           !BCC_EOS
23510                                           ! 2682       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23511                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23512 5F5E           8A46         F2            mov	al,-$E[bp]
23513                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23514 5F61           8846         FE            mov	-2[bp],al
23515                                           !BCC_EOS
23516                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23517 5F64           8B46         F2            mov	ax,-$E[bp]
23518 5F67           30C0                       xor	al,al
23519                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23520 5F69           88E0                       mov	al,ah
23521 5F6B           30E4                       xor	ah,ah
23522                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23523 5F6D           8846         FD            mov	-3[bp],al
23524                                           !BCC_EOS
23525                                           ! 2683      }while(xcurs%8==0);
23526                       00005F70            .1ED:
23527                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23528 5F70           8A46         FE            mov	al,-2[bp]
23529 5F73           30E4                       xor	ah,ah
23530 5F75           24                     07  and	al,*7
23531                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23532 5F77           84C0                       test	al,al
23533 5F79           74           B3            je 	.1EE
23534                       00005F7B            .1EF:
23535                                           !BCC_EOS
23536                                           ! 2684     break;
23537                       00005F7B            .1EC:
23538 5F7B           E9         01A3            br 	.1E2
23539                                           !BCC_EOS
23540                                           ! 2685    default:
23541                                           ! 2686     if(vga_modes[line].class==0x00)
23542                       00005F7E            .1F0:
23543                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23544 5F7E           8A46         FB            mov	al,-5[bp]
23545 5F81           30E4                       xor	ah,ah
23546 5F83           B1                     03  mov	cl,*3
23547 5F85           D3E0                       shl	ax,cl
23548 5F87           89C3                       mov	bx,ax
23549 5F89           81C3                 01C4  add	bx,#_vga_modes
23550                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23551 5F8D           8A47         01            mov	al,1[bx]
23552 5F90           84C0                       test	al,al
23553 5F92   7403    E9         0082            bne 	.1F1
23554                       00005F97            .1F2:
23555                                           ! 2687      {
23556                                           ! 2688       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23557                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23558 5F97           8A46         FD            mov	al,-3[bp]
23559 5F9A           30E4                       xor	ah,ah
23560 5F9C           8B4E         F8            mov	cx,-8[bp]
23561 5F9F           F7E9                       imul	cx
23562                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23563                                           ! Debug: expression subtree swapping
23564 5FA1           0246         FE            add	al,-2[bp]
23565 5FA4           80D4                   00  adc	ah,*0
23566                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23567 5FA7           D1E0                       shl	ax,*1
23568 5FA9           50                         push	ax
23569                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23570 5FAA           8B46         F8            mov	ax,-8[bp]
23571 5FAD           8B4E         F6            mov	cx,-$A[bp]
23572 5FB0           F7E9                       imul	cx
23573                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23574 5FB2           D1E0                       shl	ax,*1
23575                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23576 5FB4           0C                     FF  or	al,#$FF
23577                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23578                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23579 5FB6           89C3                       mov	bx,ax
23580 5FB8           8A46         06            mov	al,6[bp]
23581 5FBB           30E4                       xor	ah,ah
23582 5FBD           93                         xchg	ax,bx
23583 5FBE           40                         inc	ax
23584 5FBF           89D9                       mov	cx,bx
23585 5FC1           F7E9                       imul	cx
23586                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23587 5FC3           0346         EE            add	ax,0+..FFF6[bp]
23588 5FC6           44                         inc	sp
23589 5FC7           44                         inc	sp
23590                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23591 5FC8           8946         F4            mov	-$C[bp],ax
23592                                           !BCC_EOS
23593                                           ! 2689       write_byte(vga_modes[line].sstart,address,car);
23594                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23595 5FCB           8A46         04            mov	al,4[bp]
23596 5FCE           30E4                       xor	ah,ah
23597 5FD0           50                         push	ax
23598                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23599 5FD1           FF76         F4            push	-$C[bp]
23600                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23601 5FD4           8A46         FB            mov	al,-5[bp]
23602 5FD7           30E4                       xor	ah,ah
23603 5FD9           B1                     03  mov	cl,*3
23604 5FDB           D3E0                       shl	ax,cl
23605 5FDD           89C3                       mov	bx,ax
23606 5FDF           81C3                 01C4  add	bx,#_vga_modes
23607                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23608 5FE3           FF77         04            push	4[bx]
23609                                           ! Debug: func () void = write_byte+0 (used reg = )
23610 5FE6           E8         1CDC            call	_write_byte
23611 5FE9           83C4                   06  add	sp,*6
23612                                           !BCC_EOS
23613                                           ! 2690       if(flag==3)
23614                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23615 5FEC           8A46         0A            mov	al,$A[bp]
23616 5FEF           3C                     03  cmp	al,*3
23617 5FF1           75           23            jne 	.1F3
23618                       00005FF3            .1F4:
23619                                           ! 2691        write_byte(vga_modes[line].sstart,address+1,attr);
23620                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23621 5FF3           8A46         08            mov	al,8[bp]
23622 5FF6           30E4                       xor	ah,ah
23623 5FF8           50                         push	ax
23624                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23625 5FF9           8B46         F4            mov	ax,-$C[bp]
23626                                           ! Debug: list unsigned int = ax+1 (used reg = )
23627 5FFC           40                         inc	ax
23628 5FFD           50                         push	ax
23629                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23630 5FFE           8A46         FB            mov	al,-5[bp]
23631 6001           30E4                       xor	ah,ah
23632 6003           B1                     03  mov	cl,*3
23633 6005           D3E0                       shl	ax,cl
23634 6007           89C3                       mov	bx,ax
23635 6009           81C3                 01C4  add	bx,#_vga_modes
23636                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23637 600D           FF77         04            push	4[bx]
23638                                           ! Debug: func () void = write_byte+0 (used reg = )
23639 6010           E8         1CB2            call	_write_byte
23640 6013           83C4                   06  add	sp,*6
23641                                           !BCC_EOS
23642                                           ! 2692      }
23643                       00006016            .1F3:
23644                                           ! 2693     else
23645                                           ! 2694      {
23646 6016           E9         00D9            br 	.1F5
23647                       00006019            .1F1:
23648                                           ! 2695       cheight=video_param_table[line_to_vpti[line]].cheight;
23649                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23650 6019           8A46         FB            mov	al,-5[bp]
23651 601C           30E4                       xor	ah,ah
23652 601E           89C3                       mov	bx,ax
23653                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23654 6020           8A87       0244            mov	al,_line_to_vpti[bx]
23655 6024           30E4                       xor	ah,ah
23656 6026           B1                     06  mov	cl,*6
23657 6028           D3E0                       shl	ax,cl
23658 602A           89C3                       mov	bx,ax
23659 602C           81C3                 0258  add	bx,#_video_param_table
23660                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23661 6030           8A47         02            mov	al,2[bx]
23662 6033           8846         FF            mov	-1[bp],al
23663                                           !BCC_EOS
23664                                           ! 2696       bpp=vga_modes[line].pixbits;
23665                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23666 6036           8A46         FB            mov	al,-5[bp]
23667 6039           30E4                       xor	ah,ah
23668 603B           B1                     03  mov	cl,*3
23669 603D           D3E0                       shl	ax,cl
23670 603F           89C3                       mov	bx,ax
23671 6041           81C3                 01C4  add	bx,#_vga_modes
23672                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23673 6045           8A47         03            mov	al,3[bx]
23674 6048           8846         FA            mov	-6[bp],al
23675                                           !BCC_EOS
23676                                           ! 2697       switch(vga_modes[line].memmodel)
23677                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23678 604B           8A46         FB            mov	al,-5[bp]
23679 604E           30E4                       xor	ah,ah
23680 6050           B1                     03  mov	cl,*3
23681 6052           D3E0                       shl	ax,cl
23682 6054           89C3                       mov	bx,ax
23683 6056           81C3                 01C4  add	bx,#_vga_modes
23684 605A           8A47         02            mov	al,2[bx]
23685                                           ! 2698        {
23686 605D           E9         007A            br 	.1F8
23687                                           ! 2699         case 0x04:
23688                                           ! 2700         case 0x03:
23689                       00006060            .1F9:
23690                                           ! 2701           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23691                       00006060            .1FA:
23692                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23693 6060           8A46         FF            mov	al,-1[bp]
23694 6063           30E4                       xor	ah,ah
23695 6065           50                         push	ax
23696                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23697 6066           FF76         F8            push	-8[bp]
23698                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23699 6069           8A46         FD            mov	al,-3[bp]
23700 606C           30E4                       xor	ah,ah
23701 606E           50                         push	ax
23702                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23703 606F           8A46         FE            mov	al,-2[bp]
23704 6072           30E4                       xor	ah,ah
23705 6074           50                         push	ax
23706                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23707 6075           8A46         08            mov	al,8[bp]
23708 6078           30E4                       xor	ah,ah
23709 607A           50                         push	ax
23710                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23711 607B           8A46         04            mov	al,4[bp]
23712 607E           30E4                       xor	ah,ah
23713 6080           50                         push	ax
23714                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23715 6081           E8         F078            call	_write_gfx_char_pl4
23716 6084           83C4                   0C  add	sp,*$C
23717                                           !BCC_EOS
23718                                           ! 2702           break;
23719 6087           EB           69            jmp .1F6
23720                                           !BCC_EOS
23721                                           ! 2703         case 0x02:
23722                                           ! 2704           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23723                       00006089            .1FB:
23724                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23725 6089           8A46         FA            mov	al,-6[bp]
23726 608C           30E4                       xor	ah,ah
23727 608E           50                         push	ax
23728                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23729 608F           FF76         F8            push	-8[bp]
23730                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23731 6092           8A46         FD            mov	al,-3[bp]
23732 6095           30E4                       xor	ah,ah
23733 6097           50                         push	ax
23734                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23735 6098           8A46         FE            mov	al,-2[bp]
23736 609B           30E4                       xor	ah,ah
23737 609D           50                         push	ax
23738                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23739 609E           8A46         08            mov	al,8[bp]
23740 60A1           30E4                       xor	ah,ah
23741 60A3           50                         push	ax
23742                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23743 60A4           8A46         04            mov	al,4[bp]
23744 60A7           30E4                       xor	ah,ah
23745 60A9           50                         push	ax
23746                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23747 60AA           E8         F1C4            call	_write_gfx_char_cga
23748 60AD           83C4                   0C  add	sp,*$C
23749                                           !BCC_EOS
23750                                           ! 2705           break;
23751 60B0           EB           40            jmp .1F6
23752                                           !BCC_EOS
23753                                           ! 2706         case 0x05:
23754                                           ! 2707           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23755                       000060B2            .1FC:
23756                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23757 60B2           FF76         F8            push	-8[bp]
23758                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23759 60B5           8A46         FD            mov	al,-3[bp]
23760 60B8           30E4                       xor	ah,ah
23761 60BA           50                         push	ax
23762                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23763 60BB           8A46         FE            mov	al,-2[bp]
23764 60BE           30E4                       xor	ah,ah
23765 60C0           50                         push	ax
23766                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23767 60C1           8A46         08            mov	al,8[bp]
23768 60C4           30E4                       xor	ah,ah
23769 60C6           50                         push	ax
23770                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23771 60C7           8A46         04            mov	al,4[bp]
23772 60CA           30E4                       xor	ah,ah
23773 60CC           50                         push	ax
23774                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23775 60CD           E8         F3A7            call	_write_gfx_char_lin
23776 60D0           83C4                   0A  add	sp,*$A
23777                                           !BCC_EOS
23778                                           ! 2708           break;
23779 60D3           EB           1D            jmp .1F6
23780                                           !BCC_EOS
23781                                           ! 2709         default:
23782                                           ! 2710           unimplemented();
23783                       000060D5            .1FD:
23784                                           ! Debug: func () void = unimplemented+0 (used reg = )
23785 60D5           E8         1C56            call	_unimplemented
23786                                           !BCC_EOS
23787                                           ! 2711        }
23788                                           ! 2712      }
23789 60D8           EB           18            jmp .1F6
23790                       000060DA            .1F8:
23791 60DA           2C                     02  sub	al,*2
23792 60DC           74           AB            je 	.1FB
23793 60DE           2C                     01  sub	al,*1
23794 60E0   7503    E9         FF7B            beq 	.1FA
23795 60E5           2C                     01  sub	al,*1
23796 60E7   7503    E9         FF74            beq 	.1F9
23797 60EC           2C                     01  sub	al,*1
23798 60EE           74           C2            je 	.1FC
23799 60F0           EB           E3            jmp	.1FD
23800                       000060F2            .1F6:
23801                                           ! 2713     xcurs++;
23802                       000060F2            .1F5:
23803                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23804 60F2           8A46         FE            mov	al,-2[bp]
23805 60F5           40                         inc	ax
23806 60F6           8846         FE            mov	-2[bp],al
23807                                           !BCC_EOS
23808                                           ! 2714   }
23809                                           ! 2715  if(xcurs==nbcols)
23810 60F9           EB           26            jmp .1E2
23811                       000060FB            .1E4:
23812 60FB           2C                     07  sub	al,*7
23813 60FD   7503    E9         FE06            beq 	.1E5
23814 6102           2C                     01  sub	al,*1
23815 6104   7503    E9         FE02            beq 	.1E6
23816 6109           2C                     01  sub	al,*1
23817 610B   7503    E9         FE1E            beq 	.1EB
23818 6110           2C                     01  sub	al,*1
23819 6112   7503    E9         FE0D            beq 	.1EA
23820 6117           2C                     03  sub	al,*3
23821 6119   7503    E9         FDFE            beq 	.1E9
23822 611E           E9         FE5D            br 	.1F0
23823                       00006121            .1E2:
23824                       FFFFFFEE            ..FFF6	=	-$12
23825                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23826 6121           8A46         FE            mov	al,-2[bp]
23827 6124           30E4                       xor	ah,ah
23828 6126           3B46         F8            cmp	ax,-8[bp]
23829 6129           75           0C            jne 	.1FE
23830                       0000612B            .1FF:
23831                                           ! 2716   {xcurs=0;
23832                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23833 612B           30C0                       xor	al,al
23834 612D           8846         FE            mov	-2[bp],al
23835                                           !BCC_EOS
23836                                           ! 2717    ycurs++;
23837                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23838 6130           8A46         FD            mov	al,-3[bp]
23839 6133           40                         inc	ax
23840 6134           8846         FD            mov	-3[bp],al
23841                                           !BCC_EOS
23842                                           ! 2718   }
23843                                           ! 2719  if(ycurs==nbrows)
23844                       00006137            .1FE:
23845                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23846 6137           8A46         FD            mov	al,-3[bp]
23847 613A           30E4                       xor	ah,ah
23848 613C           3B46         F6            cmp	ax,-$A[bp]
23849 613F   7403    E9         00CA            bne 	.200
23850                       00006144            .201:
23851                                           ! 2720   {
23852                                           ! 2721    if(vga_modes[line].class==0x00)
23853                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23854 6144           8A46         FB            mov	al,-5[bp]
23855 6147           30E4                       xor	ah,ah
23856 6149           B1                     03  mov	cl,*3
23857 614B           D3E0                       shl	ax,cl
23858 614D           89C3                       mov	bx,ax
23859 614F           81C3                 01C4  add	bx,#_vga_modes
23860                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23861 6153           8A47         01            mov	al,1[bx]
23862 6156           84C0                       test	al,al
23863 6158   7403    E9         0081            bne 	.202
23864                       0000615D            .203:
23865                                           ! 2722     {
23866                                           ! 2723      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23867                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23868 615D           8A46         FD            mov	al,-3[bp]
23869 6160           30E4                       xor	ah,ah
23870                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23871 6162           48                         dec	ax
23872 6163           8B4E         F8            mov	cx,-8[bp]
23873 6166           F7E9                       imul	cx
23874                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23875                                           ! Debug: expression subtree swapping
23876 6168           0246         FE            add	al,-2[bp]
23877 616B           80D4                   00  adc	ah,*0
23878                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23879 616E           D1E0                       shl	ax,*1
23880 6170           50                         push	ax
23881                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23882 6171           8B46         F8            mov	ax,-8[bp]
23883 6174           8B4E         F6            mov	cx,-$A[bp]
23884 6177           F7E9                       imul	cx
23885                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23886 6179           D1E0                       shl	ax,*1
23887                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23888 617B           0C                     FF  or	al,#$FF
23889                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23890                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23891 617D           89C3                       mov	bx,ax
23892 617F           8A46         06            mov	al,6[bp]
23893 6182           30E4                       xor	ah,ah
23894 6184           93                         xchg	ax,bx
23895 6185           40                         inc	ax
23896 6186           89D9                       mov	cx,bx
23897 6188           F7E9                       imul	cx
23898                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23899 618A           0346         EE            add	ax,-$12[bp]
23900 618D           44                         inc	sp
23901 618E           44                         inc	sp
23902                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23903 618F           8946         F4            mov	-$C[bp],ax
23904                                           !BCC_EOS
23905                                           ! 2724      attr=read_byte(vga_modes[line].sstart,address+1);
23906                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23907 6192           8B46         F4            mov	ax,-$C[bp]
23908                                           ! Debug: list unsigned int = ax+1 (used reg = )
23909 6195           40                         inc	ax
23910 6196           50                         push	ax
23911                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23912 6197           8A46         FB            mov	al,-5[bp]
23913 619A           30E4                       xor	ah,ah
23914 619C           B1                     03  mov	cl,*3
23915 619E           D3E0                       shl	ax,cl
23916 61A0           89C3                       mov	bx,ax
23917 61A2           81C3                 01C4  add	bx,#_vga_modes
23918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23919 61A6           FF77         04            push	4[bx]
23920                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23921 61A9           E8         1AF3            call	_read_byte
23922 61AC           83C4                   04  add	sp,*4
23923                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23924 61AF           8846         08            mov	8[bp],al
23925                                           !BCC_EOS
23926                                           ! 2725      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23927                                           ! Debug: list int = const 1 (used reg = )
23928 61B2           B8                   0001  mov	ax,*1
23929 61B5           50                         push	ax
23930                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23931 61B6           8A46         06            mov	al,6[bp]
23932 61B9           30E4                       xor	ah,ah
23933 61BB           50                         push	ax
23934                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23935 61BC           8B46         F8            mov	ax,-8[bp]
23936                                           ! Debug: list unsigned int = ax-1 (used reg = )
23937 61BF           48                         dec	ax
23938 61C0           50                         push	ax
23939                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23940 61C1           8B46         F6            mov	ax,-$A[bp]
23941                                           ! Debug: list unsigned int = ax-1 (used reg = )
23942 61C4           48                         dec	ax
23943 61C5           50                         push	ax
23944                                           ! Debug: list int = const 0 (used reg = )
23945 61C6           31C0                       xor	ax,ax
23946 61C8           50                         push	ax
23947                                           ! Debug: list int = const 0 (used reg = )
23948 61C9           31C0                       xor	ax,ax
23949 61CB           50                         push	ax
23950                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23951 61CC           8A46         08            mov	al,8[bp]
23952 61CF           30E4                       xor	ah,ah
23953 61D1           50                         push	ax
23954                                           ! Debug: list int = const 1 (used reg = )
23955 61D2           B8                   0001  mov	ax,*1
23956 61D5           50                         push	ax
23957                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23958 61D6           E8         E6EA            call	_biosfn_scroll
23959 61D9           83C4                   10  add	sp,*$10
23960                                           !BCC_EOS
23961                                           ! 2726     }
23962                                           ! 2727    else
23963                                           ! 2728     {
23964 61DC           EB           27            jmp .204
23965                       000061DE            .202:
23966                                           ! 2729      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
23967                                           ! Debug: list int = const 1 (used reg = )
23968 61DE           B8                   0001  mov	ax,*1
23969 61E1           50                         push	ax
23970                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23971 61E2           8A46         06            mov	al,6[bp]
23972 61E5           30E4                       xor	ah,ah
23973 61E7           50                         push	ax
23974                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23975 61E8           8B46         F8            mov	ax,-8[bp]
23976                                           ! Debug: list unsigned int = ax-1 (used reg = )
23977 61EB           48                         dec	ax
23978 61EC           50                         push	ax
23979                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23980 61ED           8B46         F6            mov	ax,-$A[bp]
23981                                           ! Debug: list unsigned int = ax-1 (used reg = )
23982 61F0           48                         dec	ax
23983 61F1           50                         push	ax
23984                                           ! Debug: list int = const 0 (used reg = )
23985 61F2           31C0                       xor	ax,ax
23986 61F4           50                         push	ax
23987                                           ! Debug: list int = const 0 (used reg = )
23988 61F5           31C0                       xor	ax,ax
23989 61F7           50                         push	ax
23990                                           ! Debug: list int = const 0 (used reg = )
23991 61F8           31C0                       xor	ax,ax
23992 61FA           50                         push	ax
23993                                           ! Debug: list int = const 1 (used reg = )
23994 61FB           B8                   0001  mov	ax,*1
23995 61FE           50                         push	ax
23996                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23997 61FF           E8         E6C1            call	_biosfn_scroll
23998 6202           83C4                   10  add	sp,*$10
23999                                           !BCC_EOS
24000                                           ! 2730     }
24001                                           ! 2731    ycurs-=1;
24002                       00006205            .204:
24003                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24004 6205           8A46         FD            mov	al,-3[bp]
24005 6208           30E4                       xor	ah,ah
24006 620A           48                         dec	ax
24007 620B           8846         FD            mov	-3[bp],al
24008                                           !BCC_EOS
24009                                           ! 2732   }
24010                                           ! 2733  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24011                       0000620E            .200:
24012                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24013 620E           8A46         FD            mov	al,-3[bp]
24014 6211           30E4                       xor	ah,ah
24015 6213           8946         F2            mov	-$E[bp],ax
24016                                           !BCC_EOS
24017                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24018 6216           8B46         F2            mov	ax,-$E[bp]
24019 6219           88C4                       mov	ah,al
24020 621B           30C0                       xor	al,al
24021 621D           8946         F2            mov	-$E[bp],ax
24022                                           !BCC_EOS
24023                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24024 6220           8B46         F2            mov	ax,-$E[bp]
24025 6223           0246         FE            add	al,-2[bp]
24026 6226           80D4                   00  adc	ah,*0
24027 6229           8946         F2            mov	-$E[bp],ax
24028                                           !BCC_EOS
24029                                           ! 2734  biosfn_set_cursor_pos(page,cursor);
24030                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24031 622C           FF76         F2            push	-$E[bp]
24032                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24033 622F           8A46         06            mov	al,6[bp]
24034 6232           30E4                       xor	ah,ah
24035 6234           50                         push	ax
24036                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24037 6235           E8         E07E            call	_biosfn_set_cursor_pos
24038 6238           83C4                   04  add	sp,*4
24039                                           !BCC_EOS
24040                                           ! 2735 }
24041 623B           89EC                       mov	sp,bp
24042 623D           5D                         pop	bp
24043 623E           C3                         ret
24044                                           ! 2736 #asm
24045                                           !BCC_ASM
24046                       00000008            _biosfn_write_teletype.flag	set	8
24047                       00000006            _biosfn_write_teletype.attr	set	6
24048                       00000004            _biosfn_write_teletype.page	set	4
24049                       00000002            _biosfn_write_teletype.car	set	2
24050                       0000623F            biosfn_get_video_mode:
24051 623F           1E                           push ds
24052 6240           B8                   0040    mov ax, # 0x40
24053 6243           8ED8                         mov ds, ax
24054 6245           53                           push bx
24055 6246           BB                   0062    mov bx, # 0x62
24056 6249           8A07                         mov al, [bx]
24057 624B           5B                           pop bx
24058 624C           88C7                         mov bh, al
24059 624E           53                           push bx
24060 624F           BB                   0087    mov bx, # 0x87
24061 6252           8A27                         mov ah, [bx]
24062 6254           80E4                   80    and ah, #0x80
24063 6257           BB                   0049    mov bx, # 0x49
24064 625A           8A07                         mov al, [bx]
24065 625C           08E0                         or al, ah
24066 625E           BB                   004A    mov bx, # 0x4A
24067 6261           8A27                         mov ah, [bx]
24068 6263           5B                           pop bx
24069 6264           1F                           pop ds
24070 6265           C3                           ret
24071                                           ! 2758 endasm
24072                                           !BCC_ENDASM
24073                                           ! 2759 #asm
24074                                           !BCC_ASM
24075                       00000008            _biosfn_write_teletype.flag	set	8
24076                       00000006            _biosfn_write_teletype.attr	set	6
24077                       00000004            _biosfn_write_teletype.page	set	4
24078                       00000002            _biosfn_write_teletype.car	set	2
24079                       00006266            biosfn_group_10:
24080 6266           3C                     00    cmp al, #0x00
24081 6268           75           02              jne int10_test_1001
24082 626A           EB           64              jmp biosfn_set_single_palette_reg
24083                       0000626C            int10_test_1001:
24084 626C           3C                     01    cmp al, #0x01
24085 626E           75           02              jne int10_test_1002
24086 6270           EB           78              jmp biosfn_set_overscan_border_color
24087                       00006272            int10_test_1002:
24088 6272           3C                     02    cmp al, #0x02
24089 6274           75           02              jne int10_test_1003
24090 6276           EB           7A              jmp biosfn_set_all_palette_reg
24091                       00006278            int10_test_1003:
24092 6278           3C                     03    cmp al, #0x03
24093 627A           75           03              jne int10_test_1007
24094 627C           E9         00A0              jmp biosfn_toggle_intensity
24095                       0000627F            int10_test_1007:
24096 627F           3C                     07    cmp al, #0x07
24097 6281           75           03              jne int10_test_1008
24098 6283           E9         00BF              jmp biosfn_get_single_palette_reg
24099                       00006286            int10_test_1008:
24100 6286           3C                     08    cmp al, #0x08
24101 6288           75           03              jne int10_test_1009
24102 628A           E9         00DC              jmp biosfn_read_overscan_border_color
24103                       0000628D            int10_test_1009:
24104 628D           3C                     09    cmp al, #0x09
24105 628F           75           03              jne int10_test_1010
24106 6291           E9         00E3              jmp biosfn_get_all_palette_reg
24107                       00006294            int10_test_1010:
24108 6294           3C                     10    cmp al, #0x10
24109 6296           75           03              jne int10_test_1012
24110 6298           E9         011D              jmp biosfn_set_single_dac_reg
24111                       0000629B            int10_test_1012:
24112 629B           3C                     12    cmp al, #0x12
24113 629D           75           03              jne int10_test_1013
24114 629F           E9         012F              jmp biosfn_set_all_dac_reg
24115                       000062A2            int10_test_1013:
24116 62A2           3C                     13    cmp al, #0x13
24117 62A4           75           03              jne int10_test_1015
24118 62A6           E9         0150              jmp biosfn_select_video_dac_color_page
24119                       000062A9            int10_test_1015:
24120 62A9           3C                     15    cmp al, #0x15
24121 62AB           75           03              jne int10_test_1017
24122 62AD           E9         018C              jmp biosfn_read_single_dac_reg
24123                       000062B0            int10_test_1017:
24124 62B0           3C                     17    cmp al, #0x17
24125 62B2           75           03              jne int10_test_1018
24126 62B4           E9         01A0              jmp biosfn_read_all_dac_reg
24127                       000062B7            int10_test_1018:
24128 62B7           3C                     18    cmp al, #0x18
24129 62B9           75           03              jne int10_test_1019
24130 62BB           E9         01C1              jmp biosfn_set_pel_mask
24131                       000062BE            int10_test_1019:
24132 62BE           3C                     19    cmp al, #0x19
24133 62C0           75           03              jne int10_test_101A
24134 62C2           E9         01C5              jmp biosfn_read_pel_mask
24135                       000062C5            int10_test_101A:
24136 62C5           3C                     1A    cmp al, #0x1a
24137 62C7           75           03              jne int10_group_10_unknown
24138 62C9           E9         01C9              jmp biosfn_read_video_dac_state
24139                       000062CC            int10_group_10_unknown:
24140 62CC           E8         1A6D              call _unknown
24141 62CF           C3                           ret
24142                       000062D0            biosfn_set_single_palette_reg:
24143 62D0           80FB                   14    cmp bl, #0x14
24144 62D3           77           14              ja no_actl_reg1
24145 62D5           50                           push ax
24146 62D6           52                           push dx
24147 62D7           BA                   03DA    mov dx, # 0x3da
24148 62DA           EC                           in al, dx
24149 62DB           BA                   03C0    mov dx, # 0x3c0
24150 62DE           88D8                         mov al, bl
24151 62E0           EE                           out dx, al
24152 62E1           88F8                         mov al, bh
24153 62E3           EE                           out dx, al
24154 62E4           B0                     20    mov al, #0x20
24155 62E6           EE                           out dx, al
24156 62E7           5A                           pop dx
24157 62E8           58                           pop ax
24158                       000062E9            no_actl_reg1:
24159 62E9           C3                           ret
24160                                           ! 2841 endasm
24161                                           !BCC_ENDASM
24162                                           ! 2842 #asm
24163                                           !BCC_ASM
24164                       00000008            _biosfn_write_teletype.flag	set	8
24165                       00000006            _biosfn_write_teletype.attr	set	6
24166                       00000004            _biosfn_write_teletype.page	set	4
24167                       00000002            _biosfn_write_teletype.car	set	2
24168                       000062EA            biosfn_set_overscan_border_color:
24169 62EA           53                           push bx
24170 62EB           B3                     11    mov bl, #0x11
24171 62ED           E8         FFE0              call biosfn_set_single_palette_reg
24172 62F0           5B                           pop bx
24173 62F1           C3                           ret
24174                                           ! 2849 endasm
24175                                           !BCC_ENDASM
24176                                           ! 2850 #asm
24177                                           !BCC_ASM
24178                       00000008            _biosfn_write_teletype.flag	set	8
24179                       00000006            _biosfn_write_teletype.attr	set	6
24180                       00000004            _biosfn_write_teletype.page	set	4
24181                       00000002            _biosfn_write_teletype.car	set	2
24182                       000062F2            biosfn_set_all_palette_reg:
24183 62F2           50                           push ax
24184 62F3           53                           push bx
24185 62F4           51                           push cx
24186 62F5           52                           push dx
24187 62F6           89D3                         mov bx, dx
24188 62F8           BA                   03DA    mov dx, # 0x3da
24189 62FB           EC                           in al, dx
24190 62FC           B1                     00    mov cl, #0x00
24191 62FE           BA                   03C0    mov dx, # 0x3c0
24192                       00006301            set_palette_loop:
24193 6301           88C8                         mov al, cl
24194 6303           EE                           out dx, al
24195 6304           26                           seg es
24196 6305           8A07                         mov al, [bx]
24197 6307           EE                           out dx, al
24198 6308           43                           inc bx
24199 6309           FEC1                         inc cl
24200 630B           80F9                   10    cmp cl, #0x10
24201 630E           75           F1              jne set_palette_loop
24202 6310           B0                     11    mov al, #0x11
24203 6312           EE                           out dx, al
24204 6313           26                           seg es
24205 6314           8A07                         mov al, [bx]
24206 6316           EE                           out dx, al
24207 6317           B0                     20    mov al, #0x20
24208 6319           EE                           out dx, al
24209 631A           5A                           pop dx
24210 631B           59                           pop cx
24211 631C           5B                           pop bx
24212 631D           58                           pop ax
24213 631E           C3                           ret
24214                                           ! 2883 endasm
24215                                           !BCC_ENDASM
24216                                           ! 2884 #asm
24217                                           !BCC_ASM
24218                       00000008            _biosfn_write_teletype.flag	set	8
24219                       00000006            _biosfn_write_teletype.attr	set	6
24220                       00000004            _biosfn_write_teletype.page	set	4
24221                       00000002            _biosfn_write_teletype.car	set	2
24222                       0000631F            biosfn_toggle_intensity:
24223 631F           50                           push ax
24224 6320           53                           push bx
24225 6321           52                           push dx
24226 6322           BA                   03DA    mov dx, # 0x3da
24227 6325           EC                           in al, dx
24228 6326           BA                   03C0    mov dx, # 0x3c0
24229 6329           B0                     10    mov al, #0x10
24230 632B           EE                           out dx, al
24231 632C           BA                   03C1    mov dx, # 0x3c1
24232 632F           EC                           in al, dx
24233 6330           24                     F7    and al, #0xf7
24234 6332           80E3                   01    and bl, #0x01
24235 6335           C0E3                   03    shl bl, 3
24236 6338           08D8                         or al, bl
24237 633A           BA                   03C0    mov dx, # 0x3c0
24238 633D           EE                           out dx, al
24239 633E           B0                     20    mov al, #0x20
24240 6340           EE                           out dx, al
24241 6341           5A                           pop dx
24242 6342           5B                           pop bx
24243 6343           58                           pop ax
24244 6344           C3                           ret
24245                                           ! 2908 endasm
24246                                           !BCC_ENDASM
24247                                           ! 2909 #asm
24248                                           !BCC_ASM
24249                       00000008            _biosfn_write_teletype.flag	set	8
24250                       00000006            _biosfn_write_teletype.attr	set	6
24251                       00000004            _biosfn_write_teletype.page	set	4
24252                       00000002            _biosfn_write_teletype.car	set	2
24253                       00006345            biosfn_get_single_palette_reg:
24254 6345           80FB                   14    cmp bl, #0x14
24255 6348           77           1E              ja no_actl_reg2
24256 634A           50                           push ax
24257 634B           52                           push dx
24258 634C           BA                   03DA    mov dx, # 0x3da
24259 634F           EC                           in al, dx
24260 6350           BA                   03C0    mov dx, # 0x3c0
24261 6353           88D8                         mov al, bl
24262 6355           EE                           out dx, al
24263 6356           BA                   03C1    mov dx, # 0x3c1
24264 6359           EC                           in al, dx
24265 635A           88C7                         mov bh, al
24266 635C           BA                   03DA    mov dx, # 0x3da
24267 635F           EC                           in al, dx
24268 6360           BA                   03C0    mov dx, # 0x3c0
24269 6363           B0                     20    mov al, #0x20
24270 6365           EE                           out dx, al
24271 6366           5A                           pop dx
24272 6367           58                           pop ax
24273                       00006368            no_actl_reg2:
24274 6368           C3                           ret
24275                                           ! 2932 endasm
24276                                           !BCC_ENDASM
24277                                           ! 2933 #asm
24278                                           !BCC_ASM
24279                       00000008            _biosfn_write_teletype.flag	set	8
24280                       00000006            _biosfn_write_teletype.attr	set	6
24281                       00000004            _biosfn_write_teletype.page	set	4
24282                       00000002            _biosfn_write_teletype.car	set	2
24283                       00006369            biosfn_read_overscan_border_color:
24284 6369           50                           push ax
24285 636A           53                           push bx
24286 636B           B3                     11    mov bl, #0x11
24287 636D           E8         FFD5              call biosfn_get_single_palette_reg
24288 6370           88F8                         mov al, bh
24289 6372           5B                           pop bx
24290 6373           88C7                         mov bh, al
24291 6375           58                           pop ax
24292 6376           C3                           ret
24293                                           ! 2944 endasm
24294                                           !BCC_ENDASM
24295                                           ! 2945 #asm
24296                                           !BCC_ASM
24297                       00000008            _biosfn_write_teletype.flag	set	8
24298                       00000006            _biosfn_write_teletype.attr	set	6
24299                       00000004            _biosfn_write_teletype.page	set	4
24300                       00000002            _biosfn_write_teletype.car	set	2
24301                       00006377            biosfn_get_all_palette_reg:
24302 6377           50                           push ax
24303 6378           53                           push bx
24304 6379           51                           push cx
24305 637A           52                           push dx
24306 637B           89D3                         mov bx, dx
24307 637D           B1                     00    mov cl, #0x00
24308                       0000637F            get_palette_loop:
24309 637F           BA                   03DA    mov dx, # 0x3da
24310 6382           EC                           in al, dx
24311 6383           BA                   03C0    mov dx, # 0x3c0
24312 6386           88C8                         mov al, cl
24313 6388           EE                           out dx, al
24314 6389           BA                   03C1    mov dx, # 0x3c1
24315 638C           EC                           in al, dx
24316 638D           26                           seg es
24317 638E           8807                         mov [bx], al
24318 6390           43                           inc bx
24319 6391           FEC1                         inc cl
24320 6393           80F9                   10    cmp cl, #0x10
24321 6396           75           E7              jne get_palette_loop
24322 6398           BA                   03DA    mov dx, # 0x3da
24323 639B           EC                           in al, dx
24324 639C           BA                   03C0    mov dx, # 0x3c0
24325 639F           B0                     11    mov al, #0x11
24326 63A1           EE                           out dx, al
24327 63A2           BA                   03C1    mov dx, # 0x3c1
24328 63A5           EC                           in al, dx
24329 63A6           26                           seg es
24330 63A7           8807                         mov [bx], al
24331 63A9           BA                   03DA    mov dx, # 0x3da
24332 63AC           EC                           in al, dx
24333 63AD           BA                   03C0    mov dx, # 0x3c0
24334 63B0           B0                     20    mov al, #0x20
24335 63B2           EE                           out dx, al
24336 63B3           5A                           pop dx
24337 63B4           59                           pop cx
24338 63B5           5B                           pop bx
24339 63B6           58                           pop ax
24340 63B7           C3                           ret
24341                                           ! 2986 endasm
24342                                           !BCC_ENDASM
24343                                           ! 2987 #asm
24344                                           !BCC_ASM
24345                       00000008            _biosfn_write_teletype.flag	set	8
24346                       00000006            _biosfn_write_teletype.attr	set	6
24347                       00000004            _biosfn_write_teletype.page	set	4
24348                       00000002            _biosfn_write_teletype.car	set	2
24349                       000063B8            biosfn_set_single_dac_reg:
24350 63B8           50                           push ax
24351 63B9           52                           push dx
24352 63BA           BA                   03C8    mov dx, # 0x3c8
24353 63BD           88D8                         mov al, bl
24354 63BF           EE                           out dx, al
24355 63C0           BA                   03C9    mov dx, # 0x3c9
24356 63C3           58                           pop ax
24357 63C4           50                           push ax
24358 63C5           88E0                         mov al, ah
24359 63C7           EE                           out dx, al
24360 63C8           88E8                         mov al, ch
24361 63CA           EE                           out dx, al
24362 63CB           88C8                         mov al, cl
24363 63CD           EE                           out dx, al
24364 63CE           5A                           pop dx
24365 63CF           58                           pop ax
24366 63D0           C3                           ret
24367                                           ! 3006 endasm
24368                                           !BCC_ENDASM
24369                                           ! 3007 #asm
24370                                           !BCC_ASM
24371                       00000008            _biosfn_write_teletype.flag	set	8
24372                       00000006            _biosfn_write_teletype.attr	set	6
24373                       00000004            _biosfn_write_teletype.page	set	4
24374                       00000002            _biosfn_write_teletype.car	set	2
24375                       000063D1            biosfn_set_all_dac_reg:
24376 63D1           50                           push ax
24377 63D2           53                           push bx
24378 63D3           51                           push cx
24379 63D4           52                           push dx
24380 63D5           BA                   03C8    mov dx, # 0x3c8
24381 63D8           88D8                         mov al, bl
24382 63DA           EE                           out dx, al
24383 63DB           5A                           pop dx
24384 63DC           52                           push dx
24385 63DD           89D3                         mov bx, dx
24386 63DF           BA                   03C9    mov dx, # 0x3c9
24387                       000063E2            set_dac_loop:
24388 63E2           26                           seg es
24389 63E3           8A07                         mov al, [bx]
24390 63E5           EE                           out dx, al
24391 63E6           43                           inc bx
24392 63E7           26                           seg es
24393 63E8           8A07                         mov al, [bx]
24394 63EA           EE                           out dx, al
24395 63EB           43                           inc bx
24396 63EC           26                           seg es
24397 63ED           8A07                         mov al, [bx]
24398 63EF           EE                           out dx, al
24399 63F0           43                           inc bx
24400 63F1           49                           dec cx
24401 63F2           75           EE              jnz set_dac_loop
24402 63F4           5A                           pop dx
24403 63F5           59                           pop cx
24404 63F6           5B                           pop bx
24405 63F7           58                           pop ax
24406 63F8           C3                           ret
24407                                           ! 3040 endasm
24408                                           !BCC_ENDASM
24409                                           ! 3041 #asm
24410                                           !BCC_ASM
24411                       00000008            _biosfn_write_teletype.flag	set	8
24412                       00000006            _biosfn_write_teletype.attr	set	6
24413                       00000004            _biosfn_write_teletype.page	set	4
24414                       00000002            _biosfn_write_teletype.car	set	2
24415                       000063F9            biosfn_select_video_dac_color_page:
24416 63F9           50                           push ax
24417 63FA           53                           push bx
24418 63FB           52                           push dx
24419 63FC           BA                   03DA    mov dx, # 0x3da
24420 63FF           EC                           in al, dx
24421 6400           BA                   03C0    mov dx, # 0x3c0
24422 6403           B0                     10    mov al, #0x10
24423 6405           EE                           out dx, al
24424 6406           BA                   03C1    mov dx, # 0x3c1
24425 6409           EC                           in al, dx
24426 640A           80E3                   01    and bl, #0x01
24427 640D           75           0D              jnz set_dac_page
24428 640F           24                     7F    and al, #0x7f
24429 6411           C0E7                   07    shl bh, 7
24430 6414           08F8                         or al, bh
24431 6416           BA                   03C0    mov dx, # 0x3c0
24432 6419           EE                           out dx, al
24433 641A           EB           19              jmp set_actl_normal
24434                       0000641C            set_dac_page:
24435 641C           50                           push ax
24436 641D           BA                   03DA    mov dx, # 0x3da
24437 6420           EC                           in al, dx
24438 6421           BA                   03C0    mov dx, # 0x3c0
24439 6424           B0                     14    mov al, #0x14
24440 6426           EE                           out dx, al
24441 6427           58                           pop ax
24442 6428           24                     80    and al, #0x80
24443 642A           75           03              jnz set_dac_16_page
24444 642C           C0E7                   02    shl bh, 2
24445                       0000642F            set_dac_16_page:
24446 642F           80E7                   0F    and bh, #0x0f
24447 6432           88F8                         mov al, bh
24448 6434           EE                           out dx, al
24449                       00006435            set_actl_normal:
24450 6435           B0                     20    mov al, #0x20
24451 6437           EE                           out dx, al
24452 6438           5A                           pop dx
24453 6439           5B                           pop bx
24454 643A           58                           pop ax
24455 643B           C3                           ret
24456                                           ! 3083 endasm
24457                                           !BCC_ENDASM
24458                                           ! 3084 #asm
24459                                           !BCC_ASM
24460                       00000008            _biosfn_write_teletype.flag	set	8
24461                       00000006            _biosfn_write_teletype.attr	set	6
24462                       00000004            _biosfn_write_teletype.page	set	4
24463                       00000002            _biosfn_write_teletype.car	set	2
24464                       0000643C            biosfn_read_single_dac_reg:
24465 643C           50                           push ax
24466 643D           52                           push dx
24467 643E           BA                   03C7    mov dx, # 0x3c7
24468 6441           88D8                         mov al, bl
24469 6443           EE                           out dx, al
24470 6444           58                           pop ax
24471 6445           88C4                         mov ah, al
24472 6447           BA                   03C9    mov dx, # 0x3c9
24473 644A           EC                           in al, dx
24474 644B           86E0                         xchg al, ah
24475 644D           50                           push ax
24476 644E           EC                           in al, dx
24477 644F           88C5                         mov ch, al
24478 6451           EC                           in al, dx
24479 6452           88C1                         mov cl, al
24480 6454           5A                           pop dx
24481 6455           58                           pop ax
24482 6456           C3                           ret
24483                                           ! 3104 endasm
24484                                           !BCC_ENDASM
24485                                           ! 3105 #asm
24486                                           !BCC_ASM
24487                       00000008            _biosfn_write_teletype.flag	set	8
24488                       00000006            _biosfn_write_teletype.attr	set	6
24489                       00000004            _biosfn_write_teletype.page	set	4
24490                       00000002            _biosfn_write_teletype.car	set	2
24491                       00006457            biosfn_read_all_dac_reg:
24492 6457           50                           push ax
24493 6458           53                           push bx
24494 6459           51                           push cx
24495 645A           52                           push dx
24496 645B           BA                   03C7    mov dx, # 0x3c7
24497 645E           88D8                         mov al, bl
24498 6460           EE                           out dx, al
24499 6461           5A                           pop dx
24500 6462           52                           push dx
24501 6463           89D3                         mov bx, dx
24502 6465           BA                   03C9    mov dx, # 0x3c9
24503                       00006468            read_dac_loop:
24504 6468           EC                           in al, dx
24505 6469           26                           seg es
24506 646A           8807                         mov [bx], al
24507 646C           43                           inc bx
24508 646D           EC                           in al, dx
24509 646E           26                           seg es
24510 646F           8807                         mov [bx], al
24511 6471           43                           inc bx
24512 6472           EC                           in al, dx
24513 6473           26                           seg es
24514 6474           8807                         mov [bx], al
24515 6476           43                           inc bx
24516 6477           49                           dec cx
24517 6478           75           EE              jnz read_dac_loop
24518 647A           5A                           pop dx
24519 647B           59                           pop cx
24520 647C           5B                           pop bx
24521 647D           58                           pop ax
24522 647E           C3                           ret
24523                                           ! 3138 endasm
24524                                           !BCC_ENDASM
24525                                           ! 3139 #asm
24526                                           !BCC_ASM
24527                       00000008            _biosfn_write_teletype.flag	set	8
24528                       00000006            _biosfn_write_teletype.attr	set	6
24529                       00000004            _biosfn_write_teletype.page	set	4
24530                       00000002            _biosfn_write_teletype.car	set	2
24531                       0000647F            biosfn_set_pel_mask:
24532 647F           50                           push ax
24533 6480           52                           push dx
24534 6481           BA                   03C6    mov dx, # 0x3c6
24535 6484           88D8                         mov al, bl
24536 6486           EE                           out dx, al
24537 6487           5A                           pop dx
24538 6488           58                           pop ax
24539 6489           C3                           ret
24540                                           ! 3149 endasm
24541                                           !BCC_ENDASM
24542                                           ! 3150 #asm
24543                                           !BCC_ASM
24544                       00000008            _biosfn_write_teletype.flag	set	8
24545                       00000006            _biosfn_write_teletype.attr	set	6
24546                       00000004            _biosfn_write_teletype.page	set	4
24547                       00000002            _biosfn_write_teletype.car	set	2
24548                       0000648A            biosfn_read_pel_mask:
24549 648A           50                           push ax
24550 648B           52                           push dx
24551 648C           BA                   03C6    mov dx, # 0x3c6
24552 648F           EC                           in al, dx
24553 6490           88C3                         mov bl, al
24554 6492           5A                           pop dx
24555 6493           58                           pop ax
24556 6494           C3                           ret
24557                                           ! 3160 endasm
24558                                           !BCC_ENDASM
24559                                           ! 3161 #asm
24560                                           !BCC_ASM
24561                       00000008            _biosfn_write_teletype.flag	set	8
24562                       00000006            _biosfn_write_teletype.attr	set	6
24563                       00000004            _biosfn_write_teletype.page	set	4
24564                       00000002            _biosfn_write_teletype.car	set	2
24565                       00006495            biosfn_read_video_dac_state:
24566 6495           50                           push ax
24567 6496           52                           push dx
24568 6497           BA                   03DA    mov dx, # 0x3da
24569 649A           EC                           in al, dx
24570 649B           BA                   03C0    mov dx, # 0x3c0
24571 649E           B0                     10    mov al, #0x10
24572 64A0           EE                           out dx, al
24573 64A1           BA                   03C1    mov dx, # 0x3c1
24574 64A4           EC                           in al, dx
24575 64A5           88C3                         mov bl, al
24576 64A7           C0EB                   07    shr bl, 7
24577 64AA           BA                   03DA    mov dx, # 0x3da
24578 64AD           EC                           in al, dx
24579 64AE           BA                   03C0    mov dx, # 0x3c0
24580 64B1           B0                     14    mov al, #0x14
24581 64B3           EE                           out dx, al
24582 64B4           BA                   03C1    mov dx, # 0x3c1
24583 64B7           EC                           in al, dx
24584 64B8           88C7                         mov bh, al
24585 64BA           80E7                   0F    and bh, #0x0f
24586 64BD           F6C3                   01    test bl, #0x01
24587 64C0           75           03              jnz get_dac_16_page
24588 64C2           C0EF                   02    shr bh, 2
24589                       000064C5            get_dac_16_page:
24590 64C5           BA                   03DA    mov dx, # 0x3da
24591 64C8           EC                           in al, dx
24592 64C9           BA                   03C0    mov dx, # 0x3c0
24593 64CC           B0                     20    mov al, #0x20
24594 64CE           EE                           out dx, al
24595 64CF           5A                           pop dx
24596 64D0           58                           pop ax
24597 64D1           C3                           ret
24598                                           ! 3195 endasm
24599                                           !BCC_ENDASM
24600                                           ! 3196 static void biosfn_perform_gray_scale_summing (start,count)
24601                                           ! Register BX used in function biosfn_write_teletype
24602                                           ! 3197 Bit16u start;Bit16u count;
24603                       000064D2            _biosfn_perform_gray_scale_summing:
24604                                           !BCC_EOS
24605                                           !BCC_EOS
24606                                           ! 3198 {Bit8u r,g,b;
24607                                           !BCC_EOS
24608                                           ! 3199  Bit16u i;
24609                                           !BCC_EOS
24610                                           ! 3200  Bit16u index;
24611                                           !BCC_EOS
24612                                           ! 3201  inb(0x3da);
24613 64D2           55                         push	bp
24614 64D3           89E5                       mov	bp,sp
24615 64D5           83C4                   F8  add	sp,*-8
24616                                           ! Debug: list int = const $3DA (used reg = )
24617 64D8           B8                   03DA  mov	ax,#$3DA
24618 64DB           50                         push	ax
24619                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24620 64DC           E8         1816            call	_inb
24621 64DF           44                         inc	sp
24622 64E0           44                         inc	sp
24623                                           !BCC_EOS
24624                                           ! 3202  outb(0x3c0,0x00);
24625                                           ! Debug: list int = const 0 (used reg = )
24626 64E1           31C0                       xor	ax,ax
24627 64E3           50                         push	ax
24628                                           ! Debug: list int = const $3C0 (used reg = )
24629 64E4           B8                   03C0  mov	ax,#$3C0
24630 64E7           50                         push	ax
24631                                           ! Debug: func () void = outb+0 (used reg = )
24632 64E8           E8         1820            call	_outb
24633 64EB           83C4                   04  add	sp,*4
24634                                           !BCC_EOS
24635                                           ! 3203  for( index = 0; index < count; index++ )
24636                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24637 64EE           31C0                       xor	ax,ax
24638 64F0           8946         F8            mov	-8[bp],ax
24639                                           !BCC_EOS
24640                                           !BCC_EOS
24641                                           ! 3204   {
24642 64F3           E9         00BE            br 	.207
24643                       000064F6            .208:
24644                                           ! 3205    outb(0x3c7,start);
24645                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24646 64F6           FF76         04            push	4[bp]
24647                                           ! Debug: list int = const $3C7 (used reg = )
24648 64F9           B8                   03C7  mov	ax,#$3C7
24649 64FC           50                         push	ax
24650                                           ! Debug: func () void = outb+0 (used reg = )
24651 64FD           E8         180B            call	_outb
24652 6500           83C4                   04  add	sp,*4
24653                                           !BCC_EOS
24654                                           ! 3206    r=inb( 0x3c9 );
24655                                           ! Debug: list int = const $3C9 (used reg = )
24656 6503           B8                   03C9  mov	ax,#$3C9
24657 6506           50                         push	ax
24658                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24659 6507           E8         17EB            call	_inb
24660 650A           44                         inc	sp
24661 650B           44                         inc	sp
24662                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24663 650C           8846         FF            mov	-1[bp],al
24664                                           !BCC_EOS
24665                                           ! 3207    g=inb( 0x3c9 );
24666                                           ! Debug: list int = const $3C9 (used reg = )
24667 650F           B8                   03C9  mov	ax,#$3C9
24668 6512           50                         push	ax
24669                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24670 6513           E8         17DF            call	_inb
24671 6516           44                         inc	sp
24672 6517           44                         inc	sp
24673                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24674 6518           8846         FE            mov	-2[bp],al
24675                                           !BCC_EOS
24676                                           ! 3208    b=inb( 0x3c9 );
24677                                           ! Debug: list int = const $3C9 (used reg = )
24678 651B           B8                   03C9  mov	ax,#$3C9
24679 651E           50                         push	ax
24680                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24681 651F           E8         17D3            call	_inb
24682 6522           44                         inc	sp
24683 6523           44                         inc	sp
24684                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24685 6524           8846         FD            mov	-3[bp],al
24686                                           !BCC_EOS
24687                                           ! 3209    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24688                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24689                                           ! Debug: expression subtree swapping
24690 6527           8A46         FD            mov	al,-3[bp]
24691 652A           30E4                       xor	ah,ah
24692 652C           B9                   001C  mov	cx,*$1C
24693 652F           F7E9                       imul	cx
24694 6531           50                         push	ax
24695                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24696                                           ! Debug: expression subtree swapping
24697 6532           8A46         FE            mov	al,-2[bp]
24698 6535           30E4                       xor	ah,ah
24699 6537           B9                   0097  mov	cx,#$97
24700 653A           F7E9                       imul	cx
24701 653C           50                         push	ax
24702                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24703                                           ! Debug: expression subtree swapping
24704 653D           8A46         FF            mov	al,-1[bp]
24705 6540           30E4                       xor	ah,ah
24706 6542           B9                   004D  mov	cx,*$4D
24707 6545           F7E9                       imul	cx
24708                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24709 6547           0346         F4            add	ax,-$C[bp]
24710 654A           44                         inc	sp
24711 654B           44                         inc	sp
24712                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24713 654C           0346         F6            add	ax,-$A[bp]
24714 654F           44                         inc	sp
24715 6550           44                         inc	sp
24716                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24717                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24718 6551           05                   0080  add	ax,#$80
24719 6554           88E0                       mov	al,ah
24720 6556           30E4                       xor	ah,ah
24721                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24722 6558           8946         FA            mov	-6[bp],ax
24723                                           !BCC_EOS
24724                                           ! 3210    if(i>0x3f)i=0x3f;
24725                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24726 655B           8B46         FA            mov	ax,-6[bp]
24727 655E           3D                   003F  cmp	ax,*$3F
24728 6561           76           06            jbe 	.209
24729                       00006563            .20A:
24730                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24731 6563           B8                   003F  mov	ax,*$3F
24732 6566           8946         FA            mov	-6[bp],ax
24733                                           !BCC_EOS
24734                                           ! 3211    outb(0x3c8,start);
24735                       00006569            .209:
24736                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24737 6569           FF76         04            push	4[bp]
24738                                           ! Debug: list int = const $3C8 (used reg = )
24739 656C           B8                   03C8  mov	ax,#$3C8
24740 656F           50                         push	ax
24741                                           ! Debug: func () void = outb+0 (used reg = )
24742 6570           E8         1798            call	_outb
24743 6573           83C4                   04  add	sp,*4
24744                                           !BCC_EOS
24745                                           ! 3212    outb( 0x3c9, i&0xff );
24746                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24747 6576           8A46         FA            mov	al,-6[bp]
24748                                           ! Debug: list unsigned char = al+0 (used reg = )
24749 6579           30E4                       xor	ah,ah
24750 657B           50                         push	ax
24751                                           ! Debug: list int = const $3C9 (used reg = )
24752 657C           B8                   03C9  mov	ax,#$3C9
24753 657F           50                         push	ax
24754                                           ! Debug: func () void = outb+0 (used reg = )
24755 6580           E8         1788            call	_outb
24756 6583           83C4                   04  add	sp,*4
24757                                           !BCC_EOS
24758                                           ! 3213    outb( 0x3c9, i&0xff );
24759                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24760 6586           8A46         FA            mov	al,-6[bp]
24761                                           ! Debug: list unsigned char = al+0 (used reg = )
24762 6589           30E4                       xor	ah,ah
24763 658B           50                         push	ax
24764                                           ! Debug: list int = const $3C9 (used reg = )
24765 658C           B8                   03C9  mov	ax,#$3C9
24766 658F           50                         push	ax
24767                                           ! Debug: func () void = outb+0 (used reg = )
24768 6590           E8         1778            call	_outb
24769 6593           83C4                   04  add	sp,*4
24770                                           !BCC_EOS
24771                                           ! 3214    outb( 0x3c9, i&0xff );
24772                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24773 6596           8A46         FA            mov	al,-6[bp]
24774                                           ! Debug: list unsigned char = al+0 (used reg = )
24775 6599           30E4                       xor	ah,ah
24776 659B           50                         push	ax
24777                                           ! Debug: list int = const $3C9 (used reg = )
24778 659C           B8                   03C9  mov	ax,#$3C9
24779 659F           50                         push	ax
24780                                           ! Debug: func () void = outb+0 (used reg = )
24781 65A0           E8         1768            call	_outb
24782 65A3           83C4                   04  add	sp,*4
24783                                           !BCC_EOS
24784                                           ! 3215    start++;
24785                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24786 65A6           8B46         04            mov	ax,4[bp]
24787 65A9           40                         inc	ax
24788 65AA           8946         04            mov	4[bp],ax
24789                                           !BCC_EOS
24790                                           ! 3216   }
24791                                           ! 3217  inb(0x3da);
24792                       000065AD            .206:
24793                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24794 65AD           8B46         F8            mov	ax,-8[bp]
24795 65B0           40                         inc	ax
24796 65B1           8946         F8            mov	-8[bp],ax
24797                       000065B4            .207:
24798                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24799 65B4           8B46         F8            mov	ax,-8[bp]
24800 65B7           3B46         06            cmp	ax,6[bp]
24801 65BA   7303    E9         FF37            blo 	.208
24802                       000065BF            .20B:
24803                       000065BF            .205:
24804                                           ! Debug: list int = const $3DA (used reg = )
24805 65BF           B8                   03DA  mov	ax,#$3DA
24806 65C2           50                         push	ax
24807                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24808 65C3           E8         172F            call	_inb
24809 65C6           44                         inc	sp
24810 65C7           44                         inc	sp
24811                                           !BCC_EOS
24812                                           ! 3218  outb(0x3c0,0x20);
24813                                           ! Debug: list int = const $20 (used reg = )
24814 65C8           B8                   0020  mov	ax,*$20
24815 65CB           50                         push	ax
24816                                           ! Debug: list int = const $3C0 (used reg = )
24817 65CC           B8                   03C0  mov	ax,#$3C0
24818 65CF           50                         push	ax
24819                                           ! Debug: func () void = outb+0 (used reg = )
24820 65D0           E8         1738            call	_outb
24821 65D3           83C4                   04  add	sp,*4
24822                                           !BCC_EOS
24823                                           ! 3219 }
24824 65D6           89EC                       mov	sp,bp
24825 65D8           5D                         pop	bp
24826 65D9           C3                         ret
24827                                           ! 3220 static void get_font_access()
24828                                           ! 3221 {
24829                       000065DA            _get_font_access:
24830                                           ! 3222 #asm
24831                                           !BCC_ASM
24832 65DA           BA                   03C4   mov dx, # 0x3c4
24833 65DD           B8                   0100   mov ax, #0x0100
24834 65E0           EF                          out dx, ax
24835 65E1           B8                   0402   mov ax, #0x0402
24836 65E4           EF                          out dx, ax
24837 65E5           B8                   0704   mov ax, #0x0704
24838 65E8           EF                          out dx, ax
24839 65E9           B8                   0300   mov ax, #0x0300
24840 65EC           EF                          out dx, ax
24841 65ED           BA                   03CE   mov dx, # 0x3ce
24842 65F0           B8                   0204   mov ax, #0x0204
24843 65F3           EF                          out dx, ax
24844 65F4           B8                   0005   mov ax, #0x0005
24845 65F7           EF                          out dx, ax
24846 65F8           B8                   0406   mov ax, #0x0406
24847 65FB           EF                          out dx, ax
24848                                           ! 3239 endasm
24849                                           !BCC_ENDASM
24850                                           ! 3240 }
24851 65FC           C3                         ret
24852                                           ! 3241 static void release_font_access()
24853                                           ! 3242 {
24854                       000065FD            _release_font_access:
24855                                           ! 3243 #asm
24856                                           !BCC_ASM
24857 65FD           BA                   03C4   mov dx, # 0x3c4
24858 6600           B8                   0100   mov ax, #0x0100
24859 6603           EF                          out dx, ax
24860 6604           B8                   0302   mov ax, #0x0302
24861 6607           EF                          out dx, ax
24862 6608           B8                   0304   mov ax, #0x0304
24863 660B           EF                          out dx, ax
24864 660C           B8                   0300   mov ax, #0x0300
24865 660F           EF                          out dx, ax
24866 6610           BA                   03CC   mov dx, # 0x3cc
24867 6613           EC                          in al, dx
24868 6614           24                     01   and al, #0x01
24869 6616           C0E0                   02   shl al, 2
24870 6619           0C                     0A   or al, #0x0a
24871 661B           88C4                        mov ah, al
24872 661D           B0                     06   mov al, #0x06
24873 661F           BA                   03CE   mov dx, # 0x3ce
24874 6622           EF                          out dx, ax
24875 6623           B8                   0004   mov ax, #0x0004
24876 6626           EF                          out dx, ax
24877 6627           B8                   1005   mov ax, #0x1005
24878 662A           EF                          out dx, ax
24879                                           ! 3266 endasm
24880                                           !BCC_ENDASM
24881                                           ! 3267 }
24882 662B           C3                         ret
24883                                           ! 3268 #asm
24884                                           !BCC_ASM
24885                       0000662C            idiv_u:
24886 662C           31D2                         xor dx,dx
24887 662E           F7F3                         div bx
24888 6630           C3                           ret
24889                                           ! 3273 endasm
24890                                           !BCC_ENDASM
24891                                           ! 3274 static void set_scan_lines(lines) Bit8u lines;
24892                       00006631            _set_scan_lines:
24893                                           !BCC_EOS
24894                                           ! 3275 {
24895                                           ! 3276  Bit16u crtc_addr,cols,page,vde;
24896                                           !BCC_EOS
24897                                           ! 3277  Bit8u crtc_r9,ovl,rows;
24898                                           !BCC_EOS
24899                                           ! 3278  crtc_addr = read_word(0x40,0x63);
24900 6631           55                         push	bp
24901 6632           89E5                       mov	bp,sp
24902 6634           83C4                   F4  add	sp,*-$C
24903                                           ! Debug: list int = const $63 (used reg = )
24904 6637           B8                   0063  mov	ax,*$63
24905 663A           50                         push	ax
24906                                           ! Debug: list int = const $40 (used reg = )
24907 663B           B8                   0040  mov	ax,*$40
24908 663E           50                         push	ax
24909                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24910 663F           E8         1670            call	_read_word
24911 6642           83C4                   04  add	sp,*4
24912                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24913 6645           8946         FE            mov	-2[bp],ax
24914                                           !BCC_EOS
24915                                           ! 3279  outb(crtc_addr, 0x09);
24916                                           ! Debug: list int = const 9 (used reg = )
24917 6648           B8                   0009  mov	ax,*9
24918 664B           50                         push	ax
24919                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24920 664C           FF76         FE            push	-2[bp]
24921                                           ! Debug: func () void = outb+0 (used reg = )
24922 664F           E8         16B9            call	_outb
24923 6652           83C4                   04  add	sp,*4
24924                                           !BCC_EOS
24925                                           ! 3280  crtc_r9 = inb(crtc_addr+1);
24926                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24927 6655           8B46         FE            mov	ax,-2[bp]
24928                                           ! Debug: list unsigned int = ax+1 (used reg = )
24929 6658           40                         inc	ax
24930 6659           50                         push	ax
24931                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24932 665A           E8         1698            call	_inb
24933 665D           44                         inc	sp
24934 665E           44                         inc	sp
24935                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24936 665F           8846         F7            mov	-9[bp],al
24937                                           !BCC_EOS
24938                                           ! 3281  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24939                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24940 6662           8A46         04            mov	al,4[bp]
24941 6665           30E4                       xor	ah,ah
24942 6667           48                         dec	ax
24943 6668           50                         push	ax
24944                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
24945 6669           8A46         F7            mov	al,-9[bp]
24946 666C           24                     E0  and	al,#$E0
24947                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
24948 666E           30E4                       xor	ah,ah
24949 6670           0B46         F2            or	ax,-$E[bp]
24950 6673           44                         inc	sp
24951 6674           44                         inc	sp
24952                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24953 6675           8846         F7            mov	-9[bp],al
24954                                           !BCC_EOS
24955                                           ! 3282  outb(crtc_addr+1, crtc_r9);
24956                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24957 6678           8A46         F7            mov	al,-9[bp]
24958 667B           30E4                       xor	ah,ah
24959 667D           50                         push	ax
24960                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
24961 667E           8B46         FE            mov	ax,-2[bp]
24962                                           ! Debug: list unsigned int = ax+1 (used reg = )
24963 6681           40                         inc	ax
24964 6682           50                         push	ax
24965                                           ! Debug: func () void = outb+0 (used reg = )
24966 6683           E8         1685            call	_outb
24967 6686           83C4                   04  add	sp,*4
24968                                           !BCC_EOS
24969                                           ! 3283  if(lines==8)
24970                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
24971 6689           8A46         04            mov	al,4[bp]
24972 668C           3C                     08  cmp	al,*8
24973 668E           75           10            jne 	.20C
24974                       00006690            .20D:
24975                                           ! 3284   {
24976                                           ! 3285    biosfn_set_cursor_shape(0x06,0x07);
24977                                           ! Debug: list int = const 7 (used reg = )
24978 6690           B8                   0007  mov	ax,*7
24979 6693           50                         push	ax
24980                                           ! Debug: list int = const 6 (used reg = )
24981 6694           B8                   0006  mov	ax,*6
24982 6697           50                         push	ax
24983                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
24984 6698           E8         DB00            call	_biosfn_set_cursor_shape
24985 669B           83C4                   04  add	sp,*4
24986                                           !BCC_EOS
24987                                           ! 3286   }
24988                                           ! 3287  else
24989                                           ! 3288   {
24990 669E           EB           18            jmp .20E
24991                       000066A0            .20C:
24992                                           ! 3289    biosfn_set_cursor_shape(lines-4,lines-3);
24993                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
24994 66A0           8A46         04            mov	al,4[bp]
24995 66A3           30E4                       xor	ah,ah
24996                                           ! Debug: list unsigned int = ax-3 (used reg = )
24997 66A5           05                   FFFD  add	ax,*-3
24998 66A8           50                         push	ax
24999                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25000 66A9           8A46         04            mov	al,4[bp]
25001 66AC           30E4                       xor	ah,ah
25002                                           ! Debug: list unsigned int = ax-4 (used reg = )
25003 66AE           05                   FFFC  add	ax,*-4
25004 66B1           50                         push	ax
25005                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25006 66B2           E8         DAE6            call	_biosfn_set_cursor_shape
25007 66B5           83C4                   04  add	sp,*4
25008                                           !BCC_EOS
25009                                           ! 3290   }
25010                                           ! 3291  write_word(0x40,0x85, lines);
25011                       000066B8            .20E:
25012                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25013 66B8           8A46         04            mov	al,4[bp]
25014 66BB           30E4                       xor	ah,ah
25015 66BD           50                         push	ax
25016                                           ! Debug: list int = const $85 (used reg = )
25017 66BE           B8                   0085  mov	ax,#$85
25018 66C1           50                         push	ax
25019                                           ! Debug: list int = const $40 (used reg = )
25020 66C2           B8                   0040  mov	ax,*$40
25021 66C5           50                         push	ax
25022                                           ! Debug: func () void = write_word+0 (used reg = )
25023 66C6           E8         1614            call	_write_word
25024 66C9           83C4                   06  add	sp,*6
25025                                           !BCC_EOS
25026                                           ! 3292  outb(crtc_addr, 0x12);
25027                                           ! Debug: list int = const $12 (used reg = )
25028 66CC           B8                   0012  mov	ax,*$12
25029 66CF           50                         push	ax
25030                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25031 66D0           FF76         FE            push	-2[bp]
25032                                           ! Debug: func () void = outb+0 (used reg = )
25033 66D3           E8         1635            call	_outb
25034 66D6           83C4                   04  add	sp,*4
25035                                           !BCC_EOS
25036                                           ! 3293  vde = inb(crtc_addr+1);
25037                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25038 66D9           8B46         FE            mov	ax,-2[bp]
25039                                           ! Debug: list unsigned int = ax+1 (used reg = )
25040 66DC           40                         inc	ax
25041 66DD           50                         push	ax
25042                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25043 66DE           E8         1614            call	_inb
25044 66E1           44                         inc	sp
25045 66E2           44                         inc	sp
25046                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25047 66E3           30E4                       xor	ah,ah
25048 66E5           8946         F8            mov	-8[bp],ax
25049                                           !BCC_EOS
25050                                           ! 3294  outb(crtc_addr, 0x07);
25051                                           ! Debug: list int = const 7 (used reg = )
25052 66E8           B8                   0007  mov	ax,*7
25053 66EB           50                         push	ax
25054                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25055 66EC           FF76         FE            push	-2[bp]
25056                                           ! Debug: func () void = outb+0 (used reg = )
25057 66EF           E8         1619            call	_outb
25058 66F2           83C4                   04  add	sp,*4
25059                                           !BCC_EOS
25060                                           ! 3295  ovl = inb(crtc_addr+1);
25061                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25062 66F5           8B46         FE            mov	ax,-2[bp]
25063                                           ! Debug: list unsigned int = ax+1 (used reg = )
25064 66F8           40                         inc	ax
25065 66F9           50                         push	ax
25066                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25067 66FA           E8         15F8            call	_inb
25068 66FD           44                         inc	sp
25069 66FE           44                         inc	sp
25070                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25071 66FF           8846         F6            mov	-$A[bp],al
25072                                           !BCC_EOS
25073                                           ! 3296  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25074                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25075 6702           8A46         F6            mov	al,-$A[bp]
25076 6705           24                     40  and	al,*$40
25077                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25078 6707           30E4                       xor	ah,ah
25079 6709           B1                     03  mov	cl,*3
25080 670B           D3E0                       shl	ax,cl
25081 670D           50                         push	ax
25082                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25083 670E           8A46         F6            mov	al,-$A[bp]
25084 6711           24                     02  and	al,*2
25085                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25086 6713           30E4                       xor	ah,ah
25087 6715           B1                     07  mov	cl,*7
25088 6717           D3E0                       shl	ax,cl
25089                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25090 6719           0346         F2            add	ax,-$E[bp]
25091 671C           44                         inc	sp
25092 671D           44                         inc	sp
25093                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25094                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25095 671E           40                         inc	ax
25096 671F           0346         F8            add	ax,-8[bp]
25097 6722           8946         F8            mov	-8[bp],ax
25098                                           !BCC_EOS
25099                                           ! 3297  rows = vde / lines;
25100                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25101 6725           8A46         04            mov	al,4[bp]
25102 6728           30E4                       xor	ah,ah
25103 672A           89C3                       mov	bx,ax
25104 672C           8B46         F8            mov	ax,-8[bp]
25105 672F           E8         FEFA            call	idiv_u
25106                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25107 6732           8846         F5            mov	-$B[bp],al
25108                                           !BCC_EOS
25109                                           ! 3298  write_byte(0x40,0x84, rows-1);
25110                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25111 6735           8A46         F5            mov	al,-$B[bp]
25112 6738           30E4                       xor	ah,ah
25113                                           ! Debug: list unsigned int = ax-1 (used reg = )
25114 673A           48                         dec	ax
25115 673B           50                         push	ax
25116                                           ! Debug: list int = const $84 (used reg = )
25117 673C           B8                   0084  mov	ax,#$84
25118 673F           50                         push	ax
25119                                           ! Debug: list int = const $40 (used reg = )
25120 6740           B8                   0040  mov	ax,*$40
25121 6743           50                         push	ax
25122                                           ! Debug: func () void = write_byte+0 (used reg = )
25123 6744           E8         157E            call	_write_byte
25124 6747           83C4                   06  add	sp,*6
25125                                           !BCC_EOS
25126                                           ! 3299  cols = read_word(0x40,0x4A);
25127                                           ! Debug: list int = const $4A (used reg = )
25128 674A           B8                   004A  mov	ax,*$4A
25129 674D           50                         push	ax
25130                                           ! Debug: list int = const $40 (used reg = )
25131 674E           B8                   0040  mov	ax,*$40
25132 6751           50                         push	ax
25133                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25134 6752           E8         155D            call	_read_word
25135 6755           83C4                   04  add	sp,*4
25136                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25137 6758           8946         FC            mov	-4[bp],ax
25138                                           !BCC_EOS
25139                                           ! 3300  write_word(0
25140                                           ! 3300 x40,0x4C, rows * cols * 2);
25141                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25142 675B           8A46         F5            mov	al,-$B[bp]
25143 675E           30E4                       xor	ah,ah
25144 6760           8B4E         FC            mov	cx,-4[bp]
25145 6763           F7E9                       imul	cx
25146                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25147 6765           D1E0                       shl	ax,*1
25148                                           ! Debug: list unsigned int = ax+0 (used reg = )
25149 6767           50                         push	ax
25150                                           ! Debug: list int = const $4C (used reg = )
25151 6768           B8                   004C  mov	ax,*$4C
25152 676B           50                         push	ax
25153                                           ! Debug: list int = const $40 (used reg = )
25154 676C           B8                   0040  mov	ax,*$40
25155 676F           50                         push	ax
25156                                           ! Debug: func () void = write_word+0 (used reg = )
25157 6770           E8         156A            call	_write_word
25158 6773           83C4                   06  add	sp,*6
25159                                           !BCC_EOS
25160                                           ! 3301 }
25161 6776           89EC                       mov	sp,bp
25162 6778           5D                         pop	bp
25163 6779           C3                         ret
25164                                           ! 3302 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25165                                           ! Register BX used in function set_scan_lines
25166                       0000677A            _biosfn_load_text_user_pat:
25167                                           !BCC_EOS
25168                                           !BCC_EOS
25169                                           !BCC_EOS
25170                                           !BCC_EOS
25171                                           !BCC_EOS
25172                                           !BCC_EOS
25173                                           !BCC_EOS
25174                                           ! 3303 {
25175                                           ! 3304  Bit16u blockaddr,dest,i,src;
25176                                           !BCC_EOS
25177                                           ! 3305  get_font_access();
25178 677A           55                         push	bp
25179 677B           89E5                       mov	bp,sp
25180 677D           83C4                   F8  add	sp,*-8
25181                                           ! Debug: func () void = get_font_access+0 (used reg = )
25182 6780           E8         FE57            call	_get_font_access
25183                                           !BCC_EOS
25184                                           ! 3306  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25185                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25186 6783           8A46         0E            mov	al,$E[bp]
25187 6786           24                     04  and	al,*4
25188                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25189 6788           30E4                       xor	ah,ah
25190 678A           88C4                       mov	ah,al
25191 678C           30C0                       xor	al,al
25192 678E           B1                     03  mov	cl,*3
25193 6790           D3E0                       shl	ax,cl
25194 6792           50                         push	ax
25195                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25196 6793           8A46         0E            mov	al,$E[bp]
25197 6796           24                     03  and	al,*3
25198                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25199 6798           30E4                       xor	ah,ah
25200 679A           88C4                       mov	ah,al
25201 679C           30C0                       xor	al,al
25202 679E           B1                     06  mov	cl,*6
25203 67A0           D3E0                       shl	ax,cl
25204                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25205 67A2           0346         F6            add	ax,-$A[bp]
25206 67A5           44                         inc	sp
25207 67A6           44                         inc	sp
25208                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25209 67A7           8946         FE            mov	-2[bp],ax
25210                                           !BCC_EOS
25211                                           ! 3307  for(i=0;i<CX;i++)
25212                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25213 67AA           31C0                       xor	ax,ax
25214 67AC           8946         FA            mov	-6[bp],ax
25215                                           !BCC_EOS
25216                                           !BCC_EOS
25217                                           ! 3308   {
25218 67AF           EB           44            jmp .211
25219                       000067B1            .212:
25220                                           ! 3309    src = BP + i * BH;
25221                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25222 67B1           8A46         10            mov	al,$10[bp]
25223 67B4           30E4                       xor	ah,ah
25224 67B6           89C3                       mov	bx,ax
25225 67B8           8B46         FA            mov	ax,-6[bp]
25226 67BB           89D9                       mov	cx,bx
25227 67BD           F7E9                       imul	cx
25228                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25229                                           ! Debug: expression subtree swapping
25230 67BF           0346         08            add	ax,8[bp]
25231                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25232 67C2           8946         F8            mov	-8[bp],ax
25233                                           !BCC_EOS
25234                                           ! 3310    dest = blockaddr + (DX + i) * 32;
25235                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25236 67C5           8B46         0C            mov	ax,$C[bp]
25237 67C8           0346         FA            add	ax,-6[bp]
25238                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25239 67CB           B1                     05  mov	cl,*5
25240 67CD           D3E0                       shl	ax,cl
25241                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25242                                           ! Debug: expression subtree swapping
25243 67CF           0346         FE            add	ax,-2[bp]
25244                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25245 67D2           8946         FC            mov	-4[bp],ax
25246                                           !BCC_EOS
25247                                           ! 3311    memcpyb(0xA000, dest, ES, src, BH);
25248                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25249 67D5           8A46         10            mov	al,$10[bp]
25250 67D8           30E4                       xor	ah,ah
25251 67DA           50                         push	ax
25252                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25253 67DB           FF76         F8            push	-8[bp]
25254                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25255 67DE           FF76         06            push	6[bp]
25256                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25257 67E1           FF76         FC            push	-4[bp]
25258                                           ! Debug: list unsigned int = const $A000 (used reg = )
25259 67E4           B8                   A000  mov	ax,#$A000
25260 67E7           50                         push	ax
25261                                           ! Debug: func () void = memcpyb+0 (used reg = )
25262 67E8           E8         1454            call	_memcpyb
25263 67EB           83C4                   0A  add	sp,*$A
25264                                           !BCC_EOS
25265                                           ! 3312   }
25266                                           ! 3313  release_font_access();
25267                       000067EE            .210:
25268                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25269 67EE           8B46         FA            mov	ax,-6[bp]
25270 67F1           40                         inc	ax
25271 67F2           8946         FA            mov	-6[bp],ax
25272                       000067F5            .211:
25273                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25274 67F5           8B46         FA            mov	ax,-6[bp]
25275 67F8           3B46         0A            cmp	ax,$A[bp]
25276 67FB           72           B4            jb 	.212
25277                       000067FD            .213:
25278                       000067FD            .20F:
25279                                           ! Debug: func () void = release_font_access+0 (used reg = )
25280 67FD           E8         FDFD            call	_release_font_access
25281                                           !BCC_EOS
25282                                           ! 3314  if(AL>=0x10)
25283                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25284 6800           8A46         04            mov	al,4[bp]
25285 6803           3C                     10  cmp	al,*$10
25286 6805           72           0B            jb  	.214
25287                       00006807            .215:
25288                                           ! 3315   {
25289                                           ! 3316    set_scan_lines(BH);
25290                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25291 6807           8A46         10            mov	al,$10[bp]
25292 680A           30E4                       xor	ah,ah
25293 680C           50                         push	ax
25294                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25295 680D           E8         FE21            call	_set_scan_lines
25296 6810           44                         inc	sp
25297 6811           44                         inc	sp
25298                                           !BCC_EOS
25299                                           ! 3317   }
25300                                           ! 3318 }
25301                       00006812            .214:
25302 6812           89EC                       mov	sp,bp
25303 6814           5D                         pop	bp
25304 6815           C3                         ret
25305                                           ! 3319 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25306                                           ! Register BX used in function biosfn_load_text_user_pat
25307                       00006816            _biosfn_load_text_8_14_pat:
25308                                           !BCC_EOS
25309                                           !BCC_EOS
25310                                           ! 3320 {
25311                                           ! 3321  Bit16u blockaddr,dest,i,src;
25312                                           !BCC_EOS
25313                                           ! 3322  get_font_access();
25314 6816           55                         push	bp
25315 6817           89E5                       mov	bp,sp
25316 6819           83C4                   F8  add	sp,*-8
25317                                           ! Debug: func () void = get_font_access+0 (used reg = )
25318 681C           E8         FDBB            call	_get_font_access
25319                                           !BCC_EOS
25320                                           ! 3323  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25321                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25322 681F           8A46         06            mov	al,6[bp]
25323 6822           24                     04  and	al,*4
25324                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25325 6824           30E4                       xor	ah,ah
25326 6826           88C4                       mov	ah,al
25327 6828           30C0                       xor	al,al
25328 682A           B1                     03  mov	cl,*3
25329 682C           D3E0                       shl	ax,cl
25330 682E           50                         push	ax
25331                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25332 682F           8A46         06            mov	al,6[bp]
25333 6832           24                     03  and	al,*3
25334                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25335 6834           30E4                       xor	ah,ah
25336 6836           88C4                       mov	ah,al
25337 6838           30C0                       xor	al,al
25338 683A           B1                     06  mov	cl,*6
25339 683C           D3E0                       shl	ax,cl
25340                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25341 683E           0346         F6            add	ax,-$A[bp]
25342 6841           44                         inc	sp
25343 6842           44                         inc	sp
25344                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25345 6843           8946         FE            mov	-2[bp],ax
25346                                           !BCC_EOS
25347                                           ! 3324  for(i=0;i<0x100;i++)
25348                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25349 6846           31C0                       xor	ax,ax
25350 6848           8946         FA            mov	-6[bp],ax
25351                                           !BCC_EOS
25352                                           !BCC_EOS
25353                                           ! 3325   {
25354 684B           EB           41            jmp .218
25355                       0000684D            .219:
25356                                           ! 3326    src = i * 14;
25357                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25358 684D           8B46         FA            mov	ax,-6[bp]
25359 6850           89C2                       mov	dx,ax
25360 6852           B1                     03  mov	cl,*3
25361 6854           D3E0                       shl	ax,cl
25362 6856           29D0                       sub	ax,dx
25363 6858           D1E0                       shl	ax,*1
25364                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25365 685A           8946         F8            mov	-8[bp],ax
25366                                           !BCC_EOS
25367                                           ! 3327    dest = blockaddr + i * 32;
25368                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25369 685D           8B46         FA            mov	ax,-6[bp]
25370 6860           B1                     05  mov	cl,*5
25371 6862           D3E0                       shl	ax,cl
25372                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25373                                           ! Debug: expression subtree swapping
25374 6864           0346         FE            add	ax,-2[bp]
25375                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25376 6867           8946         FC            mov	-4[bp],ax
25377                                           !BCC_EOS
25378                                           ! 3328    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25379                                           ! Debug: list int = const $E (used reg = )
25380 686A           B8                   000E  mov	ax,*$E
25381 686D           50                         push	ax
25382                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25383 686E           8B5E         F8            mov	bx,-8[bp]
25384                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25385                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25386 6871           81C3                 1728  add	bx,#_vgafont14
25387 6875           53                         push	bx
25388                                           ! Debug: list unsigned int = const $C000 (used reg = )
25389 6876           B8                   C000  mov	ax,#$C000
25390 6879           50                         push	ax
25391                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25392 687A           FF76         FC            push	-4[bp]
25393                                           ! Debug: list unsigned int = const $A000 (used reg = )
25394 687D           B8                   A000  mov	ax,#$A000
25395 6880           50                         push	ax
25396                                           ! Debug: func () void = memcpyb+0 (used reg = )
25397 6881           E8         13BB            call	_memcpyb
25398 6884           83C4                   0A  add	sp,*$A
25399                                           !BCC_EOS
25400                                           ! 3329   }
25401                                           ! 3330  release_font_access();
25402                       00006887            .217:
25403                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25404 6887           8B46         FA            mov	ax,-6[bp]
25405 688A           40                         inc	ax
25406 688B           8946         FA            mov	-6[bp],ax
25407                       0000688E            .218:
25408                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25409 688E           8B46         FA            mov	ax,-6[bp]
25410 6891           3D                   0100  cmp	ax,#$100
25411 6894           72           B7            jb 	.219
25412                       00006896            .21A:
25413                       00006896            .216:
25414                                           ! Debug: func () void = release_font_access+0 (used reg = )
25415 6896           E8         FD64            call	_release_font_access
25416                                           !BCC_EOS
25417                                           ! 3331  if(AL>=0x10)
25418                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25419 6899           8A46         04            mov	al,4[bp]
25420 689C           3C                     10  cmp	al,*$10
25421 689E           72           09            jb  	.21B
25422                       000068A0            .21C:
25423                                           ! 3332   {
25424                                           ! 3333    set_scan_lines(14);
25425                                           ! Debug: list int = const $E (used reg = )
25426 68A0           B8                   000E  mov	ax,*$E
25427 68A3           50                         push	ax
25428                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25429 68A4           E8         FD8A            call	_set_scan_lines
25430 68A7           44                         inc	sp
25431 68A8           44                         inc	sp
25432                                           !BCC_EOS
25433                                           ! 3334   }
25434                                           ! 3335 }
25435                       000068A9            .21B:
25436 68A9           89EC                       mov	sp,bp
25437 68AB           5D                         pop	bp
25438 68AC           C3                         ret
25439                                           ! 3336 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25440                                           ! Register BX used in function biosfn_load_text_8_14_pat
25441                       000068AD            _biosfn_load_text_8_8_pat:
25442                                           !BCC_EOS
25443                                           !BCC_EOS
25444                                           ! 3337 {
25445                                           ! 3338  Bit16u blockaddr,dest,i,src;
25446                                           !BCC_EOS
25447                                           ! 3339  get_font_access();
25448 68AD           55                         push	bp
25449 68AE           89E5                       mov	bp,sp
25450 68B0           83C4                   F8  add	sp,*-8
25451                                           ! Debug: func () void = get_font_access+0 (used reg = )
25452 68B3           E8         FD24            call	_get_font_access
25453                                           !BCC_EOS
25454                                           ! 3340  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25455                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25456 68B6           8A46         06            mov	al,6[bp]
25457 68B9           24                     04  and	al,*4
25458                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25459 68BB           30E4                       xor	ah,ah
25460 68BD           88C4                       mov	ah,al
25461 68BF           30C0                       xor	al,al
25462 68C1           B1                     03  mov	cl,*3
25463 68C3           D3E0                       shl	ax,cl
25464 68C5           50                         push	ax
25465                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25466 68C6           8A46         06            mov	al,6[bp]
25467 68C9           24                     03  and	al,*3
25468                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25469 68CB           30E4                       xor	ah,ah
25470 68CD           88C4                       mov	ah,al
25471 68CF           30C0                       xor	al,al
25472 68D1           B1                     06  mov	cl,*6
25473 68D3           D3E0                       shl	ax,cl
25474                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25475 68D5           0346         F6            add	ax,-$A[bp]
25476 68D8           44                         inc	sp
25477 68D9           44                         inc	sp
25478                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25479 68DA           8946         FE            mov	-2[bp],ax
25480                                           !BCC_EOS
25481                                           ! 3341  for(i=0;i<0x100;i++)
25482                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25483 68DD           31C0                       xor	ax,ax
25484 68DF           8946         FA            mov	-6[bp],ax
25485                                           !BCC_EOS
25486                                           !BCC_EOS
25487                                           ! 3342   {
25488 68E2           EB           3B            jmp .21F
25489                       000068E4            .220:
25490                                           ! 3343    src = i * 8;
25491                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25492 68E4           8B46         FA            mov	ax,-6[bp]
25493 68E7           B1                     03  mov	cl,*3
25494 68E9           D3E0                       shl	ax,cl
25495                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25496 68EB           8946         F8            mov	-8[bp],ax
25497                                           !BCC_EOS
25498                                           ! 3344    dest = blockaddr + i * 32;
25499                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25500 68EE           8B46         FA            mov	ax,-6[bp]
25501 68F1           B1                     05  mov	cl,*5
25502 68F3           D3E0                       shl	ax,cl
25503                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25504                                           ! Debug: expression subtree swapping
25505 68F5           0346         FE            add	ax,-2[bp]
25506                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25507 68F8           8946         FC            mov	-4[bp],ax
25508                                           !BCC_EOS
25509                                           ! 3345    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25510                                           ! Debug: list int = const 8 (used reg = )
25511 68FB           B8                   0008  mov	ax,*8
25512 68FE           50                         push	ax
25513                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25514 68FF           8B5E         F8            mov	bx,-8[bp]
25515                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25516                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25517 6902           81C3                 0F28  add	bx,#_vgafont8
25518 6906           53                         push	bx
25519                                           ! Debug: list unsigned int = const $C000 (used reg = )
25520 6907           B8                   C000  mov	ax,#$C000
25521 690A           50                         push	ax
25522                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25523 690B           FF76         FC            push	-4[bp]
25524                                           ! Debug: list unsigned int = const $A000 (used reg = )
25525 690E           B8                   A000  mov	ax,#$A000
25526 6911           50                         push	ax
25527                                           ! Debug: func () void = memcpyb+0 (used reg = )
25528 6912           E8         132A            call	_memcpyb
25529 6915           83C4                   0A  add	sp,*$A
25530                                           !BCC_EOS
25531                                           ! 3346   }
25532                                           ! 3347  release_font_access();
25533                       00006918            .21E:
25534                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25535 6918           8B46         FA            mov	ax,-6[bp]
25536 691B           40                         inc	ax
25537 691C           8946         FA            mov	-6[bp],ax
25538                       0000691F            .21F:
25539                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25540 691F           8B46         FA            mov	ax,-6[bp]
25541 6922           3D                   0100  cmp	ax,#$100
25542 6925           72           BD            jb 	.220
25543                       00006927            .221:
25544                       00006927            .21D:
25545                                           ! Debug: func () void = release_font_access+0 (used reg = )
25546 6927           E8         FCD3            call	_release_font_access
25547                                           !BCC_EOS
25548                                           ! 3348  if(AL>=0x10)
25549                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25550 692A           8A46         04            mov	al,4[bp]
25551 692D           3C                     10  cmp	al,*$10
25552 692F           72           09            jb  	.222
25553                       00006931            .223:
25554                                           ! 3349   {
25555                                           ! 3350    set_scan_lines(8);
25556                                           ! Debug: list int = const 8 (used reg = )
25557 6931           B8                   0008  mov	ax,*8
25558 6934           50                         push	ax
25559                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25560 6935           E8         FCF9            call	_set_scan_lines
25561 6938           44                         inc	sp
25562 6939           44                         inc	sp
25563                                           !BCC_EOS
25564                                           ! 3351   }
25565                                           ! 3352 }
25566                       0000693A            .222:
25567 693A           89EC                       mov	sp,bp
25568 693C           5D                         pop	bp
25569 693D           C3                         ret
25570                                           ! 3353 #asm
25571                                           !BCC_ASM
25572                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25573                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25574                       0000693E            biosfn_set_text_block_specifier:
25575 693E           50                           push ax
25576 693F           52                           push dx
25577 6940           BA                   03C4    mov dx, # 0x3c4
25578 6943           88DC                         mov ah, bl
25579 6945           B0                     03    mov al, #0x03
25580 6947           EF                           out dx, ax
25581 6948           5A                           pop dx
25582 6949           58                           pop ax
25583 694A           C3                           ret
25584                                           ! 3364 endasm
25585                                           !BCC_ENDASM
25586                                           ! 3365 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25587                                           ! Register BX used in function biosfn_load_text_8_8_pat
25588                       0000694B            _biosfn_load_text_8_16_pat:
25589                                           !BCC_EOS
25590                                           !BCC_EOS
25591                                           ! 3366 {
25592                                           ! 3367  Bit16u blockaddr,dest,i,src;
25593                                           !BCC_EOS
25594                                           ! 3368  get_font_access();
25595 694B           55                         push	bp
25596 694C           89E5                       mov	bp,sp
25597 694E           83C4                   F8  add	sp,*-8
25598                                           ! Debug: func () void = get_font_access+0 (used reg = )
25599 6951           E8         FC86            call	_get_font_access
25600                                           !BCC_EOS
25601                                           ! 3369  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25602                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25603 6954           8A46         06            mov	al,6[bp]
25604 6957           24                     04  and	al,*4
25605                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25606 6959           30E4                       xor	ah,ah
25607 695B           88C4                       mov	ah,al
25608 695D           30C0                       xor	al,al
25609 695F           B1                     03  mov	cl,*3
25610 6961           D3E0                       shl	ax,cl
25611 6963           50                         push	ax
25612                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25613 6964           8A46         06            mov	al,6[bp]
25614 6967           24                     03  and	al,*3
25615                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25616 6969           30E4                       xor	ah,ah
25617 696B           88C4                       mov	ah,al
25618 696D           30C0                       xor	al,al
25619 696F           B1                     06  mov	cl,*6
25620 6971           D3E0                       shl	ax,cl
25621                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25622 6973           0346         F6            add	ax,-$A[bp]
25623 6976           44                         inc	sp
25624 6977           44                         inc	sp
25625                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25626 6978           8946         FE            mov	-2[bp],ax
25627                                           !BCC_EOS
25628                                           ! 3370  for(i=0;i<0x100;i++)
25629                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25630 697B           31C0                       xor	ax,ax
25631 697D           8946         FA            mov	-6[bp],ax
25632                                           !BCC_EOS
25633                                           !BCC_EOS
25634                                           ! 3371   {
25635 6980           EB           3B            jmp .226
25636                       00006982            .227:
25637                                           ! 3372    src = i * 16;
25638                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25639 6982           8B46         FA            mov	ax,-6[bp]
25640 6985           B1                     04  mov	cl,*4
25641 6987           D3E0                       shl	ax,cl
25642                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25643 6989           8946         F8            mov	-8[bp],ax
25644                                           !BCC_EOS
25645                                           ! 3373    dest = blockaddr + i * 32;
25646                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25647 698C           8B46         FA            mov	ax,-6[bp]
25648 698F           B1                     05  mov	cl,*5
25649 6991           D3E0                       shl	ax,cl
25650                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25651                                           ! Debug: expression subtree swapping
25652 6993           0346         FE            add	ax,-2[bp]
25653                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25654 6996           8946         FC            mov	-4[bp],ax
25655                                           !BCC_EOS
25656                                           ! 3374    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25657                                           ! Debug: list int = const $10 (used reg = )
25658 6999           B8                   0010  mov	ax,*$10
25659 699C           50                         push	ax
25660                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25661 699D           8B5E         F8            mov	bx,-8[bp]
25662                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25663                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25664 69A0           81C3                 2528  add	bx,#_vgafont16
25665 69A4           53                         push	bx
25666                                           ! Debug: list unsigned int = const $C000 (used reg = )
25667 69A5           B8                   C000  mov	ax,#$C000
25668 69A8           50                         push	ax
25669                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25670 69A9           FF76         FC            push	-4[bp]
25671                                           ! Debug: list unsigned int = const $A000 (used reg = )
25672 69AC           B8                   A000  mov	ax,#$A000
25673 69AF           50                         push	ax
25674                                           ! Debug: func () void = memcpyb+0 (used reg = )
25675 69B0           E8         128C            call	_memcpyb
25676 69B3           83C4                   0A  add	sp,*$A
25677                                           !BCC_EOS
25678                                           ! 3375   }
25679                                           ! 3376  release_font_access();
25680                       000069B6            .225:
25681                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25682 69B6           8B46         FA            mov	ax,-6[bp]
25683 69B9           40                         inc	ax
25684 69BA           8946         FA            mov	-6[bp],ax
25685                       000069BD            .226:
25686                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25687 69BD           8B46         FA            mov	ax,-6[bp]
25688 69C0           3D                   0100  cmp	ax,#$100
25689 69C3           72           BD            jb 	.227
25690                       000069C5            .228:
25691                       000069C5            .224:
25692                                           ! Debug: func () void = release_font_access+0 (used reg = )
25693 69C5           E8         FC35            call	_release_font_access
25694                                           !BCC_EOS
25695                                           ! 3377  if(AL>=0x10)
25696                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25697 69C8           8A46         04            mov	al,4[bp]
25698 69CB           3C                     10  cmp	al,*$10
25699 69CD           72           09            jb  	.229
25700                       000069CF            .22A:
25701                                           ! 3378   {
25702                                           ! 3379    set_scan_lines(16);
25703                                           ! Debug: list int = const $10 (used reg = )
25704 69CF           B8                   0010  mov	ax,*$10
25705 69D2           50                         push	ax
25706                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25707 69D3           E8         FC5B            call	_set_scan_lines
25708 69D6           44                         inc	sp
25709 69D7           44                         inc	sp
25710                                           !BCC_EOS
25711                                           ! 3380   }
25712                                           ! 3381 }
25713                       000069D8            .229:
25714 69D8           89EC                       mov	sp,bp
25715 69DA           5D                         pop	bp
25716 69DB           C3                         ret
25717                                           ! 3382 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25718                                           ! Register BX used in function biosfn_load_text_8_16_pat
25719                       000069DC            _biosfn_load_gfx_8_8_chars:
25720                                           !BCC_EOS
25721                                           !BCC_EOS
25722                                           ! 3383 {
25723                                           ! 3384  unimplemented();
25724 69DC           55                         push	bp
25725 69DD           89E5                       mov	bp,sp
25726                                           ! Debug: func () void = unimplemented+0 (used reg = )
25727 69DF           E8         134C            call	_unimplemented
25728                                           !BCC_EOS
25729                                           ! 3385 }
25730 69E2           5D                         pop	bp
25731 69E3           C3                         ret
25732                                           ! 3386 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25733                       000069E4            _biosfn_load_gfx_user_chars:
25734                                           !BCC_EOS
25735                                           !BCC_EOS
25736                                           !BCC_EOS
25737                                           !BCC_EOS
25738                                           !BCC_EOS
25739                                           ! 3387 {
25740                                           ! 3388  unimplemented();
25741 69E4           55                         push	bp
25742 69E5           89E5                       mov	bp,sp
25743                                           ! Debug: func () void = unimplemented+0 (used reg = )
25744 69E7           E8         1344            call	_unimplemented
25745                                           !BCC_EOS
25746                                           ! 3389 }
25747 69EA           5D                         pop	bp
25748 69EB           C3                         ret
25749                                           ! 3390 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25750                       000069EC            _biosfn_load_gfx_8_14_chars:
25751                                           !BCC_EOS
25752                                           ! 3391 {
25753                                           ! 3392  unimplemented();
25754 69EC           55                         push	bp
25755 69ED           89E5                       mov	bp,sp
25756                                           ! Debug: func () void = unimplemented+0 (used reg = )
25757 69EF           E8         133C            call	_unimplemented
25758                                           !BCC_EOS
25759                                           ! 3393 }
25760 69F2           5D                         pop	bp
25761 69F3           C3                         ret
25762                                           ! 3394 static void biosfn_load_gf
25763                                           ! 3394 x_8_8_dd_chars (BL) Bit8u BL;
25764                       000069F4            _biosfn_load_gfx_8_8_dd_chars:
25765                                           !BCC_EOS
25766                                           ! 3395 {
25767                                           ! 3396  unimplemented();
25768 69F4           55                         push	bp
25769 69F5           89E5                       mov	bp,sp
25770                                           ! Debug: func () void = unimplemented+0 (used reg = )
25771 69F7           E8         1334            call	_unimplemented
25772                                           !BCC_EOS
25773                                           ! 3397 }
25774 69FA           5D                         pop	bp
25775 69FB           C3                         ret
25776                                           ! 3398 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25777                       000069FC            _biosfn_load_gfx_8_16_chars:
25778                                           !BCC_EOS
25779                                           ! 3399 {
25780                                           ! 3400  unimplemented();
25781 69FC           55                         push	bp
25782 69FD           89E5                       mov	bp,sp
25783                                           ! Debug: func () void = unimplemented+0 (used reg = )
25784 69FF           E8         132C            call	_unimplemented
25785                                           !BCC_EOS
25786                                           ! 3401 }
25787 6A02           5D                         pop	bp
25788 6A03           C3                         ret
25789                                           ! 3402 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25790                                           ! 3403 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25791                       00006A04            _biosfn_get_font_info:
25792                                           !BCC_EOS
25793                                           !BCC_EOS
25794                                           !BCC_EOS
25795                                           !BCC_EOS
25796                                           !BCC_EOS
25797                                           ! 3404 {Bit16u ss=get_SS();
25798 6A04           55                         push	bp
25799 6A05           89E5                       mov	bp,sp
25800 6A07           4C                         dec	sp
25801 6A08           4C                         dec	sp
25802                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25803 6A09           E8         131F            call	_get_SS
25804                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25805 6A0C           8946         FE            mov	-2[bp],ax
25806                                           !BCC_EOS
25807                                           ! 3405  switch(BH)
25808 6A0F           8A46         04            mov	al,4[bp]
25809                                           ! 3406   {case 0x00:
25810 6A12           E9         0154            br 	.22D
25811                                           ! 3407     write_word(ss,ES,read_word(0x00,0x1f*4));
25812                       00006A15            .22E:
25813                                           ! Debug: list int = const $7C (used reg = )
25814 6A15           B8                   007C  mov	ax,*$7C
25815 6A18           50                         push	ax
25816                                           ! Debug: list int = const 0 (used reg = )
25817 6A19           31C0                       xor	ax,ax
25818 6A1B           50                         push	ax
25819                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25820 6A1C           E8         1293            call	_read_word
25821 6A1F           83C4                   04  add	sp,*4
25822                                           ! Debug: list unsigned short = ax+0 (used reg = )
25823 6A22           50                         push	ax
25824                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25825 6A23           FF76         06            push	6[bp]
25826                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25827 6A26           FF76         FE            push	-2[bp]
25828                                           ! Debug: func () void = write_word+0 (used reg = )
25829 6A29           E8         12B1            call	_write_word
25830 6A2C           83C4                   06  add	sp,*6
25831                                           !BCC_EOS
25832                                           ! 3408     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25833                                           ! Debug: list int = const $7E (used reg = )
25834 6A2F           B8                   007E  mov	ax,*$7E
25835 6A32           50                         push	ax
25836                                           ! Debug: list int = const 0 (used reg = )
25837 6A33           31C0                       xor	ax,ax
25838 6A35           50                         push	ax
25839                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25840 6A36           E8         1279            call	_read_word
25841 6A39           83C4                   04  add	sp,*4
25842                                           ! Debug: list unsigned short = ax+0 (used reg = )
25843 6A3C           50                         push	ax
25844                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25845 6A3D           FF76         08            push	8[bp]
25846                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25847 6A40           FF76         FE            push	-2[bp]
25848                                           ! Debug: func () void = write_word+0 (used reg = )
25849 6A43           E8         1297            call	_write_word
25850 6A46           83C4                   06  add	sp,*6
25851                                           !BCC_EOS
25852                                           ! 3409     break;
25853 6A49           E9         0142            br 	.22B
25854                                           !BCC_EOS
25855                                           ! 3410    case 0x01:
25856                                           ! 3411     write_word(ss,ES,read_word(0x00,0x43*4));
25857                       00006A4C            .22F:
25858                                           ! Debug: list int = const $10C (used reg = )
25859 6A4C           B8                   010C  mov	ax,#$10C
25860 6A4F           50                         push	ax
25861                                           ! Debug: list int = const 0 (used reg = )
25862 6A50           31C0                       xor	ax,ax
25863 6A52           50                         push	ax
25864                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25865 6A53           E8         125C            call	_read_word
25866 6A56           83C4                   04  add	sp,*4
25867                                           ! Debug: list unsigned short = ax+0 (used reg = )
25868 6A59           50                         push	ax
25869                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25870 6A5A           FF76         06            push	6[bp]
25871                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25872 6A5D           FF76         FE            push	-2[bp]
25873                                           ! Debug: func () void = write_word+0 (used reg = )
25874 6A60           E8         127A            call	_write_word
25875 6A63           83C4                   06  add	sp,*6
25876                                           !BCC_EOS
25877                                           ! 3412     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25878                                           ! Debug: list int = const $10E (used reg = )
25879 6A66           B8                   010E  mov	ax,#$10E
25880 6A69           50                         push	ax
25881                                           ! Debug: list int = const 0 (used reg = )
25882 6A6A           31C0                       xor	ax,ax
25883 6A6C           50                         push	ax
25884                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25885 6A6D           E8         1242            call	_read_word
25886 6A70           83C4                   04  add	sp,*4
25887                                           ! Debug: list unsigned short = ax+0 (used reg = )
25888 6A73           50                         push	ax
25889                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25890 6A74           FF76         08            push	8[bp]
25891                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25892 6A77           FF76         FE            push	-2[bp]
25893                                           ! Debug: func () void = write_word+0 (used reg = )
25894 6A7A           E8         1260            call	_write_word
25895 6A7D           83C4                   06  add	sp,*6
25896                                           !BCC_EOS
25897                                           ! 3413     break;
25898 6A80           E9         010B            br 	.22B
25899                                           !BCC_EOS
25900                                           ! 3414    case 0x02:
25901                                           ! 3415     write_word(ss,ES,0xC000);
25902                       00006A83            .230:
25903                                           ! Debug: list unsigned int = const $C000 (used reg = )
25904 6A83           B8                   C000  mov	ax,#$C000
25905 6A86           50                         push	ax
25906                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25907 6A87           FF76         06            push	6[bp]
25908                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25909 6A8A           FF76         FE            push	-2[bp]
25910                                           ! Debug: func () void = write_word+0 (used reg = )
25911 6A8D           E8         124D            call	_write_word
25912 6A90           83C4                   06  add	sp,*6
25913                                           !BCC_EOS
25914                                           ! 3416     write_word(ss,BP,vgafont14);
25915                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25916 6A93           BB                   1728  mov	bx,#_vgafont14
25917 6A96           53                         push	bx
25918                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25919 6A97           FF76         08            push	8[bp]
25920                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25921 6A9A           FF76         FE            push	-2[bp]
25922                                           ! Debug: func () void = write_word+0 (used reg = )
25923 6A9D           E8         123D            call	_write_word
25924 6AA0           83C4                   06  add	sp,*6
25925                                           !BCC_EOS
25926                                           ! 3417     break;
25927 6AA3           E9         00E8            br 	.22B
25928                                           !BCC_EOS
25929                                           ! 3418    case 0x03:
25930                                           ! 3419     write_word(ss,ES,0xC000);
25931                       00006AA6            .231:
25932                                           ! Debug: list unsigned int = const $C000 (used reg = )
25933 6AA6           B8                   C000  mov	ax,#$C000
25934 6AA9           50                         push	ax
25935                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25936 6AAA           FF76         06            push	6[bp]
25937                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25938 6AAD           FF76         FE            push	-2[bp]
25939                                           ! Debug: func () void = write_word+0 (used reg = )
25940 6AB0           E8         122A            call	_write_word
25941 6AB3           83C4                   06  add	sp,*6
25942                                           !BCC_EOS
25943                                           ! 3420     write_word(ss,BP,vgafont8);
25944                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25945 6AB6           BB                   0F28  mov	bx,#_vgafont8
25946 6AB9           53                         push	bx
25947                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25948 6ABA           FF76         08            push	8[bp]
25949                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25950 6ABD           FF76         FE            push	-2[bp]
25951                                           ! Debug: func () void = write_word+0 (used reg = )
25952 6AC0           E8         121A            call	_write_word
25953 6AC3           83C4                   06  add	sp,*6
25954                                           !BCC_EOS
25955                                           ! 3421     break;
25956 6AC6           E9         00C5            br 	.22B
25957                                           !BCC_EOS
25958                                           ! 3422    case 0x04:
25959                                           ! 3423     write_word(ss,ES,0xC000);
25960                       00006AC9            .232:
25961                                           ! Debug: list unsigned int = const $C000 (used reg = )
25962 6AC9           B8                   C000  mov	ax,#$C000
25963 6ACC           50                         push	ax
25964                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25965 6ACD           FF76         06            push	6[bp]
25966                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25967 6AD0           FF76         FE            push	-2[bp]
25968                                           ! Debug: func () void = write_word+0 (used reg = )
25969 6AD3           E8         1207            call	_write_word
25970 6AD6           83C4                   06  add	sp,*6
25971                                           !BCC_EOS
25972                                           ! 3424     write_word(ss,BP,vgafont8+128*8);
25973                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
25974 6AD9           BB                   1328  mov	bx,#_vgafont8+$400
25975 6ADC           53                         push	bx
25976                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25977 6ADD           FF76         08            push	8[bp]
25978                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25979 6AE0           FF76         FE            push	-2[bp]
25980                                           ! Debug: func () void = write_word+0 (used reg = )
25981 6AE3           E8         11F7            call	_write_word
25982 6AE6           83C4                   06  add	sp,*6
25983                                           !BCC_EOS
25984                                           ! 3425     break;
25985 6AE9           E9         00A2            br 	.22B
25986                                           !BCC_EOS
25987                                           ! 3426    case 0x05:
25988                                           ! 3427     write_word(ss,ES,0xC000);
25989                       00006AEC            .233:
25990                                           ! Debug: list unsigned int = const $C000 (used reg = )
25991 6AEC           B8                   C000  mov	ax,#$C000
25992 6AEF           50                         push	ax
25993                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25994 6AF0           FF76         06            push	6[bp]
25995                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25996 6AF3           FF76         FE            push	-2[bp]
25997                                           ! Debug: func () void = write_word+0 (used reg = )
25998 6AF6           E8         11E4            call	_write_word
25999 6AF9           83C4                   06  add	sp,*6
26000                                           !BCC_EOS
26001                                           ! 3428     write_word(ss,BP,vgafont14alt);
26002                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26003 6AFC           BB                   3528  mov	bx,#_vgafont14alt
26004 6AFF           53                         push	bx
26005                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26006 6B00           FF76         08            push	8[bp]
26007                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26008 6B03           FF76         FE            push	-2[bp]
26009                                           ! Debug: func () void = write_word+0 (used reg = )
26010 6B06           E8         11D4            call	_write_word
26011 6B09           83C4                   06  add	sp,*6
26012                                           !BCC_EOS
26013                                           ! 3429     break;
26014 6B0C           E9         007F            jmp .22B
26015                                           !BCC_EOS
26016                                           ! 3430    case 0x06:
26017                                           ! 3431     write_word(ss,ES,0xC000);
26018                       00006B0F            .234:
26019                                           ! Debug: list unsigned int = const $C000 (used reg = )
26020 6B0F           B8                   C000  mov	ax,#$C000
26021 6B12           50                         push	ax
26022                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26023 6B13           FF76         06            push	6[bp]
26024                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26025 6B16           FF76         FE            push	-2[bp]
26026                                           ! Debug: func () void = write_word+0 (used reg = )
26027 6B19           E8         11C1            call	_write_word
26028 6B1C           83C4                   06  add	sp,*6
26029                                           !BCC_EOS
26030                                           ! 3432     write_word(ss,BP,vgafont16);
26031                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26032 6B1F           BB                   2528  mov	bx,#_vgafont16
26033 6B22           53                         push	bx
26034                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26035 6B23           FF76         08            push	8[bp]
26036                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26037 6B26           FF76         FE            push	-2[bp]
26038                                           ! Debug: func () void = write_word+0 (used reg = )
26039 6B29           E8         11B1            call	_write_word
26040 6B2C           83C4                   06  add	sp,*6
26041                                           !BCC_EOS
26042                                           ! 3433     break;
26043 6B2F           EB           5D            jmp .22B
26044                                           !BCC_EOS
26045                                           ! 3434    case 0x07:
26046                                           ! 3435     write_word(ss,ES,0xC000);
26047                       00006B31            .235:
26048                                           ! Debug: list unsigned int = const $C000 (used reg = )
26049 6B31           B8                   C000  mov	ax,#$C000
26050 6B34           50                         push	ax
26051                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26052 6B35           FF76         06            push	6[bp]
26053                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26054 6B38           FF76         FE            push	-2[bp]
26055                                           ! Debug: func () void = write_word+0 (used reg = )
26056 6B3B           E8         119F            call	_write_word
26057 6B3E           83C4                   06  add	sp,*6
26058                                           !BCC_EOS
26059                                           ! 3436     write_word(ss,BP,vgafont16alt);
26060                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26061 6B41           BB                   3529  mov	bx,#_vgafont16alt
26062 6B44           53                         push	bx
26063                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26064 6B45           FF76         08            push	8[bp]
26065                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26066 6B48           FF76         FE            push	-2[bp]
26067                                           ! Debug: func () void = write_word+0 (used reg = )
26068 6B4B           E8         118F            call	_write_word
26069 6B4E           83C4                   06  add	sp,*6
26070                                           !BCC_EOS
26071                                           ! 3437     break;
26072 6B51           EB           3B            jmp .22B
26073                                           !BCC_EOS
26074                                           ! 3438    default:
26075                                           ! 3439      printf("Get font info BH(%02x) was discarded\n",BH);
26076                       00006B53            .236:
26077                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26078 6B53           8A46         04            mov	al,4[bp]
26079 6B56           30E4                       xor	ah,ah
26080 6B58           50                         push	ax
26081                                           ! Debug: list * char = .237+0 (used reg = )
26082 6B59           BB                   7EC3  mov	bx,#.237
26083 6B5C           53                         push	bx
26084                                           ! Debug: func () void = printf+0 (used reg = )
26085 6B5D           E8         11EA            call	_printf
26086 6B60           83C4                   04  add	sp,*4
26087                                           !BCC_EOS
26088                                           ! 3440     return;
26089 6B63           89EC                       mov	sp,bp
26090 6B65           5D                         pop	bp
26091 6B66           C3                         ret
26092                                           !BCC_EOS
26093                                           ! 3441   }
26094                                           ! 3442  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26095 6B67           EB           25            jmp .22B
26096                       00006B69            .22D:
26097 6B69           2C                     00  sub	al,*0
26098 6B6B           72           E6            jb 	.236
26099 6B6D           3C                     07  cmp	al,*7
26100 6B6F           77           1B            ja  	.238
26101 6B71           30E4                       xor	ah,ah
26102 6B73           D1E0                       shl	ax,*1
26103 6B75           89C3                       mov	bx,ax
26104 6B77           2E                         seg	cs
26105 6B78           FFA7       6B7C            br	.239[bx]
26106                       00006B7C            .239:
26107 6B7C                      6A15            .word	.22E
26108 6B7E                      6A4C            .word	.22F
26109 6B80                      6A83            .word	.230
26110 6B82                      6AA6            .word	.231
26111 6B84                      6AC9            .word	.232
26112 6B86                      6AEC            .word	.233
26113 6B88                      6B0F            .word	.234
26114 6B8A                      6B31            .word	.235
26115                       00006B8C            .238:
26116 6B8C           EB           C5            jmp	.236
26117                       00006B8E            .22B:
26118                       FFFFFFFC            ..FFF5	=	-4
26119                                           ! Debug: list int = const $85 (used reg = )
26120 6B8E           B8                   0085  mov	ax,#$85
26121 6B91           50                         push	ax
26122                                           ! Debug: list int = const $40 (used reg = )
26123 6B92           B8                   0040  mov	ax,*$40
26124 6B95           50                         push	ax
26125                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26126 6B96           E8         1106            call	_read_byte
26127 6B99           83C4                   04  add	sp,*4
26128                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26129 6B9C           30E4                       xor	ah,ah
26130                                           ! Debug: list unsigned short = ax+0 (used reg = )
26131 6B9E           50                         push	ax
26132                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26133 6B9F           FF76         0A            push	$A[bp]
26134                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26135 6BA2           FF76         FE            push	-2[bp]
26136                                           ! Debug: func () void = write_word+0 (used reg = )
26137 6BA5           E8         1135            call	_write_word
26138 6BA8           83C4                   06  add	sp,*6
26139                                           !BCC_EOS
26140                                           ! 3443  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26141                                           ! Debug: list int = const $84 (used reg = )
26142 6BAB           B8                   0084  mov	ax,#$84
26143 6BAE           50                         push	ax
26144                                           ! Debug: list int = const $40 (used reg = )
26145 6BAF           B8                   0040  mov	ax,*$40
26146 6BB2           50                         push	ax
26147                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26148 6BB3           E8         10E9            call	_read_byte
26149 6BB6           83C4                   04  add	sp,*4
26150                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26151 6BB9           30E4                       xor	ah,ah
26152                                           ! Debug: list unsigned short = ax+0 (used reg = )
26153 6BBB           50                         push	ax
26154                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26155 6BBC           FF76         0C            push	$C[bp]
26156                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26157 6BBF           FF76         FE            push	-2[bp]
26158                                           ! Debug: func () void = write_word+0 (used reg = )
26159 6BC2           E8         1118            call	_write_word
26160 6BC5           83C4                   06  add	sp,*6
26161                                           !BCC_EOS
26162                                           ! 3444 }
26163 6BC8           89EC                       mov	sp,bp
26164 6BCA           5D                         pop	bp
26165 6BCB           C3                         ret
26166                                           ! 3445 #asm
26167                                           !BCC_ASM
26168                       00000006            _biosfn_get_font_info.BP	set	6
26169                       00000002            _biosfn_get_font_info.BH	set	2
26170                       00000008            _biosfn_get_font_info.CX	set	8
26171                       0000000A            _biosfn_get_font_info.DX	set	$A
26172                       00000004            _biosfn_get_font_info.ES	set	4
26173                       00006BCC            biosfn_get_ega_info:
26174 6BCC           1E                           push ds
26175 6BCD           50                           push ax
26176 6BCE           B8                   0040    mov ax, # 0x40
26177 6BD1           8ED8                         mov ds, ax
26178 6BD3           30ED                         xor ch, ch
26179 6BD5           BB                   0088    mov bx, # 0x88
26180 6BD8           8A0F                         mov cl, [bx]
26181 6BDA           80E1                   0F    and cl, #0x0f
26182 6BDD           BB                   0063    mov bx, # 0x63
26183 6BE0           8B07                         mov ax, [bx]
26184 6BE2           BB                   0003    mov bx, #0x0003
26185 6BE5           3D                   03B4    cmp ax, # 0x3b4
26186 6BE8           75           02              jne mode_ega_color
26187 6BEA           B7                     01    mov bh, #0x01
26188                       00006BEC            mode_ega_color:
26189 6BEC           58                           pop ax
26190 6BED           1F                           pop ds
26191 6BEE           C3                           ret
26192                                           ! 3465 endasm
26193                                           !BCC_ENDASM
26194                                           ! 3466 static void biosfn_alternate_prtsc()
26195                                           ! Register BX used in function biosfn_get_font_info
26196                                           ! 3467 {
26197                       00006BEF            _biosfn_alternate_prtsc:
26198                                           ! 3468  unimplemented();
26199 6BEF           55                         push	bp
26200 6BF0           89E5                       mov	bp,sp
26201                                           ! Debug: func () void = unimplemented+0 (used reg = )
26202 6BF2           E8         1139            call	_unimplemented
26203                                           !BCC_EOS
26204                                           ! 3469 }
26205 6BF5           5D                         pop	bp
26206 6BF6           C3                         ret
26207                                           ! 3470 #asm
26208                                           !BCC_ASM
26209                       00006BF7            biosfn_select_vert_res:
26210                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26211 6BF7           1E                           push ds
26212 6BF8           53                           push bx
26213 6BF9           52                           push dx
26214 6BFA           88C2                         mov dl, al
26215 6BFC           B8                   0040    mov ax, # 0x40
26216 6BFF           8ED8                         mov ds, ax
26217 6C01           BB                   0089    mov bx, # 0x89
26218 6C04           8A07                         mov al, [bx]
26219 6C06           BB                   0088    mov bx, # 0x88
26220 6C09           8A27                         mov ah, [bx]
26221 6C0B           80FA                   01    cmp dl, #0x01
26222 6C0E           74           24              je vert_res_350
26223 6C10           72           2C              jb vert_res_200
26224 6C12           80FA                   02    cmp dl, #0x02
26225 6C15           74           11              je vert_res_400
26226 6C17           88D0                         mov al, dl
26227 6C19           30E4                         xor ah, ah
26228 6C1B           50                           push ax
26229 6C1C           BB                   6C59    mov bx, #msg_vert_res
26230 6C1F           53                           push bx
26231 6C20           E8         1127              call _printf
26232 6C23           83C4                   04    add sp, #4
26233 6C26           EB           2A              jmp set_retcode
26234                       00006C28            vert_res_400:
26235                                             ; reset modeset ctl bit 7 and set bit 4
26236                                             ; set switches bit 3-0 to 0x09
26237 6C28           24                     7F    and al, #0x7f
26238 6C2A           0C                     10    or al, #0x10
26239 6C2C           80E4                   F0    and ah, #0xf0
26240 6C2F           80CC                   09    or ah, #0x09
26241 6C32           75           14              jnz set_vert_res
26242                       00006C34            vert_res_350:
26243                                             ; reset modeset ctl bit 7 and bit 4
26244                                             ; set switches bit 3-0 to 0x09
26245 6C34           24                     6F    and al, #0x6f
26246 6C36           80E4                   F0    and ah, #0xf0
26247 6C39           80CC                   09    or ah, #0x09
26248 6C3C           75           0A              jnz set_vert_res
26249                       00006C3E            vert_res_200:
26250                                             ; set modeset ctl bit 7 and reset bit 4
26251                                             ; set switches bit 3-0 to 0x08
26252 6C3E           24                     EF    and al, #0xef
26253 6C40           0C                     80    or al, #0x80
26254 6C42           80E4                   F0    and ah, #0xf0
26255 6C45           80CC                   08    or ah, #0x08
26256                       00006C48            set_vert_res:
26257 6C48           BB                   0089    mov bx, # 0x89
26258 6C4B           8807                         mov [bx], al
26259 6C4D           BB                   0088    mov bx, # 0x88
26260 6C50           8827                         mov [bx], ah
26261                       00006C52            set_retcode:
26262 6C52           B8                   1212    mov ax, #0x1212
26263 6C55           5A                           pop dx
26264 6C56           5B                           pop bx
26265 6C57           1F                           pop ds
26266 6C58           C3                           ret
26267                       00006C59            msg_vert_res:
26268 6C59                        53            .ascii "Select vert res (%02x) was discarded"
26269 6C7D                        0D            .byte 0x0d,0x0a,0x00
26270                       00006C80            biosfn_enable_default_palette_loading:
26271 6C80           1E                           push ds
26272 6C81           53                           push bx
26273 6C82           52                           push dx
26274 6C83           88C2                         mov dl, al
26275 6C85           80E2                   01    and dl, #0x01
26276 6C88           C0E2                   03    shl dl, 3
26277 6C8B           B8                   0040    mov ax, # 0x40
26278 6C8E           8ED8                         mov ds, ax
26279 6C90           BB                   0089    mov bx, # 0x89
26280 6C93           8A07                         mov al, [bx]
26281 6C95           24                     F7    and al, #0xf7
26282 6C97           08D0                         or al, dl
26283 6C99           8807                         mov [bx], al
26284 6C9B           B8                   1212    mov ax, #0x1212
26285 6C9E           5A                           pop dx
26286 6C9F           5B                           pop bx
26287 6CA0           1F                           pop ds
26288 6CA1           C3                           ret
26289                       00006CA2            biosfn_enable_video_addressing:
26290 6CA2           53                           push bx
26291 6CA3           52                           push dx
26292 6CA4           88C3                         mov bl, al
26293 6CA6           80E3                   01    and bl, #0x01
26294 6CA9           80F3                   01    xor bl, #0x01
26295 6CAC           D0E3                         shl bl, 1
26296 6CAE           BA                   03CC    mov dx, # 0x3cc
26297 6CB1           EC                           in al, dx
26298 6CB2           24                     FD    and al, #0xfd
26299 6CB4           08D8                         or al, bl
26300 6CB6           BA                   03C2    mov dx, # 0x3c2
26301 6CB9           EE                           out dx, al
26302 6CBA           B8                   1212    mov ax, #0x1212
26303 6CBD           5A                           pop dx
26304 6CBE           5B                           pop bx
26305 6CBF           C3                           ret
26306                       00006CC0            biosfn_enable_grayscale_summing:
26307 6CC0           1E                           push ds
26308 6CC1           53                           push bx
26309 6CC2           52                           push dx
26310 6CC3           88C2                         mov dl, al
26311 6CC5           80E2                   01    and dl, #0x01
26312 6CC8           80F2                   01    xor dl, #0x01
26313 6CCB           D0E2                         shl dl, 1
26314 6CCD           B8                   0040    mov ax, # 0x40
26315 6CD0           8ED8                         mov ds, ax
26316 6CD2           BB                   0089    mov bx, # 0x89
26317 6CD5           8A07                         mov al, [bx]
26318 6CD7           24                     FD    and al, #0xfd
26319 6CD9           08D0                         or al, dl
26320 6CDB           8807                         mov [bx], al
26321 6CDD           B8                   1212    mov ax, #0x1212
26322 6CE0           5A                           pop dx
26323 6CE1           5B                           pop bx
26324 6CE2           1F                           pop ds
26325 6CE3           C3                           ret
26326                       00006CE4            biosfn_enable_cursor_emulation:
26327 6CE4           1E                           push ds
26328 6CE5           53                           push bx
26329 6CE6           52                           push dx
26330 6CE7           88C2                         mov dl, al
26331 6CE9           80E2                   01    and dl, #0x01
26332 6CEC           80F2                   01    xor dl, #0x01
26333 6CEF           B8                   0040    mov ax, # 0x40
26334 6CF2           8ED8                         mov ds, ax
26335 6CF4           BB                   0089    mov bx, # 0x89
26336 6CF7           8A07                         mov al, [bx]
26337 6CF9           24                     FE    and al, #0xfe
26338 6CFB           08D0                         or al, dl
26339 6CFD           8807                         mov [bx], al
26340 6CFF           B8                   1212    mov ax, #0x1212
26341 6D02           5A                           pop dx
26342 6D03           5B                           pop bx
26343 6D04           1F                           pop ds
26344 6D05           C3                           ret
26345                                           ! 3607 endasm
26346                                           !BCC_ENDASM
26347                                           ! 3608 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26348                       00006D06            _biosfn_switch_video_interface:
26349                                           !BCC_EOS
26350                                           !BCC_EOS
26351                                           !BCC_EOS
26352                                           ! 3609 {
26353                                           ! 3610  unimplemented();
26354 6D06           55                         push	bp
26355 6D07           89E5                       mov	bp,sp
26356                                           ! Debug: func () void = unimplemented+0 (used reg = )
26357 6D09           E8         1022            call	_unimplemented
26358                                           !BCC_EOS
26359                                           ! 3611 }
26360 6D0C           5D                         pop	bp
26361 6D0D           C3                         ret
26362                                           ! 3612 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26363                       00006D0E            _biosfn_enable_video_refresh_control:
26364                                           !BCC_EOS
26365                                           ! 3613 {
26366                                           ! 3614  unimplemented();
26367 6D0E           55                         push	bp
26368 6D0F           89E5                       mov	bp,sp
26369                                           ! Debug: func () void = unimplemented+0 (used reg = )
26370 6D11           E8         101A            call	_unimplemented
26371                                           !BCC_EOS
26372                                           ! 3615 }
26373 6D14           5D                         pop	bp
26374 6D15           C3                         ret
26375                                           ! 3616 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26376                                           ! 3617 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u off
26377                       00006D16            _biosfn_write_string:
26378                                           !BCC_EOS
26379                                           !BCC_EOS
26380                                           !BCC_EOS
26381                                           !BCC_EOS
26382                                           !BCC_EOS
26383                                           !BCC_EOS
26384                                           !BCC_EOS
26385                                           ! 3617 set;
26386                                           !BCC_EOS
26387                                           ! 3618 {
26388                                           ! 3619  Bit16u newcurs,oldcurs,dummy;
26389                                           !BCC_EOS
26390                                           ! 3620  Bit8u car,carattr;
26391                                           !BCC_EOS
26392                                           ! 3621  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26393 6D16           55                         push	bp
26394 6D17           89E5                       mov	bp,sp
26395 6D19           83C4                   F8  add	sp,*-8
26396                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26397 6D1C           8D5E         FC            lea	bx,-4[bp]
26398 6D1F           53                         push	bx
26399                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26400 6D20           8D5E         FA            lea	bx,-6[bp]
26401 6D23           53                         push	bx
26402                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26403 6D24           8A46         06            mov	al,6[bp]
26404 6D27           30E4                       xor	ah,ah
26405 6D29           50                         push	ax
26406                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26407 6D2A           E8         D68A            call	_biosfn_get_cursor_pos
26408 6D2D           83C4                   06  add	sp,*6
26409                                           !BCC_EOS
26410                                           ! 3622  if(row==0xff)
26411                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26412 6D30           8A46         0C            mov	al,$C[bp]
26413 6D33           3C                     FF  cmp	al,#$FF
26414 6D35           75           12            jne 	.23A
26415                       00006D37            .23B:
26416                                           ! 3623   {col=oldcurs&0x00ff;
26417                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26418 6D37           8A46         FC            mov	al,-4[bp]
26419                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26420 6D3A           8846         0E            mov	$E[bp],al
26421                                           !BCC_EOS
26422                                           ! 3624    row=(oldcurs&0xff00)>>8;
26423                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26424 6D3D           8B46         FC            mov	ax,-4[bp]
26425 6D40           30C0                       xor	al,al
26426                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26427 6D42           88E0                       mov	al,ah
26428 6D44           30E4                       xor	ah,ah
26429                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26430 6D46           8846         0C            mov	$C[bp],al
26431                                           !BCC_EOS
26432                                           ! 3625   }
26433                                           ! 3626  newcurs=row; newcurs<<=8; newcurs+=col;
26434                       00006D49            .23A:
26435                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26436 6D49           8A46         0C            mov	al,$C[bp]
26437 6D4C           30E4                       xor	ah,ah
26438 6D4E           8946         FE            mov	-2[bp],ax
26439                                           !BCC_EOS
26440                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26441 6D51           8B46         FE            mov	ax,-2[bp]
26442 6D54           88C4                       mov	ah,al
26443 6D56           30C0                       xor	al,al
26444 6D58           8946         FE            mov	-2[bp],ax
26445                                           !BCC_EOS
26446                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26447 6D5B           8B46         FE            mov	ax,-2[bp]
26448 6D5E           0246         0E            add	al,$E[bp]
26449 6D61           80D4                   00  adc	ah,*0
26450 6D64           8946         FE            mov	-2[bp],ax
26451                                           !BCC_EOS
26452                                           ! 3627  biosfn_set_cursor_pos(page,newcurs);
26453                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26454 6D67           FF76         FE            push	-2[bp]
26455                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26456 6D6A           8A46         06            mov	al,6[bp]
26457 6D6D           30E4                       xor	ah,ah
26458 6D6F           50                         push	ax
26459                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26460 6D70           E8         D543            call	_biosfn_set_cursor_pos
26461 6D73           83C4                   04  add	sp,*4
26462                                           !BCC_EOS
26463                                           ! 3628  while(count--!=0)
26464                                           ! 3629   {
26465 6D76           EB           4F            jmp .23D
26466                       00006D78            .23E:
26467                                           ! 3630    car=read_byte(seg,offset++);
26468                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26469 6D78           8B46         12            mov	ax,$12[bp]
26470 6D7B           40                         inc	ax
26471 6D7C           8946         12            mov	$12[bp],ax
26472                                           ! Debug: list unsigned short = ax-1 (used reg = )
26473 6D7F           48                         dec	ax
26474 6D80           50                         push	ax
26475                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26476 6D81           FF76         10            push	$10[bp]
26477                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26478 6D84           E8         0F18            call	_read_byte
26479 6D87           83C4                   04  add	sp,*4
26480                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26481 6D8A           8846         F9            mov	-7[bp],al
26482                                           !BCC_EOS
26483                                           ! 3631    if((flag&0x02)!=0)
26484                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26485 6D8D           8A46         04            mov	al,4[bp]
26486 6D90           24                     02  and	al,*2
26487                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26488 6D92           84C0                       test	al,al
26489 6D94           74           15            je  	.23F
26490                       00006D96            .240:
26491                                           ! 3632     attr=read_byte(seg,offset++);
26492                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26493 6D96           8B46         12            mov	ax,$12[bp]
26494 6D99           40                         inc	ax
26495 6D9A           8946         12            mov	$12[bp],ax
26496                                           ! Debug: list unsigned short = ax-1 (used reg = )
26497 6D9D           48                         dec	ax
26498 6D9E           50                         push	ax
26499                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26500 6D9F           FF76         10            push	$10[bp]
26501                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26502 6DA2           E8         0EFA            call	_read_byte
26503 6DA5           83C4                   04  add	sp,*4
26504                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26505 6DA8           8846         08            mov	8[bp],al
26506                                           !BCC_EOS
26507                                           ! 3633    biosfn_write_teletype(car,page,attr,3);
26508                       00006DAB            .23F:
26509                                           ! Debug: list int = const 3 (used reg = )
26510 6DAB           B8                   0003  mov	ax,*3
26511 6DAE           50                         push	ax
26512                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26513 6DAF           8A46         08            mov	al,8[bp]
26514 6DB2           30E4                       xor	ah,ah
26515 6DB4           50                         push	ax
26516                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26517 6DB5           8A46         06            mov	al,6[bp]
26518 6DB8           30E4                       xor	ah,ah
26519 6DBA           50                         push	ax
26520                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26521 6DBB           8A46         F9            mov	al,-7[bp]
26522 6DBE           30E4                       xor	ah,ah
26523 6DC0           50                         push	ax
26524                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26525 6DC1           E8         F0AB            call	_biosfn_write_teletype
26526 6DC4           83C4                   08  add	sp,*8
26527                                           !BCC_EOS
26528                                           ! 3634   }
26529                                           ! 3635  if((flag&0x01)==0)
26530                       00006DC7            .23D:
26531                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26532 6DC7           8B46         0A            mov	ax,$A[bp]
26533 6DCA           48                         dec	ax
26534 6DCB           8946         0A            mov	$A[bp],ax
26535                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26536 6DCE           3D                   FFFF  cmp	ax,*-1
26537 6DD1           75           A5            jne	.23E
26538                       00006DD3            .241:
26539                       00006DD3            .23C:
26540                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26541 6DD3           8A46         04            mov	al,4[bp]
26542 6DD6           24                     01  and	al,*1
26543                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26544 6DD8           84C0                       test	al,al
26545 6DDA           75           0F            jne 	.242
26546                       00006DDC            .243:
26547                                           ! 3636   biosfn_set_cursor_pos(page,oldcurs);
26548                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26549 6DDC           FF76         FC            push	-4[bp]
26550                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26551 6DDF           8A46         06            mov	al,6[bp]
26552 6DE2           30E4                       xor	ah,ah
26553 6DE4           50                         push	ax
26554                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26555 6DE5           E8         D4CE            call	_biosfn_set_cursor_pos
26556 6DE8           83C4                   04  add	sp,*4
26557                                           !BCC_EOS
26558                                           ! 3637 }
26559                       00006DEB            .242:
26560 6DEB           89EC                       mov	sp,bp
26561 6DED           5D                         pop	bp
26562 6DEE           C3                         ret
26563                                           ! 3638 #asm
26564                                           !BCC_ASM
26565                       00000008            _biosfn_write_string.count	set	8
26566                       0000000E            _biosfn_write_string.seg	set	$E
26567                       0000000C            _biosfn_write_string.col	set	$C
26568                       00000002            _biosfn_write_string.flag	set	2
26569                       00000006            _biosfn_write_string.attr	set	6
26570                       00000004            _biosfn_write_string.page	set	4
26571                       0000000A            _biosfn_write_string.row	set	$A
26572                       00000010            _biosfn_write_string.offset	set	$10
26573                       00006DEF            biosfn_group_1A:
26574 6DEF           3C                     00    cmp al, #0x00
26575 6DF1           74           08              je biosfn_read_display_code
26576 6DF3           3C                     01    cmp al, #0x01
26577 6DF5           74           19              je biosfn_set_display_code
26578 6DF7           E8         0F42              call _unknown
26579 6DFA           C3                           ret
26580                       00006DFB            biosfn_read_display_code:
26581 6DFB           1E                           push ds
26582 6DFC           50                           push ax
26583 6DFD           B8                   0040    mov ax, # 0x40
26584 6E00           8ED8                         mov ds, ax
26585 6E02           BB                   008A    mov bx, # 0x8A
26586 6E05           8A07                         mov al, [bx]
26587 6E07           88C3                         mov bl, al
26588 6E09           30FF                         xor bh, bh
26589 6E0B           58                           pop ax
26590 6E0C           88E0                         mov al, ah
26591 6E0E           1F                           pop ds
26592 6E0F           C3                           ret
26593                       00006E10            biosfn_set_display_code:
26594 6E10           1E                           push ds
26595 6E11           50                           push ax
26596 6E12           53                           push bx
26597 6E13           B8                   0040    mov ax, # 0x40
26598 6E16           8ED8                         mov ds, ax
26599 6E18           89D8                         mov ax, bx
26600 6E1A           BB                   008A    mov bx, # 0x8A
26601 6E1D           8807                         mov [bx], al
26602 6E1F           88E0                         mov al, ah
26603 6E21           30E4                         xor ah, ah
26604 6E23           50                           push ax
26605 6E24           BB                   6E34    mov bx, #msg_alt_dcc
26606 6E27           53                           push bx
26607 6E28           E8         0F1F              call _printf
26608 6E2B           83C4                   04    add sp, #4
26609 6E2E           5B                           pop bx
26610 6E2F           58                           pop ax
26611 6E30           88E0                         mov al, ah
26612 6E32           1F                           pop ds
26613 6E33           C3                           ret
26614                       00006E34            msg_alt_dcc:
26615 6E34                        41            .ascii "Alternate Display code (%02x) was discarded"
26616 6E5F                        0D            .byte 0x0d,0x0a,0x00
26617                                           ! 3683 endasm
26618                                           !BCC_ENDASM
26619                                           ! 3684 static void biosfn_read_state_info (BX,ES,DI)
26620                                           ! Register BX used in function biosfn_write_string
26621                                           ! 3685 Bit16u BX;Bit16u ES;Bit16u DI;
26622                       00006E62            _biosfn_read_state_info:
26623                                           !BCC_EOS
26624                                           !BCC_EOS
26625                                           !BCC_EOS
26626                                           ! 3686 {
26627                                           ! 3687  write_word(ES,DI+0x00,&static_functionality);
26628 6E62           55                         push	bp
26629 6E63           89E5                       mov	bp,sp
26630                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26631 6E65           BB                   0F18  mov	bx,#_static_functionality
26632 6E68           53                         push	bx
26633                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26634 6E69           8B46         08            mov	ax,8[bp]
26635                                           ! Debug: list unsigned int = ax+0 (used reg = )
26636 6E6C           50                         push	ax
26637                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26638 6E6D           FF76         06            push	6[bp]
26639                                           ! Debug: func () void = write_word+0 (used reg = )
26640 6E70           E8         0E6A            call	_write_word
26641 6E73           89EC                       mov	sp,bp
26642                                           !BCC_EOS
26643                                           ! 3688  write_word(ES,DI+0x02,0xC000);
26644                                           ! Debug: list unsigned int = const $C000 (used reg = )
26645 6E75           B8                   C000  mov	ax,#$C000
26646 6E78           50                         push	ax
26647                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26648 6E79           8B46         08            mov	ax,8[bp]
26649                                           ! Debug: list unsigned int = ax+2 (used reg = )
26650 6E7C           40                         inc	ax
26651 6E7D           40                         inc	ax
26652 6E7E           50                         push	ax
26653                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26654 6E7F           FF76         06            push	6[bp]
26655                                           ! Debug: func () void = write_word+0 (used reg = )
26656 6E82           E8         0E58            call	_write_word
26657 6E85           89EC                       mov	sp,bp
26658                                           !BCC_EOS
26659                                           ! 3689  memcpyb(ES,DI+0x04,0x40,0x49,30);
26660                                           ! Debug: list int = const $1E (used reg = )
26661 6E87           B8                   001E  mov	ax,*$1E
26662 6E8A           50                         push	ax
26663                                           ! Debug: list int = const $49 (used reg = )
26664 6E8B           B8                   0049  mov	ax,*$49
26665 6E8E           50                         push	ax
26666                                           ! Debug: list int = const $40 (used reg = )
26667 6E8F           B8                   0040  mov	ax,*$40
26668 6E92           50                         push	ax
26669                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26670 6E93           8B46         08            mov	ax,8[bp]
26671                                           ! Debug: list unsigned int = ax+4 (used reg = )
26672 6E96           05                   0004  add	ax,*4
26673 6E99           50                         push	ax
26674                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26675 6E9A           FF76         06            push	6[bp]
26676                                           ! Debug: func () void = memcpyb+0 (used reg = )
26677 6E9D           E8         0D9F            call	_memcpyb
26678 6EA0           89EC                       mov	sp,bp
26679                                           !BCC_EOS
26680                                           ! 3690  memcpyb(ES,DI+0x22,0x40,0x84,3);
26681                                           ! Debug: list int = const 3 (used reg = )
26682 6EA2           B8                   0003  mov	ax,*3
26683 6EA5           50                         push	ax
26684                                           ! Debug: list int = const $84 (used reg = )
26685 6EA6           B8                   0084  mov	ax,#$84
26686 6EA9           50                         push	ax
26687                                           ! Debug: list int = const $40 (used reg = )
26688 6EAA           B8                   0040  mov	ax,*$40
26689 6EAD           50                         push	ax
26690                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26691 6EAE           8B46         08            mov	ax,8[bp]
26692                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26693 6EB1           05                   0022  add	ax,*$22
26694 6EB4           50                         push	ax
26695                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26696 6EB5           FF76         06            push	6[bp]
26697                                           ! Debug: func () void = memcpyb+0 (used reg = )
26698 6EB8           E8         0D84            call	_memcpyb
26699 6EBB           89EC                       mov	sp,bp
26700                                           !BCC_EOS
26701                                           ! 3691  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26702                                           ! Debug: list int = const $8A (used reg = )
26703 6EBD           B8                   008A  mov	ax,#$8A
26704 6EC0           50                         push	ax
26705                                           ! Debug: list int = const $40 (used reg = )
26706 6EC1           B8                   0040  mov	ax,*$40
26707 6EC4           50                         push	ax
26708                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26709 6EC5           E8         0DD7            call	_read_byte
26710 6EC8           89EC                       mov	sp,bp
26711                                           ! Debug: list unsigned char = al+0 (used reg = )
26712 6ECA           30E4                       xor	ah,ah
26713 6ECC           50                         push	ax
26714                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26715 6ECD           8B46         08            mov	ax,8[bp]
26716                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26717 6ED0           05                   0025  add	ax,*$25
26718 6ED3           50                         push	ax
26719                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26720 6ED4           FF76         06            push	6[bp]
26721                                           ! Debug: func () void = write_byte+0 (used reg = )
26722 6ED7           E8         0DEB            call	_write_byte
26723 6EDA           89EC                       mov	sp,bp
26724                                           !BCC_EOS
26725                                           ! 3692  write_byte(ES,DI+0x26,0);
26726                                           ! Debug: list int = const 0 (used reg = )
26727 6EDC           31C0                       xor	ax,ax
26728 6EDE           50                         push	ax
26729                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26730 6EDF           8B46         08            mov	ax,8[bp]
26731                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26732 6EE2           05                   0026  add	ax,*$26
26733 6EE5           50                         push	ax
26734                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26735 6EE6           FF76         06            push	6[bp]
26736                                           ! Debug: func () void = write_byte+0 (used reg = )
26737 6EE9           E8         0DD9            call	_write_byte
26738 6EEC           89EC                       mov	sp,bp
26739                                           !BCC_EOS
26740                                           ! 3693  write_byte(ES,DI+0x27,16);
26741                                           ! Debug: list int = const $10 (used reg = )
26742 6EEE           B8                   0010  mov	ax,*$10
26743 6EF1           50                         push	ax
26744                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26745 6EF2           8B46         08            mov	ax,8[bp]
26746                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26747 6EF5           05                   0027  add	ax,*$27
26748 6EF8           50                         push	ax
26749                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26750 6EF9           FF76         06            push	6[bp]
26751                                           ! Debug: func () void = write_byte+0 (used reg = )
26752 6EFC           E8         0DC6            call	_write_byte
26753 6EFF           89EC                       mov	sp,bp
26754                                           !BCC_EOS
26755                                           ! 3694  write_byte(ES,DI+0x28,0);
26756                                           ! Debug: list int = const 0 (used reg = )
26757 6F01           31C0                       xor	ax,ax
26758 6F03           50                         push	ax
26759                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26760 6F04           8B46         08            mov	ax,8[bp]
26761                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26762 6F07           05                   0028  add	ax,*$28
26763 6F0A           50                         push	ax
26764                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26765 6F0B           FF76         06            push	6[bp]
26766                                           ! Debug: func () void = write_byte+0 (used reg = )
26767 6F0E           E8         0DB4            call	_write_byte
26768 6F11           89EC                       mov	sp,bp
26769                                           !BCC_EOS
26770                                           ! 3695  write_byte(ES,DI+0x29,8);
26771                                           ! Debug: list int = const 8 (used reg = )
26772 6F13           B8                   0008  mov	ax,*8
26773 6F16           50                         push	ax
26774                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26775 6F17           8B46         08            mov	ax,8[bp]
26776                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26777 6F1A           05                   0029  add	ax,*$29
26778 6F1D           50                         push	ax
26779                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26780 6F1E           FF76         06            push	6[bp]
26781                                           ! Debug: func () void = write_byte+0 (used reg = )
26782 6F21           E8         0DA1            call	_write_byte
26783 6F24           89EC                       mov	sp,bp
26784                                           !BCC_EOS
26785                                           ! 3696  write_byte(ES,DI+0x2a,2);
26786                                           ! Debug: list int = const 2 (used reg = )
26787 6F26           B8                   0002  mov	ax,*2
26788 6F29           50                         push	ax
26789                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26790 6F2A           8B46         08            mov	ax,8[bp]
26791                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26792 6F2D           05                   002A  add	ax,*$2A
26793 6F30           50                         push	ax
26794                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26795 6F31           FF76         06            push	6[bp]
26796                                           ! Debug: func () void = write_byte+0 (used reg = )
26797 6F34           E8         0D8E            call	_write_byte
26798 6F37           89EC                       mov	sp,bp
26799                                           !BCC_EOS
26800                                           ! 3697  write_byte(ES,DI+0x2b,0);
26801                                           ! Debug: list int = const 0 (used reg = )
26802 6F39           31C0                       xor	ax,ax
26803 6F3B           50                         push	ax
26804                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26805 6F3C           8B46         08            mov	ax,8[bp]
26806                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26807 6F3F           05                   002B  add	ax,*$2B
26808 6F42           50                         push	ax
26809                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26810 6F43           FF76         06            push	6[bp]
26811                                           ! Debug: func () void = write_byte+0 (used reg = )
26812 6F46           E8         0D7C            call	_write_byte
26813 6F49           89EC                       mov	sp,bp
26814                                           !BCC_EOS
26815                                           ! 3698  write_byte(ES,DI+0x2c,0);
26816                                           ! Debug: list int = const 0 (used reg = )
26817 6F4B           31C0                       xor	ax,ax
26818 6F4D           50                         push	ax
26819                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26820 6F4E           8B46         08            mov	ax,8[bp]
26821                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26822 6F51           05                   002C  add	ax,*$2C
26823 6F54           50                         push	ax
26824                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26825 6F55           FF76         06            push	6[bp]
26826                                           ! Debug: func () void = write_byte+0 (used reg = )
26827 6F58           E8         0D6A            call	_write_byte
26828 6F5B           89EC                       mov	sp,bp
26829                                           !BCC_EOS
26830                                           ! 3699  write_byte(ES,DI+0x31,3);
26831                                           ! Debug: list int = const 3 (used reg = )
26832 6F5D           B8                   0003  mov	ax,*3
26833 6F60           50                         push	ax
26834                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26835 6F61           8B46         08            mov	ax,8[bp]
26836                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26837 6F64           05                   0031  add	ax,*$31
26838 6F67           50                         push	ax
26839                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26840 6F68           FF76         06            push	6[bp]
26841                                           ! Debug: func () void = write_byte+0 (used reg = )
26842 6F6B           E8         0D57            call	_write_byte
26843 6F6E           89EC                       mov	sp,bp
26844                                           !BCC_EOS
26845                                           ! 3700  write_byte(ES,DI+0x32,0);
26846                                           ! Debug: list int = const 0 (used reg = )
26847 6F70           31C0                       xor	ax,ax
26848 6F72           50                         push	ax
26849                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26850 6F73           8B46         08            mov	ax,8[bp]
26851                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26852 6F76           05                   0032  add	ax,*$32
26853 6F79           50                         push	ax
26854                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26855 6F7A           FF76         06            push	6[bp]
26856                                           ! Debug: func () void = write_byte+0 (used reg = )
26857 6F7D           E8         0D45            call	_write_byte
26858 6F80           89EC                       mov	sp,bp
26859                                           !BCC_EOS
26860                                           ! 3701  memsetb(ES,DI+0x33,0,13);
26861                                           ! Debug: list int = const $D (used reg = )
26862 6F82           B8                   000D  mov	ax,*$D
26863 6F85           50                         push	ax
26864                                           ! Debug: list int = const 0 (used reg = )
26865 6F86           31C0                       xor	ax,ax
26866 6F88           50                         push	ax
26867                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26868 6F89           8B46         08            mov	ax,8[bp]
26869                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26870 6F8C           05                   0033  add	ax,*$33
26871 6F8F           50                         push	ax
26872                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26873 6F90           FF76         06            push	6[bp]
26874                                           ! Debug: func () void = memsetb+0 (used reg = )
26875 6F93           E8         0C5F            call	_memsetb
26876 6F96           89EC                       mov	sp,bp
26877                                           !BCC_EOS
26878                                           ! 3702 }
26879 6F98           5D                         pop	bp
26880 6F99           C3                         ret
26881                                           ! 3703 static Bit16u biosfn_read_video_state_size2 (CX)
26882                                           ! Register BX used in function biosfn_read_state_info
26883                                           ! 3704      Bit16u CX;
26884                       00006F9A            _biosfn_read_video_state_size2:
26885                                           !BCC_EOS
26886                                           ! 3705 {
26887                                           ! 3706     Bit16u size;
26888                                           !BCC_EOS
26889                                           ! 3707     size = 0;
26890 6F9A           55                         push	bp
26891 6F9B           89E5                       mov	bp,sp
26892 6F9D           4C                         dec	sp
26893 6F9E           4C                         dec	sp
26894                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26895 6F9F           31C0                       xor	ax,ax
26896 6FA1           8946         FE            mov	-2[bp],ax
26897                                           !BCC_EOS
26898                                           ! 3708     if (CX & 1) {
26899                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26900 6FA4           8A46         04            mov	al,4[bp]
26901 6FA7           24                     01  and	al,*1
26902 6FA9           84C0                       test	al,al
26903 6FAB           74           09            je  	.244
26904                       00006FAD            .245:
26905                                           ! 3709         size += 0x46;
26906                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26907 6FAD           8B46         FE            mov	ax,-2[bp]
26908 6FB0           05                   0046  add	ax,*$46
26909 6FB3           8946         FE            mov	-2[bp],ax
26910                                           !BCC_EOS
26911                                           ! 3710     }
26912                                           ! 3711     if (CX & 2) {
26913                       00006FB6            .244:
26914                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26915 6FB6           8A46         04            mov	al,4[bp]
26916 6FB9           24                     02  and	al,*2
26917 6FBB           84C0                       test	al,al
26918 6FBD           74           09            je  	.246
26919                       00006FBF            .247:
26920                                           ! 3712         size += (5 + 8 + 5) * 2 + 6;
26921                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26922 6FBF           8B46         FE            mov	ax,-2[bp]
26923 6FC2           05                   002A  add	ax,*$2A
26924 6FC5           8946         FE            mov	-2[bp],ax
26925                                           !BCC_EOS
26926                                           ! 3713     }
26927                                           ! 3714     if (CX & 4) {
26928                       00006FC8            .246:
26929                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26930 6FC8           8A46         04            mov	al,4[bp]
26931 6FCB           24                     04  and	al,*4
26932 6FCD           84C0                       test	al,al
26933 6FCF           74           09            je  	.248
26934                       00006FD1            .249:
26935                                           ! 3715         size += 3 + 256 * 3 + 1;
26936                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26937 6FD1           8B46         FE            mov	ax,-2[bp]
26938 6FD4           05                   0304  add	ax,#$304
26939 6FD7           8946         FE            mov	-2[bp],ax
26940                                           !BCC_EOS
26941                                           ! 3716 }
26942                                           ! 3717     return size;
26943                       00006FDA            .248:
26944 6FDA           8B46         FE            mov	ax,-2[bp]
26945 6FDD           89EC                       mov	sp,bp
26946 6FDF           5D                         pop	bp
26947 6FE0           C3                         ret
26948                                           !BCC_EOS
26949                                           ! 3718 }
26950                                           ! 3719 static void biosfn_read_video_state_size (CX, BX)
26951                                           ! 3720      Bit16u CX; Bit16u *BX;
26952                       00006FE1            _biosfn_read_video_state_size:
26953                                           !BCC_EOS
26954                                           !BCC_EOS
26955                                           ! 3721 {
26956                                           ! 3721 
26957                                           ! 3722     Bit16u ss=get_SS();
26958 6FE1           55                         push	bp
26959 6FE2           89E5                       mov	bp,sp
26960 6FE4           4C                         dec	sp
26961 6FE5           4C                         dec	sp
26962                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26963 6FE6           E8         0D42            call	_get_SS
26964                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26965 6FE9           8946         FE            mov	-2[bp],ax
26966                                           !BCC_EOS
26967                                           ! 3723     write_word(ss, BX, biosfn_read_video_state_size2(CX));
26968                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
26969 6FEC           FF76         04            push	4[bp]
26970                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
26971 6FEF           E8         FFA8            call	_biosfn_read_video_state_size2
26972 6FF2           44                         inc	sp
26973 6FF3           44                         inc	sp
26974                                           ! Debug: list unsigned short = ax+0 (used reg = )
26975 6FF4           50                         push	ax
26976                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
26977 6FF5           FF76         06            push	6[bp]
26978                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26979 6FF8           FF76         FE            push	-2[bp]
26980                                           ! Debug: func () void = write_word+0 (used reg = )
26981 6FFB           E8         0CDF            call	_write_word
26982 6FFE           83C4                   06  add	sp,*6
26983                                           !BCC_EOS
26984                                           ! 3724 }
26985 7001           89EC                       mov	sp,bp
26986 7003           5D                         pop	bp
26987 7004           C3                         ret
26988                                           ! 3725 static Bit16u biosfn_save_video_state (CX,ES,BX)
26989                                           ! 3726      Bit16u CX;Bit16u ES;Bit16u BX;
26990                       00007005            _biosfn_save_video_state:
26991                                           !BCC_EOS
26992                                           !BCC_EOS
26993                                           !BCC_EOS
26994                                           ! 3727 {
26995                                           ! 3728     Bit16u i, v, crtc_addr, ar_index;
26996                                           !BCC_EOS
26997                                           ! 3729     crtc_addr = read_word(0x40, 0x63);
26998 7005           55                         push	bp
26999 7006           89E5                       mov	bp,sp
27000 7008           83C4                   F8  add	sp,*-8
27001                                           ! Debug: list int = const $63 (used reg = )
27002 700B           B8                   0063  mov	ax,*$63
27003 700E           50                         push	ax
27004                                           ! Debug: list int = const $40 (used reg = )
27005 700F           B8                   0040  mov	ax,*$40
27006 7012           50                         push	ax
27007                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27008 7013           E8         0C9C            call	_read_word
27009 7016           83C4                   04  add	sp,*4
27010                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27011 7019           8946         FA            mov	-6[bp],ax
27012                                           !BCC_EOS
27013                                           ! 3730     if (CX & 1) {
27014                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27015 701C           8A46         04            mov	al,4[bp]
27016 701F           24                     01  and	al,*1
27017 7021           84C0                       test	al,al
27018 7023   7503    E9         0266            beq 	.24A
27019                       00007028            .24B:
27020                                           ! 3731         write_byte(ES, BX, inb(0x3c4)); BX++;
27021                                           ! Debug: list int = const $3C4 (used reg = )
27022 7028           B8                   03C4  mov	ax,#$3C4
27023 702B           50                         push	ax
27024                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27025 702C           E8         0CC6            call	_inb
27026 702F           44                         inc	sp
27027 7030           44                         inc	sp
27028                                           ! Debug: list unsigned char = al+0 (used reg = )
27029 7031           30E4                       xor	ah,ah
27030 7033           50                         push	ax
27031                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27032 7034           FF76         08            push	8[bp]
27033                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27034 7037           FF76         06            push	6[bp]
27035                                           ! Debug: func () void = write_byte+0 (used reg = )
27036 703A           E8         0C88            call	_write_byte
27037 703D           83C4                   06  add	sp,*6
27038                                           !BCC_EOS
27039                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27040 7040           8B46         08            mov	ax,8[bp]
27041 7043           40                         inc	ax
27042 7044           8946         08            mov	8[bp],ax
27043                                           !BCC_EOS
27044                                           ! 3732         write_byte(ES, BX, inb(crtc_addr)); BX++;
27045                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27046 7047           FF76         FA            push	-6[bp]
27047                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27048 704A           E8         0CA8            call	_inb
27049 704D           44                         inc	sp
27050 704E           44                         inc	sp
27051                                           ! Debug: list unsigned char = al+0 (used reg = )
27052 704F           30E4                       xor	ah,ah
27053 7051           50                         push	ax
27054                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27055 7052           FF76         08            push	8[bp]
27056                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27057 7055           FF76         06            push	6[bp]
27058                                           ! Debug: func () void = write_byte+0 (used reg = )
27059 7058           E8         0C6A            call	_write_byte
27060 705B           83C4                   06  add	sp,*6
27061                                           !BCC_EOS
27062                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27063 705E           8B46         08            mov	ax,8[bp]
27064 7061           40                         inc	ax
27065 7062           8946         08            mov	8[bp],ax
27066                                           !BCC_EOS
27067                                           ! 3733         write_byte(ES, BX, inb(0x3ce)); BX++;
27068                                           ! Debug: list int = const $3CE (used reg = )
27069 7065           B8                   03CE  mov	ax,#$3CE
27070 7068           50                         push	ax
27071                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27072 7069           E8         0C89            call	_inb
27073 706C           44                         inc	sp
27074 706D           44                         inc	sp
27075                                           ! Debug: list unsigned char = al+0 (used reg = )
27076 706E           30E4                       xor	ah,ah
27077 7070           50                         push	ax
27078                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27079 7071           FF76         08            push	8[bp]
27080                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27081 7074           FF76         06            push	6[bp]
27082                                           ! Debug: func () void = write_byte+0 (used reg = )
27083 7077           E8         0C4B            call	_write_byte
27084 707A           83C4                   06  add	sp,*6
27085                                           !BCC_EOS
27086                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27087 707D           8B46         08            mov	ax,8[bp]
27088 7080           40                         inc	ax
27089 7081           8946         08            mov	8[bp],ax
27090                                           !BCC_EOS
27091                                           ! 3734         inb(0x3da);
27092                                           ! Debug: list int = const $3DA (used reg = )
27093 7084           B8                   03DA  mov	ax,#$3DA
27094 7087           50                         push	ax
27095                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27096 7088           E8         0C6A            call	_inb
27097 708B           44                         inc	sp
27098 708C           44                         inc	sp
27099                                           !BCC_EOS
27100                                           ! 3735         ar_index = inb(0x3c0);
27101                                           ! Debug: list int = const $3C0 (used reg = )
27102 708D           B8                   03C0  mov	ax,#$3C0
27103 7090           50                         push	ax
27104                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27105 7091           E8         0C61            call	_inb
27106 7094           44                         inc	sp
27107 7095           44                         inc	sp
27108                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27109 7096           30E4                       xor	ah,ah
27110 7098           8946         F8            mov	-8[bp],ax
27111                                           !BCC_EOS
27112                                           ! 3736         write_byte(ES, BX, ar_index); BX++;
27113                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27114 709B           FF76         F8            push	-8[bp]
27115                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27116 709E           FF76         08            push	8[bp]
27117                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27118 70A1           FF76         06            push	6[bp]
27119                                           ! Debug: func () void = write_byte+0 (used reg = )
27120 70A4           E8         0C1E            call	_write_byte
27121 70A7           83C4                   06  add	sp,*6
27122                                           !BCC_EOS
27123                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27124 70AA           8B46         08            mov	ax,8[bp]
27125 70AD           40                         inc	ax
27126 70AE           8946         08            mov	8[bp],ax
27127                                           !BCC_EOS
27128                                           ! 3737         write_byte(ES, BX, inb(0x3ca)); BX++;
27129                                           ! Debug: list int = const $3CA (used reg = )
27130 70B1           B8                   03CA  mov	ax,#$3CA
27131 70B4           50                         push	ax
27132                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27133 70B5           E8         0C3D            call	_inb
27134 70B8           44                         inc	sp
27135 70B9           44                         inc	sp
27136                                           ! Debug: list unsigned char = al+0 (used reg = )
27137 70BA           30E4                       xor	ah,ah
27138 70BC           50                         push	ax
27139                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27140 70BD           FF76         08            push	8[bp]
27141                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27142 70C0           FF76         06            push	6[bp]
27143                                           ! Debug: func () void = write_byte+0 (used reg = )
27144 70C3           E8         0BFF            call	_write_byte
27145 70C6           83C4                   06  add	sp,*6
27146                                           !BCC_EOS
27147                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27148 70C9           8B46         08            mov	ax,8[bp]
27149 70CC           40                         inc	ax
27150 70CD           8946         08            mov	8[bp],ax
27151                                           !BCC_EOS
27152                                           ! 3738         for(i=1;i<=4;i++){
27153                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27154 70D0           B8                   0001  mov	ax,*1
27155 70D3           8946         FE            mov	-2[bp],ax
27156                                           !BCC_EOS
27157                                           !BCC_EOS
27158 70D6           EB           33            jmp .24E
27159                       000070D8            .24F:
27160                                           ! 3739             outb(0x3c4, i);
27161                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27162 70D8           FF76         FE            push	-2[bp]
27163                                           ! Debug: list int = const $3C4 (used reg = )
27164 70DB           B8                   03C4  mov	ax,#$3C4
27165 70DE           50                         push	ax
27166                                           ! Debug: func () void = outb+0 (used reg = )
27167 70DF           E8         0C29            call	_outb
27168 70E2           83C4                   04  add	sp,*4
27169                                           !BCC_EOS
27170                                           ! 3740             write_byte(ES, BX, inb(0x3c5)); BX++;
27171                                           ! Debug: list int = const $3C5 (used reg = )
27172 70E5           B8                   03C5  mov	ax,#$3C5
27173 70E8           50                         push	ax
27174                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27175 70E9           E8         0C09            call	_inb
27176 70EC           44                         inc	sp
27177 70ED           44                         inc	sp
27178                                           ! Debug: list unsigned char = al+0 (used reg = )
27179 70EE           30E4                       xor	ah,ah
27180 70F0           50                         push	ax
27181                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27182 70F1           FF76         08            push	8[bp]
27183                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27184 70F4           FF76         06            push	6[bp]
27185                                           ! Debug: func () void = write_byte+0 (used reg = )
27186 70F7           E8         0BCB            call	_write_byte
27187 70FA           83C4                   06  add	sp,*6
27188                                           !BCC_EOS
27189                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27190 70FD           8B46         08            mov	ax,8[bp]
27191 7100           40                         inc	ax
27192 7101           8946         08            mov	8[bp],ax
27193                                           !BCC_EOS
27194                                           ! 3741         }
27195                                           ! 3742         outb(0x3c4, 0);
27196                       00007104            .24D:
27197                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27198 7104           8B46         FE            mov	ax,-2[bp]
27199 7107           40                         inc	ax
27200 7108           8946         FE            mov	-2[bp],ax
27201                       0000710B            .24E:
27202                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27203 710B           8B46         FE            mov	ax,-2[bp]
27204 710E           3D                   0004  cmp	ax,*4
27205 7111           76           C5            jbe	.24F
27206                       00007113            .250:
27207                       00007113            .24C:
27208                                           ! Debug: list int = const 0 (used reg = )
27209 7113           31C0                       xor	ax,ax
27210 7115           50                         push	ax
27211                                           ! Debug: list int = const $3C4 (used reg = )
27212 7116           B8                   03C4  mov	ax,#$3C4
27213 7119           50                         push	ax
27214                                           ! Debug: func () void = outb+0 (used reg = )
27215 711A           E8         0BEE            call	_outb
27216 711D           83C4                   04  add	sp,*4
27217                                           !BCC_EOS
27218                                           ! 3743         write_byte(ES, BX, inb(0x3c5)); BX++;
27219                                           ! Debug: list int = const $3C5 (used reg = )
27220 7120           B8                   03C5  mov	ax,#$3C5
27221 7123           50                         push	ax
27222                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27223 7124           E8         0BCE            call	_inb
27224 7127           44                         inc	sp
27225 7128           44                         inc	sp
27226                                           ! Debug: list unsigned char = al+0 (used reg = )
27227 7129           30E4                       xor	ah,ah
27228 712B           50                         push	ax
27229                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27230 712C           FF76         08            push	8[bp]
27231                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27232 712F           FF76         06            push	6[bp]
27233                                           ! Debug: func () void = write_byte+0 (used reg = )
27234 7132           E8         0B90            call	_write_byte
27235 7135           83C4                   06  add	sp,*6
27236                                           !BCC_EOS
27237                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27238 7138           8B46         08            mov	ax,8[bp]
27239 713B           40                         inc	ax
27240 713C           8946         08            mov	8[bp],ax
27241                                           !BCC_EOS
27242                                           ! 3744         for(i=0;i<=0x18;i++) {
27243                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27244 713F           31C0                       xor	ax,ax
27245 7141           8946         FE            mov	-2[bp],ax
27246                                           !BCC_EOS
27247                                           !BCC_EOS
27248 7144           EB           33            jmp .253
27249                       00007146            .254:
27250                                           ! 3745             outb(crtc_addr,i);
27251                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27252 7146           FF76         FE            push	-2[bp]
27253                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27254 7149           FF76         FA            push	-6[bp]
27255                                           ! Debug: func () void = outb+0 (used reg = )
27256 714C           E8         0BBC            call	_outb
27257 714F           83C4                   04  add	sp,*4
27258                                           !BCC_EOS
27259                                           ! 3746             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27260                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27261 7152           8B46         FA            mov	ax,-6[bp]
27262                                           ! Debug: list unsigned int = ax+1 (used reg = )
27263 7155           40                         inc	ax
27264 7156           50                         push	ax
27265                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27266 7157           E8         0B9B            call	_inb
27267 715A           44                         inc	sp
27268 715B           44                         inc	sp
27269                                           ! Debug: list unsigned char = al+0 (used reg = )
27270 715C           30E4                       xor	ah,ah
27271 715E           50                         push	ax
27272                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27273 715F           FF76         08            push	8[bp]
27274                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27275 7162           FF76         06            push	6[bp]
27276                                           ! Debug: func () void = write_byte+0 (used reg = )
27277 7165           E8         0B5D            call	_write_byte
27278 7168           83C4                   06  add	sp,*6
27279                                           !BCC_EOS
27280                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27281 716B           8B46         08            mov	ax,8[bp]
27282 716E           40                         inc	ax
27283 716F           8946         08            mov	8[bp],ax
27284                                           !BCC_EOS
27285                                           ! 3747         }
27286                                           ! 3748         for(i=0;i<=0x13;i++) {
27287                       00007172            .252:
27288                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27289 7172           8B46         FE            mov	ax,-2[bp]
27290 7175           40                         inc	ax
27291 7176           8946         FE            mov	-2[bp],ax
27292                       00007179            .253:
27293                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27294 7179           8B46         FE            mov	ax,-2[bp]
27295 717C           3D                   0018  cmp	ax,*$18
27296 717F           76           C5            jbe	.254
27297                       00007181            .255:
27298                       00007181            .251:
27299                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27300 7181           31C0                       xor	ax,ax
27301 7183           8946         FE            mov	-2[bp],ax
27302                                           !BCC_EOS
27303                                           !BCC_EOS
27304 7186           EB           44            jmp .258
27305                       00007188            .259:
27306                                           ! 3749             inb(0x3da);
27307                                           ! Debug: list int = const $3DA (used reg = )
27308 7188           B8                   03DA  mov	ax,#$3DA
27309 718B           50                         push	ax
27310                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27311 718C           E8         0B66            call	_inb
27312 718F           44                         inc	sp
27313 7190           44                         inc	sp
27314                                           !BCC_EOS
27315                                           ! 3750             outb(0x3c0, i | (ar_index & 0x20));
27316                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27317 7191           8A46         F8            mov	al,-8[bp]
27318 7194           24                     20  and	al,*$20
27319                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27320                                           ! Debug: expression subtree swapping
27321 7196           30E4                       xor	ah,ah
27322 7198           0B46         FE            or	ax,-2[bp]
27323                                           ! Debug: list unsigned int = ax+0 (used reg = )
27324 719B           50                         push	ax
27325                                           ! Debug: list int = const $3C0 (used reg = )
27326 719C           B8                   03C0  mov	ax,#$3C0
27327 719F           50                         push	ax
27328                                           ! Debug: func () void = outb+0 (used reg = )
27329 71A0           E8         0B68            call	_outb
27330 71A3           83C4                   04  add	sp,*4
27331                                           !BCC_EOS
27332                                           ! 3751             write_byte(ES, BX, inb(0x3c1)); BX++;
27333                                           ! Debug: list int = const $3C1 (used reg = )
27334 71A6           B8                   03C1  mov	ax,#$3C1
27335 71A9           50                         push	ax
27336                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27337 71AA           E8         0B48            call	_inb
27338 71AD           44                         inc	sp
27339 71AE           44                         inc	sp
27340                                           ! Debug: list unsigned char = al+0 (used reg = )
27341 71AF           30E4                       xor	ah,ah
27342 71B1           50                         push	ax
27343                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27344 71B2           FF76         08            push	8[bp]
27345                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27346 71B5           FF76         06            push	6[bp]
27347                                           ! Debug: func () void = write_byte+0 (used reg = )
27348 71B8           E8         0B0A            call	_write_byte
27349 71BB           83C4                   06  add	sp,*6
27350                                           !BCC_EOS
27351                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27352 71BE           8B46         08            mov	ax,8[bp]
27353 71C1           40                         inc	ax
27354 71C2           8946         08            mov	8[bp],ax
27355                                           !BCC_EOS
27356                                           ! 3752         }
27357                                           ! 3753         inb(0x3da);
27358                       000071C5            .257:
27359                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27360 71C5           8B46         FE            mov	ax,-2[bp]
27361 71C8           40                         inc	ax
27362 71C9           8946         FE            mov	-2[bp],ax
27363                       000071CC            .258:
27364                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27365 71CC           8B46         FE            mov	ax,-2[bp]
27366 71CF           3D                   0013  cmp	ax,*$13
27367 71D2           76           B4            jbe	.259
27368                       000071D4            .25A:
27369                       000071D4            .256:
27370                                           ! Debug: list int = const $3DA (used reg = )
27371 71D4           B8                   03DA  mov	ax,#$3DA
27372 71D7           50                         push	ax
27373                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27374 71D8           E8         0B1A            call	_inb
27375 71DB           44                         inc	sp
27376 71DC           44                         inc	sp
27377                                           !BCC_EOS
27378                                           ! 3754         for(i=0;i<=8;i++) {
27379                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27380 71DD           31C0                       xor	ax,ax
27381 71DF           8946         FE            mov	-2[bp],ax
27382                                           !BCC_EOS
27383                                           !BCC_EOS
27384 71E2           EB           33            jmp .25D
27385                       000071E4            .25E:
27386                                           ! 3755             outb(0x3ce,i);
27387                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27388 71E4           FF76         FE            push	-2[bp]
27389                                           ! Debug: list int = const $3CE (used reg = )
27390 71E7           B8                   03CE  mov	ax,#$3CE
27391 71EA           50                         push	ax
27392                                           ! Debug: func () void = outb+0 (used reg = )
27393 71EB           E8         0B1D            call	_outb
27394 71EE           83C4                   04  add	sp,*4
27395                                           !BCC_EOS
27396                                           ! 3756             write_byte(ES, BX, inb(0x3cf)); BX++;
27397                                           ! Debug: list int = const $3CF (used reg = )
27398 71F1           B8                   03CF  mov	ax,#$3CF
27399 71F4           50                         push	ax
27400                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27401 71F5           E8         0AFD            call	_inb
27402 71F8           44                         inc	sp
27403 71F9           44                         inc	sp
27404                                           ! Debug: list unsigned char = al+0 (used reg = )
27405 71FA           30E4                       xor	ah,ah
27406 71FC           50                         push	ax
27407                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27408 71FD           FF76         08            push	8[bp]
27409                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27410 7200           FF76         06            push	6[bp]
27411                                           ! Debug: func () void = write_byte+0 (used reg = )
27412 7203           E8         0ABF            call	_write_byte
27413 7206           83C4                   06  add	sp,*6
27414                                           !BCC_EOS
27415                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27416 7209           8B46         08            mov	ax,8[bp]
27417 720C           40                         inc	ax
27418 720D           8946         08            mov	8[bp],ax
27419                                           !BCC_EOS
27420                                           ! 3757         }
27421                                           ! 3758         write_word(ES, BX, crtc_addr); BX+= 2;
27422                       00007210            .25C:
27423                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27424 7210           8B46         FE            mov	ax,-2[bp]
27425 7213           40                         inc	ax
27426 7214           8946         FE            mov	-2[bp],ax
27427                       00007217            .25D:
27428                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27429 7217           8B46         FE            mov	ax,-2[bp]
27430 721A           3D                   0008  cmp	ax,*8
27431 721D           76           C5            jbe	.25E
27432                       0000721F            .25F:
27433                       0000721F            .25B:
27434                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27435 721F           FF76         FA            push	-6[bp]
27436                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27437 7222           FF76         08            push	8[bp]
27438                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27439 7225           FF76         06            push	6[bp]
27440                                           ! Debug: func () void = write_word+0 (used reg = )
27441 7228           E8         0AB2            call	_write_word
27442 722B           83C4                   06  add	sp,*6
27443                                           !BCC_EOS
27444                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27445 722E           8B46         08            mov	ax,8[bp]
27446 7231           40                         inc	ax
27447 7232           40                         inc	ax
27448 7233           8946         08            mov	8[bp],ax
27449                                           !BCC_EOS
27450                                           ! 3759         write_byte(ES, BX, 0); BX++;
27451                                           ! Debug: list int = const 0 (used reg = )
27452 7236           31C0                       xor	ax,ax
27453 7238           50                         push	ax
27454                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27455 7239           FF76         08            push	8[bp]
27456                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27457 723C           FF76         06            push	6[bp]
27458                                           ! Debug: func () void = write_byte+0 (used reg = )
27459 723F           E8         0A83            call	_write_byte
27460 7242           83C4                   06  add	sp,*6
27461                                           !BCC_EOS
27462                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27463 7245           8B46         08            mov	ax,8[bp]
27464 7248           40                         inc	ax
27465 7249           8946         08            mov	8[bp],ax
27466                                           !BCC_EOS
27467                                           ! 3760         write_byte(ES, BX, 0); BX++;
27468                                           ! Debug: list int = const 0 (used reg = )
27469 724C           31C0                       xor	ax,ax
27470 724E           50                         push	ax
27471                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27472 724F           FF76         08            push	8[bp]
27473                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27474 7252           FF76         06            push	6[bp]
27475                                           ! Debug: func () void = write_byte+0 (used reg = )
27476 7255           E8         0A6D            call	_write_byte
27477 7258           83C4                   06  add	sp,*6
27478                                           !BCC_EOS
27479                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27480 725B           8B46         08            mov	ax,8[bp]
27481 725E           40                         inc	ax
27482 725F           8946         08            mov	8[bp],ax
27483                                           !BCC_EOS
27484                                           ! 3761         write_byte(ES, BX, 0); BX++;
27485                                           ! Debug: list int = const 0 (used reg = )
27486 7262           31C0                       xor	ax,ax
27487 7264           50                         push	ax
27488                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27489 7265           FF76         08            push	8[bp]
27490                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27491 7268           FF76         06            push	6[bp]
27492                                           ! Debug: func () void = write_byte+0 (used reg = )
27493 726B           E8         0A57            call	_write_byte
27494 726E           83C4                   06  add	sp,*6
27495                                           !BCC_EOS
27496                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27497 7271           8B46         08            mov	ax,8[bp]
27498 7274           40                         inc	ax
27499 7275           8946         08            mov	8[bp],ax
27500                                           !BCC_EOS
27501                                           ! 3762         write_byte(ES, BX, 0); BX++;
27502                                           ! Debug: list int = const 0 (used reg = )
27503 7278           31C0                       xor	ax,ax
27504 727A           50                         push	ax
27505                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27506 727B           FF76         08            push	8[bp]
27507                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27508 727E           FF76         06            push	6[bp]
27509                                           ! Debug: func () void = write_byte+0 (used reg = )
27510 7281           E8         0A41            call	_write_byte
27511 7284           83C4                   06  add	sp,*6
27512                                           !BCC_EOS
27513                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27514 7287           8B46         08            mov	ax,8[bp]
27515 728A           40                         inc	ax
27516 728B           8946         08            mov	8[bp],ax
27517                                           !BCC_EOS
27518                                           ! 3763     }
27519                                           ! 3764     if (CX & 2) {
27520                       0000728E            .24A:
27521                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27522 728E           8A46         04            mov	al,4[bp]
27523 7291           24                     02  and	al,*2
27524 7293           84C0                       test	al,al
27525 7295   7503    E9         0270            beq 	.260
27526                       0000729A            .261:
27527                                           ! 3765         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27528                                           ! Debug: list int = const $49 (used reg = )
27529 729A           B8                   0049  mov	ax,*$49
27530 729D           50                         push	ax
27531                                           ! Debug: list int = const $40 (used reg = )
27532 729E           B8                   0040  mov	ax,*$40
27533 72A1           50                         push	ax
27534                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27535 72A2           E8         09FA            call	_read_byte
27536 72A5           83C4                   04  add	sp,*4
27537                                           ! Debug: list unsigned char = al+0 (used reg = )
27538 72A8           30E4                       xor	ah,ah
27539 72AA           50                         push	ax
27540                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27541 72AB           FF76         08            push	8[bp]
27542                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27543 72AE           FF76         06            push	6[bp]
27544                                           ! Debug: func () void = write_byte+0 (used reg = )
27545 72B1           E8         0A11            call	_write_byte
27546 72B4           83C4                   06  add	sp,*6
27547                                           !BCC_EOS
27548                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27549 72B7           8B46         08            mov	ax,8[bp]
27550 72BA           40                         inc	ax
27551 72BB           8946         08            mov	8[bp],ax
27552                                           !BCC_EOS
27553                                           ! 3766         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27554                                           ! Debug: list int = const $4A (used reg = )
27555 72BE           B8                   004A  mov	ax,*$4A
27556 72C1           50                         push	ax
27557                                           ! Debug: list int = const $40 (used reg = )
27558 72C2           B8                   0040  mov	ax,*$40
27559 72C5           50                         push	ax
27560                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27561 72C6           E8         09E9            call	_read_word
27562 72C9           83C4                   04  add	sp,*4
27563                                           ! Debug: list unsigned short = ax+0 (used reg = )
27564 72CC           50                         push	ax
27565                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27566 72CD           FF76         08            push	8[bp]
27567                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27568 72D0           FF76         06            push	6[bp]
27569                                           ! Debug: func () void = write_word+0 (used reg = )
27570 72D3           E8         0A07            call	_write_word
27571 72D6           83C4                   06  add	sp,*6
27572                                           !BCC_EOS
27573                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27574 72D9           8B46         08            mov	ax,8[bp]
27575 72DC           40                         inc	ax
27576 72DD           40                         inc	ax
27577 72DE           8946         08            mov	8[bp],ax
27578                                           !BCC_EOS
27579                                           ! 3767         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27580                                           ! Debug: list int = const $4C (used reg = )
27581 72E1           B8                   004C  mov	ax,*$4C
27582 72E4           50                         push	ax
27583                                           ! Debug: list int = const $40 (used reg = )
27584 72E5           B8                   0040  mov	ax,*$40
27585 72E8           50                         push	ax
27586                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27587 72E9           E8         09C6            call	_read_word
27588 72EC           83C4                   04  add	sp,*4
27589                                           ! Debug: list unsigned short = ax+0 (used reg = )
27590 72EF           50                         push	ax
27591                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27592 72F0           FF76         08            push	8[bp]
27593                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27594 72F3           FF76         06            push	6[bp]
27595                                           ! Debug: func () void = write_word+0 (used reg = )
27596 72F6           E8         09E4            call	_write_word
27597 72F9           83C4                   06  add	sp,*6
27598                                           !BCC_EOS
27599                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27600 72FC           8B46         08            mov	ax,8[bp]
27601 72FF           40                         inc	ax
27602 7300           40                         inc	ax
27603 7301           8946         08            mov	8[bp],ax
27604                                           !BCC_EOS
27605                                           ! 3768         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27606                                           ! Debug: list int = const $63 (used reg = )
27607 7304           B8                   0063  mov	ax,*$63
27608 7307           50                         push	ax
27609                                           ! Debug: list int = const $40 (used reg = )
27610 7308           B8                   0040  mov	ax,*$40
27611 730B           50                         push	ax
27612                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27613 730C           E8         09A3            call	_read_word
27614 730F           83C4                   04  add	sp,*4
27615                                           ! Debug: list unsigned short = ax+0 (used reg = )
27616 7312           50                         push	ax
27617                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27618 7313           FF76         08            push	8[bp]
27619                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27620 7316           FF76         06            push	6[bp]
27621                                           ! Debug: func () void = write_word+0 (used reg = )
27622 7319           E8         09C1            call	_write_word
27623 731C           83C4                   06  add	sp,*6
27624                                           !BCC_EOS
27625                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27626 731F           8B46         08            mov	ax,8[bp]
27627 7322           40                         inc	ax
27628 7323           40                         inc	ax
27629 7324           8946         08            mov	8[bp],ax
27630                                           !BCC_EOS
27631                                           ! 3769         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27632                                           ! Debug: list int = const $84 (used reg = )
27633 7327           B8                   0084  mov	ax,#$84
27634 732A           50                         push	ax
27635                                           ! Debug: list int = const $40 (used reg = )
27636 732B           B8                   0040  mov	ax,*$40
27637 732E           50                         push	ax
27638                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27639 732F           E8         096D            call	_read_byte
27640 7332           83C4                   04  add	sp,*4
27641                                           ! Debug: list unsigned char = al+0 (used reg = )
27642 7335           30E4                       xor	ah,ah
27643 7337           50                         push	ax
27644                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27645 7338           FF76         08            push	8[bp]
27646                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27647 733B           FF76         06            push	6[bp]
27648                                           ! Debug: func () void = write_byte+0 (used reg = )
27649 733E           E8         0984            call	_write_byte
27650 7341           83C4                   06  add	sp,*6
27651                                           !BCC_EOS
27652                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27653 7344           8B46         08            mov	ax,8[bp]
27654 7347           40                         inc	ax
27655 7348           8946         08            mov	8[bp],ax
27656                                           !BCC_EOS
27657                                           ! 3770         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27658                                           ! Debug: list int = const $85 (used reg = )
27659 734B           B8                   0085  mov	ax,#$85
27660 734E           50                         push	ax
27661                                           ! Debug: list int = const $40 (used reg = )
27662 734F           B8                   0040  mov	ax,*$40
27663 7352           50                         push	ax
27664                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27665 7353           E8         095C            call	_read_word
27666 7356           83C4                   04  add	sp,*4
27667                                           ! Debug: list unsigned short = ax+0 (used reg = )
27668 7359           50                         push	ax
27669                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27670 735A           FF76         08            push	8[bp]
27671                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27672 735D           FF76         06            push	6[bp]
27673                                           ! Debug: func () void = write_word+0 (used reg = )
27674 7360           E8         097A            call	_write_word
27675 7363           83C4                   06  add	sp,*6
27676                                           !BCC_EOS
27677                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27678 7366           8B46         08            mov	ax,8[bp]
27679 7369           40                         inc	ax
27680 736A           40                         inc	ax
27681 736B           8946         08            mov	8[bp],ax
27682                                           !BCC_EOS
27683                                           ! 3771         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27684                                           ! Debug: list int = const $87 (used reg = )
27685 736E           B8                   0087  mov	ax,#$87
27686 7371           50                         push	ax
27687                                           ! Debug: list int = const $40 (used reg = )
27688 7372           B8                   0040  mov	ax,*$40
27689 7375           50                         push	ax
27690                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27691 7376           E8         0926            call	_read_byte
27692 7379           83C4                   04  add	sp,*4
27693                                           ! Debug: list unsigned char = al+0 (used reg = )
27694 737C           30E4                       xor	ah,ah
27695 737E           50                         push	ax
27696                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27697 737F           FF76         08            push	8[bp]
27698                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27699 7382           FF76         06            push	6[bp]
27700                                           ! Debug: func () void = write_byte+0 (used reg = )
27701 7385           E8         093D            call	_write_byte
27702 7388           83C4                   06  add	sp,*6
27703                                           !BCC_EOS
27704                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27705 738B           8B46         08            mov	ax,8[bp]
27706 738E           40                         inc	ax
27707 738F           8946         08            mov	8[bp],ax
27708                                           !BCC_EOS
27709                                           ! 3772         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27710                                           ! Debug: list int = const $88 (used reg = )
27711 7392           B8                   0088  mov	ax,#$88
27712 7395           50                         push	ax
27713                                           ! Debug: list int = const $40 (used reg = )
27714 7396           B8                   0040  mov	ax,*$40
27715 7399           50                         push	ax
27716                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27717 739A           E8         0902            call	_read_byte
27718 739D           83C4                   04  add	sp,*4
27719                                           ! Debug: list unsigned char = al+0 (used reg = )
27720 73A0           30E4                       xor	ah,ah
27721 73A2           50                         push	ax
27722                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27723 73A3           FF76         08            push	8[bp]
27724                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27725 73A6           FF76         06            push	6[bp]
27726                                           ! Debug: func () void = write_byte+0 (used reg = )
27727 73A9           E8         0919            call	_write_byte
27728 73AC           83C4                   06  add	sp,*6
27729                                           !BCC_EOS
27730                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27731 73AF           8B46         08            mov	ax,8[bp]
27732 73B2           40                         inc	ax
27733 73B3           8946         08            mov	8[bp],ax
27734                                           !BCC_EOS
27735                                           ! 3773         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27736                                           ! Debug: list int = const $89 (used reg = )
27737 73B6           B8                   0089  mov	ax,#$89
27738 73B9           50                         push	ax
27739                                           ! Debug: list int = const $40 (used reg = )
27740 73BA           B8                   0040  mov	ax,*$40
27741 73BD           50                         push	ax
27742                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27743 73BE           E8         08DE            call	_read_byte
27744 73C1           83C4                   04  add	sp,*4
27745                                           ! Debug: list unsigned char = al+0 (used reg = )
27746 73C4           30E4                       xor	ah,ah
27747 73C6           50                         push	ax
27748                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27749 73C7           FF76         08            push	8[bp]
27750                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27751 73CA           FF76         06            push	6[bp]
27752                                           ! Debug: func () void = write_byte+0 (used reg = )
27753 73CD           E8         08F5            call	_write_byte
27754 73D0           83C4                   06  add	sp,*6
27755                                           !BCC_EOS
27756                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27757 73D3           8B46         08            mov	ax,8[bp]
27758 73D6           40                         inc	ax
27759 73D7           8946         08            mov	8[bp],ax
27760                                           !BCC_EOS
27761                                           ! 3774         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27762                                           ! Debug: list int = const $60 (used reg = )
27763 73DA           B8                   0060  mov	ax,*$60
27764 73DD           50                         push	ax
27765                                           ! Debug: list int = const $40 (used reg = )
27766 73DE           B8                   0040  mov	ax,*$40
27767 73E1           50                         push	ax
27768                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27769 73E2           E8         08CD            call	_read_word
27770 73E5           83C4                   04  add	sp,*4
27771                                           ! Debug: list unsigned short = ax+0 (used reg = )
27772 73E8           50                         push	ax
27773                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27774 73E9           FF76         08            push	8[bp]
27775                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27776 73EC           FF76         06            push	6[bp]
27777                                           ! Debug: func () void = write_word+0 (used reg = )
27778 73EF           E8         08EB            call	_write_word
27779 73F2           83C4                   06  add	sp,*6
27780                                           !BCC_EOS
27781                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27782 73F5           8B46         08            mov	ax,8[bp]
27783 73F8           40                         inc	ax
27784 73F9           40                         inc	ax
27785 73FA           8946         08            mov	8[bp],ax
27786                                           !BCC_EOS
27787                                           ! 3775         for(i=0;i<8;i++) {
27788                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27789 73FD           31C0                       xor	ax,ax
27790 73FF           8946         FE            mov	-2[bp],ax
27791                                           !BCC_EOS
27792                                           !BCC_EOS
27793 7402           EB           2F            jmp .264
27794                       00007404            .265:
27795                                           ! 3776             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27796                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27797                                           ! Debug: expression subtree swapping
27798 7404           8B46         FE            mov	ax,-2[bp]
27799 7407           D1E0                       shl	ax,*1
27800                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27801                                           ! Debug: expression subtree swapping
27802                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27803 7409           05                   0050  add	ax,*$50
27804 740C           50                         push	ax
27805                                           ! Debug: list int = const $40 (used reg = )
27806 740D           B8                   0040  mov	ax,*$40
27807 7410           50                         push	ax
27808                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27809 7411           E8         089E            call	_read_word
27810 7414           83C4                   04  add	sp,*4
27811                                           ! Debug: list unsigned short = ax+0 (used reg = )
27812 7417           50                         push	ax
27813                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27814 7418           FF76         08            push	8[bp]
27815                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27816 741B           FF76         06            push	6[bp]
27817                                           ! Debug: func () void = write_word+0 (used reg = )
27818 741E           E8         08BC            call	_write_word
27819 7421           83C4                   06  add	sp,*6
27820                                           !BCC_EOS
27821                                           ! 3777      
27822                                           ! 3777        BX += 2;
27823                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27824 7424           8B46         08            mov	ax,8[bp]
27825 7427           40                         inc	ax
27826 7428           40                         inc	ax
27827 7429           8946         08            mov	8[bp],ax
27828                                           !BCC_EOS
27829                                           ! 3778         }
27830                                           ! 3779         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27831                       0000742C            .263:
27832                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27833 742C           8B46         FE            mov	ax,-2[bp]
27834 742F           40                         inc	ax
27835 7430           8946         FE            mov	-2[bp],ax
27836                       00007433            .264:
27837                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27838 7433           8B46         FE            mov	ax,-2[bp]
27839 7436           3D                   0008  cmp	ax,*8
27840 7439           72           C9            jb 	.265
27841                       0000743B            .266:
27842                       0000743B            .262:
27843                                           ! Debug: list int = const $4E (used reg = )
27844 743B           B8                   004E  mov	ax,*$4E
27845 743E           50                         push	ax
27846                                           ! Debug: list int = const $40 (used reg = )
27847 743F           B8                   0040  mov	ax,*$40
27848 7442           50                         push	ax
27849                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27850 7443           E8         086C            call	_read_word
27851 7446           83C4                   04  add	sp,*4
27852                                           ! Debug: list unsigned short = ax+0 (used reg = )
27853 7449           50                         push	ax
27854                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27855 744A           FF76         08            push	8[bp]
27856                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27857 744D           FF76         06            push	6[bp]
27858                                           ! Debug: func () void = write_word+0 (used reg = )
27859 7450           E8         088A            call	_write_word
27860 7453           83C4                   06  add	sp,*6
27861                                           !BCC_EOS
27862                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27863 7456           8B46         08            mov	ax,8[bp]
27864 7459           40                         inc	ax
27865 745A           40                         inc	ax
27866 745B           8946         08            mov	8[bp],ax
27867                                           !BCC_EOS
27868                                           ! 3780         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27869                                           ! Debug: list int = const $62 (used reg = )
27870 745E           B8                   0062  mov	ax,*$62
27871 7461           50                         push	ax
27872                                           ! Debug: list int = const $40 (used reg = )
27873 7462           B8                   0040  mov	ax,*$40
27874 7465           50                         push	ax
27875                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27876 7466           E8         0836            call	_read_byte
27877 7469           83C4                   04  add	sp,*4
27878                                           ! Debug: list unsigned char = al+0 (used reg = )
27879 746C           30E4                       xor	ah,ah
27880 746E           50                         push	ax
27881                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27882 746F           FF76         08            push	8[bp]
27883                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27884 7472           FF76         06            push	6[bp]
27885                                           ! Debug: func () void = write_byte+0 (used reg = )
27886 7475           E8         084D            call	_write_byte
27887 7478           83C4                   06  add	sp,*6
27888                                           !BCC_EOS
27889                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27890 747B           8B46         08            mov	ax,8[bp]
27891 747E           40                         inc	ax
27892 747F           8946         08            mov	8[bp],ax
27893                                           !BCC_EOS
27894                                           ! 3781         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27895                                           ! Debug: list int = const $7C (used reg = )
27896 7482           B8                   007C  mov	ax,*$7C
27897 7485           50                         push	ax
27898                                           ! Debug: list int = const 0 (used reg = )
27899 7486           31C0                       xor	ax,ax
27900 7488           50                         push	ax
27901                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27902 7489           E8         0826            call	_read_word
27903 748C           83C4                   04  add	sp,*4
27904                                           ! Debug: list unsigned short = ax+0 (used reg = )
27905 748F           50                         push	ax
27906                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27907 7490           FF76         08            push	8[bp]
27908                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27909 7493           FF76         06            push	6[bp]
27910                                           ! Debug: func () void = write_word+0 (used reg = )
27911 7496           E8         0844            call	_write_word
27912 7499           83C4                   06  add	sp,*6
27913                                           !BCC_EOS
27914                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27915 749C           8B46         08            mov	ax,8[bp]
27916 749F           40                         inc	ax
27917 74A0           40                         inc	ax
27918 74A1           8946         08            mov	8[bp],ax
27919                                           !BCC_EOS
27920                                           ! 3782         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27921                                           ! Debug: list int = const $7E (used reg = )
27922 74A4           B8                   007E  mov	ax,*$7E
27923 74A7           50                         push	ax
27924                                           ! Debug: list int = const 0 (used reg = )
27925 74A8           31C0                       xor	ax,ax
27926 74AA           50                         push	ax
27927                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27928 74AB           E8         0804            call	_read_word
27929 74AE           83C4                   04  add	sp,*4
27930                                           ! Debug: list unsigned short = ax+0 (used reg = )
27931 74B1           50                         push	ax
27932                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27933 74B2           FF76         08            push	8[bp]
27934                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27935 74B5           FF76         06            push	6[bp]
27936                                           ! Debug: func () void = write_word+0 (used reg = )
27937 74B8           E8         0822            call	_write_word
27938 74BB           83C4                   06  add	sp,*6
27939                                           !BCC_EOS
27940                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27941 74BE           8B46         08            mov	ax,8[bp]
27942 74C1           40                         inc	ax
27943 74C2           40                         inc	ax
27944 74C3           8946         08            mov	8[bp],ax
27945                                           !BCC_EOS
27946                                           ! 3783         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
27947                                           ! Debug: list int = const $10C (used reg = )
27948 74C6           B8                   010C  mov	ax,#$10C
27949 74C9           50                         push	ax
27950                                           ! Debug: list int = const 0 (used reg = )
27951 74CA           31C0                       xor	ax,ax
27952 74CC           50                         push	ax
27953                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27954 74CD           E8         07E2            call	_read_word
27955 74D0           83C4                   04  add	sp,*4
27956                                           ! Debug: list unsigned short = ax+0 (used reg = )
27957 74D3           50                         push	ax
27958                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27959 74D4           FF76         08            push	8[bp]
27960                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27961 74D7           FF76         06            push	6[bp]
27962                                           ! Debug: func () void = write_word+0 (used reg = )
27963 74DA           E8         0800            call	_write_word
27964 74DD           83C4                   06  add	sp,*6
27965                                           !BCC_EOS
27966                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27967 74E0           8B46         08            mov	ax,8[bp]
27968 74E3           40                         inc	ax
27969 74E4           40                         inc	ax
27970 74E5           8946         08            mov	8[bp],ax
27971                                           !BCC_EOS
27972                                           ! 3784         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
27973                                           ! Debug: list int = const $10E (used reg = )
27974 74E8           B8                   010E  mov	ax,#$10E
27975 74EB           50                         push	ax
27976                                           ! Debug: list int = const 0 (used reg = )
27977 74EC           31C0                       xor	ax,ax
27978 74EE           50                         push	ax
27979                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27980 74EF           E8         07C0            call	_read_word
27981 74F2           83C4                   04  add	sp,*4
27982                                           ! Debug: list unsigned short = ax+0 (used reg = )
27983 74F5           50                         push	ax
27984                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27985 74F6           FF76         08            push	8[bp]
27986                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27987 74F9           FF76         06            push	6[bp]
27988                                           ! Debug: func () void = write_word+0 (used reg = )
27989 74FC           E8         07DE            call	_write_word
27990 74FF           83C4                   06  add	sp,*6
27991                                           !BCC_EOS
27992                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27993 7502           8B46         08            mov	ax,8[bp]
27994 7505           40                         inc	ax
27995 7506           40                         inc	ax
27996 7507           8946         08            mov	8[bp],ax
27997                                           !BCC_EOS
27998                                           ! 3785     }
27999                                           ! 3786     if (CX & 4) {
28000                       0000750A            .260:
28001                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28002 750A           8A46         04            mov	al,4[bp]
28003 750D           24                     04  and	al,*4
28004 750F           84C0                       test	al,al
28005 7511   7503    E9         00B5            beq 	.267
28006                       00007516            .268:
28007                                           ! 3787         write_byte(ES, BX, inb(0x3c7)); BX++;
28008                                           ! Debug: list int = const $3C7 (used reg = )
28009 7516           B8                   03C7  mov	ax,#$3C7
28010 7519           50                         push	ax
28011                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28012 751A           E8         07D8            call	_inb
28013 751D           44                         inc	sp
28014 751E           44                         inc	sp
28015                                           ! Debug: list unsigned char = al+0 (used reg = )
28016 751F           30E4                       xor	ah,ah
28017 7521           50                         push	ax
28018                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28019 7522           FF76         08            push	8[bp]
28020                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28021 7525           FF76         06            push	6[bp]
28022                                           ! Debug: func () void = write_byte+0 (used reg = )
28023 7528           E8         079A            call	_write_byte
28024 752B           83C4                   06  add	sp,*6
28025                                           !BCC_EOS
28026                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28027 752E           8B46         08            mov	ax,8[bp]
28028 7531           40                         inc	ax
28029 7532           8946         08            mov	8[bp],ax
28030                                           !BCC_EOS
28031                                           ! 3788         write_byte(ES, BX, inb(0x3c8)); BX++;
28032                                           ! Debug: list int = const $3C8 (used reg = )
28033 7535           B8                   03C8  mov	ax,#$3C8
28034 7538           50                         push	ax
28035                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28036 7539           E8         07B9            call	_inb
28037 753C           44                         inc	sp
28038 753D           44                         inc	sp
28039                                           ! Debug: list unsigned char = al+0 (used reg = )
28040 753E           30E4                       xor	ah,ah
28041 7540           50                         push	ax
28042                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28043 7541           FF76         08            push	8[bp]
28044                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28045 7544           FF76         06            push	6[bp]
28046                                           ! Debug: func () void = write_byte+0 (used reg = )
28047 7547           E8         077B            call	_write_byte
28048 754A           83C4                   06  add	sp,*6
28049                                           !BCC_EOS
28050                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28051 754D           8B46         08            mov	ax,8[bp]
28052 7550           40                         inc	ax
28053 7551           8946         08            mov	8[bp],ax
28054                                           !BCC_EOS
28055                                           ! 3789         write_byte(ES, BX, inb(0x3c6)); BX++;
28056                                           ! Debug: list int = const $3C6 (used reg = )
28057 7554           B8                   03C6  mov	ax,#$3C6
28058 7557           50                         push	ax
28059                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28060 7558           E8         079A            call	_inb
28061 755B           44                         inc	sp
28062 755C           44                         inc	sp
28063                                           ! Debug: list unsigned char = al+0 (used reg = )
28064 755D           30E4                       xor	ah,ah
28065 755F           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 7560           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 7563           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_byte+0 (used reg = )
28071 7566           E8         075C            call	_write_byte
28072 7569           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28075 756C           8B46         08            mov	ax,8[bp]
28076 756F           40                         inc	ax
28077 7570           8946         08            mov	8[bp],ax
28078                                           !BCC_EOS
28079                                           ! 3790         outb(0x3c8,0x00);
28080                                           ! Debug: list int = const 0 (used reg = )
28081 7573           31C0                       xor	ax,ax
28082 7575           50                         push	ax
28083                                           ! Debug: list int = const $3C8 (used reg = )
28084 7576           B8                   03C8  mov	ax,#$3C8
28085 7579           50                         push	ax
28086                                           ! Debug: func () void = outb+0 (used reg = )
28087 757A           E8         078E            call	_outb
28088 757D           83C4                   04  add	sp,*4
28089                                           !BCC_EOS
28090                                           ! 3791         for(i=0;i<256*3;i++) {
28091                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28092 7580           31C0                       xor	ax,ax
28093 7582           8946         FE            mov	-2[bp],ax
28094                                           !BCC_EOS
28095                                           !BCC_EOS
28096 7585           EB           26            jmp .26B
28097                       00007587            .26C:
28098                                           ! 3792             write_byte(ES, BX, inb(0x3c9)); BX++;
28099                                           ! Debug: list int = const $3C9 (used reg = )
28100 7587           B8                   03C9  mov	ax,#$3C9
28101 758A           50                         push	ax
28102                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28103 758B           E8         0767            call	_inb
28104 758E           44                         inc	sp
28105 758F           44                         inc	sp
28106                                           ! Debug: list unsigned char = al+0 (used reg = )
28107 7590           30E4                       xor	ah,ah
28108 7592           50                         push	ax
28109                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28110 7593           FF76         08            push	8[bp]
28111                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28112 7596           FF76         06            push	6[bp]
28113                                           ! Debug: func () void = write_byte+0 (used reg = )
28114 7599           E8         0729            call	_write_byte
28115 759C           83C4                   06  add	sp,*6
28116                                           !BCC_EOS
28117                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28118 759F           8B46         08            mov	ax,8[bp]
28119 75A2           40                         inc	ax
28120 75A3           8946         08            mov	8[bp],ax
28121                                           !BCC_EOS
28122                                           ! 3793         }
28123                                           ! 3794         write_byte(ES, BX, 0); BX++;
28124                       000075A6            .26A:
28125                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28126 75A6           8B46         FE            mov	ax,-2[bp]
28127 75A9           40                         inc	ax
28128 75AA           8946         FE            mov	-2[bp],ax
28129                       000075AD            .26B:
28130                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28131 75AD           8B46         FE            mov	ax,-2[bp]
28132 75B0           3D                   0300  cmp	ax,#$300
28133 75B3           72           D2            jb 	.26C
28134                       000075B5            .26D:
28135                       000075B5            .269:
28136                                           ! Debug: list int = const 0 (used reg = )
28137 75B5           31C0                       xor	ax,ax
28138 75B7           50                         push	ax
28139                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28140 75B8           FF76         08            push	8[bp]
28141                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28142 75BB           FF76         06            push	6[bp]
28143                                           ! Debug: func () void = write_byte+0 (used reg = )
28144 75BE           E8         0704            call	_write_byte
28145 75C1           83C4                   06  add	sp,*6
28146                                           !BCC_EOS
28147                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28148 75C4           8B46         08            mov	ax,8[bp]
28149 75C7           40                         inc	ax
28150 75C8           8946         08            mov	8[bp],ax
28151                                           !BCC_EOS
28152                                           ! 3795     }
28153                                           ! 3796     return BX;
28154                       000075CB            .267:
28155 75CB           8B46         08            mov	ax,8[bp]
28156 75CE           89EC                       mov	sp,bp
28157 75D0           5D                         pop	bp
28158 75D1           C3                         ret
28159                                           !BCC_EOS
28160                                           ! 3797 }
28161                                           ! 3798 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28162                                           ! 3799      Bit16u CX;Bit16u ES;Bit16u BX;
28163                       000075D2            _biosfn_restore_video_state:
28164                                           !BCC_EOS
28165                                           !BCC_EOS
28166                                           !BCC_EOS
28167                                           ! 3800 {
28168                                           ! 3801     Bit16u i, crtc_addr, v, addr1, ar_index;
28169                                           !BCC_EOS
28170                                           ! 3802     if (CX & 1) {
28171 75D2           55                         push	bp
28172 75D3           89E5                       mov	bp,sp
28173 75D5           83C4                   F6  add	sp,*-$A
28174                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28175 75D8           8A46         04            mov	al,4[bp]
28176 75DB           24                     01  and	al,*1
28177 75DD           84C0                       test	al,al
28178 75DF   7503    E9         02AA            beq 	.26E
28179                       000075E4            .26F:
28180                                           ! 3803         inb(0x3da);
28181                                           ! Debug: list int = const $3DA (used reg = )
28182 75E4           B8                   03DA  mov	ax,#$3DA
28183 75E7           50                         push	ax
28184                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28185 75E8           E8         070A            call	_inb
28186 75EB           44                         inc	sp
28187 75EC           44                         inc	sp
28188                                           !BCC_EOS
28189                                           ! 3804         crtc_addr = read_word(ES, BX + 0x40);
28190                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28191 75ED           8B46         08            mov	ax,8[bp]
28192                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28193 75F0           05                   0040  add	ax,*$40
28194 75F3           50                         push	ax
28195                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28196 75F4           FF76         06            push	6[bp]
28197                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28198 75F7           E8         06B8            call	_read_word
28199 75FA           83C4                   04  add	sp,*4
28200                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28201 75FD           8946         FC            mov	-4[bp],ax
28202                                           !BCC_EOS
28203                                           ! 3805         addr1 = BX;
28204                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28205 7600           8B46         08            mov	ax,8[bp]
28206 7603           8946         F8            mov	-8[bp],ax
28207                                           !BCC_EOS
28208                                           ! 3806         BX += 5;
28209                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28210 7606           8B46         08            mov	ax,8[bp]
28211 7609           05                   0005  add	ax,*5
28212 760C           8946         08            mov	8[bp],ax
28213                                           !BCC_EOS
28214                                           ! 3807         for(i=1;i<=4;i++){
28215                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28216 760F           B8                   0001  mov	ax,*1
28217 7612           8946         FE            mov	-2[bp],ax
28218                                           !BCC_EOS
28219                                           !BCC_EOS
28220 7615           EB           34            jmp .272
28221                       00007617            .273:
28222                                           ! 3808             outb(0x3c4, i);
28223                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28224 7617           FF76         FE            push	-2[bp]
28225                                           ! Debug: list int = const $3C4 (used reg = )
28226 761A           B8                   03C4  mov	ax,#$3C4
28227 761D           50                         push	ax
28228                                           ! Debug: func () void = outb+0 (used reg = )
28229 761E           E8         06EA            call	_outb
28230 7621           83C4                   04  add	sp,*4
28231                                           !BCC_EOS
28232                                           ! 3809             outb(0x3c5, read_byte(ES, BX)); BX++;
28233                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28234 7624           FF76         08            push	8[bp]
28235                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28236 7627           FF76         06            push	6[bp]
28237                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28238 762A           E8         0672            call	_read_byte
28239 762D           83C4                   04  add	sp,*4
28240                                           ! Debug: list unsigned char = al+0 (used reg = )
28241 7630           30E4                       xor	ah,ah
28242 7632           50                         push	ax
28243                                           ! Debug: list int = const $3C5 (used reg = )
28244 7633           B8                   03C5  mov	ax,#$3C5
28245 7636           50                         push	ax
28246                                           ! Debug: func () void = outb+0 (used reg = )
28247 7637           E8         06D1            call	_outb
28248 763A           83C4                   04  add	sp,*4
28249                                           !BCC_EOS
28250                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28251 763D           8B46         08            mov	ax,8[bp]
28252 7640           40                         inc	ax
28253 7641           8946         08            mov	8[bp],ax
28254                                           !BCC_EOS
28255                                           ! 3810         }
28256                                           ! 3811         outb(0x3c4, 0);
28257                       00007644            .271:
28258                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28259 7644           8B46         FE            mov	ax,-2[bp]
28260 7647           40                         inc	ax
28261 7648           8946         FE            mov	-2[bp],ax
28262                       0000764B            .272:
28263                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28264 764B           8B46         FE            mov	ax,-2[bp]
28265 764E           3D                   0004  cmp	ax,*4
28266 7651           76           C4            jbe	.273
28267                       00007653            .274:
28268                       00007653            .270:
28269                                           ! Debug: list int = const 0 (used reg = )
28270 7653           31C0                       xor	ax,ax
28271 7655           50                         push	ax
28272                                           ! Debug: list int = const $3C4 (used reg = )
28273 7656           B8                   03C4  mov	ax,#$3C4
28274 7659           50                         push	ax
28275                                           ! Debug: func () void = outb+0 (used reg = )
28276 765A           E8         06AE            call	_outb
28277 765D           83C4                   04  add	sp,*4
28278                                           !BCC_EOS
28279                                           ! 3812         outb(0x3c5, read_byte(ES, BX)); BX++;
28280                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28281 7660           FF76         08            push	8[bp]
28282                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28283 7663           FF76         06            push	6[bp]
28284                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28285 7666           E8         0636            call	_read_byte
28286 7669           83C4                   04  add	sp,*4
28287                                           ! Debug: list unsigned char = al+0 (used reg = )
28288 766C           30E4                       xor	ah,ah
28289 766E           50                         push	ax
28290                                           ! Debug: list int = const $3C5 (used reg = )
28291 766F           B8                   03C5  mov	ax,#$3C5
28292 7672           50                         push	ax
28293                                           ! Debug: func () void = outb+0 (used reg = )
28294 7673           E8         0695            call	_outb
28295 7676           83C4                   04  add	sp,*4
28296                                           !BCC_EOS
28297                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28298 7679           8B46         08            mov	ax,8[bp]
28299 767C           40                         inc	ax
28300 767D           8946         08            mov	8[bp],ax
28301                                           !BCC_EOS
28302                                           ! 3813         outw(crtc_addr,0x0011);
28303                                           ! Debug: list int = const $11 (used reg = )
28304 7680           B8                   0011  mov	ax,*$11
28305 7683           50                         push	ax
28306                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28307 7684           FF76         FC            push	-4[bp]
28308                                           ! Debug: func () void = outw+0 (used reg = )
28309 7687           E8         0691            call	_outw
28310 768A           83C4                   04  add	sp,*4
28311                                           !BCC_EOS
28312                                           ! 3814         for(i=0;i<=0x18;i++) {
28313                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28314 768D           31C0                       xor	ax,ax
28315 768F           8946         FE            mov	-2[bp],ax
28316                                           !BCC_EOS
28317                                           !BCC_EOS
28318 7692           EB           3C            jmp .277
28319                       00007694            .278:
28320                                           ! 3815             if (i != 0x11) {
28321                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28322 7694           8B46         FE            mov	ax,-2[bp]
28323 7697           3D                   0011  cmp	ax,*$11
28324 769A           74           26            je  	.279
28325                       0000769C            .27A:
28326                                           ! 3816                 outb(crtc_addr,i);
28327                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28328 769C           FF76         FE            push	-2[bp]
28329                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28330 769F           FF76         FC            push	-4[bp]
28331                                           ! Debug: func () void = outb+0 (used reg = )
28332 76A2           E8         0666            call	_outb
28333 76A5           83C4                   04  add	sp,*4
28334                                           !BCC_EOS
28335                                           ! 3817                 outb(crtc_addr+1, read_byte(ES, BX));
28336                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28337 76A8           FF76         08            push	8[bp]
28338                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28339 76AB           FF76         06            push	6[bp]
28340                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28341 76AE           E8         05EE            call	_read_byte
28342 76B1           83C4                   04  add	sp,*4
28343                                           ! Debug: list unsigned char = al+0 (used reg = )
28344 76B4           30E4                       xor	ah,ah
28345 76B6           50                         push	ax
28346                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28347 76B7           8B46         FC            mov	ax,-4[bp]
28348                                           ! Debug: list unsigned int = ax+1 (used reg = )
28349 76BA           40                         inc	ax
28350 76BB           50                         push	ax
28351                                           ! Debug: func () void = outb+0 (used reg = )
28352 76BC           E8         064C            call	_outb
28353 76BF           83C4                   04  add	sp,*4
28354                                           !BCC_EOS
28355                                           ! 3818             }
28356                                           ! 3819             BX++;
28357                       000076C2            .279:
28358                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28359 76C2           8B46         08            mov	ax,8[bp]
28360 76C5           40                         inc	ax
28361 76C6           8946         08            mov	8[bp],ax
28362                                           !BCC_EOS
28363                                           ! 3820         }
28364                                           ! 3821         v = inb(0x3cc) & ~0x01;
28365                       000076C9            .276:
28366                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28367 76C9           8B46         FE            mov	ax,-2[bp]
28368 76CC           40                         inc	ax
28369 76CD           8946         FE            mov	-2[bp],ax
28370                       000076D0            .277:
28371                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28372 76D0           8B46         FE            mov	ax,-2[bp]
28373 76D3           3D                   0018  cmp	ax,*$18
28374 76D6           76           BC            jbe	.278
28375                       000076D8            .27B:
28376                       000076D8            .275:
28377                                           ! Debug: list int = const $3CC (used reg = )
28378 76D8           B8                   03CC  mov	ax,#$3CC
28379 76DB           50                         push	ax
28380                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28381 76DC           E8         0616            call	_inb
28382 76DF           44                         inc	sp
28383 76E0           44                         inc	sp
28384                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28385 76E1           24                     FE  and	al,#$FE
28386                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28387 76E3           30E4                       xor	ah,ah
28388 76E5           8946         FA            mov	-6[bp],ax
28389                                           !BCC_EOS
28390                                           ! 3822         if (crtc_addr = 0x3d4)
28391                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28392 76E8           B8                   03D4  mov	ax,#$3D4
28393 76EB           8946         FC            mov	-4[bp],ax
28394 76EE           85C0                       test	ax,ax
28395 76F0           74           08            je  	.27C
28396                       000076F2            .27D:
28397                                           ! 3823             v |= 0x01;
28398                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28399 76F2           8B46         FA            mov	ax,-6[bp]
28400 76F5           0C                     01  or	al,*1
28401 76F7           8946         FA            mov	-6[bp],ax
28402                                           !BCC_EOS
28403                                           ! 3824         outb(0x3c2, v);
28404                       000076FA            .27C:
28405                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28406 76FA           FF76         FA            push	-6[bp]
28407                                           ! Debug: list int = const $3C2 (used reg = )
28408 76FD           B8                   03C2  mov	ax,#$3C2
28409 7700           50                         push	ax
28410                                           ! Debug: func () void = outb+0 (used reg = )
28411 7701           E8         0607            call	_outb
28412 7704           83C4                   04  add	sp,*4
28413                                           !BCC_EOS
28414                                           ! 3825         outb(crtc_addr, 0x11);
28415                                           ! Debug: list int = const $11 (used reg = )
28416 7707           B8                   0011  mov	ax,*$11
28417 770A           50                         push	ax
28418                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28419 770B           FF76         FC            push	-4[bp]
28420                                           ! Debug: func () void = outb+0 (used reg = )
28421 770E           E8         05FA            call	_outb
28422 7711           83C4                   04  add	sp,*4
28423                                           !BCC_EOS
28424                                           ! 3826         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28425                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28426 7714           8B46         08            mov	ax,8[bp]
28427                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28428                                           ! Debug: list unsigned int = ax-7 (used reg = )
28429 7717           05                   FFF9  add	ax,*-7
28430 771A           50                         push	ax
28431                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28432 771B           FF76         06            push	6[bp]
28433                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28434 771E           E8         057E            call	_read_byte
28435 7721           83C4                   04  add	sp,*4
28436                                           ! Debug: list unsigned char = al+0 (used reg = )
28437 7724           30E4                       xor	ah,ah
28438 7726           50                         push	ax
28439                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28440 7727           8B46         FC            mov	ax,-4[bp]
28441                                           ! Debug: list unsigned int = ax+1 (used reg = )
28442 772A           40                         inc	ax
28443 772B           50                         push	ax
28444                                           ! Debug: func () void = outb+0 (used reg = )
28445 772C           E8         05DC            call	_outb
28446 772F           83C4                   04  add	sp,*4
28447                                           !BCC_EOS
28448                                           ! 3827         ar_index = read_byte(ES, addr1 + 0x03);
28449                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28450 7732           8B46         F8            mov	ax,-8[bp]
28451                                           ! Debug: list unsigned int = ax+3 (used reg = )
28452 7735           05                   0003  add	ax,*3
28453 7738           50                         push	ax
28454                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28455 7739           FF76         06            push	6[bp]
28456                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28457 773C           E8         0560            call	_read_byte
28458 773F           83C4                   04  add	sp,*4
28459                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28460 7742           30E4                       xor	ah,ah
28461 7744           8946         F6            mov	-$A[bp],ax
28462                                           !BCC_EOS
28463                                           ! 3828         inb(0x3da);
28464                                           ! Debug: list int = const $3DA (used reg = )
28465 7747           B8                   03DA  mov	ax,#$3DA
28466 774A           50                         push	ax
28467                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28468 774B           E8         05A7            call	_inb
28469 774E           44                         inc	sp
28470 774F           44                         inc	sp
28471                                           !BCC_EOS
28472                                           ! 3829         for(i=0;i<=0x13;i++) {
28473                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28474 7750           31C0                       xor	ax,ax
28475 7752           8946         FE            mov	-2[bp],ax
28476                                           !BCC_EOS
28477                                           !BCC_EOS
28478 7755           EB           3C            jmp .280
28479                       00007757            .281:
28480                                           ! 3830             outb(0x3c0, i | (ar_index & 0x20));
28481                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28482 7757           8A46         F6            mov	al,-$A[bp]
28483 775A           24                     20  and	al,*$20
28484                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28485                                           ! Debug: expression subtree swapping
28486 775C           30E4                       xor	ah,ah
28487 775E           0B46         FE            or	ax,-2[bp]
28488                                           ! Debug: list unsigned int = ax+0 (used reg = )
28489 7761           50                         push	ax
28490                                           ! Debug: list int = const $3C0 (used reg = )
28491 7762           B8                   03C0  mov	ax,#$3C0
28492 7765           50                         push	ax
28493                                           ! Debug: func () void = outb+0 (used reg = )
28494 7766           E8         05A2            call	_outb
28495 7769           83C4                   04  add	sp,*4
28496                                           !BCC_EOS
28497                                           ! 3831             outb(0x3c0, read_byte(ES, BX)); BX++;
28498                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28499 776C           FF76         08            push	8[bp]
28500                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28501 776F           FF76         06            push	6[bp]
28502                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28503 7772           E8         052A            call	_read_byte
28504 7775           83C4                   04  add	sp,*4
28505                                           ! Debug: list unsigned char = al+0 (used reg = )
28506 7778           30E4                       xor	ah,ah
28507 777A           50                         push	ax
28508                                           ! Debug: list int = const $3C0 (used reg = )
28509 777B           B8                   03C0  mov	ax,#$3C0
28510 777E           50                         push	ax
28511                                           ! Debug: func () void = outb+0 (used reg = )
28512 777F           E8         0589            call	_outb
28513 7782           83C4                   04  add	sp,*4
28514                                           !BCC_EOS
28515                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28516 7785           8B46         08            mov	ax,8[bp]
28517 7788           40                         inc	ax
28518 7789           8946         08            mov	8[bp],ax
28519                                           !BCC_EOS
28520                                           ! 3832         }
28521                                           ! 3833         outb(0x3c0, ar_index);
28522                       0000778C            .27F:
28523                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28524 778C           8B46         FE            mov	ax,-2[bp]
28525 778F           40                         inc	ax
28526 7790           8946         FE            mov	-2[bp],ax
28527                       00007793            .280:
28528                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28529 7793           8B46         FE            mov	ax,-2[bp]
28530 7796           3D                   0013  cmp	ax,*$13
28531 7799           76           BC            jbe	.281
28532                       0000779B            .282:
28533                       0000779B            .27E:
28534                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28535 779B           FF76         F6            push	-$A[bp]
28536                                           ! Debug: list int = const $3C0 (used reg = )
28537 779E           B8                   03C0  mov	ax,#$3C0
28538 77A1           50                         push	ax
28539                                           ! Debug: func () void = outb+0 (used reg = )
28540 77A2           E8         0566            call	_outb
28541 77A5           83C4                   04  add	sp,*4
28542                                           !BCC_EOS
28543                                           ! 3834         inb(0x3da);
28544                                           ! Debug: list int = const $3DA (used reg = )
28545 77A8           B8                   03DA  mov	ax,#$3DA
28546 77AB           50                         push	ax
28547                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28548 77AC           E8         0546            call	_inb
28549 77AF           44                         inc	sp
28550 77B0           44                         inc	sp
28551                                           !BCC_EOS
28552                                           ! 3835         for(i=0;i<=8;i++) {
28553                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28554 77B1           31C0                       xor	ax,ax
28555 77B3           8946         FE            mov	-2[bp],ax
28556                                           !BCC_EOS
28557                                           !BCC_EOS
28558 77B6           EB           34            jmp .285
28559                       000077B8            .286:
28560                                           ! 3836             outb(0x3ce,i);
28561                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28562 77B8           FF76         FE            push	-2[bp]
28563                                           ! Debug: list int = const $3CE (used reg = )
28564 77BB           B8                   03CE  mov	ax,#$3CE
28565 77BE           50                         push	ax
28566                                           ! Debug: func () void = outb+0 (used reg = )
28567 77BF           E8         0549            call	_outb
28568 77C2           83C4                   04  add	sp,*4
28569                                           !BCC_EOS
28570                                           ! 3837             outb(0x3cf, read_byte(ES, BX)); BX++;
28571                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28572 77C5           FF76         08            push	8[bp]
28573                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28574 77C8           FF76         06            push	6[bp]
28575                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28576 77CB           E8         04D1            call	_read_byte
28577 77CE           83C4                   04  add	sp,*4
28578                                           ! Debug: list unsigned char = al+0 (used reg = )
28579 77D1           30E4                       xor	ah,ah
28580 77D3           50                         push	ax
28581                                           ! Debug: list int = const $3CF (used reg = )
28582 77D4           B8                   03CF  mov	ax,#$3CF
28583 77D7           50                         push	ax
28584                                           ! Debug: func () void = outb+0 (used reg = )
28585 77D8           E8         0530            call	_outb
28586 77DB           83C4                   04  add	sp,*4
28587                                           !BCC_EOS
28588                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28589 77DE           8B46         08            mov	ax,8[bp]
28590 77E1           40                         inc	ax
28591 77E2           8946         08            mov	8[bp],ax
28592                                           !BCC_EOS
28593                                           ! 3838         }
28594                                           ! 3839         BX += 2;
28595                       000077E5            .284:
28596                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28597 77E5           8B46         FE            mov	ax,-2[bp]
28598 77E8           40                         inc	ax
28599 77E9           8946         FE            mov	-2[bp],ax
28600                       000077EC            .285:
28601                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28602 77EC           8B46         FE            mov	ax,-2[bp]
28603 77EF           3D                   0008  cmp	ax,*8
28604 77F2           76           C4            jbe	.286
28605                       000077F4            .287:
28606                       000077F4            .283:
28607                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28608 77F4           8B46         08            mov	ax,8[bp]
28609 77F7           40                         inc	ax
28610 77F8           40                         inc	ax
28611 77F9           8946         08            mov	8[bp],ax
28612                                           !BCC_EOS
28613                                           ! 3840         BX += 4;
28614                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28615 77FC           8B46         08            mov	ax,8[bp]
28616 77FF           05                   0004  add	ax,*4
28617 7802           8946         08            mov	8[bp],ax
28618                                           !BCC_EOS
28619                                           ! 3841         outb(0x3c4, read_byte(ES, addr1)); a
28620                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28621 7805           FF76         F8            push	-8[bp]
28622                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28623 7808           FF76         06            push	6[bp]
28624                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28625 780B           E8         0491            call	_read_byte
28626 780E           83C4                   04  add	sp,*4
28627                                           ! Debug: list unsigned char = al+0 (used reg = )
28628 7811           30E4                       xor	ah,ah
28629 7813           50                         push	ax
28630                                           ! Debug: list int = const $3C4 (used reg = )
28631 7814           B8                   03C4  mov	ax,#$3C4
28632 7817           50                         push	ax
28633                                           ! Debug: func () void = outb+0 (used reg = )
28634 7818           E8         04F0            call	_outb
28635 781B           83C4                   04  add	sp,*4
28636                                           !BCC_EOS
28637                                           ! 3841 ddr1++;
28638                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28639 781E           8B46         F8            mov	ax,-8[bp]
28640 7821           40                         inc	ax
28641 7822           8946         F8            mov	-8[bp],ax
28642                                           !BCC_EOS
28643                                           ! 3842         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28644                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28645 7825           FF76         F8            push	-8[bp]
28646                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28647 7828           FF76         06            push	6[bp]
28648                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28649 782B           E8         0471            call	_read_byte
28650 782E           83C4                   04  add	sp,*4
28651                                           ! Debug: list unsigned char = al+0 (used reg = )
28652 7831           30E4                       xor	ah,ah
28653 7833           50                         push	ax
28654                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28655 7834           FF76         FC            push	-4[bp]
28656                                           ! Debug: func () void = outb+0 (used reg = )
28657 7837           E8         04D1            call	_outb
28658 783A           83C4                   04  add	sp,*4
28659                                           !BCC_EOS
28660                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28661 783D           8B46         F8            mov	ax,-8[bp]
28662 7840           40                         inc	ax
28663 7841           8946         F8            mov	-8[bp],ax
28664                                           !BCC_EOS
28665                                           ! 3843         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28666                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28667 7844           FF76         F8            push	-8[bp]
28668                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28669 7847           FF76         06            push	6[bp]
28670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28671 784A           E8         0452            call	_read_byte
28672 784D           83C4                   04  add	sp,*4
28673                                           ! Debug: list unsigned char = al+0 (used reg = )
28674 7850           30E4                       xor	ah,ah
28675 7852           50                         push	ax
28676                                           ! Debug: list int = const $3CE (used reg = )
28677 7853           B8                   03CE  mov	ax,#$3CE
28678 7856           50                         push	ax
28679                                           ! Debug: func () void = outb+0 (used reg = )
28680 7857           E8         04B1            call	_outb
28681 785A           83C4                   04  add	sp,*4
28682                                           !BCC_EOS
28683                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28684 785D           8B46         F8            mov	ax,-8[bp]
28685 7860           40                         inc	ax
28686 7861           8946         F8            mov	-8[bp],ax
28687                                           !BCC_EOS
28688                                           ! 3844         addr1++;
28689                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28690 7864           8B46         F8            mov	ax,-8[bp]
28691 7867           40                         inc	ax
28692 7868           8946         F8            mov	-8[bp],ax
28693                                           !BCC_EOS
28694                                           ! 3845         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28695                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28696 786B           FF76         F8            push	-8[bp]
28697                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28698 786E           FF76         06            push	6[bp]
28699                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28700 7871           E8         042B            call	_read_byte
28701 7874           83C4                   04  add	sp,*4
28702                                           ! Debug: list unsigned char = al+0 (used reg = )
28703 7877           30E4                       xor	ah,ah
28704 7879           50                         push	ax
28705                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28706 787A           8B46         FC            mov	ax,-4[bp]
28707                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28708                                           ! Debug: list unsigned int = ax+6 (used reg = )
28709 787D           05                   0006  add	ax,*6
28710 7880           50                         push	ax
28711                                           ! Debug: func () void = outb+0 (used reg = )
28712 7881           E8         0487            call	_outb
28713 7884           83C4                   04  add	sp,*4
28714                                           !BCC_EOS
28715                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28716 7887           8B46         F8            mov	ax,-8[bp]
28717 788A           40                         inc	ax
28718 788B           8946         F8            mov	-8[bp],ax
28719                                           !BCC_EOS
28720                                           ! 3846     }
28721                                           ! 3847     if (CX & 2) {
28722                       0000788E            .26E:
28723                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28724 788E           8A46         04            mov	al,4[bp]
28725 7891           24                     02  and	al,*2
28726 7893           84C0                       test	al,al
28727 7895   7503    E9         0270            beq 	.288
28728                       0000789A            .289:
28729                                           ! 3848         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28730                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28731 789A           FF76         08            push	8[bp]
28732                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28733 789D           FF76         06            push	6[bp]
28734                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28735 78A0           E8         03FC            call	_read_byte
28736 78A3           83C4                   04  add	sp,*4
28737                                           ! Debug: list unsigned char = al+0 (used reg = )
28738 78A6           30E4                       xor	ah,ah
28739 78A8           50                         push	ax
28740                                           ! Debug: list int = const $49 (used reg = )
28741 78A9           B8                   0049  mov	ax,*$49
28742 78AC           50                         push	ax
28743                                           ! Debug: list int = const $40 (used reg = )
28744 78AD           B8                   0040  mov	ax,*$40
28745 78B0           50                         push	ax
28746                                           ! Debug: func () void = write_byte+0 (used reg = )
28747 78B1           E8         0411            call	_write_byte
28748 78B4           83C4                   06  add	sp,*6
28749                                           !BCC_EOS
28750                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28751 78B7           8B46         08            mov	ax,8[bp]
28752 78BA           40                         inc	ax
28753 78BB           8946         08            mov	8[bp],ax
28754                                           !BCC_EOS
28755                                           ! 3849         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28756                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28757 78BE           FF76         08            push	8[bp]
28758                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28759 78C1           FF76         06            push	6[bp]
28760                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28761 78C4           E8         03EB            call	_read_word
28762 78C7           83C4                   04  add	sp,*4
28763                                           ! Debug: list unsigned short = ax+0 (used reg = )
28764 78CA           50                         push	ax
28765                                           ! Debug: list int = const $4A (used reg = )
28766 78CB           B8                   004A  mov	ax,*$4A
28767 78CE           50                         push	ax
28768                                           ! Debug: list int = const $40 (used reg = )
28769 78CF           B8                   0040  mov	ax,*$40
28770 78D2           50                         push	ax
28771                                           ! Debug: func () void = write_word+0 (used reg = )
28772 78D3           E8         0407            call	_write_word
28773 78D6           83C4                   06  add	sp,*6
28774                                           !BCC_EOS
28775                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28776 78D9           8B46         08            mov	ax,8[bp]
28777 78DC           40                         inc	ax
28778 78DD           40                         inc	ax
28779 78DE           8946         08            mov	8[bp],ax
28780                                           !BCC_EOS
28781                                           ! 3850         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28782                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28783 78E1           FF76         08            push	8[bp]
28784                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28785 78E4           FF76         06            push	6[bp]
28786                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28787 78E7           E8         03C8            call	_read_word
28788 78EA           83C4                   04  add	sp,*4
28789                                           ! Debug: list unsigned short = ax+0 (used reg = )
28790 78ED           50                         push	ax
28791                                           ! Debug: list int = const $4C (used reg = )
28792 78EE           B8                   004C  mov	ax,*$4C
28793 78F1           50                         push	ax
28794                                           ! Debug: list int = const $40 (used reg = )
28795 78F2           B8                   0040  mov	ax,*$40
28796 78F5           50                         push	ax
28797                                           ! Debug: func () void = write_word+0 (used reg = )
28798 78F6           E8         03E4            call	_write_word
28799 78F9           83C4                   06  add	sp,*6
28800                                           !BCC_EOS
28801                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28802 78FC           8B46         08            mov	ax,8[bp]
28803 78FF           40                         inc	ax
28804 7900           40                         inc	ax
28805 7901           8946         08            mov	8[bp],ax
28806                                           !BCC_EOS
28807                                           ! 3851         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28808                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28809 7904           FF76         08            push	8[bp]
28810                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28811 7907           FF76         06            push	6[bp]
28812                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28813 790A           E8         03A5            call	_read_word
28814 790D           83C4                   04  add	sp,*4
28815                                           ! Debug: list unsigned short = ax+0 (used reg = )
28816 7910           50                         push	ax
28817                                           ! Debug: list int = const $63 (used reg = )
28818 7911           B8                   0063  mov	ax,*$63
28819 7914           50                         push	ax
28820                                           ! Debug: list int = const $40 (used reg = )
28821 7915           B8                   0040  mov	ax,*$40
28822 7918           50                         push	ax
28823                                           ! Debug: func () void = write_word+0 (used reg = )
28824 7919           E8         03C1            call	_write_word
28825 791C           83C4                   06  add	sp,*6
28826                                           !BCC_EOS
28827                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28828 791F           8B46         08            mov	ax,8[bp]
28829 7922           40                         inc	ax
28830 7923           40                         inc	ax
28831 7924           8946         08            mov	8[bp],ax
28832                                           !BCC_EOS
28833                                           ! 3852         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28834                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28835 7927           FF76         08            push	8[bp]
28836                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28837 792A           FF76         06            push	6[bp]
28838                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28839 792D           E8         036F            call	_read_byte
28840 7930           83C4                   04  add	sp,*4
28841                                           ! Debug: list unsigned char = al+0 (used reg = )
28842 7933           30E4                       xor	ah,ah
28843 7935           50                         push	ax
28844                                           ! Debug: list int = const $84 (used reg = )
28845 7936           B8                   0084  mov	ax,#$84
28846 7939           50                         push	ax
28847                                           ! Debug: list int = const $40 (used reg = )
28848 793A           B8                   0040  mov	ax,*$40
28849 793D           50                         push	ax
28850                                           ! Debug: func () void = write_byte+0 (used reg = )
28851 793E           E8         0384            call	_write_byte
28852 7941           83C4                   06  add	sp,*6
28853                                           !BCC_EOS
28854                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28855 7944           8B46         08            mov	ax,8[bp]
28856 7947           40                         inc	ax
28857 7948           8946         08            mov	8[bp],ax
28858                                           !BCC_EOS
28859                                           ! 3853         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28860                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28861 794B           FF76         08            push	8[bp]
28862                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28863 794E           FF76         06            push	6[bp]
28864                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28865 7951           E8         035E            call	_read_word
28866 7954           83C4                   04  add	sp,*4
28867                                           ! Debug: list unsigned short = ax+0 (used reg = )
28868 7957           50                         push	ax
28869                                           ! Debug: list int = const $85 (used reg = )
28870 7958           B8                   0085  mov	ax,#$85
28871 795B           50                         push	ax
28872                                           ! Debug: list int = const $40 (used reg = )
28873 795C           B8                   0040  mov	ax,*$40
28874 795F           50                         push	ax
28875                                           ! Debug: func () void = write_word+0 (used reg = )
28876 7960           E8         037A            call	_write_word
28877 7963           83C4                   06  add	sp,*6
28878                                           !BCC_EOS
28879                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28880 7966           8B46         08            mov	ax,8[bp]
28881 7969           40                         inc	ax
28882 796A           40                         inc	ax
28883 796B           8946         08            mov	8[bp],ax
28884                                           !BCC_EOS
28885                                           ! 3854         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28886                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28887 796E           FF76         08            push	8[bp]
28888                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28889 7971           FF76         06            push	6[bp]
28890                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28891 7974           E8         0328            call	_read_byte
28892 7977           83C4                   04  add	sp,*4
28893                                           ! Debug: list unsigned char = al+0 (used reg = )
28894 797A           30E4                       xor	ah,ah
28895 797C           50                         push	ax
28896                                           ! Debug: list int = const $87 (used reg = )
28897 797D           B8                   0087  mov	ax,#$87
28898 7980           50                         push	ax
28899                                           ! Debug: list int = const $40 (used reg = )
28900 7981           B8                   0040  mov	ax,*$40
28901 7984           50                         push	ax
28902                                           ! Debug: func () void = write_byte+0 (used reg = )
28903 7985           E8         033D            call	_write_byte
28904 7988           83C4                   06  add	sp,*6
28905                                           !BCC_EOS
28906                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28907 798B           8B46         08            mov	ax,8[bp]
28908 798E           40                         inc	ax
28909 798F           8946         08            mov	8[bp],ax
28910                                           !BCC_EOS
28911                                           ! 3855         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28912                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28913 7992           FF76         08            push	8[bp]
28914                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28915 7995           FF76         06            push	6[bp]
28916                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28917 7998           E8         0304            call	_read_byte
28918 799B           83C4                   04  add	sp,*4
28919                                           ! Debug: list unsigned char = al+0 (used reg = )
28920 799E           30E4                       xor	ah,ah
28921 79A0           50                         push	ax
28922                                           ! Debug: list int = const $88 (used reg = )
28923 79A1           B8                   0088  mov	ax,#$88
28924 79A4           50                         push	ax
28925                                           ! Debug: list int = const $40 (used reg = )
28926 79A5           B8                   0040  mov	ax,*$40
28927 79A8           50                         push	ax
28928                                           ! Debug: func () void = write_byte+0 (used reg = )
28929 79A9           E8         0319            call	_write_byte
28930 79AC           83C4                   06  add	sp,*6
28931                                           !BCC_EOS
28932                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28933 79AF           8B46         08            mov	ax,8[bp]
28934 79B2           40                         inc	ax
28935 79B3           8946         08            mov	8[bp],ax
28936                                           !BCC_EOS
28937                                           ! 3856         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28938                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28939 79B6           FF76         08            push	8[bp]
28940                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28941 79B9           FF76         06            push	6[bp]
28942                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28943 79BC           E8         02E0            call	_read_byte
28944 79BF           83C4                   04  add	sp,*4
28945                                           ! Debug: list unsigned char = al+0 (used reg = )
28946 79C2           30E4                       xor	ah,ah
28947 79C4           50                         push	ax
28948                                           ! Debug: list int = const $89 (used reg = )
28949 79C5           B8                   0089  mov	ax,#$89
28950 79C8           50                         push	ax
28951                                           ! Debug: list int = const $40 (used reg = )
28952 79C9           B8                   0040  mov	ax,*$40
28953 79CC           50                         push	ax
28954                                           ! Debug: func () void = write_byte+0 (used reg = )
28955 79CD           E8         02F5            call	_write_byte
28956 79D0           83C4                   06  add	sp,*6
28957                                           !BCC_EOS
28958                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28959 79D3           8B46         08            mov	ax,8[bp]
28960 79D6           40                         inc	ax
28961 79D7           8946         08            mov	8[bp],ax
28962                                           !BCC_EOS
28963                                           ! 3857         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
28964                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28965 79DA           FF76         08            push	8[bp]
28966                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28967 79DD           FF76         06            push	6[bp]
28968                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28969 79E0           E8         02CF            call	_read_word
28970 79E3           83C4                   04  add	sp,*4
28971                                           ! Debug: list unsigned short = ax+0 (used reg = )
28972 79E6           50                         push	ax
28973                                           ! Debug: list int = const $60 (used reg = )
28974 79E7           B8                   0060  mov	ax,*$60
28975 79EA           50                         push	ax
28976                                           ! Debug: list int = const $40 (used reg = )
28977 79EB           B8                   0040  mov	ax,*$40
28978 79EE           50                         push	ax
28979                                           ! Debug: func () void = write_word+0 (used reg = )
28980 79EF           E8         02EB            call	_write_word
28981 79F2           83C4                   06  add	sp,*6
28982                                           !BCC_EOS
28983                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28984 79F5           8B46         08            mov	ax,8[bp]
28985 79F8           40                         inc	ax
28986 79F9           40                         inc	ax
28987 79FA           8946         08            mov	8[bp],ax
28988                                           !BCC_EOS
28989                                           ! 3858         for(i=0;i<8;i++) {
28990                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28991 79FD           31C0                       xor	ax,ax
28992 79FF           8946         FE            mov	-2[bp],ax
28993                                           !BCC_EOS
28994                                           !BCC_EOS
28995 7A02           EB           2F            jmp .28C
28996                       00007A04            .28D:
28997                                           ! 3859             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
28998                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28999 7A04           FF76         08            push	8[bp]
29000                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29001 7A07           FF76         06            push	6[bp]
29002                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29003 7A0A           E8         02A5            call	_read_word
29004 7A0D           83C4                   04  add	sp,*4
29005                                           ! Debug: list unsigned short = ax+0 (used reg = )
29006 7A10           50                         push	ax
29007                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29008                                           ! Debug: expression subtree swapping
29009 7A11           8B46         FE            mov	ax,-2[bp]
29010 7A14           D1E0                       shl	ax,*1
29011                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29012                                           ! Debug: expression subtree swapping
29013                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29014 7A16           05                   0050  add	ax,*$50
29015 7A19           50                         push	ax
29016                                           ! Debug: list int = const $40 (used reg = )
29017 7A1A           B8                   0040  mov	ax,*$40
29018 7A1D           50                         push	ax
29019                                           ! Debug: func () void = write_word+0 (used reg = )
29020 7A1E           E8         02BC            call	_write_word
29021 7A21           83C4                   06  add	sp,*6
29022                                           !BCC_EOS
29023                                           ! 3860             BX += 2;
29024                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29025 7A24           8B46         08            mov	ax,8[bp]
29026 7A27           40                         inc	ax
29027 7A28           40                         inc	ax
29028 7A29           8946         08            mov	8[bp],ax
29029                                           !BCC_EOS
29030                                           ! 3861         }
29031                                           ! 3862         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29032                       00007A2C            .28B:
29033                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29034 7A2C           8B46         FE            mov	ax,-2[bp]
29035 7A2F           40                         inc	ax
29036 7A30           8946         FE            mov	-2[bp],ax
29037                       00007A33            .28C:
29038                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29039 7A33           8B46         FE            mov	ax,-2[bp]
29040 7A36           3D                   0008  cmp	ax,*8
29041 7A39           72           C9            jb 	.28D
29042                       00007A3B            .28E:
29043                       00007A3B            .28A:
29044                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29045 7A3B           FF76         08            push	8[bp]
29046                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29047 7A3E           FF76         06            push	6[bp]
29048                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29049 7A41           E8         026E            call	_read_word
29050 7A44           83C4                   04  add	sp,*4
29051                                           ! Debug: list unsigned short = ax+0 (used reg = )
29052 7A47           50                         push	ax
29053                                           ! Debug: list int = const $4E (used reg = )
29054 7A48           B8                   004E  mov	ax,*$4E
29055 7A4B           50                         push	ax
29056                                           ! Debug: list int = const $40 (used reg = )
29057 7A4C           B8                   0040  mov	ax,*$40
29058 7A4F           50                         push	ax
29059                                           ! Debug: func () void = write_word+0 (used reg = )
29060 7A50           E8         028A            call	_write_word
29061 7A53           83C4                   06  add	sp,*6
29062                                           !BCC_EOS
29063                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29064 7A56           8B46         08            mov	ax,8[bp]
29065 7A59           40                         inc	ax
29066 7A5A           40                         inc	ax
29067 7A5B           8946         08            mov	8[bp],ax
29068                                           !BCC_EOS
29069                                           ! 3863         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29070                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29071 7A5E           FF76         08            push	8[bp]
29072                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29073 7A61           FF76         06            push	6[bp]
29074                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29075 7A64           E8         0238            call	_read_byte
29076 7A67           83C4                   04  add	sp,*4
29077                                           ! Debug: list unsigned char = al+0 (used reg = )
29078 7A6A           30E4                       xor	ah,ah
29079 7A6C           50                         push	ax
29080                                           ! Debug: list int = const $62 (used reg = )
29081 7A6D           B8                   0062  mov	ax,*$62
29082 7A70           50                         push	ax
29083                                           ! Debug: list int = const $40 (used reg = )
29084 7A71           B8                   0040  mov	ax,*$40
29085 7A74           50                         push	ax
29086                                           ! Debug: func () void = write_byte+0 (used reg = )
29087 7A75           E8         024D            call	_write_byte
29088 7A78           83C4                   06  add	sp,*6
29089                                           !BCC_EOS
29090                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29091 7A7B           8B46         08            mov	ax,8[bp]
29092 7A7E           40                         inc	ax
29093 7A7F           8946         08            mov	8[bp],ax
29094                                           !BCC_EOS
29095                                           ! 3864         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29096                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29097 7A82           FF76         08            push	8[bp]
29098                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29099 7A85           FF76         06            push	6[bp]
29100                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29101 7A88           E8         0227            call	_read_word
29102 7A8B           83C4                   04  add	sp,*4
29103                                           ! Debug: list unsigned short = ax+0 (used reg = )
29104 7A8E           50                         push	ax
29105                                           ! Debug: list int = const $7C (used reg = )
29106 7A8F           B8                   007C  mov	ax,*$7C
29107 7A92           50                         push	ax
29108                                           ! Debug: list int = const 0 (used reg = )
29109 7A93           31C0                       xor	ax,ax
29110 7A95           50                         push	ax
29111                                           ! Debug: func () void = write_word+0 (used reg = )
29112 7A96           E8         0244            call	_write_word
29113 7A99           83C4                   06  add	sp,*6
29114                                           !BCC_EOS
29115                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29116 7A9C           8B46         08            mov	ax,8[bp]
29117 7A9F           40                         inc	ax
29118 7AA0           40                         inc	ax
29119 7AA1           8946         08            mov	8[bp],ax
29120                                           !BCC_EOS
29121                                           ! 3865         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29122                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29123 7AA4           FF76         08            push	8[bp]
29124                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29125 7AA7           FF76         06            push	6[bp]
29126                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29127 7AAA           E8         0205            call	_read_word
29128 7AAD           83C4                   04  add	sp,*4
29129                                           ! Debug: list unsigned short = ax+0 (used reg = )
29130 7AB0           50                         push	ax
29131                                           ! Debug: list int = const $7E (used reg = )
29132 7AB1           B8                   007E  mov	ax,*$7E
29133 7AB4           50                         push	ax
29134                                           ! Debug: list int = const 0 (used reg = )
29135 7AB5           31C0                       xor	ax,ax
29136 7AB7           50                         push	ax
29137                                           ! Debug: func () void = write_word+0 (used reg = )
29138 7AB8           E8         0222            call	_write_word
29139 7ABB           83C4                   06  add	sp,*6
29140                                           !BCC_EOS
29141                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29142 7ABE           8B46         08            mov	ax,8[bp]
29143 7AC1           40                         inc	ax
29144 7AC2           40                         inc	ax
29145 7AC3           8946         08            mov	8[bp],ax
29146                                           !BCC_EOS
29147                                           ! 3866         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29148                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29149 7AC6           FF76         08            push	8[bp]
29150                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29151 7AC9           FF76         06            push	6[bp]
29152                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29153 7ACC           E8         01E3            call	_read_word
29154 7ACF           83C4                   04  add	sp,*4
29155                                           ! Debug: list unsigned short = ax+0 (used reg = )
29156 7AD2           50                         push	ax
29157                                           ! Debug: list int = const $10C (used reg = )
29158 7AD3           B8                   010C  mov	ax,#$10C
29159 7AD6           50                         push	ax
29160                                           ! Debug: list int = const 0 (used reg = )
29161 7AD7           31C0                       xor	ax,ax
29162 7AD9           50                         push	ax
29163                                           ! Debug: func () void = write_word+0 (used reg = )
29164 7ADA           E8         0200            call	_write_word
29165 7ADD           83C4                   06  add	sp,*6
29166                                           !BCC_EOS
29167                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29168 7AE0           8B46         08            mov	ax,8[bp]
29169 7AE3           40                         inc	ax
29170 7AE4           40                         inc	ax
29171 7AE5           8946         08            mov	8[bp],ax
29172                                           !BCC_EOS
29173                                           ! 3867         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29174                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29175 7AE8           FF76         08            push	8[bp]
29176                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29177 7AEB           FF76         06            push	6[bp]
29178                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29179 7AEE           E8         01C1            call	_read_word
29180 7AF1           83C4                   04  add	sp,*4
29181                                           ! Debug: list unsigned short = ax+0 (used reg = )
29182 7AF4           50                         push	ax
29183                                           ! Debug: list int = const $10E (used reg = )
29184 7AF5           B8                   010E  mov	ax,#$10E
29185 7AF8           50                         push	ax
29186                                           ! Debug: list int = const 0 (used reg = )
29187 7AF9           31C0                       xor	ax,ax
29188 7AFB           50                         push	ax
29189                                           ! Debug: func () void = write_word+0 (used reg = )
29190 7AFC           E8         01DE            call	_write_word
29191 7AFF           83C4                   06  add	sp,*6
29192                                           !BCC_EOS
29193                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29194 7B02           8B46         08            mov	ax,8[bp]
29195 7B05           40                         inc	ax
29196 7B06           40                         inc	ax
29197 7B07           8946         08            mov	8[bp],ax
29198                                           !BCC_EOS
29199                                           ! 3868     }
29200                                           ! 3869     if (CX & 4) {
29201                       00007B0A            .288:
29202                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29203 7B0A           8A46         04            mov	al,4[bp]
29204 7B0D           24                     04  and	al,*4
29205 7B0F           84C0                       test	al,al
29206 7B11   7503    E9         0096            beq 	.28F
29207                       00007B16            .290:
29208                                           ! 3870         BX++;
29209                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29210 7B16           8B46         08            mov	ax,8[bp]
29211 7B19           40                         inc	ax
29212 7B1A           8946         08            mov	8[bp],ax
29213                                           !BCC_EOS
29214                                           ! 3871         v = read_byte(ES, BX); BX++;
29215                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29216 7B1D           FF76         08            push	8[bp]
29217                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29218 7B20           FF76         06            push	6[bp]
29219                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29220 7B23           E8         0179            call	_read_byte
29221 7B26           83C4                   04  add	sp,*4
29222                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29223 7B29           30E4                       xor	ah,ah
29224 7B2B           8946         FA            mov	-6[bp],ax
29225                                           !BCC_EOS
29226                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29227 7B2E           8B46         08            mov	ax,8[bp]
29228 7B31           40                         inc	ax
29229 7B32           8946         08            mov	8[bp],ax
29230                                           !BCC_EOS
29231                                           ! 3872         outb(0x3c6, read_byte(ES, BX)); BX++;
29232                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29233 7B35           FF76         08            push	8[bp]
29234                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29235 7B38           FF76         06            push	6[bp]
29236                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29237 7B3B           E8         0161            call	_read_byte
29238 7B3E           83C4                   04  add	sp,*4
29239                                           ! Debug: list unsigned char = al+0 (used reg = )
29240 7B41           30E4                       xor	ah,ah
29241 7B43           50                         push	ax
29242                                           ! Debug: list int = const $3C6 (used reg = )
29243 7B44           B8                   03C6  mov	ax,#$3C6
29244 7B47           50                         push	ax
29245                                           ! Debug: func () void = outb+0 (used reg = )
29246 7B48           E8         01C0            call	_outb
29247 7B4B           83C4                   04  add	sp,*4
29248                                           !BCC_EOS
29249                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29250 7B4E           8B46         08            mov	ax,8[bp]
29251 7B51           40                         inc	ax
29252 7B52           8946         08            mov	8[bp],ax
29253                                           !BCC_EOS
29254                                           ! 3873         outb(0x3c8,0x00);
29255                                           ! Debug: list int = const 0 (used reg = )
29256 7B55           31C0                       xor	ax,ax
29257 7B57           50                         push	ax
29258                                           ! Debug: list int = const $3C8 (used reg = )
29259 7B58           B8                   03C8  mov	ax,#$3C8
29260 7B5B           50                         push	ax
29261                                           ! Debug: func () void = outb+0 (used reg = )
29262 7B5C           E8         01AC            call	_outb
29263 7B5F           83C4                   04  add	sp,*4
29264                                           !BCC_EOS
29265                                           ! 3874         for(i=0;i<256*3;i++) {
29266                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29267 7B62           31C0                       xor	ax,ax
29268 7B64           8946         FE            mov	-2[bp],ax
29269                                           !BCC_EOS
29270                                           !BCC_EOS
29271 7B67           EB           27            jmp .293
29272                       00007B69            .294:
29273                                           ! 3875             outb(0x3c9, read_byte(ES, BX)); BX++;
29274                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29275 7B69           FF76         08            push	8[bp]
29276                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29277 7B6C           FF76         06            push	6[bp]
29278                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29279 7B6F           E8         012D            call	_read_byte
29280 7B72           83C4                   04  add	sp,*4
29281                                           ! Debug: list unsigned char = al+0 (used reg = )
29282 7B75           30E4                       xor	ah,ah
29283 7B77           50                         push	ax
29284                                           ! Debug: list int = const $3C9 (used reg = )
29285 7B78           B8                   03C9  mov	ax,#$3C9
29286 7B7B           50                         push	ax
29287                                           ! Debug: func () void = outb+0 (used reg = )
29288 7B7C           E8         018C            call	_outb
29289 7B7F           83C4                   04  add	sp,*4
29290                                           !BCC_EOS
29291                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29292 7B82           8B46         08            mov	ax,8[bp]
29293 7B85           40                         inc	ax
29294 7B86           8946         08            mov	8[bp],ax
29295                                           !BCC_EOS
29296                                           ! 3876         }
29297                                           ! 3877         BX++;
29298                       00007B89            .292:
29299                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29300 7B89           8B46         FE            mov	ax,-2[bp]
29301 7B8C           40                         inc	ax
29302 7B8D           8946         FE            mov	-2[bp],ax
29303                       00007B90            .293:
29304                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29305 7B90           8B46         FE            mov	ax,-2[bp]
29306 7B93           3D                   0300  cmp	ax,#$300
29307 7B96           72           D1            jb 	.294
29308                       00007B98            .295:
29309                       00007B98            .291:
29310                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29311 7B98           8B46         08            mov	ax,8[bp]
29312 7B9B           40                         inc	ax
29313 7B9C           8946         08            mov	8[bp],ax
29314                                           !BCC_EOS
29315                                           ! 3878         outb(0x3c8, v);
29316                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29317 7B9F           FF76         FA            push	-6[bp]
29318                                           ! Debug: list int = const $3C8 (used reg = )
29319 7BA2           B8                   03C8  mov	ax,#$3C8
29320 7BA5           50                         push	ax
29321                                           ! Debug: func () void = outb+0 (used reg = )
29322 7BA6           E8         0162            call	_outb
29323 7BA9           83C4                   04  add	sp,*4
29324                                           !BCC_EOS
29325                                           ! 3879     }
29326                                           ! 3880     return BX;
29327                       00007BAC            .28F:
29328 7BAC           8B46         08            mov	ax,8[bp]
29329 7BAF           89EC                       mov	sp,bp
29330 7BB1           5D                         pop	bp
29331 7BB2           C3                         ret
29332                                           !BCC_EOS
29333                                           ! 3881 }
29334                                           ! 3882 static Bit8u find_vga_entry(mode)
29335                                           ! 3883 Bit8u mode;
29336                       00007BB3            _find_vga_entry:
29337                                           !BCC_EOS
29338                                           ! 3884 {
29339                                           ! 3885  Bit8u i,line=0xFF;
29340 7BB3           55                         push	bp
29341 7BB4           89E5                       mov	bp,sp
29342 7BB6           4C                         dec	sp
29343 7BB7           4C                         dec	sp
29344                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29345 7BB8           B0                     FF  mov	al,#$FF
29346 7BBA           8846         FE            mov	-2[bp],al
29347                                           !BCC_EOS
29348                                           ! 3886  for(i=0;i<=15;i++)
29349                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29350 7BBD           30C0                       xor	al,al
29351 7BBF           8846         FF            mov	-1[bp],al
29352                                           !BCC_EOS
29353                                           !BCC_EOS
29354                                           ! 3887   if(vga_modes[i].svgamode==mode)
29355 7BC2           EB           23            jmp .298
29356                       00007BC4            .299:
29357                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29358 7BC4           8A46         FF            mov	al,-1[bp]
29359 7BC7           30E4                       xor	ah,ah
29360 7BC9           B1                     03  mov	cl,*3
29361 7BCB           D3E0                       shl	ax,cl
29362 7BCD           89C3                       mov	bx,ax
29363                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29364 7BCF           8A87       01C4            mov	al,_vga_modes[bx]
29365 7BD3           3A46         04            cmp	al,4[bp]
29366 7BD6           75           08            jne 	.29A
29367                       00007BD8            .29B:
29368                                           ! 3888    {line=i;
29369                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29370 7BD8           8A46         FF            mov	al,-1[bp]
29371 7BDB           8846         FE            mov	-2[bp],al
29372                                           !BCC_EOS
29373                                           ! 3889     break;
29374 7BDE           EB           0E            jmp .296
29375                                           !BCC_EOS
29376                                           ! 3890    }
29377                                           ! 3891  return line;
29378                       00007BE0            .29A:
29379                       00007BE0            .297:
29380                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29381 7BE0           8A46         FF            mov	al,-1[bp]
29382 7BE3           40                         inc	ax
29383 7BE4           8846         FF            mov	-1[bp],al
29384                       00007BE7            .298:
29385                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29386 7BE7           8A46         FF            mov	al,-1[bp]
29387 7BEA           3C                     0F  cmp	al,*$F
29388 7BEC           76           D6            jbe	.299
29389                       00007BEE            .29C:
29390                       00007BEE            .296:
29391 7BEE           8A46         FE            mov	al,-2[bp]
29392 7BF1           89EC                       mov	sp,bp
29393 7BF3           5D                         pop	bp
29394 7BF4           C3                         ret
29395                                           !BCC_EOS
29396                                           ! 3892 }
29397                                           ! 3893 static void memsetb(seg,offset,value,count)
29398                                           ! Register BX used in function find_vga_entry
29399                                           ! 3894   Bit16u seg;
29400                       00007BF5            _memsetb:
29401                                           !BCC_EOS
29402                                           ! 3895   Bit16u offset;
29403                                           !BCC_EOS
29404                                           ! 3896   Bit16u value;
29405                                           !BCC_EOS
29406                                           ! 3897   Bit16u count;
29407                                           !BCC_EOS
29408                                           ! 3898 {
29409                                           ! 3899 #asm
29410                                           !BCC_ASM
29411                       00000008            _memsetb.count	set	8
29412                       00000002            _memsetb.seg	set	2
29413                       00000006            _memsetb.value	set	6
29414                       00000004            _memsetb.offset	set	4
29415 7BF5           55                           push bp
29416 7BF6           89E5                         mov bp, sp
29417 7BF8           50                             push ax
29418 7BF9           51                             push cx
29419 7BFA           06                             push es
29420 7BFB           57                             push di
29421 7BFC           8B4E         0A                mov cx, 10[bp] ; count
29422 7BFF           83F9                   00      cmp cx, #0x00
29423 7C02           74           10                je memsetb_end
29424 7C04           8B46         04                mov ax, 4[bp] ; segment
29425 7C07           8EC0                           mov es, ax
29426 7C09           8B46         06                mov ax, 6[bp] ; offset
29427 7C0C           89C7                           mov di, ax
29428 7C0E           8A46         08                mov al, 8[bp] ; value
29429 7C11           FC                             cld
29430 7C12           F3                             rep
29431 7C13           AA                              stosb
29432                       00007C14            memsetb_end:
29433 7C14           5F                             pop di
29434 7C15           07                             pop es
29435 7C16           59                             pop cx
29436 7C17           58                             pop ax
29437 7C18           5D                           pop bp
29438                                           ! 3923 endasm
29439                                           !BCC_ENDASM
29440                                           ! 3924 }
29441 7C19           C3                         ret
29442                                           ! 3925 static void memsetw(seg,offset,value,count)
29443                                           ! 3926   Bit16u seg;
29444                       00007C1A            _memsetw:
29445                                           !BCC_EOS
29446                                           ! 3927   Bit16u offset;
29447                                           !BCC_EOS
29448                                           ! 3928   Bit16u value;
29449                                           !BCC_EOS
29450                                           ! 3929   Bit16u count;
29451                                           !BCC_EOS
29452                                           ! 3930 {
29453                                           ! 3931 #asm
29454                                           !BCC_ASM
29455                       00000008            _memsetw.count	set	8
29456                       00000002            _memsetw.seg	set	2
29457                       00000006            _memsetw.value	set	6
29458                       00000004            _memsetw.offset	set	4
29459 7C1A           55                           push bp
29460 7C1B           89E5                         mov bp, sp
29461 7C1D           50                             push ax
29462 7C1E           51                             push cx
29463 7C1F           06                             push es
29464 7C20           57                             push di
29465 7C21           8B4E         0A                mov cx, 10[bp] ; count
29466 7C24           83F9                   00      cmp cx, #0x00
29467 7C27           74           10                je memsetw_end
29468 7C29           8B46         04                mov ax, 4[bp] ; segment
29469 7C2C           8EC0                           mov es, ax
29470 7C2E           8B46         06                mov ax, 6[bp] ; offset
29471 7C31           89C7                           mov di, ax
29472 7C33           8B46         08                mov ax, 8[bp] ; value
29473 7C36           FC                             cld
29474 7C37           F3                             rep
29475 7C38           AB                              stosw
29476                       00007C39            memsetw_end:
29477 7C39           5F                             pop di
29478 7C3A           07                             pop es
29479 7C3B           59                             pop cx
29480 7C3C           58                             pop ax
29481 7C3D           5D                           pop bp
29482                                           ! 3955 endasm
29483                                           !BCC_ENDASM
29484                                           ! 3956 }
29485 7C3E           C3                         ret
29486                                           ! 3957 static void memcpyb(dseg,doffset,sseg,soffset,count)
29487                                           ! 3958   Bit16u dseg;
29488                       00007C3F            _memcpyb:
29489                                           !BCC_EOS
29490                                           ! 3959   Bit16u doffset;
29491                                           !BCC_EOS
29492                                           ! 3960   Bit16u sseg;
29493                                           !BCC_EOS
29494                                           ! 3961   Bit16u soffset;
29495                                           !BCC_EOS
29496                                           ! 3962   Bit16u count;
29497                                           !BCC_EOS
29498                                           ! 3963 {
29499                                           ! 3964 #asm
29500                                           !BCC_ASM
29501                       0000000A            _memcpyb.count	set	$A
29502                       00000006            _memcpyb.sseg	set	6
29503                       00000008            _memcpyb.soffset	set	8
29504                       00000002            _memcpyb.dseg	set	2
29505                       00000004            _memcpyb.doffset	set	4
29506 7C3F           55                           push bp
29507 7C40           89E5                         mov bp, sp
29508 7C42           50                             push ax
29509 7C43           51                             push cx
29510 7C44           06                             push es
29511 7C45           57                             push di
29512 7C46           1E                             push ds
29513 7C47           56                             push si
29514 7C48           8B4E         0C                mov cx, 12[bp] ; count
29515 7C4B           83F9                   00      cmp cx, #0x0000
29516 7C4E           74           17                je memcpyb_end
29517 7C50           8B46         04                mov ax, 4[bp] ; dsegment
29518 7C53           8EC0                           mov es, ax
29519 7C55           8B46         06                mov ax, 6[bp] ; doffset
29520 7C58           89C7                           mov di, ax
29521 7C5A           8B46         08                mov ax, 8[bp] ; ssegment
29522 7C5D           8ED8                           mov ds, ax
29523 7C5F           8B46         0A                mov ax, 10[bp] ; soffset
29524 7C62           89C6                           mov si, ax
29525 7C64           FC                             cld
29526 7C65           F3                             rep
29527 7C66           A4                              movsb
29528                       00007C67            memcpyb_end:
29529 7C67           5E                             pop si
29530 7C68           1F                             pop ds
29531 7C69           5F                             pop di
29532 7C6A           07                             pop es
29533 7C6B           59                             pop cx
29534 7C6C           58                             pop ax
29535 7C6D           5D                           pop bp
29536                                           ! 3995 endasm
29537                                           !BCC_ENDASM
29538                                           ! 3996 }
29539 7C6E           C3                         ret
29540                                           ! 3997 static void memcpyw(dseg,doffset,sseg,soffset,count)
29541                                           ! 3998   Bit16u dseg;
29542                       00007C6F            _memcpyw:
29543                                           !BCC_EOS
29544                                           ! 3999   Bit16u doffset;
29545                                           !BCC_EOS
29546                                           ! 4000   Bit16u sseg;
29547                                           !BCC_EOS
29548                                           ! 4001   Bit16u soffset;
29549                                           !BCC_EOS
29550                                           ! 4002   Bit16u count;
29551                                           !BCC_EOS
29552                                           ! 4003 {
29553                                           ! 4004 #asm
29554                                           !BCC_ASM
29555                       0000000A            _memcpyw.count	set	$A
29556                       00000006            _memcpyw.sseg	set	6
29557                       00000008            _memcpyw.soffset	set	8
29558                       00000002            _memcpyw.dseg	set	2
29559                       00000004            _memcpyw.doffset	set	4
29560 7C6F           55                           push bp
29561 7C70           89E5                         mov bp, sp
29562 7C72           50                             push ax
29563 7C73           51                             push cx
29564 7C74           06                             push es
29565 7C75           57                             push di
29566 7C76           1E                             push ds
29567 7C77           56                             push si
29568 7C78           8B4E         0C                mov cx, 12[bp] ; count
29569 7C7B           83F9                   00      cmp cx, #0x0000
29570 7C7E           74           17                je memcpyw_end
29571 7C80           8B46         04                mov ax, 4[bp] ; dsegment
29572 7C83           8EC0                           mov es, ax
29573 7C85           8B46         06                mov ax, 6[bp] ; doffset
29574 7C88           89C7                           mov di, ax
29575 7C8A           8B46         08                mov ax, 8[bp] ; ssegment
29576 7C8D           8ED8                           mov ds, ax
29577 7C8F           8B46         0A                mov ax, 10[bp] ; soffset
29578 7C92           89C6                           mov si, ax
29579 7C94           FC                             cld
29580 7C95           F3                             rep
29581 7C96           A5                              movsw
29582                       00007C97            memcpyw_end:
29583 7C97           5E                             pop si
29584 7C98           1F                             pop ds
29585 7C99           5F                             pop di
29586 7C9A           07                             pop es
29587 7C9B           59                             pop cx
29588 7C9C           58                             pop ax
29589 7C9D           5D                           pop bp
29590                                           ! 4035 endasm
29591                                           !BCC_ENDASM
29592                                           ! 4036 }
29593 7C9E           C3                         ret
29594                                           ! 4037 static Bit8u
29595                                           ! 4038 read_byte(seg, offset)
29596                                           ! 4039   Bit16u seg;
29597                       00007C9F            _read_byte:
29598                                           !BCC_EOS
29599                                           ! 4040   Bit16u offset;
29600                                           !BCC_EOS
29601                                           ! 4041 {
29602                                           ! 4042 #asm
29603                                           !BCC_ASM
29604                       00000002            _read_byte.seg	set	2
29605                       00000004            _read_byte.offset	set	4
29606 7C9F           55                           push bp
29607 7CA0           89E5                         mov bp, sp
29608 7CA2           53                             push bx
29609 7CA3           1E                             push ds
29610 7CA4           8B46         04                mov ax, 4[bp] ; segment
29611 7CA7           8ED8                           mov ds, ax
29612 7CA9           8B5E         06                mov bx, 6[bp] ; offset
29613 7CAC           8A07                           mov al, [bx]
29614                                               ;; al = return value (byte)
29615 7CAE           1F                             pop ds
29616 7CAF           5B                             pop bx
29617 7CB0           5D                           pop bp
29618                                           ! 4055 endasm
29619                                           !BCC_ENDASM
29620                                           ! 4056 }
29621 7CB1           C3                         ret
29622                                           ! 4057 static Bit16u
29623                                           ! 4058 read_word(seg, offset)
29624                                           ! 4059   Bit16u seg;
29625                       00007CB2            _read_word:
29626                                           !BCC_EOS
29627                                           ! 4060   Bit16u offset;
29628                                           !BCC_EOS
29629                                           ! 4061 {
29630                                           ! 4062 #asm
29631                                           !BCC_ASM
29632                       00000002            _read_word.seg	set	2
29633                       00000004            _read_word.offset	set	4
29634 7CB2           55                           push bp
29635 7CB3           89E5                         mov bp, sp
29636 7CB5           53                             push bx
29637 7CB6           1E                             push ds
29638 7CB7           8B46         04                mov ax, 4[bp] ; segment
29639 7CBA           8ED8                           mov ds, ax
29640 7CBC           8B5E         06                mov bx, 6[bp] ; offset
29641 7CBF           8B07                           mov ax, [bx]
29642                                               ;; ax = return value (word)
29643 7CC1           1F                             pop ds
29644 7CC2           5B                             pop bx
29645 7CC3           5D                           pop bp
29646                                           ! 4075 endasm
29647                                           !BCC_ENDASM
29648                                           ! 4076 }
29649 7CC4           C3                         ret
29650                                           ! 4077 static void
29651                                           ! 4078 write_byte(seg, offset, data)
29652                                           ! 4079   Bit16u seg;
29653                       00007CC5            _write_byte:
29654                                           !BCC_EOS
29655                                           ! 4080   Bit16u offset;
29656                                           !BCC_EOS
29657                                           ! 4081   Bit8u data;
29658                                           !BCC_EOS
29659                                           ! 4082 {
29660                                           ! 4083 #asm
29661                                           !BCC_ASM
29662                       00000002            _write_byte.seg	set	2
29663                       00000006            _write_byte.data	set	6
29664                       00000004            _write_byte.offset	set	4
29665 7CC5           55                           push bp
29666 7CC6           89E5                         mov bp, sp
29667 7CC8           50                             push ax
29668 7CC9           53                             push bx
29669 7CCA           1E                             push ds
29670 7CCB           8B46         04                mov ax, 4[bp] ; segment
29671 7CCE           8ED8                           mov ds, ax
29672 7CD0           8B5E         06                mov bx, 6[bp] ; offset
29673 7CD3           8A46         08                mov al, 8[bp] ; data byte
29674 7CD6           8807                           mov [bx], al ; write data byte
29675 7CD8           1F                             pop ds
29676 7CD9           5B                             pop bx
29677 7CDA           58                             pop ax
29678 7CDB           5D                           pop bp
29679                                           ! 4098 endasm
29680                                           !BCC_ENDASM
29681                                           ! 4099 }
29682 7CDC           C3                         ret
29683                                           ! 4100 static void
29684                                           ! 4101 write_word(seg, offset, data)
29685                                           ! 4102   Bit16u seg;
29686                       00007CDD            _write_word:
29687                                           !BCC_EOS
29688                                           ! 4103   Bit16u offset;
29689                                           !BCC_EOS
29690                                           ! 4104   Bit16u data;
29691                                           !BCC_EOS
29692                                           ! 4105 {
29693                                           ! 4106 #asm
29694                                           !BCC_ASM
29695                       00000002            _write_word.seg	set	2
29696                       00000006            _write_word.data	set	6
29697                       00000004            _write_word.offset	set	4
29698 7CDD           55                           push bp
29699 7CDE           89E5                         mov bp, sp
29700 7CE0           50                             push ax
29701 7CE1           53                             push bx
29702 7CE2           1E                             push ds
29703 7CE3           8B46         04                mov ax, 4[bp] ; segment
29704 7CE6           8ED8                           mov ds, ax
29705 7CE8           8B5E         06                mov bx, 6[bp] ; offset
29706 7CEB           8B46         08                mov ax, 8[bp] ; data word
29707 7CEE           8907                           mov [bx], ax ; write data word
29708 7CF0           1F                             pop ds
29709 7CF1           5B                             pop bx
29710 7CF2           58                             pop ax
29711 7CF3           5D                           pop bp
29712                                           ! 4121 endasm
29713                                           !BCC_ENDASM
29714                                           ! 4122 }
29715 7CF4           C3                         ret
29716                                           ! 4123  Bit8u
29717                                           ! 4124 inb(port)
29718                                           ! 4125   Bit16u port;
29719                                           export	_inb
29720                       00007CF5            _inb:
29721                                           !BCC_EOS
29722                                           ! 4126 {
29723                                           ! 4127 #asm
29724                                           !BCC_ASM
29725                       00000002            _inb.port	set	2
29726 7CF5           55                           push bp
29727 7CF6           89E5                         mov bp, sp
29728 7CF8           52                             push dx
29729 7CF9           8B56         04                mov dx, 4[bp]
29730 7CFC           EC                             in al, dx
29731 7CFD           5A                             pop dx
29732 7CFE           5D                           pop bp
29733                                           ! 4135 endasm
29734                                           !BCC_ENDASM
29735                                           ! 4136 }
29736 7CFF           C3                         ret
29737                                           ! 4137   Bit16u
29738                                           ! 4138 inw(port)
29739                                           ! 4139   Bit16u port;
29740                                           export	_inw
29741                       00007D00            _inw:
29742                                           !BCC_EOS
29743                                           ! 4140 {
29744                                           ! 4141 #asm
29745                                           !BCC_ASM
29746                       00000002            _inw.port	set	2
29747 7D00           55                           push bp
29748 7D01           89E5                         mov bp, sp
29749 7D03           52                             push dx
29750 7D04           8B56         04                mov dx, 4[bp]
29751 7D07           ED                             in ax, dx
29752 7D08           5A                             pop dx
29753 7D09           5D                           pop bp
29754                                           ! 4149 endasm
29755                                           !BCC_ENDASM
29756                                           ! 4150 }
29757 7D0A           C3                         ret
29758                                           ! 4151   void
29759                                           ! 4152 outb(port, val)
29760                                           ! 4153   Bit16u port;
29761                                           export	_outb
29762                       00007D0B            _outb:
29763                                           !BCC_EOS
29764                                           ! 4154   Bit8u val;
29765                                           !BCC_EOS
29766                                           ! 4155 {
29767                                           ! 4156 #asm
29768                                           !BCC_ASM
29769                       00000004            _outb.val	set	4
29770                       00000002            _outb.port	set	2
29771 7D0B           55                           push bp
29772 7D0C           89E5                         mov bp, sp
29773 7D0E           50                             push ax
29774 7D0F           52                             push dx
29775 7D10           8B56         04                mov dx, 4[bp]
29776 7D13           8A46         06                mov al, 6[bp]
29777 7D16           EE                             out dx, al
29778 7D17           5A                             pop dx
29779 7D18           58                             pop ax
29780 7D19           5D                           pop bp
29781                                           ! 4167 endasm
29782                                           !BCC_ENDASM
29783                                           ! 4168 }
29784 7D1A           C3                         ret
29785                                           ! 4169   void
29786                                           ! 4170 outw(port, val)
29787                                           ! 4171   Bit16u port;
29788                                           export	_outw
29789                       00007D1B            _outw:
29790                                           !BCC_EOS
29791                                           ! 4172   Bit16u val;
29792                                           !BCC_EOS
29793                                           ! 4173 {
29794                                           ! 4174 #asm
29795                                           !BCC_ASM
29796                       00000004            _outw.val	set	4
29797                       00000002            _outw.port	set	2
29798 7D1B           55                           push bp
29799 7D1C           89E5                         mov bp, sp
29800 7D1E           50                             push ax
29801 7D1F           52                             push dx
29802 7D20           8B56         04                mov dx, 4[bp]
29803 7D23           8B46         06                mov ax, 6[bp]
29804 7D26           EF                             out dx, ax
29805 7D27           5A                             pop dx
29806 7D28           58                             pop ax
29807 7D29           5D                           pop bp
29808                                           ! 4185 endasm
29809                                           !BCC_ENDASM
29810                                           ! 4186 }
29811 7D2A           C3                         ret
29812                                           ! 4187 Bit16u get_SS()
29813                                           ! 4188 {
29814                                           export	_get_SS
29815                       00007D2B            _get_SS:
29816                                           ! 4189 #asm
29817                                           !BCC_ASM
29818 7D2B           8CD0                         mov ax, ss
29819                                           ! 4191 endasm
29820                                           !BCC_ENDASM
29821                                           ! 4192 }
29822 7D2D           C3                         ret
29823                                           ! 4193 void unimplemented()
29824                                           ! 4194 {
29825                                           export	_unimplemented
29826                       00007D2E            _unimplemented:
29827                                           ! 4195  printf("--> Unimplemented\n");
29828 7D2E           55                         push	bp
29829 7D2F           89E5                       mov	bp,sp
29830                                           ! Debug: list * char = .29D+0 (used reg = )
29831 7D31           BB                   7EB0  mov	bx,#.29D
29832 7D34           53                         push	bx
29833                                           ! Debug: func () void = printf+0 (used reg = )
29834 7D35           E8         0012            call	_printf
29835 7D38           89EC                       mov	sp,bp
29836                                           !BCC_EOS
29837                                           ! 4196 }
29838 7D3A           5D                         pop	bp
29839 7D3B           C3                         ret
29840                                           ! 4197 void unknown()
29841                                           ! Register BX used in function unimplemented
29842                                           ! 4198 {
29843                                           export	_unknown
29844                       00007D3C            _unknown:
29845                                           ! 4199  printf("--> Unknown int10\n");
29846 7D3C           55                         push	bp
29847 7D3D           89E5                       mov	bp,sp
29848                                           ! Debug: list * char = .29E+0 (used reg = )
29849 7D3F           BB                   7E9D  mov	bx,#.29E
29850 7D42           53                         push	bx
29851                                           ! Debug: func () void = printf+0 (used reg = )
29852 7D43           E8         0004            call	_printf
29853 7D46           89EC                       mov	sp,bp
29854                                           !BCC_EOS
29855                                           ! 4200 }
29856 7D48           5D                         pop	bp
29857 7D49           C3                         ret
29858                                           ! 4201 void printf(s)
29859                                           ! Register BX used in function unknown
29860                                           ! 4202   Bit8u *s;
29861                                           export	_printf
29862                       00007D4A            _printf:
29863                                           !BCC_EOS
29864                                           ! 4203 {
29865                                           ! 4204   Bit8u c, format_char;
29866                                           !BCC_EOS
29867                                           ! 4205   Boolean in_format;
29868                                           !BCC_EOS
29869                                           ! 4206   unsigned format_width, i;
29870                                           !BCC_EOS
29871                                           ! 4207   Bit16u *arg_ptr;
29872                                           !BCC_EOS
29873                                           ! 4208   Bit16u arg_seg, arg, digit, nibble, shift_count;
29874                                           !BCC_EOS
29875                                           ! 4209   arg_ptr = &s;
29876 7D4A           55                         push	bp
29877 7D4B           89E5                       mov	bp,sp
29878 7D4D           83C4                   EC  add	sp,*-$14
29879                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29880 7D50           8D5E         04            lea	bx,4[bp]
29881 7D53           895E         F6            mov	-$A[bp],bx
29882                                           !BCC_EOS
29883                                           ! 4210   arg_s
29884                                           ! 4210 eg = get_SS();
29885                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29886 7D56           E8         FFD2            call	_get_SS
29887                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29888 7D59           8946         F4            mov	-$C[bp],ax
29889                                           !BCC_EOS
29890                                           ! 4211   in_format = 0;
29891                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29892 7D5C           31C0                       xor	ax,ax
29893 7D5E           8946         FC            mov	-4[bp],ax
29894                                           !BCC_EOS
29895                                           ! 4212   format_width = 0;
29896                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29897 7D61           31C0                       xor	ax,ax
29898 7D63           8946         FA            mov	-6[bp],ax
29899                                           !BCC_EOS
29900                                           ! 4213   while (c = read_byte(0xc000, s)) {
29901 7D66           E9         0106            br 	.2A0
29902                       00007D69            .2A1:
29903                                           ! 4214     if ( c == '%' ) {
29904                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29905 7D69           8A46         FF            mov	al,-1[bp]
29906 7D6C           3C                     25  cmp	al,*$25
29907 7D6E           75           0E            jne 	.2A2
29908                       00007D70            .2A3:
29909                                           ! 4215       in_format = 1;
29910                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29911 7D70           B8                   0001  mov	ax,*1
29912 7D73           8946         FC            mov	-4[bp],ax
29913                                           !BCC_EOS
29914                                           ! 4216       format_width = 0;
29915                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29916 7D76           31C0                       xor	ax,ax
29917 7D78           8946         FA            mov	-6[bp],ax
29918                                           !BCC_EOS
29919                                           ! 4217       }
29920                                           ! 4218     else if (in_format) {
29921 7D7B           E9         00EA            br 	.2A4
29922                       00007D7E            .2A2:
29923 7D7E           8B46         FC            mov	ax,-4[bp]
29924 7D81           85C0                       test	ax,ax
29925 7D83   7503    E9         00D0            beq 	.2A5
29926                       00007D88            .2A6:
29927                                           ! 4219       if ( (c>='0') && (c<='9') ) {
29928                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29929 7D88           8A46         FF            mov	al,-1[bp]
29930 7D8B           3C                     30  cmp	al,*$30
29931 7D8D           72           28            jb  	.2A7
29932                       00007D8F            .2A9:
29933                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29934 7D8F           8A46         FF            mov	al,-1[bp]
29935 7D92           3C                     39  cmp	al,*$39
29936 7D94           77           21            ja  	.2A7
29937                       00007D96            .2A8:
29938                                           ! 4220         format_width = (format_width * 10) + (c - '0');
29939                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29940 7D96           8A46         FF            mov	al,-1[bp]
29941 7D99           30E4                       xor	ah,ah
29942 7D9B           05                   FFD0  add	ax,*-$30
29943 7D9E           50                         push	ax
29944                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
29945 7D9F           8B46         FA            mov	ax,-6[bp]
29946 7DA2           89C2                       mov	dx,ax
29947 7DA4           D1E0                       shl	ax,*1
29948 7DA6           D1E0                       shl	ax,*1
29949 7DA8           01D0                       add	ax,dx
29950 7DAA           D1E0                       shl	ax,*1
29951                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
29952 7DAC           0346         EA            add	ax,-$16[bp]
29953 7DAF           44                         inc	sp
29954 7DB0           44                         inc	sp
29955                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
29956 7DB1           8946         FA            mov	-6[bp],ax
29957                                           !BCC_EOS
29958                                           ! 4221         }
29959                                           ! 4222       else if (c == 'x') {
29960 7DB4           E9         009F            br 	.2AA
29961                       00007DB7            .2A7:
29962                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
29963 7DB7           8A46         FF            mov	al,-1[bp]
29964 7DBA           3C                     78  cmp	al,*$78
29965 7DBC   7403    E9         0095            bne 	.2AB
29966                       00007DC1            .2AC:
29967                                           ! 4223         arg_ptr++;
29968                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29969 7DC1           8B5E         F6            mov	bx,-$A[bp]
29970 7DC4           43                         inc	bx
29971 7DC5           43                         inc	bx
29972 7DC6           895E         F6            mov	-$A[bp],bx
29973                                           !BCC_EOS
29974                                           ! 4224         arg = read_word(arg_seg, arg_ptr);
29975                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29976 7DC9           FF76         F6            push	-$A[bp]
29977                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
29978 7DCC           FF76         F4            push	-$C[bp]
29979                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29980 7DCF           E8         FEE0            call	_read_word
29981 7DD2           83C4                   04  add	sp,*4
29982                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
29983 7DD5           8946         F2            mov	-$E[bp],ax
29984                                           !BCC_EOS
29985                                           ! 4225         if (format_width == 0)
29986                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29987 7DD8           8B46         FA            mov	ax,-6[bp]
29988 7DDB           85C0                       test	ax,ax
29989 7DDD           75           06            jne 	.2AD
29990                       00007DDF            .2AE:
29991                                           ! 4226           format_width = 4;
29992                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
29993 7DDF           B8                   0004  mov	ax,*4
29994 7DE2           8946         FA            mov	-6[bp],ax
29995                                           !BCC_EOS
29996                                           ! 4227         i = 0;
29997                       00007DE5            .2AD:
29998                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
29999 7DE5           31C0                       xor	ax,ax
30000 7DE7           8946         F8            mov	-8[bp],ax
30001                                           !BCC_EOS
30002                                           ! 4228         digit = format_width - 1;
30003                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30004 7DEA           8B46         FA            mov	ax,-6[bp]
30005                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30006 7DED           48                         dec	ax
30007 7DEE           8946         F0            mov	-$10[bp],ax
30008                                           !BCC_EOS
30009                                           ! 4229         for (i=0; i<format_width; i++) {
30010                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30011 7DF1           31C0                       xor	ax,ax
30012 7DF3           8946         F8            mov	-8[bp],ax
30013                                           !BCC_EOS
30014                                           !BCC_EOS
30015 7DF6           EB           51            jmp .2B1
30016                       00007DF8            .2B2:
30017                                           ! 4230           nibble = (arg >> (4 * digit)) & 0x000f;
30018                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30019                                           ! Debug: expression subtree swapping
30020 7DF8           8B46         F0            mov	ax,-$10[bp]
30021 7DFB           D1E0                       shl	ax,*1
30022 7DFD           D1E0                       shl	ax,*1
30023                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30024 7DFF           89C3                       mov	bx,ax
30025 7E01           8B46         F2            mov	ax,-$E[bp]
30026 7E04           89D9                       mov	cx,bx
30027 7E06           D3E8                       shr	ax,cl
30028                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30029 7E08           24                     0F  and	al,*$F
30030                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30031 7E0A           30E4                       xor	ah,ah
30032 7E0C           8946         EE            mov	-$12[bp],ax
30033                                           !BCC_EOS
30034                                           ! 4231           if (nibble <= 9)
30035                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30036 7E0F           8B46         EE            mov	ax,-$12[bp]
30037 7E12           3D                   0009  cmp	ax,*9
30038 7E15           77           13            ja  	.2B3
30039                       00007E17            .2B4:
30040                                           ! 4232             outb(0x0500, nibble + '0');
30041                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30042 7E17           8B46         EE            mov	ax,-$12[bp]
30043                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30044 7E1A           05                   0030  add	ax,*$30
30045 7E1D           50                         push	ax
30046                                           ! Debug: list int = const $500 (used reg = )
30047 7E1E           B8                   0500  mov	ax,#$500
30048 7E21           50                         push	ax
30049                                           ! Debug: func () void = outb+0 (used reg = )
30050 7E22           E8         FEE6            call	_outb
30051 7E25           83C4                   04  add	sp,*4
30052                                           !BCC_EOS
30053                                           ! 4233           else
30054                                           ! 4234             outb(0x0500, (nibble - 10) + 'A');
30055 7E28           EB           11            jmp .2B5
30056                       00007E2A            .2B3:
30057                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30058 7E2A           8B46         EE            mov	ax,-$12[bp]
30059                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30060                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30061 7E2D           05                   0037  add	ax,*$37
30062 7E30           50                         push	ax
30063                                           ! Debug: list int = const $500 (used reg = )
30064 7E31           B8                   0500  mov	ax,#$500
30065 7E34           50                         push	ax
30066                                           ! Debug: func () void = outb+0 (used reg = )
30067 7E35           E8         FED3            call	_outb
30068 7E38           83C4                   04  add	sp,*4
30069                                           !BCC_EOS
30070                                           ! 4235           digit--;
30071                       00007E3B            .2B5:
30072                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30073 7E3B           8B46         F0            mov	ax,-$10[bp]
30074 7E3E           48                         dec	ax
30075 7E3F           8946         F0            mov	-$10[bp],ax
30076                                           !BCC_EOS
30077                                           ! 4236           }
30078                                           ! 4237         in_format = 0;
30079                       00007E42            .2B0:
30080                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30081 7E42           8B46         F8            mov	ax,-8[bp]
30082 7E45           40                         inc	ax
30083 7E46           8946         F8            mov	-8[bp],ax
30084                       00007E49            .2B1:
30085                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30086 7E49           8B46         F8            mov	ax,-8[bp]
30087 7E4C           3B46         FA            cmp	ax,-6[bp]
30088 7E4F           72           A7            jb 	.2B2
30089                       00007E51            .2B6:
30090                       00007E51            .2AF:
30091                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30092 7E51           31C0                       xor	ax,ax
30093 7E53           8946         FC            mov	-4[bp],ax
30094                                           !BCC_EOS
30095                                           ! 4238         }
30096                                           ! 4239       }
30097                       00007E56            .2AB:
30098                       00007E56            .2AA:
30099                                           ! 4240     else {
30100 7E56           EB           10            jmp .2B7
30101                       00007E58            .2A5:
30102                                           ! 4241       outb(0x0500, c);
30103                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30104 7E58           8A46         FF            mov	al,-1[bp]
30105 7E5B           30E4                       xor	ah,ah
30106 7E5D           50                         push	ax
30107                                           ! Debug: list int = const $500 (used reg = )
30108 7E5E           B8                   0500  mov	ax,#$500
30109 7E61           50                         push	ax
30110                                           ! Debug: func () void = outb+0 (used reg = )
30111 7E62           E8         FEA6            call	_outb
30112 7E65           83C4                   04  add	sp,*4
30113                                           !BCC_EOS
30114                                           ! 4242       }
30115                                           ! 4243     s ++;
30116                       00007E68            .2B7:
30117                       00007E68            .2A4:
30118                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30119 7E68           8B5E         04            mov	bx,4[bp]
30120 7E6B           43                         inc	bx
30121 7E6C           895E         04            mov	4[bp],bx
30122                                           !BCC_EOS
30123                                           ! 4244     }
30124                                           ! 4245 }
30125                       00007E6F            .2A0:
30126                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30127 7E6F           FF76         04            push	4[bp]
30128                                           ! Debug: list unsigned int = const $C000 (used reg = )
30129 7E72           B8                   C000  mov	ax,#$C000
30130 7E75           50                         push	ax
30131                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30132 7E76           E8         FE26            call	_read_byte
30133 7E79           83C4                   04  add	sp,*4
30134                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30135 7E7C           8846         FF            mov	-1[bp],al
30136 7E7F           84C0                       test	al,al
30137 7E81   7403    E9         FEE3            bne 	.2A1
30138                       00007E86            .2B8:
30139                       00007E86            .29F:
30140 7E86           89EC                       mov	sp,bp
30141 7E88           5D                         pop	bp
30142 7E89           C3                         ret
30143                                           ! 4246 #asm
30144                                           !BCC_ASM
30145                       00000002            _printf.s	set	2
30146                                           ;; DATA_SEG_DEFS_HERE
30147                                           ! 4248 endasm
30148                                           !BCC_ENDASM
30149                                           ! 4249 #asm
30150                                           !BCC_ASM
30151                       00000002            _printf.s	set	2
30152 7E8A                        76            .ascii "vgabios ends here"
30153 7E9B                        00            .byte 0x00
30154                       00007E9C            vgabios_end:
30155 7E9C                        CB            .byte 0xCB
30156                                           ;; BLOCK_STRINGS_BEGIN
30157                                           ! 4255 endasm
30158                                           !BCC_ENDASM
30159                                           ! 4256 
30160                                           ! Register BX used in function printf
30161                                           
30162                       00007E9D            .29E:
30163                       00007E9D            .2B9:
30164 7E9D                        2D            .ascii	"--> Unknown int10"
30165 7EAE                        0A            .byte	$A
30166 7EAF                        00            .byte	0
30167                       00007EB0            .29D:
30168                       00007EB0            .2BA:
30169 7EB0                        2D            .ascii	"--> Unimplemented"
30170 7EC1                        0A            .byte	$A
30171 7EC2                        00            .byte	0
30172                       00007EC3            .237:
30173                       00007EC3            .2BB:
30174 7EC3                        47            .ascii	"Get font info BH(%02x) was discarded"
30175 7EE7                        0A            .byte	$A
30176 7EE8                        00            .byte	0
30177                       00007EE9            .135:
30178                       00007EE9            .2BC:
30179 7EE9                        53            .ascii	"Scroll in graphics mode "
30180 7F01                        00            .byte	0
30181                       00007F02            .D0:
30182                       00007F02            .2BD:
30183 7F02                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
30184 7F27                        0A            .byte	$A
30185 7F28                        00            .byte	0
30186                       00007F29            .A5:
30187                       00007F29            .2BE:
30188 7F29                        53            .ascii	"Set active page %02x address %04x"
30189 7F4A                        0A            .byte	$A
30190 7F4B                        00            .byte	0
30191                       00007F4C            .4C:
30192                       00007F4C            .2BF:
30193 7F4C                        6D            .ascii	"mode search %02x found line %02x"
30194 7F6C                        0A            .byte	$A
30195 7F6D                        00            .byte	0
30196                       00007F6E            .3:
30197                       00007F6E            .2C0:
30198 7F6E                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
30199 7F96                        20            .ascii	" dx%04x"
30200 7F9D                        0A            .byte	$A
30201 7F9E                        00            .byte	0
30202 7F9F                                      .bss
30203                                           
30204                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3652 A   
.10                         0 367F A   .100                        0 4D5A A   
.101                        0 4CE7 A   .102                        0 4D2B A   
.103                        0 4D05 A   .104                        0 4CFE A   
.105                        0 4D53 A   .106                        0 4D64 A   
.107                        0 4DF6 A   .108                        0 4DF6 A   
.109                        0 4DE2 A   .10A                        0 4DE9 A   
.10B                        0 4D71 A   .10C                        0 4DAE A   
.10D                        0 4D88 A   .10E                        0 4D81 A   
.10F                        0 4DD6 A   .11                         0 367F A   
.110                        0 4DE2 A   .111                        0 4DE0 A   
.112                        0 4DF6 A   .113                        0 4DF9 A   
.114                        0 4E8C A   .115                        0 4E47 A   
.116                        0 4E35 A   .117                        0 4E23 A   
.118                        0 4E1C A   .119                        0 4E15 A   
.11A                        0 4FD3 A   .11B                        0 4EAF A   
.11C                        0 4E93 A   .11D                        0 4F43 A   
.11E                        0 4EB9 A   .11F                        0 4F40 A   
.12                         0 367F A   .120                        0 4F2F A   
.121                        0 4F36 A   .122                        0 4EC3 A   
.123                        0 4F07 A   .124                        0 4EE1 A   
.125                        0 4EDA A   .126                        0 4F2F A   
.127                        0 4F40 A   .128                        0 4FD3 A   
.129                        0 4FD3 A   .12A                        0 4FBF A   
.12B                        0 4FC6 A   .12C                        0 4F4E A   
.12D                        0 4F8B A   .12E                        0 4F65 A   
.12F                        0 4F5E A   .13                         0 368B A   
.130                        0 4FB3 A   .131                        0 4FBF A   
.132                        0 4FBD A   .133                        0 4FD3 A   
.134                        0 4FD5 A   .135                        0 7EE9 A   
.136                        0 5036 A   .137                        0 5032 A   
.138                        0 50F5 A   .139                        0 5097 A   
.13A                        0 50F8 A   .13B                        0 5129 A   
.13D                        0 511F A   .13E                        0 5107 A   
.13F                        0 510F A   .14                         0 36BA A   
.140                        0 5117 A   .141                        0 5196 A   
.142                        0 5186 A   .143                        0 51A4 A   
.144                        0 525E A   .145                        0 524C A   
.146                        0 5253 A   .147                        0 51AC A   
.148                        0 524C A   .149                        0 523B A   
.14A                        0 5242 A   .14B                        0 51C9 A   
.14C                        0 522B A   .14D                        0 5214 A   
.14E                        0 523B A   .14F                        0 524C A   
.15                         0 36AA A   .150                        0 525E A   
.151                        0 5473 A   .152                        0 5462 A   
.153                        0 5469 A   .154                        0 52B4 A   
.155                        0 52D8 A   .156                        0 52CF A   
.157                        0 539A A   .158                        0 52E7 A   
.159                        0 5302 A   .15A                        0 52F0 A   
.15B                        0 5307 A   .15C                        0 5384 A   
.15D                        0 5376 A   .15E                        0 537D A   
.15F                        0 530E A   .16                         0 36BF A   
.160                        0 536C A   .161                        0 5325 A   
.162                        0 534E A   .163                        0 532E A   
.164                        0 536C A   .165                        0 5384 A   
.166                        0 5462 A   .167                        0 5462 A   
.168                        0 5458 A   .169                        0 539D A   
.16A                        0 53B8 A   .16B                        0 53A6 A   
.16C                        0 53BD A   .16D                        0 543E A   
.16E                        0 5430 A   .16F                        0 5437 A   
.17                         0 36D6 A   .170                        0 53C4 A   
.171                        0 5426 A   .172                        0 53DB A   
.173                        0 5406 A   .174                        0 53E4 A   
.175                        0 5426 A   .176                        0 543E A   
.177                        0 5462 A   .178                        0 5473 A   
.179                        0 5548 A   .17A                        0 5537 A   
.17B                        0 553E A   .17C                        0 54BD A   
.17D                        0 5537 A   .17E                        0 5529 A   
.17F                        0 5530 A   .18                         0 36EA A   
.180                        0 54E3 A   .181                        0 5505 A   
.182                        0 54FF A   .183                        0 5537 A   
.184                        0 5548 A   .185                        0 557C A   
.186                        0 5578 A   .187                        0 5647 A   
.188                        0 55DD A   .189                        0 5742 A   
.18A                        0 5742 A   .18B                        0 5729 A   
.18C                        0 567C A   .18D                        0 5722 A   
.18F                        0 570A A   .19                         0 3703 A   
.190                        0 5690 A   .191                        0 5690 A   
.192                        0 56B9 A   .193                        0 56E2 A   
.194                        0 5705 A   .195                        0 5742 A   
.196                        0 5735 A   .197                        0 5776 A   
.198                        0 5772 A   .199                        0 5845 A   
.19A                        0 57D7 A   .19B                        0 5842 A   
.19C                        0 5836 A   .19D                        0 580D A   
.19E                        0 5842 A   .19F                        0 5940 A   
.1A                         0 371D A   .1A0                        0 5940 A   
.1A1                        0 5927 A   .1A2                        0 587A A   
.1A3                        0 5920 A   .1A5                        0 5908 A   
.1A6                        0 588E A   .1A7                        0 588E A   
.1A8                        0 58B7 A   .1A9                        0 58E0 A   
.1AA                        0 5903 A   .1AB                        0 5940 A   
.1AC                        0 5933 A   .1AD                        0 59EF A   
.1AE                        0 59EB A   .1AF                        0 5A09 A   
.1B                         0 372B A   .1B0                        0 5A05 A   
.1B1                        0 5C5F A   .1B3                        0 5C44 A   
.1B4                        0 5A1E A   .1B5                        0 5A1E A   
.1B6                        0 5A9F A   .1B7                        0 5A91 A   
.1B8                        0 5AC4 A   .1B9                        0 5AF6 A   
.1BA                        0 5ADA A   .1BB                        0 5B10 A   
.1BC                        0 5B22 A   .1BD                        0 5B19 A   
.1BE                        0 5B8E A   .1BF                        0 5B48 A   
.1C                         0 3766 A   .1C0                        0 5BCE A   
.1C1                        0 5BE2 A   .1C2                        0 5BD7 A   
.1C3                        0 5BF8 A   .1C4                        0 5C0D A   
.1C5                        0 5C3F A   .1C6                        0 5C99 A   
.1C7                        0 5C95 A   .1C8                        0 5CB3 A   
.1C9                        0 5CAF A   .1CA                        0 5E4D A   
.1CC                        0 5E32 A   .1CD                        0 5CC8 A   
.1CE                        0 5CC8 A   .1CF                        0 5D5C A   
.1D                         0 37A0 A   .1D0                        0 5D4E A   
.1D1                        0 5D55 A   .1D2                        0 5D0A A   
.1D3                        0 5D4E A   .1D4                        0 5D3A A   
.1D5                        0 5D5C A   .1D6                        0 5D5F A   
.1D7                        0 5D8B A   .1D8                        0 5D82 A   
.1D9                        0 5DD6 A   .1DA                        0 5DB1 A   
.1DB                        0 5DF7 A   .1DC                        0 5DF9 A   
.1DD                        0 5E28 A   .1DE                        0 5E8D A   
.1DF                        0 5E7C A   .1E                         0 37B5 A   
.1E0                        0 5EB7 A   .1E1                        0 5EB3 A   
.1E2                        0 6121 A   .1E4                        0 60FB A   
.1E5                        0 5F08 A   .1E6                        0 5F0B A   
.1E7                        0 5F19 A   .1E8                        0 5F12 A   
.1E9                        0 5F1C A   .1EA                        0 5F24 A   
.1EB                        0 5F2E A   .1EC                        0 5F7B A   
.1ED                        0 5F70 A   .1EE                        0 5F2E A   
.1EF                        0 5F7B A   .1F                         0 37D5 A   
.1F0                        0 5F7E A   .1F1                        0 6019 A   
.1F2                        0 5F97 A   .1F3                        0 6016 A   
.1F4                        0 5FF3 A   .1F5                        0 60F2 A   
.1F6                        0 60F2 A   .1F8                        0 60DA A   
.1F9                        0 6060 A   .1FA                        0 6060 A   
.1FB                        0 6089 A   .1FC                        0 60B2 A   
.1FD                        0 60D5 A   .1FE                        0 6137 A   
.1FF                        0 612B A   .2                          0 3632 A   
.20                         0 37F5 A   .200                        0 620E A   
.201                        0 6144 A   .202                        0 61DE A   
.203                        0 615D A   .204                        0 6205 A   
.205                        0 65BF A   .206                        0 65AD A   
.207                        0 65B4 A   .208                        0 64F6 A   
.209                        0 6569 A   .20A                        0 6563 A   
.20B                        0 65BF A   .20C                        0 66A0 A   
.20D                        0 6690 A   .20E                        0 66B8 A   
.20F                        0 67FD A   .21                         0 3812 A   
.210                        0 67EE A   .211                        0 67F5 A   
.212                        0 67B1 A   .213                        0 67FD A   
.214                        0 6812 A   .215                        0 6807 A   
.216                        0 6896 A   .217                        0 6887 A   
.218                        0 688E A   .219                        0 684D A   
.21A                        0 6896 A   .21B                        0 68A9 A   
.21C                        0 68A0 A   .21D                        0 6927 A   
.21E                        0 6918 A   .21F                        0 691F A   
.22                         0 382D A   .220                        0 68E4 A   
.221                        0 6927 A   .222                        0 693A A   
.223                        0 6931 A   .224                        0 69C5 A   
.225                        0 69B6 A   .226                        0 69BD A   
.227                        0 6982 A   .228                        0 69C5 A   
.229                        0 69D8 A   .22A                        0 69CF A   
.22B                        0 6B8E A   .22D                        0 6B69 A   
.22E                        0 6A15 A   .22F                        0 6A4C A   
.23                         0 384A A   .230                        0 6A83 A   
.231                        0 6AA6 A   .232                        0 6AC9 A   
.233                        0 6AEC A   .234                        0 6B0F A   
.235                        0 6B31 A   .236                        0 6B53 A   
.237                        0 7EC3 A   .238                        0 6B8C A   
.239                        0 6B7C A   .23A                        0 6D49 A   
.23B                        0 6D37 A   .23C                        0 6DD3 A   
.23D                        0 6DC7 A   .23E                        0 6D78 A   
.23F                        0 6DAB A   .24                         0 3859 A   
.240                        0 6D96 A   .241                        0 6DD3 A   
.242                        0 6DEB A   .243                        0 6DDC A   
.244                        0 6FB6 A   .245                        0 6FAD A   
.246                        0 6FC8 A   .247                        0 6FBF A   
.248                        0 6FDA A   .249                        0 6FD1 A   
.24A                        0 728E A   .24B                        0 7028 A   
.24C                        0 7113 A   .24D                        0 7104 A   
.24E                        0 710B A   .24F                        0 70D8 A   
.25                         0 39A7 A   .250                        0 7113 A   
.251                        0 7181 A   .252                        0 7172 A   
.253                        0 7179 A   .254                        0 7146 A   
.255                        0 7181 A   .256                        0 71D4 A   
.257                        0 71C5 A   .258                        0 71CC A   
.259                        0 7188 A   .25A                        0 71D4 A   
.25B                        0 721F A   .25C                        0 7210 A   
.25D                        0 7217 A   .25E                        0 71E4 A   
.25F                        0 721F A   .260                        0 750A A   
.261                        0 729A A   .262                        0 743B A   
.263                        0 742C A   .264                        0 7433 A   
.265                        0 7404 A   .266                        0 743B A   
.267                        0 75CB A   .268                        0 7516 A   
.269                        0 75B5 A   .26A                        0 75A6 A   
.26B                        0 75AD A   .26C                        0 7587 A   
.26D                        0 75B5 A   .26E                        0 788E A   
.26F                        0 75E4 A   .27                         0 3943 A   
.270                        0 7653 A   .271                        0 7644 A   
.272                        0 764B A   .273                        0 7617 A   
.274                        0 7653 A   .275                        0 76D8 A   
.276                        0 76C9 A   .277                        0 76D0 A   
.278                        0 7694 A   .279                        0 76C2 A   
.27A                        0 769C A   .27B                        0 76D8 A   
.27C                        0 76FA A   .27D                        0 76F2 A   
.27E                        0 779B A   .27F                        0 778C A   
.28                         0 385F A   .280                        0 7793 A   
.281                        0 7757 A   .282                        0 779B A   
.283                        0 77F4 A   .284                        0 77E5 A   
.285                        0 77EC A   .286                        0 77B8 A   
.287                        0 77F4 A   .288                        0 7B0A A   
.289                        0 789A A   .28A                        0 7A3B A   
.28B                        0 7A2C A   .28C                        0 7A33 A   
.28D                        0 7A04 A   .28E                        0 7A3B A   
.28F                        0 7BAC A   .29                         0 385F A   
.290                        0 7B16 A   .291                        0 7B98 A   
.292                        0 7B89 A   .293                        0 7B90 A   
.294                        0 7B69 A   .295                        0 7B98 A   
.296                        0 7BEE A   .297                        0 7BE0 A   
.298                        0 7BE7 A   .299                        0 7BC4 A   
.29A                        0 7BE0 A   .29B                        0 7BD8 A   
.29C                        0 7BEE A   .29D                        0 7EB0 A   
.29E                        0 7E9D A   .29F                        0 7E86 A   
.2A                         0 3888 A   .2A0                        0 7E6F A   
.2A1                        0 7D69 A   .2A2                        0 7D7E A   
.2A3                        0 7D70 A   .2A4                        0 7E68 A   
.2A5                        0 7E58 A   .2A6                        0 7D88 A   
.2A7                        0 7DB7 A   .2A8                        0 7D96 A   
.2A9                        0 7D8F A   .2AA                        0 7E56 A   
.2AB                        0 7E56 A   .2AC                        0 7DC1 A   
.2AD                        0 7DE5 A   .2AE                        0 7DDF A   
.2AF                        0 7E51 A   .2B                         0 3888 A   
.2B0                        0 7E42 A   .2B1                        0 7E49 A   
.2B2                        0 7DF8 A   .2B3                        0 7E2A A   
.2B4                        0 7E17 A   .2B5                        0 7E3B A   
.2B6                        0 7E51 A   .2B7                        0 7E68 A   
.2B8                        0 7E86 A   .2B9                        0 7E9D A   
.2BA                        0 7EB0 A   .2BB                        0 7EC3 A   
.2BC                        0 7EE9 A   .2BD                        0 7F02 A   
.2BE                        0 7F29 A   .2BF                        0 7F4C A   
.2C                         0 389D A   .2C0                        0 7F6E A   
.2D                         0 389D A   .2E                         0 38B2 A   
.2F                         0 38B2 A   .3                          0 7F6E A   
.30                         0 38C7 A   .31                         0 38D6 A   
.32                         0 38F4 A   .33                         0 3902 A   
.34                         0 3910 A   .35                         0 391E A   
.36                         0 393E A   .37                         0 39AA A   
.38                         0 39FC A   .3A                         0 39EE A   
.3B                         0 39AF A   .3C                         0 39B4 A   
.3D                         0 39D2 A   .3E                         0 39E9 A   
.3F                         0 39FF A   .4                          0 3AF8 A   
.40                         0 3A33 A   .41                         0 3A4F A   
.42                         0 3A98 A   .44                         0 3A8A A   
.45                         0 3A54 A   .46                         0 3A63 A   
.47                         0 3A74 A   .48                         0 3A85 A   
.49                         0 3AA4 A   .4A                         0 3AF6 A   
.4B                         0 3ABC A   .4C                         0 7F4C A   
.4D                         0 3B40 A   .4E                         0 3B3C A   
.4F                         0 3D15 A   .50                         0 3BCF A   
.51                         0 3C41 A   .53                         0 3C31 A   
.54                         0 3C0F A   .55                         0 3C17 A   
.56                         0 3C1F A   .57                         0 3C27 A   
.58                         0 3CFF A   .59                         0 3CED A   
.5A                         0 3CF4 A   .5B                         0 3C49 A   
.5C                         0 3CC6 A   .5D                         0 3C6A A   
.5E                         0 3CED A   .5F                         0 3CFF A   
.6                          0 3AA9 A   .60                         0 3D15 A   
.61                         0 3D08 A   .62                         0 3D65 A   
.63                         0 3D56 A   .64                         0 3D5D A   
.65                         0 3D25 A   .66                         0 3D65 A   
.67                         0 3DEA A   .68                         0 3DDB A   
.69                         0 3DE2 A   .6A                         0 3DA3 A   
.6B                         0 3DEA A   .6C                         0 3E31 A   
.6D                         0 3E22 A   .6E                         0 3E29 A   
.6F                         0 3DF1 A   .7                          0 3661 A   
.70                         0 3E31 A   .71                         0 3E4C A   
.72                         0 3E47 A   .73                         0 3E4F A   
.74                         0 3EA6 A   .75                         0 3E97 A   
.76                         0 3E9E A   .77                         0 3E66 A   
.78                         0 3EA6 A   .79                         0 3FA7 A   
.7A                         0 3EE6 A   .7B                         0 3F22 A   
.7C                         0 3EFC A   .7D                         0 3FA7 A   
.7E                         0 3F4D A   .7F                         0 3F29 A   
.8                          0 36BC A   .80                         0 3FA7 A   
.81                         0 40E4 A   .82                         0 40D6 A   
.83                         0 4106 A   .84                         0 40F7 A   
.85                         0 40FE A   .86                         0 40EB A   
.87                         0 4106 A   .88                         0 4132 A   
.89                         0 4124 A   .8A                         0 4197 A   
.8C                         0 4188 A   .8D                         0 414A A   
.8E                         0 415E A   .8F                         0 4172 A   
.90                         0 4265 A   .91                         0 4215 A   
.92                         0 420E A   .93                         0 4207 A   
.94                         0 41FF A   .95                         0 423E A   
.96                         0 4229 A   .97                         0 4252 A   
.98                         0 42C7 A   .99                         0 42C3 A   
.9A                         0 43B3 A   .9B                         0 42FB A   
.9C                         0 43EB A   .9D                         0 43E7 A   
.9E                         0 443D A   .9F                         0 4439 A   
.A                          0 3697 A   .A0                         0 4467 A   
.A1                         0 4463 A   .A2                         0 44FF A   
.A3                         0 4491 A   .A4                         0 4523 A   
.A5                         0 7F29 A   .A6                         0 465E A   
.A7                         0 464F A   .A8                         0 4656 A   
.A9                         0 4613 A   .AA                         0 465E A   
.AB                         0 46E9 A   .AC                         0 46DA A   
.AD                         0 46E1 A   .AE                         0 46B0 A   
.AF                         0 46E9 A   .B                          0 3673 A   
.B0                         0 480A A   .B1                         0 47F8 A   
.B2                         0 47FF A   .B3                         0 4757 A   
.B4                         0 47B6 A   .B5                         0 4760 A   
.B6                         0 47F8 A   .B7                         0 480A A   
.B8                         0 48BF A   .B9                         0 48B0 A   
.BA                         0 48B7 A   .BB                         0 4842 A   
.BC                         0 4883 A   .BD                         0 484B A   
.BE                         0 48B0 A   .BF                         0 48BF A   
.C                          0 367F A   .C0                         0 48D5 A   
.C1                         0 48D1 A   .C2                         0 48E1 A   
.C3                         0 48DD A   .C4                         0 490B A   
.C5                         0 4907 A   .C6                         0 4948 A   
.C7                         0 4937 A   .C8                         0 4959 A   
.C9                         0 4952 A   .CA                         0 496A A   
.CB                         0 4963 A   .CC                         0 4979 A   
.CD                         0 4974 A   .CE                         0 4C0D A   
.CF                         0 49A1 A   .D                          0 367F A   
.D0                         0 7F02 A   .D1                         0 4A44 A   
.D2                         0 4A0F A   .D3                         0 49FD A   
.D4                         0 49EB A   .D5                         0 49E4 A   
.D6                         0 49DD A   .D7                         0 4C0A A   
.D8                         0 4B2B A   .D9                         0 4A4E A   
.DA                         0 4B28 A   .DB                         0 4B14 A   
.DC                         0 4B1B A   .DD                         0 4A59 A   
.DE                         0 4AB9 A   .DF                         0 4A77 A   
.E                          0 367F A   .E0                         0 4A70 A   
.E1                         0 4B14 A   .E2                         0 4B28 A   
.E3                         0 4C0A A   .E4                         0 4C0A A   
.E5                         0 4BF6 A   .E6                         0 4BFD A   
.E7                         0 4B36 A   .E8                         0 4B8F A   
.E9                         0 4B4D A   .EA                         0 4B46 A   
.EB                         0 4BEA A   .EC                         0 4BF6 A   
.ED                         0 4BF4 A   .EE                         0 4C0A A   
.EF                         0 4FFA A   .F                          0 367F A   
.F0                         0 4FFA A   .F2                         0 4FE3 A   
.F3                         0 4C3F A   .F4                         0 4C3F A   
.F5                         0 4CD3 A   .F6                         0 4C7E A   
.F7                         0 4C6C A   .F8                         0 4C5A A   
.F9                         0 4C53 A   .FA                         0 4C49 A   
.FB                         0 4DF6 A   .FC                         0 4D67 A   
.FD                         0 4CDD A   .FE                         0 4D64 A   
.FF                         0 4D53 A   _biosfn_alternate_prtsc     0 6BEF A   
_biosfn_enable_video_refre+ 0 6D0E A   _biosfn_get_cursor_pos      0 43B7 A   
_biosfn_get_font_info       0 6A04 A   _biosfn_load_gfx_8_14_char+ 0 69EC A   
_biosfn_load_gfx_8_16_char+ 0 69FC A   _biosfn_load_gfx_8_8_chars  0 69DC A   
_biosfn_load_gfx_8_8_dd_ch+ 0 69F4 A   _biosfn_load_gfx_user_char+ 0 69E4 A   
_biosfn_load_text_8_14_pat  0 6816 A   _biosfn_load_text_8_16_pat  0 694B A   
_biosfn_load_text_8_8_pat   0 68AD A   _biosfn_load_text_user_pat  0 677A A   
_biosfn_perform_gray_scale+ 0 64D2 A   _biosfn_read_char_attr      0 4FFE A   
_biosfn_read_pixel          0 5C63 A   _biosfn_read_state_info     0 6E62 A   
_biosfn_read_video_state_s+ 0 6FE1 A   _biosfn_read_video_state_s+ 0 6F9A A   
_biosfn_restore_video_stat+ 0 75D2 A   _biosfn_save_video_state    0 7005 A   
_biosfn_scroll              0 48C3 A   _biosfn_set_active_page     0 442C A   
_biosfn_set_cursor_pos      0 42B6 A   _biosfn_set_cursor_shape    0 419B A   
_biosfn_set_video_mode      0 3AFA A   _biosfn_switch_video_inter+ 0 6D06 A   
_biosfn_write_char_attr     0 554C A   _biosfn_write_char_only     0 5746 A   
_biosfn_write_pixel         0 59BF A   _biosfn_write_string        0 6D16 A   
_biosfn_write_teletype      0 5E6F A   _dac_regs                   0 0254 A   
_display_info               0 35DE A   _display_splash_screen      0 35DD A   
_display_string             0 35FC A   _find_vga_entry             0 7BB3 A   
_get_SS                     0 7D2B A E _get_font_access            0 65DA A   
_inb                        0 7CF5 A E _int10_debugmsg             0 3623 A   
_int10_func                 0 3654 A   _inw                        0 7D00 A E 
_line_to_vpti               0 0244 A   _memcpyb                    0 7C3F A   
_memcpyw                    0 7C6F A   _memsetb                    0 7BF5 A   
_memsetw                    0 7C1A A   _outb                       0 7D0B A E 
_outw                       0 7D1B A E _palette0                   0 09D8 A   
_palette1                   0 0A98 A   _palette2                   0 0B58 A   
_palette3                   0 0C18 A   _printf                     0 7D4A A E 
_read_byte                  0 7C9F A   _read_word                  0 7CB2 A   
_release_font_access        0 65FD A   _set_scan_lines             0 6631 A   
_static_functionality       0 0F18 A   _unimplemented              0 7D2E A E 
_unknown                    0 7D3C A E _vga_modes                  0 01C4 A   
_vgafont14                  0 1728 A   _vgafont14alt               0 3528 A   
_vgafont16                  0 2528 A   _vgafont16alt               0 3529 A   
_vgafont8                   0 0F28 A   _vgamem_copy_cga            0 46FB A   
_vgamem_copy_pl4            0 45AE A   _vgamem_fill_cga            0 480E A   
_vgamem_fill_pl4            0 4670 A   _video_param_table          0 0258 A   
_video_save_pointer_table   0 35C1 A   _write_byte                 0 7CC5 A   
_write_gfx_char_cga         0 5271 A   _write_gfx_char_lin         0 5477 A   
_write_gfx_char_pl4         0 50FC A   _write_word                 0 7CDD A   
biosfn_enable_cursor_emula+ 0 6CE4 A   biosfn_enable_default_pale+ 0 6C80 A   
biosfn_enable_grayscale_su+ 0 6CC0 A   biosfn_enable_video_addres+ 0 6CA2 A   
biosfn_get_all_palette_reg  0 6377 A   biosfn_get_ega_info         0 6BCC A   
biosfn_get_single_palette_+ 0 6345 A   biosfn_get_video_mode       0 623F A   
biosfn_group_0B             0 5944 A   biosfn_group_10             0 6266 A   
biosfn_group_1A             0 6DEF A   biosfn_read_all_dac_reg     0 6457 A   
biosfn_read_display_code    0 6DFB A   biosfn_read_overscan_borde+ 0 6369 A   
biosfn_read_pel_mask        0 648A A   biosfn_read_single_dac_reg  0 643C A   
biosfn_read_video_dac_stat+ 0 6495 A   biosfn_select_vert_res      0 6BF7 A   
biosfn_select_video_dac_co+ 0 63F9 A   biosfn_set_all_dac_reg      0 63D1 A   
biosfn_set_all_palette_reg  0 62F2 A   biosfn_set_border_color     0 5952 A   
biosfn_set_display_code     0 6E10 A   biosfn_set_overscan_border+ 0 62EA A   
biosfn_set_palette          0 5991 A   biosfn_set_pel_mask         0 647F A   
biosfn_set_single_dac_reg   0 63B8 A   biosfn_set_single_palette_+ 0 62D0 A   
biosfn_set_text_block_spec+ 0 693E A   biosfn_toggle_intensity     0 631F A   
get_dac_16_page             0 64C5 A   get_palette_loop            0 637F A   
idiv_u                      0 662C A   init_bios_area              0 3589 A   
init_vga_card               0 352A A   int10_end                   0 01C2 A   
int10_group_10_unknown      0 62CC A   int10_normal                0 01B4 A   
int10_test_0B               0 0150 A   int10_test_1001             0 626C A   
int10_test_1002             0 6272 A   int10_test_1003             0 6278 A   
int10_test_1007             0 627F A   int10_test_1008             0 6286 A   
int10_test_1009             0 628D A   int10_test_1010             0 6294 A   
int10_test_1012             0 629B A   int10_test_1013             0 62A2 A   
int10_test_1015             0 62A9 A   int10_test_1017             0 62B0 A   
int10_test_1018             0 62B7 A   int10_test_1019             0 62BE A   
int10_test_101A             0 62C5 A   int10_test_101B             0 01A5 A   
int10_test_1103             0 015A A   int10_test_12               0 0164 A   
int10_test_1A               0 0146 A   int10_test_BL30             0 0173 A   
int10_test_BL31             0 017D A   int10_test_BL32             0 0187 A   
int10_test_BL33             0 0191 A   int10_test_BL34             0 019B A   
memcpyb_end                 0 7C67 A   memcpyw_end                 0 7C97 A   
memsetb_end                 0 7C14 A   memsetw_end                 0 7C39 A   
mode_ega_color              0 6BEC A   msg_alt_dcc                 0 6E34 A   
msg_vert_res                0 6C59 A   msg_vga_init                0 3546 A   
no_actl_reg1                0 62E9 A   no_actl_reg2                0 6368 A   
read_dac_loop               0 6468 A   set_actl_normal             0 6435 A   
set_cga_palette_loop        0 599E A   set_dac_16_page             0 642F A   
set_dac_loop                0 63E2 A   set_dac_page                0 641C A   
set_intensity_loop          0 5970 A   set_low_border              0 596A A   
set_palette_loop            0 6301 A   set_retcode                 0 6C52 A   
set_vert_res                0 6C48 A   vert_res_200                0 6C3E A   
vert_res_350                0 6C34 A   vert_res_400                0 6C28 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 7E9C A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 012D A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
