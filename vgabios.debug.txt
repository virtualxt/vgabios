00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 void dispi_set_enable(enable);
00012                                           !BCC_EOS
00013                                           ! 6 Boolean vbe_has_vbe_display();
00014                                           !BCC_EOS
00015                                           ! 7 void vbe_biosfn_return_controller_information(AX, ES, DI);
00016                                           !BCC_EOS
00017                                           ! 8 void vbe_biosfn_return_mode_information(AX, CX, ES, DI);
00018                                           !BCC_EOS
00019                                           ! 9 void vbe_biosfn_set_mode(AX, BX, ES, DI);
00020                                           !BCC_EOS
00021                                           ! 10 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX);
00022                                           !BCC_EOS
00023                                           ! 11 void vbe_biosfn_set_get_palette_data(AX);
00024                                           !BCC_EOS
00025                                           ! 12 void vbe_biosfn_return_protected_mode_interface(AX);
00026                                           !BCC_EOS
00027                                           ! 13 typedef struct VbeInfoBlock
00028                                           ! 14 {
00029                                           ! 15    Bit8u VbeSignature[4];
00030                                           !BCC_EOS
00031                                           ! 16    Bit16u VbeVersion;
00032                                           !BCC_EOS
00033                                           ! 17    Bit16u OemStringPtr_Off;
00034                                           !BCC_EOS
00035                                           ! 18    Bit16u OemStringPtr_Seg;
00036                                           !BCC_EOS
00037                                           ! 19    Bit8u Capabilities[4];
00038                                           !BCC_EOS
00039                                           ! 20    Bit16u VideoModePtr_Off;
00040                                           !BCC_EOS
00041                                           ! 21    Bit16u VideoModePtr_Seg;
00042                                           !BCC_EOS
00043                                           ! 22    Bit16u TotalMemory;
00044                                           !BCC_EOS
00045                                           ! 23    Bit16u OemSoftwareRev;
00046                                           !BCC_EOS
00047                                           ! 24    Bit16u OemVendorNamePtr_Off;
00048                                           !BCC_EOS
00049                                           ! 25    Bit16u OemVendorNamePtr_Seg;
00050                                           !BCC_EOS
00051                                           ! 26    Bit16u OemProductNamePtr_Off;
00052                                           !BCC_EOS
00053                                           ! 27    Bit16u OemProductNamePtr_Seg;
00054                                           !BCC_EOS
00055                                           ! 28    Bit16u OemProductRevPtr_Off;
00056                                           !BCC_EOS
00057                                           ! 29    Bit16u OemProductRevPtr_Seg;
00058                                           !BCC_EOS
00059                                           ! 30    Bit16u Reserved[111];
00060                                           !BCC_EOS
00061                                           ! 31    Bit8u OemData[256];
00062                                           !BCC_EOS
00063                                           ! 32 } VbeInfoBlock;
00064                                           !BCC_EOS
00065                                           ! 33 typedef struct ModeInfoBlockCompact
00066                                           ! 34 {
00067                                           ! 35    Bit16u ModeAttributes;
00068                                           !BCC_EOS
00069                                           ! 36    Bit8u WinAAttributes;
00070                                           !BCC_EOS
00071                                           ! 37    Bit8u WinBAttributes;
00072                                           !BCC_EOS
00073                                           ! 38    Bit16u WinGranularity;
00074                                           !BCC_EOS
00075                                           ! 39    Bit16u WinSize;
00076                                           !BCC_EOS
00077                                           ! 40    Bit16u WinASegment;
00078                                           !BCC_EOS
00079                                           ! 41    Bit16u WinBSegment;
00080                                           !BCC_EOS
00081                                           ! 42    Bit32u WinFuncPtr;
00082                                           !BCC_EOS
00083                                           ! 43    Bit16u BytesPerScanLine;
00084                                           !BCC_EOS
00085                                           ! 44    Bit16u XResolution;
00086                                           !BCC_EOS
00087                                           ! 45    Bit16u YResolution;
00088                                           !BCC_EOS
00089                                           ! 46    Bit8u XCharSize;
00090                                           !BCC_EOS
00091                                           ! 47    Bit8u YCharSize;
00092                                           !BCC_EOS
00093                                           ! 48    Bit8u NumberOfPlanes;
00094                                           !BCC_EOS
00095                                           ! 49    Bit8u BitsPerPixel;
00096                                           !BCC_EOS
00097                                           ! 50    Bit8u NumberOfBanks;
00098                                           !BCC_EOS
00099                                           ! 51    Bit8u MemoryModel;
00100                                           !BCC_EOS
00101                                           ! 52    Bit8u BankSize;
00102                                           !BCC_EOS
00103                                           ! 53    Bit8u NumberOfImagePages;
00104                                           !BCC_EOS
00105                                           ! 54    Bit8u Reserved_page;
00106                                           !BCC_EOS
00107                                           ! 55    Bit8u RedMaskSize;
00108                                           !BCC_EOS
00109                                           ! 56    Bit8u RedFieldPosition;
00110                                           !BCC_EOS
00111                                           ! 57    Bit8u GreenMaskSize;
00112                                           !BCC_EOS
00113                                           ! 58    Bit8u GreenFieldPosition;
00114                                           !BCC_EOS
00115                                           ! 59    Bit8u BlueMaskSize;
00116                                           !BCC_EOS
00117                                           ! 60    Bit8u BlueFieldPosition;
00118                                           !BCC_EOS
00119                                           ! 61    Bit8u RsvdMaskSize;
00120                                           !BCC_EOS
00121                                           ! 62    Bit8u RsvdFieldPosition;
00122                                           !BCC_EOS
00123                                           ! 63    Bit8u DirectColorModeInfo;
00124                                           !BCC_EOS
00125                                           ! 64    Bit32u PhysBasePtr;
00126                                           !BCC_EOS
00127                                           ! 65    Bit32u OffScreenMemOffset;
00128                                           !BCC_EOS
00129                                           ! 66    Bit16u OffScreenMemSize;
00130                                           !BCC_EOS
00131                                           ! 67    Bit16u LinBytesPerScanLine;
00132                                           !BCC_EOS
00133                                           ! 68    Bit8u BnkNumberOfPages;
00134                                           !BCC_EOS
00135                                           ! 69    Bit8u LinNumberOfPages;
00136                                           !BCC_EOS
00137                                           ! 70    Bit8u LinRedMaskSize;
00138                                           !BCC_EOS
00139                                           ! 71    Bit8u LinRedFieldPosition;
00140                                           !BCC_EOS
00141                                           ! 72    Bit8u LinGreenMaskSize;
00142                                           !BCC_EOS
00143                                           ! 73    Bit8u LinGreenFi
00144                                           ! 73 eldPosition;
00145                                           !BCC_EOS
00146                                           ! 74    Bit8u LinBlueMaskSize;
00147                                           !BCC_EOS
00148                                           ! 75    Bit8u LinBlueFieldPosition;
00149                                           !BCC_EOS
00150                                           ! 76    Bit8u LinRsvdMaskSize;
00151                                           !BCC_EOS
00152                                           ! 77    Bit8u LinRsvdFieldPosition;
00153                                           !BCC_EOS
00154                                           ! 78    Bit32u MaxPixelClock;
00155                                           !BCC_EOS
00156                                           ! 79 } ModeInfoBlockCompact;
00157                                           !BCC_EOS
00158                                           ! 80 typedef struct ModeInfoBlock
00159                                           ! 81 {
00160                                           ! 82    Bit16u ModeAttributes;
00161                                           !BCC_EOS
00162                                           ! 83    Bit8u WinAAttributes;
00163                                           !BCC_EOS
00164                                           ! 84    Bit8u WinBAttributes;
00165                                           !BCC_EOS
00166                                           ! 85    Bit16u WinGranularity;
00167                                           !BCC_EOS
00168                                           ! 86    Bit16u WinSize;
00169                                           !BCC_EOS
00170                                           ! 87    Bit16u WinASegment;
00171                                           !BCC_EOS
00172                                           ! 88    Bit16u WinBSegment;
00173                                           !BCC_EOS
00174                                           ! 89    Bit32u WinFuncPtr;
00175                                           !BCC_EOS
00176                                           ! 90    Bit16u BytesPerScanLine;
00177                                           !BCC_EOS
00178                                           ! 91    Bit16u XResolution;
00179                                           !BCC_EOS
00180                                           ! 92    Bit16u YResolution;
00181                                           !BCC_EOS
00182                                           ! 93    Bit8u XCharSize;
00183                                           !BCC_EOS
00184                                           ! 94    Bit8u YCharSize;
00185                                           !BCC_EOS
00186                                           ! 95    Bit8u NumberOfPlanes;
00187                                           !BCC_EOS
00188                                           ! 96    Bit8u BitsPerPixel;
00189                                           !BCC_EOS
00190                                           ! 97    Bit8u NumberOfBanks;
00191                                           !BCC_EOS
00192                                           ! 98    Bit8u MemoryModel;
00193                                           !BCC_EOS
00194                                           ! 99    Bit8u BankSize;
00195                                           !BCC_EOS
00196                                           ! 100    Bit8u NumberOfImagePages;
00197                                           !BCC_EOS
00198                                           ! 101    Bit8u Reserved_page;
00199                                           !BCC_EOS
00200                                           ! 102    Bit8u RedMaskSize;
00201                                           !BCC_EOS
00202                                           ! 103    Bit8u RedFieldPosition;
00203                                           !BCC_EOS
00204                                           ! 104    Bit8u GreenMaskSize;
00205                                           !BCC_EOS
00206                                           ! 105    Bit8u GreenFieldPosition;
00207                                           !BCC_EOS
00208                                           ! 106    Bit8u BlueMaskSize;
00209                                           !BCC_EOS
00210                                           ! 107    Bit8u BlueFieldPosition;
00211                                           !BCC_EOS
00212                                           ! 108    Bit8u RsvdMaskSize;
00213                                           !BCC_EOS
00214                                           ! 109    Bit8u RsvdFieldPosition;
00215                                           !BCC_EOS
00216                                           ! 110    Bit8u DirectColorModeInfo;
00217                                           !BCC_EOS
00218                                           ! 111    Bit32u PhysBasePtr;
00219                                           !BCC_EOS
00220                                           ! 112    Bit32u OffScreenMemOffset;
00221                                           !BCC_EOS
00222                                           ! 113    Bit16u OffScreenMemSize;
00223                                           !BCC_EOS
00224                                           ! 114    Bit16u LinBytesPerScanLine;
00225                                           !BCC_EOS
00226                                           ! 115    Bit8u BnkNumberOfPages;
00227                                           !BCC_EOS
00228                                           ! 116    Bit8u LinNumberOfPages;
00229                                           !BCC_EOS
00230                                           ! 117    Bit8u LinRedMaskSize;
00231                                           !BCC_EOS
00232                                           ! 118    Bit8u LinRedFieldPosition;
00233                                           !BCC_EOS
00234                                           ! 119    Bit8u LinGreenMaskSize;
00235                                           !BCC_EOS
00236                                           ! 120    Bit8u LinGreenFieldPosition;
00237                                           !BCC_EOS
00238                                           ! 121    Bit8u LinBlueMaskSize;
00239                                           !BCC_EOS
00240                                           ! 122    Bit8u LinBlueFieldPosition;
00241                                           !BCC_EOS
00242                                           ! 123    Bit8u LinRsvdMaskSize;
00243                                           !BCC_EOS
00244                                           ! 124    Bit8u LinRsvdFieldPosition;
00245                                           !BCC_EOS
00246                                           ! 125    Bit32u MaxPixelClock;
00247                                           !BCC_EOS
00248                                           ! 126    Bit8u Reserved[189];
00249                                           !BCC_EOS
00250                                           ! 127 } ModeInfoBlock;
00251                                           !BCC_EOS
00252                                           ! 128 typedef struct ModeInfoListItem
00253                                           ! 129 {
00254                                           ! 130   Bit16u mode;
00255                                           !BCC_EOS
00256                                           ! 131   ModeInfoBlockCompact info;
00257                                           !BCC_EOS
00258                                           ! 132 } ModeInfoListItem;
00259                                           !BCC_EOS
00260                                           ! 133 static Bit8u read_byte();
00261                                           !BCC_EOS
00262                                           ! 134 static Bit16u read_word();
00263                                           !BCC_EOS
00264                                           ! 135 static void write_byte();
00265                                           !BCC_EOS
00266                                           ! 136 static void write_word();
00267                                           !BCC_EOS
00268                                           ! 137 static Bit8u inb();
00269                                           !BCC_EOS
00270                                           ! 138 static Bit16u inw();
00271                                           !BCC_EOS
00272                                           ! 139 static void outb();
00273                                           !BCC_EOS
00274                                           ! 140 static void outw();
00275                                           !BCC_EOS
00276                                           ! 141 static Bit16u get_SS();
00277                                           !BCC_EOS
00278                                           ! 142 static void printf();
00279                                           !BCC_EOS
00280                                           ! 143 static void unimplemented();
00281                                           !BCC_EOS
00282                                           ! 144 static void unknown();
00283                                           !BCC_EOS
00284                                           ! 145 static Bit8u find_vga_entry();
00285                                           !BCC_EOS
00286                                           ! 146 static void memsetb();
00287                                           !BCC_EOS
00288                                           ! 147 static void memsetw();
00289                                           !BCC_EOS
00290                                           ! 148 static void memcpyb();
00291                                           !BCC_EOS
00292                                           ! 149 static void memcpyw();
00293                                           !BCC_EOS
00294                                           ! 150 static void biosfn_set_video_mode();
00295                                           !BCC_EOS
00296                                           ! 151 static void biosfn_set_cursor_shape();
00297                                           !BCC_EOS
00298                                           ! 152 static void biosfn_set_cursor_pos();
00299                                           !BCC_EOS
00300                                           ! 153 static void biosfn_get_cursor_pos();
00301                                           !BCC_EOS
00302                                           ! 154 static void biosfn_set_
00303                                           ! 154 active_page();
00304                                           !BCC_EOS
00305                                           ! 155 static void biosfn_scroll();
00306                                           !BCC_EOS
00307                                           ! 156 static void biosfn_read_char_attr();
00308                                           !BCC_EOS
00309                                           ! 157 static void biosfn_write_char_attr();
00310                                           !BCC_EOS
00311                                           ! 158 static void biosfn_write_char_only();
00312                                           !BCC_EOS
00313                                           ! 159 static void biosfn_write_pixel();
00314                                           !BCC_EOS
00315                                           ! 160 static void biosfn_read_pixel();
00316                                           !BCC_EOS
00317                                           ! 161 static void biosfn_write_teletype();
00318                                           !BCC_EOS
00319                                           ! 162 static void biosfn_perform_gray_scale_summing();
00320                                           !BCC_EOS
00321                                           ! 163 static void biosfn_load_text_user_pat();
00322                                           !BCC_EOS
00323                                           ! 164 static void biosfn_load_text_8_14_pat();
00324                                           !BCC_EOS
00325                                           ! 165 static void biosfn_load_text_8_8_pat();
00326                                           !BCC_EOS
00327                                           ! 166 static void biosfn_load_text_8_16_pat();
00328                                           !BCC_EOS
00329                                           ! 167 static void biosfn_load_gfx_8_8_chars();
00330                                           !BCC_EOS
00331                                           ! 168 static void biosfn_load_gfx_user_chars();
00332                                           !BCC_EOS
00333                                           ! 169 static void biosfn_load_gfx_8_14_chars();
00334                                           !BCC_EOS
00335                                           ! 170 static void biosfn_load_gfx_8_8_dd_chars();
00336                                           !BCC_EOS
00337                                           ! 171 static void biosfn_load_gfx_8_16_chars();
00338                                           !BCC_EOS
00339                                           ! 172 static void biosfn_get_font_info();
00340                                           !BCC_EOS
00341                                           ! 173 static void biosfn_alternate_prtsc();
00342                                           !BCC_EOS
00343                                           ! 174 static void biosfn_switch_video_interface();
00344                                           !BCC_EOS
00345                                           ! 175 static void biosfn_enable_video_refresh_control();
00346                                           !BCC_EOS
00347                                           ! 176 static void biosfn_write_string();
00348                                           !BCC_EOS
00349                                           ! 177 static void biosfn_read_state_info();
00350                                           !BCC_EOS
00351                                           ! 178 static void biosfn_read_video_state_size();
00352                                           !BCC_EOS
00353                                           ! 179 static Bit16u biosfn_save_video_state();
00354                                           !BCC_EOS
00355                                           ! 180 static Bit16u biosfn_restore_video_state();
00356                                           !BCC_EOS
00357                                           ! 181 extern Bit8u video_save_pointer_table[];
00358                                           !BCC_EOS
00359                                           ! 182 #asm
00360                                           !BCC_ASM
00361                                           MACRO SET_INT_VECTOR
00362                                             push ds
00363                                             xor ax, ax
00364                                             mov ds, ax
00365                                             mov ax, ?3
00366                                             mov ?1*4, ax
00367                                             mov ax, ?2
00368                                             mov ?1*4+2, ax
00369                                             pop ds
00370                                           MEND
00371                                           ! 193 endasm
00372                                           !BCC_ENDASM
00373                                           ! 194 #asm
00374                                           !BCC_ASM
00375                                           
00376 0000                                      .rom
00377 0000                                      .org 0
00378                                           use16 386
00379                       00000000            vgabios_start:
00380 0000                        55            .byte 0x55, 0xaa
00381 0002                        40            .byte 0x40
00382                       00000003            vgabios_entry_point:
00383 0003           E9         0103              jmp vgabios_init_func
00384 001E                                      .org 0x1e
00385 001E                        49            .ascii "IBM"
00386 0021                        00            .byte 0x00
00387                       00000022            vgabios_name:
00388 0022                        50            .ascii "Plex86/Bochs VGABios"
00389 0036                        20            .ascii " "
00390 0037                        00            .byte 0x00
00391                       00000038            vgabios_version:
00392 0038                        63            .ascii "current-cvs"
00393 0043                        20            .ascii " "
00394                       00000044            vgabios_date:
00395 0044                        31            .ascii "14 Jun 2023"
00396 004F                        0A            .byte 0x0a,0x0d
00397 0051                        00            .byte 0x00
00398                       00000052            vgabios_copyright:
00399 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00400 007B                        0A            .byte 0x0a,0x0d
00401 007D                        00            .byte 0x00
00402                       0000007E            vgabios_license:
00403 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00404 00AE                        0A            .byte 0x0a,0x0d
00405 00B0                        0A            .byte 0x0a,0x0d
00406 00B2                        00            .byte 0x00
00407                       000000B3            vgabios_website:
00408 00B3                        50            .ascii "Please visit :"
00409 00C1                        0A            .byte 0x0a,0x0d
00410                                           ;;.ascii " . http://www.plex86.org"
00411                                           ;;.byte 0x0a,0x0d
00412 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00413 00E2                        0A            .byte 0x0a,0x0d
00414 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00415 0104                        0A            .byte 0x0a,0x0d
00416 0106                        0A            .byte 0x0a,0x0d
00417 0108                        00            .byte 0x00
00418                                           ;; ============================================================================================
00419                                           ;;
00420                                           ;; Init Entry point
00421                                           ;;
00422                                           ;; ============================================================================================
00423                       00000109            vgabios_init_func:
00424                                           ;; init vga card
00425 0109           E8         3465              call init_vga_card
00426                                           ;; init basic bios vars
00427 010C           E8         34C1              call init_bios_area
00428                                           ;; init vbe functions
00429 010F           E8         9469              call vbe_init
00430                                           ;; set int10 vect
00431                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   0112           1E                           push ds
 +a   0113           31C0                         xor ax, ax
 +a   0115           8ED8                         mov ds, ax
 +a   0117           B8                   0133    mov ax,  #vgabios_int10_handler
 +a   011A           A3         0040              mov 0x10*4, ax
 +a   011D           B8                   C000    mov ax,  #0xC000
 +a   0120           A3         0042              mov 0x10*4+2, ax
 +a   0123           1F                           pop ds
00432                                           ;; display splash screen
00433 0124           E8         34FD              call _display_splash_screen
00434                                           ;; init video mode and clear the screen
00435 0127           B8                   0003    mov ax,#0x0003
00436 012A           CD                     10    int #0x10
00437                                           ;; show info
00438 012C           E8         34F6              call _display_info
00439                                           ;; show vbe info
00440 012F           E8         9477              call vbe_display_info
00441 0132           CB                           retf
00442                                           ! 262 endasm
00443                                           !BCC_ENDASM
00444                                           ! 263 #asm
00445                                           !BCC_ASM
00446                       00000133            vgabios_int10_handler:
00447 0133           9C                           pushf
00448 0134           06                           push es
00449 0135           1E                           push ds
00450 0136           60                           pusha
00451 0137           BB                   C000    mov bx, #0xc000
00452 013A           8EDB                         mov ds, bx
00453 013C           E8         352B              call _int10_debugmsg
00454 013F           61                           popa
00455 0140           1F                           pop ds
00456 0141           07                           pop es
00457 0142           80FC                   0F    cmp ah, #0x0f
00458 0145           75           06              jne int10_test_1A
00459 0147           E8         61D2              call biosfn_get_video_mode
00460 014A           E9         00BC              jmp int10_end
00461                       0000014D            int10_test_1A:
00462 014D           80FC                   1A    cmp ah, #0x1a
00463 0150           75           06              jne int10_test_0B
00464 0152           E8         6D76              call biosfn_group_1A
00465 0155           E9         00B1              jmp int10_end
00466                       00000158            int10_test_0B:
00467 0158           80FC                   0B    cmp ah, #0x0b
00468 015B           75           06              jne int10_test_1103
00469 015D           E8         58D2              call biosfn_group_0B
00470 0160           E9         00A6              jmp int10_end
00471                       00000163            int10_test_1103:
00472 0163           3D                   1103    cmp ax, #0x1103
00473 0166           75           06              jne int10_test_12
00474 0168           E8         68AF              call biosfn_set_text_block_specifier
00475 016B           E9         009B              jmp int10_end
00476                       0000016E            int10_test_12:
00477 016E           80FC                   12    cmp ah, #0x12
00478 0171           75           3E              jne int10_test_101B
00479 0173           80FB                   10    cmp bl, #0x10
00480 0176           75           06              jne int10_test_BL30
00481 0178           E8         6B2D              call biosfn_get_ega_info
00482 017B           E9         008B              jmp int10_end
00483                       0000017E            int10_test_BL30:
00484 017E           80FB                   30    cmp bl, #0x30
00485 0181           75           06              jne int10_test_BL31
00486 0183           E8         6B4D              call biosfn_select_vert_res
00487 0186           E9         0080              jmp int10_end
00488                       00000189            int10_test_BL31:
00489 0189           80FB                   31    cmp bl, #0x31
00490 018C           75           05              jne int10_test_BL32
00491 018E           E8         6BCB              call biosfn_enable_default_palette_loading
00492 0191           EB           76              jmp int10_end
00493                       00000193            int10_test_BL32:
00494 0193           80FB                   32    cmp bl, #0x32
00495 0196           75           05              jne int10_test_BL33
00496 0198           E8         6BE3              call biosfn_enable_video_addressing
00497 019B           EB           6C              jmp int10_end
00498                       0000019D            int10_test_BL33:
00499 019D           80FB                   33    cmp bl, #0x33
00500 01A0           75           05              jne int10_test_BL34
00501 01A2           E8         6BF7              call biosfn_enable_grayscale_summing
00502 01A5           EB           62              jmp int10_end
00503                       000001A7            int10_test_BL34:
00504 01A7           80FB                   34    cmp bl, #0x34
00505 01AA           75           4F              jne int10_normal
00506 01AC           E8         6C11              call biosfn_enable_cursor_emulation
00507 01AF           EB           58              jmp int10_end
00508                       000001B1            int10_test_101B:
00509 01B1           3D                   101B    cmp ax, #0x101b
00510 01B4           74           45              je int10_normal
00511 01B6           80FC                   10    cmp ah, #0x10
00512 01B9           75           05              jne int10_test_4F
00513 01BB           E8         6185              call biosfn_group_10
00514 01BE           EB           49              jmp int10_end
00515                       000001C0            int10_test_4F:
00516 01C0           80FC                   4F    cmp ah, #0x4f
00517 01C3           75           36              jne int10_normal
00518 01C5           3C                     03    cmp al, #0x03
00519 01C7           75           05              jne int10_test_vbe_05
00520 01C9           E8         9987              call vbe_biosfn_return_current_mode
00521 01CC           EB           3B              jmp int10_end
00522                       000001CE            int10_test_vbe_05:
00523 01CE           3C                     05    cmp al, #0x05
00524 01D0           75           05              jne int10_test_vbe_06
00525 01D2           E8         9C79              call vbe_biosfn_display_window_control
00526 01D5           EB           32              jmp int10_end
00527                       000001D7            int10_test_vbe_06:
00528 01D7           3C                     06    cmp al, #0x06
00529 01D9           75           05              jne int10_test_vbe_07
00530 01DB           E8         9C9D              call vbe_biosfn_set_get_logical_scan_line_length
00531 01DE           EB           29              jmp int10_end
00532                       000001E0            int10_test_vbe_07:
00533 01E0           3C                     07    cmp al, #0x07
00534 01E2           75           05              jne int10_test_vbe_08
00535 01E4           E8         9CE1              call vbe_biosfn_set_get_display_start
00536 01E7           EB           20              jmp int10_end
00537                       000001E9            int10_test_vbe_08:
00538 01E9           3C                     08    cmp al, #0x08
00539 01EB           75           05              jne int10_test_vbe_0A
00540 01ED           E8         9D06              call vbe_biosfn_set_get_dac_palette_format
00541 01F0           EB           17              jmp int10_end
00542                       000001F2            int10_test_vbe_0A:
00543 01F2           3C                     0A    cmp al, #0x0A
00544 01F4           75           05              jne int10_normal
00545 01F6           E8         9D35              call vbe_biosfn_return_protected_mode_interface
00546 01F9           EB           0E              jmp int10_end
00547                       000001FB            int10_normal:
00548 01FB           06                           push es
00549 01FC           1E                           push ds
00550 01FD           60                           pusha
00551                                           ;; We have to set ds to access the right data segment
00552 01FE           BB                   C000    mov bx, #0xc000
00553 0201           8EDB                         mov ds, bx
00554 0203           E8         3495              call _int10_func
00555 0206           61                           popa
00556 0207           1F                           pop ds
00557 0208           07                           pop es
00558                       00000209            int10_end:
00559 0209           9D                           popf
00560 020A           CF                           iret
00561                                           ! 379 endasm
00562                                           !BCC_ENDASM
00563                                           ! 380 typedef struct
00564                                           ! 381 {Bit8u svgamode;
00565                                           !BCC_EOS
00566                                           ! 382  Bit8u class;
00567                                           !BCC_EOS
00568                                           ! 383  Bit8u memmodel;
00569                                           !BCC_EOS
00570                                           ! 384  Bit8u pixbits;
00571                                           !BCC_EOS
00572                                           ! 385  Bit16u sstart;
00573                                           !BCC_EOS
00574                                           ! 386  Bit8u pelmask;
00575                                           !BCC_EOS
00576                                           ! 387  Bit8u dacmodel;
00577                                           !BCC_EOS
00578                                           ! 388 } VGAMODES;
00579                                           !BCC_EOS
00580                                           ! 389 static VGAMODES vga_modes[15 +1]=
00581                                           ! 390 {
00582                                           
00583                       0000020B            _vga_modes:
00584                                           ! 391  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00585 020B                        00            .byte	0
00586 020C                        00            .byte	0
00587 020D                        00            .byte	0
00588 020E                        04            .byte	4
00589 020F                      B800            .word	$B800
00590 0211                        FF            .byte	$FF
00591 0212                        02            .byte	2
00592                                           ! 392  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00593 0213                        01            .byte	1
00594 0214                        00            .byte	0
00595 0215                        00            .byte	0
00596 0216                        04            .byte	4
00597 0217                      B800            .word	$B800
00598 0219                        FF            .byte	$FF
00599 021A                        02            .byte	2
00600                                           ! 393  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00601 021B                        02            .byte	2
00602 021C                        00            .byte	0
00603 021D                        00            .byte	0
00604 021E                        04            .byte	4
00605 021F                      B800            .word	$B800
00606 0221                        FF            .byte	$FF
00607 0222                        02            .byte	2
00608                                           ! 394  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00609 0223                        03            .byte	3
00610 0224                        00            .byte	0
00611 0225                        00            .byte	0
00612 0226                        04            .byte	4
00613 0227                      B800            .word	$B800
00614 0229                        FF            .byte	$FF
00615 022A                        02            .byte	2
00616                                           ! 395  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00617 022B                        04            .byte	4
00618 022C                        01            .byte	1
00619 022D                        02            .byte	2
00620 022E                        02            .byte	2
00621 022F                      B800            .word	$B800
00622 0231                        FF            .byte	$FF
00623 0232                        01            .byte	1
00624                                           ! 396  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00625 0233                        05            .byte	5
00626 0234                        01            .byte	1
00627 0235                        02            .byte	2
00628 0236                        02            .byte	2
00629 0237                      B800            .word	$B800
00630 0239                        FF            .byte	$FF
00631 023A                        01            .byte	1
00632                                           ! 397  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00633 023B                        06            .byte	6
00634 023C                        01            .byte	1
00635 023D                        02            .byte	2
00636 023E                        01            .byte	1
00637 023F                      B800            .word	$B800
00638 0241                        FF            .byte	$FF
00639 0242                        01            .byte	1
00640                                           ! 398  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00641 0243                        07            .byte	7
00642 0244                        00            .byte	0
00643 0245                        01            .byte	1
00644 0246                        04            .byte	4
00645 0247                      B000            .word	$B000
00646 0249                        FF            .byte	$FF
00647 024A                        00            .byte	0
00648                                           ! 399  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00649 024B                        0D            .byte	$D
00650 024C                        01            .byte	1
00651 024D                        04            .byte	4
00652 024E                        04            .byte	4
00653 024F                      A000            .word	$A000
00654 0251                        FF            .byte	$FF
00655 0252                        01            .byte	1
00656                                           ! 400  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00657 0253                        0E            .byte	$E
00658 0254                        01            .byte	1
00659 0255                        04            .byte	4
00660 0256                        04            .byte	4
00661 0257                      A000            .word	$A000
00662 0259                        FF            .byte	$FF
00663 025A                        01            .byte	1
00664                                           ! 401  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00665 025B                        0F            .byte	$F
00666 025C                        01            .byte	1
00667 025D                        03            .byte	3
00668 025E                        01            .byte	1
00669 025F                      A000            .word	$A000
00670 0261                        FF            .byte	$FF
00671 0262                        00            .byte	0
00672                                           ! 402  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00673 0263                        10            .byte	$10
00674 0264                        01            .byte	1
00675 0265                        04            .byte	4
00676 0266                        04            .byte	4
00677 0267                      A000            .word	$A000
00678 0269                        FF            .byte	$FF
00679 026A                        02            .byte	2
00680                                           ! 403  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00681 026B                        11            .byte	$11
00682 026C                        01            .byte	1
00683 026D                        03            .byte	3
00684 026E                        01            .byte	1
00685 026F                      A000            .word	$A000
00686 0271                        FF            .byte	$FF
00687 0272                        02            .byte	2
00688                                           ! 404  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00689 0273                        12            .byte	$12
00690 0274                        01            .byte	1
00691 0275                        04            .byte	4
00692 0276                        04            .byte	4
00693 0277                      A000            .word	$A000
00694 0279                        FF            .byte	$FF
00695 027A                        02            .byte	2
00696                                           ! 405  {0x13, 0x01, 0x05, 8, 0xA000, 0xFF, 0x03},
00697 027B                        13            .byte	$13
00698 027C                        01            .byte	1
00699 027D                        05            .byte	5
00700 027E                        08            .byte	8
00701 027F                      A000            .word	$A000
00702 0281                        FF            .byte	$FF
00703 0282                        03            .byte	3
00704                                           ! 406  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00705 0283                        6A            .byte	$6A
00706 0284                        01            .byte	1
00707 0285                        04            .byte	4
00708 0286                        04            .byte	4
00709 0287                      A000            .word	$A000
00710 0289                        FF            .byte	$FF
00711 028A                        02            .byte	2
00712                                           ! 407 };
00713                                           !BCC_EOS
00714                                           ! 408 static Bit8u line_to_vpti[15 +1]={
00715                       0000028B            _line_to_vpti:
00716                                           ! 409     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00717 028B                        17            .byte	$17
00718 028C                        17            .byte	$17
00719 028D                        18            .byte	$18
00720 028E                        18            .byte	$18
00721 028F                        04            .byte	4
00722 0290                        05            .byte	5
00723 0291                        06            .byte	6
00724 0292                        07            .byte	7
00725                                           ! 410     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00726 0293                        0D            .byte	$D
00727 0294                        0E            .byte	$E
00728 0295                        11            .byte	$11
00729 0296                        12            .byte	$12
00730 0297                        1A            .byte	$1A
00731 0298                        1B            .byte	$1B
00732 0299                        1C            .byte	$1C
00733 029A                        1D            .byte	$1D
00734                                           ! 411 };
00735                                           !BCC_EOS
00736                                           ! 412 static Bit8u dac_regs[3 +1]=
00737                                           ! 413 {0x3f,0x3f,0x3f,0xff};
00738                       0000029B            _dac_regs:
00739 029B                        3F            .byte	$3F
00740 029C                        3F            .byte	$3F
00741 029D                        3F            .byte	$3F
00742 029E                        FF            .byte	$FF
00743                                           !BCC_EOS
00744                                           ! 414 typedef struct {
00745                                           ! 415     Bit8u twidth;
00746                                           !BCC_EOS
00747                                           ! 416     Bit8u theightm1;
00748                                           !BCC_EOS
00749                                           ! 417     Bit8u cheight;
00750                                           !BCC_EOS
00751                                           ! 418     Bit8u slength_l;
00752                                           !BCC_EOS
00753                                           ! 419     Bit8u slength_h;
00754                                           !BCC_EOS
00755                                           ! 420 
00756                                           ! 420     Bit8u sequ_regs[4];
00757                                           !BCC_EOS
00758                                           ! 421     Bit8u miscreg;
00759                                           !BCC_EOS
00760                                           ! 422     Bit8u crtc_regs[25];
00761                                           !BCC_EOS
00762                                           ! 423     Bit8u actl_regs[20];
00763                                           !BCC_EOS
00764                                           ! 424     Bit8u grdc_regs[9];
00765                                           !BCC_EOS
00766                                           ! 425 } VideoParamTableEntry;
00767                                           !BCC_EOS
00768                                           ! 426 static VideoParamTableEntry video_param_table[30] = {
00769                       0000029F            _video_param_table:
00770                                           ! 427 {
00771                                           ! 428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00772 029F                        00            .byte	0
00773 02A0                        00            .byte	0
00774 02A1                        00            .byte	0
00775 02A2                        00            .byte	0
00776 02A3                        00            .byte	0
00777 02A4                        00            .byte	0
00778 02A5                        00            .byte	0
00779 02A6                        00            .byte	0
00780                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00781 02A7                        00            .byte	0
00782 02A8                        00            .byte	0
00783 02A9                        00            .byte	0
00784 02AA                        00            .byte	0
00785 02AB                        00            .byte	0
00786 02AC                        00            .byte	0
00787 02AD                        00            .byte	0
00788 02AE                        00            .byte	0
00789                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00790 02AF                        00            .byte	0
00791 02B0                        00            .byte	0
00792 02B1                        00            .byte	0
00793 02B2                        00            .byte	0
00794 02B3                        00            .byte	0
00795 02B4                        00            .byte	0
00796 02B5                        00            .byte	0
00797 02B6                        00            .byte	0
00798                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00799 02B7                        00            .byte	0
00800 02B8                        00            .byte	0
00801 02B9                        00            .byte	0
00802 02BA                        00            .byte	0
00803 02BB                        00            .byte	0
00804 02BC                        00            .byte	0
00805 02BD                        00            .byte	0
00806 02BE                        00            .byte	0
00807                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00808 02BF                        00            .byte	0
00809 02C0                        00            .byte	0
00810 02C1                        00            .byte	0
00811 02C2                        00            .byte	0
00812 02C3                        00            .byte	0
00813 02C4                        00            .byte	0
00814 02C5                        00            .byte	0
00815 02C6                        00            .byte	0
00816                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00817 02C7                        00            .byte	0
00818 02C8                        00            .byte	0
00819 02C9                        00            .byte	0
00820 02CA                        00            .byte	0
00821 02CB                        00            .byte	0
00822 02CC                        00            .byte	0
00823 02CD                        00            .byte	0
00824 02CE                        00            .byte	0
00825                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00826 02CF                        00            .byte	0
00827 02D0                        00            .byte	0
00828 02D1                        00            .byte	0
00829 02D2                        00            .byte	0
00830 02D3                        00            .byte	0
00831 02D4                        00            .byte	0
00832 02D5                        00            .byte	0
00833 02D6                        00            .byte	0
00834                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00835 02D7                        00            .byte	0
00836 02D8                        00            .byte	0
00837 02D9                        00            .byte	0
00838 02DA                        00            .byte	0
00839 02DB                        00            .byte	0
00840 02DC                        00            .byte	0
00841 02DD                        00            .byte	0
00842 02DE                        00            .byte	0
00843                                           ! 436 },
00844                                           ! 437 {
00845                                           ! 438  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00846 02DF                        00            .byte	0
00847 02E0                        00            .byte	0
00848 02E1                        00            .byte	0
00849 02E2                        00            .byte	0
00850 02E3                        00            .byte	0
00851 02E4                        00            .byte	0
00852 02E5                        00            .byte	0
00853 02E6                        00            .byte	0
00854                                           ! 439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00855 02E7                        00            .byte	0
00856 02E8                        00            .byte	0
00857 02E9                        00            .byte	0
00858 02EA                        00            .byte	0
00859 02EB                        00            .byte	0
00860 02EC                        00            .byte	0
00861 02ED                        00            .byte	0
00862 02EE                        00            .byte	0
00863                                           ! 440  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00864 02EF                        00            .byte	0
00865 02F0                        00            .byte	0
00866 02F1                        00            .byte	0
00867 02F2                        00            .byte	0
00868 02F3                        00            .byte	0
00869 02F4                        00            .byte	0
00870 02F5                        00            .byte	0
00871 02F6                        00            .byte	0
00872                                           ! 441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00873 02F7                        00            .byte	0
00874 02F8                        00            .byte	0
00875 02F9                        00            .byte	0
00876 02FA                        00            .byte	0
00877 02FB                        00            .byte	0
00878 02FC                        00            .byte	0
00879 02FD                        00            .byte	0
00880 02FE                        00            .byte	0
00881                                           ! 442  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00882 02FF                        00            .byte	0
00883 0300                        00            .byte	0
00884 0301                        00            .byte	0
00885 0302                        00            .byte	0
00886 0303                        00            .byte	0
00887 0304                        00            .byte	0
00888 0305                        00            .byte	0
00889 0306                        00            .byte	0
00890                                           ! 443  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00891 0307                        00            .byte	0
00892 0308                        00            .byte	0
00893 0309                        00            .byte	0
00894 030A                        00            .byte	0
00895 030B                        00            .byte	0
00896 030C                        00            .byte	0
00897 030D                        00            .byte	0
00898 030E                        00            .byte	0
00899                                           ! 444  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00900 030F                        00            .byte	0
00901 0310                        00            .byte	0
00902 0311                        00            .byte	0
00903 0312                        00            .byte	0
00904 0313                        00            .byte	0
00905 0314                        00            .byte	0
00906 0315                        00            .byte	0
00907 0316                        00            .byte	0
00908                                           ! 445  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00909 0317                        00            .byte	0
00910 0318                        00            .byte	0
00911 0319                        00            .byte	0
00912 031A                        00            .byte	0
00913 031B                        00            .byte	0
00914 031C                        00            .byte	0
00915 031D                        00            .byte	0
00916 031E                        00            .byte	0
00917                                           ! 446 },
00918                                           ! 447 {
00919                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00920 031F                        00            .byte	0
00921 0320                        00            .byte	0
00922 0321                        00            .byte	0
00923 0322                        00            .byte	0
00924 0323                        00            .byte	0
00925 0324                        00            .byte	0
00926 0325                        00            .byte	0
00927 0326                        00            .byte	0
00928                                           ! 449  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00929 0327                        00            .byte	0
00930 0328                        00            .byte	0
00931 0329                        00            .byte	0
00932 032A                        00            .byte	0
00933 032B                        00            .byte	0
00934 032C                        00            .byte	0
00935 032D                        00            .byte	0
00936 032E                        00            .byte	0
00937                                           ! 450  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00938 032F                        00            .byte	0
00939 0330                        00            .byte	0
00940 0331                        00            .byte	0
00941 0332                        00            .byte	0
00942 0333                        00            .byte	0
00943 0334                        00            .byte	0
00944 0335                        00            .byte	0
00945 0336                        00            .byte	0
00946                                           ! 451  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00947 0337                        00            .byte	0
00948 0338                        00            .byte	0
00949 0339                        00            .byte	0
00950 033A                        00            .byte	0
00951 033B                        00            .byte	0
00952 033C                        00            .byte	0
00953 033D                        00            .byte	0
00954 033E                        00            .byte	0
00955                                           ! 452  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00956 033F                        00            .byte	0
00957 0340                        00            .byte	0
00958 0341                        00            .byte	0
00959 0342                        00            .byte	0
00960 0343                        00            .byte	0
00961 0344                        00            .byte	0
00962 0345                        00            .byte	0
00963 0346                        00            .byte	0
00964                                           ! 453  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00965 0347                        00            .byte	0
00966 0348                        00            .byte	0
00967 0349                        00            .byte	0
00968 034A                        00            .byte	0
00969 034B                        00            .byte	0
00970 034C                        00            .byte	0
00971 034D                        00            .byte	0
00972 034E                        00            .byte	0
00973                                           ! 454  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00974 034F                        00            .byte	0
00975 0350                        00            .byte	0
00976 0351                        00            .byte	0
00977 0352                        00            .byte	0
00978 0353                        00            .byte	0
00979 0354                        00            .byte	0
00980 0355                        00            .byte	0
00981 0356                        00            .byte	0
00982                                           ! 455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00983 0357                        00            .byte	0
00984 0358                        00            .byte	0
00985 0359                        00            .byte	0
00986 035A                        00            .byte	0
00987 035B                        00            .byte	0
00988 035C                        00            .byte	0
00989 035D                        00            .byte	0
00990 035E                        00            .byte	0
00991                                           ! 456 },
00992                                           ! 457 {
00993                                           ! 458  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00994 035F                        00            .byte	0
00995 0360                        00            .byte	0
00996 0361                        00            .byte	0
00997 0362                        00            .byte	0
00998 0363                        00            .byte	0
00999 0364                        00            .byte	0
01000 0365                        00            .byte	0
01001 0366                        00            .byte	0
01002                                           ! 459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01003 0367                        00            .byte	0
01004 0368                        00            .byte	0
01005 0369                        00            .byte	0
01006 036A                        00            .byte	0
01007 036B                        00            .byte	0
01008 036C                        00            .byte	0
01009 036D                        00            .byte	0
01010 036E                        00            .byte	0
01011                                           ! 460  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01012 036F                        00            .byte	0
01013 0370                        00            .byte	0
01014 0371                        00            .byte	0
01015 0372                        00            .byte	0
01016 0373                        00            .byte	0
01017 0374                        00            .byte	0
01018 0375                        00            .byte	0
01019 0376                        00            .byte	0
01020                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01021 0377                        00            .byte	0
01022 0378                        00            .byte	0
01023 0379                        00            .byte	0
01024 037A                        00            .byte	0
01025 037B                        00            .byte	0
01026 037C                        00            .byte	0
01027 037D                        00            .byte	0
01028 037E                        00            .byte	0
01029                                           ! 462  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01030 037F                        00            .byte	0
01031 0380                        00            .byte	0
01032 0381                        00            .byte	0
01033 0382                        00            .byte	0
01034 0383                        00            .byte	0
01035 0384                        00            .byte	0
01036 0385                        00            .byte	0
01037 0386                        00            .byte	0
01038                                           ! 463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01039 0387                        00            .byte	0
01040 0388                        00            .byte	0
01041 0389                        00            .byte	0
01042 038A                        00            .byte	0
01043 038B                        00            .byte	0
01044 038C                        00            .byte	0
01045 038D                        00            .byte	0
01046 038E                        00            .byte	0
01047                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01048 038F                        00            .byte	0
01049 0390                        00            .byte	0
01050 0391                        00            .byte	0
01051 0392                        00            .byte	0
01052 0393                        00            .byte	0
01053 0394                        00            .byte	0
01054 0395                        00            .byte	0
01055 0396                        00            .byte	0
01056                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01057 0397                        00            .byte	0
01058 0398                        00            .byte	0
01059 0399                        00            .byte	0
01060 039A                        00            .byte	0
01061 039B                        00            .byte	0
01062 039C                        00            .byte	0
01063 039D                        00            .byte	0
01064 039E                        00            .byte	0
01065                                           ! 466 },
01066                                           ! 467 {
01067                                           ! 468  40, 24, 8, 0x00, 0x08,
01068 039F                        28            .byte	$28
01069 03A0                        18            .byte	$18
01070 03A1                        08            .byte	8
01071 03A2                        00            .byte	0
01072 03A3                        08            .byte	8
01073                                           ! 469  0x09, 0x03, 0x00, 0x02,
01074 03A4                        09            .byte	9
01075 03A5                        03            .byte	3
01076 03A6                        00            .byte	0
01077 03A7                        02            .byte	2
01078                                           ! 470  0x63,
01079 03A8                        63            .byte	$63
01080                                           ! 471  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01081 03A9                        2D            .byte	$2D
01082 03AA                        27            .byte	$27
01083 03AB                        28            .byte	$28
01084 03AC                        90            .byte	$90
01085 03AD                        2B            .byte	$2B
01086 03AE                        80            .byte	$80
01087 03AF                        BF            .byte	$BF
01088 03B0                        1F            .byte	$1F
01089                                           ! 472  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01090 03B1                        00            .byte	0
01091 03B2                        C1            .byte	$C1
01092 03B3                        00            .byte	0
01093 03B4                        00            .byte	0
01094 03B5                        00            .byte	0
01095 03B6                        00            .byte	0
01096 03B7                        00            .byte	0
01097 03B8                        00            .byte	0
01098                                           ! 473  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01099 03B9                        9C            .byte	$9C
01100 03BA                        8E            .byte	$8E
01101 03BB                        8F            .byte	$8F
01102 03BC                        14            .byte	$14
01103 03BD                        00            .byte	0
01104 03BE                        96            .byte	$96
01105 03BF                        B9            .byte	$B9
01106 03C0                        A2            .byte	$A2
01107                                           ! 474  0xff,
01108 03C1                        FF            .byte	$FF
01109                                           ! 475  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01110 03C2                        00            .byte	0
01111 03C3                        13            .byte	$13
01112 03C4                        15            .byte	$15
01113 03C5                        17            .byte	$17
01114 03C6                        02            .byte	2
01115 03C7                        04            .byte	4
01116 03C8                        06            .byte	6
01117 03C9                        07            .byte	7
01118                                           ! 476  0x1
01119                                           ! 476 0, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01120 03CA                        10            .byte	$10
01121 03CB                        11            .byte	$11
01122 03CC                        12            .byte	$12
01123 03CD                        13            .byte	$13
01124 03CE                        14            .byte	$14
01125 03CF                        15            .byte	$15
01126 03D0                        16            .byte	$16
01127 03D1                        17            .byte	$17
01128                                           ! 477  0x01, 0x00, 0x03, 0x00,
01129 03D2                        01            .byte	1
01130 03D3                        00            .byte	0
01131 03D4                        03            .byte	3
01132 03D5                        00            .byte	0
01133                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01134 03D6                        00            .byte	0
01135 03D7                        00            .byte	0
01136 03D8                        00            .byte	0
01137 03D9                        00            .byte	0
01138 03DA                        00            .byte	0
01139 03DB                        30            .byte	$30
01140 03DC                        0F            .byte	$F
01141 03DD                        0F            .byte	$F
01142 03DE                        FF            .byte	$FF
01143                                           ! 479 },
01144                                           ! 480 {
01145                                           ! 481  40, 24, 8, 0x00, 0x08,
01146 03DF                        28            .byte	$28
01147 03E0                        18            .byte	$18
01148 03E1                        08            .byte	8
01149 03E2                        00            .byte	0
01150 03E3                        08            .byte	8
01151                                           ! 482  0x09, 0x03, 0x00, 0x02,
01152 03E4                        09            .byte	9
01153 03E5                        03            .byte	3
01154 03E6                        00            .byte	0
01155 03E7                        02            .byte	2
01156                                           ! 483  0x63,
01157 03E8                        63            .byte	$63
01158                                           ! 484  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01159 03E9                        2D            .byte	$2D
01160 03EA                        27            .byte	$27
01161 03EB                        28            .byte	$28
01162 03EC                        90            .byte	$90
01163 03ED                        2B            .byte	$2B
01164 03EE                        80            .byte	$80
01165 03EF                        BF            .byte	$BF
01166 03F0                        1F            .byte	$1F
01167                                           ! 485  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01168 03F1                        00            .byte	0
01169 03F2                        C1            .byte	$C1
01170 03F3                        00            .byte	0
01171 03F4                        00            .byte	0
01172 03F5                        00            .byte	0
01173 03F6                        00            .byte	0
01174 03F7                        00            .byte	0
01175 03F8                        00            .byte	0
01176                                           ! 486  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
01177 03F9                        9C            .byte	$9C
01178 03FA                        8E            .byte	$8E
01179 03FB                        8F            .byte	$8F
01180 03FC                        14            .byte	$14
01181 03FD                        00            .byte	0
01182 03FE                        96            .byte	$96
01183 03FF                        B9            .byte	$B9
01184 0400                        A2            .byte	$A2
01185                                           ! 487  0xff,
01186 0401                        FF            .byte	$FF
01187                                           ! 488  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
01188 0402                        00            .byte	0
01189 0403                        13            .byte	$13
01190 0404                        15            .byte	$15
01191 0405                        17            .byte	$17
01192 0406                        02            .byte	2
01193 0407                        04            .byte	4
01194 0408                        06            .byte	6
01195 0409                        07            .byte	7
01196                                           ! 489  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01197 040A                        10            .byte	$10
01198 040B                        11            .byte	$11
01199 040C                        12            .byte	$12
01200 040D                        13            .byte	$13
01201 040E                        14            .byte	$14
01202 040F                        15            .byte	$15
01203 0410                        16            .byte	$16
01204 0411                        17            .byte	$17
01205                                           ! 490  0x01, 0x00, 0x03, 0x00,
01206 0412                        01            .byte	1
01207 0413                        00            .byte	0
01208 0414                        03            .byte	3
01209 0415                        00            .byte	0
01210                                           ! 491  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
01211 0416                        00            .byte	0
01212 0417                        00            .byte	0
01213 0418                        00            .byte	0
01214 0419                        00            .byte	0
01215 041A                        00            .byte	0
01216 041B                        30            .byte	$30
01217 041C                        0F            .byte	$F
01218 041D                        0F            .byte	$F
01219 041E                        FF            .byte	$FF
01220                                           ! 492 },
01221                                           ! 493 {
01222                                           ! 494  80, 24, 8, 0x00, 0x10,
01223 041F                        50            .byte	$50
01224 0420                        18            .byte	$18
01225 0421                        08            .byte	8
01226 0422                        00            .byte	0
01227 0423                        10            .byte	$10
01228                                           ! 495  0x01, 0x01, 0x00, 0x06,
01229 0424                        01            .byte	1
01230 0425                        01            .byte	1
01231 0426                        00            .byte	0
01232 0427                        06            .byte	6
01233                                           ! 496  0x63,
01234 0428                        63            .byte	$63
01235                                           ! 497  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01236 0429                        5F            .byte	$5F
01237 042A                        4F            .byte	$4F
01238 042B                        50            .byte	$50
01239 042C                        82            .byte	$82
01240 042D                        54            .byte	$54
01241 042E                        80            .byte	$80
01242 042F                        BF            .byte	$BF
01243 0430                        1F            .byte	$1F
01244                                           ! 498  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01245 0431                        00            .byte	0
01246 0432                        C1            .byte	$C1
01247 0433                        00            .byte	0
01248 0434                        00            .byte	0
01249 0435                        00            .byte	0
01250 0436                        00            .byte	0
01251 0437                        00            .byte	0
01252 0438                        00            .byte	0
01253                                           ! 499  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01254 0439                        9C            .byte	$9C
01255 043A                        8E            .byte	$8E
01256 043B                        8F            .byte	$8F
01257 043C                        28            .byte	$28
01258 043D                        00            .byte	0
01259 043E                        96            .byte	$96
01260 043F                        B9            .byte	$B9
01261 0440                        C2            .byte	$C2
01262                                           ! 500  0xff,
01263 0441                        FF            .byte	$FF
01264                                           ! 501  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01265 0442                        00            .byte	0
01266 0443                        17            .byte	$17
01267 0444                        17            .byte	$17
01268 0445                        17            .byte	$17
01269 0446                        17            .byte	$17
01270 0447                        17            .byte	$17
01271 0448                        17            .byte	$17
01272 0449                        17            .byte	$17
01273                                           ! 502  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01274 044A                        17            .byte	$17
01275 044B                        17            .byte	$17
01276 044C                        17            .byte	$17
01277 044D                        17            .byte	$17
01278 044E                        17            .byte	$17
01279 044F                        17            .byte	$17
01280 0450                        17            .byte	$17
01281 0451                        17            .byte	$17
01282                                           ! 503  0x01, 0x00, 0x01, 0x00,
01283 0452                        01            .byte	1
01284 0453                        00            .byte	0
01285 0454                        01            .byte	1
01286 0455                        00            .byte	0
01287                                           ! 504  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01288 0456                        00            .byte	0
01289 0457                        00            .byte	0
01290 0458                        00            .byte	0
01291 0459                        00            .byte	0
01292 045A                        00            .byte	0
01293 045B                        00            .byte	0
01294 045C                        0D            .byte	$D
01295 045D                        0F            .byte	$F
01296 045E                        FF            .byte	$FF
01297                                           ! 505 },
01298                                           ! 506 {
01299                                           ! 507  80, 24, 16, 0x00, 0x10,
01300 045F                        50            .byte	$50
01301 0460                        18            .byte	$18
01302 0461                        10            .byte	$10
01303 0462                        00            .byte	0
01304 0463                        10            .byte	$10
01305                                           ! 508  0x00, 0x03, 0x00, 0x02,
01306 0464                        00            .byte	0
01307 0465                        03            .byte	3
01308 0466                        00            .byte	0
01309 0467                        02            .byte	2
01310                                           ! 509  0x66,
01311 0468                        66            .byte	$66
01312                                           ! 510  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01313 0469                        5F            .byte	$5F
01314 046A                        4F            .byte	$4F
01315 046B                        50            .byte	$50
01316 046C                        82            .byte	$82
01317 046D                        55            .byte	$55
01318 046E                        81            .byte	$81
01319 046F                        BF            .byte	$BF
01320 0470                        1F            .byte	$1F
01321                                           ! 511  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01322 0471                        00            .byte	0
01323 0472                        4F            .byte	$4F
01324 0473                        0D            .byte	$D
01325 0474                        0E            .byte	$E
01326 0475                        00            .byte	0
01327 0476                        00            .byte	0
01328 0477                        00            .byte	0
01329 0478                        00            .byte	0
01330                                           ! 512  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01331 0479                        9C            .byte	$9C
01332 047A                        8E            .byte	$8E
01333 047B                        8F            .byte	$8F
01334 047C                        28            .byte	$28
01335 047D                        0F            .byte	$F
01336 047E                        96            .byte	$96
01337 047F                        B9            .byte	$B9
01338 0480                        A3            .byte	$A3
01339                                           ! 513  0xff,
01340 0481                        FF            .byte	$FF
01341                                           ! 514  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01342 0482                        00            .byte	0
01343 0483                        08            .byte	8
01344 0484                        08            .byte	8
01345 0485                        08            .byte	8
01346 0486                        08            .byte	8
01347 0487                        08            .byte	8
01348 0488                        08            .byte	8
01349 0489                        08            .byte	8
01350                                           ! 515  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01351 048A                        10            .byte	$10
01352 048B                        18            .byte	$18
01353 048C                        18            .byte	$18
01354 048D                        18            .byte	$18
01355 048E                        18            .byte	$18
01356 048F                        18            .byte	$18
01357 0490                        18            .byte	$18
01358 0491                        18            .byte	$18
01359                                           ! 516  0x0e, 0x00, 0x0f, 0x08,
01360 0492                        0E            .byte	$E
01361 0493                        00            .byte	0
01362 0494                        0F            .byte	$F
01363 0495                        08            .byte	8
01364                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01365 0496                        00            .byte	0
01366 0497                        00            .byte	0
01367 0498                        00            .byte	0
01368 0499                        00            .byte	0
01369 049A                        00            .byte	0
01370 049B                        10            .byte	$10
01371 049C                        0A            .byte	$A
01372 049D                        0F            .byte	$F
01373 049E                        FF            .byte	$FF
01374                                           ! 518 },
01375                                           ! 519 {
01376                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01377 049F                        00            .byte	0
01378 04A0                        00            .byte	0
01379 04A1                        00            .byte	0
01380 04A2                        00            .byte	0
01381 04A3                        00            .byte	0
01382 04A4                        00            .byte	0
01383 04A5                        00            .byte	0
01384 04A6                        00            .byte	0
01385                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01386 04A7                        00            .byte	0
01387 04A8                        00            .byte	0
01388 04A9                        00            .byte	0
01389 04AA                        00            .byte	0
01390 04AB                        00            .byte	0
01391 04AC                        00            .byte	0
01392 04AD                        00            .byte	0
01393 04AE                        00            .byte	0
01394                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01395 04AF                        00            .byte	0
01396 04B0                        00            .byte	0
01397 04B1                        00            .byte	0
01398 04B2                        00            .byte	0
01399 04B3                        00            .byte	0
01400 04B4                        00            .byte	0
01401 04B5                        00            .byte	0
01402 04B6                        00            .byte	0
01403                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01404 04B7                        00            .byte	0
01405 04B8                        00            .byte	0
01406 04B9                        00            .byte	0
01407 04BA                        00            .byte	0
01408 04BB                        00            .byte	0
01409 04BC                        00            .byte	0
01410 04BD                        00            .byte	0
01411 04BE                        00            .byte	0
01412                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01413 04BF                        00            .byte	0
01414 04C0                        00            .byte	0
01415 04C1                        00            .byte	0
01416 04C2                        00            .byte	0
01417 04C3                        00            .byte	0
01418 04C4                        00            .byte	0
01419 04C5                        00            .byte	0
01420 04C6                        00            .byte	0
01421                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01422 04C7                        00            .byte	0
01423 04C8                        00            .byte	0
01424 04C9                        00            .byte	0
01425 04CA                        00            .byte	0
01426 04CB                        00            .byte	0
01427 04CC                        00            .byte	0
01428 04CD                        00            .byte	0
01429 04CE                        00            .byte	0
01430                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01431 04CF                        00            .byte	0
01432 04D0                        00            .byte	0
01433 04D1                        00            .byte	0
01434 04D2                        00            .byte	0
01435 04D3                        00            .byte	0
01436 04D4                        00            .byte	0
01437 04D5                        00            .byte	0
01438 04D6                        00            .byte	0
01439                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01440 04D7                        00            .byte	0
01441 04D8                        00            .byte	0
01442 04D9                        00            .byte	0
01443 04DA                        00            .byte	0
01444 04DB                        00            .byte	0
01445 04DC                        00            .byte	0
01446 04DD                        00            .byte	0
01447 04DE                        00            .byte	0
01448                                           ! 528 },
01449                                           ! 529 {
01450                                           ! 530  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01451 04DF                        00            .byte	0
01452 04E0                        00            .byte	0
01453 04E1                        00            .byte	0
01454 04E2                        00            .byte	0
01455 04E3                        00            .byte	0
01456 04E4                        00            .byte	0
01457 04E5                        00            .byte	0
01458 04E6                        00            .byte	0
01459                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01460 04E7                        00            .byte	0
01461 04E8                        00            .byte	0
01462 04E9                        00            .byte	0
01463 04EA                        00            .byte	0
01464 04EB                        00            .byte	0
01465 04EC                        00            .byte	0
01466 04ED                        00            .byte	0
01467 04EE                        00            .byte	0
01468                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01469 04EF                        00            .byte	0
01470 04F0                        00            .byte	0
01471 04F1                        00            .byte	0
01472 04F2                        00            .byte	0
01473 04F3                        00            .byte	0
01474 04F4                        00            .byte	0
01475 04F5                        00            .byte	0
01476 04F6                        00            .byte	0
01477                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01478 04F7                        00            .byte	0
01479 04F8                        00            .byte	0
01480 04F9                        00            .byte	0
01481 04FA                        00            .byte	0
01482 04FB                        00            .byte	0
01483 04FC                        00            .byte	0
01484 04FD                        00            .byte	0
01485 04FE                        00            .byte	0
01486                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01487 04FF                        00            .byte	0
01488 0500                        00            .byte	0
01489 0501                        00            .byte	0
01490 0502                        00            .byte	0
01491 0503                        00            .byte	0
01492 0504                        00            .byte	0
01493 0505                        00            .byte	0
01494 0506                        00            .byte	0
01495                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01496 0507                        00            .byte	0
01497 0508                        00            .byte	0
01498 0509                        00            .byte	0
01499 050A                        00            .byte	0
01500 050B                        00            .byte	0
01501 050C                        00            .byte	0
01502 050D                        00            .byte	0
01503 050E                        00            .byte	0
01504                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
01505 050F                        00            .byte	0
01506 0510                        00            .byte	0
01507 0511                        00            .byte	0
01508 0512                        00            .byte	0
01509 0513                        00            .byte	0
01510 0514                        00            .byte	0
01511 0515                        00            .byte	0
01512                                           ! 536 ,
01513 0516                        00            .byte	0
01514                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01515 0517                        00            .byte	0
01516 0518                        00            .byte	0
01517 0519                        00            .byte	0
01518 051A                        00            .byte	0
01519 051B                        00            .byte	0
01520 051C                        00            .byte	0
01521 051D                        00            .byte	0
01522 051E                        00            .byte	0
01523                                           ! 538 },
01524                                           ! 539 {
01525                                           ! 540  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01526 051F                        00            .byte	0
01527 0520                        00            .byte	0
01528 0521                        00            .byte	0
01529 0522                        00            .byte	0
01530 0523                        00            .byte	0
01531 0524                        00            .byte	0
01532 0525                        00            .byte	0
01533 0526                        00            .byte	0
01534                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01535 0527                        00            .byte	0
01536 0528                        00            .byte	0
01537 0529                        00            .byte	0
01538 052A                        00            .byte	0
01539 052B                        00            .byte	0
01540 052C                        00            .byte	0
01541 052D                        00            .byte	0
01542 052E                        00            .byte	0
01543                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01544 052F                        00            .byte	0
01545 0530                        00            .byte	0
01546 0531                        00            .byte	0
01547 0532                        00            .byte	0
01548 0533                        00            .byte	0
01549 0534                        00            .byte	0
01550 0535                        00            .byte	0
01551 0536                        00            .byte	0
01552                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01553 0537                        00            .byte	0
01554 0538                        00            .byte	0
01555 0539                        00            .byte	0
01556 053A                        00            .byte	0
01557 053B                        00            .byte	0
01558 053C                        00            .byte	0
01559 053D                        00            .byte	0
01560 053E                        00            .byte	0
01561                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01562 053F                        00            .byte	0
01563 0540                        00            .byte	0
01564 0541                        00            .byte	0
01565 0542                        00            .byte	0
01566 0543                        00            .byte	0
01567 0544                        00            .byte	0
01568 0545                        00            .byte	0
01569 0546                        00            .byte	0
01570                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01571 0547                        00            .byte	0
01572 0548                        00            .byte	0
01573 0549                        00            .byte	0
01574 054A                        00            .byte	0
01575 054B                        00            .byte	0
01576 054C                        00            .byte	0
01577 054D                        00            .byte	0
01578 054E                        00            .byte	0
01579                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01580 054F                        00            .byte	0
01581 0550                        00            .byte	0
01582 0551                        00            .byte	0
01583 0552                        00            .byte	0
01584 0553                        00            .byte	0
01585 0554                        00            .byte	0
01586 0555                        00            .byte	0
01587 0556                        00            .byte	0
01588                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01589 0557                        00            .byte	0
01590 0558                        00            .byte	0
01591 0559                        00            .byte	0
01592 055A                        00            .byte	0
01593 055B                        00            .byte	0
01594 055C                        00            .byte	0
01595 055D                        00            .byte	0
01596 055E                        00            .byte	0
01597                                           ! 548 },
01598                                           ! 549 {
01599                                           ! 550  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01600 055F                        00            .byte	0
01601 0560                        00            .byte	0
01602 0561                        00            .byte	0
01603 0562                        00            .byte	0
01604 0563                        00            .byte	0
01605 0564                        00            .byte	0
01606 0565                        00            .byte	0
01607 0566                        00            .byte	0
01608                                           ! 551  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01609 0567                        00            .byte	0
01610 0568                        00            .byte	0
01611 0569                        00            .byte	0
01612 056A                        00            .byte	0
01613 056B                        00            .byte	0
01614 056C                        00            .byte	0
01615 056D                        00            .byte	0
01616 056E                        00            .byte	0
01617                                           ! 552  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01618 056F                        00            .byte	0
01619 0570                        00            .byte	0
01620 0571                        00            .byte	0
01621 0572                        00            .byte	0
01622 0573                        00            .byte	0
01623 0574                        00            .byte	0
01624 0575                        00            .byte	0
01625 0576                        00            .byte	0
01626                                           ! 553  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01627 0577                        00            .byte	0
01628 0578                        00            .byte	0
01629 0579                        00            .byte	0
01630 057A                        00            .byte	0
01631 057B                        00            .byte	0
01632 057C                        00            .byte	0
01633 057D                        00            .byte	0
01634 057E                        00            .byte	0
01635                                           ! 554  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01636 057F                        00            .byte	0
01637 0580                        00            .byte	0
01638 0581                        00            .byte	0
01639 0582                        00            .byte	0
01640 0583                        00            .byte	0
01641 0584                        00            .byte	0
01642 0585                        00            .byte	0
01643 0586                        00            .byte	0
01644                                           ! 555  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01645 0587                        00            .byte	0
01646 0588                        00            .byte	0
01647 0589                        00            .byte	0
01648 058A                        00            .byte	0
01649 058B                        00            .byte	0
01650 058C                        00            .byte	0
01651 058D                        00            .byte	0
01652 058E                        00            .byte	0
01653                                           ! 556  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01654 058F                        00            .byte	0
01655 0590                        00            .byte	0
01656 0591                        00            .byte	0
01657 0592                        00            .byte	0
01658 0593                        00            .byte	0
01659 0594                        00            .byte	0
01660 0595                        00            .byte	0
01661 0596                        00            .byte	0
01662                                           ! 557  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01663 0597                        00            .byte	0
01664 0598                        00            .byte	0
01665 0599                        00            .byte	0
01666 059A                        00            .byte	0
01667 059B                        00            .byte	0
01668 059C                        00            .byte	0
01669 059D                        00            .byte	0
01670 059E                        00            .byte	0
01671                                           ! 558 },
01672                                           ! 559 {
01673                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01674 059F                        00            .byte	0
01675 05A0                        00            .byte	0
01676 05A1                        00            .byte	0
01677 05A2                        00            .byte	0
01678 05A3                        00            .byte	0
01679 05A4                        00            .byte	0
01680 05A5                        00            .byte	0
01681 05A6                        00            .byte	0
01682                                           ! 561  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01683 05A7                        00            .byte	0
01684 05A8                        00            .byte	0
01685 05A9                        00            .byte	0
01686 05AA                        00            .byte	0
01687 05AB                        00            .byte	0
01688 05AC                        00            .byte	0
01689 05AD                        00            .byte	0
01690 05AE                        00            .byte	0
01691                                           ! 562  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01692 05AF                        00            .byte	0
01693 05B0                        00            .byte	0
01694 05B1                        00            .byte	0
01695 05B2                        00            .byte	0
01696 05B3                        00            .byte	0
01697 05B4                        00            .byte	0
01698 05B5                        00            .byte	0
01699 05B6                        00            .byte	0
01700                                           ! 563  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01701 05B7                        00            .byte	0
01702 05B8                        00            .byte	0
01703 05B9                        00            .byte	0
01704 05BA                        00            .byte	0
01705 05BB                        00            .byte	0
01706 05BC                        00            .byte	0
01707 05BD                        00            .byte	0
01708 05BE                        00            .byte	0
01709                                           ! 564  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01710 05BF                        00            .byte	0
01711 05C0                        00            .byte	0
01712 05C1                        00            .byte	0
01713 05C2                        00            .byte	0
01714 05C3                        00            .byte	0
01715 05C4                        00            .byte	0
01716 05C5                        00            .byte	0
01717 05C6                        00            .byte	0
01718                                           ! 565  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01719 05C7                        00            .byte	0
01720 05C8                        00            .byte	0
01721 05C9                        00            .byte	0
01722 05CA                        00            .byte	0
01723 05CB                        00            .byte	0
01724 05CC                        00            .byte	0
01725 05CD                        00            .byte	0
01726 05CE                        00            .byte	0
01727                                           ! 566  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01728 05CF                        00            .byte	0
01729 05D0                        00            .byte	0
01730 05D1                        00            .byte	0
01731 05D2                        00            .byte	0
01732 05D3                        00            .byte	0
01733 05D4                        00            .byte	0
01734 05D5                        00            .byte	0
01735 05D6                        00            .byte	0
01736                                           ! 567  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01737 05D7                        00            .byte	0
01738 05D8                        00            .byte	0
01739 05D9                        00            .byte	0
01740 05DA                        00            .byte	0
01741 05DB                        00            .byte	0
01742 05DC                        00            .byte	0
01743 05DD                        00            .byte	0
01744 05DE                        00            .byte	0
01745                                           ! 568 },
01746                                           ! 569 {
01747                                           ! 570  40, 24, 8, 0x00, 0x20,
01748 05DF                        28            .byte	$28
01749 05E0                        18            .byte	$18
01750 05E1                        08            .byte	8
01751 05E2                        00            .byte	0
01752 05E3                        20            .byte	$20
01753                                           ! 571  0x09, 0x0f, 0x00, 0x06,
01754 05E4                        09            .byte	9
01755 05E5                        0F            .byte	$F
01756 05E6                        00            .byte	0
01757 05E7                        06            .byte	6
01758                                           ! 572  0x63,
01759 05E8                        63            .byte	$63
01760                                           ! 573  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01761 05E9                        2D            .byte	$2D
01762 05EA                        27            .byte	$27
01763 05EB                        28            .byte	$28
01764 05EC                        90            .byte	$90
01765 05ED                        2B            .byte	$2B
01766 05EE                        80            .byte	$80
01767 05EF                        BF            .byte	$BF
01768 05F0                        1F            .byte	$1F
01769                                           ! 574  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01770 05F1                        00            .byte	0
01771 05F2                        C0            .byte	$C0
01772 05F3                        00            .byte	0
01773 05F4                        00            .byte	0
01774 05F5                        00            .byte	0
01775 05F6                        00            .byte	0
01776 05F7                        00            .byte	0
01777 05F8                        00            .byte	0
01778                                           ! 575  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01779 05F9                        9C            .byte	$9C
01780 05FA                        8E            .byte	$8E
01781 05FB                        8F            .byte	$8F
01782 05FC                        14            .byte	$14
01783 05FD                        00            .byte	0
01784 05FE                        96            .byte	$96
01785 05FF                        B9            .byte	$B9
01786 0600                        E3            .byte	$E3
01787                                           ! 576  0xff,
01788 0601                        FF            .byte	$FF
01789                                           ! 577  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01790 0602                        00            .byte	0
01791 0603                        01            .byte	1
01792 0604                        02            .byte	2
01793 0605                        03            .byte	3
01794 0606                        04            .byte	4
01795 0607                        05            .byte	5
01796 0608                        06            .byte	6
01797 0609                        07            .byte	7
01798                                           ! 578  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01799 060A                        10            .byte	$10
01800 060B                        11            .byte	$11
01801 060C                        12            .byte	$12
01802 060D                        13            .byte	$13
01803 060E                        14            .byte	$14
01804 060F                        15            .byte	$15
01805 0610                        16            .byte	$16
01806 0611                        17            .byte	$17
01807                                           ! 579  0x01, 0x00, 0x0f, 0x00,
01808 0612                        01            .byte	1
01809 0613                        00            .byte	0
01810 0614                        0F            .byte	$F
01811 0615                        00            .byte	0
01812                                           ! 580  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01813 0616                        00            .byte	0
01814 0617                        00            .byte	0
01815 0618                        00            .byte	0
01816 0619                        00            .byte	0
01817 061A                        00            .byte	0
01818 061B                        00            .byte	0
01819 061C                        05            .byte	5
01820 061D                        0F            .byte	$F
01821 061E                        FF            .byte	$FF
01822                                           ! 581 },
01823                                           ! 582 {
01824                                           ! 583  80, 24, 8, 0x00, 0x40,
01825 061F                        50            .byte	$50
01826 0620                        18            .byte	$18
01827 0621                        08            .byte	8
01828 0622                        00            .byte	0
01829 0623                        40            .byte	$40
01830                                           ! 584  0x01, 0x0f, 0x00, 0x06,
01831 0624                        01            .byte	1
01832 0625                        0F            .byte	$F
01833 0626                        00            .byte	0
01834 0627                        06            .byte	6
01835                                           ! 585  0x63,
01836 0628                        63            .byte	$63
01837                                           ! 586  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01838 0629                        5F            .byte	$5F
01839 062A                        4F            .byte	$4F
01840 062B                        50            .byte	$50
01841 062C                        82            .byte	$82
01842 062D                        54            .byte	$54
01843 062E                        80            .byte	$80
01844 062F                        BF            .byte	$BF
01845 0630                        1F            .byte	$1F
01846                                           ! 587  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01847 0631                        00            .byte	0
01848 0632                        C0            .byte	$C0
01849 0633                        00            .byte	0
01850 0634                        00            .byte	0
01851 0635                        00            .byte	0
01852 0636                        00            .byte	0
01853 0637                        00            .byte	0
01854 0638                        00            .byte	0
01855                                           ! 588  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01856 0639                        9C            .byte	$9C
01857 063A                        8E            .byte	$8E
01858 063B                        8F            .byte	$8F
01859 063C                        28            .byte	$28
01860 063D                        00            .byte	0
01861 063E                        96            .byte	$96
01862 063F                        B9            .byte	$B9
01863 0640                        E3            .byte	$E3
01864                                           ! 589  0xff,
01865 0641                        FF            .byte	$FF
01866                                           ! 590  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01867 0642                        00            .byte	0
01868 0643                        01            .byte	1
01869 0644                        02            .byte	2
01870 0645                        03            .byte	3
01871 0646                        04            .byte	4
01872 0647                        05            .byte	5
01873 0648                        06            .byte	6
01874 0649                        07            .byte	7
01875                                           ! 591  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01876 064A                        10            .byte	$10
01877 064B                        11            .byte	$11
01878 064C                        12            .byte	$12
01879 064D                        13            .byte	$13
01880 064E                        14            .byte	$14
01881 064F                        15            .byte	$15
01882 0650                        16            .byte	$16
01883 0651                        17            .byte	$17
01884                                           ! 592  0x01, 0x00, 0x0f, 0x00,
01885 0652                        01            .byte	1
01886 0653                        00            .byte	0
01887 0654                        0F            .byte	$F
01888 0655                        00            .byte	0
01889                                           ! 593  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01890 0656                        00            .byte	0
01891 0657                        00            .byte	0
01892 0658                        00            .byte	0
01893 0659                        00            .byte	0
01894 065A                        00            .byte	0
01895 065B                        00            .byte	0
01896 065C                        05            .byte	5
01897 065D                        0F            .byte	$F
01898 065E                        FF            .byte	$FF
01899                                           ! 594 },
01900                                           ! 595 {
01901                                           ! 596  0x00, 0x00, 0x
01902 065F                        00            .byte	0
01903 0660                        00            .byte	0
01904                                           ! 596 00, 0x00, 0x00, 0x00, 0x00, 0x00,
01905 0661                        00            .byte	0
01906 0662                        00            .byte	0
01907 0663                        00            .byte	0
01908 0664                        00            .byte	0
01909 0665                        00            .byte	0
01910 0666                        00            .byte	0
01911                                           ! 597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01912 0667                        00            .byte	0
01913 0668                        00            .byte	0
01914 0669                        00            .byte	0
01915 066A                        00            .byte	0
01916 066B                        00            .byte	0
01917 066C                        00            .byte	0
01918 066D                        00            .byte	0
01919 066E                        00            .byte	0
01920                                           ! 598  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01921 066F                        00            .byte	0
01922 0670                        00            .byte	0
01923 0671                        00            .byte	0
01924 0672                        00            .byte	0
01925 0673                        00            .byte	0
01926 0674                        00            .byte	0
01927 0675                        00            .byte	0
01928 0676                        00            .byte	0
01929                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01930 0677                        00            .byte	0
01931 0678                        00            .byte	0
01932 0679                        00            .byte	0
01933 067A                        00            .byte	0
01934 067B                        00            .byte	0
01935 067C                        00            .byte	0
01936 067D                        00            .byte	0
01937 067E                        00            .byte	0
01938                                           ! 600  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01939 067F                        00            .byte	0
01940 0680                        00            .byte	0
01941 0681                        00            .byte	0
01942 0682                        00            .byte	0
01943 0683                        00            .byte	0
01944 0684                        00            .byte	0
01945 0685                        00            .byte	0
01946 0686                        00            .byte	0
01947                                           ! 601  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01948 0687                        00            .byte	0
01949 0688                        00            .byte	0
01950 0689                        00            .byte	0
01951 068A                        00            .byte	0
01952 068B                        00            .byte	0
01953 068C                        00            .byte	0
01954 068D                        00            .byte	0
01955 068E                        00            .byte	0
01956                                           ! 602  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01957 068F                        00            .byte	0
01958 0690                        00            .byte	0
01959 0691                        00            .byte	0
01960 0692                        00            .byte	0
01961 0693                        00            .byte	0
01962 0694                        00            .byte	0
01963 0695                        00            .byte	0
01964 0696                        00            .byte	0
01965                                           ! 603  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01966 0697                        00            .byte	0
01967 0698                        00            .byte	0
01968 0699                        00            .byte	0
01969 069A                        00            .byte	0
01970 069B                        00            .byte	0
01971 069C                        00            .byte	0
01972 069D                        00            .byte	0
01973 069E                        00            .byte	0
01974                                           ! 604 },
01975                                           ! 605 {
01976                                           ! 606  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01977 069F                        00            .byte	0
01978 06A0                        00            .byte	0
01979 06A1                        00            .byte	0
01980 06A2                        00            .byte	0
01981 06A3                        00            .byte	0
01982 06A4                        00            .byte	0
01983 06A5                        00            .byte	0
01984 06A6                        00            .byte	0
01985                                           ! 607  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01986 06A7                        00            .byte	0
01987 06A8                        00            .byte	0
01988 06A9                        00            .byte	0
01989 06AA                        00            .byte	0
01990 06AB                        00            .byte	0
01991 06AC                        00            .byte	0
01992 06AD                        00            .byte	0
01993 06AE                        00            .byte	0
01994                                           ! 608  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01995 06AF                        00            .byte	0
01996 06B0                        00            .byte	0
01997 06B1                        00            .byte	0
01998 06B2                        00            .byte	0
01999 06B3                        00            .byte	0
02000 06B4                        00            .byte	0
02001 06B5                        00            .byte	0
02002 06B6                        00            .byte	0
02003                                           ! 609  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02004 06B7                        00            .byte	0
02005 06B8                        00            .byte	0
02006 06B9                        00            .byte	0
02007 06BA                        00            .byte	0
02008 06BB                        00            .byte	0
02009 06BC                        00            .byte	0
02010 06BD                        00            .byte	0
02011 06BE                        00            .byte	0
02012                                           ! 610  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02013 06BF                        00            .byte	0
02014 06C0                        00            .byte	0
02015 06C1                        00            .byte	0
02016 06C2                        00            .byte	0
02017 06C3                        00            .byte	0
02018 06C4                        00            .byte	0
02019 06C5                        00            .byte	0
02020 06C6                        00            .byte	0
02021                                           ! 611  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02022 06C7                        00            .byte	0
02023 06C8                        00            .byte	0
02024 06C9                        00            .byte	0
02025 06CA                        00            .byte	0
02026 06CB                        00            .byte	0
02027 06CC                        00            .byte	0
02028 06CD                        00            .byte	0
02029 06CE                        00            .byte	0
02030                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02031 06CF                        00            .byte	0
02032 06D0                        00            .byte	0
02033 06D1                        00            .byte	0
02034 06D2                        00            .byte	0
02035 06D3                        00            .byte	0
02036 06D4                        00            .byte	0
02037 06D5                        00            .byte	0
02038 06D6                        00            .byte	0
02039                                           ! 613  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02040 06D7                        00            .byte	0
02041 06D8                        00            .byte	0
02042 06D9                        00            .byte	0
02043 06DA                        00            .byte	0
02044 06DB                        00            .byte	0
02045 06DC                        00            .byte	0
02046 06DD                        00            .byte	0
02047 06DE                        00            .byte	0
02048                                           ! 614 },
02049                                           ! 615 {
02050                                           ! 616  80, 24, 14, 0x00, 0x80,
02051 06DF                        50            .byte	$50
02052 06E0                        18            .byte	$18
02053 06E1                        0E            .byte	$E
02054 06E2                        00            .byte	0
02055 06E3                        80            .byte	$80
02056                                           ! 617  0x01, 0x0f, 0x00, 0x06,
02057 06E4                        01            .byte	1
02058 06E5                        0F            .byte	$F
02059 06E6                        00            .byte	0
02060 06E7                        06            .byte	6
02061                                           ! 618  0xa3,
02062 06E8                        A3            .byte	$A3
02063                                           ! 619  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02064 06E9                        5F            .byte	$5F
02065 06EA                        4F            .byte	$4F
02066 06EB                        50            .byte	$50
02067 06EC                        82            .byte	$82
02068 06ED                        54            .byte	$54
02069 06EE                        80            .byte	$80
02070 06EF                        BF            .byte	$BF
02071 06F0                        1F            .byte	$1F
02072                                           ! 620  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02073 06F1                        00            .byte	0
02074 06F2                        40            .byte	$40
02075 06F3                        00            .byte	0
02076 06F4                        00            .byte	0
02077 06F5                        00            .byte	0
02078 06F6                        00            .byte	0
02079 06F7                        00            .byte	0
02080 06F8                        00            .byte	0
02081                                           ! 621  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02082 06F9                        83            .byte	$83
02083 06FA                        85            .byte	$85
02084 06FB                        5D            .byte	$5D
02085 06FC                        28            .byte	$28
02086 06FD                        0F            .byte	$F
02087 06FE                        63            .byte	$63
02088 06FF                        BA            .byte	$BA
02089 0700                        E3            .byte	$E3
02090                                           ! 622  0xff,
02091 0701                        FF            .byte	$FF
02092                                           ! 623  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
02093 0702                        00            .byte	0
02094 0703                        08            .byte	8
02095 0704                        00            .byte	0
02096 0705                        00            .byte	0
02097 0706                        18            .byte	$18
02098 0707                        18            .byte	$18
02099 0708                        00            .byte	0
02100 0709                        00            .byte	0
02101                                           ! 624  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
02102 070A                        00            .byte	0
02103 070B                        08            .byte	8
02104 070C                        00            .byte	0
02105 070D                        00            .byte	0
02106 070E                        00            .byte	0
02107 070F                        18            .byte	$18
02108 0710                        00            .byte	0
02109 0711                        00            .byte	0
02110                                           ! 625  0x01, 0x00, 0x01, 0x00,
02111 0712                        01            .byte	1
02112 0713                        00            .byte	0
02113 0714                        01            .byte	1
02114 0715                        00            .byte	0
02115                                           ! 626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02116 0716                        00            .byte	0
02117 0717                        00            .byte	0
02118 0718                        00            .byte	0
02119 0719                        00            .byte	0
02120 071A                        00            .byte	0
02121 071B                        00            .byte	0
02122 071C                        05            .byte	5
02123 071D                        0F            .byte	$F
02124 071E                        FF            .byte	$FF
02125                                           ! 627 },
02126                                           ! 628 {
02127                                           ! 629  80, 24, 14, 0x00, 0x80,
02128 071F                        50            .byte	$50
02129 0720                        18            .byte	$18
02130 0721                        0E            .byte	$E
02131 0722                        00            .byte	0
02132 0723                        80            .byte	$80
02133                                           ! 630  0x01, 0x0f, 0x00, 0x06,
02134 0724                        01            .byte	1
02135 0725                        0F            .byte	$F
02136 0726                        00            .byte	0
02137 0727                        06            .byte	6
02138                                           ! 631  0xa3,
02139 0728                        A3            .byte	$A3
02140                                           ! 632  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02141 0729                        5F            .byte	$5F
02142 072A                        4F            .byte	$4F
02143 072B                        50            .byte	$50
02144 072C                        82            .byte	$82
02145 072D                        54            .byte	$54
02146 072E                        80            .byte	$80
02147 072F                        BF            .byte	$BF
02148 0730                        1F            .byte	$1F
02149                                           ! 633  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02150 0731                        00            .byte	0
02151 0732                        40            .byte	$40
02152 0733                        00            .byte	0
02153 0734                        00            .byte	0
02154 0735                        00            .byte	0
02155 0736                        00            .byte	0
02156 0737                        00            .byte	0
02157 0738                        00            .byte	0
02158                                           ! 634  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
02159 0739                        83            .byte	$83
02160 073A                        85            .byte	$85
02161 073B                        5D            .byte	$5D
02162 073C                        28            .byte	$28
02163 073D                        0F            .byte	$F
02164 073E                        63            .byte	$63
02165 073F                        BA            .byte	$BA
02166 0740                        E3            .byte	$E3
02167                                           ! 635  0xff,
02168 0741                        FF            .byte	$FF
02169                                           ! 636  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02170 0742                        00            .byte	0
02171 0743                        01            .byte	1
02172 0744                        02            .byte	2
02173 0745                        03            .byte	3
02174 0746                        04            .byte	4
02175 0747                        05            .byte	5
02176 0748                        14            .byte	$14
02177 0749                        07            .byte	7
02178                                           ! 637  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02179 074A                        38            .byte	$38
02180 074B                        39            .byte	$39
02181 074C                        3A            .byte	$3A
02182 074D                        3B            .byte	$3B
02183 074E                        3C            .byte	$3C
02184 074F                        3D            .byte	$3D
02185 0750                        3E            .byte	$3E
02186 0751                        3F            .byte	$3F
02187                                           ! 638  0x01, 0x00, 0x0f, 0x00,
02188 0752                        01            .byte	1
02189 0753                        00            .byte	0
02190 0754                        0F            .byte	$F
02191 0755                        00            .byte	0
02192                                           ! 639  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02193 0756                        00            .byte	0
02194 0757                        00            .byte	0
02195 0758                        00            .byte	0
02196 0759                        00            .byte	0
02197 075A                        00            .byte	0
02198 075B                        00            .byte	0
02199 075C                        05            .byte	5
02200 075D                        0F            .byte	$F
02201 075E                        FF            .byte	$FF
02202                                           ! 640 },
02203                                           ! 641 {
02204                                           ! 642  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02205 075F                        00            .byte	0
02206 0760                        00            .byte	0
02207 0761                        00            .byte	0
02208 0762                        00            .byte	0
02209 0763                        00            .byte	0
02210 0764                        00            .byte	0
02211 0765                        00            .byte	0
02212 0766                        00            .byte	0
02213                                           ! 643  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02214 0767                        00            .byte	0
02215 0768                        00            .byte	0
02216 0769                        00            .byte	0
02217 076A                        00            .byte	0
02218 076B                        00            .byte	0
02219 076C                        00            .byte	0
02220 076D                        00            .byte	0
02221 076E                        00            .byte	0
02222                                           ! 644  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02223 076F                        00            .byte	0
02224 0770                        00            .byte	0
02225 0771                        00            .byte	0
02226 0772                        00            .byte	0
02227 0773                        00            .byte	0
02228 0774                        00            .byte	0
02229 0775                        00            .byte	0
02230 0776                        00            .byte	0
02231                                           ! 645  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02232 0777                        00            .byte	0
02233 0778                        00            .byte	0
02234 0779                        00            .byte	0
02235 077A                        00            .byte	0
02236 077B                        00            .byte	0
02237 077C                        00            .byte	0
02238 077D                        00            .byte	0
02239 077E                        00            .byte	0
02240                                           ! 646  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02241 077F                        00            .byte	0
02242 0780                        00            .byte	0
02243 0781                        00            .byte	0
02244 0782                        00            .byte	0
02245 0783                        00            .byte	0
02246 0784                        00            .byte	0
02247 0785                        00            .byte	0
02248 0786                        00            .byte	0
02249                                           ! 647  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02250 0787                        00            .byte	0
02251 0788                        00            .byte	0
02252 0789                        00            .byte	0
02253 078A                        00            .byte	0
02254 078B                        00            .byte	0
02255 078C                        00            .byte	0
02256 078D                        00            .byte	0
02257 078E                        00            .byte	0
02258                                           ! 648  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02259 078F                        00            .byte	0
02260 0790                        00            .byte	0
02261 0791                        00            .byte	0
02262 0792                        00            .byte	0
02263 0793                        00            .byte	0
02264 0794                        00            .byte	0
02265 0795                        00            .byte	0
02266 0796                        00            .byte	0
02267                                           ! 649  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02268 0797                        00            .byte	0
02269 0798                        00            .byte	0
02270 0799                        00            .byte	0
02271 079A                        00            .byte	0
02272 079B                        00            .byte	0
02273 079C                        00            .byte	0
02274 079D                        00            .byte	0
02275 079E                        00            .byte	0
02276                                           ! 650 },
02277                                           ! 651 {
02278                                           ! 652  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02279 079F                        00            .byte	0
02280 07A0                        00            .byte	0
02281 07A1                        00            .byte	0
02282 07A2                        00            .byte	0
02283 07A3                        00            .byte	0
02284 07A4                        00            .byte	0
02285 07A5                        00            .byte	0
02286 07A6                        00            .byte	0
02287                                           ! 653  0x00, 0x00, 0x00, 0x00, 0x00, 0x00
02288 07A7                        00            .byte	0
02289 07A8                        00            .byte	0
02290 07A9                        00            .byte	0
02291 07AA                        00            .byte	0
02292 07AB                        00            .byte	0
02293                                           ! 653 , 0x00, 0x00,
02294 07AC                        00            .byte	0
02295 07AD                        00            .byte	0
02296 07AE                        00            .byte	0
02297                                           ! 654  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02298 07AF                        00            .byte	0
02299 07B0                        00            .byte	0
02300 07B1                        00            .byte	0
02301 07B2                        00            .byte	0
02302 07B3                        00            .byte	0
02303 07B4                        00            .byte	0
02304 07B5                        00            .byte	0
02305 07B6                        00            .byte	0
02306                                           ! 655  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02307 07B7                        00            .byte	0
02308 07B8                        00            .byte	0
02309 07B9                        00            .byte	0
02310 07BA                        00            .byte	0
02311 07BB                        00            .byte	0
02312 07BC                        00            .byte	0
02313 07BD                        00            .byte	0
02314 07BE                        00            .byte	0
02315                                           ! 656  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02316 07BF                        00            .byte	0
02317 07C0                        00            .byte	0
02318 07C1                        00            .byte	0
02319 07C2                        00            .byte	0
02320 07C3                        00            .byte	0
02321 07C4                        00            .byte	0
02322 07C5                        00            .byte	0
02323 07C6                        00            .byte	0
02324                                           ! 657  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02325 07C7                        00            .byte	0
02326 07C8                        00            .byte	0
02327 07C9                        00            .byte	0
02328 07CA                        00            .byte	0
02329 07CB                        00            .byte	0
02330 07CC                        00            .byte	0
02331 07CD                        00            .byte	0
02332 07CE                        00            .byte	0
02333                                           ! 658  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02334 07CF                        00            .byte	0
02335 07D0                        00            .byte	0
02336 07D1                        00            .byte	0
02337 07D2                        00            .byte	0
02338 07D3                        00            .byte	0
02339 07D4                        00            .byte	0
02340 07D5                        00            .byte	0
02341 07D6                        00            .byte	0
02342                                           ! 659  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02343 07D7                        00            .byte	0
02344 07D8                        00            .byte	0
02345 07D9                        00            .byte	0
02346 07DA                        00            .byte	0
02347 07DB                        00            .byte	0
02348 07DC                        00            .byte	0
02349 07DD                        00            .byte	0
02350 07DE                        00            .byte	0
02351                                           ! 660 },
02352                                           ! 661 {
02353                                           ! 662  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02354 07DF                        00            .byte	0
02355 07E0                        00            .byte	0
02356 07E1                        00            .byte	0
02357 07E2                        00            .byte	0
02358 07E3                        00            .byte	0
02359 07E4                        00            .byte	0
02360 07E5                        00            .byte	0
02361 07E6                        00            .byte	0
02362                                           ! 663  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02363 07E7                        00            .byte	0
02364 07E8                        00            .byte	0
02365 07E9                        00            .byte	0
02366 07EA                        00            .byte	0
02367 07EB                        00            .byte	0
02368 07EC                        00            .byte	0
02369 07ED                        00            .byte	0
02370 07EE                        00            .byte	0
02371                                           ! 664  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02372 07EF                        00            .byte	0
02373 07F0                        00            .byte	0
02374 07F1                        00            .byte	0
02375 07F2                        00            .byte	0
02376 07F3                        00            .byte	0
02377 07F4                        00            .byte	0
02378 07F5                        00            .byte	0
02379 07F6                        00            .byte	0
02380                                           ! 665  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02381 07F7                        00            .byte	0
02382 07F8                        00            .byte	0
02383 07F9                        00            .byte	0
02384 07FA                        00            .byte	0
02385 07FB                        00            .byte	0
02386 07FC                        00            .byte	0
02387 07FD                        00            .byte	0
02388 07FE                        00            .byte	0
02389                                           ! 666  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02390 07FF                        00            .byte	0
02391 0800                        00            .byte	0
02392 0801                        00            .byte	0
02393 0802                        00            .byte	0
02394 0803                        00            .byte	0
02395 0804                        00            .byte	0
02396 0805                        00            .byte	0
02397 0806                        00            .byte	0
02398                                           ! 667  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02399 0807                        00            .byte	0
02400 0808                        00            .byte	0
02401 0809                        00            .byte	0
02402 080A                        00            .byte	0
02403 080B                        00            .byte	0
02404 080C                        00            .byte	0
02405 080D                        00            .byte	0
02406 080E                        00            .byte	0
02407                                           ! 668  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02408 080F                        00            .byte	0
02409 0810                        00            .byte	0
02410 0811                        00            .byte	0
02411 0812                        00            .byte	0
02412 0813                        00            .byte	0
02413 0814                        00            .byte	0
02414 0815                        00            .byte	0
02415 0816                        00            .byte	0
02416                                           ! 669  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02417 0817                        00            .byte	0
02418 0818                        00            .byte	0
02419 0819                        00            .byte	0
02420 081A                        00            .byte	0
02421 081B                        00            .byte	0
02422 081C                        00            .byte	0
02423 081D                        00            .byte	0
02424 081E                        00            .byte	0
02425                                           ! 670 },
02426                                           ! 671 {
02427                                           ! 672  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02428 081F                        00            .byte	0
02429 0820                        00            .byte	0
02430 0821                        00            .byte	0
02431 0822                        00            .byte	0
02432 0823                        00            .byte	0
02433 0824                        00            .byte	0
02434 0825                        00            .byte	0
02435 0826                        00            .byte	0
02436                                           ! 673  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02437 0827                        00            .byte	0
02438 0828                        00            .byte	0
02439 0829                        00            .byte	0
02440 082A                        00            .byte	0
02441 082B                        00            .byte	0
02442 082C                        00            .byte	0
02443 082D                        00            .byte	0
02444 082E                        00            .byte	0
02445                                           ! 674  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02446 082F                        00            .byte	0
02447 0830                        00            .byte	0
02448 0831                        00            .byte	0
02449 0832                        00            .byte	0
02450 0833                        00            .byte	0
02451 0834                        00            .byte	0
02452 0835                        00            .byte	0
02453 0836                        00            .byte	0
02454                                           ! 675  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02455 0837                        00            .byte	0
02456 0838                        00            .byte	0
02457 0839                        00            .byte	0
02458 083A                        00            .byte	0
02459 083B                        00            .byte	0
02460 083C                        00            .byte	0
02461 083D                        00            .byte	0
02462 083E                        00            .byte	0
02463                                           ! 676  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02464 083F                        00            .byte	0
02465 0840                        00            .byte	0
02466 0841                        00            .byte	0
02467 0842                        00            .byte	0
02468 0843                        00            .byte	0
02469 0844                        00            .byte	0
02470 0845                        00            .byte	0
02471 0846                        00            .byte	0
02472                                           ! 677  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02473 0847                        00            .byte	0
02474 0848                        00            .byte	0
02475 0849                        00            .byte	0
02476 084A                        00            .byte	0
02477 084B                        00            .byte	0
02478 084C                        00            .byte	0
02479 084D                        00            .byte	0
02480 084E                        00            .byte	0
02481                                           ! 678  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02482 084F                        00            .byte	0
02483 0850                        00            .byte	0
02484 0851                        00            .byte	0
02485 0852                        00            .byte	0
02486 0853                        00            .byte	0
02487 0854                        00            .byte	0
02488 0855                        00            .byte	0
02489 0856                        00            .byte	0
02490                                           ! 679  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02491 0857                        00            .byte	0
02492 0858                        00            .byte	0
02493 0859                        00            .byte	0
02494 085A                        00            .byte	0
02495 085B                        00            .byte	0
02496 085C                        00            .byte	0
02497 085D                        00            .byte	0
02498 085E                        00            .byte	0
02499                                           ! 680 },
02500                                           ! 681 {
02501                                           ! 682  40, 24, 16, 0x00, 0x08,
02502 085F                        28            .byte	$28
02503 0860                        18            .byte	$18
02504 0861                        10            .byte	$10
02505 0862                        00            .byte	0
02506 0863                        08            .byte	8
02507                                           ! 683  0x08, 0x03, 0x00, 0x02,
02508 0864                        08            .byte	8
02509 0865                        03            .byte	3
02510 0866                        00            .byte	0
02511 0867                        02            .byte	2
02512                                           ! 684  0x67,
02513 0868                        67            .byte	$67
02514                                           ! 685  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02515 0869                        2D            .byte	$2D
02516 086A                        27            .byte	$27
02517 086B                        28            .byte	$28
02518 086C                        90            .byte	$90
02519 086D                        2B            .byte	$2B
02520 086E                        A0            .byte	$A0
02521 086F                        BF            .byte	$BF
02522 0870                        1F            .byte	$1F
02523                                           ! 686  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02524 0871                        00            .byte	0
02525 0872                        4F            .byte	$4F
02526 0873                        0D            .byte	$D
02527 0874                        0E            .byte	$E
02528 0875                        00            .byte	0
02529 0876                        00            .byte	0
02530 0877                        00            .byte	0
02531 0878                        00            .byte	0
02532                                           ! 687  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02533 0879                        9C            .byte	$9C
02534 087A                        8E            .byte	$8E
02535 087B                        8F            .byte	$8F
02536 087C                        14            .byte	$14
02537 087D                        1F            .byte	$1F
02538 087E                        96            .byte	$96
02539 087F                        B9            .byte	$B9
02540 0880                        A3            .byte	$A3
02541                                           ! 688  0xff,
02542 0881                        FF            .byte	$FF
02543                                           ! 689  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02544 0882                        00            .byte	0
02545 0883                        01            .byte	1
02546 0884                        02            .byte	2
02547 0885                        03            .byte	3
02548 0886                        04            .byte	4
02549 0887                        05            .byte	5
02550 0888                        14            .byte	$14
02551 0889                        07            .byte	7
02552                                           ! 690  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02553 088A                        38            .byte	$38
02554 088B                        39            .byte	$39
02555 088C                        3A            .byte	$3A
02556 088D                        3B            .byte	$3B
02557 088E                        3C            .byte	$3C
02558 088F                        3D            .byte	$3D
02559 0890                        3E            .byte	$3E
02560 0891                        3F            .byte	$3F
02561                                           ! 691  0x0c, 0x00, 0x0f, 0x08,
02562 0892                        0C            .byte	$C
02563 0893                        00            .byte	0
02564 0894                        0F            .byte	$F
02565 0895                        08            .byte	8
02566                                           ! 692  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02567 0896                        00            .byte	0
02568 0897                        00            .byte	0
02569 0898                        00            .byte	0
02570 0899                        00            .byte	0
02571 089A                        00            .byte	0
02572 089B                        10            .byte	$10
02573 089C                        0E            .byte	$E
02574 089D                        0F            .byte	$F
02575 089E                        FF            .byte	$FF
02576                                           ! 693 },
02577                                           ! 694 {
02578                                           ! 695  80, 24, 16, 0x00, 0x10,
02579 089F                        50            .byte	$50
02580 08A0                        18            .byte	$18
02581 08A1                        10            .byte	$10
02582 08A2                        00            .byte	0
02583 08A3                        10            .byte	$10
02584                                           ! 696  0x00, 0x03, 0x00, 0x02,
02585 08A4                        00            .byte	0
02586 08A5                        03            .byte	3
02587 08A6                        00            .byte	0
02588 08A7                        02            .byte	2
02589                                           ! 697  0x67,
02590 08A8                        67            .byte	$67
02591                                           ! 698  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02592 08A9                        5F            .byte	$5F
02593 08AA                        4F            .byte	$4F
02594 08AB                        50            .byte	$50
02595 08AC                        82            .byte	$82
02596 08AD                        55            .byte	$55
02597 08AE                        81            .byte	$81
02598 08AF                        BF            .byte	$BF
02599 08B0                        1F            .byte	$1F
02600                                           ! 699  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02601 08B1                        00            .byte	0
02602 08B2                        4F            .byte	$4F
02603 08B3                        0D            .byte	$D
02604 08B4                        0E            .byte	$E
02605 08B5                        00            .byte	0
02606 08B6                        00            .byte	0
02607 08B7                        00            .byte	0
02608 08B8                        00            .byte	0
02609                                           ! 700  0x9c, 0x8e, 0x8f, 0x28, 0x1f, 0x96, 0xb9, 0xa3,
02610 08B9                        9C            .byte	$9C
02611 08BA                        8E            .byte	$8E
02612 08BB                        8F            .byte	$8F
02613 08BC                        28            .byte	$28
02614 08BD                        1F            .byte	$1F
02615 08BE                        96            .byte	$96
02616 08BF                        B9            .byte	$B9
02617 08C0                        A3            .byte	$A3
02618                                           ! 701  0xff,
02619 08C1                        FF            .byte	$FF
02620                                           ! 702  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02621 08C2                        00            .byte	0
02622 08C3                        01            .byte	1
02623 08C4                        02            .byte	2
02624 08C5                        03            .byte	3
02625 08C6                        04            .byte	4
02626 08C7                        05            .byte	5
02627 08C8                        14            .byte	$14
02628 08C9                        07            .byte	7
02629                                           ! 703  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02630 08CA                        38            .byte	$38
02631 08CB                        39            .byte	$39
02632 08CC                        3A            .byte	$3A
02633 08CD                        3B            .byte	$3B
02634 08CE                        3C            .byte	$3C
02635 08CF                        3D            .byte	$3D
02636 08D0                        3E            .byte	$3E
02637 08D1                        3F            .byte	$3F
02638                                           ! 704  0x0c, 0x00, 0x0f, 0x08,
02639 08D2                        0C            .byte	$C
02640 08D3                        00            .byte	0
02641 08D4                        0F            .byte	$F
02642 08D5                        08            .byte	8
02643                                           ! 705  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02644 08D6                        00            .byte	0
02645 08D7                        00            .byte	0
02646 08D8                        00            .byte	0
02647 08D9                        00            .byte	0
02648 08DA                        00            .byte	0
02649 08DB                        10            .byte	$10
02650 08DC                        0E            .byte	$E
02651 08DD                        0F            .byte	$F
02652 08DE                        FF            .byte	$FF
02653                                           ! 706 },
02654                                           ! 707 {
02655                                           ! 708  80, 24, 16, 0x00, 0x10,
02656 08DF                        50            .byte	$50
02657 08E0                        18            .byte	$18
02658 08E1                        10            .byte	$10
02659 08E2                        00            .byte	0
02660 08E3                        10            .byte	$10
02661                                           ! 709  0x00, 0x03, 0x00, 0x02,
02662 08E4                        00            .byte	0
02663 08E5                        03            .byte	3
02664 08E6                        00            .byte	0
02665 08E7                        02            .byte	2
02666                                           ! 710  0x66,
02667 08E8                        66            .byte	$66
02668                                           ! 711  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02669 08E9                        5F            .byte	$5F
02670 08EA                        4F            .byte	$4F
02671 08EB                        50            .byte	$50
02672 08EC                        82            .byte	$82
02673 08ED                        55            .byte	$55
02674 08EE                        81            .byte	$81
02675 08EF                        BF            .byte	$BF
02676 08F0                        1F            .byte	$1F
02677                                           ! 712  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00
02678 08F1                        00            .byte	0
02679 08F2                        4F            .byte	$4F
02680 08F3                        0D            .byte	$D
02681 08F4                        0E            .byte	$E
02682 08F5                        00            .byte	0
02683 08F6                        00            .byte	0
02684 08F7                        00            .byte	0
02685                                           ! 712 ,
02686 08F8                        00            .byte	0
02687                                           ! 713  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02688 08F9                        9C            .byte	$9C
02689 08FA                        8E            .byte	$8E
02690 08FB                        8F            .byte	$8F
02691 08FC                        28            .byte	$28
02692 08FD                        0F            .byte	$F
02693 08FE                        96            .byte	$96
02694 08FF                        B9            .byte	$B9
02695 0900                        A3            .byte	$A3
02696                                           ! 714  0xff,
02697 0901                        FF            .byte	$FF
02698                                           ! 715  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02699 0902                        00            .byte	0
02700 0903                        08            .byte	8
02701 0904                        08            .byte	8
02702 0905                        08            .byte	8
02703 0906                        08            .byte	8
02704 0907                        08            .byte	8
02705 0908                        08            .byte	8
02706 0909                        08            .byte	8
02707                                           ! 716  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02708 090A                        10            .byte	$10
02709 090B                        18            .byte	$18
02710 090C                        18            .byte	$18
02711 090D                        18            .byte	$18
02712 090E                        18            .byte	$18
02713 090F                        18            .byte	$18
02714 0910                        18            .byte	$18
02715 0911                        18            .byte	$18
02716                                           ! 717  0x0e, 0x00, 0x0f, 0x08,
02717 0912                        0E            .byte	$E
02718 0913                        00            .byte	0
02719 0914                        0F            .byte	$F
02720 0915                        08            .byte	8
02721                                           ! 718  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02722 0916                        00            .byte	0
02723 0917                        00            .byte	0
02724 0918                        00            .byte	0
02725 0919                        00            .byte	0
02726 091A                        00            .byte	0
02727 091B                        10            .byte	$10
02728 091C                        0A            .byte	$A
02729 091D                        0F            .byte	$F
02730 091E                        FF            .byte	$FF
02731                                           ! 719 },
02732                                           ! 720 {
02733                                           ! 721  80, 29, 16, 0x00, 0x00,
02734 091F                        50            .byte	$50
02735 0920                        1D            .byte	$1D
02736 0921                        10            .byte	$10
02737 0922                        00            .byte	0
02738 0923                        00            .byte	0
02739                                           ! 722  0x01, 0x0f, 0x00, 0x06,
02740 0924                        01            .byte	1
02741 0925                        0F            .byte	$F
02742 0926                        00            .byte	0
02743 0927                        06            .byte	6
02744                                           ! 723  0xe3,
02745 0928                        E3            .byte	$E3
02746                                           ! 724  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02747 0929                        5F            .byte	$5F
02748 092A                        4F            .byte	$4F
02749 092B                        50            .byte	$50
02750 092C                        82            .byte	$82
02751 092D                        54            .byte	$54
02752 092E                        80            .byte	$80
02753 092F                        0B            .byte	$B
02754 0930                        3E            .byte	$3E
02755                                           ! 725  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02756 0931                        00            .byte	0
02757 0932                        40            .byte	$40
02758 0933                        00            .byte	0
02759 0934                        00            .byte	0
02760 0935                        00            .byte	0
02761 0936                        00            .byte	0
02762 0937                        00            .byte	0
02763 0938                        00            .byte	0
02764                                           ! 726  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02765 0939                        EA            .byte	$EA
02766 093A                        8C            .byte	$8C
02767 093B                        DF            .byte	$DF
02768 093C                        28            .byte	$28
02769 093D                        00            .byte	0
02770 093E                        E7            .byte	$E7
02771 093F                        04            .byte	4
02772 0940                        E3            .byte	$E3
02773                                           ! 727  0xff,
02774 0941                        FF            .byte	$FF
02775                                           ! 728  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02776 0942                        00            .byte	0
02777 0943                        3F            .byte	$3F
02778 0944                        00            .byte	0
02779 0945                        3F            .byte	$3F
02780 0946                        00            .byte	0
02781 0947                        3F            .byte	$3F
02782 0948                        00            .byte	0
02783 0949                        3F            .byte	$3F
02784                                           ! 729  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02785 094A                        00            .byte	0
02786 094B                        3F            .byte	$3F
02787 094C                        00            .byte	0
02788 094D                        3F            .byte	$3F
02789 094E                        00            .byte	0
02790 094F                        3F            .byte	$3F
02791 0950                        00            .byte	0
02792 0951                        3F            .byte	$3F
02793                                           ! 730  0x01, 0x00, 0x0f, 0x00,
02794 0952                        01            .byte	1
02795 0953                        00            .byte	0
02796 0954                        0F            .byte	$F
02797 0955                        00            .byte	0
02798                                           ! 731  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02799 0956                        00            .byte	0
02800 0957                        00            .byte	0
02801 0958                        00            .byte	0
02802 0959                        00            .byte	0
02803 095A                        00            .byte	0
02804 095B                        00            .byte	0
02805 095C                        05            .byte	5
02806 095D                        0F            .byte	$F
02807 095E                        FF            .byte	$FF
02808                                           ! 732 },
02809                                           ! 733 {
02810                                           ! 734  80, 29, 16, 0x00, 0x00,
02811 095F                        50            .byte	$50
02812 0960                        1D            .byte	$1D
02813 0961                        10            .byte	$10
02814 0962                        00            .byte	0
02815 0963                        00            .byte	0
02816                                           ! 735  0x01, 0x0f, 0x00, 0x06,
02817 0964                        01            .byte	1
02818 0965                        0F            .byte	$F
02819 0966                        00            .byte	0
02820 0967                        06            .byte	6
02821                                           ! 736  0xe3,
02822 0968                        E3            .byte	$E3
02823                                           ! 737  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02824 0969                        5F            .byte	$5F
02825 096A                        4F            .byte	$4F
02826 096B                        50            .byte	$50
02827 096C                        82            .byte	$82
02828 096D                        54            .byte	$54
02829 096E                        80            .byte	$80
02830 096F                        0B            .byte	$B
02831 0970                        3E            .byte	$3E
02832                                           ! 738  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02833 0971                        00            .byte	0
02834 0972                        40            .byte	$40
02835 0973                        00            .byte	0
02836 0974                        00            .byte	0
02837 0975                        00            .byte	0
02838 0976                        00            .byte	0
02839 0977                        00            .byte	0
02840 0978                        00            .byte	0
02841                                           ! 739  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02842 0979                        EA            .byte	$EA
02843 097A                        8C            .byte	$8C
02844 097B                        DF            .byte	$DF
02845 097C                        28            .byte	$28
02846 097D                        00            .byte	0
02847 097E                        E7            .byte	$E7
02848 097F                        04            .byte	4
02849 0980                        E3            .byte	$E3
02850                                           ! 740  0xff,
02851 0981                        FF            .byte	$FF
02852                                           ! 741  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02853 0982                        00            .byte	0
02854 0983                        01            .byte	1
02855 0984                        02            .byte	2
02856 0985                        03            .byte	3
02857 0986                        04            .byte	4
02858 0987                        05            .byte	5
02859 0988                        14            .byte	$14
02860 0989                        07            .byte	7
02861                                           ! 742  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02862 098A                        38            .byte	$38
02863 098B                        39            .byte	$39
02864 098C                        3A            .byte	$3A
02865 098D                        3B            .byte	$3B
02866 098E                        3C            .byte	$3C
02867 098F                        3D            .byte	$3D
02868 0990                        3E            .byte	$3E
02869 0991                        3F            .byte	$3F
02870                                           ! 743  0x01, 0x00, 0x0f, 0x00,
02871 0992                        01            .byte	1
02872 0993                        00            .byte	0
02873 0994                        0F            .byte	$F
02874 0995                        00            .byte	0
02875                                           ! 744  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02876 0996                        00            .byte	0
02877 0997                        00            .byte	0
02878 0998                        00            .byte	0
02879 0999                        00            .byte	0
02880 099A                        00            .byte	0
02881 099B                        00            .byte	0
02882 099C                        05            .byte	5
02883 099D                        0F            .byte	$F
02884 099E                        FF            .byte	$FF
02885                                           ! 745 },
02886                                           ! 746 {
02887                                           ! 747  40, 24, 8, 0x00, 0x00,
02888 099F                        28            .byte	$28
02889 09A0                        18            .byte	$18
02890 09A1                        08            .byte	8
02891 09A2                        00            .byte	0
02892 09A3                        00            .byte	0
02893                                           ! 748  0x01, 0x0f, 0x00, 0x0e,
02894 09A4                        01            .byte	1
02895 09A5                        0F            .byte	$F
02896 09A6                        00            .byte	0
02897 09A7                        0E            .byte	$E
02898                                           ! 749  0x63,
02899 09A8                        63            .byte	$63
02900                                           ! 750  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02901 09A9                        5F            .byte	$5F
02902 09AA                        4F            .byte	$4F
02903 09AB                        50            .byte	$50
02904 09AC                        82            .byte	$82
02905 09AD                        54            .byte	$54
02906 09AE                        80            .byte	$80
02907 09AF                        BF            .byte	$BF
02908 09B0                        1F            .byte	$1F
02909                                           ! 751  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02910 09B1                        00            .byte	0
02911 09B2                        41            .byte	$41
02912 09B3                        00            .byte	0
02913 09B4                        00            .byte	0
02914 09B5                        00            .byte	0
02915 09B6                        00            .byte	0
02916 09B7                        00            .byte	0
02917 09B8                        00            .byte	0
02918                                           ! 752  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02919 09B9                        9C            .byte	$9C
02920 09BA                        8E            .byte	$8E
02921 09BB                        8F            .byte	$8F
02922 09BC                        28            .byte	$28
02923 09BD                        40            .byte	$40
02924 09BE                        96            .byte	$96
02925 09BF                        B9            .byte	$B9
02926 09C0                        A3            .byte	$A3
02927                                           ! 753  0xff,
02928 09C1                        FF            .byte	$FF
02929                                           ! 754  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02930 09C2                        00            .byte	0
02931 09C3                        01            .byte	1
02932 09C4                        02            .byte	2
02933 09C5                        03            .byte	3
02934 09C6                        04            .byte	4
02935 09C7                        05            .byte	5
02936 09C8                        06            .byte	6
02937 09C9                        07            .byte	7
02938                                           ! 755  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02939 09CA                        08            .byte	8
02940 09CB                        09            .byte	9
02941 09CC                        0A            .byte	$A
02942 09CD                        0B            .byte	$B
02943 09CE                        0C            .byte	$C
02944 09CF                        0D            .byte	$D
02945 09D0                        0E            .byte	$E
02946 09D1                        0F            .byte	$F
02947                                           ! 756  0x41, 0x00, 0x0f, 0x00,
02948 09D2                        41            .byte	$41
02949 09D3                        00            .byte	0
02950 09D4                        0F            .byte	$F
02951 09D5                        00            .byte	0
02952                                           ! 757  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02953 09D6                        00            .byte	0
02954 09D7                        00            .byte	0
02955 09D8                        00            .byte	0
02956 09D9                        00            .byte	0
02957 09DA                        00            .byte	0
02958 09DB                        40            .byte	$40
02959 09DC                        05            .byte	5
02960 09DD                        0F            .byte	$F
02961 09DE                        FF            .byte	$FF
02962                                           ! 758 },
02963                                           ! 759 {
02964                                           ! 760  100, 36, 16, 0x00, 0x00,
02965 09DF                        64            .byte	$64
02966 09E0                        24            .byte	$24
02967 09E1                        10            .byte	$10
02968 09E2                        00            .byte	0
02969 09E3                        00            .byte	0
02970                                           ! 761  0x01, 0x0f, 0x00, 0x06,
02971 09E4                        01            .byte	1
02972 09E5                        0F            .byte	$F
02973 09E6                        00            .byte	0
02974 09E7                        06            .byte	6
02975                                           ! 762  0xe3,
02976 09E8                        E3            .byte	$E3
02977                                           ! 763  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02978 09E9                        7F            .byte	$7F
02979 09EA                        63            .byte	$63
02980 09EB                        63            .byte	$63
02981 09EC                        83            .byte	$83
02982 09ED                        6B            .byte	$6B
02983 09EE                        1B            .byte	$1B
02984 09EF                        72            .byte	$72
02985 09F0                        F0            .byte	$F0
02986                                           ! 764  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02987 09F1                        00            .byte	0
02988 09F2                        60            .byte	$60
02989 09F3                        00            .byte	0
02990 09F4                        00            .byte	0
02991 09F5                        00            .byte	0
02992 09F6                        00            .byte	0
02993 09F7                        00            .byte	0
02994 09F8                        00            .byte	0
02995                                           ! 765  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02996 09F9                        59            .byte	$59
02997 09FA                        8D            .byte	$8D
02998 09FB                        57            .byte	$57
02999 09FC                        32            .byte	$32
03000 09FD                        00            .byte	0
03001 09FE                        57            .byte	$57
03002 09FF                        73            .byte	$73
03003 0A00                        E3            .byte	$E3
03004                                           ! 766  0xff,
03005 0A01                        FF            .byte	$FF
03006                                           ! 767  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
03007 0A02                        00            .byte	0
03008 0A03                        01            .byte	1
03009 0A04                        02            .byte	2
03010 0A05                        03            .byte	3
03011 0A06                        04            .byte	4
03012 0A07                        05            .byte	5
03013 0A08                        14            .byte	$14
03014 0A09                        07            .byte	7
03015                                           ! 768  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
03016 0A0A                        38            .byte	$38
03017 0A0B                        39            .byte	$39
03018 0A0C                        3A            .byte	$3A
03019 0A0D                        3B            .byte	$3B
03020 0A0E                        3C            .byte	$3C
03021 0A0F                        3D            .byte	$3D
03022 0A10                        3E            .byte	$3E
03023 0A11                        3F            .byte	$3F
03024                                           ! 769  0x01, 0x00, 0x0f, 0x00,
03025 0A12                        01            .byte	1
03026 0A13                        00            .byte	0
03027 0A14                        0F            .byte	$F
03028 0A15                        00            .byte	0
03029                                           ! 770  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
03030 0A16                        00            .byte	0
03031 0A17                        00            .byte	0
03032 0A18                        00            .byte	0
03033 0A19                        00            .byte	0
03034 0A1A                        00            .byte	0
03035 0A1B                        00            .byte	0
03036 0A1C                        05            .byte	5
03037 0A1D                        0F            .byte	$F
03038 0A1E                        FF            .byte	$FF
03039                                           ! 771 },
03040                                           ! 772 };
03041                                           !BCC_EOS
03042                                           ! 773 static Bit8u palette0[63+1][3]=
03043                                           ! 774 {
03044                       00000A1F            _palette0:
03045                                           ! 775   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03046 0A1F                        00            .byte	0
03047 0A20                        00            .byte	0
03048 0A21                        00            .byte	0
03049 0A22                        00            .byte	0
03050 0A23                        00            .byte	0
03051 0A24                        00            .byte	0
03052 0A25                        00            .byte	0
03053 0A26                        00            .byte	0
03054 0A27                        00            .byte	0
03055 0A28                        00            .byte	0
03056 0A29                        00            .byte	0
03057 0A2A                        00            .byte	0
03058 0A2B                        00            .byte	0
03059 0A2C                        00            .byte	0
03060 0A2D                        00            .byte	0
03061 0A2E                        00            .byte	0
03062 0A2F                        00            .byte	0
03063 0A30                        00            .byte	0
03064 0A31                        00            .byte	0
03065 0A32                        00            .byte	0
03066 0A33                        00            .byte	0
03067 0A34                        00            .byte	0
03068 0A35                        00            .byte	0
03069 0A36                        00            .byte	0
03070                                           ! 776   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 
03071 0A37                        2A            .byte	$2A
03072 0A38                        2A            .byte	$2A
03073 0A39                        2A            .byte	$2A
03074 0A3A                        2A            .byte	$2A
03075 0A3B                        2A            .byte	$2A
03076 0A3C                        2A            .byte	$2A
03077 0A3D                        2A            .byte	$2A
03078 0A3E                        2A            .byte	$2A
03079 0A3F                        2A            .byte	$2A
03080 0A40                        2A            .byte	$2A
03081 0A41                        2A            .byte	$2A
03082 0A42                        2A            .byte	$2A
03083                                           ! 776 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03084 0A43                        2A            .byte	$2A
03085 0A44                        2A            .byte	$2A
03086 0A45                        2A            .byte	$2A
03087 0A46                        2A            .byte	$2A
03088 0A47                        2A            .byte	$2A
03089 0A48                        2A            .byte	$2A
03090 0A49                        2A            .byte	$2A
03091 0A4A                        2A            .byte	$2A
03092 0A4B                        2A            .byte	$2A
03093 0A4C                        2A            .byte	$2A
03094 0A4D                        2A            .byte	$2A
03095 0A4E                        2A            .byte	$2A
03096                                           ! 777   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03097 0A4F                        2A            .byte	$2A
03098 0A50                        2A            .byte	$2A
03099 0A51                        2A            .byte	$2A
03100 0A52                        2A            .byte	$2A
03101 0A53                        2A            .byte	$2A
03102 0A54                        2A            .byte	$2A
03103 0A55                        2A            .byte	$2A
03104 0A56                        2A            .byte	$2A
03105 0A57                        2A            .byte	$2A
03106 0A58                        2A            .byte	$2A
03107 0A59                        2A            .byte	$2A
03108 0A5A                        2A            .byte	$2A
03109 0A5B                        2A            .byte	$2A
03110 0A5C                        2A            .byte	$2A
03111 0A5D                        2A            .byte	$2A
03112 0A5E                        2A            .byte	$2A
03113 0A5F                        2A            .byte	$2A
03114 0A60                        2A            .byte	$2A
03115 0A61                        2A            .byte	$2A
03116 0A62                        2A            .byte	$2A
03117 0A63                        2A            .byte	$2A
03118 0A64                        2A            .byte	$2A
03119 0A65                        2A            .byte	$2A
03120 0A66                        2A            .byte	$2A
03121                                           ! 778   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
03122 0A67                        3F            .byte	$3F
03123 0A68                        3F            .byte	$3F
03124 0A69                        3F            .byte	$3F
03125 0A6A                        3F            .byte	$3F
03126 0A6B                        3F            .byte	$3F
03127 0A6C                        3F            .byte	$3F
03128 0A6D                        3F            .byte	$3F
03129 0A6E                        3F            .byte	$3F
03130 0A6F                        3F            .byte	$3F
03131 0A70                        3F            .byte	$3F
03132 0A71                        3F            .byte	$3F
03133 0A72                        3F            .byte	$3F
03134 0A73                        3F            .byte	$3F
03135 0A74                        3F            .byte	$3F
03136 0A75                        3F            .byte	$3F
03137 0A76                        3F            .byte	$3F
03138 0A77                        3F            .byte	$3F
03139 0A78                        3F            .byte	$3F
03140 0A79                        3F            .byte	$3F
03141 0A7A                        3F            .byte	$3F
03142 0A7B                        3F            .byte	$3F
03143 0A7C                        3F            .byte	$3F
03144 0A7D                        3F            .byte	$3F
03145 0A7E                        3F            .byte	$3F
03146                                           ! 779   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
03147 0A7F                        00            .byte	0
03148 0A80                        00            .byte	0
03149 0A81                        00            .byte	0
03150 0A82                        00            .byte	0
03151 0A83                        00            .byte	0
03152 0A84                        00            .byte	0
03153 0A85                        00            .byte	0
03154 0A86                        00            .byte	0
03155 0A87                        00            .byte	0
03156 0A88                        00            .byte	0
03157 0A89                        00            .byte	0
03158 0A8A                        00            .byte	0
03159 0A8B                        00            .byte	0
03160 0A8C                        00            .byte	0
03161 0A8D                        00            .byte	0
03162 0A8E                        00            .byte	0
03163 0A8F                        00            .byte	0
03164 0A90                        00            .byte	0
03165 0A91                        00            .byte	0
03166 0A92                        00            .byte	0
03167 0A93                        00            .byte	0
03168 0A94                        00            .byte	0
03169 0A95                        00            .byte	0
03170 0A96                        00            .byte	0
03171                                           ! 780   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03172 0A97                        2A            .byte	$2A
03173 0A98                        2A            .byte	$2A
03174 0A99                        2A            .byte	$2A
03175 0A9A                        2A            .byte	$2A
03176 0A9B                        2A            .byte	$2A
03177 0A9C                        2A            .byte	$2A
03178 0A9D                        2A            .byte	$2A
03179 0A9E                        2A            .byte	$2A
03180 0A9F                        2A            .byte	$2A
03181 0AA0                        2A            .byte	$2A
03182 0AA1                        2A            .byte	$2A
03183 0AA2                        2A            .byte	$2A
03184 0AA3                        2A            .byte	$2A
03185 0AA4                        2A            .byte	$2A
03186 0AA5                        2A            .byte	$2A
03187 0AA6                        2A            .byte	$2A
03188 0AA7                        2A            .byte	$2A
03189 0AA8                        2A            .byte	$2A
03190 0AA9                        2A            .byte	$2A
03191 0AAA                        2A            .byte	$2A
03192 0AAB                        2A            .byte	$2A
03193 0AAC                        2A            .byte	$2A
03194 0AAD                        2A            .byte	$2A
03195 0AAE                        2A            .byte	$2A
03196                                           ! 781   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
03197 0AAF                        2A            .byte	$2A
03198 0AB0                        2A            .byte	$2A
03199 0AB1                        2A            .byte	$2A
03200 0AB2                        2A            .byte	$2A
03201 0AB3                        2A            .byte	$2A
03202 0AB4                        2A            .byte	$2A
03203 0AB5                        2A            .byte	$2A
03204 0AB6                        2A            .byte	$2A
03205 0AB7                        2A            .byte	$2A
03206 0AB8                        2A            .byte	$2A
03207 0AB9                        2A            .byte	$2A
03208 0ABA                        2A            .byte	$2A
03209 0ABB                        2A            .byte	$2A
03210 0ABC                        2A            .byte	$2A
03211 0ABD                        2A            .byte	$2A
03212 0ABE                        2A            .byte	$2A
03213 0ABF                        2A            .byte	$2A
03214 0AC0                        2A            .byte	$2A
03215 0AC1                        2A            .byte	$2A
03216 0AC2                        2A            .byte	$2A
03217 0AC3                        2A            .byte	$2A
03218 0AC4                        2A            .byte	$2A
03219 0AC5                        2A            .byte	$2A
03220 0AC6                        2A            .byte	$2A
03221                                           ! 782   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
03222 0AC7                        3F            .byte	$3F
03223 0AC8                        3F            .byte	$3F
03224 0AC9                        3F            .byte	$3F
03225 0ACA                        3F            .byte	$3F
03226 0ACB                        3F            .byte	$3F
03227 0ACC                        3F            .byte	$3F
03228 0ACD                        3F            .byte	$3F
03229 0ACE                        3F            .byte	$3F
03230 0ACF                        3F            .byte	$3F
03231 0AD0                        3F            .byte	$3F
03232 0AD1                        3F            .byte	$3F
03233 0AD2                        3F            .byte	$3F
03234 0AD3                        3F            .byte	$3F
03235 0AD4                        3F            .byte	$3F
03236 0AD5                        3F            .byte	$3F
03237 0AD6                        3F            .byte	$3F
03238 0AD7                        3F            .byte	$3F
03239 0AD8                        3F            .byte	$3F
03240 0AD9                        3F            .byte	$3F
03241 0ADA                        3F            .byte	$3F
03242 0ADB                        3F            .byte	$3F
03243 0ADC                        3F            .byte	$3F
03244 0ADD                        3F            .byte	$3F
03245                                           ! 783 };
03246 0ADE                        3F            .byte	$3F
03247                                           !BCC_EOS
03248                                           ! 784 static Bit8u palette1[63+1][3]=
03249                                           ! 785 {
03250                       00000ADF            _palette1:
03251                                           ! 786   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03252 0ADF                        00            .byte	0
03253 0AE0                        00            .byte	0
03254 0AE1                        00            .byte	0
03255 0AE2                        00            .byte	0
03256 0AE3                        00            .byte	0
03257 0AE4                        2A            .byte	$2A
03258 0AE5                        00            .byte	0
03259 0AE6                        2A            .byte	$2A
03260 0AE7                        00            .byte	0
03261 0AE8                        00            .byte	0
03262 0AE9                        2A            .byte	$2A
03263 0AEA                        2A            .byte	$2A
03264 0AEB                        2A            .byte	$2A
03265 0AEC                        00            .byte	0
03266 0AED                        00            .byte	0
03267 0AEE                        2A            .byte	$2A
03268 0AEF                        00            .byte	0
03269 0AF0                        2A            .byte	$2A
03270 0AF1                        2A            .byte	$2A
03271 0AF2                        15            .byte	$15
03272 0AF3                        00            .byte	0
03273 0AF4                        2A            .byte	$2A
03274 0AF5                        2A            .byte	$2A
03275 0AF6                        2A            .byte	$2A
03276                                           ! 787   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03277 0AF7                        00            .byte	0
03278 0AF8                        00            .byte	0
03279 0AF9                        00            .byte	0
03280 0AFA                        00            .byte	0
03281 0AFB                        00            .byte	0
03282 0AFC                        2A            .byte	$2A
03283 0AFD                        00            .byte	0
03284 0AFE                        2A            .byte	$2A
03285 0AFF                        00            .byte	0
03286 0B00                        00            .byte	0
03287 0B01                        2A            .byte	$2A
03288 0B02                        2A            .byte	$2A
03289 0B03                        2A            .byte	$2A
03290 0B04                        00            .byte	0
03291 0B05                        00            .byte	0
03292 0B06                        2A            .byte	$2A
03293 0B07                        00            .byte	0
03294 0B08                        2A            .byte	$2A
03295 0B09                        2A            .byte	$2A
03296 0B0A                        15            .byte	$15
03297 0B0B                        00            .byte	0
03298 0B0C                        2A            .byte	$2A
03299 0B0D                        2A            .byte	$2A
03300 0B0E                        2A            .byte	$2A
03301                                           ! 788   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03302 0B0F                        15            .byte	$15
03303 0B10                        15            .byte	$15
03304 0B11                        15            .byte	$15
03305 0B12                        15            .byte	$15
03306 0B13                        15            .byte	$15
03307 0B14                        3F            .byte	$3F
03308 0B15                        15            .byte	$15
03309 0B16                        3F            .byte	$3F
03310 0B17                        15            .byte	$15
03311 0B18                        15            .byte	$15
03312 0B19                        3F            .byte	$3F
03313 0B1A                        3F            .byte	$3F
03314 0B1B                        3F            .byte	$3F
03315 0B1C                        15            .byte	$15
03316 0B1D                        15            .byte	$15
03317 0B1E                        3F            .byte	$3F
03318 0B1F                        15            .byte	$15
03319 0B20                        3F            .byte	$3F
03320 0B21                        3F            .byte	$3F
03321 0B22                        3F            .byte	$3F
03322 0B23                        15            .byte	$15
03323 0B24                        3F            .byte	$3F
03324 0B25                        3F            .byte	$3F
03325 0B26                        3F            .byte	$3F
03326                                           ! 789   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03327 0B27                        15            .byte	$15
03328 0B28                        15            .byte	$15
03329 0B29                        15            .byte	$15
03330 0B2A                        15            .byte	$15
03331 0B2B                        15            .byte	$15
03332 0B2C                        3F            .byte	$3F
03333 0B2D                        15            .byte	$15
03334 0B2E                        3F            .byte	$3F
03335 0B2F                        15            .byte	$15
03336 0B30                        15            .byte	$15
03337 0B31                        3F            .byte	$3F
03338 0B32                        3F            .byte	$3F
03339 0B33                        3F            .byte	$3F
03340 0B34                        15            .byte	$15
03341 0B35                        15            .byte	$15
03342 0B36                        3F            .byte	$3F
03343 0B37                        15            .byte	$15
03344 0B38                        3F            .byte	$3F
03345 0B39                        3F            .byte	$3F
03346 0B3A                        3F            .byte	$3F
03347 0B3B                        15            .byte	$15
03348 0B3C                        3F            .byte	$3F
03349 0B3D                        3F            .byte	$3F
03350 0B3E                        3F            .byte	$3F
03351                                           ! 790   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03352 0B3F                        00            .byte	0
03353 0B40                        00            .byte	0
03354 0B41                        00            .byte	0
03355 0B42                        00            .byte	0
03356 0B43                        00            .byte	0
03357 0B44                        2A            .byte	$2A
03358 0B45                        00            .byte	0
03359 0B46                        2A            .byte	$2A
03360 0B47                        00            .byte	0
03361 0B48                        00            .byte	0
03362 0B49                        2A            .byte	$2A
03363 0B4A                        2A            .byte	$2A
03364 0B4B                        2A            .byte	$2A
03365 0B4C                        00            .byte	0
03366 0B4D                        00            .byte	0
03367 0B4E                        2A            .byte	$2A
03368 0B4F                        00            .byte	0
03369 0B50                        2A            .byte	$2A
03370 0B51                        2A            .byte	$2A
03371 0B52                        15            .byte	$15
03372 0B53                        00            .byte	0
03373 0B54                        2A            .byte	$2A
03374 0B55                        2A            .byte	$2A
03375 0B56                        2A            .byte	$2A
03376                                           ! 791   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03377 0B57                        00            .byte	0
03378 0B58                        00            .byte	0
03379 0B59                        00            .byte	0
03380 0B5A                        00            .byte	0
03381 0B5B                        00            .byte	0
03382 0B5C                        2A            .byte	$2A
03383 0B5D                        00            .byte	0
03384 0B5E                        2A            .byte	$2A
03385 0B5F                        00            .byte	0
03386 0B60                        00            .byte	0
03387 0B61                        2A            .byte	$2A
03388 0B62                        2A            .byte	$2A
03389 0B63                        2A            .byte	$2A
03390 0B64                        00            .byte	0
03391 0B65                        00            .byte	0
03392 0B66                        2A            .byte	$2A
03393 0B67                        00            .byte	0
03394 0B68                        2A            .byte	$2A
03395 0B69                        2A            .byte	$2A
03396 0B6A                        15            .byte	$15
03397 0B6B                        00            .byte	0
03398 0B6C                        2A            .byte	$2A
03399 0B6D                        2A            .byte	$2A
03400 0B6E                        2A            .byte	$2A
03401                                           ! 792   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03402 0B6F                        15            .byte	$15
03403 0B70                        15            .byte	$15
03404 0B71                        15            .byte	$15
03405 0B72                        15            .byte	$15
03406 0B73                        15            .byte	$15
03407 0B74                        3F            .byte	$3F
03408 0B75                        15            .byte	$15
03409 0B76                        3F            .byte	$3F
03410 0B77                        15            .byte	$15
03411 0B78                        15            .byte	$15
03412 0B79                        3F            .byte	$3F
03413 0B7A                        3F            .byte	$3F
03414 0B7B                        3F            .byte	$3F
03415 0B7C                        15            .byte	$15
03416 0B7D                        15            .byte	$15
03417 0B7E                        3F            .byte	$3F
03418 0B7F                        15            .byte	$15
03419 0B80                        3F            .byte	$3F
03420 0B81                        3F            .byte	$3F
03421 0B82                        3F            .byte	$3F
03422 0B83                        15            .byte	$15
03423 0B84                        3F            .byte	$3F
03424 0B85                        3F            .byte	$3F
03425 0B86                        3F            .byte	$3F
03426                                           ! 793   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03427 0B87                        15            .byte	$15
03428 0B88                        15            .byte	$15
03429 0B89                        15            .byte	$15
03430 0B8A                        15            .byte	$15
03431 0B8B                        15            .byte	$15
03432 0B8C                        3F            .byte	$3F
03433 0B8D                        15            .byte	$15
03434 0B8E                        3F            .byte	$3F
03435 0B8F                        15            .byte	$15
03436 0B90                        15            .byte	$15
03437 0B91                        3F            .byte	$3F
03438 0B92                        3F            .byte	$3F
03439 0B93                        3F            .byte	$3F
03440 0B94                        15            .byte	$15
03441 0B95                        15            .byte	$15
03442 0B96                        3F            .byte	$3F
03443 0B97                        15            .byte	$15
03444 0B98                        3F            .byte	$3F
03445 0B99                        3F            .byte	$3F
03446 0B9A                        3F            .byte	$3F
03447 0B9B                        15            .byte	$15
03448 0B9C                        3F            .byte	$3F
03449 0B9D                        3F            .byte	$3F
03450                                           ! 794 };
03451 0B9E                        3F            .byte	$3F
03452                                           !BCC_EOS
03453                                           ! 795 static Bit8u palette2[63+1][3]=
03454                                           ! 796 {
03455                       00000B9F            _palette2:
03456                                           ! 797   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,
03457 0B9F                        00            .byte	0
03458 0BA0                        00            .byte	0
03459 0BA1                        00            .byte	0
03460 0BA2                        00            .byte	0
03461 0BA3                        00            .byte	0
03462 0BA4                        2A            .byte	$2A
03463 0BA5                        00            .byte	0
03464 0BA6                        2A            .byte	$2A
03465 0BA7                        00            .byte	0
03466 0BA8                        00            .byte	0
03467 0BA9                        2A            .byte	$2A
03468 0BAA                        2A            .byte	$2A
03469 0BAB                        2A            .byte	$2A
03470 0BAC                        00            .byte	0
03471 0BAD                        00            .byte	0
03472 0BAE                        2A            .byte	$2A
03473                                           ! 797 0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03474 0BAF                        00            .byte	0
03475 0BB0                        2A            .byte	$2A
03476 0BB1                        2A            .byte	$2A
03477 0BB2                        2A            .byte	$2A
03478 0BB3                        00            .byte	0
03479 0BB4                        2A            .byte	$2A
03480 0BB5                        2A            .byte	$2A
03481 0BB6                        2A            .byte	$2A
03482                                           ! 798   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03483 0BB7                        00            .byte	0
03484 0BB8                        00            .byte	0
03485 0BB9                        15            .byte	$15
03486 0BBA                        00            .byte	0
03487 0BBB                        00            .byte	0
03488 0BBC                        3F            .byte	$3F
03489 0BBD                        00            .byte	0
03490 0BBE                        2A            .byte	$2A
03491 0BBF                        15            .byte	$15
03492 0BC0                        00            .byte	0
03493 0BC1                        2A            .byte	$2A
03494 0BC2                        3F            .byte	$3F
03495 0BC3                        2A            .byte	$2A
03496 0BC4                        00            .byte	0
03497 0BC5                        15            .byte	$15
03498 0BC6                        2A            .byte	$2A
03499 0BC7                        00            .byte	0
03500 0BC8                        3F            .byte	$3F
03501 0BC9                        2A            .byte	$2A
03502 0BCA                        2A            .byte	$2A
03503 0BCB                        15            .byte	$15
03504 0BCC                        2A            .byte	$2A
03505 0BCD                        2A            .byte	$2A
03506 0BCE                        3F            .byte	$3F
03507                                           ! 799   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03508 0BCF                        00            .byte	0
03509 0BD0                        15            .byte	$15
03510 0BD1                        00            .byte	0
03511 0BD2                        00            .byte	0
03512 0BD3                        15            .byte	$15
03513 0BD4                        2A            .byte	$2A
03514 0BD5                        00            .byte	0
03515 0BD6                        3F            .byte	$3F
03516 0BD7                        00            .byte	0
03517 0BD8                        00            .byte	0
03518 0BD9                        3F            .byte	$3F
03519 0BDA                        2A            .byte	$2A
03520 0BDB                        2A            .byte	$2A
03521 0BDC                        15            .byte	$15
03522 0BDD                        00            .byte	0
03523 0BDE                        2A            .byte	$2A
03524 0BDF                        15            .byte	$15
03525 0BE0                        2A            .byte	$2A
03526 0BE1                        2A            .byte	$2A
03527 0BE2                        3F            .byte	$3F
03528 0BE3                        00            .byte	0
03529 0BE4                        2A            .byte	$2A
03530 0BE5                        3F            .byte	$3F
03531 0BE6                        2A            .byte	$2A
03532                                           ! 800   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03533 0BE7                        00            .byte	0
03534 0BE8                        15            .byte	$15
03535 0BE9                        15            .byte	$15
03536 0BEA                        00            .byte	0
03537 0BEB                        15            .byte	$15
03538 0BEC                        3F            .byte	$3F
03539 0BED                        00            .byte	0
03540 0BEE                        3F            .byte	$3F
03541 0BEF                        15            .byte	$15
03542 0BF0                        00            .byte	0
03543 0BF1                        3F            .byte	$3F
03544 0BF2                        3F            .byte	$3F
03545 0BF3                        2A            .byte	$2A
03546 0BF4                        15            .byte	$15
03547 0BF5                        15            .byte	$15
03548 0BF6                        2A            .byte	$2A
03549 0BF7                        15            .byte	$15
03550 0BF8                        3F            .byte	$3F
03551 0BF9                        2A            .byte	$2A
03552 0BFA                        3F            .byte	$3F
03553 0BFB                        15            .byte	$15
03554 0BFC                        2A            .byte	$2A
03555 0BFD                        3F            .byte	$3F
03556 0BFE                        3F            .byte	$3F
03557                                           ! 801   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03558 0BFF                        15            .byte	$15
03559 0C00                        00            .byte	0
03560 0C01                        00            .byte	0
03561 0C02                        15            .byte	$15
03562 0C03                        00            .byte	0
03563 0C04                        2A            .byte	$2A
03564 0C05                        15            .byte	$15
03565 0C06                        2A            .byte	$2A
03566 0C07                        00            .byte	0
03567 0C08                        15            .byte	$15
03568 0C09                        2A            .byte	$2A
03569 0C0A                        2A            .byte	$2A
03570 0C0B                        3F            .byte	$3F
03571 0C0C                        00            .byte	0
03572 0C0D                        00            .byte	0
03573 0C0E                        3F            .byte	$3F
03574 0C0F                        00            .byte	0
03575 0C10                        2A            .byte	$2A
03576 0C11                        3F            .byte	$3F
03577 0C12                        2A            .byte	$2A
03578 0C13                        00            .byte	0
03579 0C14                        3F            .byte	$3F
03580 0C15                        2A            .byte	$2A
03581 0C16                        2A            .byte	$2A
03582                                           ! 802   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03583 0C17                        15            .byte	$15
03584 0C18                        00            .byte	0
03585 0C19                        15            .byte	$15
03586 0C1A                        15            .byte	$15
03587 0C1B                        00            .byte	0
03588 0C1C                        3F            .byte	$3F
03589 0C1D                        15            .byte	$15
03590 0C1E                        2A            .byte	$2A
03591 0C1F                        15            .byte	$15
03592 0C20                        15            .byte	$15
03593 0C21                        2A            .byte	$2A
03594 0C22                        3F            .byte	$3F
03595 0C23                        3F            .byte	$3F
03596 0C24                        00            .byte	0
03597 0C25                        15            .byte	$15
03598 0C26                        3F            .byte	$3F
03599 0C27                        00            .byte	0
03600 0C28                        3F            .byte	$3F
03601 0C29                        3F            .byte	$3F
03602 0C2A                        2A            .byte	$2A
03603 0C2B                        15            .byte	$15
03604 0C2C                        3F            .byte	$3F
03605 0C2D                        2A            .byte	$2A
03606 0C2E                        3F            .byte	$3F
03607                                           ! 803   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03608 0C2F                        15            .byte	$15
03609 0C30                        15            .byte	$15
03610 0C31                        00            .byte	0
03611 0C32                        15            .byte	$15
03612 0C33                        15            .byte	$15
03613 0C34                        2A            .byte	$2A
03614 0C35                        15            .byte	$15
03615 0C36                        3F            .byte	$3F
03616 0C37                        00            .byte	0
03617 0C38                        15            .byte	$15
03618 0C39                        3F            .byte	$3F
03619 0C3A                        2A            .byte	$2A
03620 0C3B                        3F            .byte	$3F
03621 0C3C                        15            .byte	$15
03622 0C3D                        00            .byte	0
03623 0C3E                        3F            .byte	$3F
03624 0C3F                        15            .byte	$15
03625 0C40                        2A            .byte	$2A
03626 0C41                        3F            .byte	$3F
03627 0C42                        3F            .byte	$3F
03628 0C43                        00            .byte	0
03629 0C44                        3F            .byte	$3F
03630 0C45                        3F            .byte	$3F
03631 0C46                        2A            .byte	$2A
03632                                           ! 804   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03633 0C47                        15            .byte	$15
03634 0C48                        15            .byte	$15
03635 0C49                        15            .byte	$15
03636 0C4A                        15            .byte	$15
03637 0C4B                        15            .byte	$15
03638 0C4C                        3F            .byte	$3F
03639 0C4D                        15            .byte	$15
03640 0C4E                        3F            .byte	$3F
03641 0C4F                        15            .byte	$15
03642 0C50                        15            .byte	$15
03643 0C51                        3F            .byte	$3F
03644 0C52                        3F            .byte	$3F
03645 0C53                        3F            .byte	$3F
03646 0C54                        15            .byte	$15
03647 0C55                        15            .byte	$15
03648 0C56                        3F            .byte	$3F
03649 0C57                        15            .byte	$15
03650 0C58                        3F            .byte	$3F
03651 0C59                        3F            .byte	$3F
03652 0C5A                        3F            .byte	$3F
03653 0C5B                        15            .byte	$15
03654 0C5C                        3F            .byte	$3F
03655 0C5D                        3F            .byte	$3F
03656                                           ! 805 };
03657 0C5E                        3F            .byte	$3F
03658                                           !BCC_EOS
03659                                           ! 806 static Bit8u palette3[256][3]=
03660                                           ! 807 {
03661                       00000C5F            _palette3:
03662                                           ! 808   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03663 0C5F                        00            .byte	0
03664 0C60                        00            .byte	0
03665 0C61                        00            .byte	0
03666 0C62                        00            .byte	0
03667 0C63                        00            .byte	0
03668 0C64                        2A            .byte	$2A
03669 0C65                        00            .byte	0
03670 0C66                        2A            .byte	$2A
03671 0C67                        00            .byte	0
03672 0C68                        00            .byte	0
03673 0C69                        2A            .byte	$2A
03674 0C6A                        2A            .byte	$2A
03675 0C6B                        2A            .byte	$2A
03676 0C6C                        00            .byte	0
03677 0C6D                        00            .byte	0
03678 0C6E                        2A            .byte	$2A
03679 0C6F                        00            .byte	0
03680 0C70                        2A            .byte	$2A
03681 0C71                        2A            .byte	$2A
03682 0C72                        15            .byte	$15
03683 0C73                        00            .byte	0
03684 0C74                        2A            .byte	$2A
03685 0C75                        2A            .byte	$2A
03686 0C76                        2A            .byte	$2A
03687                                           ! 809   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03688 0C77                        15            .byte	$15
03689 0C78                        15            .byte	$15
03690 0C79                        15            .byte	$15
03691 0C7A                        15            .byte	$15
03692 0C7B                        15            .byte	$15
03693 0C7C                        3F            .byte	$3F
03694 0C7D                        15            .byte	$15
03695 0C7E                        3F            .byte	$3F
03696 0C7F                        15            .byte	$15
03697 0C80                        15            .byte	$15
03698 0C81                        3F            .byte	$3F
03699 0C82                        3F            .byte	$3F
03700 0C83                        3F            .byte	$3F
03701 0C84                        15            .byte	$15
03702 0C85                        15            .byte	$15
03703 0C86                        3F            .byte	$3F
03704 0C87                        15            .byte	$15
03705 0C88                        3F            .byte	$3F
03706 0C89                        3F            .byte	$3F
03707 0C8A                        3F            .byte	$3F
03708 0C8B                        15            .byte	$15
03709 0C8C                        3F            .byte	$3F
03710 0C8D                        3F            .byte	$3F
03711 0C8E                        3F            .byte	$3F
03712                                           ! 810   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03713 0C8F                        00            .byte	0
03714 0C90                        00            .byte	0
03715 0C91                        00            .byte	0
03716 0C92                        05            .byte	5
03717 0C93                        05            .byte	5
03718 0C94                        05            .byte	5
03719 0C95                        08            .byte	8
03720 0C96                        08            .byte	8
03721 0C97                        08            .byte	8
03722 0C98                        0B            .byte	$B
03723 0C99                        0B            .byte	$B
03724 0C9A                        0B            .byte	$B
03725 0C9B                        0E            .byte	$E
03726 0C9C                        0E            .byte	$E
03727 0C9D                        0E            .byte	$E
03728 0C9E                        11            .byte	$11
03729 0C9F                        11            .byte	$11
03730 0CA0                        11            .byte	$11
03731 0CA1                        14            .byte	$14
03732 0CA2                        14            .byte	$14
03733 0CA3                        14            .byte	$14
03734 0CA4                        18            .byte	$18
03735 0CA5                        18            .byte	$18
03736 0CA6                        18            .byte	$18
03737                                           ! 811   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03738 0CA7                        1C            .byte	$1C
03739 0CA8                        1C            .byte	$1C
03740 0CA9                        1C            .byte	$1C
03741 0CAA                        20            .byte	$20
03742 0CAB                        20            .byte	$20
03743 0CAC                        20            .byte	$20
03744 0CAD                        24            .byte	$24
03745 0CAE                        24            .byte	$24
03746 0CAF                        24            .byte	$24
03747 0CB0                        28            .byte	$28
03748 0CB1                        28            .byte	$28
03749 0CB2                        28            .byte	$28
03750 0CB3                        2D            .byte	$2D
03751 0CB4                        2D            .byte	$2D
03752 0CB5                        2D            .byte	$2D
03753 0CB6                        32            .byte	$32
03754 0CB7                        32            .byte	$32
03755 0CB8                        32            .byte	$32
03756 0CB9                        38            .byte	$38
03757 0CBA                        38            .byte	$38
03758 0CBB                        38            .byte	$38
03759 0CBC                        3F            .byte	$3F
03760 0CBD                        3F            .byte	$3F
03761 0CBE                        3F            .byte	$3F
03762                                           ! 812   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03763 0CBF                        00            .byte	0
03764 0CC0                        00            .byte	0
03765 0CC1                        3F            .byte	$3F
03766 0CC2                        10            .byte	$10
03767 0CC3                        00            .byte	0
03768 0CC4                        3F            .byte	$3F
03769 0CC5                        1F            .byte	$1F
03770 0CC6                        00            .byte	0
03771 0CC7                        3F            .byte	$3F
03772 0CC8                        2F            .byte	$2F
03773 0CC9                        00            .byte	0
03774 0CCA                        3F            .byte	$3F
03775 0CCB                        3F            .byte	$3F
03776 0CCC                        00            .byte	0
03777 0CCD                        3F            .byte	$3F
03778 0CCE                        3F            .byte	$3F
03779 0CCF                        00            .byte	0
03780 0CD0                        2F            .byte	$2F
03781 0CD1                        3F            .byte	$3F
03782 0CD2                        00            .byte	0
03783 0CD3                        1F            .byte	$1F
03784 0CD4                        3F            .byte	$3F
03785 0CD5                        00            .byte	0
03786 0CD6                        10            .byte	$10
03787                                           ! 813   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03788 0CD7                        3F            .byte	$3F
03789 0CD8                        00            .byte	0
03790 0CD9                        00            .byte	0
03791 0CDA                        3F            .byte	$3F
03792 0CDB                        10            .byte	$10
03793 0CDC                        00            .byte	0
03794 0CDD                        3F            .byte	$3F
03795 0CDE                        1F            .byte	$1F
03796 0CDF                        00            .byte	0
03797 0CE0                        3F            .byte	$3F
03798 0CE1                        2F            .byte	$2F
03799 0CE2                        00            .byte	0
03800 0CE3                        3F            .byte	$3F
03801 0CE4                        3F            .byte	$3F
03802 0CE5                        00            .byte	0
03803 0CE6                        2F            .byte	$2F
03804 0CE7                        3F            .byte	$3F
03805 0CE8                        00            .byte	0
03806 0CE9                        1F            .byte	$1F
03807 0CEA                        3F            .byte	$3F
03808 0CEB                        00            .byte	0
03809 0CEC                        10            .byte	$10
03810 0CED                        3F            .byte	$3F
03811 0CEE                        00            .byte	0
03812                                           ! 814   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03813 0CEF                        00            .byte	0
03814 0CF0                        3F            .byte	$3F
03815 0CF1                        00            .byte	0
03816 0CF2                        00            .byte	0
03817 0CF3                        3F            .byte	$3F
03818 0CF4                        10            .byte	$10
03819 0CF5                        00            .byte	0
03820 0CF6                        3F            .byte	$3F
03821 0CF7                        1F            .byte	$1F
03822 0CF8                        00            .byte	0
03823 0CF9                        3F            .byte	$3F
03824 0CFA                        2F            .byte	$2F
03825 0CFB                        00            .byte	0
03826 0CFC                        3F            .byte	$3F
03827 0CFD                        3F            .byte	$3F
03828 0CFE                        00            .byte	0
03829 0CFF                        2F            .byte	$2F
03830 0D00                        3F            .byte	$3F
03831 0D01                        00            .byte	0
03832 0D02                        1F            .byte	$1F
03833 0D03                        3F            .byte	$3F
03834 0D04                        00            .byte	0
03835 0D05                        10            .byte	$10
03836 0D06                        3F            .byte	$3F
03837                                           ! 815   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03838 0D07                        1F            .byte	$1F
03839 0D08                        1F            .byte	$1F
03840 0D09                        3F            .byte	$3F
03841 0D0A                        27            .byte	$27
03842 0D0B                        1F            .byte	$1F
03843 0D0C                        3F            .byte	$3F
03844 0D0D                        2F            .byte	$2F
03845 0D0E                        1F            .byte	$1F
03846 0D0F                        3F            .byte	$3F
03847 0D10                        37            .byte	$37
03848 0D11                        1F            .byte	$1F
03849 0D12                        3F            .byte	$3F
03850 0D13                        3F            .byte	$3F
03851 0D14                        1F            .byte	$1F
03852 0D15                        3F            .byte	$3F
03853 0D16                        3F            .byte	$3F
03854 0D17                        1F            .byte	$1F
03855 0D18                        37            .byte	$37
03856 0D19                        3F            .byte	$3F
03857 0D1A                        1F            .byte	$1F
03858 0D1B                        2F            .byte	$2F
03859 0D1C                        3F            .byte	$3F
03860 0D1D                        1F            .byte	$1F
03861 0D1E                        27            .byte	$27
03862                                           ! 816   0x3f,0x1f,0x1f, 0x3f,0x
03863 0D1F                        3F            .byte	$3F
03864 0D20                        1F            .byte	$1F
03865 0D21                        1F            .byte	$1F
03866 0D22                        3F            .byte	$3F
03867                                           ! 816 27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03868 0D23                        27            .byte	$27
03869 0D24                        1F            .byte	$1F
03870 0D25                        3F            .byte	$3F
03871 0D26                        2F            .byte	$2F
03872 0D27                        1F            .byte	$1F
03873 0D28                        3F            .byte	$3F
03874 0D29                        37            .byte	$37
03875 0D2A                        1F            .byte	$1F
03876 0D2B                        3F            .byte	$3F
03877 0D2C                        3F            .byte	$3F
03878 0D2D                        1F            .byte	$1F
03879 0D2E                        37            .byte	$37
03880 0D2F                        3F            .byte	$3F
03881 0D30                        1F            .byte	$1F
03882 0D31                        2F            .byte	$2F
03883 0D32                        3F            .byte	$3F
03884 0D33                        1F            .byte	$1F
03885 0D34                        27            .byte	$27
03886 0D35                        3F            .byte	$3F
03887 0D36                        1F            .byte	$1F
03888                                           ! 817   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03889 0D37                        1F            .byte	$1F
03890 0D38                        3F            .byte	$3F
03891 0D39                        1F            .byte	$1F
03892 0D3A                        1F            .byte	$1F
03893 0D3B                        3F            .byte	$3F
03894 0D3C                        27            .byte	$27
03895 0D3D                        1F            .byte	$1F
03896 0D3E                        3F            .byte	$3F
03897 0D3F                        2F            .byte	$2F
03898 0D40                        1F            .byte	$1F
03899 0D41                        3F            .byte	$3F
03900 0D42                        37            .byte	$37
03901 0D43                        1F            .byte	$1F
03902 0D44                        3F            .byte	$3F
03903 0D45                        3F            .byte	$3F
03904 0D46                        1F            .byte	$1F
03905 0D47                        37            .byte	$37
03906 0D48                        3F            .byte	$3F
03907 0D49                        1F            .byte	$1F
03908 0D4A                        2F            .byte	$2F
03909 0D4B                        3F            .byte	$3F
03910 0D4C                        1F            .byte	$1F
03911 0D4D                        27            .byte	$27
03912 0D4E                        3F            .byte	$3F
03913                                           ! 818   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03914 0D4F                        2D            .byte	$2D
03915 0D50                        2D            .byte	$2D
03916 0D51                        3F            .byte	$3F
03917 0D52                        31            .byte	$31
03918 0D53                        2D            .byte	$2D
03919 0D54                        3F            .byte	$3F
03920 0D55                        36            .byte	$36
03921 0D56                        2D            .byte	$2D
03922 0D57                        3F            .byte	$3F
03923 0D58                        3A            .byte	$3A
03924 0D59                        2D            .byte	$2D
03925 0D5A                        3F            .byte	$3F
03926 0D5B                        3F            .byte	$3F
03927 0D5C                        2D            .byte	$2D
03928 0D5D                        3F            .byte	$3F
03929 0D5E                        3F            .byte	$3F
03930 0D5F                        2D            .byte	$2D
03931 0D60                        3A            .byte	$3A
03932 0D61                        3F            .byte	$3F
03933 0D62                        2D            .byte	$2D
03934 0D63                        36            .byte	$36
03935 0D64                        3F            .byte	$3F
03936 0D65                        2D            .byte	$2D
03937 0D66                        31            .byte	$31
03938                                           ! 819   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03939 0D67                        3F            .byte	$3F
03940 0D68                        2D            .byte	$2D
03941 0D69                        2D            .byte	$2D
03942 0D6A                        3F            .byte	$3F
03943 0D6B                        31            .byte	$31
03944 0D6C                        2D            .byte	$2D
03945 0D6D                        3F            .byte	$3F
03946 0D6E                        36            .byte	$36
03947 0D6F                        2D            .byte	$2D
03948 0D70                        3F            .byte	$3F
03949 0D71                        3A            .byte	$3A
03950 0D72                        2D            .byte	$2D
03951 0D73                        3F            .byte	$3F
03952 0D74                        3F            .byte	$3F
03953 0D75                        2D            .byte	$2D
03954 0D76                        3A            .byte	$3A
03955 0D77                        3F            .byte	$3F
03956 0D78                        2D            .byte	$2D
03957 0D79                        36            .byte	$36
03958 0D7A                        3F            .byte	$3F
03959 0D7B                        2D            .byte	$2D
03960 0D7C                        31            .byte	$31
03961 0D7D                        3F            .byte	$3F
03962 0D7E                        2D            .byte	$2D
03963                                           ! 820   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03964 0D7F                        2D            .byte	$2D
03965 0D80                        3F            .byte	$3F
03966 0D81                        2D            .byte	$2D
03967 0D82                        2D            .byte	$2D
03968 0D83                        3F            .byte	$3F
03969 0D84                        31            .byte	$31
03970 0D85                        2D            .byte	$2D
03971 0D86                        3F            .byte	$3F
03972 0D87                        36            .byte	$36
03973 0D88                        2D            .byte	$2D
03974 0D89                        3F            .byte	$3F
03975 0D8A                        3A            .byte	$3A
03976 0D8B                        2D            .byte	$2D
03977 0D8C                        3F            .byte	$3F
03978 0D8D                        3F            .byte	$3F
03979 0D8E                        2D            .byte	$2D
03980 0D8F                        3A            .byte	$3A
03981 0D90                        3F            .byte	$3F
03982 0D91                        2D            .byte	$2D
03983 0D92                        36            .byte	$36
03984 0D93                        3F            .byte	$3F
03985 0D94                        2D            .byte	$2D
03986 0D95                        31            .byte	$31
03987 0D96                        3F            .byte	$3F
03988                                           ! 821   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03989 0D97                        00            .byte	0
03990 0D98                        00            .byte	0
03991 0D99                        1C            .byte	$1C
03992 0D9A                        07            .byte	7
03993 0D9B                        00            .byte	0
03994 0D9C                        1C            .byte	$1C
03995 0D9D                        0E            .byte	$E
03996 0D9E                        00            .byte	0
03997 0D9F                        1C            .byte	$1C
03998 0DA0                        15            .byte	$15
03999 0DA1                        00            .byte	0
04000 0DA2                        1C            .byte	$1C
04001 0DA3                        1C            .byte	$1C
04002 0DA4                        00            .byte	0
04003 0DA5                        1C            .byte	$1C
04004 0DA6                        1C            .byte	$1C
04005 0DA7                        00            .byte	0
04006 0DA8                        15            .byte	$15
04007 0DA9                        1C            .byte	$1C
04008 0DAA                        00            .byte	0
04009 0DAB                        0E            .byte	$E
04010 0DAC                        1C            .byte	$1C
04011 0DAD                        00            .byte	0
04012 0DAE                        07            .byte	7
04013                                           ! 822   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
04014 0DAF                        1C            .byte	$1C
04015 0DB0                        00            .byte	0
04016 0DB1                        00            .byte	0
04017 0DB2                        1C            .byte	$1C
04018 0DB3                        07            .byte	7
04019 0DB4                        00            .byte	0
04020 0DB5                        1C            .byte	$1C
04021 0DB6                        0E            .byte	$E
04022 0DB7                        00            .byte	0
04023 0DB8                        1C            .byte	$1C
04024 0DB9                        15            .byte	$15
04025 0DBA                        00            .byte	0
04026 0DBB                        1C            .byte	$1C
04027 0DBC                        1C            .byte	$1C
04028 0DBD                        00            .byte	0
04029 0DBE                        15            .byte	$15
04030 0DBF                        1C            .byte	$1C
04031 0DC0                        00            .byte	0
04032 0DC1                        0E            .byte	$E
04033 0DC2                        1C            .byte	$1C
04034 0DC3                        00            .byte	0
04035 0DC4                        07            .byte	7
04036 0DC5                        1C            .byte	$1C
04037 0DC6                        00            .byte	0
04038                                           ! 823   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
04039 0DC7                        00            .byte	0
04040 0DC8                        1C            .byte	$1C
04041 0DC9                        00            .byte	0
04042 0DCA                        00            .byte	0
04043 0DCB                        1C            .byte	$1C
04044 0DCC                        07            .byte	7
04045 0DCD                        00            .byte	0
04046 0DCE                        1C            .byte	$1C
04047 0DCF                        0E            .byte	$E
04048 0DD0                        00            .byte	0
04049 0DD1                        1C            .byte	$1C
04050 0DD2                        15            .byte	$15
04051 0DD3                        00            .byte	0
04052 0DD4                        1C            .byte	$1C
04053 0DD5                        1C            .byte	$1C
04054 0DD6                        00            .byte	0
04055 0DD7                        15            .byte	$15
04056 0DD8                        1C            .byte	$1C
04057 0DD9                        00            .byte	0
04058 0DDA                        0E            .byte	$E
04059 0DDB                        1C            .byte	$1C
04060 0DDC                        00            .byte	0
04061 0DDD                        07            .byte	7
04062 0DDE                        1C            .byte	$1C
04063                                           ! 824   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
04064 0DDF                        0E            .byte	$E
04065 0DE0                        0E            .byte	$E
04066 0DE1                        1C            .byte	$1C
04067 0DE2                        11            .byte	$11
04068 0DE3                        0E            .byte	$E
04069 0DE4                        1C            .byte	$1C
04070 0DE5                        15            .byte	$15
04071 0DE6                        0E            .byte	$E
04072 0DE7                        1C            .byte	$1C
04073 0DE8                        18            .byte	$18
04074 0DE9                        0E            .byte	$E
04075 0DEA                        1C            .byte	$1C
04076 0DEB                        1C            .byte	$1C
04077 0DEC                        0E            .byte	$E
04078 0DED                        1C            .byte	$1C
04079 0DEE                        1C            .byte	$1C
04080 0DEF                        0E            .byte	$E
04081 0DF0                        18            .byte	$18
04082 0DF1                        1C            .byte	$1C
04083 0DF2                        0E            .byte	$E
04084 0DF3                        15            .byte	$15
04085 0DF4                        1C            .byte	$1C
04086 0DF5                        0E            .byte	$E
04087 0DF6                        11            .byte	$11
04088                                           ! 825   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
04089 0DF7                        1C            .byte	$1C
04090 0DF8                        0E            .byte	$E
04091 0DF9                        0E            .byte	$E
04092 0DFA                        1C            .byte	$1C
04093 0DFB                        11            .byte	$11
04094 0DFC                        0E            .byte	$E
04095 0DFD                        1C            .byte	$1C
04096 0DFE                        15            .byte	$15
04097 0DFF                        0E            .byte	$E
04098 0E00                        1C            .byte	$1C
04099 0E01                        18            .byte	$18
04100 0E02                        0E            .byte	$E
04101 0E03                        1C            .byte	$1C
04102 0E04                        1C            .byte	$1C
04103 0E05                        0E            .byte	$E
04104 0E06                        18            .byte	$18
04105 0E07                        1C            .byte	$1C
04106 0E08                        0E            .byte	$E
04107 0E09                        15            .byte	$15
04108 0E0A                        1C            .byte	$1C
04109 0E0B                        0E            .byte	$E
04110 0E0C                        11            .byte	$11
04111 0E0D                        1C            .byte	$1C
04112 0E0E                        0E            .byte	$E
04113                                           ! 826   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
04114 0E0F                        0E            .byte	$E
04115 0E10                        1C            .byte	$1C
04116 0E11                        0E            .byte	$E
04117 0E12                        0E            .byte	$E
04118 0E13                        1C            .byte	$1C
04119 0E14                        11            .byte	$11
04120 0E15                        0E            .byte	$E
04121 0E16                        1C            .byte	$1C
04122 0E17                        15            .byte	$15
04123 0E18                        0E            .byte	$E
04124 0E19                        1C            .byte	$1C
04125 0E1A                        18            .byte	$18
04126 0E1B                        0E            .byte	$E
04127 0E1C                        1C            .byte	$1C
04128 0E1D                        1C            .byte	$1C
04129 0E1E                        0E            .byte	$E
04130 0E1F                        18            .byte	$18
04131 0E20                        1C            .byte	$1C
04132 0E21                        0E            .byte	$E
04133 0E22                        15            .byte	$15
04134 0E23                        1C            .byte	$1C
04135 0E24                        0E            .byte	$E
04136 0E25                        11            .byte	$11
04137 0E26                        1C            .byte	$1C
04138                                           ! 827   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
04139 0E27                        14            .byte	$14
04140 0E28                        14            .byte	$14
04141 0E29                        1C            .byte	$1C
04142 0E2A                        16            .byte	$16
04143 0E2B                        14            .byte	$14
04144 0E2C                        1C            .byte	$1C
04145 0E2D                        18            .byte	$18
04146 0E2E                        14            .byte	$14
04147 0E2F                        1C            .byte	$1C
04148 0E30                        1A            .byte	$1A
04149 0E31                        14            .byte	$14
04150 0E32                        1C            .byte	$1C
04151 0E33                        1C            .byte	$1C
04152 0E34                        14            .byte	$14
04153 0E35                        1C            .byte	$1C
04154 0E36                        1C            .byte	$1C
04155 0E37                        14            .byte	$14
04156 0E38                        1A            .byte	$1A
04157 0E39                        1C            .byte	$1C
04158 0E3A                        14            .byte	$14
04159 0E3B                        18            .byte	$18
04160 0E3C                        1C            .byte	$1C
04161 0E3D                        14            .byte	$14
04162 0E3E                        16            .byte	$16
04163                                           ! 828   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
04164 0E3F                        1C            .byte	$1C
04165 0E40                        14            .byte	$14
04166 0E41                        14            .byte	$14
04167 0E42                        1C            .byte	$1C
04168 0E43                        16            .byte	$16
04169 0E44                        14            .byte	$14
04170 0E45                        1C            .byte	$1C
04171 0E46                        18            .byte	$18
04172 0E47                        14            .byte	$14
04173 0E48                        1C            .byte	$1C
04174 0E49                        1A            .byte	$1A
04175 0E4A                        14            .byte	$14
04176 0E4B                        1C            .byte	$1C
04177 0E4C                        1C            .byte	$1C
04178 0E4D                        14            .byte	$14
04179 0E4E                        1A            .byte	$1A
04180 0E4F                        1C            .byte	$1C
04181 0E50                        14            .byte	$14
04182 0E51                        18            .byte	$18
04183 0E52                        1C            .byte	$1C
04184 0E53                        14            .byte	$14
04185 0E54                        16            .byte	$16
04186 0E55                        1C            .byte	$1C
04187 0E56                        14            .byte	$14
04188                                           ! 829   0x14,0x1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
04189 0E57                        14            .byte	$14
04190 0E58                        1C            .byte	$1C
04191 0E59                        14            .byte	$14
04192 0E5A                        14            .byte	$14
04193 0E5B                        1C            .byte	$1C
04194 0E5C                        16            .byte	$16
04195 0E5D                        14            .byte	$14
04196 0E5E                        1C            .byte	$1C
04197 0E5F                        18            .byte	$18
04198 0E60                        14            .byte	$14
04199 0E61                        1C            .byte	$1C
04200 0E62                        1A            .byte	$1A
04201 0E63                        14            .byte	$14
04202 0E64                        1C            .byte	$1C
04203 0E65                        1C            .byte	$1C
04204 0E66                        14            .byte	$14
04205 0E67                        1A            .byte	$1A
04206 0E68                        1C            .byte	$1C
04207 0E69                        14            .byte	$14
04208 0E6A                        18            .byte	$18
04209 0E6B                        1C            .byte	$1C
04210 0E6C                        14            .byte	$14
04211 0E6D                        16            .byte	$16
04212 0E6E                        1C            .byte	$1C
04213                                           ! 830   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
04214 0E6F                        00            .byte	0
04215 0E70                        00            .byte	0
04216 0E71                        10            .byte	$10
04217 0E72                        04            .byte	4
04218 0E73                        00            .byte	0
04219 0E74                        10            .byte	$10
04220 0E75                        08            .byte	8
04221 0E76                        00            .byte	0
04222 0E77                        10            .byte	$10
04223 0E78                        0C            .byte	$C
04224 0E79                        00            .byte	0
04225 0E7A                        10            .byte	$10
04226 0E7B                        10            .byte	$10
04227 0E7C                        00            .byte	0
04228 0E7D                        10            .byte	$10
04229 0E7E                        10            .byte	$10
04230 0E7F                        00            .byte	0
04231 0E80                        0C            .byte	$C
04232 0E81                        10            .byte	$10
04233 0E82                        00            .byte	0
04234 0E83                        08            .byte	8
04235 0E84                        10            .byte	$10
04236 0E85                        00            .byte	0
04237 0E86                        04            .byte	4
04238                                           ! 831   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10
04239 0E87                        10            .byte	$10
04240 0E88                        00            .byte	0
04241 0E89                        00            .byte	0
04242 0E8A                        10            .byte	$10
04243 0E8B                        04            .byte	4
04244 0E8C                        00            .byte	0
04245 0E8D                        10            .byte	$10
04246 0E8E                        08            .byte	8
04247 0E8F                        00            .byte	0
04248 0E90                        10            .byte	$10
04249 0E91                        0C            .byte	$C
04250 0E92                        00            .byte	0
04251 0E93                        10            .byte	$10
04252 0E94                        10            .byte	$10
04253 0E95                        00            .byte	0
04254 0E96                        0C            .byte	$C
04255 0E97                        10            .byte	$10
04256 0E98                        00            .byte	0
04257 0E99                        08            .byte	8
04258 0E9A                        10            .byte	$10
04259 0E9B                        00            .byte	0
04260 0E9C                        04            .byte	4
04261                                           ! 831 ,0x00,
04262 0E9D                        10            .byte	$10
04263 0E9E                        00            .byte	0
04264                                           ! 832   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04265 0E9F                        00            .byte	0
04266 0EA0                        10            .byte	$10
04267 0EA1                        00            .byte	0
04268 0EA2                        00            .byte	0
04269 0EA3                        10            .byte	$10
04270 0EA4                        04            .byte	4
04271 0EA5                        00            .byte	0
04272 0EA6                        10            .byte	$10
04273 0EA7                        08            .byte	8
04274 0EA8                        00            .byte	0
04275 0EA9                        10            .byte	$10
04276 0EAA                        0C            .byte	$C
04277 0EAB                        00            .byte	0
04278 0EAC                        10            .byte	$10
04279 0EAD                        10            .byte	$10
04280 0EAE                        00            .byte	0
04281 0EAF                        0C            .byte	$C
04282 0EB0                        10            .byte	$10
04283 0EB1                        00            .byte	0
04284 0EB2                        08            .byte	8
04285 0EB3                        10            .byte	$10
04286 0EB4                        00            .byte	0
04287 0EB5                        04            .byte	4
04288 0EB6                        10            .byte	$10
04289                                           ! 833   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04290 0EB7                        08            .byte	8
04291 0EB8                        08            .byte	8
04292 0EB9                        10            .byte	$10
04293 0EBA                        0A            .byte	$A
04294 0EBB                        08            .byte	8
04295 0EBC                        10            .byte	$10
04296 0EBD                        0C            .byte	$C
04297 0EBE                        08            .byte	8
04298 0EBF                        10            .byte	$10
04299 0EC0                        0E            .byte	$E
04300 0EC1                        08            .byte	8
04301 0EC2                        10            .byte	$10
04302 0EC3                        10            .byte	$10
04303 0EC4                        08            .byte	8
04304 0EC5                        10            .byte	$10
04305 0EC6                        10            .byte	$10
04306 0EC7                        08            .byte	8
04307 0EC8                        0E            .byte	$E
04308 0EC9                        10            .byte	$10
04309 0ECA                        08            .byte	8
04310 0ECB                        0C            .byte	$C
04311 0ECC                        10            .byte	$10
04312 0ECD                        08            .byte	8
04313 0ECE                        0A            .byte	$A
04314                                           ! 834   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04315 0ECF                        10            .byte	$10
04316 0ED0                        08            .byte	8
04317 0ED1                        08            .byte	8
04318 0ED2                        10            .byte	$10
04319 0ED3                        0A            .byte	$A
04320 0ED4                        08            .byte	8
04321 0ED5                        10            .byte	$10
04322 0ED6                        0C            .byte	$C
04323 0ED7                        08            .byte	8
04324 0ED8                        10            .byte	$10
04325 0ED9                        0E            .byte	$E
04326 0EDA                        08            .byte	8
04327 0EDB                        10            .byte	$10
04328 0EDC                        10            .byte	$10
04329 0EDD                        08            .byte	8
04330 0EDE                        0E            .byte	$E
04331 0EDF                        10            .byte	$10
04332 0EE0                        08            .byte	8
04333 0EE1                        0C            .byte	$C
04334 0EE2                        10            .byte	$10
04335 0EE3                        08            .byte	8
04336 0EE4                        0A            .byte	$A
04337 0EE5                        10            .byte	$10
04338 0EE6                        08            .byte	8
04339                                           ! 835   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04340 0EE7                        08            .byte	8
04341 0EE8                        10            .byte	$10
04342 0EE9                        08            .byte	8
04343 0EEA                        08            .byte	8
04344 0EEB                        10            .byte	$10
04345 0EEC                        0A            .byte	$A
04346 0EED                        08            .byte	8
04347 0EEE                        10            .byte	$10
04348 0EEF                        0C            .byte	$C
04349 0EF0                        08            .byte	8
04350 0EF1                        10            .byte	$10
04351 0EF2                        0E            .byte	$E
04352 0EF3                        08            .byte	8
04353 0EF4                        10            .byte	$10
04354 0EF5                        10            .byte	$10
04355 0EF6                        08            .byte	8
04356 0EF7                        0E            .byte	$E
04357 0EF8                        10            .byte	$10
04358 0EF9                        08            .byte	8
04359 0EFA                        0C            .byte	$C
04360 0EFB                        10            .byte	$10
04361 0EFC                        08            .byte	8
04362 0EFD                        0A            .byte	$A
04363 0EFE                        10            .byte	$10
04364                                           ! 836   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04365 0EFF                        0B            .byte	$B
04366 0F00                        0B            .byte	$B
04367 0F01                        10            .byte	$10
04368 0F02                        0C            .byte	$C
04369 0F03                        0B            .byte	$B
04370 0F04                        10            .byte	$10
04371 0F05                        0D            .byte	$D
04372 0F06                        0B            .byte	$B
04373 0F07                        10            .byte	$10
04374 0F08                        0F            .byte	$F
04375 0F09                        0B            .byte	$B
04376 0F0A                        10            .byte	$10
04377 0F0B                        10            .byte	$10
04378 0F0C                        0B            .byte	$B
04379 0F0D                        10            .byte	$10
04380 0F0E                        10            .byte	$10
04381 0F0F                        0B            .byte	$B
04382 0F10                        0F            .byte	$F
04383 0F11                        10            .byte	$10
04384 0F12                        0B            .byte	$B
04385 0F13                        0D            .byte	$D
04386 0F14                        10            .byte	$10
04387 0F15                        0B            .byte	$B
04388 0F16                        0C            .byte	$C
04389                                           ! 837   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04390 0F17                        10            .byte	$10
04391 0F18                        0B            .byte	$B
04392 0F19                        0B            .byte	$B
04393 0F1A                        10            .byte	$10
04394 0F1B                        0C            .byte	$C
04395 0F1C                        0B            .byte	$B
04396 0F1D                        10            .byte	$10
04397 0F1E                        0D            .byte	$D
04398 0F1F                        0B            .byte	$B
04399 0F20                        10            .byte	$10
04400 0F21                        0F            .byte	$F
04401 0F22                        0B            .byte	$B
04402 0F23                        10            .byte	$10
04403 0F24                        10            .byte	$10
04404 0F25                        0B            .byte	$B
04405 0F26                        0F            .byte	$F
04406 0F27                        10            .byte	$10
04407 0F28                        0B            .byte	$B
04408 0F29                        0D            .byte	$D
04409 0F2A                        10            .byte	$10
04410 0F2B                        0B            .byte	$B
04411 0F2C                        0C            .byte	$C
04412 0F2D                        10            .byte	$10
04413 0F2E                        0B            .byte	$B
04414                                           ! 838   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04415 0F2F                        0B            .byte	$B
04416 0F30                        10            .byte	$10
04417 0F31                        0B            .byte	$B
04418 0F32                        0B            .byte	$B
04419 0F33                        10            .byte	$10
04420 0F34                        0C            .byte	$C
04421 0F35                        0B            .byte	$B
04422 0F36                        10            .byte	$10
04423 0F37                        0D            .byte	$D
04424 0F38                        0B            .byte	$B
04425 0F39                        10            .byte	$10
04426 0F3A                        0F            .byte	$F
04427 0F3B                        0B            .byte	$B
04428 0F3C                        10            .byte	$10
04429 0F3D                        10            .byte	$10
04430 0F3E                        0B            .byte	$B
04431 0F3F                        0F            .byte	$F
04432 0F40                        10            .byte	$10
04433 0F41                        0B            .byte	$B
04434 0F42                        0D            .byte	$D
04435 0F43                        10            .byte	$10
04436 0F44                        0B            .byte	$B
04437 0F45                        0C            .byte	$C
04438 0F46                        10            .byte	$10
04439                                           ! 839   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04440 0F47                        00            .byte	0
04441 0F48                        00            .byte	0
04442 0F49                        00            .byte	0
04443 0F4A                        00            .byte	0
04444 0F4B                        00            .byte	0
04445 0F4C                        00            .byte	0
04446 0F4D                        00            .byte	0
04447 0F4E                        00            .byte	0
04448 0F4F                        00            .byte	0
04449 0F50                        00            .byte	0
04450 0F51                        00            .byte	0
04451 0F52                        00            .byte	0
04452 0F53                        00            .byte	0
04453 0F54                        00            .byte	0
04454 0F55                        00            .byte	0
04455 0F56                        00            .byte	0
04456 0F57                        00            .byte	0
04457 0F58                        00            .byte	0
04458 0F59                        00            .byte	0
04459 0F5A                        00            .byte	0
04460 0F5B                        00            .byte	0
04461 0F5C                        00            .byte	0
04462 0F5D                        00            .byte	0
04463                                           ! 840 };
04464 0F5E                        00            .byte	0
04465                                           !BCC_EOS
04466                                           ! 841 static Bit8u static_functionality[0x10]=
04467                                           ! 842 {
04468                       00000F5F            _static_functionality:
04469                                           ! 843          0xff,
04470 0F5F                        FF            .byte	$FF
04471                                           ! 844          0xe0,
04472 0F60                        E0            .byte	$E0
04473                                           ! 845          0x0f,
04474 0F61                        0F            .byte	$F
04475                                           ! 846          0x00, 0x00, 0x00, 0x00,
04476 0F62                        00            .byte	0
04477 0F63                        00            .byte	0
04478 0F64                        00            .byte	0
04479 0F65                        00            .byte	0
04480                                           ! 847          0x07,
04481 0F66                        07            .byte	7
04482                                           ! 848          0x02,
04483 0F67                        02            .byte	2
04484                                           ! 849          0x08,
04485 0F68                        08            .byte	8
04486                                           ! 850          0xe7,
04487 0F69                        E7            .byte	$E7
04488                                           ! 851          0x0c,
04489 0F6A                        0C            .byte	$C
04490                                           ! 852          0x00,
04491 0F6B                        00            .byte	0
04492                                           ! 853          0x00,
04493 0F6C                        00            .byte	0
04494                                           ! 854          0x00,
04495 0F6D                        00            .byte	0
04496                                           ! 855          0x00
04497                                           ! 856 };
04498 0F6E                        00            .byte	0
04499                                           !BCC_EOS
04500                                           ! 857 static Bit8u vgafont8[256*8]=
04501                                           ! 858 {
04502                       00000F6F            _vgafont8:
04503                                           ! 859  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04504 0F6F                        00            .byte	0
04505 0F70                        00            .byte	0
04506 0F71                        00            .byte	0
04507 0F72                        00            .byte	0
04508 0F73                        00            .byte	0
04509 0F74                        00            .byte	0
04510 0F75                        00            .byte	0
04511 0F76                        00            .byte	0
04512                                           ! 860  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04513 0F77                        7E            .byte	$7E
04514 0F78                        81            .byte	$81
04515 0F79                        A5            .byte	$A5
04516 0F7A                        81            .byte	$81
04517 0F7B                        BD            .byte	$BD
04518 0F7C                        99            .byte	$99
04519 0F7D                        81            .byte	$81
04520 0F7E                        7E            .byte	$7E
04521                                           ! 861  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04522 0F7F                        7E            .byte	$7E
04523 0F80                        FF            .byte	$FF
04524 0F81                        DB            .byte	$DB
04525 0F82                        FF            .byte	$FF
04526 0F83                        C3            .byte	$C3
04527 0F84                        E7            .byte	$E7
04528 0F85                        FF            .byte	$FF
04529 0F86                        7E            .byte	$7E
04530                                           ! 862  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04531 0F87                        6C            .byte	$6C
04532 0F88                        FE            .byte	$FE
04533 0F89                        FE            .byte	$FE
04534 0F8A                        FE            .byte	$FE
04535 0F8B                        7C            .byte	$7C
04536 0F8C                        38            .byte	$38
04537 0F8D                        10            .byte	$10
04538 0F8E                        00            .byte	0
04539                                           ! 863  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04540 0F8F                        10            .byte	$10
04541 0F90                        38            .byte	$38
04542 0F91                        7C            .byte	$7C
04543 0F92                        FE            .byte	$FE
04544 0F93                        7C            .byte	$7C
04545 0F94                        38            .byte	$38
04546 0F95                        10            .byte	$10
04547 0F96                        00            .byte	0
04548                                           ! 864  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04549 0F97                        38            .byte	$38
04550 0F98                        7C            .byte	$7C
04551 0F99                        38            .byte	$38
04552 0F9A                        FE            .byte	$FE
04553 0F9B                        FE            .byte	$FE
04554 0F9C                        7C            .byte	$7C
04555 0F9D                        38            .byte	$38
04556 0F9E                        7C            .byte	$7C
04557                                           ! 865  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x7c,
04558 0F9F                        10            .byte	$10
04559 0FA0                        10            .byte	$10
04560 0FA1                        38            .byte	$38
04561 0FA2                        7C            .byte	$7C
04562 0FA3                        FE            .byte	$FE
04563 0FA4                        7C            .byte	$7C
04564 0FA5                        38            .byte	$38
04565 0FA6                        7C            .byte	$7C
04566                                           ! 866  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04567 0FA7                        00            .byte	0
04568 0FA8                        00            .byte	0
04569 0FA9                        18            .byte	$18
04570 0FAA                        3C            .byte	$3C
04571 0FAB                        3C            .byte	$3C
04572 0FAC                        18            .byte	$18
04573 0FAD                        00            .byte	0
04574 0FAE                        00            .byte	0
04575                                           ! 867  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04576 0FAF                        FF            .byte	$FF
04577 0FB0                        FF            .byte	$FF
04578 0FB1                        E7            .byte	$E7
04579 0FB2                        C3            .byte	$C3
04580 0FB3                        C3            .byte	$C3
04581 0FB4                        E7            .byte	$E7
04582 0FB5                        FF            .byte	$FF
04583 0FB6                        FF            .byte	$FF
04584                                           ! 868  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04585 0FB7                        00            .byte	0
04586 0FB8                        3C            .byte	$3C
04587 0FB9                        66            .byte	$66
04588 0FBA                        42            .byte	$42
04589 0FBB                        42            .byte	$42
04590 0FBC                        66            .byte	$66
04591 0FBD                        3C            .byte	$3C
04592 0FBE                        00            .byte	0
04593                                           ! 869  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04594 0FBF                        FF            .byte	$FF
04595 0FC0                        C3            .byte	$C3
04596 0FC1                        99            .byte	$99
04597 0FC2                        BD            .byte	$BD
04598 0FC3                        BD            .byte	$BD
04599 0FC4                        99            .byte	$99
04600 0FC5                        C3            .byte	$C3
04601 0FC6                        FF            .byte	$FF
04602                                           ! 870  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04603 0FC7                        0F            .byte	$F
04604 0FC8                        07            .byte	7
04605 0FC9                        0F            .byte	$F
04606 0FCA                        7D            .byte	$7D
04607 0FCB                        CC            .byte	$CC
04608 0FCC                        CC            .byte	$CC
04609 0FCD                        CC            .byte	$CC
04610 0FCE                        78            .byte	$78
04611                                           ! 871  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04612 0FCF                        3C            .byte	$3C
04613 0FD0                        66            .byte	$66
04614 0FD1                        66            .byte	$66
04615 0FD2                        66            .byte	$66
04616 0FD3                        3C            .byte	$3C
04617 0FD4                        18            .byte	$18
04618 0FD5                        7E            .byte	$7E
04619 0FD6                        18            .byte	$18
04620                                           ! 872  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04621 0FD7                        3F            .byte	$3F
04622 0FD8                        33            .byte	$33
04623 0FD9                        3F            .byte	$3F
04624 0FDA                        30            .byte	$30
04625 0FDB                        30            .byte	$30
04626 0FDC                        70            .byte	$70
04627 0FDD                        F0            .byte	$F0
04628 0FDE                        E0            .byte	$E0
04629                                           ! 873  0x7f, 0x63, 0x7f, 0x63
04630 0FDF                        7F            .byte	$7F
04631 0FE0                        63            .byte	$63
04632 0FE1                        7F            .byte	$7F
04633                                           ! 873 , 0x63, 0x67, 0xe6, 0xc0,
04634 0FE2                        63            .byte	$63
04635 0FE3                        63            .byte	$63
04636 0FE4                        67            .byte	$67
04637 0FE5                        E6            .byte	$E6
04638 0FE6                        C0            .byte	$C0
04639                                           ! 874  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04640 0FE7                        99            .byte	$99
04641 0FE8                        5A            .byte	$5A
04642 0FE9                        3C            .byte	$3C
04643 0FEA                        E7            .byte	$E7
04644 0FEB                        E7            .byte	$E7
04645 0FEC                        3C            .byte	$3C
04646 0FED                        5A            .byte	$5A
04647 0FEE                        99            .byte	$99
04648                                           ! 875  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04649 0FEF                        80            .byte	$80
04650 0FF0                        E0            .byte	$E0
04651 0FF1                        F8            .byte	$F8
04652 0FF2                        FE            .byte	$FE
04653 0FF3                        F8            .byte	$F8
04654 0FF4                        E0            .byte	$E0
04655 0FF5                        80            .byte	$80
04656 0FF6                        00            .byte	0
04657                                           ! 876  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04658 0FF7                        02            .byte	2
04659 0FF8                        0E            .byte	$E
04660 0FF9                        3E            .byte	$3E
04661 0FFA                        FE            .byte	$FE
04662 0FFB                        3E            .byte	$3E
04663 0FFC                        0E            .byte	$E
04664 0FFD                        02            .byte	2
04665 0FFE                        00            .byte	0
04666                                           ! 877  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04667 0FFF                        18            .byte	$18
04668 1000                        3C            .byte	$3C
04669 1001                        7E            .byte	$7E
04670 1002                        18            .byte	$18
04671 1003                        18            .byte	$18
04672 1004                        7E            .byte	$7E
04673 1005                        3C            .byte	$3C
04674 1006                        18            .byte	$18
04675                                           ! 878  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04676 1007                        66            .byte	$66
04677 1008                        66            .byte	$66
04678 1009                        66            .byte	$66
04679 100A                        66            .byte	$66
04680 100B                        66            .byte	$66
04681 100C                        00            .byte	0
04682 100D                        66            .byte	$66
04683 100E                        00            .byte	0
04684                                           ! 879  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04685 100F                        7F            .byte	$7F
04686 1010                        DB            .byte	$DB
04687 1011                        DB            .byte	$DB
04688 1012                        7B            .byte	$7B
04689 1013                        1B            .byte	$1B
04690 1014                        1B            .byte	$1B
04691 1015                        1B            .byte	$1B
04692 1016                        00            .byte	0
04693                                           ! 880  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04694 1017                        3E            .byte	$3E
04695 1018                        63            .byte	$63
04696 1019                        38            .byte	$38
04697 101A                        6C            .byte	$6C
04698 101B                        6C            .byte	$6C
04699 101C                        38            .byte	$38
04700 101D                        CC            .byte	$CC
04701 101E                        78            .byte	$78
04702                                           ! 881  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04703 101F                        00            .byte	0
04704 1020                        00            .byte	0
04705 1021                        00            .byte	0
04706 1022                        00            .byte	0
04707 1023                        7E            .byte	$7E
04708 1024                        7E            .byte	$7E
04709 1025                        7E            .byte	$7E
04710 1026                        00            .byte	0
04711                                           ! 882  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04712 1027                        18            .byte	$18
04713 1028                        3C            .byte	$3C
04714 1029                        7E            .byte	$7E
04715 102A                        18            .byte	$18
04716 102B                        7E            .byte	$7E
04717 102C                        3C            .byte	$3C
04718 102D                        18            .byte	$18
04719 102E                        FF            .byte	$FF
04720                                           ! 883  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04721 102F                        18            .byte	$18
04722 1030                        3C            .byte	$3C
04723 1031                        7E            .byte	$7E
04724 1032                        18            .byte	$18
04725 1033                        18            .byte	$18
04726 1034                        18            .byte	$18
04727 1035                        18            .byte	$18
04728 1036                        00            .byte	0
04729                                           ! 884  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04730 1037                        18            .byte	$18
04731 1038                        18            .byte	$18
04732 1039                        18            .byte	$18
04733 103A                        18            .byte	$18
04734 103B                        7E            .byte	$7E
04735 103C                        3C            .byte	$3C
04736 103D                        18            .byte	$18
04737 103E                        00            .byte	0
04738                                           ! 885  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04739 103F                        00            .byte	0
04740 1040                        18            .byte	$18
04741 1041                        0C            .byte	$C
04742 1042                        FE            .byte	$FE
04743 1043                        0C            .byte	$C
04744 1044                        18            .byte	$18
04745 1045                        00            .byte	0
04746 1046                        00            .byte	0
04747                                           ! 886  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04748 1047                        00            .byte	0
04749 1048                        30            .byte	$30
04750 1049                        60            .byte	$60
04751 104A                        FE            .byte	$FE
04752 104B                        60            .byte	$60
04753 104C                        30            .byte	$30
04754 104D                        00            .byte	0
04755 104E                        00            .byte	0
04756                                           ! 887  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04757 104F                        00            .byte	0
04758 1050                        00            .byte	0
04759 1051                        C0            .byte	$C0
04760 1052                        C0            .byte	$C0
04761 1053                        C0            .byte	$C0
04762 1054                        FE            .byte	$FE
04763 1055                        00            .byte	0
04764 1056                        00            .byte	0
04765                                           ! 888  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04766 1057                        00            .byte	0
04767 1058                        24            .byte	$24
04768 1059                        66            .byte	$66
04769 105A                        FF            .byte	$FF
04770 105B                        66            .byte	$66
04771 105C                        24            .byte	$24
04772 105D                        00            .byte	0
04773 105E                        00            .byte	0
04774                                           ! 889  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04775 105F                        00            .byte	0
04776 1060                        18            .byte	$18
04777 1061                        3C            .byte	$3C
04778 1062                        7E            .byte	$7E
04779 1063                        FF            .byte	$FF
04780 1064                        FF            .byte	$FF
04781 1065                        00            .byte	0
04782 1066                        00            .byte	0
04783                                           ! 890  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04784 1067                        00            .byte	0
04785 1068                        FF            .byte	$FF
04786 1069                        FF            .byte	$FF
04787 106A                        7E            .byte	$7E
04788 106B                        3C            .byte	$3C
04789 106C                        18            .byte	$18
04790 106D                        00            .byte	0
04791 106E                        00            .byte	0
04792                                           ! 891  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04793 106F                        00            .byte	0
04794 1070                        00            .byte	0
04795 1071                        00            .byte	0
04796 1072                        00            .byte	0
04797 1073                        00            .byte	0
04798 1074                        00            .byte	0
04799 1075                        00            .byte	0
04800 1076                        00            .byte	0
04801                                           ! 892  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04802 1077                        30            .byte	$30
04803 1078                        78            .byte	$78
04804 1079                        78            .byte	$78
04805 107A                        30            .byte	$30
04806 107B                        30            .byte	$30
04807 107C                        00            .byte	0
04808 107D                        30            .byte	$30
04809 107E                        00            .byte	0
04810                                           ! 893  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04811 107F                        6C            .byte	$6C
04812 1080                        6C            .byte	$6C
04813 1081                        6C            .byte	$6C
04814 1082                        00            .byte	0
04815 1083                        00            .byte	0
04816 1084                        00            .byte	0
04817 1085                        00            .byte	0
04818 1086                        00            .byte	0
04819                                           ! 894  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04820 1087                        6C            .byte	$6C
04821 1088                        6C            .byte	$6C
04822 1089                        FE            .byte	$FE
04823 108A                        6C            .byte	$6C
04824 108B                        FE            .byte	$FE
04825 108C                        6C            .byte	$6C
04826 108D                        6C            .byte	$6C
04827 108E                        00            .byte	0
04828                                           ! 895  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04829 108F                        30            .byte	$30
04830 1090                        7C            .byte	$7C
04831 1091                        C0            .byte	$C0
04832 1092                        78            .byte	$78
04833 1093                        0C            .byte	$C
04834 1094                        F8            .byte	$F8
04835 1095                        30            .byte	$30
04836 1096                        00            .byte	0
04837                                           ! 896  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04838 1097                        00            .byte	0
04839 1098                        C6            .byte	$C6
04840 1099                        CC            .byte	$CC
04841 109A                        18            .byte	$18
04842 109B                        30            .byte	$30
04843 109C                        66            .byte	$66
04844 109D                        C6            .byte	$C6
04845 109E                        00            .byte	0
04846                                           ! 897  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04847 109F                        38            .byte	$38
04848 10A0                        6C            .byte	$6C
04849 10A1                        38            .byte	$38
04850 10A2                        76            .byte	$76
04851 10A3                        DC            .byte	$DC
04852 10A4                        CC            .byte	$CC
04853 10A5                        76            .byte	$76
04854 10A6                        00            .byte	0
04855                                           ! 898  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04856 10A7                        60            .byte	$60
04857 10A8                        60            .byte	$60
04858 10A9                        C0            .byte	$C0
04859 10AA                        00            .byte	0
04860 10AB                        00            .byte	0
04861 10AC                        00            .byte	0
04862 10AD                        00            .byte	0
04863 10AE                        00            .byte	0
04864                                           ! 899  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04865 10AF                        18            .byte	$18
04866 10B0                        30            .byte	$30
04867 10B1                        60            .byte	$60
04868 10B2                        60            .byte	$60
04869 10B3                        60            .byte	$60
04870 10B4                        30            .byte	$30
04871 10B5                        18            .byte	$18
04872 10B6                        00            .byte	0
04873                                           ! 900  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04874 10B7                        60            .byte	$60
04875 10B8                        30            .byte	$30
04876 10B9                        18            .byte	$18
04877 10BA                        18            .byte	$18
04878 10BB                        18            .byte	$18
04879 10BC                        30            .byte	$30
04880 10BD                        60            .byte	$60
04881 10BE                        00            .byte	0
04882                                           ! 901  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04883 10BF                        00            .byte	0
04884 10C0                        66            .byte	$66
04885 10C1                        3C            .byte	$3C
04886 10C2                        FF            .byte	$FF
04887 10C3                        3C            .byte	$3C
04888 10C4                        66            .byte	$66
04889 10C5                        00            .byte	0
04890 10C6                        00            .byte	0
04891                                           ! 902  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04892 10C7                        00            .byte	0
04893 10C8                        30            .byte	$30
04894 10C9                        30            .byte	$30
04895 10CA                        FC            .byte	$FC
04896 10CB                        30            .byte	$30
04897 10CC                        30            .byte	$30
04898 10CD                        00            .byte	0
04899 10CE                        00            .byte	0
04900                                           ! 903  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04901 10CF                        00            .byte	0
04902 10D0                        00            .byte	0
04903 10D1                        00            .byte	0
04904 10D2                        00            .byte	0
04905 10D3                        00            .byte	0
04906 10D4                        30            .byte	$30
04907 10D5                        30            .byte	$30
04908 10D6                        60            .byte	$60
04909                                           ! 904  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04910 10D7                        00            .byte	0
04911 10D8                        00            .byte	0
04912 10D9                        00            .byte	0
04913 10DA                        FC            .byte	$FC
04914 10DB                        00            .byte	0
04915 10DC                        00            .byte	0
04916 10DD                        00            .byte	0
04917 10DE                        00            .byte	0
04918                                           ! 905  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04919 10DF                        00            .byte	0
04920 10E0                        00            .byte	0
04921 10E1                        00            .byte	0
04922 10E2                        00            .byte	0
04923 10E3                        00            .byte	0
04924 10E4                        30            .byte	$30
04925 10E5                        30            .byte	$30
04926 10E6                        00            .byte	0
04927                                           ! 906  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04928 10E7                        06            .byte	6
04929 10E8                        0C            .byte	$C
04930 10E9                        18            .byte	$18
04931 10EA                        30            .byte	$30
04932 10EB                        60            .byte	$60
04933 10EC                        C0            .byte	$C0
04934 10ED                        80            .byte	$80
04935 10EE                        00            .byte	0
04936                                           ! 907  0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0x7c, 0x00,
04937 10EF                        7C            .byte	$7C
04938 10F0                        C6            .byte	$C6
04939 10F1                        CE            .byte	$CE
04940 10F2                        DE            .byte	$DE
04941 10F3                        F6            .byte	$F6
04942 10F4                        E6            .byte	$E6
04943 10F5                        7C            .byte	$7C
04944 10F6                        00            .byte	0
04945                                           ! 908  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04946 10F7                        30            .byte	$30
04947 10F8                        70            .byte	$70
04948 10F9                        30            .byte	$30
04949 10FA                        30            .byte	$30
04950 10FB                        30            .byte	$30
04951 10FC                        30            .byte	$30
04952 10FD                        FC            .byte	$FC
04953 10FE                        00            .byte	0
04954                                           ! 909  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04955 10FF                        78            .byte	$78
04956 1100                        CC            .byte	$CC
04957 1101                        0C            .byte	$C
04958 1102                        38            .byte	$38
04959 1103                        60            .byte	$60
04960 1104                        CC            .byte	$CC
04961 1105                        FC            .byte	$FC
04962 1106                        00            .byte	0
04963                                           ! 910  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04964 1107                        78            .byte	$78
04965 1108                        CC            .byte	$CC
04966 1109                        0C            .byte	$C
04967 110A                        38            .byte	$38
04968 110B                        0C            .byte	$C
04969 110C                        CC            .byte	$CC
04970 110D                        78            .byte	$78
04971 110E                        00            .byte	0
04972                                           ! 911  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04973 110F                        1C            .byte	$1C
04974 1110                        3C            .byte	$3C
04975 1111                        6C            .byte	$6C
04976 1112                        CC            .byte	$CC
04977 1113                        FE            .byte	$FE
04978 1114                        0C            .byte	$C
04979 1115                        1E            .byte	$1E
04980 1116                        00            .byte	0
04981                                           ! 912  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04982 1117                        FC            .byte	$FC
04983 1118                        C0            .byte	$C0
04984 1119                        F8            .byte	$F8
04985 111A                        0C            .byte	$C
04986 111B                        0C            .byte	$C
04987 111C                        CC            .byte	$CC
04988 111D                        78            .byte	$78
04989 111E                        00            .byte	0
04990                                           ! 913  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04991 111F                        38            .byte	$38
04992 1120                        60            .byte	$60
04993 1121                        C0            .byte	$C0
04994 1122                        F8            .byte	$F8
04995 1123                        CC            .byte	$CC
04996 1124                        CC            .byte	$CC
04997 1125                        78            .byte	$78
04998 1126                        00            .byte	0
04999                                           ! 914  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
05000 1127                        FC            .byte	$FC
05001 1128                        CC            .byte	$CC
05002 1129                        0C            .byte	$C
05003 112A                        18            .byte	$18
05004 112B                        30            .byte	$30
05005 112C                        30            .byte	$30
05006 112D                        30            .byte	$30
05007 112E                        00            .byte	0
05008                                           ! 915  0x78, 0xcc, 
05009 112F                        78            .byte	$78
05010 1130                        CC            .byte	$CC
05011                                           ! 915 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05012 1131                        CC            .byte	$CC
05013 1132                        78            .byte	$78
05014 1133                        CC            .byte	$CC
05015 1134                        CC            .byte	$CC
05016 1135                        78            .byte	$78
05017 1136                        00            .byte	0
05018                                           ! 916  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
05019 1137                        78            .byte	$78
05020 1138                        CC            .byte	$CC
05021 1139                        CC            .byte	$CC
05022 113A                        7C            .byte	$7C
05023 113B                        0C            .byte	$C
05024 113C                        18            .byte	$18
05025 113D                        70            .byte	$70
05026 113E                        00            .byte	0
05027                                           ! 917  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
05028 113F                        00            .byte	0
05029 1140                        30            .byte	$30
05030 1141                        30            .byte	$30
05031 1142                        00            .byte	0
05032 1143                        00            .byte	0
05033 1144                        30            .byte	$30
05034 1145                        30            .byte	$30
05035 1146                        00            .byte	0
05036                                           ! 918  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
05037 1147                        00            .byte	0
05038 1148                        30            .byte	$30
05039 1149                        30            .byte	$30
05040 114A                        00            .byte	0
05041 114B                        00            .byte	0
05042 114C                        30            .byte	$30
05043 114D                        30            .byte	$30
05044 114E                        60            .byte	$60
05045                                           ! 919  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
05046 114F                        18            .byte	$18
05047 1150                        30            .byte	$30
05048 1151                        60            .byte	$60
05049 1152                        C0            .byte	$C0
05050 1153                        60            .byte	$60
05051 1154                        30            .byte	$30
05052 1155                        18            .byte	$18
05053 1156                        00            .byte	0
05054                                           ! 920  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
05055 1157                        00            .byte	0
05056 1158                        00            .byte	0
05057 1159                        FC            .byte	$FC
05058 115A                        00            .byte	0
05059 115B                        00            .byte	0
05060 115C                        FC            .byte	$FC
05061 115D                        00            .byte	0
05062 115E                        00            .byte	0
05063                                           ! 921  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
05064 115F                        60            .byte	$60
05065 1160                        30            .byte	$30
05066 1161                        18            .byte	$18
05067 1162                        0C            .byte	$C
05068 1163                        18            .byte	$18
05069 1164                        30            .byte	$30
05070 1165                        60            .byte	$60
05071 1166                        00            .byte	0
05072                                           ! 922  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
05073 1167                        78            .byte	$78
05074 1168                        CC            .byte	$CC
05075 1169                        0C            .byte	$C
05076 116A                        18            .byte	$18
05077 116B                        30            .byte	$30
05078 116C                        00            .byte	0
05079 116D                        30            .byte	$30
05080 116E                        00            .byte	0
05081                                           ! 923  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
05082 116F                        7C            .byte	$7C
05083 1170                        C6            .byte	$C6
05084 1171                        DE            .byte	$DE
05085 1172                        DE            .byte	$DE
05086 1173                        DE            .byte	$DE
05087 1174                        C0            .byte	$C0
05088 1175                        78            .byte	$78
05089 1176                        00            .byte	0
05090                                           ! 924  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
05091 1177                        30            .byte	$30
05092 1178                        78            .byte	$78
05093 1179                        CC            .byte	$CC
05094 117A                        CC            .byte	$CC
05095 117B                        FC            .byte	$FC
05096 117C                        CC            .byte	$CC
05097 117D                        CC            .byte	$CC
05098 117E                        00            .byte	0
05099                                           ! 925  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
05100 117F                        FC            .byte	$FC
05101 1180                        66            .byte	$66
05102 1181                        66            .byte	$66
05103 1182                        7C            .byte	$7C
05104 1183                        66            .byte	$66
05105 1184                        66            .byte	$66
05106 1185                        FC            .byte	$FC
05107 1186                        00            .byte	0
05108                                           ! 926  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
05109 1187                        3C            .byte	$3C
05110 1188                        66            .byte	$66
05111 1189                        C0            .byte	$C0
05112 118A                        C0            .byte	$C0
05113 118B                        C0            .byte	$C0
05114 118C                        66            .byte	$66
05115 118D                        3C            .byte	$3C
05116 118E                        00            .byte	0
05117                                           ! 927  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
05118 118F                        F8            .byte	$F8
05119 1190                        6C            .byte	$6C
05120 1191                        66            .byte	$66
05121 1192                        66            .byte	$66
05122 1193                        66            .byte	$66
05123 1194                        6C            .byte	$6C
05124 1195                        F8            .byte	$F8
05125 1196                        00            .byte	0
05126                                           ! 928  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
05127 1197                        FE            .byte	$FE
05128 1198                        62            .byte	$62
05129 1199                        68            .byte	$68
05130 119A                        78            .byte	$78
05131 119B                        68            .byte	$68
05132 119C                        62            .byte	$62
05133 119D                        FE            .byte	$FE
05134 119E                        00            .byte	0
05135                                           ! 929  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
05136 119F                        FE            .byte	$FE
05137 11A0                        62            .byte	$62
05138 11A1                        68            .byte	$68
05139 11A2                        78            .byte	$78
05140 11A3                        68            .byte	$68
05141 11A4                        60            .byte	$60
05142 11A5                        F0            .byte	$F0
05143 11A6                        00            .byte	0
05144                                           ! 930  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
05145 11A7                        3C            .byte	$3C
05146 11A8                        66            .byte	$66
05147 11A9                        C0            .byte	$C0
05148 11AA                        C0            .byte	$C0
05149 11AB                        CE            .byte	$CE
05150 11AC                        66            .byte	$66
05151 11AD                        3E            .byte	$3E
05152 11AE                        00            .byte	0
05153                                           ! 931  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
05154 11AF                        CC            .byte	$CC
05155 11B0                        CC            .byte	$CC
05156 11B1                        CC            .byte	$CC
05157 11B2                        FC            .byte	$FC
05158 11B3                        CC            .byte	$CC
05159 11B4                        CC            .byte	$CC
05160 11B5                        CC            .byte	$CC
05161 11B6                        00            .byte	0
05162                                           ! 932  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05163 11B7                        78            .byte	$78
05164 11B8                        30            .byte	$30
05165 11B9                        30            .byte	$30
05166 11BA                        30            .byte	$30
05167 11BB                        30            .byte	$30
05168 11BC                        30            .byte	$30
05169 11BD                        78            .byte	$78
05170 11BE                        00            .byte	0
05171                                           ! 933  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
05172 11BF                        1E            .byte	$1E
05173 11C0                        0C            .byte	$C
05174 11C1                        0C            .byte	$C
05175 11C2                        0C            .byte	$C
05176 11C3                        CC            .byte	$CC
05177 11C4                        CC            .byte	$CC
05178 11C5                        78            .byte	$78
05179 11C6                        00            .byte	0
05180                                           ! 934  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
05181 11C7                        E6            .byte	$E6
05182 11C8                        66            .byte	$66
05183 11C9                        6C            .byte	$6C
05184 11CA                        78            .byte	$78
05185 11CB                        6C            .byte	$6C
05186 11CC                        66            .byte	$66
05187 11CD                        E6            .byte	$E6
05188 11CE                        00            .byte	0
05189                                           ! 935  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
05190 11CF                        F0            .byte	$F0
05191 11D0                        60            .byte	$60
05192 11D1                        60            .byte	$60
05193 11D2                        60            .byte	$60
05194 11D3                        62            .byte	$62
05195 11D4                        66            .byte	$66
05196 11D5                        FE            .byte	$FE
05197 11D6                        00            .byte	0
05198                                           ! 936  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
05199 11D7                        C6            .byte	$C6
05200 11D8                        EE            .byte	$EE
05201 11D9                        FE            .byte	$FE
05202 11DA                        FE            .byte	$FE
05203 11DB                        D6            .byte	$D6
05204 11DC                        C6            .byte	$C6
05205 11DD                        C6            .byte	$C6
05206 11DE                        00            .byte	0
05207                                           ! 937  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
05208 11DF                        C6            .byte	$C6
05209 11E0                        E6            .byte	$E6
05210 11E1                        F6            .byte	$F6
05211 11E2                        DE            .byte	$DE
05212 11E3                        CE            .byte	$CE
05213 11E4                        C6            .byte	$C6
05214 11E5                        C6            .byte	$C6
05215 11E6                        00            .byte	0
05216                                           ! 938  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
05217 11E7                        38            .byte	$38
05218 11E8                        6C            .byte	$6C
05219 11E9                        C6            .byte	$C6
05220 11EA                        C6            .byte	$C6
05221 11EB                        C6            .byte	$C6
05222 11EC                        6C            .byte	$6C
05223 11ED                        38            .byte	$38
05224 11EE                        00            .byte	0
05225                                           ! 939  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
05226 11EF                        FC            .byte	$FC
05227 11F0                        66            .byte	$66
05228 11F1                        66            .byte	$66
05229 11F2                        7C            .byte	$7C
05230 11F3                        60            .byte	$60
05231 11F4                        60            .byte	$60
05232 11F5                        F0            .byte	$F0
05233 11F6                        00            .byte	0
05234                                           ! 940  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
05235 11F7                        78            .byte	$78
05236 11F8                        CC            .byte	$CC
05237 11F9                        CC            .byte	$CC
05238 11FA                        CC            .byte	$CC
05239 11FB                        DC            .byte	$DC
05240 11FC                        78            .byte	$78
05241 11FD                        1C            .byte	$1C
05242 11FE                        00            .byte	0
05243                                           ! 941  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
05244 11FF                        FC            .byte	$FC
05245 1200                        66            .byte	$66
05246 1201                        66            .byte	$66
05247 1202                        7C            .byte	$7C
05248 1203                        6C            .byte	$6C
05249 1204                        66            .byte	$66
05250 1205                        E6            .byte	$E6
05251 1206                        00            .byte	0
05252                                           ! 942  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
05253 1207                        78            .byte	$78
05254 1208                        CC            .byte	$CC
05255 1209                        E0            .byte	$E0
05256 120A                        70            .byte	$70
05257 120B                        1C            .byte	$1C
05258 120C                        CC            .byte	$CC
05259 120D                        78            .byte	$78
05260 120E                        00            .byte	0
05261                                           ! 943  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05262 120F                        FC            .byte	$FC
05263 1210                        B4            .byte	$B4
05264 1211                        30            .byte	$30
05265 1212                        30            .byte	$30
05266 1213                        30            .byte	$30
05267 1214                        30            .byte	$30
05268 1215                        78            .byte	$78
05269 1216                        00            .byte	0
05270                                           ! 944  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05271 1217                        CC            .byte	$CC
05272 1218                        CC            .byte	$CC
05273 1219                        CC            .byte	$CC
05274 121A                        CC            .byte	$CC
05275 121B                        CC            .byte	$CC
05276 121C                        CC            .byte	$CC
05277 121D                        FC            .byte	$FC
05278 121E                        00            .byte	0
05279                                           ! 945  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05280 121F                        CC            .byte	$CC
05281 1220                        CC            .byte	$CC
05282 1221                        CC            .byte	$CC
05283 1222                        CC            .byte	$CC
05284 1223                        CC            .byte	$CC
05285 1224                        78            .byte	$78
05286 1225                        30            .byte	$30
05287 1226                        00            .byte	0
05288                                           ! 946  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05289 1227                        C6            .byte	$C6
05290 1228                        C6            .byte	$C6
05291 1229                        C6            .byte	$C6
05292 122A                        D6            .byte	$D6
05293 122B                        FE            .byte	$FE
05294 122C                        EE            .byte	$EE
05295 122D                        C6            .byte	$C6
05296 122E                        00            .byte	0
05297                                           ! 947  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05298 122F                        C6            .byte	$C6
05299 1230                        C6            .byte	$C6
05300 1231                        6C            .byte	$6C
05301 1232                        38            .byte	$38
05302 1233                        38            .byte	$38
05303 1234                        6C            .byte	$6C
05304 1235                        C6            .byte	$C6
05305 1236                        00            .byte	0
05306                                           ! 948  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05307 1237                        CC            .byte	$CC
05308 1238                        CC            .byte	$CC
05309 1239                        CC            .byte	$CC
05310 123A                        78            .byte	$78
05311 123B                        30            .byte	$30
05312 123C                        30            .byte	$30
05313 123D                        78            .byte	$78
05314 123E                        00            .byte	0
05315                                           ! 949  0xfe, 0xc6, 0x8c, 0x18, 0x32, 0x66, 0xfe, 0x00,
05316 123F                        FE            .byte	$FE
05317 1240                        C6            .byte	$C6
05318 1241                        8C            .byte	$8C
05319 1242                        18            .byte	$18
05320 1243                        32            .byte	$32
05321 1244                        66            .byte	$66
05322 1245                        FE            .byte	$FE
05323 1246                        00            .byte	0
05324                                           ! 950  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05325 1247                        78            .byte	$78
05326 1248                        60            .byte	$60
05327 1249                        60            .byte	$60
05328 124A                        60            .byte	$60
05329 124B                        60            .byte	$60
05330 124C                        60            .byte	$60
05331 124D                        78            .byte	$78
05332 124E                        00            .byte	0
05333                                           ! 951  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05334 124F                        C0            .byte	$C0
05335 1250                        60            .byte	$60
05336 1251                        30            .byte	$30
05337 1252                        18            .byte	$18
05338 1253                        0C            .byte	$C
05339 1254                        06            .byte	6
05340 1255                        02            .byte	2
05341 1256                        00            .byte	0
05342                                           ! 952  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05343 1257                        78            .byte	$78
05344 1258                        18            .byte	$18
05345 1259                        18            .byte	$18
05346 125A                        18            .byte	$18
05347 125B                        18            .byte	$18
05348 125C                        18            .byte	$18
05349 125D                        78            .byte	$78
05350 125E                        00            .byte	0
05351                                           ! 953  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05352 125F                        10            .byte	$10
05353 1260                        38            .byte	$38
05354 1261                        6C            .byte	$6C
05355 1262                        C6            .byte	$C6
05356 1263                        00            .byte	0
05357 1264                        00            .byte	0
05358 1265                        00            .byte	0
05359 1266                        00            .byte	0
05360                                           ! 954  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05361 1267                        00            .byte	0
05362 1268                        00            .byte	0
05363 1269                        00            .byte	0
05364 126A                        00            .byte	0
05365 126B                        00            .byte	0
05366 126C                        00            .byte	0
05367 126D                        00            .byte	0
05368 126E                        FF            .byte	$FF
05369                                           ! 955  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05370 126F                        30            .byte	$30
05371 1270                        30            .byte	$30
05372 1271                        18            .byte	$18
05373 1272                        00            .byte	0
05374 1273                        00            .byte	0
05375 1274                        00            .byte	0
05376 1275                        00            .byte	0
05377 1276                        00            .byte	0
05378                                           ! 956  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05379 1277                        00            .byte	0
05380 1278                        00            .byte	0
05381 1279                        78            .byte	$78
05382 127A                        0C            .byte	$C
05383 127B                        7C            .byte	$7C
05384 127C                        CC            .byte	$CC
05385 127D                        76            .byte	$76
05386 127E                        00            .byte	0
05387                                           ! 957  0x
05388                                           ! 957 e0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05389 127F                        E0            .byte	$E0
05390 1280                        60            .byte	$60
05391 1281                        60            .byte	$60
05392 1282                        7C            .byte	$7C
05393 1283                        66            .byte	$66
05394 1284                        66            .byte	$66
05395 1285                        DC            .byte	$DC
05396 1286                        00            .byte	0
05397                                           ! 958  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05398 1287                        00            .byte	0
05399 1288                        00            .byte	0
05400 1289                        78            .byte	$78
05401 128A                        CC            .byte	$CC
05402 128B                        C0            .byte	$C0
05403 128C                        CC            .byte	$CC
05404 128D                        78            .byte	$78
05405 128E                        00            .byte	0
05406                                           ! 959  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05407 128F                        1C            .byte	$1C
05408 1290                        0C            .byte	$C
05409 1291                        0C            .byte	$C
05410 1292                        7C            .byte	$7C
05411 1293                        CC            .byte	$CC
05412 1294                        CC            .byte	$CC
05413 1295                        76            .byte	$76
05414 1296                        00            .byte	0
05415                                           ! 960  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05416 1297                        00            .byte	0
05417 1298                        00            .byte	0
05418 1299                        78            .byte	$78
05419 129A                        CC            .byte	$CC
05420 129B                        FC            .byte	$FC
05421 129C                        C0            .byte	$C0
05422 129D                        78            .byte	$78
05423 129E                        00            .byte	0
05424                                           ! 961  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05425 129F                        38            .byte	$38
05426 12A0                        6C            .byte	$6C
05427 12A1                        60            .byte	$60
05428 12A2                        F0            .byte	$F0
05429 12A3                        60            .byte	$60
05430 12A4                        60            .byte	$60
05431 12A5                        F0            .byte	$F0
05432 12A6                        00            .byte	0
05433                                           ! 962  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05434 12A7                        00            .byte	0
05435 12A8                        00            .byte	0
05436 12A9                        76            .byte	$76
05437 12AA                        CC            .byte	$CC
05438 12AB                        CC            .byte	$CC
05439 12AC                        7C            .byte	$7C
05440 12AD                        0C            .byte	$C
05441 12AE                        F8            .byte	$F8
05442                                           ! 963  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05443 12AF                        E0            .byte	$E0
05444 12B0                        60            .byte	$60
05445 12B1                        6C            .byte	$6C
05446 12B2                        76            .byte	$76
05447 12B3                        66            .byte	$66
05448 12B4                        66            .byte	$66
05449 12B5                        E6            .byte	$E6
05450 12B6                        00            .byte	0
05451                                           ! 964  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05452 12B7                        30            .byte	$30
05453 12B8                        00            .byte	0
05454 12B9                        70            .byte	$70
05455 12BA                        30            .byte	$30
05456 12BB                        30            .byte	$30
05457 12BC                        30            .byte	$30
05458 12BD                        78            .byte	$78
05459 12BE                        00            .byte	0
05460                                           ! 965  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05461 12BF                        0C            .byte	$C
05462 12C0                        00            .byte	0
05463 12C1                        0C            .byte	$C
05464 12C2                        0C            .byte	$C
05465 12C3                        0C            .byte	$C
05466 12C4                        CC            .byte	$CC
05467 12C5                        CC            .byte	$CC
05468 12C6                        78            .byte	$78
05469                                           ! 966  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05470 12C7                        E0            .byte	$E0
05471 12C8                        60            .byte	$60
05472 12C9                        66            .byte	$66
05473 12CA                        6C            .byte	$6C
05474 12CB                        78            .byte	$78
05475 12CC                        6C            .byte	$6C
05476 12CD                        E6            .byte	$E6
05477 12CE                        00            .byte	0
05478                                           ! 967  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05479 12CF                        70            .byte	$70
05480 12D0                        30            .byte	$30
05481 12D1                        30            .byte	$30
05482 12D2                        30            .byte	$30
05483 12D3                        30            .byte	$30
05484 12D4                        30            .byte	$30
05485 12D5                        78            .byte	$78
05486 12D6                        00            .byte	0
05487                                           ! 968  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05488 12D7                        00            .byte	0
05489 12D8                        00            .byte	0
05490 12D9                        CC            .byte	$CC
05491 12DA                        FE            .byte	$FE
05492 12DB                        FE            .byte	$FE
05493 12DC                        D6            .byte	$D6
05494 12DD                        C6            .byte	$C6
05495 12DE                        00            .byte	0
05496                                           ! 969  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05497 12DF                        00            .byte	0
05498 12E0                        00            .byte	0
05499 12E1                        F8            .byte	$F8
05500 12E2                        CC            .byte	$CC
05501 12E3                        CC            .byte	$CC
05502 12E4                        CC            .byte	$CC
05503 12E5                        CC            .byte	$CC
05504 12E6                        00            .byte	0
05505                                           ! 970  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05506 12E7                        00            .byte	0
05507 12E8                        00            .byte	0
05508 12E9                        78            .byte	$78
05509 12EA                        CC            .byte	$CC
05510 12EB                        CC            .byte	$CC
05511 12EC                        CC            .byte	$CC
05512 12ED                        78            .byte	$78
05513 12EE                        00            .byte	0
05514                                           ! 971  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05515 12EF                        00            .byte	0
05516 12F0                        00            .byte	0
05517 12F1                        DC            .byte	$DC
05518 12F2                        66            .byte	$66
05519 12F3                        66            .byte	$66
05520 12F4                        7C            .byte	$7C
05521 12F5                        60            .byte	$60
05522 12F6                        F0            .byte	$F0
05523                                           ! 972  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05524 12F7                        00            .byte	0
05525 12F8                        00            .byte	0
05526 12F9                        76            .byte	$76
05527 12FA                        CC            .byte	$CC
05528 12FB                        CC            .byte	$CC
05529 12FC                        7C            .byte	$7C
05530 12FD                        0C            .byte	$C
05531 12FE                        1E            .byte	$1E
05532                                           ! 973  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05533 12FF                        00            .byte	0
05534 1300                        00            .byte	0
05535 1301                        DC            .byte	$DC
05536 1302                        76            .byte	$76
05537 1303                        66            .byte	$66
05538 1304                        60            .byte	$60
05539 1305                        F0            .byte	$F0
05540 1306                        00            .byte	0
05541                                           ! 974  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05542 1307                        00            .byte	0
05543 1308                        00            .byte	0
05544 1309                        7C            .byte	$7C
05545 130A                        C0            .byte	$C0
05546 130B                        78            .byte	$78
05547 130C                        0C            .byte	$C
05548 130D                        F8            .byte	$F8
05549 130E                        00            .byte	0
05550                                           ! 975  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05551 130F                        10            .byte	$10
05552 1310                        30            .byte	$30
05553 1311                        7C            .byte	$7C
05554 1312                        30            .byte	$30
05555 1313                        30            .byte	$30
05556 1314                        34            .byte	$34
05557 1315                        18            .byte	$18
05558 1316                        00            .byte	0
05559                                           ! 976  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05560 1317                        00            .byte	0
05561 1318                        00            .byte	0
05562 1319                        CC            .byte	$CC
05563 131A                        CC            .byte	$CC
05564 131B                        CC            .byte	$CC
05565 131C                        CC            .byte	$CC
05566 131D                        76            .byte	$76
05567 131E                        00            .byte	0
05568                                           ! 977  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05569 131F                        00            .byte	0
05570 1320                        00            .byte	0
05571 1321                        CC            .byte	$CC
05572 1322                        CC            .byte	$CC
05573 1323                        CC            .byte	$CC
05574 1324                        78            .byte	$78
05575 1325                        30            .byte	$30
05576 1326                        00            .byte	0
05577                                           ! 978  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05578 1327                        00            .byte	0
05579 1328                        00            .byte	0
05580 1329                        C6            .byte	$C6
05581 132A                        D6            .byte	$D6
05582 132B                        FE            .byte	$FE
05583 132C                        FE            .byte	$FE
05584 132D                        6C            .byte	$6C
05585 132E                        00            .byte	0
05586                                           ! 979  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05587 132F                        00            .byte	0
05588 1330                        00            .byte	0
05589 1331                        C6            .byte	$C6
05590 1332                        6C            .byte	$6C
05591 1333                        38            .byte	$38
05592 1334                        6C            .byte	$6C
05593 1335                        C6            .byte	$C6
05594 1336                        00            .byte	0
05595                                           ! 980  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05596 1337                        00            .byte	0
05597 1338                        00            .byte	0
05598 1339                        CC            .byte	$CC
05599 133A                        CC            .byte	$CC
05600 133B                        CC            .byte	$CC
05601 133C                        7C            .byte	$7C
05602 133D                        0C            .byte	$C
05603 133E                        F8            .byte	$F8
05604                                           ! 981  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05605 133F                        00            .byte	0
05606 1340                        00            .byte	0
05607 1341                        FC            .byte	$FC
05608 1342                        98            .byte	$98
05609 1343                        30            .byte	$30
05610 1344                        64            .byte	$64
05611 1345                        FC            .byte	$FC
05612 1346                        00            .byte	0
05613                                           ! 982  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05614 1347                        1C            .byte	$1C
05615 1348                        30            .byte	$30
05616 1349                        30            .byte	$30
05617 134A                        E0            .byte	$E0
05618 134B                        30            .byte	$30
05619 134C                        30            .byte	$30
05620 134D                        1C            .byte	$1C
05621 134E                        00            .byte	0
05622                                           ! 983  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05623 134F                        18            .byte	$18
05624 1350                        18            .byte	$18
05625 1351                        18            .byte	$18
05626 1352                        00            .byte	0
05627 1353                        18            .byte	$18
05628 1354                        18            .byte	$18
05629 1355                        18            .byte	$18
05630 1356                        00            .byte	0
05631                                           ! 984  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05632 1357                        E0            .byte	$E0
05633 1358                        30            .byte	$30
05634 1359                        30            .byte	$30
05635 135A                        1C            .byte	$1C
05636 135B                        30            .byte	$30
05637 135C                        30            .byte	$30
05638 135D                        E0            .byte	$E0
05639 135E                        00            .byte	0
05640                                           ! 985  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05641 135F                        76            .byte	$76
05642 1360                        DC            .byte	$DC
05643 1361                        00            .byte	0
05644 1362                        00            .byte	0
05645 1363                        00            .byte	0
05646 1364                        00            .byte	0
05647 1365                        00            .byte	0
05648 1366                        00            .byte	0
05649                                           ! 986  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05650 1367                        00            .byte	0
05651 1368                        10            .byte	$10
05652 1369                        38            .byte	$38
05653 136A                        6C            .byte	$6C
05654 136B                        C6            .byte	$C6
05655 136C                        C6            .byte	$C6
05656 136D                        FE            .byte	$FE
05657 136E                        00            .byte	0
05658                                           ! 987  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05659 136F                        78            .byte	$78
05660 1370                        CC            .byte	$CC
05661 1371                        C0            .byte	$C0
05662 1372                        CC            .byte	$CC
05663 1373                        78            .byte	$78
05664 1374                        18            .byte	$18
05665 1375                        0C            .byte	$C
05666 1376                        78            .byte	$78
05667                                           ! 988  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05668 1377                        00            .byte	0
05669 1378                        CC            .byte	$CC
05670 1379                        00            .byte	0
05671 137A                        CC            .byte	$CC
05672 137B                        CC            .byte	$CC
05673 137C                        CC            .byte	$CC
05674 137D                        7E            .byte	$7E
05675 137E                        00            .byte	0
05676                                           ! 989  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05677 137F                        1C            .byte	$1C
05678 1380                        00            .byte	0
05679 1381                        78            .byte	$78
05680 1382                        CC            .byte	$CC
05681 1383                        FC            .byte	$FC
05682 1384                        C0            .byte	$C0
05683 1385                        78            .byte	$78
05684 1386                        00            .byte	0
05685                                           ! 990  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05686 1387                        7E            .byte	$7E
05687 1388                        C3            .byte	$C3
05688 1389                        3C            .byte	$3C
05689 138A                        06            .byte	6
05690 138B                        3E            .byte	$3E
05691 138C                        66            .byte	$66
05692 138D                        3F            .byte	$3F
05693 138E                        00            .byte	0
05694                                           ! 991  0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05695 138F                        CC            .byte	$CC
05696 1390                        00            .byte	0
05697 1391                        78            .byte	$78
05698 1392                        0C            .byte	$C
05699 1393                        7C            .byte	$7C
05700 1394                        CC            .byte	$CC
05701 1395                        7E            .byte	$7E
05702 1396                        00            .byte	0
05703                                           ! 992  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05704 1397                        E0            .byte	$E0
05705 1398                        00            .byte	0
05706 1399                        78            .byte	$78
05707 139A                        0C            .byte	$C
05708 139B                        7C            .byte	$7C
05709 139C                        CC            .byte	$CC
05710 139D                        7E            .byte	$7E
05711 139E                        00            .byte	0
05712                                           ! 993  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05713 139F                        30            .byte	$30
05714 13A0                        30            .byte	$30
05715 13A1                        78            .byte	$78
05716 13A2                        0C            .byte	$C
05717 13A3                        7C            .byte	$7C
05718 13A4                        CC            .byte	$CC
05719 13A5                        7E            .byte	$7E
05720 13A6                        00            .byte	0
05721                                           ! 994  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05722 13A7                        00            .byte	0
05723 13A8                        00            .byte	0
05724 13A9                        78            .byte	$78
05725 13AA                        C0            .byte	$C0
05726 13AB                        C0            .byte	$C0
05727 13AC                        78            .byte	$78
05728 13AD                        0C            .byte	$C
05729 13AE                        38            .byte	$38
05730                                           ! 995  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05731 13AF                        7E            .byte	$7E
05732 13B0                        C3            .byte	$C3
05733 13B1                        3C            .byte	$3C
05734 13B2                        66            .byte	$66
05735 13B3                        7E            .byte	$7E
05736 13B4                        60            .byte	$60
05737 13B5                        3C            .byte	$3C
05738 13B6                        00            .byte	0
05739                                           ! 996  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05740 13B7                        CC            .byte	$CC
05741 13B8                        00            .byte	0
05742 13B9                        78            .byte	$78
05743 13BA                        CC            .byte	$CC
05744 13BB                        FC            .byte	$FC
05745 13BC                        C0            .byte	$C0
05746 13BD                        78            .byte	$78
05747 13BE                        00            .byte	0
05748                                           ! 997  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05749 13BF                        E0            .byte	$E0
05750 13C0                        00            .byte	0
05751 13C1                        78            .byte	$78
05752 13C2                        CC            .byte	$CC
05753 13C3                        FC            .byte	$FC
05754 13C4                        C0            .byte	$C0
05755 13C5                        78            .byte	$78
05756 13C6                        00            .byte	0
05757                                           ! 998  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78,
05758 13C7                        CC            .byte	$CC
05759 13C8                        00            .byte	0
05760 13C9                        70            .byte	$70
05761 13CA                        30            .byte	$30
05762 13CB                        30            .byte	$30
05763 13CC                        30            .byte	$30
05764                                           ! 998  0x00,
05765 13CD                        78            .byte	$78
05766 13CE                        00            .byte	0
05767                                           ! 999  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05768 13CF                        7C            .byte	$7C
05769 13D0                        C6            .byte	$C6
05770 13D1                        38            .byte	$38
05771 13D2                        18            .byte	$18
05772 13D3                        18            .byte	$18
05773 13D4                        18            .byte	$18
05774 13D5                        3C            .byte	$3C
05775 13D6                        00            .byte	0
05776                                           ! 1000  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05777 13D7                        E0            .byte	$E0
05778 13D8                        00            .byte	0
05779 13D9                        70            .byte	$70
05780 13DA                        30            .byte	$30
05781 13DB                        30            .byte	$30
05782 13DC                        30            .byte	$30
05783 13DD                        78            .byte	$78
05784 13DE                        00            .byte	0
05785                                           ! 1001  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05786 13DF                        C6            .byte	$C6
05787 13E0                        38            .byte	$38
05788 13E1                        6C            .byte	$6C
05789 13E2                        C6            .byte	$C6
05790 13E3                        FE            .byte	$FE
05791 13E4                        C6            .byte	$C6
05792 13E5                        C6            .byte	$C6
05793 13E6                        00            .byte	0
05794                                           ! 1002  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05795 13E7                        30            .byte	$30
05796 13E8                        30            .byte	$30
05797 13E9                        00            .byte	0
05798 13EA                        78            .byte	$78
05799 13EB                        CC            .byte	$CC
05800 13EC                        FC            .byte	$FC
05801 13ED                        CC            .byte	$CC
05802 13EE                        00            .byte	0
05803                                           ! 1003  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05804 13EF                        1C            .byte	$1C
05805 13F0                        00            .byte	0
05806 13F1                        FC            .byte	$FC
05807 13F2                        60            .byte	$60
05808 13F3                        78            .byte	$78
05809 13F4                        60            .byte	$60
05810 13F5                        FC            .byte	$FC
05811 13F6                        00            .byte	0
05812                                           ! 1004  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05813 13F7                        00            .byte	0
05814 13F8                        00            .byte	0
05815 13F9                        7F            .byte	$7F
05816 13FA                        0C            .byte	$C
05817 13FB                        7F            .byte	$7F
05818 13FC                        CC            .byte	$CC
05819 13FD                        7F            .byte	$7F
05820 13FE                        00            .byte	0
05821                                           ! 1005  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05822 13FF                        3E            .byte	$3E
05823 1400                        6C            .byte	$6C
05824 1401                        CC            .byte	$CC
05825 1402                        FE            .byte	$FE
05826 1403                        CC            .byte	$CC
05827 1404                        CC            .byte	$CC
05828 1405                        CE            .byte	$CE
05829 1406                        00            .byte	0
05830                                           ! 1006  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05831 1407                        78            .byte	$78
05832 1408                        CC            .byte	$CC
05833 1409                        00            .byte	0
05834 140A                        78            .byte	$78
05835 140B                        CC            .byte	$CC
05836 140C                        CC            .byte	$CC
05837 140D                        78            .byte	$78
05838 140E                        00            .byte	0
05839                                           ! 1007  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05840 140F                        00            .byte	0
05841 1410                        CC            .byte	$CC
05842 1411                        00            .byte	0
05843 1412                        78            .byte	$78
05844 1413                        CC            .byte	$CC
05845 1414                        CC            .byte	$CC
05846 1415                        78            .byte	$78
05847 1416                        00            .byte	0
05848                                           ! 1008  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05849 1417                        00            .byte	0
05850 1418                        E0            .byte	$E0
05851 1419                        00            .byte	0
05852 141A                        78            .byte	$78
05853 141B                        CC            .byte	$CC
05854 141C                        CC            .byte	$CC
05855 141D                        78            .byte	$78
05856 141E                        00            .byte	0
05857                                           ! 1009  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05858 141F                        78            .byte	$78
05859 1420                        CC            .byte	$CC
05860 1421                        00            .byte	0
05861 1422                        CC            .byte	$CC
05862 1423                        CC            .byte	$CC
05863 1424                        CC            .byte	$CC
05864 1425                        7E            .byte	$7E
05865 1426                        00            .byte	0
05866                                           ! 1010  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05867 1427                        00            .byte	0
05868 1428                        E0            .byte	$E0
05869 1429                        00            .byte	0
05870 142A                        CC            .byte	$CC
05871 142B                        CC            .byte	$CC
05872 142C                        CC            .byte	$CC
05873 142D                        7E            .byte	$7E
05874 142E                        00            .byte	0
05875                                           ! 1011  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05876 142F                        00            .byte	0
05877 1430                        CC            .byte	$CC
05878 1431                        00            .byte	0
05879 1432                        CC            .byte	$CC
05880 1433                        CC            .byte	$CC
05881 1434                        7C            .byte	$7C
05882 1435                        0C            .byte	$C
05883 1436                        F8            .byte	$F8
05884                                           ! 1012  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05885 1437                        C3            .byte	$C3
05886 1438                        18            .byte	$18
05887 1439                        3C            .byte	$3C
05888 143A                        66            .byte	$66
05889 143B                        66            .byte	$66
05890 143C                        3C            .byte	$3C
05891 143D                        18            .byte	$18
05892 143E                        00            .byte	0
05893                                           ! 1013  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05894 143F                        CC            .byte	$CC
05895 1440                        00            .byte	0
05896 1441                        CC            .byte	$CC
05897 1442                        CC            .byte	$CC
05898 1443                        CC            .byte	$CC
05899 1444                        CC            .byte	$CC
05900 1445                        78            .byte	$78
05901 1446                        00            .byte	0
05902                                           ! 1014  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05903 1447                        18            .byte	$18
05904 1448                        18            .byte	$18
05905 1449                        7E            .byte	$7E
05906 144A                        C0            .byte	$C0
05907 144B                        C0            .byte	$C0
05908 144C                        7E            .byte	$7E
05909 144D                        18            .byte	$18
05910 144E                        18            .byte	$18
05911                                           ! 1015  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05912 144F                        38            .byte	$38
05913 1450                        6C            .byte	$6C
05914 1451                        64            .byte	$64
05915 1452                        F0            .byte	$F0
05916 1453                        60            .byte	$60
05917 1454                        E6            .byte	$E6
05918 1455                        FC            .byte	$FC
05919 1456                        00            .byte	0
05920                                           ! 1016  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05921 1457                        CC            .byte	$CC
05922 1458                        CC            .byte	$CC
05923 1459                        78            .byte	$78
05924 145A                        FC            .byte	$FC
05925 145B                        30            .byte	$30
05926 145C                        FC            .byte	$FC
05927 145D                        30            .byte	$30
05928 145E                        30            .byte	$30
05929                                           ! 1017  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05930 145F                        F8            .byte	$F8
05931 1460                        CC            .byte	$CC
05932 1461                        CC            .byte	$CC
05933 1462                        FA            .byte	$FA
05934 1463                        C6            .byte	$C6
05935 1464                        CF            .byte	$CF
05936 1465                        C6            .byte	$C6
05937 1466                        C7            .byte	$C7
05938                                           ! 1018  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05939 1467                        0E            .byte	$E
05940 1468                        1B            .byte	$1B
05941 1469                        18            .byte	$18
05942 146A                        3C            .byte	$3C
05943 146B                        18            .byte	$18
05944 146C                        18            .byte	$18
05945 146D                        D8            .byte	$D8
05946 146E                        70            .byte	$70
05947                                           ! 1019  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05948 146F                        1C            .byte	$1C
05949 1470                        00            .byte	0
05950 1471                        78            .byte	$78
05951 1472                        0C            .byte	$C
05952 1473                        7C            .byte	$7C
05953 1474                        CC            .byte	$CC
05954 1475                        7E            .byte	$7E
05955 1476                        00            .byte	0
05956                                           ! 1020  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05957 1477                        38            .byte	$38
05958 1478                        00            .byte	0
05959 1479                        70            .byte	$70
05960 147A                        30            .byte	$30
05961 147B                        30            .byte	$30
05962 147C                        30            .byte	$30
05963 147D                        78            .byte	$78
05964 147E                        00            .byte	0
05965                                           ! 1021  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05966 147F                        00            .byte	0
05967 1480                        1C            .byte	$1C
05968 1481                        00            .byte	0
05969 1482                        78            .byte	$78
05970 1483                        CC            .byte	$CC
05971 1484                        CC            .byte	$CC
05972 1485                        78            .byte	$78
05973 1486                        00            .byte	0
05974                                           ! 1022  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05975 1487                        00            .byte	0
05976 1488                        1C            .byte	$1C
05977 1489                        00            .byte	0
05978 148A                        CC            .byte	$CC
05979 148B                        CC            .byte	$CC
05980 148C                        CC            .byte	$CC
05981 148D                        7E            .byte	$7E
05982 148E                        00            .byte	0
05983                                           ! 1023  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05984 148F                        00            .byte	0
05985 1490                        F8            .byte	$F8
05986 1491                        00            .byte	0
05987 1492                        F8            .byte	$F8
05988 1493                        CC            .byte	$CC
05989 1494                        CC            .byte	$CC
05990 1495                        CC            .byte	$CC
05991 1496                        00            .byte	0
05992                                           ! 1024  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05993 1497                        FC            .byte	$FC
05994 1498                        00            .byte	0
05995 1499                        CC            .byte	$CC
05996 149A                        EC            .byte	$EC
05997 149B                        FC            .byte	$FC
05998 149C                        DC            .byte	$DC
05999 149D                        CC            .byte	$CC
06000 149E                        00            .byte	0
06001                                           ! 1025  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
06002 149F                        3C            .byte	$3C
06003 14A0                        6C            .byte	$6C
06004 14A1                        6C            .byte	$6C
06005 14A2                        3E            .byte	$3E
06006 14A3                        00            .byte	0
06007 14A4                        7E            .byte	$7E
06008 14A5                        00            .byte	0
06009 14A6                        00            .byte	0
06010                                           ! 1026  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
06011 14A7                        38            .byte	$38
06012 14A8                        6C            .byte	$6C
06013 14A9                        6C            .byte	$6C
06014 14AA                        38            .byte	$38
06015 14AB                        00            .byte	0
06016 14AC                        7C            .byte	$7C
06017 14AD                        00            .byte	0
06018 14AE                        00            .byte	0
06019                                           ! 1027  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
06020 14AF                        30            .byte	$30
06021 14B0                        00            .byte	0
06022 14B1                        30            .byte	$30
06023 14B2                        60            .byte	$60
06024 14B3                        C0            .byte	$C0
06025 14B4                        CC            .byte	$CC
06026 14B5                        78            .byte	$78
06027 14B6                        00            .byte	0
06028                                           ! 1028  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
06029 14B7                        00            .byte	0
06030 14B8                        00            .byte	0
06031 14B9                        00            .byte	0
06032 14BA                        FC            .byte	$FC
06033 14BB                        C0            .byte	$C0
06034 14BC                        C0            .byte	$C0
06035 14BD                        00            .byte	0
06036 14BE                        00            .byte	0
06037                                           ! 1029  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
06038 14BF                        00            .byte	0
06039 14C0                        00            .byte	0
06040 14C1                        00            .byte	0
06041 14C2                        FC            .byte	$FC
06042 14C3                        0C            .byte	$C
06043 14C4                        0C            .byte	$C
06044 14C5                        00            .byte	0
06045 14C6                        00            .byte	0
06046                                           ! 1030  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
06047 14C7                        C3            .byte	$C3
06048 14C8                        C6            .byte	$C6
06049 14C9                        CC            .byte	$CC
06050 14CA                        DE            .byte	$DE
06051 14CB                        33            .byte	$33
06052 14CC                        66            .byte	$66
06053 14CD                        CC            .byte	$CC
06054 14CE                        0F            .byte	$F
06055                                           ! 1031  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
06056 14CF                        C3            .byte	$C3
06057 14D0                        C6            .byte	$C6
06058 14D1                        CC            .byte	$CC
06059 14D2                        DB            .byte	$DB
06060 14D3                        37            .byte	$37
06061 14D4                        6F            .byte	$6F
06062 14D5                        CF            .byte	$CF
06063 14D6                        03            .byte	3
06064                                           ! 1032  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
06065 14D7                        18            .byte	$18
06066 14D8                        18            .byte	$18
06067 14D9                        00            .byte	0
06068 14DA                        18            .byte	$18
06069 14DB                        18            .byte	$18
06070 14DC                        18            .byte	$18
06071 14DD                        18            .byte	$18
06072 14DE                        00            .byte	0
06073                                           ! 1033  0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
06074 14DF                        00            .byte	0
06075 14E0                        33            .byte	$33
06076 14E1                        66            .byte	$66
06077 14E2                        CC            .byte	$CC
06078 14E3                        66            .byte	$66
06079 14E4                        33            .byte	$33
06080 14E5                        00            .byte	0
06081 14E6                        00            .byte	0
06082                                           ! 1034  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
06083 14E7                        00            .byte	0
06084 14E8                        CC            .byte	$CC
06085 14E9                        66            .byte	$66
06086 14EA                        33            .byte	$33
06087 14EB                        66            .byte	$66
06088 14EC                        CC            .byte	$CC
06089 14ED                        00            .byte	0
06090 14EE                        00            .byte	0
06091                                           ! 1035  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
06092 14EF                        22            .byte	$22
06093 14F0                        88            .byte	$88
06094 14F1                        22            .byte	$22
06095 14F2                        88            .byte	$88
06096 14F3                        22            .byte	$22
06097 14F4                        88            .byte	$88
06098 14F5                        22            .byte	$22
06099 14F6                        88            .byte	$88
06100                                           ! 1036  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
06101 14F7                        55            .byte	$55
06102 14F8                        AA            .byte	$AA
06103 14F9                        55            .byte	$55
06104 14FA                        AA            .byte	$AA
06105 14FB                        55            .byte	$55
06106 14FC                        AA            .byte	$AA
06107 14FD                        55            .byte	$55
06108 14FE                        AA            .byte	$AA
06109                                           ! 1037  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
06110 14FF                        DB            .byte	$DB
06111 1500                        77            .byte	$77
06112 1501                        DB            .byte	$DB
06113 1502                        EE            .byte	$EE
06114 1503                        DB            .byte	$DB
06115 1504                        77            .byte	$77
06116 1505                        DB            .byte	$DB
06117 1506                        EE            .byte	$EE
06118                                           ! 1038  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
06119 1507                        18            .byte	$18
06120 1508                        18            .byte	$18
06121 1509                        18            .byte	$18
06122 150A                        18            .byte	$18
06123 150B                        18            .byte	$18
06124 150C                        18            .byte	$18
06125 150D                        18            .byte	$18
06126 150E                        18            .byte	$18
06127                                           ! 1039  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
06128 150F                        18            .byte	$18
06129 1510                        18            .byte	$18
06130 1511                        18            .byte	$18
06131 1512                        18            .byte	$18
06132 1513                        F8            .byte	$F8
06133 1514                        18            .byte	$18
06134 1515                        18            .byte	$18
06135 1516                        18            .byte	$18
06136                                           ! 1040  0x18, 0x18, 0xf8, 0x18, 0xf8, 0
06137 1517                        18            .byte	$18
06138 1518                        18            .byte	$18
06139 1519                        F8            .byte	$F8
06140 151A                        18            .byte	$18
06141 151B                        F8            .byte	$F8
06142                                           ! 1040 x18, 0x18, 0x18,
06143 151C                        18            .byte	$18
06144 151D                        18            .byte	$18
06145 151E                        18            .byte	$18
06146                                           ! 1041  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
06147 151F                        36            .byte	$36
06148 1520                        36            .byte	$36
06149 1521                        36            .byte	$36
06150 1522                        36            .byte	$36
06151 1523                        F6            .byte	$F6
06152 1524                        36            .byte	$36
06153 1525                        36            .byte	$36
06154 1526                        36            .byte	$36
06155                                           ! 1042  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
06156 1527                        00            .byte	0
06157 1528                        00            .byte	0
06158 1529                        00            .byte	0
06159 152A                        00            .byte	0
06160 152B                        FE            .byte	$FE
06161 152C                        36            .byte	$36
06162 152D                        36            .byte	$36
06163 152E                        36            .byte	$36
06164                                           ! 1043  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
06165 152F                        00            .byte	0
06166 1530                        00            .byte	0
06167 1531                        F8            .byte	$F8
06168 1532                        18            .byte	$18
06169 1533                        F8            .byte	$F8
06170 1534                        18            .byte	$18
06171 1535                        18            .byte	$18
06172 1536                        18            .byte	$18
06173                                           ! 1044  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
06174 1537                        36            .byte	$36
06175 1538                        36            .byte	$36
06176 1539                        F6            .byte	$F6
06177 153A                        06            .byte	6
06178 153B                        F6            .byte	$F6
06179 153C                        36            .byte	$36
06180 153D                        36            .byte	$36
06181 153E                        36            .byte	$36
06182                                           ! 1045  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
06183 153F                        36            .byte	$36
06184 1540                        36            .byte	$36
06185 1541                        36            .byte	$36
06186 1542                        36            .byte	$36
06187 1543                        36            .byte	$36
06188 1544                        36            .byte	$36
06189 1545                        36            .byte	$36
06190 1546                        36            .byte	$36
06191                                           ! 1046  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
06192 1547                        00            .byte	0
06193 1548                        00            .byte	0
06194 1549                        FE            .byte	$FE
06195 154A                        06            .byte	6
06196 154B                        F6            .byte	$F6
06197 154C                        36            .byte	$36
06198 154D                        36            .byte	$36
06199 154E                        36            .byte	$36
06200                                           ! 1047  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
06201 154F                        36            .byte	$36
06202 1550                        36            .byte	$36
06203 1551                        F6            .byte	$F6
06204 1552                        06            .byte	6
06205 1553                        FE            .byte	$FE
06206 1554                        00            .byte	0
06207 1555                        00            .byte	0
06208 1556                        00            .byte	0
06209                                           ! 1048  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
06210 1557                        36            .byte	$36
06211 1558                        36            .byte	$36
06212 1559                        36            .byte	$36
06213 155A                        36            .byte	$36
06214 155B                        FE            .byte	$FE
06215 155C                        00            .byte	0
06216 155D                        00            .byte	0
06217 155E                        00            .byte	0
06218                                           ! 1049  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
06219 155F                        18            .byte	$18
06220 1560                        18            .byte	$18
06221 1561                        F8            .byte	$F8
06222 1562                        18            .byte	$18
06223 1563                        F8            .byte	$F8
06224 1564                        00            .byte	0
06225 1565                        00            .byte	0
06226 1566                        00            .byte	0
06227                                           ! 1050  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
06228 1567                        00            .byte	0
06229 1568                        00            .byte	0
06230 1569                        00            .byte	0
06231 156A                        00            .byte	0
06232 156B                        F8            .byte	$F8
06233 156C                        18            .byte	$18
06234 156D                        18            .byte	$18
06235 156E                        18            .byte	$18
06236                                           ! 1051  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
06237 156F                        18            .byte	$18
06238 1570                        18            .byte	$18
06239 1571                        18            .byte	$18
06240 1572                        18            .byte	$18
06241 1573                        1F            .byte	$1F
06242 1574                        00            .byte	0
06243 1575                        00            .byte	0
06244 1576                        00            .byte	0
06245                                           ! 1052  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
06246 1577                        18            .byte	$18
06247 1578                        18            .byte	$18
06248 1579                        18            .byte	$18
06249 157A                        18            .byte	$18
06250 157B                        FF            .byte	$FF
06251 157C                        00            .byte	0
06252 157D                        00            .byte	0
06253 157E                        00            .byte	0
06254                                           ! 1053  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06255 157F                        00            .byte	0
06256 1580                        00            .byte	0
06257 1581                        00            .byte	0
06258 1582                        00            .byte	0
06259 1583                        FF            .byte	$FF
06260 1584                        18            .byte	$18
06261 1585                        18            .byte	$18
06262 1586                        18            .byte	$18
06263                                           ! 1054  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06264 1587                        18            .byte	$18
06265 1588                        18            .byte	$18
06266 1589                        18            .byte	$18
06267 158A                        18            .byte	$18
06268 158B                        1F            .byte	$1F
06269 158C                        18            .byte	$18
06270 158D                        18            .byte	$18
06271 158E                        18            .byte	$18
06272                                           ! 1055  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06273 158F                        00            .byte	0
06274 1590                        00            .byte	0
06275 1591                        00            .byte	0
06276 1592                        00            .byte	0
06277 1593                        FF            .byte	$FF
06278 1594                        00            .byte	0
06279 1595                        00            .byte	0
06280 1596                        00            .byte	0
06281                                           ! 1056  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06282 1597                        18            .byte	$18
06283 1598                        18            .byte	$18
06284 1599                        18            .byte	$18
06285 159A                        18            .byte	$18
06286 159B                        FF            .byte	$FF
06287 159C                        18            .byte	$18
06288 159D                        18            .byte	$18
06289 159E                        18            .byte	$18
06290                                           ! 1057  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06291 159F                        18            .byte	$18
06292 15A0                        18            .byte	$18
06293 15A1                        1F            .byte	$1F
06294 15A2                        18            .byte	$18
06295 15A3                        1F            .byte	$1F
06296 15A4                        18            .byte	$18
06297 15A5                        18            .byte	$18
06298 15A6                        18            .byte	$18
06299                                           ! 1058  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06300 15A7                        36            .byte	$36
06301 15A8                        36            .byte	$36
06302 15A9                        36            .byte	$36
06303 15AA                        36            .byte	$36
06304 15AB                        37            .byte	$37
06305 15AC                        36            .byte	$36
06306 15AD                        36            .byte	$36
06307 15AE                        36            .byte	$36
06308                                           ! 1059  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06309 15AF                        36            .byte	$36
06310 15B0                        36            .byte	$36
06311 15B1                        37            .byte	$37
06312 15B2                        30            .byte	$30
06313 15B3                        3F            .byte	$3F
06314 15B4                        00            .byte	0
06315 15B5                        00            .byte	0
06316 15B6                        00            .byte	0
06317                                           ! 1060  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06318 15B7                        00            .byte	0
06319 15B8                        00            .byte	0
06320 15B9                        3F            .byte	$3F
06321 15BA                        30            .byte	$30
06322 15BB                        37            .byte	$37
06323 15BC                        36            .byte	$36
06324 15BD                        36            .byte	$36
06325 15BE                        36            .byte	$36
06326                                           ! 1061  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06327 15BF                        36            .byte	$36
06328 15C0                        36            .byte	$36
06329 15C1                        F7            .byte	$F7
06330 15C2                        00            .byte	0
06331 15C3                        FF            .byte	$FF
06332 15C4                        00            .byte	0
06333 15C5                        00            .byte	0
06334 15C6                        00            .byte	0
06335                                           ! 1062  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06336 15C7                        00            .byte	0
06337 15C8                        00            .byte	0
06338 15C9                        FF            .byte	$FF
06339 15CA                        00            .byte	0
06340 15CB                        F7            .byte	$F7
06341 15CC                        36            .byte	$36
06342 15CD                        36            .byte	$36
06343 15CE                        36            .byte	$36
06344                                           ! 1063  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06345 15CF                        36            .byte	$36
06346 15D0                        36            .byte	$36
06347 15D1                        37            .byte	$37
06348 15D2                        30            .byte	$30
06349 15D3                        37            .byte	$37
06350 15D4                        36            .byte	$36
06351 15D5                        36            .byte	$36
06352 15D6                        36            .byte	$36
06353                                           ! 1064  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06354 15D7                        00            .byte	0
06355 15D8                        00            .byte	0
06356 15D9                        FF            .byte	$FF
06357 15DA                        00            .byte	0
06358 15DB                        FF            .byte	$FF
06359 15DC                        00            .byte	0
06360 15DD                        00            .byte	0
06361 15DE                        00            .byte	0
06362                                           ! 1065  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06363 15DF                        36            .byte	$36
06364 15E0                        36            .byte	$36
06365 15E1                        F7            .byte	$F7
06366 15E2                        00            .byte	0
06367 15E3                        F7            .byte	$F7
06368 15E4                        36            .byte	$36
06369 15E5                        36            .byte	$36
06370 15E6                        36            .byte	$36
06371                                           ! 1066  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06372 15E7                        18            .byte	$18
06373 15E8                        18            .byte	$18
06374 15E9                        FF            .byte	$FF
06375 15EA                        00            .byte	0
06376 15EB                        FF            .byte	$FF
06377 15EC                        00            .byte	0
06378 15ED                        00            .byte	0
06379 15EE                        00            .byte	0
06380                                           ! 1067  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06381 15EF                        36            .byte	$36
06382 15F0                        36            .byte	$36
06383 15F1                        36            .byte	$36
06384 15F2                        36            .byte	$36
06385 15F3                        FF            .byte	$FF
06386 15F4                        00            .byte	0
06387 15F5                        00            .byte	0
06388 15F6                        00            .byte	0
06389                                           ! 1068  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06390 15F7                        00            .byte	0
06391 15F8                        00            .byte	0
06392 15F9                        FF            .byte	$FF
06393 15FA                        00            .byte	0
06394 15FB                        FF            .byte	$FF
06395 15FC                        18            .byte	$18
06396 15FD                        18            .byte	$18
06397 15FE                        18            .byte	$18
06398                                           ! 1069  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06399 15FF                        00            .byte	0
06400 1600                        00            .byte	0
06401 1601                        00            .byte	0
06402 1602                        00            .byte	0
06403 1603                        FF            .byte	$FF
06404 1604                        36            .byte	$36
06405 1605                        36            .byte	$36
06406 1606                        36            .byte	$36
06407                                           ! 1070  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06408 1607                        36            .byte	$36
06409 1608                        36            .byte	$36
06410 1609                        36            .byte	$36
06411 160A                        36            .byte	$36
06412 160B                        3F            .byte	$3F
06413 160C                        00            .byte	0
06414 160D                        00            .byte	0
06415 160E                        00            .byte	0
06416                                           ! 1071  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06417 160F                        18            .byte	$18
06418 1610                        18            .byte	$18
06419 1611                        1F            .byte	$1F
06420 1612                        18            .byte	$18
06421 1613                        1F            .byte	$1F
06422 1614                        00            .byte	0
06423 1615                        00            .byte	0
06424 1616                        00            .byte	0
06425                                           ! 1072  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06426 1617                        00            .byte	0
06427 1618                        00            .byte	0
06428 1619                        1F            .byte	$1F
06429 161A                        18            .byte	$18
06430 161B                        1F            .byte	$1F
06431 161C                        18            .byte	$18
06432 161D                        18            .byte	$18
06433 161E                        18            .byte	$18
06434                                           ! 1073  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06435 161F                        00            .byte	0
06436 1620                        00            .byte	0
06437 1621                        00            .byte	0
06438 1622                        00            .byte	0
06439 1623                        3F            .byte	$3F
06440 1624                        36            .byte	$36
06441 1625                        36            .byte	$36
06442 1626                        36            .byte	$36
06443                                           ! 1074  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36,
06444 1627                        36            .byte	$36
06445 1628                        36            .byte	$36
06446 1629                        36            .byte	$36
06447 162A                        36            .byte	$36
06448 162B                        FF            .byte	$FF
06449 162C                        36            .byte	$36
06450 162D                        36            .byte	$36
06451 162E                        36            .byte	$36
06452                                           ! 1075  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06453 162F                        18            .byte	$18
06454 1630                        18            .byte	$18
06455 1631                        FF            .byte	$FF
06456 1632                        18            .byte	$18
06457 1633                        FF            .byte	$FF
06458 1634                        18            .byte	$18
06459 1635                        18            .byte	$18
06460 1636                        18            .byte	$18
06461                                           ! 1076  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06462 1637                        18            .byte	$18
06463 1638                        18            .byte	$18
06464 1639                        18            .byte	$18
06465 163A                        18            .byte	$18
06466 163B                        F8            .byte	$F8
06467 163C                        00            .byte	0
06468 163D                        00            .byte	0
06469 163E                        00            .byte	0
06470                                           ! 1077  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06471 163F                        00            .byte	0
06472 1640                        00            .byte	0
06473 1641                        00            .byte	0
06474 1642                        00            .byte	0
06475 1643                        1F            .byte	$1F
06476 1644                        18            .byte	$18
06477 1645                        18            .byte	$18
06478 1646                        18            .byte	$18
06479                                           ! 1078  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06480 1647                        FF            .byte	$FF
06481 1648                        FF            .byte	$FF
06482 1649                        FF            .byte	$FF
06483 164A                        FF            .byte	$FF
06484 164B                        FF            .byte	$FF
06485 164C                        FF            .byte	$FF
06486 164D                        FF            .byte	$FF
06487 164E                        FF            .byte	$FF
06488                                           ! 1079  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06489 164F                        00            .byte	0
06490 1650                        00            .byte	0
06491 1651                        00            .byte	0
06492 1652                        00            .byte	0
06493 1653                        FF            .byte	$FF
06494 1654                        FF            .byte	$FF
06495 1655                        FF            .byte	$FF
06496 1656                        FF            .byte	$FF
06497                                           ! 1080  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06498 1657                        F0            .byte	$F0
06499 1658                        F0            .byte	$F0
06500 1659                        F0            .byte	$F0
06501 165A                        F0            .byte	$F0
06502 165B                        F0            .byte	$F0
06503 165C                        F0            .byte	$F0
06504 165D                        F0            .byte	$F0
06505 165E                        F0            .byte	$F0
06506                                           ! 1081  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06507 165F                        0F            .byte	$F
06508 1660                        0F            .byte	$F
06509 1661                        0F            .byte	$F
06510 1662                        0F            .byte	$F
06511 1663                        0F            .byte	$F
06512 1664                        0F            .byte	$F
06513 1665                        0F            .byte	$F
06514 1666                        0F            .byte	$F
06515                                           ! 1082  0xff, 0xff, 0xff, 0xf
06516 1667                        FF            .byte	$FF
06517 1668                        FF            .byte	$FF
06518 1669                        FF            .byte	$FF
06519                                           ! 1082 f, 0x00, 0x00, 0x00, 0x00,
06520 166A                        FF            .byte	$FF
06521 166B                        00            .byte	0
06522 166C                        00            .byte	0
06523 166D                        00            .byte	0
06524 166E                        00            .byte	0
06525                                           ! 1083  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06526 166F                        00            .byte	0
06527 1670                        00            .byte	0
06528 1671                        76            .byte	$76
06529 1672                        DC            .byte	$DC
06530 1673                        C8            .byte	$C8
06531 1674                        DC            .byte	$DC
06532 1675                        76            .byte	$76
06533 1676                        00            .byte	0
06534                                           ! 1084  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06535 1677                        00            .byte	0
06536 1678                        78            .byte	$78
06537 1679                        CC            .byte	$CC
06538 167A                        F8            .byte	$F8
06539 167B                        CC            .byte	$CC
06540 167C                        F8            .byte	$F8
06541 167D                        C0            .byte	$C0
06542 167E                        C0            .byte	$C0
06543                                           ! 1085  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06544 167F                        00            .byte	0
06545 1680                        FC            .byte	$FC
06546 1681                        CC            .byte	$CC
06547 1682                        C0            .byte	$C0
06548 1683                        C0            .byte	$C0
06549 1684                        C0            .byte	$C0
06550 1685                        C0            .byte	$C0
06551 1686                        00            .byte	0
06552                                           ! 1086  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06553 1687                        00            .byte	0
06554 1688                        FE            .byte	$FE
06555 1689                        6C            .byte	$6C
06556 168A                        6C            .byte	$6C
06557 168B                        6C            .byte	$6C
06558 168C                        6C            .byte	$6C
06559 168D                        6C            .byte	$6C
06560 168E                        00            .byte	0
06561                                           ! 1087  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06562 168F                        FC            .byte	$FC
06563 1690                        CC            .byte	$CC
06564 1691                        60            .byte	$60
06565 1692                        30            .byte	$30
06566 1693                        60            .byte	$60
06567 1694                        CC            .byte	$CC
06568 1695                        FC            .byte	$FC
06569 1696                        00            .byte	0
06570                                           ! 1088  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06571 1697                        00            .byte	0
06572 1698                        00            .byte	0
06573 1699                        7E            .byte	$7E
06574 169A                        D8            .byte	$D8
06575 169B                        D8            .byte	$D8
06576 169C                        D8            .byte	$D8
06577 169D                        70            .byte	$70
06578 169E                        00            .byte	0
06579                                           ! 1089  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06580 169F                        00            .byte	0
06581 16A0                        66            .byte	$66
06582 16A1                        66            .byte	$66
06583 16A2                        66            .byte	$66
06584 16A3                        66            .byte	$66
06585 16A4                        7C            .byte	$7C
06586 16A5                        60            .byte	$60
06587 16A6                        C0            .byte	$C0
06588                                           ! 1090  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06589 16A7                        00            .byte	0
06590 16A8                        76            .byte	$76
06591 16A9                        DC            .byte	$DC
06592 16AA                        18            .byte	$18
06593 16AB                        18            .byte	$18
06594 16AC                        18            .byte	$18
06595 16AD                        18            .byte	$18
06596 16AE                        00            .byte	0
06597                                           ! 1091  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06598 16AF                        FC            .byte	$FC
06599 16B0                        30            .byte	$30
06600 16B1                        78            .byte	$78
06601 16B2                        CC            .byte	$CC
06602 16B3                        CC            .byte	$CC
06603 16B4                        78            .byte	$78
06604 16B5                        30            .byte	$30
06605 16B6                        FC            .byte	$FC
06606                                           ! 1092  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06607 16B7                        38            .byte	$38
06608 16B8                        6C            .byte	$6C
06609 16B9                        C6            .byte	$C6
06610 16BA                        FE            .byte	$FE
06611 16BB                        C6            .byte	$C6
06612 16BC                        6C            .byte	$6C
06613 16BD                        38            .byte	$38
06614 16BE                        00            .byte	0
06615                                           ! 1093  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06616 16BF                        38            .byte	$38
06617 16C0                        6C            .byte	$6C
06618 16C1                        C6            .byte	$C6
06619 16C2                        C6            .byte	$C6
06620 16C3                        6C            .byte	$6C
06621 16C4                        6C            .byte	$6C
06622 16C5                        EE            .byte	$EE
06623 16C6                        00            .byte	0
06624                                           ! 1094  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06625 16C7                        1C            .byte	$1C
06626 16C8                        30            .byte	$30
06627 16C9                        18            .byte	$18
06628 16CA                        7C            .byte	$7C
06629 16CB                        CC            .byte	$CC
06630 16CC                        CC            .byte	$CC
06631 16CD                        78            .byte	$78
06632 16CE                        00            .byte	0
06633                                           ! 1095  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06634 16CF                        00            .byte	0
06635 16D0                        00            .byte	0
06636 16D1                        7E            .byte	$7E
06637 16D2                        DB            .byte	$DB
06638 16D3                        DB            .byte	$DB
06639 16D4                        7E            .byte	$7E
06640 16D5                        00            .byte	0
06641 16D6                        00            .byte	0
06642                                           ! 1096  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06643 16D7                        06            .byte	6
06644 16D8                        0C            .byte	$C
06645 16D9                        7E            .byte	$7E
06646 16DA                        DB            .byte	$DB
06647 16DB                        DB            .byte	$DB
06648 16DC                        7E            .byte	$7E
06649 16DD                        60            .byte	$60
06650 16DE                        C0            .byte	$C0
06651                                           ! 1097  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06652 16DF                        38            .byte	$38
06653 16E0                        60            .byte	$60
06654 16E1                        C0            .byte	$C0
06655 16E2                        F8            .byte	$F8
06656 16E3                        C0            .byte	$C0
06657 16E4                        60            .byte	$60
06658 16E5                        38            .byte	$38
06659 16E6                        00            .byte	0
06660                                           ! 1098  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06661 16E7                        78            .byte	$78
06662 16E8                        CC            .byte	$CC
06663 16E9                        CC            .byte	$CC
06664 16EA                        CC            .byte	$CC
06665 16EB                        CC            .byte	$CC
06666 16EC                        CC            .byte	$CC
06667 16ED                        CC            .byte	$CC
06668 16EE                        00            .byte	0
06669                                           ! 1099  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06670 16EF                        00            .byte	0
06671 16F0                        FC            .byte	$FC
06672 16F1                        00            .byte	0
06673 16F2                        FC            .byte	$FC
06674 16F3                        00            .byte	0
06675 16F4                        FC            .byte	$FC
06676 16F5                        00            .byte	0
06677 16F6                        00            .byte	0
06678                                           ! 1100  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06679 16F7                        30            .byte	$30
06680 16F8                        30            .byte	$30
06681 16F9                        FC            .byte	$FC
06682 16FA                        30            .byte	$30
06683 16FB                        30            .byte	$30
06684 16FC                        00            .byte	0
06685 16FD                        FC            .byte	$FC
06686 16FE                        00            .byte	0
06687                                           ! 1101  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06688 16FF                        60            .byte	$60
06689 1700                        30            .byte	$30
06690 1701                        18            .byte	$18
06691 1702                        30            .byte	$30
06692 1703                        60            .byte	$60
06693 1704                        00            .byte	0
06694 1705                        FC            .byte	$FC
06695 1706                        00            .byte	0
06696                                           ! 1102  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06697 1707                        18            .byte	$18
06698 1708                        30            .byte	$30
06699 1709                        60            .byte	$60
06700 170A                        30            .byte	$30
06701 170B                        18            .byte	$18
06702 170C                        00            .byte	0
06703 170D                        FC            .byte	$FC
06704 170E                        00            .byte	0
06705                                           ! 1103  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06706 170F                        0E            .byte	$E
06707 1710                        1B            .byte	$1B
06708 1711                        1B            .byte	$1B
06709 1712                        18            .byte	$18
06710 1713                        18            .byte	$18
06711 1714                        18            .byte	$18
06712 1715                        18            .byte	$18
06713 1716                        18            .byte	$18
06714                                           ! 1104  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06715 1717                        18            .byte	$18
06716 1718                        18            .byte	$18
06717 1719                        18            .byte	$18
06718 171A                        18            .byte	$18
06719 171B                        18            .byte	$18
06720 171C                        D8            .byte	$D8
06721 171D                        D8            .byte	$D8
06722 171E                        70            .byte	$70
06723                                           ! 1105  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06724 171F                        30            .byte	$30
06725 1720                        30            .byte	$30
06726 1721                        00            .byte	0
06727 1722                        FC            .byte	$FC
06728 1723                        00            .byte	0
06729 1724                        30            .byte	$30
06730 1725                        30            .byte	$30
06731 1726                        00            .byte	0
06732                                           ! 1106  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06733 1727                        00            .byte	0
06734 1728                        76            .byte	$76
06735 1729                        DC            .byte	$DC
06736 172A                        00            .byte	0
06737 172B                        76            .byte	$76
06738 172C                        DC            .byte	$DC
06739 172D                        00            .byte	0
06740 172E                        00            .byte	0
06741                                           ! 1107  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06742 172F                        38            .byte	$38
06743 1730                        6C            .byte	$6C
06744 1731                        6C            .byte	$6C
06745 1732                        38            .byte	$38
06746 1733                        00            .byte	0
06747 1734                        00            .byte	0
06748 1735                        00            .byte	0
06749 1736                        00            .byte	0
06750                                           ! 1108  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06751 1737                        00            .byte	0
06752 1738                        00            .byte	0
06753 1739                        00            .byte	0
06754 173A                        18            .byte	$18
06755 173B                        18            .byte	$18
06756 173C                        00            .byte	0
06757 173D                        00            .byte	0
06758 173E                        00            .byte	0
06759                                           ! 1109  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06760 173F                        00            .byte	0
06761 1740                        00            .byte	0
06762 1741                        00            .byte	0
06763 1742                        00            .byte	0
06764 1743                        18            .byte	$18
06765 1744                        00            .byte	0
06766 1745                        00            .byte	0
06767 1746                        00            .byte	0
06768                                           ! 1110  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06769 1747                        0F            .byte	$F
06770 1748                        0C            .byte	$C
06771 1749                        0C            .byte	$C
06772 174A                        0C            .byte	$C
06773 174B                        EC            .byte	$EC
06774 174C                        6C            .byte	$6C
06775 174D                        3C            .byte	$3C
06776 174E                        1C            .byte	$1C
06777                                           ! 1111  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06778 174F                        78            .byte	$78
06779 1750                        6C            .byte	$6C
06780 1751                        6C            .byte	$6C
06781 1752                        6C            .byte	$6C
06782 1753                        6C            .byte	$6C
06783 1754                        00            .byte	0
06784 1755                        00            .byte	0
06785 1756                        00            .byte	0
06786                                           ! 1112  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06787 1757                        70            .byte	$70
06788 1758                        18            .byte	$18
06789 1759                        30            .byte	$30
06790 175A                        60            .byte	$60
06791 175B                        78            .byte	$78
06792 175C                        00            .byte	0
06793 175D                        00            .byte	0
06794 175E                        00            .byte	0
06795                                           ! 1113  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06796 175F                        00            .byte	0
06797 1760                        00            .byte	0
06798 1761                        3C            .byte	$3C
06799 1762                        3C            .byte	$3C
06800 1763                        3C            .byte	$3C
06801 1764                        3C            .byte	$3C
06802 1765                        00            .byte	0
06803 1766                        00            .byte	0
06804                                           ! 1114  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06805 1767                        00            .byte	0
06806 1768                        00            .byte	0
06807 1769                        00            .byte	0
06808 176A                        00            .byte	0
06809 176B                        00            .byte	0
06810 176C                        00            .byte	0
06811 176D                        00            .byte	0
06812                                           ! 1115 };
06813 176E                        00            .byte	0
06814                                           !BCC_EOS
06815                                           ! 1116 static Bit8u vgafont14[256*14]=
06816                                           ! 1117 {
06817                       0000176F            _vgafont14:
06818                                           ! 1118  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06819 176F                        00            .byte	0
06820 1770                        00            .byte	0
06821 1771                        00            .byte	0
06822 1772                        00            .byte	0
06823 1773                        00            .byte	0
06824 1774                        00            .byte	0
06825 1775                        00            .byte	0
06826 1776                        00            .byte	0
06827 1777                        00            .byte	0
06828 1778                        00            .byte	0
06829 1779                        00            .byte	0
06830 177A                        00            .byte	0
06831 177B                        00            .byte	0
06832 177C                        00            .byte	0
06833                                           ! 1119  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06834 177D                        00            .byte	0
06835 177E                        00            .byte	0
06836 177F                        7E            .byte	$7E
06837 1780                        81            .byte	$81
06838 1781                        A5            .byte	$A5
06839 1782                        81            .byte	$81
06840 1783                        81            .byte	$81
06841 1784                        BD            .byte	$BD
06842 1785                        99            .byte	$99
06843 1786                        81            .byte	$81
06844 1787                        7E            .byte	$7E
06845 1788                        00            .byte	0
06846 1789                        00            .byte	0
06847 178A                        00            .byte	0
06848                                           ! 1120  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06849 178B                        00            .byte	0
06850 178C                        00            .byte	0
06851 178D                        7E            .byte	$7E
06852 178E                        FF            .byte	$FF
06853 178F                        DB            .byte	$DB
06854 1790                        FF            .byte	$FF
06855 1791                        FF            .byte	$FF
06856 1792                        C3            .byte	$C3
06857 1793                        E7            .byte	$E7
06858 1794                        FF            .byte	$FF
06859 1795                        7E            .byte	$7E
06860 1796                        00            .byte	0
06861 1797                        00            .byte	0
06862 1798                        00            .byte	0
06863                                           ! 1121  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06864 1799                        00            .byte	0
06865 179A                        00            .byte	0
06866 179B                        00            .byte	0
06867 179C                        6C            .byte	$6C
06868 179D                        FE            .byte	$FE
06869 179E                        FE            .byte	$FE
06870 179F                        FE            .byte	$FE
06871 17A0                        FE            .byte	$FE
06872 17A1                        7C            .byte	$7C
06873 17A2                        38            .byte	$38
06874 17A3                        10            .byte	$10
06875 17A4                        00            .byte	0
06876 17A5                        00            .byte	0
06877 17A6                        00            .byte	0
06878                                           ! 1122  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00
06879 17A7                        00            .byte	0
06880 17A8                        00            .byte	0
06881 17A9                        00            .byte	0
06882 17AA                        10            .byte	$10
06883 17AB                        38            .byte	$38
06884 17AC                        7C            .byte	$7C
06885 17AD                        FE            .byte	$FE
06886 17AE                        7C            .byte	$7C
06887 17AF                        38            .byte	$38
06888 17B0                        10            .byte	$10
06889 17B1                        00            .byte	0
06890 17B2                        00            .byte	0
06891                                           ! 1122 , 0x00,
06892 17B3                        00            .byte	0
06893 17B4                        00            .byte	0
06894                                           ! 1123  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06895 17B5                        00            .byte	0
06896 17B6                        00            .byte	0
06897 17B7                        18            .byte	$18
06898 17B8                        3C            .byte	$3C
06899 17B9                        3C            .byte	$3C
06900 17BA                        E7            .byte	$E7
06901 17BB                        E7            .byte	$E7
06902 17BC                        E7            .byte	$E7
06903 17BD                        18            .byte	$18
06904 17BE                        18            .byte	$18
06905 17BF                        3C            .byte	$3C
06906 17C0                        00            .byte	0
06907 17C1                        00            .byte	0
06908 17C2                        00            .byte	0
06909                                           ! 1124  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06910 17C3                        00            .byte	0
06911 17C4                        00            .byte	0
06912 17C5                        18            .byte	$18
06913 17C6                        3C            .byte	$3C
06914 17C7                        7E            .byte	$7E
06915 17C8                        FF            .byte	$FF
06916 17C9                        FF            .byte	$FF
06917 17CA                        7E            .byte	$7E
06918 17CB                        18            .byte	$18
06919 17CC                        18            .byte	$18
06920 17CD                        3C            .byte	$3C
06921 17CE                        00            .byte	0
06922 17CF                        00            .byte	0
06923 17D0                        00            .byte	0
06924                                           ! 1125  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06925 17D1                        00            .byte	0
06926 17D2                        00            .byte	0
06927 17D3                        00            .byte	0
06928 17D4                        00            .byte	0
06929 17D5                        00            .byte	0
06930 17D6                        18            .byte	$18
06931 17D7                        3C            .byte	$3C
06932 17D8                        3C            .byte	$3C
06933 17D9                        18            .byte	$18
06934 17DA                        00            .byte	0
06935 17DB                        00            .byte	0
06936 17DC                        00            .byte	0
06937 17DD                        00            .byte	0
06938 17DE                        00            .byte	0
06939                                           ! 1126  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06940 17DF                        FF            .byte	$FF
06941 17E0                        FF            .byte	$FF
06942 17E1                        FF            .byte	$FF
06943 17E2                        FF            .byte	$FF
06944 17E3                        FF            .byte	$FF
06945 17E4                        E7            .byte	$E7
06946 17E5                        C3            .byte	$C3
06947 17E6                        C3            .byte	$C3
06948 17E7                        E7            .byte	$E7
06949 17E8                        FF            .byte	$FF
06950 17E9                        FF            .byte	$FF
06951 17EA                        FF            .byte	$FF
06952 17EB                        FF            .byte	$FF
06953 17EC                        FF            .byte	$FF
06954                                           ! 1127  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06955 17ED                        00            .byte	0
06956 17EE                        00            .byte	0
06957 17EF                        00            .byte	0
06958 17F0                        00            .byte	0
06959 17F1                        3C            .byte	$3C
06960 17F2                        66            .byte	$66
06961 17F3                        42            .byte	$42
06962 17F4                        42            .byte	$42
06963 17F5                        66            .byte	$66
06964 17F6                        3C            .byte	$3C
06965 17F7                        00            .byte	0
06966 17F8                        00            .byte	0
06967 17F9                        00            .byte	0
06968 17FA                        00            .byte	0
06969                                           ! 1128  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06970 17FB                        FF            .byte	$FF
06971 17FC                        FF            .byte	$FF
06972 17FD                        FF            .byte	$FF
06973 17FE                        FF            .byte	$FF
06974 17FF                        C3            .byte	$C3
06975 1800                        99            .byte	$99
06976 1801                        BD            .byte	$BD
06977 1802                        BD            .byte	$BD
06978 1803                        99            .byte	$99
06979 1804                        C3            .byte	$C3
06980 1805                        FF            .byte	$FF
06981 1806                        FF            .byte	$FF
06982 1807                        FF            .byte	$FF
06983 1808                        FF            .byte	$FF
06984                                           ! 1129  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06985 1809                        00            .byte	0
06986 180A                        00            .byte	0
06987 180B                        1E            .byte	$1E
06988 180C                        0E            .byte	$E
06989 180D                        1A            .byte	$1A
06990 180E                        32            .byte	$32
06991 180F                        78            .byte	$78
06992 1810                        CC            .byte	$CC
06993 1811                        CC            .byte	$CC
06994 1812                        CC            .byte	$CC
06995 1813                        78            .byte	$78
06996 1814                        00            .byte	0
06997 1815                        00            .byte	0
06998 1816                        00            .byte	0
06999                                           ! 1130  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
07000 1817                        00            .byte	0
07001 1818                        00            .byte	0
07002 1819                        3C            .byte	$3C
07003 181A                        66            .byte	$66
07004 181B                        66            .byte	$66
07005 181C                        66            .byte	$66
07006 181D                        3C            .byte	$3C
07007 181E                        18            .byte	$18
07008 181F                        7E            .byte	$7E
07009 1820                        18            .byte	$18
07010 1821                        18            .byte	$18
07011 1822                        00            .byte	0
07012 1823                        00            .byte	0
07013 1824                        00            .byte	0
07014                                           ! 1131  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
07015 1825                        00            .byte	0
07016 1826                        00            .byte	0
07017 1827                        3F            .byte	$3F
07018 1828                        33            .byte	$33
07019 1829                        3F            .byte	$3F
07020 182A                        30            .byte	$30
07021 182B                        30            .byte	$30
07022 182C                        30            .byte	$30
07023 182D                        70            .byte	$70
07024 182E                        F0            .byte	$F0
07025 182F                        E0            .byte	$E0
07026 1830                        00            .byte	0
07027 1831                        00            .byte	0
07028 1832                        00            .byte	0
07029                                           ! 1132  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
07030 1833                        00            .byte	0
07031 1834                        00            .byte	0
07032 1835                        7F            .byte	$7F
07033 1836                        63            .byte	$63
07034 1837                        7F            .byte	$7F
07035 1838                        63            .byte	$63
07036 1839                        63            .byte	$63
07037 183A                        63            .byte	$63
07038 183B                        67            .byte	$67
07039 183C                        E7            .byte	$E7
07040 183D                        E6            .byte	$E6
07041 183E                        C0            .byte	$C0
07042 183F                        00            .byte	0
07043 1840                        00            .byte	0
07044                                           ! 1133  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
07045 1841                        00            .byte	0
07046 1842                        00            .byte	0
07047 1843                        18            .byte	$18
07048 1844                        18            .byte	$18
07049 1845                        DB            .byte	$DB
07050 1846                        3C            .byte	$3C
07051 1847                        E7            .byte	$E7
07052 1848                        3C            .byte	$3C
07053 1849                        DB            .byte	$DB
07054 184A                        18            .byte	$18
07055 184B                        18            .byte	$18
07056 184C                        00            .byte	0
07057 184D                        00            .byte	0
07058 184E                        00            .byte	0
07059                                           ! 1134  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
07060 184F                        00            .byte	0
07061 1850                        00            .byte	0
07062 1851                        80            .byte	$80
07063 1852                        C0            .byte	$C0
07064 1853                        E0            .byte	$E0
07065 1854                        F8            .byte	$F8
07066 1855                        FE            .byte	$FE
07067 1856                        F8            .byte	$F8
07068 1857                        E0            .byte	$E0
07069 1858                        C0            .byte	$C0
07070 1859                        80            .byte	$80
07071 185A                        00            .byte	0
07072 185B                        00            .byte	0
07073 185C                        00            .byte	0
07074                                           ! 1135  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07075 185D                        00            .byte	0
07076 185E                        00            .byte	0
07077 185F                        02            .byte	2
07078 1860                        06            .byte	6
07079 1861                        0E            .byte	$E
07080 1862                        3E            .byte	$3E
07081 1863                        FE            .byte	$FE
07082 1864                        3E            .byte	$3E
07083 1865                        0E            .byte	$E
07084 1866                        06            .byte	6
07085 1867                        02            .byte	2
07086 1868                        00            .byte	0
07087 1869                        00            .byte	0
07088 186A                        00            .byte	0
07089                                           ! 1136  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07090 186B                        00            .byte	0
07091 186C                        00            .byte	0
07092 186D                        18            .byte	$18
07093 186E                        3C            .byte	$3C
07094 186F                        7E            .byte	$7E
07095 1870                        18            .byte	$18
07096 1871                        18            .byte	$18
07097 1872                        18            .byte	$18
07098 1873                        7E            .byte	$7E
07099 1874                        3C            .byte	$3C
07100 1875                        18            .byte	$18
07101 1876                        00            .byte	0
07102 1877                        00            .byte	0
07103 1878                        00            .byte	0
07104                                           ! 1137  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
07105 1879                        00            .byte	0
07106 187A                        00            .byte	0
07107 187B                        66            .byte	$66
07108 187C                        66            .byte	$66
07109 187D                        66            .byte	$66
07110 187E                        66            .byte	$66
07111 187F                        66            .byte	$66
07112 1880                        66            .byte	$66
07113 1881                        00            .byte	0
07114 1882                        66            .byte	$66
07115 1883                        66            .byte	$66
07116 1884                        00            .byte	0
07117 1885                        00            .byte	0
07118 1886                        00            .byte	0
07119                                           ! 1138  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
07120 1887                        00            .byte	0
07121 1888                        00            .byte	0
07122 1889                        7F            .byte	$7F
07123 188A                        DB            .byte	$DB
07124 188B                        DB            .byte	$DB
07125 188C                        DB            .byte	$DB
07126 188D                        7B            .byte	$7B
07127 188E                        1B            .byte	$1B
07128 188F                        1B            .byte	$1B
07129 1890                        1B            .byte	$1B
07130 1891                        1B            .byte	$1B
07131 1892                        00            .byte	0
07132 1893                        00            .byte	0
07133 1894                        00            .byte	0
07134                                           ! 1139  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
07135 1895                        00            .byte	0
07136 1896                        7C            .byte	$7C
07137 1897                        C6            .byte	$C6
07138 1898                        60            .byte	$60
07139 1899                        38            .byte	$38
07140 189A                        6C            .byte	$6C
07141 189B                        C6            .byte	$C6
07142 189C                        C6            .byte	$C6
07143 189D                        6C            .byte	$6C
07144 189E                        38            .byte	$38
07145 189F                        0C            .byte	$C
07146 18A0                        C6            .byte	$C6
07147 18A1                        7C            .byte	$7C
07148 18A2                        00            .byte	0
07149                                           ! 1140  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
07150 18A3                        00            .byte	0
07151 18A4                        00            .byte	0
07152 18A5                        00            .byte	0
07153 18A6                        00            .byte	0
07154 18A7                        00            .byte	0
07155 18A8                        00            .byte	0
07156 18A9                        00            .byte	0
07157 18AA                        00            .byte	0
07158 18AB                        FE            .byte	$FE
07159 18AC                        FE            .byte	$FE
07160 18AD                        FE            .byte	$FE
07161 18AE                        00            .byte	0
07162 18AF                        00            .byte	0
07163 18B0                        00            .byte	0
07164                                           ! 1141  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
07165 18B1                        00            .byte	0
07166 18B2                        00            .byte	0
07167 18B3                        18            .byte	$18
07168 18B4                        3C            .byte	$3C
07169 18B5                        7E            .byte	$7E
07170 18B6                        18            .byte	$18
07171 18B7                        18            .byte	$18
07172 18B8                        18            .byte	$18
07173 18B9                        7E            .byte	$7E
07174 18BA                        3C            .byte	$3C
07175 18BB                        18            .byte	$18
07176 18BC                        7E            .byte	$7E
07177 18BD                        00            .byte	0
07178 18BE                        00            .byte	0
07179                                           ! 1142  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
07180 18BF                        00            .byte	0
07181 18C0                        00            .byte	0
07182 18C1                        18            .byte	$18
07183 18C2                        3C            .byte	$3C
07184 18C3                        7E            .byte	$7E
07185 18C4                        18            .byte	$18
07186 18C5                        18            .byte	$18
07187 18C6                        18            .byte	$18
07188 18C7                        18            .byte	$18
07189 18C8                        18            .byte	$18
07190 18C9                        18            .byte	$18
07191 18CA                        00            .byte	0
07192 18CB                        00            .byte	0
07193 18CC                        00            .byte	0
07194                                           ! 1143  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
07195 18CD                        00            .byte	0
07196 18CE                        00            .byte	0
07197 18CF                        18            .byte	$18
07198 18D0                        18            .byte	$18
07199 18D1                        18            .byte	$18
07200 18D2                        18            .byte	$18
07201 18D3                        18            .byte	$18
07202 18D4                        18            .byte	$18
07203 18D5                        7E            .byte	$7E
07204 18D6                        3C            .byte	$3C
07205 18D7                        18            .byte	$18
07206 18D8                        00            .byte	0
07207 18D9                        00            .byte	0
07208 18DA                        00            .byte	0
07209                                           ! 1144  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07210 18DB                        00            .byte	0
07211 18DC                        00            .byte	0
07212 18DD                        00            .byte	0
07213 18DE                        00            .byte	0
07214 18DF                        18            .byte	$18
07215 18E0                        0C            .byte	$C
07216 18E1                        FE            .byte	$FE
07217 18E2                        0C            .byte	$C
07218 18E3                        18            .byte	$18
07219 18E4                        00            .byte	0
07220 18E5                        00            .byte	0
07221 18E6                        00            .byte	0
07222 18E7                        00            .byte	0
07223 18E8                        00            .byte	0
07224                                           ! 1145  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
07225 18E9                        00            .byte	0
07226 18EA                        00            .byte	0
07227 18EB                        00            .byte	0
07228 18EC                        00            .byte	0
07229 18ED                        30            .byte	$30
07230 18EE                        60            .byte	$60
07231 18EF                        FE            .byte	$FE
07232 18F0                        60            .byte	$60
07233 18F1                        30            .byte	$30
07234 18F2                        00            .byte	0
07235 18F3                        00            .byte	0
07236 18F4                        00            .byte	0
07237 18F5                        00            .byte	0
07238 18F6                        00            .byte	0
07239                                           ! 1146  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
07240 18F7                        00            .byte	0
07241 18F8                        00            .byte	0
07242 18F9                        00            .byte	0
07243 18FA                        00            .byte	0
07244 18FB                        00            .byte	0
07245 18FC                        C0            .byte	$C0
07246 18FD                        C0            .byte	$C0
07247 18FE                        C0            .byte	$C0
07248 18FF                        FE            .byte	$FE
07249 1900                        00            .byte	0
07250 1901                        00            .byte	0
07251 1902                        00            .byte	0
07252 1903                        00            .byte	0
07253 1904                        00            .byte	0
07254                                           ! 1147 
07255                                           ! 1147  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07256 1905                        00            .byte	0
07257 1906                        00            .byte	0
07258 1907                        00            .byte	0
07259 1908                        00            .byte	0
07260 1909                        28            .byte	$28
07261 190A                        6C            .byte	$6C
07262 190B                        FE            .byte	$FE
07263 190C                        6C            .byte	$6C
07264 190D                        28            .byte	$28
07265 190E                        00            .byte	0
07266 190F                        00            .byte	0
07267 1910                        00            .byte	0
07268 1911                        00            .byte	0
07269 1912                        00            .byte	0
07270                                           ! 1148  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07271 1913                        00            .byte	0
07272 1914                        00            .byte	0
07273 1915                        00            .byte	0
07274 1916                        10            .byte	$10
07275 1917                        38            .byte	$38
07276 1918                        38            .byte	$38
07277 1919                        7C            .byte	$7C
07278 191A                        7C            .byte	$7C
07279 191B                        FE            .byte	$FE
07280 191C                        FE            .byte	$FE
07281 191D                        00            .byte	0
07282 191E                        00            .byte	0
07283 191F                        00            .byte	0
07284 1920                        00            .byte	0
07285                                           ! 1149  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07286 1921                        00            .byte	0
07287 1922                        00            .byte	0
07288 1923                        00            .byte	0
07289 1924                        FE            .byte	$FE
07290 1925                        FE            .byte	$FE
07291 1926                        7C            .byte	$7C
07292 1927                        7C            .byte	$7C
07293 1928                        38            .byte	$38
07294 1929                        38            .byte	$38
07295 192A                        10            .byte	$10
07296 192B                        00            .byte	0
07297 192C                        00            .byte	0
07298 192D                        00            .byte	0
07299 192E                        00            .byte	0
07300                                           ! 1150  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07301 192F                        00            .byte	0
07302 1930                        00            .byte	0
07303 1931                        00            .byte	0
07304 1932                        00            .byte	0
07305 1933                        00            .byte	0
07306 1934                        00            .byte	0
07307 1935                        00            .byte	0
07308 1936                        00            .byte	0
07309 1937                        00            .byte	0
07310 1938                        00            .byte	0
07311 1939                        00            .byte	0
07312 193A                        00            .byte	0
07313 193B                        00            .byte	0
07314 193C                        00            .byte	0
07315                                           ! 1151  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07316 193D                        00            .byte	0
07317 193E                        00            .byte	0
07318 193F                        18            .byte	$18
07319 1940                        3C            .byte	$3C
07320 1941                        3C            .byte	$3C
07321 1942                        3C            .byte	$3C
07322 1943                        18            .byte	$18
07323 1944                        18            .byte	$18
07324 1945                        00            .byte	0
07325 1946                        18            .byte	$18
07326 1947                        18            .byte	$18
07327 1948                        00            .byte	0
07328 1949                        00            .byte	0
07329 194A                        00            .byte	0
07330                                           ! 1152  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07331 194B                        00            .byte	0
07332 194C                        66            .byte	$66
07333 194D                        66            .byte	$66
07334 194E                        66            .byte	$66
07335 194F                        24            .byte	$24
07336 1950                        00            .byte	0
07337 1951                        00            .byte	0
07338 1952                        00            .byte	0
07339 1953                        00            .byte	0
07340 1954                        00            .byte	0
07341 1955                        00            .byte	0
07342 1956                        00            .byte	0
07343 1957                        00            .byte	0
07344 1958                        00            .byte	0
07345                                           ! 1153  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07346 1959                        00            .byte	0
07347 195A                        00            .byte	0
07348 195B                        6C            .byte	$6C
07349 195C                        6C            .byte	$6C
07350 195D                        FE            .byte	$FE
07351 195E                        6C            .byte	$6C
07352 195F                        6C            .byte	$6C
07353 1960                        6C            .byte	$6C
07354 1961                        FE            .byte	$FE
07355 1962                        6C            .byte	$6C
07356 1963                        6C            .byte	$6C
07357 1964                        00            .byte	0
07358 1965                        00            .byte	0
07359 1966                        00            .byte	0
07360                                           ! 1154  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07361 1967                        18            .byte	$18
07362 1968                        18            .byte	$18
07363 1969                        7C            .byte	$7C
07364 196A                        C6            .byte	$C6
07365 196B                        C2            .byte	$C2
07366 196C                        C0            .byte	$C0
07367 196D                        7C            .byte	$7C
07368 196E                        06            .byte	6
07369 196F                        86            .byte	$86
07370 1970                        C6            .byte	$C6
07371 1971                        7C            .byte	$7C
07372 1972                        18            .byte	$18
07373 1973                        18            .byte	$18
07374 1974                        00            .byte	0
07375                                           ! 1155  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07376 1975                        00            .byte	0
07377 1976                        00            .byte	0
07378 1977                        00            .byte	0
07379 1978                        00            .byte	0
07380 1979                        C2            .byte	$C2
07381 197A                        C6            .byte	$C6
07382 197B                        0C            .byte	$C
07383 197C                        18            .byte	$18
07384 197D                        30            .byte	$30
07385 197E                        66            .byte	$66
07386 197F                        C6            .byte	$C6
07387 1980                        00            .byte	0
07388 1981                        00            .byte	0
07389 1982                        00            .byte	0
07390                                           ! 1156  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07391 1983                        00            .byte	0
07392 1984                        00            .byte	0
07393 1985                        38            .byte	$38
07394 1986                        6C            .byte	$6C
07395 1987                        6C            .byte	$6C
07396 1988                        38            .byte	$38
07397 1989                        76            .byte	$76
07398 198A                        DC            .byte	$DC
07399 198B                        CC            .byte	$CC
07400 198C                        CC            .byte	$CC
07401 198D                        76            .byte	$76
07402 198E                        00            .byte	0
07403 198F                        00            .byte	0
07404 1990                        00            .byte	0
07405                                           ! 1157  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07406 1991                        00            .byte	0
07407 1992                        30            .byte	$30
07408 1993                        30            .byte	$30
07409 1994                        30            .byte	$30
07410 1995                        60            .byte	$60
07411 1996                        00            .byte	0
07412 1997                        00            .byte	0
07413 1998                        00            .byte	0
07414 1999                        00            .byte	0
07415 199A                        00            .byte	0
07416 199B                        00            .byte	0
07417 199C                        00            .byte	0
07418 199D                        00            .byte	0
07419 199E                        00            .byte	0
07420                                           ! 1158  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07421 199F                        00            .byte	0
07422 19A0                        00            .byte	0
07423 19A1                        0C            .byte	$C
07424 19A2                        18            .byte	$18
07425 19A3                        30            .byte	$30
07426 19A4                        30            .byte	$30
07427 19A5                        30            .byte	$30
07428 19A6                        30            .byte	$30
07429 19A7                        30            .byte	$30
07430 19A8                        18            .byte	$18
07431 19A9                        0C            .byte	$C
07432 19AA                        00            .byte	0
07433 19AB                        00            .byte	0
07434 19AC                        00            .byte	0
07435                                           ! 1159  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07436 19AD                        00            .byte	0
07437 19AE                        00            .byte	0
07438 19AF                        30            .byte	$30
07439 19B0                        18            .byte	$18
07440 19B1                        0C            .byte	$C
07441 19B2                        0C            .byte	$C
07442 19B3                        0C            .byte	$C
07443 19B4                        0C            .byte	$C
07444 19B5                        0C            .byte	$C
07445 19B6                        18            .byte	$18
07446 19B7                        30            .byte	$30
07447 19B8                        00            .byte	0
07448 19B9                        00            .byte	0
07449 19BA                        00            .byte	0
07450                                           ! 1160  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07451 19BB                        00            .byte	0
07452 19BC                        00            .byte	0
07453 19BD                        00            .byte	0
07454 19BE                        00            .byte	0
07455 19BF                        66            .byte	$66
07456 19C0                        3C            .byte	$3C
07457 19C1                        FF            .byte	$FF
07458 19C2                        3C            .byte	$3C
07459 19C3                        66            .byte	$66
07460 19C4                        00            .byte	0
07461 19C5                        00            .byte	0
07462 19C6                        00            .byte	0
07463 19C7                        00            .byte	0
07464 19C8                        00            .byte	0
07465                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07466 19C9                        00            .byte	0
07467 19CA                        00            .byte	0
07468 19CB                        00            .byte	0
07469 19CC                        00            .byte	0
07470 19CD                        18            .byte	$18
07471 19CE                        18            .byte	$18
07472 19CF                        7E            .byte	$7E
07473 19D0                        18            .byte	$18
07474 19D1                        18            .byte	$18
07475 19D2                        00            .byte	0
07476 19D3                        00            .byte	0
07477 19D4                        00            .byte	0
07478 19D5                        00            .byte	0
07479 19D6                        00            .byte	0
07480                                           ! 1162  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07481 19D7                        00            .byte	0
07482 19D8                        00            .byte	0
07483 19D9                        00            .byte	0
07484 19DA                        00            .byte	0
07485 19DB                        00            .byte	0
07486 19DC                        00            .byte	0
07487 19DD                        00            .byte	0
07488 19DE                        00            .byte	0
07489 19DF                        18            .byte	$18
07490 19E0                        18            .byte	$18
07491 19E1                        18            .byte	$18
07492 19E2                        30            .byte	$30
07493 19E3                        00            .byte	0
07494 19E4                        00            .byte	0
07495                                           ! 1163  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07496 19E5                        00            .byte	0
07497 19E6                        00            .byte	0
07498 19E7                        00            .byte	0
07499 19E8                        00            .byte	0
07500 19E9                        00            .byte	0
07501 19EA                        00            .byte	0
07502 19EB                        FE            .byte	$FE
07503 19EC                        00            .byte	0
07504 19ED                        00            .byte	0
07505 19EE                        00            .byte	0
07506 19EF                        00            .byte	0
07507 19F0                        00            .byte	0
07508 19F1                        00            .byte	0
07509 19F2                        00            .byte	0
07510                                           ! 1164  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07511 19F3                        00            .byte	0
07512 19F4                        00            .byte	0
07513 19F5                        00            .byte	0
07514 19F6                        00            .byte	0
07515 19F7                        00            .byte	0
07516 19F8                        00            .byte	0
07517 19F9                        00            .byte	0
07518 19FA                        00            .byte	0
07519 19FB                        00            .byte	0
07520 19FC                        18            .byte	$18
07521 19FD                        18            .byte	$18
07522 19FE                        00            .byte	0
07523 19FF                        00            .byte	0
07524 1A00                        00            .byte	0
07525                                           ! 1165  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07526 1A01                        00            .byte	0
07527 1A02                        00            .byte	0
07528 1A03                        02            .byte	2
07529 1A04                        06            .byte	6
07530 1A05                        0C            .byte	$C
07531 1A06                        18            .byte	$18
07532 1A07                        30            .byte	$30
07533 1A08                        60            .byte	$60
07534 1A09                        C0            .byte	$C0
07535 1A0A                        80            .byte	$80
07536 1A0B                        00            .byte	0
07537 1A0C                        00            .byte	0
07538 1A0D                        00            .byte	0
07539 1A0E                        00            .byte	0
07540                                           ! 1166  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07541 1A0F                        00            .byte	0
07542 1A10                        00            .byte	0
07543 1A11                        7C            .byte	$7C
07544 1A12                        C6            .byte	$C6
07545 1A13                        CE            .byte	$CE
07546 1A14                        DE            .byte	$DE
07547 1A15                        F6            .byte	$F6
07548 1A16                        E6            .byte	$E6
07549 1A17                        C6            .byte	$C6
07550 1A18                        C6            .byte	$C6
07551 1A19                        7C            .byte	$7C
07552 1A1A                        00            .byte	0
07553 1A1B                        00            .byte	0
07554 1A1C                        00            .byte	0
07555                                           ! 1167  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07556 1A1D                        00            .byte	0
07557 1A1E                        00            .byte	0
07558 1A1F                        18            .byte	$18
07559 1A20                        38            .byte	$38
07560 1A21                        78            .byte	$78
07561 1A22                        18            .byte	$18
07562 1A23                        18            .byte	$18
07563 1A24                        18            .byte	$18
07564 1A25                        18            .byte	$18
07565 1A26                        18            .byte	$18
07566 1A27                        7E            .byte	$7E
07567 1A28                        00            .byte	0
07568 1A29                        00            .byte	0
07569 1A2A                        00            .byte	0
07570                                           ! 1168  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07571 1A2B                        00            .byte	0
07572 1A2C                        00            .byte	0
07573 1A2D                        7C            .byte	$7C
07574 1A2E                        C6            .byte	$C6
07575 1A2F                        06            .byte	6
07576 1A30                        0C            .byte	$C
07577 1A31                        18            .byte	$18
07578 1A32                        30            .byte	$30
07579 1A33                        60            .byte	$60
07580 1A34                        C6            .byte	$C6
07581 1A35                        FE            .byte	$FE
07582 1A36                        00            .byte	0
07583 1A37                        00            .byte	0
07584 1A38                        00            .byte	0
07585                                           ! 1169  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07586 1A39                        00            .byte	0
07587 1A3A                        00            .byte	0
07588 1A3B                        7C            .byte	$7C
07589 1A3C                        C6            .byte	$C6
07590 1A3D                        06            .byte	6
07591 1A3E                        06            .byte	6
07592 1A3F                        3C            .byte	$3C
07593 1A40                        06            .byte	6
07594 1A41                        06            .byte	6
07595 1A42                        C6            .byte	$C6
07596 1A43                        7C            .byte	$7C
07597 1A44                        00            .byte	0
07598 1A45                        00            .byte	0
07599 1A46                        00            .byte	0
07600                                           ! 1170  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07601 1A47                        00            .byte	0
07602 1A48                        00            .byte	0
07603 1A49                        0C            .byte	$C
07604 1A4A                        1C            .byte	$1C
07605 1A4B                        3C            .byte	$3C
07606 1A4C                        6C            .byte	$6C
07607 1A4D                        CC            .byte	$CC
07608 1A4E                        FE            .byte	$FE
07609 1A4F                        0C            .byte	$C
07610 1A50                        0C            .byte	$C
07611 1A51                        1E            .byte	$1E
07612 1A52                        00            .byte	0
07613 1A53                        00            .byte	0
07614 1A54                        00            .byte	0
07615                                           ! 1171  0x00, 0
07616 1A55                        00            .byte	0
07617                                           ! 1171 x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07618 1A56                        00            .byte	0
07619 1A57                        FE            .byte	$FE
07620 1A58                        C0            .byte	$C0
07621 1A59                        C0            .byte	$C0
07622 1A5A                        C0            .byte	$C0
07623 1A5B                        FC            .byte	$FC
07624 1A5C                        06            .byte	6
07625 1A5D                        06            .byte	6
07626 1A5E                        C6            .byte	$C6
07627 1A5F                        7C            .byte	$7C
07628 1A60                        00            .byte	0
07629 1A61                        00            .byte	0
07630 1A62                        00            .byte	0
07631                                           ! 1172  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07632 1A63                        00            .byte	0
07633 1A64                        00            .byte	0
07634 1A65                        38            .byte	$38
07635 1A66                        60            .byte	$60
07636 1A67                        C0            .byte	$C0
07637 1A68                        C0            .byte	$C0
07638 1A69                        FC            .byte	$FC
07639 1A6A                        C6            .byte	$C6
07640 1A6B                        C6            .byte	$C6
07641 1A6C                        C6            .byte	$C6
07642 1A6D                        7C            .byte	$7C
07643 1A6E                        00            .byte	0
07644 1A6F                        00            .byte	0
07645 1A70                        00            .byte	0
07646                                           ! 1173  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07647 1A71                        00            .byte	0
07648 1A72                        00            .byte	0
07649 1A73                        FE            .byte	$FE
07650 1A74                        C6            .byte	$C6
07651 1A75                        06            .byte	6
07652 1A76                        0C            .byte	$C
07653 1A77                        18            .byte	$18
07654 1A78                        30            .byte	$30
07655 1A79                        30            .byte	$30
07656 1A7A                        30            .byte	$30
07657 1A7B                        30            .byte	$30
07658 1A7C                        00            .byte	0
07659 1A7D                        00            .byte	0
07660 1A7E                        00            .byte	0
07661                                           ! 1174  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07662 1A7F                        00            .byte	0
07663 1A80                        00            .byte	0
07664 1A81                        7C            .byte	$7C
07665 1A82                        C6            .byte	$C6
07666 1A83                        C6            .byte	$C6
07667 1A84                        C6            .byte	$C6
07668 1A85                        7C            .byte	$7C
07669 1A86                        C6            .byte	$C6
07670 1A87                        C6            .byte	$C6
07671 1A88                        C6            .byte	$C6
07672 1A89                        7C            .byte	$7C
07673 1A8A                        00            .byte	0
07674 1A8B                        00            .byte	0
07675 1A8C                        00            .byte	0
07676                                           ! 1175  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07677 1A8D                        00            .byte	0
07678 1A8E                        00            .byte	0
07679 1A8F                        7C            .byte	$7C
07680 1A90                        C6            .byte	$C6
07681 1A91                        C6            .byte	$C6
07682 1A92                        C6            .byte	$C6
07683 1A93                        7E            .byte	$7E
07684 1A94                        06            .byte	6
07685 1A95                        06            .byte	6
07686 1A96                        0C            .byte	$C
07687 1A97                        78            .byte	$78
07688 1A98                        00            .byte	0
07689 1A99                        00            .byte	0
07690 1A9A                        00            .byte	0
07691                                           ! 1176  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07692 1A9B                        00            .byte	0
07693 1A9C                        00            .byte	0
07694 1A9D                        00            .byte	0
07695 1A9E                        18            .byte	$18
07696 1A9F                        18            .byte	$18
07697 1AA0                        00            .byte	0
07698 1AA1                        00            .byte	0
07699 1AA2                        00            .byte	0
07700 1AA3                        18            .byte	$18
07701 1AA4                        18            .byte	$18
07702 1AA5                        00            .byte	0
07703 1AA6                        00            .byte	0
07704 1AA7                        00            .byte	0
07705 1AA8                        00            .byte	0
07706                                           ! 1177  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07707 1AA9                        00            .byte	0
07708 1AAA                        00            .byte	0
07709 1AAB                        00            .byte	0
07710 1AAC                        18            .byte	$18
07711 1AAD                        18            .byte	$18
07712 1AAE                        00            .byte	0
07713 1AAF                        00            .byte	0
07714 1AB0                        00            .byte	0
07715 1AB1                        18            .byte	$18
07716 1AB2                        18            .byte	$18
07717 1AB3                        30            .byte	$30
07718 1AB4                        00            .byte	0
07719 1AB5                        00            .byte	0
07720 1AB6                        00            .byte	0
07721                                           ! 1178  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07722 1AB7                        00            .byte	0
07723 1AB8                        00            .byte	0
07724 1AB9                        06            .byte	6
07725 1ABA                        0C            .byte	$C
07726 1ABB                        18            .byte	$18
07727 1ABC                        30            .byte	$30
07728 1ABD                        60            .byte	$60
07729 1ABE                        30            .byte	$30
07730 1ABF                        18            .byte	$18
07731 1AC0                        0C            .byte	$C
07732 1AC1                        06            .byte	6
07733 1AC2                        00            .byte	0
07734 1AC3                        00            .byte	0
07735 1AC4                        00            .byte	0
07736                                           ! 1179  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07737 1AC5                        00            .byte	0
07738 1AC6                        00            .byte	0
07739 1AC7                        00            .byte	0
07740 1AC8                        00            .byte	0
07741 1AC9                        00            .byte	0
07742 1ACA                        7E            .byte	$7E
07743 1ACB                        00            .byte	0
07744 1ACC                        00            .byte	0
07745 1ACD                        7E            .byte	$7E
07746 1ACE                        00            .byte	0
07747 1ACF                        00            .byte	0
07748 1AD0                        00            .byte	0
07749 1AD1                        00            .byte	0
07750 1AD2                        00            .byte	0
07751                                           ! 1180  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07752 1AD3                        00            .byte	0
07753 1AD4                        00            .byte	0
07754 1AD5                        60            .byte	$60
07755 1AD6                        30            .byte	$30
07756 1AD7                        18            .byte	$18
07757 1AD8                        0C            .byte	$C
07758 1AD9                        06            .byte	6
07759 1ADA                        0C            .byte	$C
07760 1ADB                        18            .byte	$18
07761 1ADC                        30            .byte	$30
07762 1ADD                        60            .byte	$60
07763 1ADE                        00            .byte	0
07764 1ADF                        00            .byte	0
07765 1AE0                        00            .byte	0
07766                                           ! 1181  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07767 1AE1                        00            .byte	0
07768 1AE2                        00            .byte	0
07769 1AE3                        7C            .byte	$7C
07770 1AE4                        C6            .byte	$C6
07771 1AE5                        C6            .byte	$C6
07772 1AE6                        0C            .byte	$C
07773 1AE7                        18            .byte	$18
07774 1AE8                        18            .byte	$18
07775 1AE9                        00            .byte	0
07776 1AEA                        18            .byte	$18
07777 1AEB                        18            .byte	$18
07778 1AEC                        00            .byte	0
07779 1AED                        00            .byte	0
07780 1AEE                        00            .byte	0
07781                                           ! 1182  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07782 1AEF                        00            .byte	0
07783 1AF0                        00            .byte	0
07784 1AF1                        7C            .byte	$7C
07785 1AF2                        C6            .byte	$C6
07786 1AF3                        C6            .byte	$C6
07787 1AF4                        DE            .byte	$DE
07788 1AF5                        DE            .byte	$DE
07789 1AF6                        DE            .byte	$DE
07790 1AF7                        DC            .byte	$DC
07791 1AF8                        C0            .byte	$C0
07792 1AF9                        7C            .byte	$7C
07793 1AFA                        00            .byte	0
07794 1AFB                        00            .byte	0
07795 1AFC                        00            .byte	0
07796                                           ! 1183  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07797 1AFD                        00            .byte	0
07798 1AFE                        00            .byte	0
07799 1AFF                        10            .byte	$10
07800 1B00                        38            .byte	$38
07801 1B01                        6C            .byte	$6C
07802 1B02                        C6            .byte	$C6
07803 1B03                        C6            .byte	$C6
07804 1B04                        FE            .byte	$FE
07805 1B05                        C6            .byte	$C6
07806 1B06                        C6            .byte	$C6
07807 1B07                        C6            .byte	$C6
07808 1B08                        00            .byte	0
07809 1B09                        00            .byte	0
07810 1B0A                        00            .byte	0
07811                                           ! 1184  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07812 1B0B                        00            .byte	0
07813 1B0C                        00            .byte	0
07814 1B0D                        FC            .byte	$FC
07815 1B0E                        66            .byte	$66
07816 1B0F                        66            .byte	$66
07817 1B10                        66            .byte	$66
07818 1B11                        7C            .byte	$7C
07819 1B12                        66            .byte	$66
07820 1B13                        66            .byte	$66
07821 1B14                        66            .byte	$66
07822 1B15                        FC            .byte	$FC
07823 1B16                        00            .byte	0
07824 1B17                        00            .byte	0
07825 1B18                        00            .byte	0
07826                                           ! 1185  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07827 1B19                        00            .byte	0
07828 1B1A                        00            .byte	0
07829 1B1B                        3C            .byte	$3C
07830 1B1C                        66            .byte	$66
07831 1B1D                        C2            .byte	$C2
07832 1B1E                        C0            .byte	$C0
07833 1B1F                        C0            .byte	$C0
07834 1B20                        C0            .byte	$C0
07835 1B21                        C2            .byte	$C2
07836 1B22                        66            .byte	$66
07837 1B23                        3C            .byte	$3C
07838 1B24                        00            .byte	0
07839 1B25                        00            .byte	0
07840 1B26                        00            .byte	0
07841                                           ! 1186  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07842 1B27                        00            .byte	0
07843 1B28                        00            .byte	0
07844 1B29                        F8            .byte	$F8
07845 1B2A                        6C            .byte	$6C
07846 1B2B                        66            .byte	$66
07847 1B2C                        66            .byte	$66
07848 1B2D                        66            .byte	$66
07849 1B2E                        66            .byte	$66
07850 1B2F                        66            .byte	$66
07851 1B30                        6C            .byte	$6C
07852 1B31                        F8            .byte	$F8
07853 1B32                        00            .byte	0
07854 1B33                        00            .byte	0
07855 1B34                        00            .byte	0
07856                                           ! 1187  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07857 1B35                        00            .byte	0
07858 1B36                        00            .byte	0
07859 1B37                        FE            .byte	$FE
07860 1B38                        66            .byte	$66
07861 1B39                        62            .byte	$62
07862 1B3A                        68            .byte	$68
07863 1B3B                        78            .byte	$78
07864 1B3C                        68            .byte	$68
07865 1B3D                        62            .byte	$62
07866 1B3E                        66            .byte	$66
07867 1B3F                        FE            .byte	$FE
07868 1B40                        00            .byte	0
07869 1B41                        00            .byte	0
07870 1B42                        00            .byte	0
07871                                           ! 1188  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07872 1B43                        00            .byte	0
07873 1B44                        00            .byte	0
07874 1B45                        FE            .byte	$FE
07875 1B46                        66            .byte	$66
07876 1B47                        62            .byte	$62
07877 1B48                        68            .byte	$68
07878 1B49                        78            .byte	$78
07879 1B4A                        68            .byte	$68
07880 1B4B                        60            .byte	$60
07881 1B4C                        60            .byte	$60
07882 1B4D                        F0            .byte	$F0
07883 1B4E                        00            .byte	0
07884 1B4F                        00            .byte	0
07885 1B50                        00            .byte	0
07886                                           ! 1189  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07887 1B51                        00            .byte	0
07888 1B52                        00            .byte	0
07889 1B53                        3C            .byte	$3C
07890 1B54                        66            .byte	$66
07891 1B55                        C2            .byte	$C2
07892 1B56                        C0            .byte	$C0
07893 1B57                        C0            .byte	$C0
07894 1B58                        DE            .byte	$DE
07895 1B59                        C6            .byte	$C6
07896 1B5A                        66            .byte	$66
07897 1B5B                        3A            .byte	$3A
07898 1B5C                        00            .byte	0
07899 1B5D                        00            .byte	0
07900 1B5E                        00            .byte	0
07901                                           ! 1190  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07902 1B5F                        00            .byte	0
07903 1B60                        00            .byte	0
07904 1B61                        C6            .byte	$C6
07905 1B62                        C6            .byte	$C6
07906 1B63                        C6            .byte	$C6
07907 1B64                        C6            .byte	$C6
07908 1B65                        FE            .byte	$FE
07909 1B66                        C6            .byte	$C6
07910 1B67                        C6            .byte	$C6
07911 1B68                        C6            .byte	$C6
07912 1B69                        C6            .byte	$C6
07913 1B6A                        00            .byte	0
07914 1B6B                        00            .byte	0
07915 1B6C                        00            .byte	0
07916                                           ! 1191  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07917 1B6D                        00            .byte	0
07918 1B6E                        00            .byte	0
07919 1B6F                        3C            .byte	$3C
07920 1B70                        18            .byte	$18
07921 1B71                        18            .byte	$18
07922 1B72                        18            .byte	$18
07923 1B73                        18            .byte	$18
07924 1B74                        18            .byte	$18
07925 1B75                        18            .byte	$18
07926 1B76                        18            .byte	$18
07927 1B77                        3C            .byte	$3C
07928 1B78                        00            .byte	0
07929 1B79                        00            .byte	0
07930 1B7A                        00            .byte	0
07931                                           ! 1192  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07932 1B7B                        00            .byte	0
07933 1B7C                        00            .byte	0
07934 1B7D                        1E            .byte	$1E
07935 1B7E                        0C            .byte	$C
07936 1B7F                        0C            .byte	$C
07937 1B80                        0C            .byte	$C
07938 1B81                        0C            .byte	$C
07939 1B82                        0C            .byte	$C
07940 1B83                        CC            .byte	$CC
07941 1B84                        CC            .byte	$CC
07942 1B85                        78            .byte	$78
07943 1B86                        00            .byte	0
07944 1B87                        00            .byte	0
07945 1B88                        00            .byte	0
07946                                           ! 1193  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07947 1B89                        00            .byte	0
07948 1B8A                        00            .byte	0
07949 1B8B                        E6            .byte	$E6
07950 1B8C                        66            .byte	$66
07951 1B8D                        6C            .byte	$6C
07952 1B8E                        6C            .byte	$6C
07953 1B8F                        78            .byte	$78
07954 1B90                        6C            .byte	$6C
07955 1B91                        6C            .byte	$6C
07956 1B92                        66            .byte	$66
07957 1B93                        E6            .byte	$E6
07958 1B94                        00            .byte	0
07959 1B95                        00            .byte	0
07960 1B96                        00            .byte	0
07961                                           ! 1194  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07962 1B97                        00            .byte	0
07963 1B98                        00            .byte	0
07964 1B99                        F0            .byte	$F0
07965 1B9A                        60            .byte	$60
07966 1B9B                        60            .byte	$60
07967 1B9C                        60            .byte	$60
07968 1B9D                        60            .byte	$60
07969 1B9E                        60            .byte	$60
07970 1B9F                        62            .byte	$62
07971 1BA0                        66            .byte	$66
07972 1BA1                        FE            .byte	$FE
07973 1BA2                        00            .byte	0
07974 1BA3                        00            .byte	0
07975 1BA4                        00            .byte	0
07976                                           ! 1195  0x00, 0x00, 0xc
07977 1BA5                        00            .byte	0
07978 1BA6                        00            .byte	0
07979                                           ! 1195 6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07980 1BA7                        C6            .byte	$C6
07981 1BA8                        EE            .byte	$EE
07982 1BA9                        FE            .byte	$FE
07983 1BAA                        FE            .byte	$FE
07984 1BAB                        D6            .byte	$D6
07985 1BAC                        C6            .byte	$C6
07986 1BAD                        C6            .byte	$C6
07987 1BAE                        C6            .byte	$C6
07988 1BAF                        C6            .byte	$C6
07989 1BB0                        00            .byte	0
07990 1BB1                        00            .byte	0
07991 1BB2                        00            .byte	0
07992                                           ! 1196  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07993 1BB3                        00            .byte	0
07994 1BB4                        00            .byte	0
07995 1BB5                        C6            .byte	$C6
07996 1BB6                        E6            .byte	$E6
07997 1BB7                        F6            .byte	$F6
07998 1BB8                        FE            .byte	$FE
07999 1BB9                        DE            .byte	$DE
08000 1BBA                        CE            .byte	$CE
08001 1BBB                        C6            .byte	$C6
08002 1BBC                        C6            .byte	$C6
08003 1BBD                        C6            .byte	$C6
08004 1BBE                        00            .byte	0
08005 1BBF                        00            .byte	0
08006 1BC0                        00            .byte	0
08007                                           ! 1197  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08008 1BC1                        00            .byte	0
08009 1BC2                        00            .byte	0
08010 1BC3                        38            .byte	$38
08011 1BC4                        6C            .byte	$6C
08012 1BC5                        C6            .byte	$C6
08013 1BC6                        C6            .byte	$C6
08014 1BC7                        C6            .byte	$C6
08015 1BC8                        C6            .byte	$C6
08016 1BC9                        C6            .byte	$C6
08017 1BCA                        6C            .byte	$6C
08018 1BCB                        38            .byte	$38
08019 1BCC                        00            .byte	0
08020 1BCD                        00            .byte	0
08021 1BCE                        00            .byte	0
08022                                           ! 1198  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08023 1BCF                        00            .byte	0
08024 1BD0                        00            .byte	0
08025 1BD1                        FC            .byte	$FC
08026 1BD2                        66            .byte	$66
08027 1BD3                        66            .byte	$66
08028 1BD4                        66            .byte	$66
08029 1BD5                        7C            .byte	$7C
08030 1BD6                        60            .byte	$60
08031 1BD7                        60            .byte	$60
08032 1BD8                        60            .byte	$60
08033 1BD9                        F0            .byte	$F0
08034 1BDA                        00            .byte	0
08035 1BDB                        00            .byte	0
08036 1BDC                        00            .byte	0
08037                                           ! 1199  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
08038 1BDD                        00            .byte	0
08039 1BDE                        00            .byte	0
08040 1BDF                        7C            .byte	$7C
08041 1BE0                        C6            .byte	$C6
08042 1BE1                        C6            .byte	$C6
08043 1BE2                        C6            .byte	$C6
08044 1BE3                        C6            .byte	$C6
08045 1BE4                        D6            .byte	$D6
08046 1BE5                        DE            .byte	$DE
08047 1BE6                        7C            .byte	$7C
08048 1BE7                        0C            .byte	$C
08049 1BE8                        0E            .byte	$E
08050 1BE9                        00            .byte	0
08051 1BEA                        00            .byte	0
08052                                           ! 1200  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08053 1BEB                        00            .byte	0
08054 1BEC                        00            .byte	0
08055 1BED                        FC            .byte	$FC
08056 1BEE                        66            .byte	$66
08057 1BEF                        66            .byte	$66
08058 1BF0                        66            .byte	$66
08059 1BF1                        7C            .byte	$7C
08060 1BF2                        6C            .byte	$6C
08061 1BF3                        66            .byte	$66
08062 1BF4                        66            .byte	$66
08063 1BF5                        E6            .byte	$E6
08064 1BF6                        00            .byte	0
08065 1BF7                        00            .byte	0
08066 1BF8                        00            .byte	0
08067                                           ! 1201  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08068 1BF9                        00            .byte	0
08069 1BFA                        00            .byte	0
08070 1BFB                        7C            .byte	$7C
08071 1BFC                        C6            .byte	$C6
08072 1BFD                        C6            .byte	$C6
08073 1BFE                        60            .byte	$60
08074 1BFF                        38            .byte	$38
08075 1C00                        0C            .byte	$C
08076 1C01                        C6            .byte	$C6
08077 1C02                        C6            .byte	$C6
08078 1C03                        7C            .byte	$7C
08079 1C04                        00            .byte	0
08080 1C05                        00            .byte	0
08081 1C06                        00            .byte	0
08082                                           ! 1202  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08083 1C07                        00            .byte	0
08084 1C08                        00            .byte	0
08085 1C09                        7E            .byte	$7E
08086 1C0A                        7E            .byte	$7E
08087 1C0B                        5A            .byte	$5A
08088 1C0C                        18            .byte	$18
08089 1C0D                        18            .byte	$18
08090 1C0E                        18            .byte	$18
08091 1C0F                        18            .byte	$18
08092 1C10                        18            .byte	$18
08093 1C11                        3C            .byte	$3C
08094 1C12                        00            .byte	0
08095 1C13                        00            .byte	0
08096 1C14                        00            .byte	0
08097                                           ! 1203  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08098 1C15                        00            .byte	0
08099 1C16                        00            .byte	0
08100 1C17                        C6            .byte	$C6
08101 1C18                        C6            .byte	$C6
08102 1C19                        C6            .byte	$C6
08103 1C1A                        C6            .byte	$C6
08104 1C1B                        C6            .byte	$C6
08105 1C1C                        C6            .byte	$C6
08106 1C1D                        C6            .byte	$C6
08107 1C1E                        C6            .byte	$C6
08108 1C1F                        7C            .byte	$7C
08109 1C20                        00            .byte	0
08110 1C21                        00            .byte	0
08111 1C22                        00            .byte	0
08112                                           ! 1204  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
08113 1C23                        00            .byte	0
08114 1C24                        00            .byte	0
08115 1C25                        C6            .byte	$C6
08116 1C26                        C6            .byte	$C6
08117 1C27                        C6            .byte	$C6
08118 1C28                        C6            .byte	$C6
08119 1C29                        C6            .byte	$C6
08120 1C2A                        C6            .byte	$C6
08121 1C2B                        6C            .byte	$6C
08122 1C2C                        38            .byte	$38
08123 1C2D                        10            .byte	$10
08124 1C2E                        00            .byte	0
08125 1C2F                        00            .byte	0
08126 1C30                        00            .byte	0
08127                                           ! 1205  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
08128 1C31                        00            .byte	0
08129 1C32                        00            .byte	0
08130 1C33                        C6            .byte	$C6
08131 1C34                        C6            .byte	$C6
08132 1C35                        C6            .byte	$C6
08133 1C36                        C6            .byte	$C6
08134 1C37                        D6            .byte	$D6
08135 1C38                        D6            .byte	$D6
08136 1C39                        FE            .byte	$FE
08137 1C3A                        7C            .byte	$7C
08138 1C3B                        6C            .byte	$6C
08139 1C3C                        00            .byte	0
08140 1C3D                        00            .byte	0
08141 1C3E                        00            .byte	0
08142                                           ! 1206  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08143 1C3F                        00            .byte	0
08144 1C40                        00            .byte	0
08145 1C41                        C6            .byte	$C6
08146 1C42                        C6            .byte	$C6
08147 1C43                        6C            .byte	$6C
08148 1C44                        38            .byte	$38
08149 1C45                        38            .byte	$38
08150 1C46                        38            .byte	$38
08151 1C47                        6C            .byte	$6C
08152 1C48                        C6            .byte	$C6
08153 1C49                        C6            .byte	$C6
08154 1C4A                        00            .byte	0
08155 1C4B                        00            .byte	0
08156 1C4C                        00            .byte	0
08157                                           ! 1207  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08158 1C4D                        00            .byte	0
08159 1C4E                        00            .byte	0
08160 1C4F                        66            .byte	$66
08161 1C50                        66            .byte	$66
08162 1C51                        66            .byte	$66
08163 1C52                        66            .byte	$66
08164 1C53                        3C            .byte	$3C
08165 1C54                        18            .byte	$18
08166 1C55                        18            .byte	$18
08167 1C56                        18            .byte	$18
08168 1C57                        3C            .byte	$3C
08169 1C58                        00            .byte	0
08170 1C59                        00            .byte	0
08171 1C5A                        00            .byte	0
08172                                           ! 1208  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
08173 1C5B                        00            .byte	0
08174 1C5C                        00            .byte	0
08175 1C5D                        FE            .byte	$FE
08176 1C5E                        C6            .byte	$C6
08177 1C5F                        8C            .byte	$8C
08178 1C60                        18            .byte	$18
08179 1C61                        30            .byte	$30
08180 1C62                        60            .byte	$60
08181 1C63                        C2            .byte	$C2
08182 1C64                        C6            .byte	$C6
08183 1C65                        FE            .byte	$FE
08184 1C66                        00            .byte	0
08185 1C67                        00            .byte	0
08186 1C68                        00            .byte	0
08187                                           ! 1209  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
08188 1C69                        00            .byte	0
08189 1C6A                        00            .byte	0
08190 1C6B                        3C            .byte	$3C
08191 1C6C                        30            .byte	$30
08192 1C6D                        30            .byte	$30
08193 1C6E                        30            .byte	$30
08194 1C6F                        30            .byte	$30
08195 1C70                        30            .byte	$30
08196 1C71                        30            .byte	$30
08197 1C72                        30            .byte	$30
08198 1C73                        3C            .byte	$3C
08199 1C74                        00            .byte	0
08200 1C75                        00            .byte	0
08201 1C76                        00            .byte	0
08202                                           ! 1210  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
08203 1C77                        00            .byte	0
08204 1C78                        00            .byte	0
08205 1C79                        80            .byte	$80
08206 1C7A                        C0            .byte	$C0
08207 1C7B                        E0            .byte	$E0
08208 1C7C                        70            .byte	$70
08209 1C7D                        38            .byte	$38
08210 1C7E                        1C            .byte	$1C
08211 1C7F                        0E            .byte	$E
08212 1C80                        06            .byte	6
08213 1C81                        02            .byte	2
08214 1C82                        00            .byte	0
08215 1C83                        00            .byte	0
08216 1C84                        00            .byte	0
08217                                           ! 1211  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
08218 1C85                        00            .byte	0
08219 1C86                        00            .byte	0
08220 1C87                        3C            .byte	$3C
08221 1C88                        0C            .byte	$C
08222 1C89                        0C            .byte	$C
08223 1C8A                        0C            .byte	$C
08224 1C8B                        0C            .byte	$C
08225 1C8C                        0C            .byte	$C
08226 1C8D                        0C            .byte	$C
08227 1C8E                        0C            .byte	$C
08228 1C8F                        3C            .byte	$3C
08229 1C90                        00            .byte	0
08230 1C91                        00            .byte	0
08231 1C92                        00            .byte	0
08232                                           ! 1212  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08233 1C93                        10            .byte	$10
08234 1C94                        38            .byte	$38
08235 1C95                        6C            .byte	$6C
08236 1C96                        C6            .byte	$C6
08237 1C97                        00            .byte	0
08238 1C98                        00            .byte	0
08239 1C99                        00            .byte	0
08240 1C9A                        00            .byte	0
08241 1C9B                        00            .byte	0
08242 1C9C                        00            .byte	0
08243 1C9D                        00            .byte	0
08244 1C9E                        00            .byte	0
08245 1C9F                        00            .byte	0
08246 1CA0                        00            .byte	0
08247                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
08248 1CA1                        00            .byte	0
08249 1CA2                        00            .byte	0
08250 1CA3                        00            .byte	0
08251 1CA4                        00            .byte	0
08252 1CA5                        00            .byte	0
08253 1CA6                        00            .byte	0
08254 1CA7                        00            .byte	0
08255 1CA8                        00            .byte	0
08256 1CA9                        00            .byte	0
08257 1CAA                        00            .byte	0
08258 1CAB                        00            .byte	0
08259 1CAC                        00            .byte	0
08260 1CAD                        FF            .byte	$FF
08261 1CAE                        00            .byte	0
08262                                           ! 1214  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08263 1CAF                        30            .byte	$30
08264 1CB0                        30            .byte	$30
08265 1CB1                        18            .byte	$18
08266 1CB2                        00            .byte	0
08267 1CB3                        00            .byte	0
08268 1CB4                        00            .byte	0
08269 1CB5                        00            .byte	0
08270 1CB6                        00            .byte	0
08271 1CB7                        00            .byte	0
08272 1CB8                        00            .byte	0
08273 1CB9                        00            .byte	0
08274 1CBA                        00            .byte	0
08275 1CBB                        00            .byte	0
08276 1CBC                        00            .byte	0
08277                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08278 1CBD                        00            .byte	0
08279 1CBE                        00            .byte	0
08280 1CBF                        00            .byte	0
08281 1CC0                        00            .byte	0
08282 1CC1                        00            .byte	0
08283 1CC2                        78            .byte	$78
08284 1CC3                        0C            .byte	$C
08285 1CC4                        7C            .byte	$7C
08286 1CC5                        CC            .byte	$CC
08287 1CC6                        CC            .byte	$CC
08288 1CC7                        76            .byte	$76
08289 1CC8                        00            .byte	0
08290 1CC9                        00            .byte	0
08291 1CCA                        00            .byte	0
08292                                           ! 1216  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08293 1CCB                        00            .byte	0
08294 1CCC                        00            .byte	0
08295 1CCD                        E0            .byte	$E0
08296 1CCE                        60            .byte	$60
08297 1CCF                        60            .byte	$60
08298 1CD0                        78            .byte	$78
08299 1CD1                        6C            .byte	$6C
08300 1CD2                        66            .byte	$66
08301 1CD3                        66            .byte	$66
08302 1CD4                        66            .byte	$66
08303 1CD5                        7C            .byte	$7C
08304 1CD6                        00            .byte	0
08305 1CD7                        00            .byte	0
08306 1CD8                        00            .byte	0
08307                                           ! 1217  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08308 1CD9                        00            .byte	0
08309 1CDA                        00            .byte	0
08310 1CDB                        00            .byte	0
08311 1CDC                        00            .byte	0
08312 1CDD                        00            .byte	0
08313 1CDE                        7C            .byte	$7C
08314 1CDF                        C6            .byte	$C6
08315 1CE0                        C0            .byte	$C0
08316 1CE1                        C0            .byte	$C0
08317 1CE2                        C6            .byte	$C6
08318 1CE3                        7C            .byte	$7C
08319 1CE4                        00            .byte	0
08320 1CE5                        00            .byte	0
08321 1CE6                        00            .byte	0
08322                                           ! 1218  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08323 1CE7                        00            .byte	0
08324 1CE8                        00            .byte	0
08325 1CE9                        1C            .byte	$1C
08326 1CEA                        0C            .byte	$C
08327 1CEB                        0C            .byte	$C
08328 1CEC                        3C            .byte	$3C
08329 1CED                        6C            .byte	$6C
08330 1CEE                        CC            .byte	$CC
08331 1CEF                        CC            .byte	$CC
08332 1CF0                        CC            .byte	$CC
08333 1CF1                        76            .byte	$76
08334 1CF2                        00            .byte	0
08335 1CF3                        00            .byte	0
08336 1CF4                        00            .byte	0
08337                                           ! 1219  0x00, 0x00, 0x00, 0x00,
08338 1CF5                        00            .byte	0
08339 1CF6                        00            .byte	0
08340 1CF7                        00            .byte	0
08341                                           ! 1219  0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08342 1CF8                        00            .byte	0
08343 1CF9                        00            .byte	0
08344 1CFA                        7C            .byte	$7C
08345 1CFB                        C6            .byte	$C6
08346 1CFC                        FE            .byte	$FE
08347 1CFD                        C0            .byte	$C0
08348 1CFE                        C6            .byte	$C6
08349 1CFF                        7C            .byte	$7C
08350 1D00                        00            .byte	0
08351 1D01                        00            .byte	0
08352 1D02                        00            .byte	0
08353                                           ! 1220  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08354 1D03                        00            .byte	0
08355 1D04                        00            .byte	0
08356 1D05                        38            .byte	$38
08357 1D06                        6C            .byte	$6C
08358 1D07                        64            .byte	$64
08359 1D08                        60            .byte	$60
08360 1D09                        F0            .byte	$F0
08361 1D0A                        60            .byte	$60
08362 1D0B                        60            .byte	$60
08363 1D0C                        60            .byte	$60
08364 1D0D                        F0            .byte	$F0
08365 1D0E                        00            .byte	0
08366 1D0F                        00            .byte	0
08367 1D10                        00            .byte	0
08368                                           ! 1221  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08369 1D11                        00            .byte	0
08370 1D12                        00            .byte	0
08371 1D13                        00            .byte	0
08372 1D14                        00            .byte	0
08373 1D15                        00            .byte	0
08374 1D16                        76            .byte	$76
08375 1D17                        CC            .byte	$CC
08376 1D18                        CC            .byte	$CC
08377 1D19                        CC            .byte	$CC
08378 1D1A                        7C            .byte	$7C
08379 1D1B                        0C            .byte	$C
08380 1D1C                        CC            .byte	$CC
08381 1D1D                        78            .byte	$78
08382 1D1E                        00            .byte	0
08383                                           ! 1222  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08384 1D1F                        00            .byte	0
08385 1D20                        00            .byte	0
08386 1D21                        E0            .byte	$E0
08387 1D22                        60            .byte	$60
08388 1D23                        60            .byte	$60
08389 1D24                        6C            .byte	$6C
08390 1D25                        76            .byte	$76
08391 1D26                        66            .byte	$66
08392 1D27                        66            .byte	$66
08393 1D28                        66            .byte	$66
08394 1D29                        E6            .byte	$E6
08395 1D2A                        00            .byte	0
08396 1D2B                        00            .byte	0
08397 1D2C                        00            .byte	0
08398                                           ! 1223  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08399 1D2D                        00            .byte	0
08400 1D2E                        00            .byte	0
08401 1D2F                        18            .byte	$18
08402 1D30                        18            .byte	$18
08403 1D31                        00            .byte	0
08404 1D32                        38            .byte	$38
08405 1D33                        18            .byte	$18
08406 1D34                        18            .byte	$18
08407 1D35                        18            .byte	$18
08408 1D36                        18            .byte	$18
08409 1D37                        3C            .byte	$3C
08410 1D38                        00            .byte	0
08411 1D39                        00            .byte	0
08412 1D3A                        00            .byte	0
08413                                           ! 1224  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08414 1D3B                        00            .byte	0
08415 1D3C                        00            .byte	0
08416 1D3D                        06            .byte	6
08417 1D3E                        06            .byte	6
08418 1D3F                        00            .byte	0
08419 1D40                        0E            .byte	$E
08420 1D41                        06            .byte	6
08421 1D42                        06            .byte	6
08422 1D43                        06            .byte	6
08423 1D44                        06            .byte	6
08424 1D45                        66            .byte	$66
08425 1D46                        66            .byte	$66
08426 1D47                        3C            .byte	$3C
08427 1D48                        00            .byte	0
08428                                           ! 1225  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08429 1D49                        00            .byte	0
08430 1D4A                        00            .byte	0
08431 1D4B                        E0            .byte	$E0
08432 1D4C                        60            .byte	$60
08433 1D4D                        60            .byte	$60
08434 1D4E                        66            .byte	$66
08435 1D4F                        6C            .byte	$6C
08436 1D50                        78            .byte	$78
08437 1D51                        6C            .byte	$6C
08438 1D52                        66            .byte	$66
08439 1D53                        E6            .byte	$E6
08440 1D54                        00            .byte	0
08441 1D55                        00            .byte	0
08442 1D56                        00            .byte	0
08443                                           ! 1226  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08444 1D57                        00            .byte	0
08445 1D58                        00            .byte	0
08446 1D59                        38            .byte	$38
08447 1D5A                        18            .byte	$18
08448 1D5B                        18            .byte	$18
08449 1D5C                        18            .byte	$18
08450 1D5D                        18            .byte	$18
08451 1D5E                        18            .byte	$18
08452 1D5F                        18            .byte	$18
08453 1D60                        18            .byte	$18
08454 1D61                        3C            .byte	$3C
08455 1D62                        00            .byte	0
08456 1D63                        00            .byte	0
08457 1D64                        00            .byte	0
08458                                           ! 1227  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08459 1D65                        00            .byte	0
08460 1D66                        00            .byte	0
08461 1D67                        00            .byte	0
08462 1D68                        00            .byte	0
08463 1D69                        00            .byte	0
08464 1D6A                        EC            .byte	$EC
08465 1D6B                        FE            .byte	$FE
08466 1D6C                        D6            .byte	$D6
08467 1D6D                        D6            .byte	$D6
08468 1D6E                        D6            .byte	$D6
08469 1D6F                        C6            .byte	$C6
08470 1D70                        00            .byte	0
08471 1D71                        00            .byte	0
08472 1D72                        00            .byte	0
08473                                           ! 1228  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08474 1D73                        00            .byte	0
08475 1D74                        00            .byte	0
08476 1D75                        00            .byte	0
08477 1D76                        00            .byte	0
08478 1D77                        00            .byte	0
08479 1D78                        DC            .byte	$DC
08480 1D79                        66            .byte	$66
08481 1D7A                        66            .byte	$66
08482 1D7B                        66            .byte	$66
08483 1D7C                        66            .byte	$66
08484 1D7D                        66            .byte	$66
08485 1D7E                        00            .byte	0
08486 1D7F                        00            .byte	0
08487 1D80                        00            .byte	0
08488                                           ! 1229  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08489 1D81                        00            .byte	0
08490 1D82                        00            .byte	0
08491 1D83                        00            .byte	0
08492 1D84                        00            .byte	0
08493 1D85                        00            .byte	0
08494 1D86                        7C            .byte	$7C
08495 1D87                        C6            .byte	$C6
08496 1D88                        C6            .byte	$C6
08497 1D89                        C6            .byte	$C6
08498 1D8A                        C6            .byte	$C6
08499 1D8B                        7C            .byte	$7C
08500 1D8C                        00            .byte	0
08501 1D8D                        00            .byte	0
08502 1D8E                        00            .byte	0
08503                                           ! 1230  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08504 1D8F                        00            .byte	0
08505 1D90                        00            .byte	0
08506 1D91                        00            .byte	0
08507 1D92                        00            .byte	0
08508 1D93                        00            .byte	0
08509 1D94                        DC            .byte	$DC
08510 1D95                        66            .byte	$66
08511 1D96                        66            .byte	$66
08512 1D97                        66            .byte	$66
08513 1D98                        7C            .byte	$7C
08514 1D99                        60            .byte	$60
08515 1D9A                        60            .byte	$60
08516 1D9B                        F0            .byte	$F0
08517 1D9C                        00            .byte	0
08518                                           ! 1231  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08519 1D9D                        00            .byte	0
08520 1D9E                        00            .byte	0
08521 1D9F                        00            .byte	0
08522 1DA0                        00            .byte	0
08523 1DA1                        00            .byte	0
08524 1DA2                        76            .byte	$76
08525 1DA3                        CC            .byte	$CC
08526 1DA4                        CC            .byte	$CC
08527 1DA5                        CC            .byte	$CC
08528 1DA6                        7C            .byte	$7C
08529 1DA7                        0C            .byte	$C
08530 1DA8                        0C            .byte	$C
08531 1DA9                        1E            .byte	$1E
08532 1DAA                        00            .byte	0
08533                                           ! 1232  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08534 1DAB                        00            .byte	0
08535 1DAC                        00            .byte	0
08536 1DAD                        00            .byte	0
08537 1DAE                        00            .byte	0
08538 1DAF                        00            .byte	0
08539 1DB0                        DC            .byte	$DC
08540 1DB1                        76            .byte	$76
08541 1DB2                        66            .byte	$66
08542 1DB3                        60            .byte	$60
08543 1DB4                        60            .byte	$60
08544 1DB5                        F0            .byte	$F0
08545 1DB6                        00            .byte	0
08546 1DB7                        00            .byte	0
08547 1DB8                        00            .byte	0
08548                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08549 1DB9                        00            .byte	0
08550 1DBA                        00            .byte	0
08551 1DBB                        00            .byte	0
08552 1DBC                        00            .byte	0
08553 1DBD                        00            .byte	0
08554 1DBE                        7C            .byte	$7C
08555 1DBF                        C6            .byte	$C6
08556 1DC0                        70            .byte	$70
08557 1DC1                        1C            .byte	$1C
08558 1DC2                        C6            .byte	$C6
08559 1DC3                        7C            .byte	$7C
08560 1DC4                        00            .byte	0
08561 1DC5                        00            .byte	0
08562 1DC6                        00            .byte	0
08563                                           ! 1234  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08564 1DC7                        00            .byte	0
08565 1DC8                        00            .byte	0
08566 1DC9                        10            .byte	$10
08567 1DCA                        30            .byte	$30
08568 1DCB                        30            .byte	$30
08569 1DCC                        FC            .byte	$FC
08570 1DCD                        30            .byte	$30
08571 1DCE                        30            .byte	$30
08572 1DCF                        30            .byte	$30
08573 1DD0                        36            .byte	$36
08574 1DD1                        1C            .byte	$1C
08575 1DD2                        00            .byte	0
08576 1DD3                        00            .byte	0
08577 1DD4                        00            .byte	0
08578                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08579 1DD5                        00            .byte	0
08580 1DD6                        00            .byte	0
08581 1DD7                        00            .byte	0
08582 1DD8                        00            .byte	0
08583 1DD9                        00            .byte	0
08584 1DDA                        CC            .byte	$CC
08585 1DDB                        CC            .byte	$CC
08586 1DDC                        CC            .byte	$CC
08587 1DDD                        CC            .byte	$CC
08588 1DDE                        CC            .byte	$CC
08589 1DDF                        76            .byte	$76
08590 1DE0                        00            .byte	0
08591 1DE1                        00            .byte	0
08592 1DE2                        00            .byte	0
08593                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08594 1DE3                        00            .byte	0
08595 1DE4                        00            .byte	0
08596 1DE5                        00            .byte	0
08597 1DE6                        00            .byte	0
08598 1DE7                        00            .byte	0
08599 1DE8                        66            .byte	$66
08600 1DE9                        66            .byte	$66
08601 1DEA                        66            .byte	$66
08602 1DEB                        66            .byte	$66
08603 1DEC                        3C            .byte	$3C
08604 1DED                        18            .byte	$18
08605 1DEE                        00            .byte	0
08606 1DEF                        00            .byte	0
08607 1DF0                        00            .byte	0
08608                                           ! 1237  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08609 1DF1                        00            .byte	0
08610 1DF2                        00            .byte	0
08611 1DF3                        00            .byte	0
08612 1DF4                        00            .byte	0
08613 1DF5                        00            .byte	0
08614 1DF6                        C6            .byte	$C6
08615 1DF7                        C6            .byte	$C6
08616 1DF8                        D6            .byte	$D6
08617 1DF9                        D6            .byte	$D6
08618 1DFA                        FE            .byte	$FE
08619 1DFB                        6C            .byte	$6C
08620 1DFC                        00            .byte	0
08621 1DFD                        00            .byte	0
08622 1DFE                        00            .byte	0
08623                                           ! 1238  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00,
08624 1DFF                        00            .byte	0
08625 1E00                        00            .byte	0
08626 1E01                        00            .byte	0
08627 1E02                        00            .byte	0
08628 1E03                        00            .byte	0
08629 1E04                        C6            .byte	$C6
08630 1E05                        6C            .byte	$6C
08631 1E06                        38            .byte	$38
08632 1E07                        38            .byte	$38
08633 1E08                        6C            .byte	$6C
08634 1E09                        C6            .byte	$C6
08635 1E0A                        00            .byte	0
08636 1E0B                        00            .byte	0
08637 1E0C                        00            .byte	0
08638                                           ! 1239  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08639 1E0D                        00            .byte	0
08640 1E0E                        00            .byte	0
08641 1E0F                        00            .byte	0
08642 1E10                        00            .byte	0
08643 1E11                        00            .byte	0
08644 1E12                        C6            .byte	$C6
08645 1E13                        C6            .byte	$C6
08646 1E14                        C6            .byte	$C6
08647 1E15                        C6            .byte	$C6
08648 1E16                        7E            .byte	$7E
08649 1E17                        06            .byte	6
08650 1E18                        0C            .byte	$C
08651 1E19                        F8            .byte	$F8
08652 1E1A                        00            .byte	0
08653                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08654 1E1B                        00            .byte	0
08655 1E1C                        00            .byte	0
08656 1E1D                        00            .byte	0
08657 1E1E                        00            .byte	0
08658 1E1F                        00            .byte	0
08659 1E20                        FE            .byte	$FE
08660 1E21                        CC            .byte	$CC
08661 1E22                        18            .byte	$18
08662 1E23                        30            .byte	$30
08663 1E24                        66            .byte	$66
08664 1E25                        FE            .byte	$FE
08665 1E26                        00            .byte	0
08666 1E27                        00            .byte	0
08667 1E28                        00            .byte	0
08668                                           ! 1241  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08669 1E29                        00            .byte	0
08670 1E2A                        00            .byte	0
08671 1E2B                        0E            .byte	$E
08672 1E2C                        18            .byte	$18
08673 1E2D                        18            .byte	$18
08674 1E2E                        18            .byte	$18
08675 1E2F                        70            .byte	$70
08676 1E30                        18            .byte	$18
08677 1E31                        18            .byte	$18
08678 1E32                        18            .byte	$18
08679 1E33                        0E            .byte	$E
08680 1E34                        00            .byte	0
08681 1E35                        00            .byte	0
08682 1E36                        00            .byte	0
08683                                           ! 1242  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08684 1E37                        00            .byte	0
08685 1E38                        00            .byte	0
08686 1E39                        18            .byte	$18
08687 1E3A                        18            .byte	$18
08688 1E3B                        18            .byte	$18
08689 1E3C                        18            .byte	$18
08690 1E3D                        00            .byte	0
08691 1E3E                        18            .byte	$18
08692 1E3F                        18            .byte	$18
08693 1E40                        18            .byte	$18
08694 1E41                        18            .byte	$18
08695 1E42                        00            .byte	0
08696 1E43                        00            .byte	0
08697 1E44                        00            .byte	0
08698                                           ! 1243  0x00, 0x00, 0x70, 0x18, 0x18, 0
08699 1E45                        00            .byte	0
08700 1E46                        00            .byte	0
08701 1E47                        70            .byte	$70
08702 1E48                        18            .byte	$18
08703 1E49                        18            .byte	$18
08704                                           ! 1243 x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08705 1E4A                        18            .byte	$18
08706 1E4B                        0E            .byte	$E
08707 1E4C                        18            .byte	$18
08708 1E4D                        18            .byte	$18
08709 1E4E                        18            .byte	$18
08710 1E4F                        70            .byte	$70
08711 1E50                        00            .byte	0
08712 1E51                        00            .byte	0
08713 1E52                        00            .byte	0
08714                                           ! 1244  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08715 1E53                        00            .byte	0
08716 1E54                        00            .byte	0
08717 1E55                        76            .byte	$76
08718 1E56                        DC            .byte	$DC
08719 1E57                        00            .byte	0
08720 1E58                        00            .byte	0
08721 1E59                        00            .byte	0
08722 1E5A                        00            .byte	0
08723 1E5B                        00            .byte	0
08724 1E5C                        00            .byte	0
08725 1E5D                        00            .byte	0
08726 1E5E                        00            .byte	0
08727 1E5F                        00            .byte	0
08728 1E60                        00            .byte	0
08729                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08730 1E61                        00            .byte	0
08731 1E62                        00            .byte	0
08732 1E63                        00            .byte	0
08733 1E64                        00            .byte	0
08734 1E65                        10            .byte	$10
08735 1E66                        38            .byte	$38
08736 1E67                        6C            .byte	$6C
08737 1E68                        C6            .byte	$C6
08738 1E69                        C6            .byte	$C6
08739 1E6A                        FE            .byte	$FE
08740 1E6B                        00            .byte	0
08741 1E6C                        00            .byte	0
08742 1E6D                        00            .byte	0
08743 1E6E                        00            .byte	0
08744                                           ! 1246  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08745 1E6F                        00            .byte	0
08746 1E70                        00            .byte	0
08747 1E71                        3C            .byte	$3C
08748 1E72                        66            .byte	$66
08749 1E73                        C2            .byte	$C2
08750 1E74                        C0            .byte	$C0
08751 1E75                        C0            .byte	$C0
08752 1E76                        C2            .byte	$C2
08753 1E77                        66            .byte	$66
08754 1E78                        3C            .byte	$3C
08755 1E79                        0C            .byte	$C
08756 1E7A                        06            .byte	6
08757 1E7B                        7C            .byte	$7C
08758 1E7C                        00            .byte	0
08759                                           ! 1247  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08760 1E7D                        00            .byte	0
08761 1E7E                        00            .byte	0
08762 1E7F                        CC            .byte	$CC
08763 1E80                        CC            .byte	$CC
08764 1E81                        00            .byte	0
08765 1E82                        CC            .byte	$CC
08766 1E83                        CC            .byte	$CC
08767 1E84                        CC            .byte	$CC
08768 1E85                        CC            .byte	$CC
08769 1E86                        CC            .byte	$CC
08770 1E87                        76            .byte	$76
08771 1E88                        00            .byte	0
08772 1E89                        00            .byte	0
08773 1E8A                        00            .byte	0
08774                                           ! 1248  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08775 1E8B                        00            .byte	0
08776 1E8C                        0C            .byte	$C
08777 1E8D                        18            .byte	$18
08778 1E8E                        30            .byte	$30
08779 1E8F                        00            .byte	0
08780 1E90                        7C            .byte	$7C
08781 1E91                        C6            .byte	$C6
08782 1E92                        FE            .byte	$FE
08783 1E93                        C0            .byte	$C0
08784 1E94                        C6            .byte	$C6
08785 1E95                        7C            .byte	$7C
08786 1E96                        00            .byte	0
08787 1E97                        00            .byte	0
08788 1E98                        00            .byte	0
08789                                           ! 1249  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08790 1E99                        00            .byte	0
08791 1E9A                        10            .byte	$10
08792 1E9B                        38            .byte	$38
08793 1E9C                        6C            .byte	$6C
08794 1E9D                        00            .byte	0
08795 1E9E                        78            .byte	$78
08796 1E9F                        0C            .byte	$C
08797 1EA0                        7C            .byte	$7C
08798 1EA1                        CC            .byte	$CC
08799 1EA2                        CC            .byte	$CC
08800 1EA3                        76            .byte	$76
08801 1EA4                        00            .byte	0
08802 1EA5                        00            .byte	0
08803 1EA6                        00            .byte	0
08804                                           ! 1250  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08805 1EA7                        00            .byte	0
08806 1EA8                        00            .byte	0
08807 1EA9                        CC            .byte	$CC
08808 1EAA                        CC            .byte	$CC
08809 1EAB                        00            .byte	0
08810 1EAC                        78            .byte	$78
08811 1EAD                        0C            .byte	$C
08812 1EAE                        7C            .byte	$7C
08813 1EAF                        CC            .byte	$CC
08814 1EB0                        CC            .byte	$CC
08815 1EB1                        76            .byte	$76
08816 1EB2                        00            .byte	0
08817 1EB3                        00            .byte	0
08818 1EB4                        00            .byte	0
08819                                           ! 1251  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08820 1EB5                        00            .byte	0
08821 1EB6                        60            .byte	$60
08822 1EB7                        30            .byte	$30
08823 1EB8                        18            .byte	$18
08824 1EB9                        00            .byte	0
08825 1EBA                        78            .byte	$78
08826 1EBB                        0C            .byte	$C
08827 1EBC                        7C            .byte	$7C
08828 1EBD                        CC            .byte	$CC
08829 1EBE                        CC            .byte	$CC
08830 1EBF                        76            .byte	$76
08831 1EC0                        00            .byte	0
08832 1EC1                        00            .byte	0
08833 1EC2                        00            .byte	0
08834                                           ! 1252  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08835 1EC3                        00            .byte	0
08836 1EC4                        38            .byte	$38
08837 1EC5                        6C            .byte	$6C
08838 1EC6                        38            .byte	$38
08839 1EC7                        00            .byte	0
08840 1EC8                        78            .byte	$78
08841 1EC9                        0C            .byte	$C
08842 1ECA                        7C            .byte	$7C
08843 1ECB                        CC            .byte	$CC
08844 1ECC                        CC            .byte	$CC
08845 1ECD                        76            .byte	$76
08846 1ECE                        00            .byte	0
08847 1ECF                        00            .byte	0
08848 1ED0                        00            .byte	0
08849                                           ! 1253  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08850 1ED1                        00            .byte	0
08851 1ED2                        00            .byte	0
08852 1ED3                        00            .byte	0
08853 1ED4                        00            .byte	0
08854 1ED5                        3C            .byte	$3C
08855 1ED6                        66            .byte	$66
08856 1ED7                        60            .byte	$60
08857 1ED8                        66            .byte	$66
08858 1ED9                        3C            .byte	$3C
08859 1EDA                        0C            .byte	$C
08860 1EDB                        06            .byte	6
08861 1EDC                        3C            .byte	$3C
08862 1EDD                        00            .byte	0
08863 1EDE                        00            .byte	0
08864                                           ! 1254  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08865 1EDF                        00            .byte	0
08866 1EE0                        10            .byte	$10
08867 1EE1                        38            .byte	$38
08868 1EE2                        6C            .byte	$6C
08869 1EE3                        00            .byte	0
08870 1EE4                        7C            .byte	$7C
08871 1EE5                        C6            .byte	$C6
08872 1EE6                        FE            .byte	$FE
08873 1EE7                        C0            .byte	$C0
08874 1EE8                        C6            .byte	$C6
08875 1EE9                        7C            .byte	$7C
08876 1EEA                        00            .byte	0
08877 1EEB                        00            .byte	0
08878 1EEC                        00            .byte	0
08879                                           ! 1255  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08880 1EED                        00            .byte	0
08881 1EEE                        00            .byte	0
08882 1EEF                        CC            .byte	$CC
08883 1EF0                        CC            .byte	$CC
08884 1EF1                        00            .byte	0
08885 1EF2                        7C            .byte	$7C
08886 1EF3                        C6            .byte	$C6
08887 1EF4                        FE            .byte	$FE
08888 1EF5                        C0            .byte	$C0
08889 1EF6                        C6            .byte	$C6
08890 1EF7                        7C            .byte	$7C
08891 1EF8                        00            .byte	0
08892 1EF9                        00            .byte	0
08893 1EFA                        00            .byte	0
08894                                           ! 1256  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08895 1EFB                        00            .byte	0
08896 1EFC                        60            .byte	$60
08897 1EFD                        30            .byte	$30
08898 1EFE                        18            .byte	$18
08899 1EFF                        00            .byte	0
08900 1F00                        7C            .byte	$7C
08901 1F01                        C6            .byte	$C6
08902 1F02                        FE            .byte	$FE
08903 1F03                        C0            .byte	$C0
08904 1F04                        C6            .byte	$C6
08905 1F05                        7C            .byte	$7C
08906 1F06                        00            .byte	0
08907 1F07                        00            .byte	0
08908 1F08                        00            .byte	0
08909                                           ! 1257  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08910 1F09                        00            .byte	0
08911 1F0A                        00            .byte	0
08912 1F0B                        66            .byte	$66
08913 1F0C                        66            .byte	$66
08914 1F0D                        00            .byte	0
08915 1F0E                        38            .byte	$38
08916 1F0F                        18            .byte	$18
08917 1F10                        18            .byte	$18
08918 1F11                        18            .byte	$18
08919 1F12                        18            .byte	$18
08920 1F13                        3C            .byte	$3C
08921 1F14                        00            .byte	0
08922 1F15                        00            .byte	0
08923 1F16                        00            .byte	0
08924                                           ! 1258  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08925 1F17                        00            .byte	0
08926 1F18                        18            .byte	$18
08927 1F19                        3C            .byte	$3C
08928 1F1A                        66            .byte	$66
08929 1F1B                        00            .byte	0
08930 1F1C                        38            .byte	$38
08931 1F1D                        18            .byte	$18
08932 1F1E                        18            .byte	$18
08933 1F1F                        18            .byte	$18
08934 1F20                        18            .byte	$18
08935 1F21                        3C            .byte	$3C
08936 1F22                        00            .byte	0
08937 1F23                        00            .byte	0
08938 1F24                        00            .byte	0
08939                                           ! 1259  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08940 1F25                        00            .byte	0
08941 1F26                        60            .byte	$60
08942 1F27                        30            .byte	$30
08943 1F28                        18            .byte	$18
08944 1F29                        00            .byte	0
08945 1F2A                        38            .byte	$38
08946 1F2B                        18            .byte	$18
08947 1F2C                        18            .byte	$18
08948 1F2D                        18            .byte	$18
08949 1F2E                        18            .byte	$18
08950 1F2F                        3C            .byte	$3C
08951 1F30                        00            .byte	0
08952 1F31                        00            .byte	0
08953 1F32                        00            .byte	0
08954                                           ! 1260  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08955 1F33                        00            .byte	0
08956 1F34                        C6            .byte	$C6
08957 1F35                        C6            .byte	$C6
08958 1F36                        10            .byte	$10
08959 1F37                        38            .byte	$38
08960 1F38                        6C            .byte	$6C
08961 1F39                        C6            .byte	$C6
08962 1F3A                        C6            .byte	$C6
08963 1F3B                        FE            .byte	$FE
08964 1F3C                        C6            .byte	$C6
08965 1F3D                        C6            .byte	$C6
08966 1F3E                        00            .byte	0
08967 1F3F                        00            .byte	0
08968 1F40                        00            .byte	0
08969                                           ! 1261  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08970 1F41                        38            .byte	$38
08971 1F42                        6C            .byte	$6C
08972 1F43                        38            .byte	$38
08973 1F44                        00            .byte	0
08974 1F45                        38            .byte	$38
08975 1F46                        6C            .byte	$6C
08976 1F47                        C6            .byte	$C6
08977 1F48                        C6            .byte	$C6
08978 1F49                        FE            .byte	$FE
08979 1F4A                        C6            .byte	$C6
08980 1F4B                        C6            .byte	$C6
08981 1F4C                        00            .byte	0
08982 1F4D                        00            .byte	0
08983 1F4E                        00            .byte	0
08984                                           ! 1262  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08985 1F4F                        18            .byte	$18
08986 1F50                        30            .byte	$30
08987 1F51                        60            .byte	$60
08988 1F52                        00            .byte	0
08989 1F53                        FE            .byte	$FE
08990 1F54                        66            .byte	$66
08991 1F55                        60            .byte	$60
08992 1F56                        7C            .byte	$7C
08993 1F57                        60            .byte	$60
08994 1F58                        66            .byte	$66
08995 1F59                        FE            .byte	$FE
08996 1F5A                        00            .byte	0
08997 1F5B                        00            .byte	0
08998 1F5C                        00            .byte	0
08999                                           ! 1263  0x00, 0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
09000 1F5D                        00            .byte	0
09001 1F5E                        00            .byte	0
09002 1F5F                        00            .byte	0
09003 1F60                        00            .byte	0
09004 1F61                        CC            .byte	$CC
09005 1F62                        76            .byte	$76
09006 1F63                        36            .byte	$36
09007 1F64                        7E            .byte	$7E
09008 1F65                        D8            .byte	$D8
09009 1F66                        D8            .byte	$D8
09010 1F67                        6E            .byte	$6E
09011 1F68                        00            .byte	0
09012 1F69                        00            .byte	0
09013 1F6A                        00            .byte	0
09014                                           ! 1264  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
09015 1F6B                        00            .byte	0
09016 1F6C                        00            .byte	0
09017 1F6D                        3E            .byte	$3E
09018 1F6E                        6C            .byte	$6C
09019 1F6F                        CC            .byte	$CC
09020 1F70                        CC            .byte	$CC
09021 1F71                        FE            .byte	$FE
09022 1F72                        CC            .byte	$CC
09023 1F73                        CC            .byte	$CC
09024 1F74                        CC            .byte	$CC
09025 1F75                        CE            .byte	$CE
09026 1F76                        00            .byte	0
09027 1F77                        00            .byte	0
09028 1F78                        00            .byte	0
09029                                           ! 1265  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09030 1F79                        00            .byte	0
09031 1F7A                        10            .byte	$10
09032 1F7B                        38            .byte	$38
09033 1F7C                        6C            .byte	$6C
09034 1F7D                        00            .byte	0
09035 1F7E                        7C            .byte	$7C
09036 1F7F                        C6            .byte	$C6
09037 1F80                        C6            .byte	$C6
09038 1F81                        C6            .byte	$C6
09039 1F82                        C6            .byte	$C6
09040 1F83                        7C            .byte	$7C
09041 1F84                        00            .byte	0
09042 1F85                        00            .byte	0
09043 1F86                        00            .byte	0
09044                                           ! 1266  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09045 1F87                        00            .byte	0
09046 1F88                        00            .byte	0
09047 1F89                        C6            .byte	$C6
09048 1F8A                        C6            .byte	$C6
09049 1F8B                        00            .byte	0
09050 1F8C                        7C            .byte	$7C
09051 1F8D                        C6            .byte	$C6
09052 1F8E                        C6            .byte	$C6
09053 1F8F                        C6            .byte	$C6
09054 1F90                        C6            .byte	$C6
09055 1F91                        7C            .byte	$7C
09056 1F92                        00            .byte	0
09057 1F93                        00            .byte	0
09058 1F94                        00            .byte	0
09059                                           ! 1267  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc
09060 1F95                        00            .byte	0
09061 1F96                        60            .byte	$60
09062 1F97                        30            .byte	$30
09063 1F98                        18            .byte	$18
09064 1F99                        00            .byte	0
09065 1F9A                        7C            .byte	$7C
09066                                           ! 1267 6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09067 1F9B                        C6            .byte	$C6
09068 1F9C                        C6            .byte	$C6
09069 1F9D                        C6            .byte	$C6
09070 1F9E                        C6            .byte	$C6
09071 1F9F                        7C            .byte	$7C
09072 1FA0                        00            .byte	0
09073 1FA1                        00            .byte	0
09074 1FA2                        00            .byte	0
09075                                           ! 1268  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09076 1FA3                        00            .byte	0
09077 1FA4                        30            .byte	$30
09078 1FA5                        78            .byte	$78
09079 1FA6                        CC            .byte	$CC
09080 1FA7                        00            .byte	0
09081 1FA8                        CC            .byte	$CC
09082 1FA9                        CC            .byte	$CC
09083 1FAA                        CC            .byte	$CC
09084 1FAB                        CC            .byte	$CC
09085 1FAC                        CC            .byte	$CC
09086 1FAD                        76            .byte	$76
09087 1FAE                        00            .byte	0
09088 1FAF                        00            .byte	0
09089 1FB0                        00            .byte	0
09090                                           ! 1269  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09091 1FB1                        00            .byte	0
09092 1FB2                        60            .byte	$60
09093 1FB3                        30            .byte	$30
09094 1FB4                        18            .byte	$18
09095 1FB5                        00            .byte	0
09096 1FB6                        CC            .byte	$CC
09097 1FB7                        CC            .byte	$CC
09098 1FB8                        CC            .byte	$CC
09099 1FB9                        CC            .byte	$CC
09100 1FBA                        CC            .byte	$CC
09101 1FBB                        76            .byte	$76
09102 1FBC                        00            .byte	0
09103 1FBD                        00            .byte	0
09104 1FBE                        00            .byte	0
09105                                           ! 1270  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
09106 1FBF                        00            .byte	0
09107 1FC0                        00            .byte	0
09108 1FC1                        C6            .byte	$C6
09109 1FC2                        C6            .byte	$C6
09110 1FC3                        00            .byte	0
09111 1FC4                        C6            .byte	$C6
09112 1FC5                        C6            .byte	$C6
09113 1FC6                        C6            .byte	$C6
09114 1FC7                        C6            .byte	$C6
09115 1FC8                        7E            .byte	$7E
09116 1FC9                        06            .byte	6
09117 1FCA                        0C            .byte	$C
09118 1FCB                        78            .byte	$78
09119 1FCC                        00            .byte	0
09120                                           ! 1271  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
09121 1FCD                        00            .byte	0
09122 1FCE                        C6            .byte	$C6
09123 1FCF                        C6            .byte	$C6
09124 1FD0                        38            .byte	$38
09125 1FD1                        6C            .byte	$6C
09126 1FD2                        C6            .byte	$C6
09127 1FD3                        C6            .byte	$C6
09128 1FD4                        C6            .byte	$C6
09129 1FD5                        C6            .byte	$C6
09130 1FD6                        6C            .byte	$6C
09131 1FD7                        38            .byte	$38
09132 1FD8                        00            .byte	0
09133 1FD9                        00            .byte	0
09134 1FDA                        00            .byte	0
09135                                           ! 1272  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09136 1FDB                        00            .byte	0
09137 1FDC                        C6            .byte	$C6
09138 1FDD                        C6            .byte	$C6
09139 1FDE                        00            .byte	0
09140 1FDF                        C6            .byte	$C6
09141 1FE0                        C6            .byte	$C6
09142 1FE1                        C6            .byte	$C6
09143 1FE2                        C6            .byte	$C6
09144 1FE3                        C6            .byte	$C6
09145 1FE4                        C6            .byte	$C6
09146 1FE5                        7C            .byte	$7C
09147 1FE6                        00            .byte	0
09148 1FE7                        00            .byte	0
09149 1FE8                        00            .byte	0
09150                                           ! 1273  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
09151 1FE9                        00            .byte	0
09152 1FEA                        18            .byte	$18
09153 1FEB                        18            .byte	$18
09154 1FEC                        3C            .byte	$3C
09155 1FED                        66            .byte	$66
09156 1FEE                        60            .byte	$60
09157 1FEF                        60            .byte	$60
09158 1FF0                        66            .byte	$66
09159 1FF1                        3C            .byte	$3C
09160 1FF2                        18            .byte	$18
09161 1FF3                        18            .byte	$18
09162 1FF4                        00            .byte	0
09163 1FF5                        00            .byte	0
09164 1FF6                        00            .byte	0
09165                                           ! 1274  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
09166 1FF7                        00            .byte	0
09167 1FF8                        38            .byte	$38
09168 1FF9                        6C            .byte	$6C
09169 1FFA                        64            .byte	$64
09170 1FFB                        60            .byte	$60
09171 1FFC                        F0            .byte	$F0
09172 1FFD                        60            .byte	$60
09173 1FFE                        60            .byte	$60
09174 1FFF                        60            .byte	$60
09175 2000                        E6            .byte	$E6
09176 2001                        FC            .byte	$FC
09177 2002                        00            .byte	0
09178 2003                        00            .byte	0
09179 2004                        00            .byte	0
09180                                           ! 1275  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
09181 2005                        00            .byte	0
09182 2006                        00            .byte	0
09183 2007                        66            .byte	$66
09184 2008                        66            .byte	$66
09185 2009                        3C            .byte	$3C
09186 200A                        18            .byte	$18
09187 200B                        7E            .byte	$7E
09188 200C                        18            .byte	$18
09189 200D                        7E            .byte	$7E
09190 200E                        18            .byte	$18
09191 200F                        18            .byte	$18
09192 2010                        00            .byte	0
09193 2011                        00            .byte	0
09194 2012                        00            .byte	0
09195                                           ! 1276  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
09196 2013                        00            .byte	0
09197 2014                        F8            .byte	$F8
09198 2015                        CC            .byte	$CC
09199 2016                        CC            .byte	$CC
09200 2017                        F8            .byte	$F8
09201 2018                        C4            .byte	$C4
09202 2019                        CC            .byte	$CC
09203 201A                        DE            .byte	$DE
09204 201B                        CC            .byte	$CC
09205 201C                        CC            .byte	$CC
09206 201D                        C6            .byte	$C6
09207 201E                        00            .byte	0
09208 201F                        00            .byte	0
09209 2020                        00            .byte	0
09210                                           ! 1277  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
09211 2021                        00            .byte	0
09212 2022                        0E            .byte	$E
09213 2023                        1B            .byte	$1B
09214 2024                        18            .byte	$18
09215 2025                        18            .byte	$18
09216 2026                        18            .byte	$18
09217 2027                        7E            .byte	$7E
09218 2028                        18            .byte	$18
09219 2029                        18            .byte	$18
09220 202A                        18            .byte	$18
09221 202B                        18            .byte	$18
09222 202C                        D8            .byte	$D8
09223 202D                        70            .byte	$70
09224 202E                        00            .byte	0
09225                                           ! 1278  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09226 202F                        00            .byte	0
09227 2030                        18            .byte	$18
09228 2031                        30            .byte	$30
09229 2032                        60            .byte	$60
09230 2033                        00            .byte	0
09231 2034                        78            .byte	$78
09232 2035                        0C            .byte	$C
09233 2036                        7C            .byte	$7C
09234 2037                        CC            .byte	$CC
09235 2038                        CC            .byte	$CC
09236 2039                        76            .byte	$76
09237 203A                        00            .byte	0
09238 203B                        00            .byte	0
09239 203C                        00            .byte	0
09240                                           ! 1279  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
09241 203D                        00            .byte	0
09242 203E                        0C            .byte	$C
09243 203F                        18            .byte	$18
09244 2040                        30            .byte	$30
09245 2041                        00            .byte	0
09246 2042                        38            .byte	$38
09247 2043                        18            .byte	$18
09248 2044                        18            .byte	$18
09249 2045                        18            .byte	$18
09250 2046                        18            .byte	$18
09251 2047                        3C            .byte	$3C
09252 2048                        00            .byte	0
09253 2049                        00            .byte	0
09254 204A                        00            .byte	0
09255                                           ! 1280  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09256 204B                        00            .byte	0
09257 204C                        18            .byte	$18
09258 204D                        30            .byte	$30
09259 204E                        60            .byte	$60
09260 204F                        00            .byte	0
09261 2050                        7C            .byte	$7C
09262 2051                        C6            .byte	$C6
09263 2052                        C6            .byte	$C6
09264 2053                        C6            .byte	$C6
09265 2054                        C6            .byte	$C6
09266 2055                        7C            .byte	$7C
09267 2056                        00            .byte	0
09268 2057                        00            .byte	0
09269 2058                        00            .byte	0
09270                                           ! 1281  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09271 2059                        00            .byte	0
09272 205A                        18            .byte	$18
09273 205B                        30            .byte	$30
09274 205C                        60            .byte	$60
09275 205D                        00            .byte	0
09276 205E                        CC            .byte	$CC
09277 205F                        CC            .byte	$CC
09278 2060                        CC            .byte	$CC
09279 2061                        CC            .byte	$CC
09280 2062                        CC            .byte	$CC
09281 2063                        76            .byte	$76
09282 2064                        00            .byte	0
09283 2065                        00            .byte	0
09284 2066                        00            .byte	0
09285                                           ! 1282  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09286 2067                        00            .byte	0
09287 2068                        00            .byte	0
09288 2069                        76            .byte	$76
09289 206A                        DC            .byte	$DC
09290 206B                        00            .byte	0
09291 206C                        DC            .byte	$DC
09292 206D                        66            .byte	$66
09293 206E                        66            .byte	$66
09294 206F                        66            .byte	$66
09295 2070                        66            .byte	$66
09296 2071                        66            .byte	$66
09297 2072                        00            .byte	0
09298 2073                        00            .byte	0
09299 2074                        00            .byte	0
09300                                           ! 1283  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09301 2075                        76            .byte	$76
09302 2076                        DC            .byte	$DC
09303 2077                        00            .byte	0
09304 2078                        C6            .byte	$C6
09305 2079                        E6            .byte	$E6
09306 207A                        F6            .byte	$F6
09307 207B                        FE            .byte	$FE
09308 207C                        DE            .byte	$DE
09309 207D                        CE            .byte	$CE
09310 207E                        C6            .byte	$C6
09311 207F                        C6            .byte	$C6
09312 2080                        00            .byte	0
09313 2081                        00            .byte	0
09314 2082                        00            .byte	0
09315                                           ! 1284  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09316 2083                        00            .byte	0
09317 2084                        3C            .byte	$3C
09318 2085                        6C            .byte	$6C
09319 2086                        6C            .byte	$6C
09320 2087                        3E            .byte	$3E
09321 2088                        00            .byte	0
09322 2089                        7E            .byte	$7E
09323 208A                        00            .byte	0
09324 208B                        00            .byte	0
09325 208C                        00            .byte	0
09326 208D                        00            .byte	0
09327 208E                        00            .byte	0
09328 208F                        00            .byte	0
09329 2090                        00            .byte	0
09330                                           ! 1285  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09331 2091                        00            .byte	0
09332 2092                        38            .byte	$38
09333 2093                        6C            .byte	$6C
09334 2094                        6C            .byte	$6C
09335 2095                        38            .byte	$38
09336 2096                        00            .byte	0
09337 2097                        7C            .byte	$7C
09338 2098                        00            .byte	0
09339 2099                        00            .byte	0
09340 209A                        00            .byte	0
09341 209B                        00            .byte	0
09342 209C                        00            .byte	0
09343 209D                        00            .byte	0
09344 209E                        00            .byte	0
09345                                           ! 1286  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09346 209F                        00            .byte	0
09347 20A0                        00            .byte	0
09348 20A1                        30            .byte	$30
09349 20A2                        30            .byte	$30
09350 20A3                        00            .byte	0
09351 20A4                        30            .byte	$30
09352 20A5                        30            .byte	$30
09353 20A6                        60            .byte	$60
09354 20A7                        C6            .byte	$C6
09355 20A8                        C6            .byte	$C6
09356 20A9                        7C            .byte	$7C
09357 20AA                        00            .byte	0
09358 20AB                        00            .byte	0
09359 20AC                        00            .byte	0
09360                                           ! 1287  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09361 20AD                        00            .byte	0
09362 20AE                        00            .byte	0
09363 20AF                        00            .byte	0
09364 20B0                        00            .byte	0
09365 20B1                        00            .byte	0
09366 20B2                        00            .byte	0
09367 20B3                        FE            .byte	$FE
09368 20B4                        C0            .byte	$C0
09369 20B5                        C0            .byte	$C0
09370 20B6                        C0            .byte	$C0
09371 20B7                        00            .byte	0
09372 20B8                        00            .byte	0
09373 20B9                        00            .byte	0
09374 20BA                        00            .byte	0
09375                                           ! 1288  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09376 20BB                        00            .byte	0
09377 20BC                        00            .byte	0
09378 20BD                        00            .byte	0
09379 20BE                        00            .byte	0
09380 20BF                        00            .byte	0
09381 20C0                        00            .byte	0
09382 20C1                        FE            .byte	$FE
09383 20C2                        06            .byte	6
09384 20C3                        06            .byte	6
09385 20C4                        06            .byte	6
09386 20C5                        00            .byte	0
09387 20C6                        00            .byte	0
09388 20C7                        00            .byte	0
09389 20C8                        00            .byte	0
09390                                           ! 1289  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09391 20C9                        00            .byte	0
09392 20CA                        C0            .byte	$C0
09393 20CB                        C0            .byte	$C0
09394 20CC                        C6            .byte	$C6
09395 20CD                        CC            .byte	$CC
09396 20CE                        D8            .byte	$D8
09397 20CF                        30            .byte	$30
09398 20D0                        60            .byte	$60
09399 20D1                        DC            .byte	$DC
09400 20D2                        86            .byte	$86
09401 20D3                        0C            .byte	$C
09402 20D4                        18            .byte	$18
09403 20D5                        3E            .byte	$3E
09404 20D6                        00            .byte	0
09405                                           ! 1290  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09406 20D7                        00            .byte	0
09407 20D8                        C0            .byte	$C0
09408 20D9                        C0            .byte	$C0
09409 20DA                        C6            .byte	$C6
09410 20DB                        CC            .byte	$CC
09411 20DC                        D8            .byte	$D8
09412 20DD                        30            .byte	$30
09413 20DE                        66            .byte	$66
09414 20DF                        CE            .byte	$CE
09415 20E0                        9E            .byte	$9E
09416 20E1                        3E            .byte	$3E
09417 20E2                        06            .byte	6
09418 20E3                        06            .byte	6
09419 20E4                        00            .byte	0
09420                                           ! 1291  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c,
09421 20E5                        00            .byte	0
09422 20E6                        00            .byte	0
09423 20E7                        18            .byte	$18
09424 20E8                        18            .byte	$18
09425 20E9                        00            .byte	0
09426 20EA                        18            .byte	$18
09427 20EB                        18            .byte	$18
09428                                           ! 1291  0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09429 20EC                        3C            .byte	$3C
09430 20ED                        3C            .byte	$3C
09431 20EE                        3C            .byte	$3C
09432 20EF                        18            .byte	$18
09433 20F0                        00            .byte	0
09434 20F1                        00            .byte	0
09435 20F2                        00            .byte	0
09436                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09437 20F3                        00            .byte	0
09438 20F4                        00            .byte	0
09439 20F5                        00            .byte	0
09440 20F6                        00            .byte	0
09441 20F7                        36            .byte	$36
09442 20F8                        6C            .byte	$6C
09443 20F9                        D8            .byte	$D8
09444 20FA                        6C            .byte	$6C
09445 20FB                        36            .byte	$36
09446 20FC                        00            .byte	0
09447 20FD                        00            .byte	0
09448 20FE                        00            .byte	0
09449 20FF                        00            .byte	0
09450 2100                        00            .byte	0
09451                                           ! 1293  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09452 2101                        00            .byte	0
09453 2102                        00            .byte	0
09454 2103                        00            .byte	0
09455 2104                        00            .byte	0
09456 2105                        D8            .byte	$D8
09457 2106                        6C            .byte	$6C
09458 2107                        36            .byte	$36
09459 2108                        6C            .byte	$6C
09460 2109                        D8            .byte	$D8
09461 210A                        00            .byte	0
09462 210B                        00            .byte	0
09463 210C                        00            .byte	0
09464 210D                        00            .byte	0
09465 210E                        00            .byte	0
09466                                           ! 1294  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09467 210F                        11            .byte	$11
09468 2110                        44            .byte	$44
09469 2111                        11            .byte	$11
09470 2112                        44            .byte	$44
09471 2113                        11            .byte	$11
09472 2114                        44            .byte	$44
09473 2115                        11            .byte	$11
09474 2116                        44            .byte	$44
09475 2117                        11            .byte	$11
09476 2118                        44            .byte	$44
09477 2119                        11            .byte	$11
09478 211A                        44            .byte	$44
09479 211B                        11            .byte	$11
09480 211C                        44            .byte	$44
09481                                           ! 1295  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09482 211D                        55            .byte	$55
09483 211E                        AA            .byte	$AA
09484 211F                        55            .byte	$55
09485 2120                        AA            .byte	$AA
09486 2121                        55            .byte	$55
09487 2122                        AA            .byte	$AA
09488 2123                        55            .byte	$55
09489 2124                        AA            .byte	$AA
09490 2125                        55            .byte	$55
09491 2126                        AA            .byte	$AA
09492 2127                        55            .byte	$55
09493 2128                        AA            .byte	$AA
09494 2129                        55            .byte	$55
09495 212A                        AA            .byte	$AA
09496                                           ! 1296  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09497 212B                        DD            .byte	$DD
09498 212C                        77            .byte	$77
09499 212D                        DD            .byte	$DD
09500 212E                        77            .byte	$77
09501 212F                        DD            .byte	$DD
09502 2130                        77            .byte	$77
09503 2131                        DD            .byte	$DD
09504 2132                        77            .byte	$77
09505 2133                        DD            .byte	$DD
09506 2134                        77            .byte	$77
09507 2135                        DD            .byte	$DD
09508 2136                        77            .byte	$77
09509 2137                        DD            .byte	$DD
09510 2138                        77            .byte	$77
09511                                           ! 1297  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09512 2139                        18            .byte	$18
09513 213A                        18            .byte	$18
09514 213B                        18            .byte	$18
09515 213C                        18            .byte	$18
09516 213D                        18            .byte	$18
09517 213E                        18            .byte	$18
09518 213F                        18            .byte	$18
09519 2140                        18            .byte	$18
09520 2141                        18            .byte	$18
09521 2142                        18            .byte	$18
09522 2143                        18            .byte	$18
09523 2144                        18            .byte	$18
09524 2145                        18            .byte	$18
09525 2146                        18            .byte	$18
09526                                           ! 1298  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09527 2147                        18            .byte	$18
09528 2148                        18            .byte	$18
09529 2149                        18            .byte	$18
09530 214A                        18            .byte	$18
09531 214B                        18            .byte	$18
09532 214C                        18            .byte	$18
09533 214D                        18            .byte	$18
09534 214E                        F8            .byte	$F8
09535 214F                        18            .byte	$18
09536 2150                        18            .byte	$18
09537 2151                        18            .byte	$18
09538 2152                        18            .byte	$18
09539 2153                        18            .byte	$18
09540 2154                        18            .byte	$18
09541                                           ! 1299  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09542 2155                        18            .byte	$18
09543 2156                        18            .byte	$18
09544 2157                        18            .byte	$18
09545 2158                        18            .byte	$18
09546 2159                        18            .byte	$18
09547 215A                        F8            .byte	$F8
09548 215B                        18            .byte	$18
09549 215C                        F8            .byte	$F8
09550 215D                        18            .byte	$18
09551 215E                        18            .byte	$18
09552 215F                        18            .byte	$18
09553 2160                        18            .byte	$18
09554 2161                        18            .byte	$18
09555 2162                        18            .byte	$18
09556                                           ! 1300  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09557 2163                        36            .byte	$36
09558 2164                        36            .byte	$36
09559 2165                        36            .byte	$36
09560 2166                        36            .byte	$36
09561 2167                        36            .byte	$36
09562 2168                        36            .byte	$36
09563 2169                        36            .byte	$36
09564 216A                        F6            .byte	$F6
09565 216B                        36            .byte	$36
09566 216C                        36            .byte	$36
09567 216D                        36            .byte	$36
09568 216E                        36            .byte	$36
09569 216F                        36            .byte	$36
09570 2170                        36            .byte	$36
09571                                           ! 1301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09572 2171                        00            .byte	0
09573 2172                        00            .byte	0
09574 2173                        00            .byte	0
09575 2174                        00            .byte	0
09576 2175                        00            .byte	0
09577 2176                        00            .byte	0
09578 2177                        00            .byte	0
09579 2178                        FE            .byte	$FE
09580 2179                        36            .byte	$36
09581 217A                        36            .byte	$36
09582 217B                        36            .byte	$36
09583 217C                        36            .byte	$36
09584 217D                        36            .byte	$36
09585 217E                        36            .byte	$36
09586                                           ! 1302  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09587 217F                        00            .byte	0
09588 2180                        00            .byte	0
09589 2181                        00            .byte	0
09590 2182                        00            .byte	0
09591 2183                        00            .byte	0
09592 2184                        F8            .byte	$F8
09593 2185                        18            .byte	$18
09594 2186                        F8            .byte	$F8
09595 2187                        18            .byte	$18
09596 2188                        18            .byte	$18
09597 2189                        18            .byte	$18
09598 218A                        18            .byte	$18
09599 218B                        18            .byte	$18
09600 218C                        18            .byte	$18
09601                                           ! 1303  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09602 218D                        36            .byte	$36
09603 218E                        36            .byte	$36
09604 218F                        36            .byte	$36
09605 2190                        36            .byte	$36
09606 2191                        36            .byte	$36
09607 2192                        F6            .byte	$F6
09608 2193                        06            .byte	6
09609 2194                        F6            .byte	$F6
09610 2195                        36            .byte	$36
09611 2196                        36            .byte	$36
09612 2197                        36            .byte	$36
09613 2198                        36            .byte	$36
09614 2199                        36            .byte	$36
09615 219A                        36            .byte	$36
09616                                           ! 1304  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09617 219B                        36            .byte	$36
09618 219C                        36            .byte	$36
09619 219D                        36            .byte	$36
09620 219E                        36            .byte	$36
09621 219F                        36            .byte	$36
09622 21A0                        36            .byte	$36
09623 21A1                        36            .byte	$36
09624 21A2                        36            .byte	$36
09625 21A3                        36            .byte	$36
09626 21A4                        36            .byte	$36
09627 21A5                        36            .byte	$36
09628 21A6                        36            .byte	$36
09629 21A7                        36            .byte	$36
09630 21A8                        36            .byte	$36
09631                                           ! 1305  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09632 21A9                        00            .byte	0
09633 21AA                        00            .byte	0
09634 21AB                        00            .byte	0
09635 21AC                        00            .byte	0
09636 21AD                        00            .byte	0
09637 21AE                        FE            .byte	$FE
09638 21AF                        06            .byte	6
09639 21B0                        F6            .byte	$F6
09640 21B1                        36            .byte	$36
09641 21B2                        36            .byte	$36
09642 21B3                        36            .byte	$36
09643 21B4                        36            .byte	$36
09644 21B5                        36            .byte	$36
09645 21B6                        36            .byte	$36
09646                                           ! 1306  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09647 21B7                        36            .byte	$36
09648 21B8                        36            .byte	$36
09649 21B9                        36            .byte	$36
09650 21BA                        36            .byte	$36
09651 21BB                        36            .byte	$36
09652 21BC                        F6            .byte	$F6
09653 21BD                        06            .byte	6
09654 21BE                        FE            .byte	$FE
09655 21BF                        00            .byte	0
09656 21C0                        00            .byte	0
09657 21C1                        00            .byte	0
09658 21C2                        00            .byte	0
09659 21C3                        00            .byte	0
09660 21C4                        00            .byte	0
09661                                           ! 1307  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09662 21C5                        36            .byte	$36
09663 21C6                        36            .byte	$36
09664 21C7                        36            .byte	$36
09665 21C8                        36            .byte	$36
09666 21C9                        36            .byte	$36
09667 21CA                        36            .byte	$36
09668 21CB                        36            .byte	$36
09669 21CC                        FE            .byte	$FE
09670 21CD                        00            .byte	0
09671 21CE                        00            .byte	0
09672 21CF                        00            .byte	0
09673 21D0                        00            .byte	0
09674 21D1                        00            .byte	0
09675 21D2                        00            .byte	0
09676                                           ! 1308  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09677 21D3                        18            .byte	$18
09678 21D4                        18            .byte	$18
09679 21D5                        18            .byte	$18
09680 21D6                        18            .byte	$18
09681 21D7                        18            .byte	$18
09682 21D8                        F8            .byte	$F8
09683 21D9                        18            .byte	$18
09684 21DA                        F8            .byte	$F8
09685 21DB                        00            .byte	0
09686 21DC                        00            .byte	0
09687 21DD                        00            .byte	0
09688 21DE                        00            .byte	0
09689 21DF                        00            .byte	0
09690 21E0                        00            .byte	0
09691                                           ! 1309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09692 21E1                        00            .byte	0
09693 21E2                        00            .byte	0
09694 21E3                        00            .byte	0
09695 21E4                        00            .byte	0
09696 21E5                        00            .byte	0
09697 21E6                        00            .byte	0
09698 21E7                        00            .byte	0
09699 21E8                        F8            .byte	$F8
09700 21E9                        18            .byte	$18
09701 21EA                        18            .byte	$18
09702 21EB                        18            .byte	$18
09703 21EC                        18            .byte	$18
09704 21ED                        18            .byte	$18
09705 21EE                        18            .byte	$18
09706                                           ! 1310  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09707 21EF                        18            .byte	$18
09708 21F0                        18            .byte	$18
09709 21F1                        18            .byte	$18
09710 21F2                        18            .byte	$18
09711 21F3                        18            .byte	$18
09712 21F4                        18            .byte	$18
09713 21F5                        18            .byte	$18
09714 21F6                        1F            .byte	$1F
09715 21F7                        00            .byte	0
09716 21F8                        00            .byte	0
09717 21F9                        00            .byte	0
09718 21FA                        00            .byte	0
09719 21FB                        00            .byte	0
09720 21FC                        00            .byte	0
09721                                           ! 1311  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09722 21FD                        18            .byte	$18
09723 21FE                        18            .byte	$18
09724 21FF                        18            .byte	$18
09725 2200                        18            .byte	$18
09726 2201                        18            .byte	$18
09727 2202                        18            .byte	$18
09728 2203                        18            .byte	$18
09729 2204                        FF            .byte	$FF
09730 2205                        00            .byte	0
09731 2206                        00            .byte	0
09732 2207                        00            .byte	0
09733 2208                        00            .byte	0
09734 2209                        00            .byte	0
09735 220A                        00            .byte	0
09736                                           ! 1312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09737 220B                        00            .byte	0
09738 220C                        00            .byte	0
09739 220D                        00            .byte	0
09740 220E                        00            .byte	0
09741 220F                        00            .byte	0
09742 2210                        00            .byte	0
09743 2211                        00            .byte	0
09744 2212                        FF            .byte	$FF
09745 2213                        18            .byte	$18
09746 2214                        18            .byte	$18
09747 2215                        18            .byte	$18
09748 2216                        18            .byte	$18
09749 2217                        18            .byte	$18
09750 2218                        18            .byte	$18
09751                                           ! 1313  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09752 2219                        18            .byte	$18
09753 221A                        18            .byte	$18
09754 221B                        18            .byte	$18
09755 221C                        18            .byte	$18
09756 221D                        18            .byte	$18
09757 221E                        18            .byte	$18
09758 221F                        18            .byte	$18
09759 2220                        1F            .byte	$1F
09760 2221                        18            .byte	$18
09761 2222                        18            .byte	$18
09762 2223                        18            .byte	$18
09763 2224                        18            .byte	$18
09764 2225                        18            .byte	$18
09765 2226                        18            .byte	$18
09766                                           ! 1314  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09767 2227                        00            .byte	0
09768 2228                        00            .byte	0
09769 2229                        00            .byte	0
09770 222A                        00            .byte	0
09771 222B                        00            .byte	0
09772 222C                        00            .byte	0
09773 222D                        00            .byte	0
09774 222E                        FF            .byte	$FF
09775 222F                        00            .byte	0
09776 2230                        00            .byte	0
09777 2231                        00            .byte	0
09778 2232                        00            .byte	0
09779 2233                        00            .byte	0
09780 2234                        00            .byte	0
09781                                           ! 1315  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0
09782 2235                        18            .byte	$18
09783 2236                        18            .byte	$18
09784 2237                        18            .byte	$18
09785 2238                        18            .byte	$18
09786 2239                        18            .byte	$18
09787 223A                        18            .byte	$18
09788 223B                        18            .byte	$18
09789 223C                        FF            .byte	$FF
09790 223D                        18            .byte	$18
09791                                           ! 1315 x18, 0x18, 0x18, 0x18, 0x18,
09792 223E                        18            .byte	$18
09793 223F                        18            .byte	$18
09794 2240                        18            .byte	$18
09795 2241                        18            .byte	$18
09796 2242                        18            .byte	$18
09797                                           ! 1316  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09798 2243                        18            .byte	$18
09799 2244                        18            .byte	$18
09800 2245                        18            .byte	$18
09801 2246                        18            .byte	$18
09802 2247                        18            .byte	$18
09803 2248                        1F            .byte	$1F
09804 2249                        18            .byte	$18
09805 224A                        1F            .byte	$1F
09806 224B                        18            .byte	$18
09807 224C                        18            .byte	$18
09808 224D                        18            .byte	$18
09809 224E                        18            .byte	$18
09810 224F                        18            .byte	$18
09811 2250                        18            .byte	$18
09812                                           ! 1317  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09813 2251                        36            .byte	$36
09814 2252                        36            .byte	$36
09815 2253                        36            .byte	$36
09816 2254                        36            .byte	$36
09817 2255                        36            .byte	$36
09818 2256                        36            .byte	$36
09819 2257                        36            .byte	$36
09820 2258                        37            .byte	$37
09821 2259                        36            .byte	$36
09822 225A                        36            .byte	$36
09823 225B                        36            .byte	$36
09824 225C                        36            .byte	$36
09825 225D                        36            .byte	$36
09826 225E                        36            .byte	$36
09827                                           ! 1318  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09828 225F                        36            .byte	$36
09829 2260                        36            .byte	$36
09830 2261                        36            .byte	$36
09831 2262                        36            .byte	$36
09832 2263                        36            .byte	$36
09833 2264                        37            .byte	$37
09834 2265                        30            .byte	$30
09835 2266                        3F            .byte	$3F
09836 2267                        00            .byte	0
09837 2268                        00            .byte	0
09838 2269                        00            .byte	0
09839 226A                        00            .byte	0
09840 226B                        00            .byte	0
09841 226C                        00            .byte	0
09842                                           ! 1319  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09843 226D                        00            .byte	0
09844 226E                        00            .byte	0
09845 226F                        00            .byte	0
09846 2270                        00            .byte	0
09847 2271                        00            .byte	0
09848 2272                        3F            .byte	$3F
09849 2273                        30            .byte	$30
09850 2274                        37            .byte	$37
09851 2275                        36            .byte	$36
09852 2276                        36            .byte	$36
09853 2277                        36            .byte	$36
09854 2278                        36            .byte	$36
09855 2279                        36            .byte	$36
09856 227A                        36            .byte	$36
09857                                           ! 1320  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09858 227B                        36            .byte	$36
09859 227C                        36            .byte	$36
09860 227D                        36            .byte	$36
09861 227E                        36            .byte	$36
09862 227F                        36            .byte	$36
09863 2280                        F7            .byte	$F7
09864 2281                        00            .byte	0
09865 2282                        FF            .byte	$FF
09866 2283                        00            .byte	0
09867 2284                        00            .byte	0
09868 2285                        00            .byte	0
09869 2286                        00            .byte	0
09870 2287                        00            .byte	0
09871 2288                        00            .byte	0
09872                                           ! 1321  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09873 2289                        00            .byte	0
09874 228A                        00            .byte	0
09875 228B                        00            .byte	0
09876 228C                        00            .byte	0
09877 228D                        00            .byte	0
09878 228E                        FF            .byte	$FF
09879 228F                        00            .byte	0
09880 2290                        F7            .byte	$F7
09881 2291                        36            .byte	$36
09882 2292                        36            .byte	$36
09883 2293                        36            .byte	$36
09884 2294                        36            .byte	$36
09885 2295                        36            .byte	$36
09886 2296                        36            .byte	$36
09887                                           ! 1322  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09888 2297                        36            .byte	$36
09889 2298                        36            .byte	$36
09890 2299                        36            .byte	$36
09891 229A                        36            .byte	$36
09892 229B                        36            .byte	$36
09893 229C                        37            .byte	$37
09894 229D                        30            .byte	$30
09895 229E                        37            .byte	$37
09896 229F                        36            .byte	$36
09897 22A0                        36            .byte	$36
09898 22A1                        36            .byte	$36
09899 22A2                        36            .byte	$36
09900 22A3                        36            .byte	$36
09901 22A4                        36            .byte	$36
09902                                           ! 1323  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09903 22A5                        00            .byte	0
09904 22A6                        00            .byte	0
09905 22A7                        00            .byte	0
09906 22A8                        00            .byte	0
09907 22A9                        00            .byte	0
09908 22AA                        FF            .byte	$FF
09909 22AB                        00            .byte	0
09910 22AC                        FF            .byte	$FF
09911 22AD                        00            .byte	0
09912 22AE                        00            .byte	0
09913 22AF                        00            .byte	0
09914 22B0                        00            .byte	0
09915 22B1                        00            .byte	0
09916 22B2                        00            .byte	0
09917                                           ! 1324  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09918 22B3                        36            .byte	$36
09919 22B4                        36            .byte	$36
09920 22B5                        36            .byte	$36
09921 22B6                        36            .byte	$36
09922 22B7                        36            .byte	$36
09923 22B8                        F7            .byte	$F7
09924 22B9                        00            .byte	0
09925 22BA                        F7            .byte	$F7
09926 22BB                        36            .byte	$36
09927 22BC                        36            .byte	$36
09928 22BD                        36            .byte	$36
09929 22BE                        36            .byte	$36
09930 22BF                        36            .byte	$36
09931 22C0                        36            .byte	$36
09932                                           ! 1325  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09933 22C1                        18            .byte	$18
09934 22C2                        18            .byte	$18
09935 22C3                        18            .byte	$18
09936 22C4                        18            .byte	$18
09937 22C5                        18            .byte	$18
09938 22C6                        FF            .byte	$FF
09939 22C7                        00            .byte	0
09940 22C8                        FF            .byte	$FF
09941 22C9                        00            .byte	0
09942 22CA                        00            .byte	0
09943 22CB                        00            .byte	0
09944 22CC                        00            .byte	0
09945 22CD                        00            .byte	0
09946 22CE                        00            .byte	0
09947                                           ! 1326  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09948 22CF                        36            .byte	$36
09949 22D0                        36            .byte	$36
09950 22D1                        36            .byte	$36
09951 22D2                        36            .byte	$36
09952 22D3                        36            .byte	$36
09953 22D4                        36            .byte	$36
09954 22D5                        36            .byte	$36
09955 22D6                        FF            .byte	$FF
09956 22D7                        00            .byte	0
09957 22D8                        00            .byte	0
09958 22D9                        00            .byte	0
09959 22DA                        00            .byte	0
09960 22DB                        00            .byte	0
09961 22DC                        00            .byte	0
09962                                           ! 1327  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09963 22DD                        00            .byte	0
09964 22DE                        00            .byte	0
09965 22DF                        00            .byte	0
09966 22E0                        00            .byte	0
09967 22E1                        00            .byte	0
09968 22E2                        FF            .byte	$FF
09969 22E3                        00            .byte	0
09970 22E4                        FF            .byte	$FF
09971 22E5                        18            .byte	$18
09972 22E6                        18            .byte	$18
09973 22E7                        18            .byte	$18
09974 22E8                        18            .byte	$18
09975 22E9                        18            .byte	$18
09976 22EA                        18            .byte	$18
09977                                           ! 1328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09978 22EB                        00            .byte	0
09979 22EC                        00            .byte	0
09980 22ED                        00            .byte	0
09981 22EE                        00            .byte	0
09982 22EF                        00            .byte	0
09983 22F0                        00            .byte	0
09984 22F1                        00            .byte	0
09985 22F2                        FF            .byte	$FF
09986 22F3                        36            .byte	$36
09987 22F4                        36            .byte	$36
09988 22F5                        36            .byte	$36
09989 22F6                        36            .byte	$36
09990 22F7                        36            .byte	$36
09991 22F8                        36            .byte	$36
09992                                           ! 1329  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09993 22F9                        36            .byte	$36
09994 22FA                        36            .byte	$36
09995 22FB                        36            .byte	$36
09996 22FC                        36            .byte	$36
09997 22FD                        36            .byte	$36
09998 22FE                        36            .byte	$36
09999 22FF                        36            .byte	$36
10000 2300                        3F            .byte	$3F
10001 2301                        00            .byte	0
10002 2302                        00            .byte	0
10003 2303                        00            .byte	0
10004 2304                        00            .byte	0
10005 2305                        00            .byte	0
10006 2306                        00            .byte	0
10007                                           ! 1330  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10008 2307                        18            .byte	$18
10009 2308                        18            .byte	$18
10010 2309                        18            .byte	$18
10011 230A                        18            .byte	$18
10012 230B                        18            .byte	$18
10013 230C                        1F            .byte	$1F
10014 230D                        18            .byte	$18
10015 230E                        1F            .byte	$1F
10016 230F                        00            .byte	0
10017 2310                        00            .byte	0
10018 2311                        00            .byte	0
10019 2312                        00            .byte	0
10020 2313                        00            .byte	0
10021 2314                        00            .byte	0
10022                                           ! 1331  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10023 2315                        00            .byte	0
10024 2316                        00            .byte	0
10025 2317                        00            .byte	0
10026 2318                        00            .byte	0
10027 2319                        00            .byte	0
10028 231A                        1F            .byte	$1F
10029 231B                        18            .byte	$18
10030 231C                        1F            .byte	$1F
10031 231D                        18            .byte	$18
10032 231E                        18            .byte	$18
10033 231F                        18            .byte	$18
10034 2320                        18            .byte	$18
10035 2321                        18            .byte	$18
10036 2322                        18            .byte	$18
10037                                           ! 1332  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10038 2323                        00            .byte	0
10039 2324                        00            .byte	0
10040 2325                        00            .byte	0
10041 2326                        00            .byte	0
10042 2327                        00            .byte	0
10043 2328                        00            .byte	0
10044 2329                        00            .byte	0
10045 232A                        3F            .byte	$3F
10046 232B                        36            .byte	$36
10047 232C                        36            .byte	$36
10048 232D                        36            .byte	$36
10049 232E                        36            .byte	$36
10050 232F                        36            .byte	$36
10051 2330                        36            .byte	$36
10052                                           ! 1333  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
10053 2331                        36            .byte	$36
10054 2332                        36            .byte	$36
10055 2333                        36            .byte	$36
10056 2334                        36            .byte	$36
10057 2335                        36            .byte	$36
10058 2336                        36            .byte	$36
10059 2337                        36            .byte	$36
10060 2338                        FF            .byte	$FF
10061 2339                        36            .byte	$36
10062 233A                        36            .byte	$36
10063 233B                        36            .byte	$36
10064 233C                        36            .byte	$36
10065 233D                        36            .byte	$36
10066 233E                        36            .byte	$36
10067                                           ! 1334  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10068 233F                        18            .byte	$18
10069 2340                        18            .byte	$18
10070 2341                        18            .byte	$18
10071 2342                        18            .byte	$18
10072 2343                        18            .byte	$18
10073 2344                        FF            .byte	$FF
10074 2345                        18            .byte	$18
10075 2346                        FF            .byte	$FF
10076 2347                        18            .byte	$18
10077 2348                        18            .byte	$18
10078 2349                        18            .byte	$18
10079 234A                        18            .byte	$18
10080 234B                        18            .byte	$18
10081 234C                        18            .byte	$18
10082                                           ! 1335  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10083 234D                        18            .byte	$18
10084 234E                        18            .byte	$18
10085 234F                        18            .byte	$18
10086 2350                        18            .byte	$18
10087 2351                        18            .byte	$18
10088 2352                        18            .byte	$18
10089 2353                        18            .byte	$18
10090 2354                        F8            .byte	$F8
10091 2355                        00            .byte	0
10092 2356                        00            .byte	0
10093 2357                        00            .byte	0
10094 2358                        00            .byte	0
10095 2359                        00            .byte	0
10096 235A                        00            .byte	0
10097                                           ! 1336  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10098 235B                        00            .byte	0
10099 235C                        00            .byte	0
10100 235D                        00            .byte	0
10101 235E                        00            .byte	0
10102 235F                        00            .byte	0
10103 2360                        00            .byte	0
10104 2361                        00            .byte	0
10105 2362                        1F            .byte	$1F
10106 2363                        18            .byte	$18
10107 2364                        18            .byte	$18
10108 2365                        18            .byte	$18
10109 2366                        18            .byte	$18
10110 2367                        18            .byte	$18
10111 2368                        18            .byte	$18
10112                                           ! 1337  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10113 2369                        FF            .byte	$FF
10114 236A                        FF            .byte	$FF
10115 236B                        FF            .byte	$FF
10116 236C                        FF            .byte	$FF
10117 236D                        FF            .byte	$FF
10118 236E                        FF            .byte	$FF
10119 236F                        FF            .byte	$FF
10120 2370                        FF            .byte	$FF
10121 2371                        FF            .byte	$FF
10122 2372                        FF            .byte	$FF
10123 2373                        FF            .byte	$FF
10124 2374                        FF            .byte	$FF
10125 2375                        FF            .byte	$FF
10126 2376                        FF            .byte	$FF
10127                                           ! 1338  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10128 2377                        00            .byte	0
10129 2378                        00            .byte	0
10130 2379                        00            .byte	0
10131 237A                        00            .byte	0
10132 237B                        00            .byte	0
10133 237C                        00            .byte	0
10134 237D                        00            .byte	0
10135 237E                        FF            .byte	$FF
10136 237F                        FF            .byte	$FF
10137 2380                        FF            .byte	$FF
10138 2381                        FF            .byte	$FF
10139 2382                        FF            .byte	$FF
10140 2383                        FF            .byte	$FF
10141 2384                        FF            .byte	$FF
10142                                           ! 1339  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf
10143 2385                        F0            .byte	$F0
10144 2386                        F0            .byte	$F0
10145 2387                        F0            .byte	$F0
10146 2388                        F0            .byte	$F0
10147 2389                        F0            .byte	$F0
10148 238A                        F0            .byte	$F0
10149 238B                        F0            .byte	$F0
10150 238C                        F0            .byte	$F0
10151 238D                        F0            .byte	$F0
10152 238E                        F0            .byte	$F0
10153                                           ! 1339 0, 0xf0, 0xf0, 0xf0,
10154 238F                        F0            .byte	$F0
10155 2390                        F0            .byte	$F0
10156 2391                        F0            .byte	$F0
10157 2392                        F0            .byte	$F0
10158                                           ! 1340  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
10159 2393                        0F            .byte	$F
10160 2394                        0F            .byte	$F
10161 2395                        0F            .byte	$F
10162 2396                        0F            .byte	$F
10163 2397                        0F            .byte	$F
10164 2398                        0F            .byte	$F
10165 2399                        0F            .byte	$F
10166 239A                        0F            .byte	$F
10167 239B                        0F            .byte	$F
10168 239C                        0F            .byte	$F
10169 239D                        0F            .byte	$F
10170 239E                        0F            .byte	$F
10171 239F                        0F            .byte	$F
10172 23A0                        0F            .byte	$F
10173                                           ! 1341  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10174 23A1                        FF            .byte	$FF
10175 23A2                        FF            .byte	$FF
10176 23A3                        FF            .byte	$FF
10177 23A4                        FF            .byte	$FF
10178 23A5                        FF            .byte	$FF
10179 23A6                        FF            .byte	$FF
10180 23A7                        FF            .byte	$FF
10181 23A8                        00            .byte	0
10182 23A9                        00            .byte	0
10183 23AA                        00            .byte	0
10184 23AB                        00            .byte	0
10185 23AC                        00            .byte	0
10186 23AD                        00            .byte	0
10187 23AE                        00            .byte	0
10188                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
10189 23AF                        00            .byte	0
10190 23B0                        00            .byte	0
10191 23B1                        00            .byte	0
10192 23B2                        00            .byte	0
10193 23B3                        00            .byte	0
10194 23B4                        76            .byte	$76
10195 23B5                        DC            .byte	$DC
10196 23B6                        D8            .byte	$D8
10197 23B7                        D8            .byte	$D8
10198 23B8                        DC            .byte	$DC
10199 23B9                        76            .byte	$76
10200 23BA                        00            .byte	0
10201 23BB                        00            .byte	0
10202 23BC                        00            .byte	0
10203                                           ! 1343  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
10204 23BD                        00            .byte	0
10205 23BE                        00            .byte	0
10206 23BF                        00            .byte	0
10207 23C0                        00            .byte	0
10208 23C1                        7C            .byte	$7C
10209 23C2                        C6            .byte	$C6
10210 23C3                        FC            .byte	$FC
10211 23C4                        C6            .byte	$C6
10212 23C5                        C6            .byte	$C6
10213 23C6                        FC            .byte	$FC
10214 23C7                        C0            .byte	$C0
10215 23C8                        C0            .byte	$C0
10216 23C9                        40            .byte	$40
10217 23CA                        00            .byte	0
10218                                           ! 1344  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
10219 23CB                        00            .byte	0
10220 23CC                        00            .byte	0
10221 23CD                        FE            .byte	$FE
10222 23CE                        C6            .byte	$C6
10223 23CF                        C6            .byte	$C6
10224 23D0                        C0            .byte	$C0
10225 23D1                        C0            .byte	$C0
10226 23D2                        C0            .byte	$C0
10227 23D3                        C0            .byte	$C0
10228 23D4                        C0            .byte	$C0
10229 23D5                        C0            .byte	$C0
10230 23D6                        00            .byte	0
10231 23D7                        00            .byte	0
10232 23D8                        00            .byte	0
10233                                           ! 1345  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
10234 23D9                        00            .byte	0
10235 23DA                        00            .byte	0
10236 23DB                        00            .byte	0
10237 23DC                        00            .byte	0
10238 23DD                        FE            .byte	$FE
10239 23DE                        6C            .byte	$6C
10240 23DF                        6C            .byte	$6C
10241 23E0                        6C            .byte	$6C
10242 23E1                        6C            .byte	$6C
10243 23E2                        6C            .byte	$6C
10244 23E3                        6C            .byte	$6C
10245 23E4                        00            .byte	0
10246 23E5                        00            .byte	0
10247 23E6                        00            .byte	0
10248                                           ! 1346  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
10249 23E7                        00            .byte	0
10250 23E8                        00            .byte	0
10251 23E9                        FE            .byte	$FE
10252 23EA                        C6            .byte	$C6
10253 23EB                        60            .byte	$60
10254 23EC                        30            .byte	$30
10255 23ED                        18            .byte	$18
10256 23EE                        30            .byte	$30
10257 23EF                        60            .byte	$60
10258 23F0                        C6            .byte	$C6
10259 23F1                        FE            .byte	$FE
10260 23F2                        00            .byte	0
10261 23F3                        00            .byte	0
10262 23F4                        00            .byte	0
10263                                           ! 1347  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10264 23F5                        00            .byte	0
10265 23F6                        00            .byte	0
10266 23F7                        00            .byte	0
10267 23F8                        00            .byte	0
10268 23F9                        00            .byte	0
10269 23FA                        7E            .byte	$7E
10270 23FB                        D8            .byte	$D8
10271 23FC                        D8            .byte	$D8
10272 23FD                        D8            .byte	$D8
10273 23FE                        D8            .byte	$D8
10274 23FF                        70            .byte	$70
10275 2400                        00            .byte	0
10276 2401                        00            .byte	0
10277 2402                        00            .byte	0
10278                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10279 2403                        00            .byte	0
10280 2404                        00            .byte	0
10281 2405                        00            .byte	0
10282 2406                        00            .byte	0
10283 2407                        66            .byte	$66
10284 2408                        66            .byte	$66
10285 2409                        66            .byte	$66
10286 240A                        66            .byte	$66
10287 240B                        7C            .byte	$7C
10288 240C                        60            .byte	$60
10289 240D                        60            .byte	$60
10290 240E                        C0            .byte	$C0
10291 240F                        00            .byte	0
10292 2410                        00            .byte	0
10293                                           ! 1349  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10294 2411                        00            .byte	0
10295 2412                        00            .byte	0
10296 2413                        00            .byte	0
10297 2414                        00            .byte	0
10298 2415                        76            .byte	$76
10299 2416                        DC            .byte	$DC
10300 2417                        18            .byte	$18
10301 2418                        18            .byte	$18
10302 2419                        18            .byte	$18
10303 241A                        18            .byte	$18
10304 241B                        18            .byte	$18
10305 241C                        00            .byte	0
10306 241D                        00            .byte	0
10307 241E                        00            .byte	0
10308                                           ! 1350  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10309 241F                        00            .byte	0
10310 2420                        00            .byte	0
10311 2421                        7E            .byte	$7E
10312 2422                        18            .byte	$18
10313 2423                        3C            .byte	$3C
10314 2424                        66            .byte	$66
10315 2425                        66            .byte	$66
10316 2426                        66            .byte	$66
10317 2427                        3C            .byte	$3C
10318 2428                        18            .byte	$18
10319 2429                        7E            .byte	$7E
10320 242A                        00            .byte	0
10321 242B                        00            .byte	0
10322 242C                        00            .byte	0
10323                                           ! 1351  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10324 242D                        00            .byte	0
10325 242E                        00            .byte	0
10326 242F                        38            .byte	$38
10327 2430                        6C            .byte	$6C
10328 2431                        C6            .byte	$C6
10329 2432                        C6            .byte	$C6
10330 2433                        FE            .byte	$FE
10331 2434                        C6            .byte	$C6
10332 2435                        C6            .byte	$C6
10333 2436                        6C            .byte	$6C
10334 2437                        38            .byte	$38
10335 2438                        00            .byte	0
10336 2439                        00            .byte	0
10337 243A                        00            .byte	0
10338                                           ! 1352  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10339 243B                        00            .byte	0
10340 243C                        00            .byte	0
10341 243D                        38            .byte	$38
10342 243E                        6C            .byte	$6C
10343 243F                        C6            .byte	$C6
10344 2440                        C6            .byte	$C6
10345 2441                        C6            .byte	$C6
10346 2442                        6C            .byte	$6C
10347 2443                        6C            .byte	$6C
10348 2444                        6C            .byte	$6C
10349 2445                        EE            .byte	$EE
10350 2446                        00            .byte	0
10351 2447                        00            .byte	0
10352 2448                        00            .byte	0
10353                                           ! 1353  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10354 2449                        00            .byte	0
10355 244A                        00            .byte	0
10356 244B                        1E            .byte	$1E
10357 244C                        30            .byte	$30
10358 244D                        18            .byte	$18
10359 244E                        0C            .byte	$C
10360 244F                        3E            .byte	$3E
10361 2450                        66            .byte	$66
10362 2451                        66            .byte	$66
10363 2452                        66            .byte	$66
10364 2453                        3C            .byte	$3C
10365 2454                        00            .byte	0
10366 2455                        00            .byte	0
10367 2456                        00            .byte	0
10368                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10369 2457                        00            .byte	0
10370 2458                        00            .byte	0
10371 2459                        00            .byte	0
10372 245A                        00            .byte	0
10373 245B                        00            .byte	0
10374 245C                        7E            .byte	$7E
10375 245D                        DB            .byte	$DB
10376 245E                        DB            .byte	$DB
10377 245F                        7E            .byte	$7E
10378 2460                        00            .byte	0
10379 2461                        00            .byte	0
10380 2462                        00            .byte	0
10381 2463                        00            .byte	0
10382 2464                        00            .byte	0
10383                                           ! 1355  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10384 2465                        00            .byte	0
10385 2466                        00            .byte	0
10386 2467                        03            .byte	3
10387 2468                        06            .byte	6
10388 2469                        7E            .byte	$7E
10389 246A                        DB            .byte	$DB
10390 246B                        DB            .byte	$DB
10391 246C                        F3            .byte	$F3
10392 246D                        7E            .byte	$7E
10393 246E                        60            .byte	$60
10394 246F                        C0            .byte	$C0
10395 2470                        00            .byte	0
10396 2471                        00            .byte	0
10397 2472                        00            .byte	0
10398                                           ! 1356  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10399 2473                        00            .byte	0
10400 2474                        00            .byte	0
10401 2475                        1C            .byte	$1C
10402 2476                        30            .byte	$30
10403 2477                        60            .byte	$60
10404 2478                        60            .byte	$60
10405 2479                        7C            .byte	$7C
10406 247A                        60            .byte	$60
10407 247B                        60            .byte	$60
10408 247C                        30            .byte	$30
10409 247D                        1C            .byte	$1C
10410 247E                        00            .byte	0
10411 247F                        00            .byte	0
10412 2480                        00            .byte	0
10413                                           ! 1357  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10414 2481                        00            .byte	0
10415 2482                        00            .byte	0
10416 2483                        00            .byte	0
10417 2484                        7C            .byte	$7C
10418 2485                        C6            .byte	$C6
10419 2486                        C6            .byte	$C6
10420 2487                        C6            .byte	$C6
10421 2488                        C6            .byte	$C6
10422 2489                        C6            .byte	$C6
10423 248A                        C6            .byte	$C6
10424 248B                        C6            .byte	$C6
10425 248C                        00            .byte	0
10426 248D                        00            .byte	0
10427 248E                        00            .byte	0
10428                                           ! 1358  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10429 248F                        00            .byte	0
10430 2490                        00            .byte	0
10431 2491                        00            .byte	0
10432 2492                        FE            .byte	$FE
10433 2493                        00            .byte	0
10434 2494                        00            .byte	0
10435 2495                        FE            .byte	$FE
10436 2496                        00            .byte	0
10437 2497                        00            .byte	0
10438 2498                        FE            .byte	$FE
10439 2499                        00            .byte	0
10440 249A                        00            .byte	0
10441 249B                        00            .byte	0
10442 249C                        00            .byte	0
10443                                           ! 1359  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10444 249D                        00            .byte	0
10445 249E                        00            .byte	0
10446 249F                        00            .byte	0
10447 24A0                        18            .byte	$18
10448 24A1                        18            .byte	$18
10449 24A2                        7E            .byte	$7E
10450 24A3                        18            .byte	$18
10451 24A4                        18            .byte	$18
10452 24A5                        00            .byte	0
10453 24A6                        00            .byte	0
10454 24A7                        FF            .byte	$FF
10455 24A8                        00            .byte	0
10456 24A9                        00            .byte	0
10457 24AA                        00            .byte	0
10458                                           ! 1360  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10459 24AB                        00            .byte	0
10460 24AC                        00            .byte	0
10461 24AD                        30            .byte	$30
10462 24AE                        18            .byte	$18
10463 24AF                        0C            .byte	$C
10464 24B0                        06            .byte	6
10465 24B1                        0C            .byte	$C
10466 24B2                        18            .byte	$18
10467 24B3                        30            .byte	$30
10468 24B4                        00            .byte	0
10469 24B5                        7E            .byte	$7E
10470 24B6                        00            .byte	0
10471 24B7                        00            .byte	0
10472 24B8                        00            .byte	0
10473                                           ! 1361  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10474 24B9                        00            .byte	0
10475 24BA                        00            .byte	0
10476 24BB                        0C            .byte	$C
10477 24BC                        18            .byte	$18
10478 24BD                        30            .byte	$30
10479 24BE                        60            .byte	$60
10480 24BF                        30            .byte	$30
10481 24C0                        18            .byte	$18
10482 24C1                        0C            .byte	$C
10483 24C2                        00            .byte	0
10484 24C3                        7E            .byte	$7E
10485 24C4                        00            .byte	0
10486 24C5                        00            .byte	0
10487 24C6                        00            .byte	0
10488                                           ! 1362  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10489 24C7                        00            .byte	0
10490 24C8                        00            .byte	0
10491 24C9                        0E            .byte	$E
10492 24CA                        1B            .byte	$1B
10493 24CB                        1B            .byte	$1B
10494 24CC                        18            .byte	$18
10495 24CD                        18            .byte	$18
10496 24CE                        18            .byte	$18
10497 24CF                        18            .byte	$18
10498 24D0                        18            .byte	$18
10499 24D1                        18            .byte	$18
10500 24D2                        18            .byte	$18
10501 24D3                        18            .byte	$18
10502 24D4                        18            .byte	$18
10503                                           ! 1363  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00,
10504 24D5                        18            .byte	$18
10505 24D6                        18            .byte	$18
10506 24D7                        18            .byte	$18
10507 24D8                        18            .byte	$18
10508 24D9                        18            .byte	$18
10509 24DA                        18            .byte	$18
10510 24DB                        18            .byte	$18
10511 24DC                        18            .byte	$18
10512 24DD                        D8            .byte	$D8
10513 24DE                        D8            .byte	$D8
10514 24DF                        70            .byte	$70
10515                                           ! 1363  0x00, 0x00,
10516 24E0                        00            .byte	0
10517 24E1                        00            .byte	0
10518 24E2                        00            .byte	0
10519                                           ! 1364  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10520 24E3                        00            .byte	0
10521 24E4                        00            .byte	0
10522 24E5                        00            .byte	0
10523 24E6                        18            .byte	$18
10524 24E7                        18            .byte	$18
10525 24E8                        00            .byte	0
10526 24E9                        7E            .byte	$7E
10527 24EA                        00            .byte	0
10528 24EB                        18            .byte	$18
10529 24EC                        18            .byte	$18
10530 24ED                        00            .byte	0
10531 24EE                        00            .byte	0
10532 24EF                        00            .byte	0
10533 24F0                        00            .byte	0
10534                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10535 24F1                        00            .byte	0
10536 24F2                        00            .byte	0
10537 24F3                        00            .byte	0
10538 24F4                        00            .byte	0
10539 24F5                        76            .byte	$76
10540 24F6                        DC            .byte	$DC
10541 24F7                        00            .byte	0
10542 24F8                        76            .byte	$76
10543 24F9                        DC            .byte	$DC
10544 24FA                        00            .byte	0
10545 24FB                        00            .byte	0
10546 24FC                        00            .byte	0
10547 24FD                        00            .byte	0
10548 24FE                        00            .byte	0
10549                                           ! 1366  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10550 24FF                        00            .byte	0
10551 2500                        38            .byte	$38
10552 2501                        6C            .byte	$6C
10553 2502                        6C            .byte	$6C
10554 2503                        38            .byte	$38
10555 2504                        00            .byte	0
10556 2505                        00            .byte	0
10557 2506                        00            .byte	0
10558 2507                        00            .byte	0
10559 2508                        00            .byte	0
10560 2509                        00            .byte	0
10561 250A                        00            .byte	0
10562 250B                        00            .byte	0
10563 250C                        00            .byte	0
10564                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10565 250D                        00            .byte	0
10566 250E                        00            .byte	0
10567 250F                        00            .byte	0
10568 2510                        00            .byte	0
10569 2511                        00            .byte	0
10570 2512                        00            .byte	0
10571 2513                        18            .byte	$18
10572 2514                        18            .byte	$18
10573 2515                        00            .byte	0
10574 2516                        00            .byte	0
10575 2517                        00            .byte	0
10576 2518                        00            .byte	0
10577 2519                        00            .byte	0
10578 251A                        00            .byte	0
10579                                           ! 1368  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10580 251B                        00            .byte	0
10581 251C                        00            .byte	0
10582 251D                        00            .byte	0
10583 251E                        00            .byte	0
10584 251F                        00            .byte	0
10585 2520                        00            .byte	0
10586 2521                        00            .byte	0
10587 2522                        18            .byte	$18
10588 2523                        00            .byte	0
10589 2524                        00            .byte	0
10590 2525                        00            .byte	0
10591 2526                        00            .byte	0
10592 2527                        00            .byte	0
10593 2528                        00            .byte	0
10594                                           ! 1369  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10595 2529                        00            .byte	0
10596 252A                        0F            .byte	$F
10597 252B                        0C            .byte	$C
10598 252C                        0C            .byte	$C
10599 252D                        0C            .byte	$C
10600 252E                        0C            .byte	$C
10601 252F                        0C            .byte	$C
10602 2530                        EC            .byte	$EC
10603 2531                        6C            .byte	$6C
10604 2532                        3C            .byte	$3C
10605 2533                        1C            .byte	$1C
10606 2534                        00            .byte	0
10607 2535                        00            .byte	0
10608 2536                        00            .byte	0
10609                                           ! 1370  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10610 2537                        00            .byte	0
10611 2538                        D8            .byte	$D8
10612 2539                        6C            .byte	$6C
10613 253A                        6C            .byte	$6C
10614 253B                        6C            .byte	$6C
10615 253C                        6C            .byte	$6C
10616 253D                        6C            .byte	$6C
10617 253E                        00            .byte	0
10618 253F                        00            .byte	0
10619 2540                        00            .byte	0
10620 2541                        00            .byte	0
10621 2542                        00            .byte	0
10622 2543                        00            .byte	0
10623 2544                        00            .byte	0
10624                                           ! 1371  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10625 2545                        00            .byte	0
10626 2546                        70            .byte	$70
10627 2547                        D8            .byte	$D8
10628 2548                        30            .byte	$30
10629 2549                        60            .byte	$60
10630 254A                        C8            .byte	$C8
10631 254B                        F8            .byte	$F8
10632 254C                        00            .byte	0
10633 254D                        00            .byte	0
10634 254E                        00            .byte	0
10635 254F                        00            .byte	0
10636 2550                        00            .byte	0
10637 2551                        00            .byte	0
10638 2552                        00            .byte	0
10639                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10640 2553                        00            .byte	0
10641 2554                        00            .byte	0
10642 2555                        00            .byte	0
10643 2556                        00            .byte	0
10644 2557                        7C            .byte	$7C
10645 2558                        7C            .byte	$7C
10646 2559                        7C            .byte	$7C
10647 255A                        7C            .byte	$7C
10648 255B                        7C            .byte	$7C
10649 255C                        7C            .byte	$7C
10650 255D                        00            .byte	0
10651 255E                        00            .byte	0
10652 255F                        00            .byte	0
10653 2560                        00            .byte	0
10654                                           ! 1373  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10655 2561                        00            .byte	0
10656 2562                        00            .byte	0
10657 2563                        00            .byte	0
10658 2564                        00            .byte	0
10659 2565                        00            .byte	0
10660 2566                        00            .byte	0
10661 2567                        00            .byte	0
10662 2568                        00            .byte	0
10663 2569                        00            .byte	0
10664 256A                        00            .byte	0
10665 256B                        00            .byte	0
10666 256C                        00            .byte	0
10667 256D                        00            .byte	0
10668                                           ! 1374 };
10669 256E                        00            .byte	0
10670                                           !BCC_EOS
10671                                           ! 1375 static Bit8u vgafont16[256*16]=
10672                                           ! 1376 {
10673                       0000256F            _vgafont16:
10674                                           ! 1377  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10675 256F                        00            .byte	0
10676 2570                        00            .byte	0
10677 2571                        00            .byte	0
10678 2572                        00            .byte	0
10679 2573                        00            .byte	0
10680 2574                        00            .byte	0
10681 2575                        00            .byte	0
10682 2576                        00            .byte	0
10683 2577                        00            .byte	0
10684 2578                        00            .byte	0
10685 2579                        00            .byte	0
10686 257A                        00            .byte	0
10687 257B                        00            .byte	0
10688 257C                        00            .byte	0
10689 257D                        00            .byte	0
10690 257E                        00            .byte	0
10691                                           ! 1378  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10692 257F                        00            .byte	0
10693 2580                        00            .byte	0
10694 2581                        7E            .byte	$7E
10695 2582                        81            .byte	$81
10696 2583                        A5            .byte	$A5
10697 2584                        81            .byte	$81
10698 2585                        81            .byte	$81
10699 2586                        BD            .byte	$BD
10700 2587                        99            .byte	$99
10701 2588                        81            .byte	$81
10702 2589                        81            .byte	$81
10703 258A                        7E            .byte	$7E
10704 258B                        00            .byte	0
10705 258C                        00            .byte	0
10706 258D                        00            .byte	0
10707 258E                        00            .byte	0
10708                                           ! 1379  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10709 258F                        00            .byte	0
10710 2590                        00            .byte	0
10711 2591                        7E            .byte	$7E
10712 2592                        FF            .byte	$FF
10713 2593                        DB            .byte	$DB
10714 2594                        FF            .byte	$FF
10715 2595                        FF            .byte	$FF
10716 2596                        C3            .byte	$C3
10717 2597                        E7            .byte	$E7
10718 2598                        FF            .byte	$FF
10719 2599                        FF            .byte	$FF
10720 259A                        7E            .byte	$7E
10721 259B                        00            .byte	0
10722 259C                        00            .byte	0
10723 259D                        00            .byte	0
10724 259E                        00            .byte	0
10725                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10726 259F                        00            .byte	0
10727 25A0                        00            .byte	0
10728 25A1                        00            .byte	0
10729 25A2                        00            .byte	0
10730 25A3                        6C            .byte	$6C
10731 25A4                        FE            .byte	$FE
10732 25A5                        FE            .byte	$FE
10733 25A6                        FE            .byte	$FE
10734 25A7                        FE            .byte	$FE
10735 25A8                        7C            .byte	$7C
10736 25A9                        38            .byte	$38
10737 25AA                        10            .byte	$10
10738 25AB                        00            .byte	0
10739 25AC                        00            .byte	0
10740 25AD                        00            .byte	0
10741 25AE                        00            .byte	0
10742                                           ! 1381  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10743 25AF                        00            .byte	0
10744 25B0                        00            .byte	0
10745 25B1                        00            .byte	0
10746 25B2                        00            .byte	0
10747 25B3                        10            .byte	$10
10748 25B4                        38            .byte	$38
10749 25B5                        7C            .byte	$7C
10750 25B6                        FE            .byte	$FE
10751 25B7                        7C            .byte	$7C
10752 25B8                        38            .byte	$38
10753 25B9                        10            .byte	$10
10754 25BA                        00            .byte	0
10755 25BB                        00            .byte	0
10756 25BC                        00            .byte	0
10757 25BD                        00            .byte	0
10758 25BE                        00            .byte	0
10759                                           ! 1382  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10760 25BF                        00            .byte	0
10761 25C0                        00            .byte	0
10762 25C1                        00            .byte	0
10763 25C2                        18            .byte	$18
10764 25C3                        3C            .byte	$3C
10765 25C4                        3C            .byte	$3C
10766 25C5                        E7            .byte	$E7
10767 25C6                        E7            .byte	$E7
10768 25C7                        E7            .byte	$E7
10769 25C8                        18            .byte	$18
10770 25C9                        18            .byte	$18
10771 25CA                        3C            .byte	$3C
10772 25CB                        00            .byte	0
10773 25CC                        00            .byte	0
10774 25CD                        00            .byte	0
10775 25CE                        00            .byte	0
10776                                           ! 1383  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10777 25CF                        00            .byte	0
10778 25D0                        00            .byte	0
10779 25D1                        00            .byte	0
10780 25D2                        18            .byte	$18
10781 25D3                        3C            .byte	$3C
10782 25D4                        7E            .byte	$7E
10783 25D5                        FF            .byte	$FF
10784 25D6                        FF            .byte	$FF
10785 25D7                        7E            .byte	$7E
10786 25D8                        18            .byte	$18
10787 25D9                        18            .byte	$18
10788 25DA                        3C            .byte	$3C
10789 25DB                        00            .byte	0
10790 25DC                        00            .byte	0
10791 25DD                        00            .byte	0
10792 25DE                        00            .byte	0
10793                                           ! 1384  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10794 25DF                        00            .byte	0
10795 25E0                        00            .byte	0
10796 25E1                        00            .byte	0
10797 25E2                        00            .byte	0
10798 25E3                        00            .byte	0
10799 25E4                        00            .byte	0
10800 25E5                        18            .byte	$18
10801 25E6                        3C            .byte	$3C
10802 25E7                        3C            .byte	$3C
10803 25E8                        18            .byte	$18
10804 25E9                        00            .byte	0
10805 25EA                        00            .byte	0
10806 25EB                        00            .byte	0
10807 25EC                        00            .byte	0
10808 25ED                        00            .byte	0
10809 25EE                        00            .byte	0
10810                                           ! 1385  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10811 25EF                        FF            .byte	$FF
10812 25F0                        FF            .byte	$FF
10813 25F1                        FF            .byte	$FF
10814 25F2                        FF            .byte	$FF
10815 25F3                        FF            .byte	$FF
10816 25F4                        FF            .byte	$FF
10817 25F5                        E7            .byte	$E7
10818 25F6                        C3            .byte	$C3
10819 25F7                        C3            .byte	$C3
10820 25F8                        E7            .byte	$E7
10821 25F9                        FF            .byte	$FF
10822 25FA                        FF            .byte	$FF
10823 25FB                        FF            .byte	$FF
10824 25FC                        FF            .byte	$FF
10825 25FD                        FF            .byte	$FF
10826 25FE                        FF            .byte	$FF
10827                                           ! 1386  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10828 25FF                        00            .byte	0
10829 2600                        00            .byte	0
10830 2601                        00            .byte	0
10831 2602                        00            .byte	0
10832 2603                        00            .byte	0
10833 2604                        3C            .byte	$3C
10834 2605                        66            .byte	$66
10835 2606                        42            .byte	$42
10836 2607                        42            .byte	$42
10837 2608                        66            .byte	$66
10838 2609                        3C            .byte	$3C
10839 260A                        00            .byte	0
10840 260B                        00            .byte	0
10841 260C                        00            .byte	0
10842 260D                        00            .byte	0
10843 260E                        00            .byte	0
10844                                           ! 1387  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10845 260F                        FF            .byte	$FF
10846 2610                        FF            .byte	$FF
10847 2611                        FF            .byte	$FF
10848 2612                        FF            .byte	$FF
10849 2613                        FF            .byte	$FF
10850 2614                        C3            .byte	$C3
10851 2615                        99            .byte	$99
10852 2616                        BD            .byte	$BD
10853 2617                        BD            .byte	$BD
10854 2618                        99            .byte	$99
10855 2619                        C3            .byte	$C3
10856 261A                        FF            .byte	$FF
10857 261B                        FF            .byte	$FF
10858 261C                        FF            .byte	$FF
10859 261D                        FF            .byte	$FF
10860 261E                        FF            .byte	$FF
10861                                           ! 1388  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x0
10862 261F                        00            .byte	0
10863 2620                        00            .byte	0
10864 2621                        1E            .byte	$1E
10865 2622                        0E            .byte	$E
10866 2623                        1A            .byte	$1A
10867 2624                        32            .byte	$32
10868 2625                        78            .byte	$78
10869 2626                        CC            .byte	$CC
10870 2627                        CC            .byte	$CC
10871 2628                        CC            .byte	$CC
10872 2629                        CC            .byte	$CC
10873 262A                        78            .byte	$78
10874 262B                        00            .byte	0
10875                                           ! 1388 0, 0x00, 0x00,
10876 262C                        00            .byte	0
10877 262D                        00            .byte	0
10878 262E                        00            .byte	0
10879                                           ! 1389  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10880 262F                        00            .byte	0
10881 2630                        00            .byte	0
10882 2631                        3C            .byte	$3C
10883 2632                        66            .byte	$66
10884 2633                        66            .byte	$66
10885 2634                        66            .byte	$66
10886 2635                        66            .byte	$66
10887 2636                        3C            .byte	$3C
10888 2637                        18            .byte	$18
10889 2638                        7E            .byte	$7E
10890 2639                        18            .byte	$18
10891 263A                        18            .byte	$18
10892 263B                        00            .byte	0
10893 263C                        00            .byte	0
10894 263D                        00            .byte	0
10895 263E                        00            .byte	0
10896                                           ! 1390  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10897 263F                        00            .byte	0
10898 2640                        00            .byte	0
10899 2641                        3F            .byte	$3F
10900 2642                        33            .byte	$33
10901 2643                        3F            .byte	$3F
10902 2644                        30            .byte	$30
10903 2645                        30            .byte	$30
10904 2646                        30            .byte	$30
10905 2647                        30            .byte	$30
10906 2648                        70            .byte	$70
10907 2649                        F0            .byte	$F0
10908 264A                        E0            .byte	$E0
10909 264B                        00            .byte	0
10910 264C                        00            .byte	0
10911 264D                        00            .byte	0
10912 264E                        00            .byte	0
10913                                           ! 1391  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10914 264F                        00            .byte	0
10915 2650                        00            .byte	0
10916 2651                        7F            .byte	$7F
10917 2652                        63            .byte	$63
10918 2653                        7F            .byte	$7F
10919 2654                        63            .byte	$63
10920 2655                        63            .byte	$63
10921 2656                        63            .byte	$63
10922 2657                        63            .byte	$63
10923 2658                        67            .byte	$67
10924 2659                        E7            .byte	$E7
10925 265A                        E6            .byte	$E6
10926 265B                        C0            .byte	$C0
10927 265C                        00            .byte	0
10928 265D                        00            .byte	0
10929 265E                        00            .byte	0
10930                                           ! 1392  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10931 265F                        00            .byte	0
10932 2660                        00            .byte	0
10933 2661                        00            .byte	0
10934 2662                        18            .byte	$18
10935 2663                        18            .byte	$18
10936 2664                        DB            .byte	$DB
10937 2665                        3C            .byte	$3C
10938 2666                        E7            .byte	$E7
10939 2667                        3C            .byte	$3C
10940 2668                        DB            .byte	$DB
10941 2669                        18            .byte	$18
10942 266A                        18            .byte	$18
10943 266B                        00            .byte	0
10944 266C                        00            .byte	0
10945 266D                        00            .byte	0
10946 266E                        00            .byte	0
10947                                           ! 1393  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10948 266F                        00            .byte	0
10949 2670                        80            .byte	$80
10950 2671                        C0            .byte	$C0
10951 2672                        E0            .byte	$E0
10952 2673                        F0            .byte	$F0
10953 2674                        F8            .byte	$F8
10954 2675                        FE            .byte	$FE
10955 2676                        F8            .byte	$F8
10956 2677                        F0            .byte	$F0
10957 2678                        E0            .byte	$E0
10958 2679                        C0            .byte	$C0
10959 267A                        80            .byte	$80
10960 267B                        00            .byte	0
10961 267C                        00            .byte	0
10962 267D                        00            .byte	0
10963 267E                        00            .byte	0
10964                                           ! 1394  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10965 267F                        00            .byte	0
10966 2680                        02            .byte	2
10967 2681                        06            .byte	6
10968 2682                        0E            .byte	$E
10969 2683                        1E            .byte	$1E
10970 2684                        3E            .byte	$3E
10971 2685                        FE            .byte	$FE
10972 2686                        3E            .byte	$3E
10973 2687                        1E            .byte	$1E
10974 2688                        0E            .byte	$E
10975 2689                        06            .byte	6
10976 268A                        02            .byte	2
10977 268B                        00            .byte	0
10978 268C                        00            .byte	0
10979 268D                        00            .byte	0
10980 268E                        00            .byte	0
10981                                           ! 1395  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10982 268F                        00            .byte	0
10983 2690                        00            .byte	0
10984 2691                        18            .byte	$18
10985 2692                        3C            .byte	$3C
10986 2693                        7E            .byte	$7E
10987 2694                        18            .byte	$18
10988 2695                        18            .byte	$18
10989 2696                        18            .byte	$18
10990 2697                        7E            .byte	$7E
10991 2698                        3C            .byte	$3C
10992 2699                        18            .byte	$18
10993 269A                        00            .byte	0
10994 269B                        00            .byte	0
10995 269C                        00            .byte	0
10996 269D                        00            .byte	0
10997 269E                        00            .byte	0
10998                                           ! 1396  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10999 269F                        00            .byte	0
11000 26A0                        00            .byte	0
11001 26A1                        66            .byte	$66
11002 26A2                        66            .byte	$66
11003 26A3                        66            .byte	$66
11004 26A4                        66            .byte	$66
11005 26A5                        66            .byte	$66
11006 26A6                        66            .byte	$66
11007 26A7                        66            .byte	$66
11008 26A8                        00            .byte	0
11009 26A9                        66            .byte	$66
11010 26AA                        66            .byte	$66
11011 26AB                        00            .byte	0
11012 26AC                        00            .byte	0
11013 26AD                        00            .byte	0
11014 26AE                        00            .byte	0
11015                                           ! 1397  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
11016 26AF                        00            .byte	0
11017 26B0                        00            .byte	0
11018 26B1                        7F            .byte	$7F
11019 26B2                        DB            .byte	$DB
11020 26B3                        DB            .byte	$DB
11021 26B4                        DB            .byte	$DB
11022 26B5                        7B            .byte	$7B
11023 26B6                        1B            .byte	$1B
11024 26B7                        1B            .byte	$1B
11025 26B8                        1B            .byte	$1B
11026 26B9                        1B            .byte	$1B
11027 26BA                        1B            .byte	$1B
11028 26BB                        00            .byte	0
11029 26BC                        00            .byte	0
11030 26BD                        00            .byte	0
11031 26BE                        00            .byte	0
11032                                           ! 1398  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
11033 26BF                        00            .byte	0
11034 26C0                        7C            .byte	$7C
11035 26C1                        C6            .byte	$C6
11036 26C2                        60            .byte	$60
11037 26C3                        38            .byte	$38
11038 26C4                        6C            .byte	$6C
11039 26C5                        C6            .byte	$C6
11040 26C6                        C6            .byte	$C6
11041 26C7                        6C            .byte	$6C
11042 26C8                        38            .byte	$38
11043 26C9                        0C            .byte	$C
11044 26CA                        C6            .byte	$C6
11045 26CB                        7C            .byte	$7C
11046 26CC                        00            .byte	0
11047 26CD                        00            .byte	0
11048 26CE                        00            .byte	0
11049                                           ! 1399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
11050 26CF                        00            .byte	0
11051 26D0                        00            .byte	0
11052 26D1                        00            .byte	0
11053 26D2                        00            .byte	0
11054 26D3                        00            .byte	0
11055 26D4                        00            .byte	0
11056 26D5                        00            .byte	0
11057 26D6                        00            .byte	0
11058 26D7                        FE            .byte	$FE
11059 26D8                        FE            .byte	$FE
11060 26D9                        FE            .byte	$FE
11061 26DA                        FE            .byte	$FE
11062 26DB                        00            .byte	0
11063 26DC                        00            .byte	0
11064 26DD                        00            .byte	0
11065 26DE                        00            .byte	0
11066                                           ! 1400  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11067 26DF                        00            .byte	0
11068 26E0                        00            .byte	0
11069 26E1                        18            .byte	$18
11070 26E2                        3C            .byte	$3C
11071 26E3                        7E            .byte	$7E
11072 26E4                        18            .byte	$18
11073 26E5                        18            .byte	$18
11074 26E6                        18            .byte	$18
11075 26E7                        7E            .byte	$7E
11076 26E8                        3C            .byte	$3C
11077 26E9                        18            .byte	$18
11078 26EA                        7E            .byte	$7E
11079 26EB                        00            .byte	0
11080 26EC                        00            .byte	0
11081 26ED                        00            .byte	0
11082 26EE                        00            .byte	0
11083                                           ! 1401  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11084 26EF                        00            .byte	0
11085 26F0                        00            .byte	0
11086 26F1                        18            .byte	$18
11087 26F2                        3C            .byte	$3C
11088 26F3                        7E            .byte	$7E
11089 26F4                        18            .byte	$18
11090 26F5                        18            .byte	$18
11091 26F6                        18            .byte	$18
11092 26F7                        18            .byte	$18
11093 26F8                        18            .byte	$18
11094 26F9                        18            .byte	$18
11095 26FA                        18            .byte	$18
11096 26FB                        00            .byte	0
11097 26FC                        00            .byte	0
11098 26FD                        00            .byte	0
11099 26FE                        00            .byte	0
11100                                           ! 1402  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11101 26FF                        00            .byte	0
11102 2700                        00            .byte	0
11103 2701                        18            .byte	$18
11104 2702                        18            .byte	$18
11105 2703                        18            .byte	$18
11106 2704                        18            .byte	$18
11107 2705                        18            .byte	$18
11108 2706                        18            .byte	$18
11109 2707                        18            .byte	$18
11110 2708                        7E            .byte	$7E
11111 2709                        3C            .byte	$3C
11112 270A                        18            .byte	$18
11113 270B                        00            .byte	0
11114 270C                        00            .byte	0
11115 270D                        00            .byte	0
11116 270E                        00            .byte	0
11117                                           ! 1403  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11118 270F                        00            .byte	0
11119 2710                        00            .byte	0
11120 2711                        00            .byte	0
11121 2712                        00            .byte	0
11122 2713                        00            .byte	0
11123 2714                        18            .byte	$18
11124 2715                        0C            .byte	$C
11125 2716                        FE            .byte	$FE
11126 2717                        0C            .byte	$C
11127 2718                        18            .byte	$18
11128 2719                        00            .byte	0
11129 271A                        00            .byte	0
11130 271B                        00            .byte	0
11131 271C                        00            .byte	0
11132 271D                        00            .byte	0
11133 271E                        00            .byte	0
11134                                           ! 1404  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11135 271F                        00            .byte	0
11136 2720                        00            .byte	0
11137 2721                        00            .byte	0
11138 2722                        00            .byte	0
11139 2723                        00            .byte	0
11140 2724                        30            .byte	$30
11141 2725                        60            .byte	$60
11142 2726                        FE            .byte	$FE
11143 2727                        60            .byte	$60
11144 2728                        30            .byte	$30
11145 2729                        00            .byte	0
11146 272A                        00            .byte	0
11147 272B                        00            .byte	0
11148 272C                        00            .byte	0
11149 272D                        00            .byte	0
11150 272E                        00            .byte	0
11151                                           ! 1405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11152 272F                        00            .byte	0
11153 2730                        00            .byte	0
11154 2731                        00            .byte	0
11155 2732                        00            .byte	0
11156 2733                        00            .byte	0
11157 2734                        00            .byte	0
11158 2735                        C0            .byte	$C0
11159 2736                        C0            .byte	$C0
11160 2737                        C0            .byte	$C0
11161 2738                        FE            .byte	$FE
11162 2739                        00            .byte	0
11163 273A                        00            .byte	0
11164 273B                        00            .byte	0
11165 273C                        00            .byte	0
11166 273D                        00            .byte	0
11167 273E                        00            .byte	0
11168                                           ! 1406  0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11169 273F                        00            .byte	0
11170 2740                        00            .byte	0
11171 2741                        00            .byte	0
11172 2742                        00            .byte	0
11173 2743                        00            .byte	0
11174 2744                        24            .byte	$24
11175 2745                        66            .byte	$66
11176 2746                        FF            .byte	$FF
11177 2747                        66            .byte	$66
11178 2748                        24            .byte	$24
11179 2749                        00            .byte	0
11180 274A                        00            .byte	0
11181 274B                        00            .byte	0
11182 274C                        00            .byte	0
11183 274D                        00            .byte	0
11184 274E                        00            .byte	0
11185                                           ! 1407  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
11186 274F                        00            .byte	0
11187 2750                        00            .byte	0
11188 2751                        00            .byte	0
11189 2752                        00            .byte	0
11190 2753                        10            .byte	$10
11191 2754                        38            .byte	$38
11192 2755                        38            .byte	$38
11193 2756                        7C            .byte	$7C
11194 2757                        7C            .byte	$7C
11195 2758                        FE            .byte	$FE
11196 2759                        FE            .byte	$FE
11197 275A                        00            .byte	0
11198 275B                        00            .byte	0
11199 275C                        00            .byte	0
11200 275D                        00            .byte	0
11201 275E                        00            .byte	0
11202                                           ! 1408  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
11203 275F                        00            .byte	0
11204 2760                        00            .byte	0
11205 2761                        00            .byte	0
11206 2762                        00            .byte	0
11207 2763                        FE            .byte	$FE
11208 2764                        FE            .byte	$FE
11209 2765                        7C            .byte	$7C
11210 2766                        7C            .byte	$7C
11211 2767                        38            .byte	$38
11212 2768                        38            .byte	$38
11213 2769                        10            .byte	$10
11214 276A                        00            .byte	0
11215 276B                        00            .byte	0
11216 276C                        00            .byte	0
11217 276D                        00            .byte	0
11218 276E                        00            .byte	0
11219                                           ! 1409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
11220 276F                        00            .byte	0
11221 2770                        00            .byte	0
11222 2771                        00            .byte	0
11223 2772                        00            .byte	0
11224 2773                        00            .byte	0
11225 2774                        00            .byte	0
11226 2775                        00            .byte	0
11227 2776                        00            .byte	0
11228 2777                        00            .byte	0
11229 2778                        00            .byte	0
11230 2779                        00            .byte	0
11231 277A                        00            .byte	0
11232 277B                        00            .byte	0
11233 277C                        00            .byte	0
11234 277D                        00            .byte	0
11235                                           ! 1409 00,
11236 277E                        00            .byte	0
11237                                           ! 1410  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11238 277F                        00            .byte	0
11239 2780                        00            .byte	0
11240 2781                        18            .byte	$18
11241 2782                        3C            .byte	$3C
11242 2783                        3C            .byte	$3C
11243 2784                        3C            .byte	$3C
11244 2785                        18            .byte	$18
11245 2786                        18            .byte	$18
11246 2787                        18            .byte	$18
11247 2788                        00            .byte	0
11248 2789                        18            .byte	$18
11249 278A                        18            .byte	$18
11250 278B                        00            .byte	0
11251 278C                        00            .byte	0
11252 278D                        00            .byte	0
11253 278E                        00            .byte	0
11254                                           ! 1411  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11255 278F                        00            .byte	0
11256 2790                        66            .byte	$66
11257 2791                        66            .byte	$66
11258 2792                        66            .byte	$66
11259 2793                        24            .byte	$24
11260 2794                        00            .byte	0
11261 2795                        00            .byte	0
11262 2796                        00            .byte	0
11263 2797                        00            .byte	0
11264 2798                        00            .byte	0
11265 2799                        00            .byte	0
11266 279A                        00            .byte	0
11267 279B                        00            .byte	0
11268 279C                        00            .byte	0
11269 279D                        00            .byte	0
11270 279E                        00            .byte	0
11271                                           ! 1412  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11272 279F                        00            .byte	0
11273 27A0                        00            .byte	0
11274 27A1                        00            .byte	0
11275 27A2                        6C            .byte	$6C
11276 27A3                        6C            .byte	$6C
11277 27A4                        FE            .byte	$FE
11278 27A5                        6C            .byte	$6C
11279 27A6                        6C            .byte	$6C
11280 27A7                        6C            .byte	$6C
11281 27A8                        FE            .byte	$FE
11282 27A9                        6C            .byte	$6C
11283 27AA                        6C            .byte	$6C
11284 27AB                        00            .byte	0
11285 27AC                        00            .byte	0
11286 27AD                        00            .byte	0
11287 27AE                        00            .byte	0
11288                                           ! 1413  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11289 27AF                        18            .byte	$18
11290 27B0                        18            .byte	$18
11291 27B1                        7C            .byte	$7C
11292 27B2                        C6            .byte	$C6
11293 27B3                        C2            .byte	$C2
11294 27B4                        C0            .byte	$C0
11295 27B5                        7C            .byte	$7C
11296 27B6                        06            .byte	6
11297 27B7                        06            .byte	6
11298 27B8                        86            .byte	$86
11299 27B9                        C6            .byte	$C6
11300 27BA                        7C            .byte	$7C
11301 27BB                        18            .byte	$18
11302 27BC                        18            .byte	$18
11303 27BD                        00            .byte	0
11304 27BE                        00            .byte	0
11305                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11306 27BF                        00            .byte	0
11307 27C0                        00            .byte	0
11308 27C1                        00            .byte	0
11309 27C2                        00            .byte	0
11310 27C3                        C2            .byte	$C2
11311 27C4                        C6            .byte	$C6
11312 27C5                        0C            .byte	$C
11313 27C6                        18            .byte	$18
11314 27C7                        30            .byte	$30
11315 27C8                        60            .byte	$60
11316 27C9                        C6            .byte	$C6
11317 27CA                        86            .byte	$86
11318 27CB                        00            .byte	0
11319 27CC                        00            .byte	0
11320 27CD                        00            .byte	0
11321 27CE                        00            .byte	0
11322                                           ! 1415  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11323 27CF                        00            .byte	0
11324 27D0                        00            .byte	0
11325 27D1                        38            .byte	$38
11326 27D2                        6C            .byte	$6C
11327 27D3                        6C            .byte	$6C
11328 27D4                        38            .byte	$38
11329 27D5                        76            .byte	$76
11330 27D6                        DC            .byte	$DC
11331 27D7                        CC            .byte	$CC
11332 27D8                        CC            .byte	$CC
11333 27D9                        CC            .byte	$CC
11334 27DA                        76            .byte	$76
11335 27DB                        00            .byte	0
11336 27DC                        00            .byte	0
11337 27DD                        00            .byte	0
11338 27DE                        00            .byte	0
11339                                           ! 1416  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11340 27DF                        00            .byte	0
11341 27E0                        30            .byte	$30
11342 27E1                        30            .byte	$30
11343 27E2                        30            .byte	$30
11344 27E3                        60            .byte	$60
11345 27E4                        00            .byte	0
11346 27E5                        00            .byte	0
11347 27E6                        00            .byte	0
11348 27E7                        00            .byte	0
11349 27E8                        00            .byte	0
11350 27E9                        00            .byte	0
11351 27EA                        00            .byte	0
11352 27EB                        00            .byte	0
11353 27EC                        00            .byte	0
11354 27ED                        00            .byte	0
11355 27EE                        00            .byte	0
11356                                           ! 1417  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11357 27EF                        00            .byte	0
11358 27F0                        00            .byte	0
11359 27F1                        0C            .byte	$C
11360 27F2                        18            .byte	$18
11361 27F3                        30            .byte	$30
11362 27F4                        30            .byte	$30
11363 27F5                        30            .byte	$30
11364 27F6                        30            .byte	$30
11365 27F7                        30            .byte	$30
11366 27F8                        30            .byte	$30
11367 27F9                        18            .byte	$18
11368 27FA                        0C            .byte	$C
11369 27FB                        00            .byte	0
11370 27FC                        00            .byte	0
11371 27FD                        00            .byte	0
11372 27FE                        00            .byte	0
11373                                           ! 1418  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11374 27FF                        00            .byte	0
11375 2800                        00            .byte	0
11376 2801                        30            .byte	$30
11377 2802                        18            .byte	$18
11378 2803                        0C            .byte	$C
11379 2804                        0C            .byte	$C
11380 2805                        0C            .byte	$C
11381 2806                        0C            .byte	$C
11382 2807                        0C            .byte	$C
11383 2808                        0C            .byte	$C
11384 2809                        18            .byte	$18
11385 280A                        30            .byte	$30
11386 280B                        00            .byte	0
11387 280C                        00            .byte	0
11388 280D                        00            .byte	0
11389 280E                        00            .byte	0
11390                                           ! 1419  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11391 280F                        00            .byte	0
11392 2810                        00            .byte	0
11393 2811                        00            .byte	0
11394 2812                        00            .byte	0
11395 2813                        00            .byte	0
11396 2814                        66            .byte	$66
11397 2815                        3C            .byte	$3C
11398 2816                        FF            .byte	$FF
11399 2817                        3C            .byte	$3C
11400 2818                        66            .byte	$66
11401 2819                        00            .byte	0
11402 281A                        00            .byte	0
11403 281B                        00            .byte	0
11404 281C                        00            .byte	0
11405 281D                        00            .byte	0
11406 281E                        00            .byte	0
11407                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11408 281F                        00            .byte	0
11409 2820                        00            .byte	0
11410 2821                        00            .byte	0
11411 2822                        00            .byte	0
11412 2823                        00            .byte	0
11413 2824                        18            .byte	$18
11414 2825                        18            .byte	$18
11415 2826                        7E            .byte	$7E
11416 2827                        18            .byte	$18
11417 2828                        18            .byte	$18
11418 2829                        00            .byte	0
11419 282A                        00            .byte	0
11420 282B                        00            .byte	0
11421 282C                        00            .byte	0
11422 282D                        00            .byte	0
11423 282E                        00            .byte	0
11424                                           ! 1421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11425 282F                        00            .byte	0
11426 2830                        00            .byte	0
11427 2831                        00            .byte	0
11428 2832                        00            .byte	0
11429 2833                        00            .byte	0
11430 2834                        00            .byte	0
11431 2835                        00            .byte	0
11432 2836                        00            .byte	0
11433 2837                        00            .byte	0
11434 2838                        18            .byte	$18
11435 2839                        18            .byte	$18
11436 283A                        18            .byte	$18
11437 283B                        30            .byte	$30
11438 283C                        00            .byte	0
11439 283D                        00            .byte	0
11440 283E                        00            .byte	0
11441                                           ! 1422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11442 283F                        00            .byte	0
11443 2840                        00            .byte	0
11444 2841                        00            .byte	0
11445 2842                        00            .byte	0
11446 2843                        00            .byte	0
11447 2844                        00            .byte	0
11448 2845                        00            .byte	0
11449 2846                        FE            .byte	$FE
11450 2847                        00            .byte	0
11451 2848                        00            .byte	0
11452 2849                        00            .byte	0
11453 284A                        00            .byte	0
11454 284B                        00            .byte	0
11455 284C                        00            .byte	0
11456 284D                        00            .byte	0
11457 284E                        00            .byte	0
11458                                           ! 1423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11459 284F                        00            .byte	0
11460 2850                        00            .byte	0
11461 2851                        00            .byte	0
11462 2852                        00            .byte	0
11463 2853                        00            .byte	0
11464 2854                        00            .byte	0
11465 2855                        00            .byte	0
11466 2856                        00            .byte	0
11467 2857                        00            .byte	0
11468 2858                        00            .byte	0
11469 2859                        18            .byte	$18
11470 285A                        18            .byte	$18
11471 285B                        00            .byte	0
11472 285C                        00            .byte	0
11473 285D                        00            .byte	0
11474 285E                        00            .byte	0
11475                                           ! 1424  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11476 285F                        00            .byte	0
11477 2860                        00            .byte	0
11478 2861                        00            .byte	0
11479 2862                        00            .byte	0
11480 2863                        02            .byte	2
11481 2864                        06            .byte	6
11482 2865                        0C            .byte	$C
11483 2866                        18            .byte	$18
11484 2867                        30            .byte	$30
11485 2868                        60            .byte	$60
11486 2869                        C0            .byte	$C0
11487 286A                        80            .byte	$80
11488 286B                        00            .byte	0
11489 286C                        00            .byte	0
11490 286D                        00            .byte	0
11491 286E                        00            .byte	0
11492                                           ! 1425  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11493 286F                        00            .byte	0
11494 2870                        00            .byte	0
11495 2871                        3C            .byte	$3C
11496 2872                        66            .byte	$66
11497 2873                        C3            .byte	$C3
11498 2874                        C3            .byte	$C3
11499 2875                        DB            .byte	$DB
11500 2876                        DB            .byte	$DB
11501 2877                        C3            .byte	$C3
11502 2878                        C3            .byte	$C3
11503 2879                        66            .byte	$66
11504 287A                        3C            .byte	$3C
11505 287B                        00            .byte	0
11506 287C                        00            .byte	0
11507 287D                        00            .byte	0
11508 287E                        00            .byte	0
11509                                           ! 1426  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11510 287F                        00            .byte	0
11511 2880                        00            .byte	0
11512 2881                        18            .byte	$18
11513 2882                        38            .byte	$38
11514 2883                        78            .byte	$78
11515 2884                        18            .byte	$18
11516 2885                        18            .byte	$18
11517 2886                        18            .byte	$18
11518 2887                        18            .byte	$18
11519 2888                        18            .byte	$18
11520 2889                        18            .byte	$18
11521 288A                        7E            .byte	$7E
11522 288B                        00            .byte	0
11523 288C                        00            .byte	0
11524 288D                        00            .byte	0
11525 288E                        00            .byte	0
11526                                           ! 1427  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11527 288F                        00            .byte	0
11528 2890                        00            .byte	0
11529 2891                        7C            .byte	$7C
11530 2892                        C6            .byte	$C6
11531 2893                        06            .byte	6
11532 2894                        0C            .byte	$C
11533 2895                        18            .byte	$18
11534 2896                        30            .byte	$30
11535 2897                        60            .byte	$60
11536 2898                        C0            .byte	$C0
11537 2899                        C6            .byte	$C6
11538 289A                        FE            .byte	$FE
11539 289B                        00            .byte	0
11540 289C                        00            .byte	0
11541 289D                        00            .byte	0
11542 289E                        00            .byte	0
11543                                           ! 1428  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11544 289F                        00            .byte	0
11545 28A0                        00            .byte	0
11546 28A1                        7C            .byte	$7C
11547 28A2                        C6            .byte	$C6
11548 28A3                        06            .byte	6
11549 28A4                        06            .byte	6
11550 28A5                        3C            .byte	$3C
11551 28A6                        06            .byte	6
11552 28A7                        06            .byte	6
11553 28A8                        06            .byte	6
11554 28A9                        C6            .byte	$C6
11555 28AA                        7C            .byte	$7C
11556 28AB                        00            .byte	0
11557 28AC                        00            .byte	0
11558 28AD                        00            .byte	0
11559 28AE                        00            .byte	0
11560                                           ! 1429  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11561 28AF                        00            .byte	0
11562 28B0                        00            .byte	0
11563 28B1                        0C            .byte	$C
11564 28B2                        1C            .byte	$1C
11565 28B3                        3C            .byte	$3C
11566 28B4                        6C            .byte	$6C
11567 28B5                        CC            .byte	$CC
11568 28B6                        FE            .byte	$FE
11569 28B7                        0C            .byte	$C
11570 28B8                        0C            .byte	$C
11571 28B9                        0C            .byte	$C
11572 28BA                        1E            .byte	$1E
11573 28BB                        00            .byte	0
11574 28BC                        00            .byte	0
11575 28BD                        00            .byte	0
11576 28BE                        00            .byte	0
11577                                           ! 1430  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11578 28BF                        00            .byte	0
11579 28C0                        00            .byte	0
11580 28C1                        FE            .byte	$FE
11581 28C2                        C0            .byte	$C0
11582 28C3                        C0            .byte	$C0
11583 28C4                        C0            .byte	$C0
11584 28C5                        FC            .byte	$FC
11585 28C6                        06            .byte	6
11586 28C7                        06            .byte	6
11587 28C8                        06            .byte	6
11588 28C9                        C6            .byte	$C6
11589 28CA                        7C            .byte	$7C
11590 28CB                        00            .byte	0
11591 28CC                        00            .byte	0
11592 28CD                        00            .byte	0
11593 28CE                        00            .byte	0
11594                                           ! 1431  0x00, 
11595 28CF                        00            .byte	0
11596                                           ! 1431 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11597 28D0                        00            .byte	0
11598 28D1                        38            .byte	$38
11599 28D2                        60            .byte	$60
11600 28D3                        C0            .byte	$C0
11601 28D4                        C0            .byte	$C0
11602 28D5                        FC            .byte	$FC
11603 28D6                        C6            .byte	$C6
11604 28D7                        C6            .byte	$C6
11605 28D8                        C6            .byte	$C6
11606 28D9                        C6            .byte	$C6
11607 28DA                        7C            .byte	$7C
11608 28DB                        00            .byte	0
11609 28DC                        00            .byte	0
11610 28DD                        00            .byte	0
11611 28DE                        00            .byte	0
11612                                           ! 1432  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11613 28DF                        00            .byte	0
11614 28E0                        00            .byte	0
11615 28E1                        FE            .byte	$FE
11616 28E2                        C6            .byte	$C6
11617 28E3                        06            .byte	6
11618 28E4                        06            .byte	6
11619 28E5                        0C            .byte	$C
11620 28E6                        18            .byte	$18
11621 28E7                        30            .byte	$30
11622 28E8                        30            .byte	$30
11623 28E9                        30            .byte	$30
11624 28EA                        30            .byte	$30
11625 28EB                        00            .byte	0
11626 28EC                        00            .byte	0
11627 28ED                        00            .byte	0
11628 28EE                        00            .byte	0
11629                                           ! 1433  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11630 28EF                        00            .byte	0
11631 28F0                        00            .byte	0
11632 28F1                        7C            .byte	$7C
11633 28F2                        C6            .byte	$C6
11634 28F3                        C6            .byte	$C6
11635 28F4                        C6            .byte	$C6
11636 28F5                        7C            .byte	$7C
11637 28F6                        C6            .byte	$C6
11638 28F7                        C6            .byte	$C6
11639 28F8                        C6            .byte	$C6
11640 28F9                        C6            .byte	$C6
11641 28FA                        7C            .byte	$7C
11642 28FB                        00            .byte	0
11643 28FC                        00            .byte	0
11644 28FD                        00            .byte	0
11645 28FE                        00            .byte	0
11646                                           ! 1434  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11647 28FF                        00            .byte	0
11648 2900                        00            .byte	0
11649 2901                        7C            .byte	$7C
11650 2902                        C6            .byte	$C6
11651 2903                        C6            .byte	$C6
11652 2904                        C6            .byte	$C6
11653 2905                        7E            .byte	$7E
11654 2906                        06            .byte	6
11655 2907                        06            .byte	6
11656 2908                        06            .byte	6
11657 2909                        0C            .byte	$C
11658 290A                        78            .byte	$78
11659 290B                        00            .byte	0
11660 290C                        00            .byte	0
11661 290D                        00            .byte	0
11662 290E                        00            .byte	0
11663                                           ! 1435  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11664 290F                        00            .byte	0
11665 2910                        00            .byte	0
11666 2911                        00            .byte	0
11667 2912                        00            .byte	0
11668 2913                        18            .byte	$18
11669 2914                        18            .byte	$18
11670 2915                        00            .byte	0
11671 2916                        00            .byte	0
11672 2917                        00            .byte	0
11673 2918                        18            .byte	$18
11674 2919                        18            .byte	$18
11675 291A                        00            .byte	0
11676 291B                        00            .byte	0
11677 291C                        00            .byte	0
11678 291D                        00            .byte	0
11679 291E                        00            .byte	0
11680                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11681 291F                        00            .byte	0
11682 2920                        00            .byte	0
11683 2921                        00            .byte	0
11684 2922                        00            .byte	0
11685 2923                        18            .byte	$18
11686 2924                        18            .byte	$18
11687 2925                        00            .byte	0
11688 2926                        00            .byte	0
11689 2927                        00            .byte	0
11690 2928                        18            .byte	$18
11691 2929                        18            .byte	$18
11692 292A                        30            .byte	$30
11693 292B                        00            .byte	0
11694 292C                        00            .byte	0
11695 292D                        00            .byte	0
11696 292E                        00            .byte	0
11697                                           ! 1437  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11698 292F                        00            .byte	0
11699 2930                        00            .byte	0
11700 2931                        00            .byte	0
11701 2932                        06            .byte	6
11702 2933                        0C            .byte	$C
11703 2934                        18            .byte	$18
11704 2935                        30            .byte	$30
11705 2936                        60            .byte	$60
11706 2937                        30            .byte	$30
11707 2938                        18            .byte	$18
11708 2939                        0C            .byte	$C
11709 293A                        06            .byte	6
11710 293B                        00            .byte	0
11711 293C                        00            .byte	0
11712 293D                        00            .byte	0
11713 293E                        00            .byte	0
11714                                           ! 1438  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11715 293F                        00            .byte	0
11716 2940                        00            .byte	0
11717 2941                        00            .byte	0
11718 2942                        00            .byte	0
11719 2943                        00            .byte	0
11720 2944                        7E            .byte	$7E
11721 2945                        00            .byte	0
11722 2946                        00            .byte	0
11723 2947                        7E            .byte	$7E
11724 2948                        00            .byte	0
11725 2949                        00            .byte	0
11726 294A                        00            .byte	0
11727 294B                        00            .byte	0
11728 294C                        00            .byte	0
11729 294D                        00            .byte	0
11730 294E                        00            .byte	0
11731                                           ! 1439  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11732 294F                        00            .byte	0
11733 2950                        00            .byte	0
11734 2951                        00            .byte	0
11735 2952                        60            .byte	$60
11736 2953                        30            .byte	$30
11737 2954                        18            .byte	$18
11738 2955                        0C            .byte	$C
11739 2956                        06            .byte	6
11740 2957                        0C            .byte	$C
11741 2958                        18            .byte	$18
11742 2959                        30            .byte	$30
11743 295A                        60            .byte	$60
11744 295B                        00            .byte	0
11745 295C                        00            .byte	0
11746 295D                        00            .byte	0
11747 295E                        00            .byte	0
11748                                           ! 1440  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11749 295F                        00            .byte	0
11750 2960                        00            .byte	0
11751 2961                        7C            .byte	$7C
11752 2962                        C6            .byte	$C6
11753 2963                        C6            .byte	$C6
11754 2964                        0C            .byte	$C
11755 2965                        18            .byte	$18
11756 2966                        18            .byte	$18
11757 2967                        18            .byte	$18
11758 2968                        00            .byte	0
11759 2969                        18            .byte	$18
11760 296A                        18            .byte	$18
11761 296B                        00            .byte	0
11762 296C                        00            .byte	0
11763 296D                        00            .byte	0
11764 296E                        00            .byte	0
11765                                           ! 1441  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11766 296F                        00            .byte	0
11767 2970                        00            .byte	0
11768 2971                        00            .byte	0
11769 2972                        7C            .byte	$7C
11770 2973                        C6            .byte	$C6
11771 2974                        C6            .byte	$C6
11772 2975                        DE            .byte	$DE
11773 2976                        DE            .byte	$DE
11774 2977                        DE            .byte	$DE
11775 2978                        DC            .byte	$DC
11776 2979                        C0            .byte	$C0
11777 297A                        7C            .byte	$7C
11778 297B                        00            .byte	0
11779 297C                        00            .byte	0
11780 297D                        00            .byte	0
11781 297E                        00            .byte	0
11782                                           ! 1442  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11783 297F                        00            .byte	0
11784 2980                        00            .byte	0
11785 2981                        10            .byte	$10
11786 2982                        38            .byte	$38
11787 2983                        6C            .byte	$6C
11788 2984                        C6            .byte	$C6
11789 2985                        C6            .byte	$C6
11790 2986                        FE            .byte	$FE
11791 2987                        C6            .byte	$C6
11792 2988                        C6            .byte	$C6
11793 2989                        C6            .byte	$C6
11794 298A                        C6            .byte	$C6
11795 298B                        00            .byte	0
11796 298C                        00            .byte	0
11797 298D                        00            .byte	0
11798 298E                        00            .byte	0
11799                                           ! 1443  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11800 298F                        00            .byte	0
11801 2990                        00            .byte	0
11802 2991                        FC            .byte	$FC
11803 2992                        66            .byte	$66
11804 2993                        66            .byte	$66
11805 2994                        66            .byte	$66
11806 2995                        7C            .byte	$7C
11807 2996                        66            .byte	$66
11808 2997                        66            .byte	$66
11809 2998                        66            .byte	$66
11810 2999                        66            .byte	$66
11811 299A                        FC            .byte	$FC
11812 299B                        00            .byte	0
11813 299C                        00            .byte	0
11814 299D                        00            .byte	0
11815 299E                        00            .byte	0
11816                                           ! 1444  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11817 299F                        00            .byte	0
11818 29A0                        00            .byte	0
11819 29A1                        3C            .byte	$3C
11820 29A2                        66            .byte	$66
11821 29A3                        C2            .byte	$C2
11822 29A4                        C0            .byte	$C0
11823 29A5                        C0            .byte	$C0
11824 29A6                        C0            .byte	$C0
11825 29A7                        C0            .byte	$C0
11826 29A8                        C2            .byte	$C2
11827 29A9                        66            .byte	$66
11828 29AA                        3C            .byte	$3C
11829 29AB                        00            .byte	0
11830 29AC                        00            .byte	0
11831 29AD                        00            .byte	0
11832 29AE                        00            .byte	0
11833                                           ! 1445  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11834 29AF                        00            .byte	0
11835 29B0                        00            .byte	0
11836 29B1                        F8            .byte	$F8
11837 29B2                        6C            .byte	$6C
11838 29B3                        66            .byte	$66
11839 29B4                        66            .byte	$66
11840 29B5                        66            .byte	$66
11841 29B6                        66            .byte	$66
11842 29B7                        66            .byte	$66
11843 29B8                        66            .byte	$66
11844 29B9                        6C            .byte	$6C
11845 29BA                        F8            .byte	$F8
11846 29BB                        00            .byte	0
11847 29BC                        00            .byte	0
11848 29BD                        00            .byte	0
11849 29BE                        00            .byte	0
11850                                           ! 1446  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11851 29BF                        00            .byte	0
11852 29C0                        00            .byte	0
11853 29C1                        FE            .byte	$FE
11854 29C2                        66            .byte	$66
11855 29C3                        62            .byte	$62
11856 29C4                        68            .byte	$68
11857 29C5                        78            .byte	$78
11858 29C6                        68            .byte	$68
11859 29C7                        60            .byte	$60
11860 29C8                        62            .byte	$62
11861 29C9                        66            .byte	$66
11862 29CA                        FE            .byte	$FE
11863 29CB                        00            .byte	0
11864 29CC                        00            .byte	0
11865 29CD                        00            .byte	0
11866 29CE                        00            .byte	0
11867                                           ! 1447  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11868 29CF                        00            .byte	0
11869 29D0                        00            .byte	0
11870 29D1                        FE            .byte	$FE
11871 29D2                        66            .byte	$66
11872 29D3                        62            .byte	$62
11873 29D4                        68            .byte	$68
11874 29D5                        78            .byte	$78
11875 29D6                        68            .byte	$68
11876 29D7                        60            .byte	$60
11877 29D8                        60            .byte	$60
11878 29D9                        60            .byte	$60
11879 29DA                        F0            .byte	$F0
11880 29DB                        00            .byte	0
11881 29DC                        00            .byte	0
11882 29DD                        00            .byte	0
11883 29DE                        00            .byte	0
11884                                           ! 1448  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11885 29DF                        00            .byte	0
11886 29E0                        00            .byte	0
11887 29E1                        3C            .byte	$3C
11888 29E2                        66            .byte	$66
11889 29E3                        C2            .byte	$C2
11890 29E4                        C0            .byte	$C0
11891 29E5                        C0            .byte	$C0
11892 29E6                        DE            .byte	$DE
11893 29E7                        C6            .byte	$C6
11894 29E8                        C6            .byte	$C6
11895 29E9                        66            .byte	$66
11896 29EA                        3A            .byte	$3A
11897 29EB                        00            .byte	0
11898 29EC                        00            .byte	0
11899 29ED                        00            .byte	0
11900 29EE                        00            .byte	0
11901                                           ! 1449  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11902 29EF                        00            .byte	0
11903 29F0                        00            .byte	0
11904 29F1                        C6            .byte	$C6
11905 29F2                        C6            .byte	$C6
11906 29F3                        C6            .byte	$C6
11907 29F4                        C6            .byte	$C6
11908 29F5                        FE            .byte	$FE
11909 29F6                        C6            .byte	$C6
11910 29F7                        C6            .byte	$C6
11911 29F8                        C6            .byte	$C6
11912 29F9                        C6            .byte	$C6
11913 29FA                        C6            .byte	$C6
11914 29FB                        00            .byte	0
11915 29FC                        00            .byte	0
11916 29FD                        00            .byte	0
11917 29FE                        00            .byte	0
11918                                           ! 1450  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11919 29FF                        00            .byte	0
11920 2A00                        00            .byte	0
11921 2A01                        3C            .byte	$3C
11922 2A02                        18            .byte	$18
11923 2A03                        18            .byte	$18
11924 2A04                        18            .byte	$18
11925 2A05                        18            .byte	$18
11926 2A06                        18            .byte	$18
11927 2A07                        18            .byte	$18
11928 2A08                        18            .byte	$18
11929 2A09                        18            .byte	$18
11930 2A0A                        3C            .byte	$3C
11931 2A0B                        00            .byte	0
11932 2A0C                        00            .byte	0
11933 2A0D                        00            .byte	0
11934 2A0E                        00            .byte	0
11935                                           ! 1451  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11936 2A0F                        00            .byte	0
11937 2A10                        00            .byte	0
11938 2A11                        1E            .byte	$1E
11939 2A12                        0C            .byte	$C
11940 2A13                        0C            .byte	$C
11941 2A14                        0C            .byte	$C
11942 2A15                        0C            .byte	$C
11943 2A16                        0C            .byte	$C
11944 2A17                        CC            .byte	$CC
11945 2A18                        CC            .byte	$CC
11946 2A19                        CC            .byte	$CC
11947 2A1A                        78            .byte	$78
11948 2A1B                        00            .byte	0
11949 2A1C                        00            .byte	0
11950 2A1D                        00            .byte	0
11951 2A1E                        00            .byte	0
11952                                           ! 1452  0x00, 0x00, 0xe6,
11953 2A1F                        00            .byte	0
11954 2A20                        00            .byte	0
11955                                           ! 1452  0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11956 2A21                        E6            .byte	$E6
11957 2A22                        66            .byte	$66
11958 2A23                        66            .byte	$66
11959 2A24                        6C            .byte	$6C
11960 2A25                        78            .byte	$78
11961 2A26                        78            .byte	$78
11962 2A27                        6C            .byte	$6C
11963 2A28                        66            .byte	$66
11964 2A29                        66            .byte	$66
11965 2A2A                        E6            .byte	$E6
11966 2A2B                        00            .byte	0
11967 2A2C                        00            .byte	0
11968 2A2D                        00            .byte	0
11969 2A2E                        00            .byte	0
11970                                           ! 1453  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11971 2A2F                        00            .byte	0
11972 2A30                        00            .byte	0
11973 2A31                        F0            .byte	$F0
11974 2A32                        60            .byte	$60
11975 2A33                        60            .byte	$60
11976 2A34                        60            .byte	$60
11977 2A35                        60            .byte	$60
11978 2A36                        60            .byte	$60
11979 2A37                        60            .byte	$60
11980 2A38                        62            .byte	$62
11981 2A39                        66            .byte	$66
11982 2A3A                        FE            .byte	$FE
11983 2A3B                        00            .byte	0
11984 2A3C                        00            .byte	0
11985 2A3D                        00            .byte	0
11986 2A3E                        00            .byte	0
11987                                           ! 1454  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11988 2A3F                        00            .byte	0
11989 2A40                        00            .byte	0
11990 2A41                        C3            .byte	$C3
11991 2A42                        E7            .byte	$E7
11992 2A43                        FF            .byte	$FF
11993 2A44                        FF            .byte	$FF
11994 2A45                        DB            .byte	$DB
11995 2A46                        C3            .byte	$C3
11996 2A47                        C3            .byte	$C3
11997 2A48                        C3            .byte	$C3
11998 2A49                        C3            .byte	$C3
11999 2A4A                        C3            .byte	$C3
12000 2A4B                        00            .byte	0
12001 2A4C                        00            .byte	0
12002 2A4D                        00            .byte	0
12003 2A4E                        00            .byte	0
12004                                           ! 1455  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12005 2A4F                        00            .byte	0
12006 2A50                        00            .byte	0
12007 2A51                        C6            .byte	$C6
12008 2A52                        E6            .byte	$E6
12009 2A53                        F6            .byte	$F6
12010 2A54                        FE            .byte	$FE
12011 2A55                        DE            .byte	$DE
12012 2A56                        CE            .byte	$CE
12013 2A57                        C6            .byte	$C6
12014 2A58                        C6            .byte	$C6
12015 2A59                        C6            .byte	$C6
12016 2A5A                        C6            .byte	$C6
12017 2A5B                        00            .byte	0
12018 2A5C                        00            .byte	0
12019 2A5D                        00            .byte	0
12020 2A5E                        00            .byte	0
12021                                           ! 1456  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12022 2A5F                        00            .byte	0
12023 2A60                        00            .byte	0
12024 2A61                        7C            .byte	$7C
12025 2A62                        C6            .byte	$C6
12026 2A63                        C6            .byte	$C6
12027 2A64                        C6            .byte	$C6
12028 2A65                        C6            .byte	$C6
12029 2A66                        C6            .byte	$C6
12030 2A67                        C6            .byte	$C6
12031 2A68                        C6            .byte	$C6
12032 2A69                        C6            .byte	$C6
12033 2A6A                        7C            .byte	$7C
12034 2A6B                        00            .byte	0
12035 2A6C                        00            .byte	0
12036 2A6D                        00            .byte	0
12037 2A6E                        00            .byte	0
12038                                           ! 1457  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12039 2A6F                        00            .byte	0
12040 2A70                        00            .byte	0
12041 2A71                        FC            .byte	$FC
12042 2A72                        66            .byte	$66
12043 2A73                        66            .byte	$66
12044 2A74                        66            .byte	$66
12045 2A75                        7C            .byte	$7C
12046 2A76                        60            .byte	$60
12047 2A77                        60            .byte	$60
12048 2A78                        60            .byte	$60
12049 2A79                        60            .byte	$60
12050 2A7A                        F0            .byte	$F0
12051 2A7B                        00            .byte	0
12052 2A7C                        00            .byte	0
12053 2A7D                        00            .byte	0
12054 2A7E                        00            .byte	0
12055                                           ! 1458  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
12056 2A7F                        00            .byte	0
12057 2A80                        00            .byte	0
12058 2A81                        7C            .byte	$7C
12059 2A82                        C6            .byte	$C6
12060 2A83                        C6            .byte	$C6
12061 2A84                        C6            .byte	$C6
12062 2A85                        C6            .byte	$C6
12063 2A86                        C6            .byte	$C6
12064 2A87                        C6            .byte	$C6
12065 2A88                        D6            .byte	$D6
12066 2A89                        DE            .byte	$DE
12067 2A8A                        7C            .byte	$7C
12068 2A8B                        0C            .byte	$C
12069 2A8C                        0E            .byte	$E
12070 2A8D                        00            .byte	0
12071 2A8E                        00            .byte	0
12072                                           ! 1459  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12073 2A8F                        00            .byte	0
12074 2A90                        00            .byte	0
12075 2A91                        FC            .byte	$FC
12076 2A92                        66            .byte	$66
12077 2A93                        66            .byte	$66
12078 2A94                        66            .byte	$66
12079 2A95                        7C            .byte	$7C
12080 2A96                        6C            .byte	$6C
12081 2A97                        66            .byte	$66
12082 2A98                        66            .byte	$66
12083 2A99                        66            .byte	$66
12084 2A9A                        E6            .byte	$E6
12085 2A9B                        00            .byte	0
12086 2A9C                        00            .byte	0
12087 2A9D                        00            .byte	0
12088 2A9E                        00            .byte	0
12089                                           ! 1460  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12090 2A9F                        00            .byte	0
12091 2AA0                        00            .byte	0
12092 2AA1                        7C            .byte	$7C
12093 2AA2                        C6            .byte	$C6
12094 2AA3                        C6            .byte	$C6
12095 2AA4                        60            .byte	$60
12096 2AA5                        38            .byte	$38
12097 2AA6                        0C            .byte	$C
12098 2AA7                        06            .byte	6
12099 2AA8                        C6            .byte	$C6
12100 2AA9                        C6            .byte	$C6
12101 2AAA                        7C            .byte	$7C
12102 2AAB                        00            .byte	0
12103 2AAC                        00            .byte	0
12104 2AAD                        00            .byte	0
12105 2AAE                        00            .byte	0
12106                                           ! 1461  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12107 2AAF                        00            .byte	0
12108 2AB0                        00            .byte	0
12109 2AB1                        FF            .byte	$FF
12110 2AB2                        DB            .byte	$DB
12111 2AB3                        99            .byte	$99
12112 2AB4                        18            .byte	$18
12113 2AB5                        18            .byte	$18
12114 2AB6                        18            .byte	$18
12115 2AB7                        18            .byte	$18
12116 2AB8                        18            .byte	$18
12117 2AB9                        18            .byte	$18
12118 2ABA                        3C            .byte	$3C
12119 2ABB                        00            .byte	0
12120 2ABC                        00            .byte	0
12121 2ABD                        00            .byte	0
12122 2ABE                        00            .byte	0
12123                                           ! 1462  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12124 2ABF                        00            .byte	0
12125 2AC0                        00            .byte	0
12126 2AC1                        C6            .byte	$C6
12127 2AC2                        C6            .byte	$C6
12128 2AC3                        C6            .byte	$C6
12129 2AC4                        C6            .byte	$C6
12130 2AC5                        C6            .byte	$C6
12131 2AC6                        C6            .byte	$C6
12132 2AC7                        C6            .byte	$C6
12133 2AC8                        C6            .byte	$C6
12134 2AC9                        C6            .byte	$C6
12135 2ACA                        7C            .byte	$7C
12136 2ACB                        00            .byte	0
12137 2ACC                        00            .byte	0
12138 2ACD                        00            .byte	0
12139 2ACE                        00            .byte	0
12140                                           ! 1463  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12141 2ACF                        00            .byte	0
12142 2AD0                        00            .byte	0
12143 2AD1                        C3            .byte	$C3
12144 2AD2                        C3            .byte	$C3
12145 2AD3                        C3            .byte	$C3
12146 2AD4                        C3            .byte	$C3
12147 2AD5                        C3            .byte	$C3
12148 2AD6                        C3            .byte	$C3
12149 2AD7                        C3            .byte	$C3
12150 2AD8                        66            .byte	$66
12151 2AD9                        3C            .byte	$3C
12152 2ADA                        18            .byte	$18
12153 2ADB                        00            .byte	0
12154 2ADC                        00            .byte	0
12155 2ADD                        00            .byte	0
12156 2ADE                        00            .byte	0
12157                                           ! 1464  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12158 2ADF                        00            .byte	0
12159 2AE0                        00            .byte	0
12160 2AE1                        C3            .byte	$C3
12161 2AE2                        C3            .byte	$C3
12162 2AE3                        C3            .byte	$C3
12163 2AE4                        C3            .byte	$C3
12164 2AE5                        C3            .byte	$C3
12165 2AE6                        DB            .byte	$DB
12166 2AE7                        DB            .byte	$DB
12167 2AE8                        FF            .byte	$FF
12168 2AE9                        66            .byte	$66
12169 2AEA                        66            .byte	$66
12170 2AEB                        00            .byte	0
12171 2AEC                        00            .byte	0
12172 2AED                        00            .byte	0
12173 2AEE                        00            .byte	0
12174                                           ! 1465  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
12175 2AEF                        00            .byte	0
12176 2AF0                        00            .byte	0
12177 2AF1                        C3            .byte	$C3
12178 2AF2                        C3            .byte	$C3
12179 2AF3                        66            .byte	$66
12180 2AF4                        3C            .byte	$3C
12181 2AF5                        18            .byte	$18
12182 2AF6                        18            .byte	$18
12183 2AF7                        3C            .byte	$3C
12184 2AF8                        66            .byte	$66
12185 2AF9                        C3            .byte	$C3
12186 2AFA                        C3            .byte	$C3
12187 2AFB                        00            .byte	0
12188 2AFC                        00            .byte	0
12189 2AFD                        00            .byte	0
12190 2AFE                        00            .byte	0
12191                                           ! 1466  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12192 2AFF                        00            .byte	0
12193 2B00                        00            .byte	0
12194 2B01                        C3            .byte	$C3
12195 2B02                        C3            .byte	$C3
12196 2B03                        C3            .byte	$C3
12197 2B04                        66            .byte	$66
12198 2B05                        3C            .byte	$3C
12199 2B06                        18            .byte	$18
12200 2B07                        18            .byte	$18
12201 2B08                        18            .byte	$18
12202 2B09                        18            .byte	$18
12203 2B0A                        3C            .byte	$3C
12204 2B0B                        00            .byte	0
12205 2B0C                        00            .byte	0
12206 2B0D                        00            .byte	0
12207 2B0E                        00            .byte	0
12208                                           ! 1467  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
12209 2B0F                        00            .byte	0
12210 2B10                        00            .byte	0
12211 2B11                        FF            .byte	$FF
12212 2B12                        C3            .byte	$C3
12213 2B13                        86            .byte	$86
12214 2B14                        0C            .byte	$C
12215 2B15                        18            .byte	$18
12216 2B16                        30            .byte	$30
12217 2B17                        60            .byte	$60
12218 2B18                        C1            .byte	$C1
12219 2B19                        C3            .byte	$C3
12220 2B1A                        FF            .byte	$FF
12221 2B1B                        00            .byte	0
12222 2B1C                        00            .byte	0
12223 2B1D                        00            .byte	0
12224 2B1E                        00            .byte	0
12225                                           ! 1468  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
12226 2B1F                        00            .byte	0
12227 2B20                        00            .byte	0
12228 2B21                        3C            .byte	$3C
12229 2B22                        30            .byte	$30
12230 2B23                        30            .byte	$30
12231 2B24                        30            .byte	$30
12232 2B25                        30            .byte	$30
12233 2B26                        30            .byte	$30
12234 2B27                        30            .byte	$30
12235 2B28                        30            .byte	$30
12236 2B29                        30            .byte	$30
12237 2B2A                        3C            .byte	$3C
12238 2B2B                        00            .byte	0
12239 2B2C                        00            .byte	0
12240 2B2D                        00            .byte	0
12241 2B2E                        00            .byte	0
12242                                           ! 1469  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
12243 2B2F                        00            .byte	0
12244 2B30                        00            .byte	0
12245 2B31                        00            .byte	0
12246 2B32                        80            .byte	$80
12247 2B33                        C0            .byte	$C0
12248 2B34                        E0            .byte	$E0
12249 2B35                        70            .byte	$70
12250 2B36                        38            .byte	$38
12251 2B37                        1C            .byte	$1C
12252 2B38                        0E            .byte	$E
12253 2B39                        06            .byte	6
12254 2B3A                        02            .byte	2
12255 2B3B                        00            .byte	0
12256 2B3C                        00            .byte	0
12257 2B3D                        00            .byte	0
12258 2B3E                        00            .byte	0
12259                                           ! 1470  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12260 2B3F                        00            .byte	0
12261 2B40                        00            .byte	0
12262 2B41                        3C            .byte	$3C
12263 2B42                        0C            .byte	$C
12264 2B43                        0C            .byte	$C
12265 2B44                        0C            .byte	$C
12266 2B45                        0C            .byte	$C
12267 2B46                        0C            .byte	$C
12268 2B47                        0C            .byte	$C
12269 2B48                        0C            .byte	$C
12270 2B49                        0C            .byte	$C
12271 2B4A                        3C            .byte	$3C
12272 2B4B                        00            .byte	0
12273 2B4C                        00            .byte	0
12274 2B4D                        00            .byte	0
12275 2B4E                        00            .byte	0
12276                                           ! 1471  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12277 2B4F                        10            .byte	$10
12278 2B50                        38            .byte	$38
12279 2B51                        6C            .byte	$6C
12280 2B52                        C6            .byte	$C6
12281 2B53                        00            .byte	0
12282 2B54                        00            .byte	0
12283 2B55                        00            .byte	0
12284 2B56                        00            .byte	0
12285 2B57                        00            .byte	0
12286 2B58                        00            .byte	0
12287 2B59                        00            .byte	0
12288 2B5A                        00            .byte	0
12289 2B5B                        00            .byte	0
12290 2B5C                        00            .byte	0
12291 2B5D                        00            .byte	0
12292 2B5E                        00            .byte	0
12293                                           ! 1472  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12294 2B5F                        00            .byte	0
12295 2B60                        00            .byte	0
12296 2B61                        00            .byte	0
12297 2B62                        00            .byte	0
12298 2B63                        00            .byte	0
12299 2B64                        00            .byte	0
12300 2B65                        00            .byte	0
12301 2B66                        00            .byte	0
12302 2B67                        00            .byte	0
12303 2B68                        00            .byte	0
12304 2B69                        00            .byte	0
12305 2B6A                        00            .byte	0
12306 2B6B                        00            .byte	0
12307 2B6C                        FF            .byte	$FF
12308 2B6D                        00            .byte	0
12309 2B6E                        00            .byte	0
12310                                           ! 1473  0x30, 0x30, 0x18, 0x00, 0x00
12311 2B6F                        30            .byte	$30
12312 2B70                        30            .byte	$30
12313 2B71                        18            .byte	$18
12314 2B72                        00            .byte	0
12315                                           ! 1473 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12316 2B73                        00            .byte	0
12317 2B74                        00            .byte	0
12318 2B75                        00            .byte	0
12319 2B76                        00            .byte	0
12320 2B77                        00            .byte	0
12321 2B78                        00            .byte	0
12322 2B79                        00            .byte	0
12323 2B7A                        00            .byte	0
12324 2B7B                        00            .byte	0
12325 2B7C                        00            .byte	0
12326 2B7D                        00            .byte	0
12327 2B7E                        00            .byte	0
12328                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12329 2B7F                        00            .byte	0
12330 2B80                        00            .byte	0
12331 2B81                        00            .byte	0
12332 2B82                        00            .byte	0
12333 2B83                        00            .byte	0
12334 2B84                        78            .byte	$78
12335 2B85                        0C            .byte	$C
12336 2B86                        7C            .byte	$7C
12337 2B87                        CC            .byte	$CC
12338 2B88                        CC            .byte	$CC
12339 2B89                        CC            .byte	$CC
12340 2B8A                        76            .byte	$76
12341 2B8B                        00            .byte	0
12342 2B8C                        00            .byte	0
12343 2B8D                        00            .byte	0
12344 2B8E                        00            .byte	0
12345                                           ! 1475  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12346 2B8F                        00            .byte	0
12347 2B90                        00            .byte	0
12348 2B91                        E0            .byte	$E0
12349 2B92                        60            .byte	$60
12350 2B93                        60            .byte	$60
12351 2B94                        78            .byte	$78
12352 2B95                        6C            .byte	$6C
12353 2B96                        66            .byte	$66
12354 2B97                        66            .byte	$66
12355 2B98                        66            .byte	$66
12356 2B99                        66            .byte	$66
12357 2B9A                        7C            .byte	$7C
12358 2B9B                        00            .byte	0
12359 2B9C                        00            .byte	0
12360 2B9D                        00            .byte	0
12361 2B9E                        00            .byte	0
12362                                           ! 1476  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12363 2B9F                        00            .byte	0
12364 2BA0                        00            .byte	0
12365 2BA1                        00            .byte	0
12366 2BA2                        00            .byte	0
12367 2BA3                        00            .byte	0
12368 2BA4                        7C            .byte	$7C
12369 2BA5                        C6            .byte	$C6
12370 2BA6                        C0            .byte	$C0
12371 2BA7                        C0            .byte	$C0
12372 2BA8                        C0            .byte	$C0
12373 2BA9                        C6            .byte	$C6
12374 2BAA                        7C            .byte	$7C
12375 2BAB                        00            .byte	0
12376 2BAC                        00            .byte	0
12377 2BAD                        00            .byte	0
12378 2BAE                        00            .byte	0
12379                                           ! 1477  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12380 2BAF                        00            .byte	0
12381 2BB0                        00            .byte	0
12382 2BB1                        1C            .byte	$1C
12383 2BB2                        0C            .byte	$C
12384 2BB3                        0C            .byte	$C
12385 2BB4                        3C            .byte	$3C
12386 2BB5                        6C            .byte	$6C
12387 2BB6                        CC            .byte	$CC
12388 2BB7                        CC            .byte	$CC
12389 2BB8                        CC            .byte	$CC
12390 2BB9                        CC            .byte	$CC
12391 2BBA                        76            .byte	$76
12392 2BBB                        00            .byte	0
12393 2BBC                        00            .byte	0
12394 2BBD                        00            .byte	0
12395 2BBE                        00            .byte	0
12396                                           ! 1478  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12397 2BBF                        00            .byte	0
12398 2BC0                        00            .byte	0
12399 2BC1                        00            .byte	0
12400 2BC2                        00            .byte	0
12401 2BC3                        00            .byte	0
12402 2BC4                        7C            .byte	$7C
12403 2BC5                        C6            .byte	$C6
12404 2BC6                        FE            .byte	$FE
12405 2BC7                        C0            .byte	$C0
12406 2BC8                        C0            .byte	$C0
12407 2BC9                        C6            .byte	$C6
12408 2BCA                        7C            .byte	$7C
12409 2BCB                        00            .byte	0
12410 2BCC                        00            .byte	0
12411 2BCD                        00            .byte	0
12412 2BCE                        00            .byte	0
12413                                           ! 1479  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12414 2BCF                        00            .byte	0
12415 2BD0                        00            .byte	0
12416 2BD1                        38            .byte	$38
12417 2BD2                        6C            .byte	$6C
12418 2BD3                        64            .byte	$64
12419 2BD4                        60            .byte	$60
12420 2BD5                        F0            .byte	$F0
12421 2BD6                        60            .byte	$60
12422 2BD7                        60            .byte	$60
12423 2BD8                        60            .byte	$60
12424 2BD9                        60            .byte	$60
12425 2BDA                        F0            .byte	$F0
12426 2BDB                        00            .byte	0
12427 2BDC                        00            .byte	0
12428 2BDD                        00            .byte	0
12429 2BDE                        00            .byte	0
12430                                           ! 1480  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12431 2BDF                        00            .byte	0
12432 2BE0                        00            .byte	0
12433 2BE1                        00            .byte	0
12434 2BE2                        00            .byte	0
12435 2BE3                        00            .byte	0
12436 2BE4                        76            .byte	$76
12437 2BE5                        CC            .byte	$CC
12438 2BE6                        CC            .byte	$CC
12439 2BE7                        CC            .byte	$CC
12440 2BE8                        CC            .byte	$CC
12441 2BE9                        CC            .byte	$CC
12442 2BEA                        7C            .byte	$7C
12443 2BEB                        0C            .byte	$C
12444 2BEC                        CC            .byte	$CC
12445 2BED                        78            .byte	$78
12446 2BEE                        00            .byte	0
12447                                           ! 1481  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12448 2BEF                        00            .byte	0
12449 2BF0                        00            .byte	0
12450 2BF1                        E0            .byte	$E0
12451 2BF2                        60            .byte	$60
12452 2BF3                        60            .byte	$60
12453 2BF4                        6C            .byte	$6C
12454 2BF5                        76            .byte	$76
12455 2BF6                        66            .byte	$66
12456 2BF7                        66            .byte	$66
12457 2BF8                        66            .byte	$66
12458 2BF9                        66            .byte	$66
12459 2BFA                        E6            .byte	$E6
12460 2BFB                        00            .byte	0
12461 2BFC                        00            .byte	0
12462 2BFD                        00            .byte	0
12463 2BFE                        00            .byte	0
12464                                           ! 1482  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12465 2BFF                        00            .byte	0
12466 2C00                        00            .byte	0
12467 2C01                        18            .byte	$18
12468 2C02                        18            .byte	$18
12469 2C03                        00            .byte	0
12470 2C04                        38            .byte	$38
12471 2C05                        18            .byte	$18
12472 2C06                        18            .byte	$18
12473 2C07                        18            .byte	$18
12474 2C08                        18            .byte	$18
12475 2C09                        18            .byte	$18
12476 2C0A                        3C            .byte	$3C
12477 2C0B                        00            .byte	0
12478 2C0C                        00            .byte	0
12479 2C0D                        00            .byte	0
12480 2C0E                        00            .byte	0
12481                                           ! 1483  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12482 2C0F                        00            .byte	0
12483 2C10                        00            .byte	0
12484 2C11                        06            .byte	6
12485 2C12                        06            .byte	6
12486 2C13                        00            .byte	0
12487 2C14                        0E            .byte	$E
12488 2C15                        06            .byte	6
12489 2C16                        06            .byte	6
12490 2C17                        06            .byte	6
12491 2C18                        06            .byte	6
12492 2C19                        06            .byte	6
12493 2C1A                        06            .byte	6
12494 2C1B                        66            .byte	$66
12495 2C1C                        66            .byte	$66
12496 2C1D                        3C            .byte	$3C
12497 2C1E                        00            .byte	0
12498                                           ! 1484  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12499 2C1F                        00            .byte	0
12500 2C20                        00            .byte	0
12501 2C21                        E0            .byte	$E0
12502 2C22                        60            .byte	$60
12503 2C23                        60            .byte	$60
12504 2C24                        66            .byte	$66
12505 2C25                        6C            .byte	$6C
12506 2C26                        78            .byte	$78
12507 2C27                        78            .byte	$78
12508 2C28                        6C            .byte	$6C
12509 2C29                        66            .byte	$66
12510 2C2A                        E6            .byte	$E6
12511 2C2B                        00            .byte	0
12512 2C2C                        00            .byte	0
12513 2C2D                        00            .byte	0
12514 2C2E                        00            .byte	0
12515                                           ! 1485  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12516 2C2F                        00            .byte	0
12517 2C30                        00            .byte	0
12518 2C31                        38            .byte	$38
12519 2C32                        18            .byte	$18
12520 2C33                        18            .byte	$18
12521 2C34                        18            .byte	$18
12522 2C35                        18            .byte	$18
12523 2C36                        18            .byte	$18
12524 2C37                        18            .byte	$18
12525 2C38                        18            .byte	$18
12526 2C39                        18            .byte	$18
12527 2C3A                        3C            .byte	$3C
12528 2C3B                        00            .byte	0
12529 2C3C                        00            .byte	0
12530 2C3D                        00            .byte	0
12531 2C3E                        00            .byte	0
12532                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12533 2C3F                        00            .byte	0
12534 2C40                        00            .byte	0
12535 2C41                        00            .byte	0
12536 2C42                        00            .byte	0
12537 2C43                        00            .byte	0
12538 2C44                        E6            .byte	$E6
12539 2C45                        FF            .byte	$FF
12540 2C46                        DB            .byte	$DB
12541 2C47                        DB            .byte	$DB
12542 2C48                        DB            .byte	$DB
12543 2C49                        DB            .byte	$DB
12544 2C4A                        DB            .byte	$DB
12545 2C4B                        00            .byte	0
12546 2C4C                        00            .byte	0
12547 2C4D                        00            .byte	0
12548 2C4E                        00            .byte	0
12549                                           ! 1487  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12550 2C4F                        00            .byte	0
12551 2C50                        00            .byte	0
12552 2C51                        00            .byte	0
12553 2C52                        00            .byte	0
12554 2C53                        00            .byte	0
12555 2C54                        DC            .byte	$DC
12556 2C55                        66            .byte	$66
12557 2C56                        66            .byte	$66
12558 2C57                        66            .byte	$66
12559 2C58                        66            .byte	$66
12560 2C59                        66            .byte	$66
12561 2C5A                        66            .byte	$66
12562 2C5B                        00            .byte	0
12563 2C5C                        00            .byte	0
12564 2C5D                        00            .byte	0
12565 2C5E                        00            .byte	0
12566                                           ! 1488  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12567 2C5F                        00            .byte	0
12568 2C60                        00            .byte	0
12569 2C61                        00            .byte	0
12570 2C62                        00            .byte	0
12571 2C63                        00            .byte	0
12572 2C64                        7C            .byte	$7C
12573 2C65                        C6            .byte	$C6
12574 2C66                        C6            .byte	$C6
12575 2C67                        C6            .byte	$C6
12576 2C68                        C6            .byte	$C6
12577 2C69                        C6            .byte	$C6
12578 2C6A                        7C            .byte	$7C
12579 2C6B                        00            .byte	0
12580 2C6C                        00            .byte	0
12581 2C6D                        00            .byte	0
12582 2C6E                        00            .byte	0
12583                                           ! 1489  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12584 2C6F                        00            .byte	0
12585 2C70                        00            .byte	0
12586 2C71                        00            .byte	0
12587 2C72                        00            .byte	0
12588 2C73                        00            .byte	0
12589 2C74                        DC            .byte	$DC
12590 2C75                        66            .byte	$66
12591 2C76                        66            .byte	$66
12592 2C77                        66            .byte	$66
12593 2C78                        66            .byte	$66
12594 2C79                        66            .byte	$66
12595 2C7A                        7C            .byte	$7C
12596 2C7B                        60            .byte	$60
12597 2C7C                        60            .byte	$60
12598 2C7D                        F0            .byte	$F0
12599 2C7E                        00            .byte	0
12600                                           ! 1490  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12601 2C7F                        00            .byte	0
12602 2C80                        00            .byte	0
12603 2C81                        00            .byte	0
12604 2C82                        00            .byte	0
12605 2C83                        00            .byte	0
12606 2C84                        76            .byte	$76
12607 2C85                        CC            .byte	$CC
12608 2C86                        CC            .byte	$CC
12609 2C87                        CC            .byte	$CC
12610 2C88                        CC            .byte	$CC
12611 2C89                        CC            .byte	$CC
12612 2C8A                        7C            .byte	$7C
12613 2C8B                        0C            .byte	$C
12614 2C8C                        0C            .byte	$C
12615 2C8D                        1E            .byte	$1E
12616 2C8E                        00            .byte	0
12617                                           ! 1491  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12618 2C8F                        00            .byte	0
12619 2C90                        00            .byte	0
12620 2C91                        00            .byte	0
12621 2C92                        00            .byte	0
12622 2C93                        00            .byte	0
12623 2C94                        DC            .byte	$DC
12624 2C95                        76            .byte	$76
12625 2C96                        66            .byte	$66
12626 2C97                        60            .byte	$60
12627 2C98                        60            .byte	$60
12628 2C99                        60            .byte	$60
12629 2C9A                        F0            .byte	$F0
12630 2C9B                        00            .byte	0
12631 2C9C                        00            .byte	0
12632 2C9D                        00            .byte	0
12633 2C9E                        00            .byte	0
12634                                           ! 1492  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12635 2C9F                        00            .byte	0
12636 2CA0                        00            .byte	0
12637 2CA1                        00            .byte	0
12638 2CA2                        00            .byte	0
12639 2CA3                        00            .byte	0
12640 2CA4                        7C            .byte	$7C
12641 2CA5                        C6            .byte	$C6
12642 2CA6                        60            .byte	$60
12643 2CA7                        38            .byte	$38
12644 2CA8                        0C            .byte	$C
12645 2CA9                        C6            .byte	$C6
12646 2CAA                        7C            .byte	$7C
12647 2CAB                        00            .byte	0
12648 2CAC                        00            .byte	0
12649 2CAD                        00            .byte	0
12650 2CAE                        00            .byte	0
12651                                           ! 1493  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12652 2CAF                        00            .byte	0
12653 2CB0                        00            .byte	0
12654 2CB1                        10            .byte	$10
12655 2CB2                        30            .byte	$30
12656 2CB3                        30            .byte	$30
12657 2CB4                        FC            .byte	$FC
12658 2CB5                        30            .byte	$30
12659 2CB6                        30            .byte	$30
12660 2CB7                        30            .byte	$30
12661 2CB8                        30            .byte	$30
12662 2CB9                        36            .byte	$36
12663 2CBA                        1C            .byte	$1C
12664 2CBB                        00            .byte	0
12665 2CBC                        00            .byte	0
12666 2CBD                        00            .byte	0
12667 2CBE                        00            .byte	0
12668                                           ! 1494  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xc
12669 2CBF                        00            .byte	0
12670 2CC0                        00            .byte	0
12671 2CC1                        00            .byte	0
12672 2CC2                        00            .byte	0
12673 2CC3                        00            .byte	0
12674 2CC4                        CC            .byte	$CC
12675                                           ! 1494 c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12676 2CC5                        CC            .byte	$CC
12677 2CC6                        CC            .byte	$CC
12678 2CC7                        CC            .byte	$CC
12679 2CC8                        CC            .byte	$CC
12680 2CC9                        CC            .byte	$CC
12681 2CCA                        76            .byte	$76
12682 2CCB                        00            .byte	0
12683 2CCC                        00            .byte	0
12684 2CCD                        00            .byte	0
12685 2CCE                        00            .byte	0
12686                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12687 2CCF                        00            .byte	0
12688 2CD0                        00            .byte	0
12689 2CD1                        00            .byte	0
12690 2CD2                        00            .byte	0
12691 2CD3                        00            .byte	0
12692 2CD4                        C3            .byte	$C3
12693 2CD5                        C3            .byte	$C3
12694 2CD6                        C3            .byte	$C3
12695 2CD7                        C3            .byte	$C3
12696 2CD8                        66            .byte	$66
12697 2CD9                        3C            .byte	$3C
12698 2CDA                        18            .byte	$18
12699 2CDB                        00            .byte	0
12700 2CDC                        00            .byte	0
12701 2CDD                        00            .byte	0
12702 2CDE                        00            .byte	0
12703                                           ! 1496  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12704 2CDF                        00            .byte	0
12705 2CE0                        00            .byte	0
12706 2CE1                        00            .byte	0
12707 2CE2                        00            .byte	0
12708 2CE3                        00            .byte	0
12709 2CE4                        C3            .byte	$C3
12710 2CE5                        C3            .byte	$C3
12711 2CE6                        C3            .byte	$C3
12712 2CE7                        DB            .byte	$DB
12713 2CE8                        DB            .byte	$DB
12714 2CE9                        FF            .byte	$FF
12715 2CEA                        66            .byte	$66
12716 2CEB                        00            .byte	0
12717 2CEC                        00            .byte	0
12718 2CED                        00            .byte	0
12719 2CEE                        00            .byte	0
12720                                           ! 1497  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12721 2CEF                        00            .byte	0
12722 2CF0                        00            .byte	0
12723 2CF1                        00            .byte	0
12724 2CF2                        00            .byte	0
12725 2CF3                        00            .byte	0
12726 2CF4                        C3            .byte	$C3
12727 2CF5                        66            .byte	$66
12728 2CF6                        3C            .byte	$3C
12729 2CF7                        18            .byte	$18
12730 2CF8                        3C            .byte	$3C
12731 2CF9                        66            .byte	$66
12732 2CFA                        C3            .byte	$C3
12733 2CFB                        00            .byte	0
12734 2CFC                        00            .byte	0
12735 2CFD                        00            .byte	0
12736 2CFE                        00            .byte	0
12737                                           ! 1498  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12738 2CFF                        00            .byte	0
12739 2D00                        00            .byte	0
12740 2D01                        00            .byte	0
12741 2D02                        00            .byte	0
12742 2D03                        00            .byte	0
12743 2D04                        C6            .byte	$C6
12744 2D05                        C6            .byte	$C6
12745 2D06                        C6            .byte	$C6
12746 2D07                        C6            .byte	$C6
12747 2D08                        C6            .byte	$C6
12748 2D09                        C6            .byte	$C6
12749 2D0A                        7E            .byte	$7E
12750 2D0B                        06            .byte	6
12751 2D0C                        0C            .byte	$C
12752 2D0D                        F8            .byte	$F8
12753 2D0E                        00            .byte	0
12754                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12755 2D0F                        00            .byte	0
12756 2D10                        00            .byte	0
12757 2D11                        00            .byte	0
12758 2D12                        00            .byte	0
12759 2D13                        00            .byte	0
12760 2D14                        FE            .byte	$FE
12761 2D15                        CC            .byte	$CC
12762 2D16                        18            .byte	$18
12763 2D17                        30            .byte	$30
12764 2D18                        60            .byte	$60
12765 2D19                        C6            .byte	$C6
12766 2D1A                        FE            .byte	$FE
12767 2D1B                        00            .byte	0
12768 2D1C                        00            .byte	0
12769 2D1D                        00            .byte	0
12770 2D1E                        00            .byte	0
12771                                           ! 1500  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12772 2D1F                        00            .byte	0
12773 2D20                        00            .byte	0
12774 2D21                        0E            .byte	$E
12775 2D22                        18            .byte	$18
12776 2D23                        18            .byte	$18
12777 2D24                        18            .byte	$18
12778 2D25                        70            .byte	$70
12779 2D26                        18            .byte	$18
12780 2D27                        18            .byte	$18
12781 2D28                        18            .byte	$18
12782 2D29                        18            .byte	$18
12783 2D2A                        0E            .byte	$E
12784 2D2B                        00            .byte	0
12785 2D2C                        00            .byte	0
12786 2D2D                        00            .byte	0
12787 2D2E                        00            .byte	0
12788                                           ! 1501  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12789 2D2F                        00            .byte	0
12790 2D30                        00            .byte	0
12791 2D31                        18            .byte	$18
12792 2D32                        18            .byte	$18
12793 2D33                        18            .byte	$18
12794 2D34                        18            .byte	$18
12795 2D35                        00            .byte	0
12796 2D36                        18            .byte	$18
12797 2D37                        18            .byte	$18
12798 2D38                        18            .byte	$18
12799 2D39                        18            .byte	$18
12800 2D3A                        18            .byte	$18
12801 2D3B                        00            .byte	0
12802 2D3C                        00            .byte	0
12803 2D3D                        00            .byte	0
12804 2D3E                        00            .byte	0
12805                                           ! 1502  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12806 2D3F                        00            .byte	0
12807 2D40                        00            .byte	0
12808 2D41                        70            .byte	$70
12809 2D42                        18            .byte	$18
12810 2D43                        18            .byte	$18
12811 2D44                        18            .byte	$18
12812 2D45                        0E            .byte	$E
12813 2D46                        18            .byte	$18
12814 2D47                        18            .byte	$18
12815 2D48                        18            .byte	$18
12816 2D49                        18            .byte	$18
12817 2D4A                        70            .byte	$70
12818 2D4B                        00            .byte	0
12819 2D4C                        00            .byte	0
12820 2D4D                        00            .byte	0
12821 2D4E                        00            .byte	0
12822                                           ! 1503  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12823 2D4F                        00            .byte	0
12824 2D50                        00            .byte	0
12825 2D51                        76            .byte	$76
12826 2D52                        DC            .byte	$DC
12827 2D53                        00            .byte	0
12828 2D54                        00            .byte	0
12829 2D55                        00            .byte	0
12830 2D56                        00            .byte	0
12831 2D57                        00            .byte	0
12832 2D58                        00            .byte	0
12833 2D59                        00            .byte	0
12834 2D5A                        00            .byte	0
12835 2D5B                        00            .byte	0
12836 2D5C                        00            .byte	0
12837 2D5D                        00            .byte	0
12838 2D5E                        00            .byte	0
12839                                           ! 1504  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12840 2D5F                        00            .byte	0
12841 2D60                        00            .byte	0
12842 2D61                        00            .byte	0
12843 2D62                        00            .byte	0
12844 2D63                        10            .byte	$10
12845 2D64                        38            .byte	$38
12846 2D65                        6C            .byte	$6C
12847 2D66                        C6            .byte	$C6
12848 2D67                        C6            .byte	$C6
12849 2D68                        C6            .byte	$C6
12850 2D69                        FE            .byte	$FE
12851 2D6A                        00            .byte	0
12852 2D6B                        00            .byte	0
12853 2D6C                        00            .byte	0
12854 2D6D                        00            .byte	0
12855 2D6E                        00            .byte	0
12856                                           ! 1505  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12857 2D6F                        00            .byte	0
12858 2D70                        00            .byte	0
12859 2D71                        3C            .byte	$3C
12860 2D72                        66            .byte	$66
12861 2D73                        C2            .byte	$C2
12862 2D74                        C0            .byte	$C0
12863 2D75                        C0            .byte	$C0
12864 2D76                        C0            .byte	$C0
12865 2D77                        C2            .byte	$C2
12866 2D78                        66            .byte	$66
12867 2D79                        3C            .byte	$3C
12868 2D7A                        0C            .byte	$C
12869 2D7B                        06            .byte	6
12870 2D7C                        7C            .byte	$7C
12871 2D7D                        00            .byte	0
12872 2D7E                        00            .byte	0
12873                                           ! 1506  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12874 2D7F                        00            .byte	0
12875 2D80                        00            .byte	0
12876 2D81                        CC            .byte	$CC
12877 2D82                        00            .byte	0
12878 2D83                        00            .byte	0
12879 2D84                        CC            .byte	$CC
12880 2D85                        CC            .byte	$CC
12881 2D86                        CC            .byte	$CC
12882 2D87                        CC            .byte	$CC
12883 2D88                        CC            .byte	$CC
12884 2D89                        CC            .byte	$CC
12885 2D8A                        76            .byte	$76
12886 2D8B                        00            .byte	0
12887 2D8C                        00            .byte	0
12888 2D8D                        00            .byte	0
12889 2D8E                        00            .byte	0
12890                                           ! 1507  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12891 2D8F                        00            .byte	0
12892 2D90                        0C            .byte	$C
12893 2D91                        18            .byte	$18
12894 2D92                        30            .byte	$30
12895 2D93                        00            .byte	0
12896 2D94                        7C            .byte	$7C
12897 2D95                        C6            .byte	$C6
12898 2D96                        FE            .byte	$FE
12899 2D97                        C0            .byte	$C0
12900 2D98                        C0            .byte	$C0
12901 2D99                        C6            .byte	$C6
12902 2D9A                        7C            .byte	$7C
12903 2D9B                        00            .byte	0
12904 2D9C                        00            .byte	0
12905 2D9D                        00            .byte	0
12906 2D9E                        00            .byte	0
12907                                           ! 1508  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12908 2D9F                        00            .byte	0
12909 2DA0                        10            .byte	$10
12910 2DA1                        38            .byte	$38
12911 2DA2                        6C            .byte	$6C
12912 2DA3                        00            .byte	0
12913 2DA4                        78            .byte	$78
12914 2DA5                        0C            .byte	$C
12915 2DA6                        7C            .byte	$7C
12916 2DA7                        CC            .byte	$CC
12917 2DA8                        CC            .byte	$CC
12918 2DA9                        CC            .byte	$CC
12919 2DAA                        76            .byte	$76
12920 2DAB                        00            .byte	0
12921 2DAC                        00            .byte	0
12922 2DAD                        00            .byte	0
12923 2DAE                        00            .byte	0
12924                                           ! 1509  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12925 2DAF                        00            .byte	0
12926 2DB0                        00            .byte	0
12927 2DB1                        CC            .byte	$CC
12928 2DB2                        00            .byte	0
12929 2DB3                        00            .byte	0
12930 2DB4                        78            .byte	$78
12931 2DB5                        0C            .byte	$C
12932 2DB6                        7C            .byte	$7C
12933 2DB7                        CC            .byte	$CC
12934 2DB8                        CC            .byte	$CC
12935 2DB9                        CC            .byte	$CC
12936 2DBA                        76            .byte	$76
12937 2DBB                        00            .byte	0
12938 2DBC                        00            .byte	0
12939 2DBD                        00            .byte	0
12940 2DBE                        00            .byte	0
12941                                           ! 1510  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12942 2DBF                        00            .byte	0
12943 2DC0                        60            .byte	$60
12944 2DC1                        30            .byte	$30
12945 2DC2                        18            .byte	$18
12946 2DC3                        00            .byte	0
12947 2DC4                        78            .byte	$78
12948 2DC5                        0C            .byte	$C
12949 2DC6                        7C            .byte	$7C
12950 2DC7                        CC            .byte	$CC
12951 2DC8                        CC            .byte	$CC
12952 2DC9                        CC            .byte	$CC
12953 2DCA                        76            .byte	$76
12954 2DCB                        00            .byte	0
12955 2DCC                        00            .byte	0
12956 2DCD                        00            .byte	0
12957 2DCE                        00            .byte	0
12958                                           ! 1511  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12959 2DCF                        00            .byte	0
12960 2DD0                        38            .byte	$38
12961 2DD1                        6C            .byte	$6C
12962 2DD2                        38            .byte	$38
12963 2DD3                        00            .byte	0
12964 2DD4                        78            .byte	$78
12965 2DD5                        0C            .byte	$C
12966 2DD6                        7C            .byte	$7C
12967 2DD7                        CC            .byte	$CC
12968 2DD8                        CC            .byte	$CC
12969 2DD9                        CC            .byte	$CC
12970 2DDA                        76            .byte	$76
12971 2DDB                        00            .byte	0
12972 2DDC                        00            .byte	0
12973 2DDD                        00            .byte	0
12974 2DDE                        00            .byte	0
12975                                           ! 1512  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12976 2DDF                        00            .byte	0
12977 2DE0                        00            .byte	0
12978 2DE1                        00            .byte	0
12979 2DE2                        00            .byte	0
12980 2DE3                        3C            .byte	$3C
12981 2DE4                        66            .byte	$66
12982 2DE5                        60            .byte	$60
12983 2DE6                        60            .byte	$60
12984 2DE7                        66            .byte	$66
12985 2DE8                        3C            .byte	$3C
12986 2DE9                        0C            .byte	$C
12987 2DEA                        06            .byte	6
12988 2DEB                        3C            .byte	$3C
12989 2DEC                        00            .byte	0
12990 2DED                        00            .byte	0
12991 2DEE                        00            .byte	0
12992                                           ! 1513  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12993 2DEF                        00            .byte	0
12994 2DF0                        10            .byte	$10
12995 2DF1                        38            .byte	$38
12996 2DF2                        6C            .byte	$6C
12997 2DF3                        00            .byte	0
12998 2DF4                        7C            .byte	$7C
12999 2DF5                        C6            .byte	$C6
13000 2DF6                        FE            .byte	$FE
13001 2DF7                        C0            .byte	$C0
13002 2DF8                        C0            .byte	$C0
13003 2DF9                        C6            .byte	$C6
13004 2DFA                        7C            .byte	$7C
13005 2DFB                        00            .byte	0
13006 2DFC                        00            .byte	0
13007 2DFD                        00            .byte	0
13008 2DFE                        00            .byte	0
13009                                           ! 1514  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13010 2DFF                        00            .byte	0
13011 2E00                        00            .byte	0
13012 2E01                        C6            .byte	$C6
13013 2E02                        00            .byte	0
13014 2E03                        00            .byte	0
13015 2E04                        7C            .byte	$7C
13016 2E05                        C6            .byte	$C6
13017 2E06                        FE            .byte	$FE
13018 2E07                        C0            .byte	$C0
13019 2E08                        C0            .byte	$C0
13020 2E09                        C6            .byte	$C6
13021 2E0A                        7C            .byte	$7C
13022 2E0B                        00            .byte	0
13023 2E0C                        00            .byte	0
13024 2E0D                        00            .byte	0
13025 2E0E                        00            .byte	0
13026                                           ! 1515  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0x
13027 2E0F                        00            .byte	0
13028 2E10                        60            .byte	$60
13029 2E11                        30            .byte	$30
13030 2E12                        18            .byte	$18
13031 2E13                        00            .byte	0
13032 2E14                        7C            .byte	$7C
13033 2E15                        C6            .byte	$C6
13034 2E16                        FE            .byte	$FE
13035                                           ! 1515 c0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13036 2E17                        C0            .byte	$C0
13037 2E18                        C0            .byte	$C0
13038 2E19                        C6            .byte	$C6
13039 2E1A                        7C            .byte	$7C
13040 2E1B                        00            .byte	0
13041 2E1C                        00            .byte	0
13042 2E1D                        00            .byte	0
13043 2E1E                        00            .byte	0
13044                                           ! 1516  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13045 2E1F                        00            .byte	0
13046 2E20                        00            .byte	0
13047 2E21                        66            .byte	$66
13048 2E22                        00            .byte	0
13049 2E23                        00            .byte	0
13050 2E24                        38            .byte	$38
13051 2E25                        18            .byte	$18
13052 2E26                        18            .byte	$18
13053 2E27                        18            .byte	$18
13054 2E28                        18            .byte	$18
13055 2E29                        18            .byte	$18
13056 2E2A                        3C            .byte	$3C
13057 2E2B                        00            .byte	0
13058 2E2C                        00            .byte	0
13059 2E2D                        00            .byte	0
13060 2E2E                        00            .byte	0
13061                                           ! 1517  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13062 2E2F                        00            .byte	0
13063 2E30                        18            .byte	$18
13064 2E31                        3C            .byte	$3C
13065 2E32                        66            .byte	$66
13066 2E33                        00            .byte	0
13067 2E34                        38            .byte	$38
13068 2E35                        18            .byte	$18
13069 2E36                        18            .byte	$18
13070 2E37                        18            .byte	$18
13071 2E38                        18            .byte	$18
13072 2E39                        18            .byte	$18
13073 2E3A                        3C            .byte	$3C
13074 2E3B                        00            .byte	0
13075 2E3C                        00            .byte	0
13076 2E3D                        00            .byte	0
13077 2E3E                        00            .byte	0
13078                                           ! 1518  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13079 2E3F                        00            .byte	0
13080 2E40                        60            .byte	$60
13081 2E41                        30            .byte	$30
13082 2E42                        18            .byte	$18
13083 2E43                        00            .byte	0
13084 2E44                        38            .byte	$38
13085 2E45                        18            .byte	$18
13086 2E46                        18            .byte	$18
13087 2E47                        18            .byte	$18
13088 2E48                        18            .byte	$18
13089 2E49                        18            .byte	$18
13090 2E4A                        3C            .byte	$3C
13091 2E4B                        00            .byte	0
13092 2E4C                        00            .byte	0
13093 2E4D                        00            .byte	0
13094 2E4E                        00            .byte	0
13095                                           ! 1519  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13096 2E4F                        00            .byte	0
13097 2E50                        C6            .byte	$C6
13098 2E51                        00            .byte	0
13099 2E52                        10            .byte	$10
13100 2E53                        38            .byte	$38
13101 2E54                        6C            .byte	$6C
13102 2E55                        C6            .byte	$C6
13103 2E56                        C6            .byte	$C6
13104 2E57                        FE            .byte	$FE
13105 2E58                        C6            .byte	$C6
13106 2E59                        C6            .byte	$C6
13107 2E5A                        C6            .byte	$C6
13108 2E5B                        00            .byte	0
13109 2E5C                        00            .byte	0
13110 2E5D                        00            .byte	0
13111 2E5E                        00            .byte	0
13112                                           ! 1520  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13113 2E5F                        38            .byte	$38
13114 2E60                        6C            .byte	$6C
13115 2E61                        38            .byte	$38
13116 2E62                        00            .byte	0
13117 2E63                        38            .byte	$38
13118 2E64                        6C            .byte	$6C
13119 2E65                        C6            .byte	$C6
13120 2E66                        C6            .byte	$C6
13121 2E67                        FE            .byte	$FE
13122 2E68                        C6            .byte	$C6
13123 2E69                        C6            .byte	$C6
13124 2E6A                        C6            .byte	$C6
13125 2E6B                        00            .byte	0
13126 2E6C                        00            .byte	0
13127 2E6D                        00            .byte	0
13128 2E6E                        00            .byte	0
13129                                           ! 1521  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
13130 2E6F                        18            .byte	$18
13131 2E70                        30            .byte	$30
13132 2E71                        60            .byte	$60
13133 2E72                        00            .byte	0
13134 2E73                        FE            .byte	$FE
13135 2E74                        66            .byte	$66
13136 2E75                        60            .byte	$60
13137 2E76                        7C            .byte	$7C
13138 2E77                        60            .byte	$60
13139 2E78                        60            .byte	$60
13140 2E79                        66            .byte	$66
13141 2E7A                        FE            .byte	$FE
13142 2E7B                        00            .byte	0
13143 2E7C                        00            .byte	0
13144 2E7D                        00            .byte	0
13145 2E7E                        00            .byte	0
13146                                           ! 1522  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
13147 2E7F                        00            .byte	0
13148 2E80                        00            .byte	0
13149 2E81                        00            .byte	0
13150 2E82                        00            .byte	0
13151 2E83                        00            .byte	0
13152 2E84                        6E            .byte	$6E
13153 2E85                        3B            .byte	$3B
13154 2E86                        1B            .byte	$1B
13155 2E87                        7E            .byte	$7E
13156 2E88                        D8            .byte	$D8
13157 2E89                        DC            .byte	$DC
13158 2E8A                        77            .byte	$77
13159 2E8B                        00            .byte	0
13160 2E8C                        00            .byte	0
13161 2E8D                        00            .byte	0
13162 2E8E                        00            .byte	0
13163                                           ! 1523  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
13164 2E8F                        00            .byte	0
13165 2E90                        00            .byte	0
13166 2E91                        3E            .byte	$3E
13167 2E92                        6C            .byte	$6C
13168 2E93                        CC            .byte	$CC
13169 2E94                        CC            .byte	$CC
13170 2E95                        FE            .byte	$FE
13171 2E96                        CC            .byte	$CC
13172 2E97                        CC            .byte	$CC
13173 2E98                        CC            .byte	$CC
13174 2E99                        CC            .byte	$CC
13175 2E9A                        CE            .byte	$CE
13176 2E9B                        00            .byte	0
13177 2E9C                        00            .byte	0
13178 2E9D                        00            .byte	0
13179 2E9E                        00            .byte	0
13180                                           ! 1524  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13181 2E9F                        00            .byte	0
13182 2EA0                        10            .byte	$10
13183 2EA1                        38            .byte	$38
13184 2EA2                        6C            .byte	$6C
13185 2EA3                        00            .byte	0
13186 2EA4                        7C            .byte	$7C
13187 2EA5                        C6            .byte	$C6
13188 2EA6                        C6            .byte	$C6
13189 2EA7                        C6            .byte	$C6
13190 2EA8                        C6            .byte	$C6
13191 2EA9                        C6            .byte	$C6
13192 2EAA                        7C            .byte	$7C
13193 2EAB                        00            .byte	0
13194 2EAC                        00            .byte	0
13195 2EAD                        00            .byte	0
13196 2EAE                        00            .byte	0
13197                                           ! 1525  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13198 2EAF                        00            .byte	0
13199 2EB0                        00            .byte	0
13200 2EB1                        C6            .byte	$C6
13201 2EB2                        00            .byte	0
13202 2EB3                        00            .byte	0
13203 2EB4                        7C            .byte	$7C
13204 2EB5                        C6            .byte	$C6
13205 2EB6                        C6            .byte	$C6
13206 2EB7                        C6            .byte	$C6
13207 2EB8                        C6            .byte	$C6
13208 2EB9                        C6            .byte	$C6
13209 2EBA                        7C            .byte	$7C
13210 2EBB                        00            .byte	0
13211 2EBC                        00            .byte	0
13212 2EBD                        00            .byte	0
13213 2EBE                        00            .byte	0
13214                                           ! 1526  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13215 2EBF                        00            .byte	0
13216 2EC0                        60            .byte	$60
13217 2EC1                        30            .byte	$30
13218 2EC2                        18            .byte	$18
13219 2EC3                        00            .byte	0
13220 2EC4                        7C            .byte	$7C
13221 2EC5                        C6            .byte	$C6
13222 2EC6                        C6            .byte	$C6
13223 2EC7                        C6            .byte	$C6
13224 2EC8                        C6            .byte	$C6
13225 2EC9                        C6            .byte	$C6
13226 2ECA                        7C            .byte	$7C
13227 2ECB                        00            .byte	0
13228 2ECC                        00            .byte	0
13229 2ECD                        00            .byte	0
13230 2ECE                        00            .byte	0
13231                                           ! 1527  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13232 2ECF                        00            .byte	0
13233 2ED0                        30            .byte	$30
13234 2ED1                        78            .byte	$78
13235 2ED2                        CC            .byte	$CC
13236 2ED3                        00            .byte	0
13237 2ED4                        CC            .byte	$CC
13238 2ED5                        CC            .byte	$CC
13239 2ED6                        CC            .byte	$CC
13240 2ED7                        CC            .byte	$CC
13241 2ED8                        CC            .byte	$CC
13242 2ED9                        CC            .byte	$CC
13243 2EDA                        76            .byte	$76
13244 2EDB                        00            .byte	0
13245 2EDC                        00            .byte	0
13246 2EDD                        00            .byte	0
13247 2EDE                        00            .byte	0
13248                                           ! 1528  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13249 2EDF                        00            .byte	0
13250 2EE0                        60            .byte	$60
13251 2EE1                        30            .byte	$30
13252 2EE2                        18            .byte	$18
13253 2EE3                        00            .byte	0
13254 2EE4                        CC            .byte	$CC
13255 2EE5                        CC            .byte	$CC
13256 2EE6                        CC            .byte	$CC
13257 2EE7                        CC            .byte	$CC
13258 2EE8                        CC            .byte	$CC
13259 2EE9                        CC            .byte	$CC
13260 2EEA                        76            .byte	$76
13261 2EEB                        00            .byte	0
13262 2EEC                        00            .byte	0
13263 2EED                        00            .byte	0
13264 2EEE                        00            .byte	0
13265                                           ! 1529  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13266 2EEF                        00            .byte	0
13267 2EF0                        00            .byte	0
13268 2EF1                        C6            .byte	$C6
13269 2EF2                        00            .byte	0
13270 2EF3                        00            .byte	0
13271 2EF4                        C6            .byte	$C6
13272 2EF5                        C6            .byte	$C6
13273 2EF6                        C6            .byte	$C6
13274 2EF7                        C6            .byte	$C6
13275 2EF8                        C6            .byte	$C6
13276 2EF9                        C6            .byte	$C6
13277 2EFA                        7E            .byte	$7E
13278 2EFB                        06            .byte	6
13279 2EFC                        0C            .byte	$C
13280 2EFD                        78            .byte	$78
13281 2EFE                        00            .byte	0
13282                                           ! 1530  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13283 2EFF                        00            .byte	0
13284 2F00                        C6            .byte	$C6
13285 2F01                        00            .byte	0
13286 2F02                        7C            .byte	$7C
13287 2F03                        C6            .byte	$C6
13288 2F04                        C6            .byte	$C6
13289 2F05                        C6            .byte	$C6
13290 2F06                        C6            .byte	$C6
13291 2F07                        C6            .byte	$C6
13292 2F08                        C6            .byte	$C6
13293 2F09                        C6            .byte	$C6
13294 2F0A                        7C            .byte	$7C
13295 2F0B                        00            .byte	0
13296 2F0C                        00            .byte	0
13297 2F0D                        00            .byte	0
13298 2F0E                        00            .byte	0
13299                                           ! 1531  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13300 2F0F                        00            .byte	0
13301 2F10                        C6            .byte	$C6
13302 2F11                        00            .byte	0
13303 2F12                        C6            .byte	$C6
13304 2F13                        C6            .byte	$C6
13305 2F14                        C6            .byte	$C6
13306 2F15                        C6            .byte	$C6
13307 2F16                        C6            .byte	$C6
13308 2F17                        C6            .byte	$C6
13309 2F18                        C6            .byte	$C6
13310 2F19                        C6            .byte	$C6
13311 2F1A                        7C            .byte	$7C
13312 2F1B                        00            .byte	0
13313 2F1C                        00            .byte	0
13314 2F1D                        00            .byte	0
13315 2F1E                        00            .byte	0
13316                                           ! 1532  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13317 2F1F                        00            .byte	0
13318 2F20                        18            .byte	$18
13319 2F21                        18            .byte	$18
13320 2F22                        7E            .byte	$7E
13321 2F23                        C3            .byte	$C3
13322 2F24                        C0            .byte	$C0
13323 2F25                        C0            .byte	$C0
13324 2F26                        C0            .byte	$C0
13325 2F27                        C3            .byte	$C3
13326 2F28                        7E            .byte	$7E
13327 2F29                        18            .byte	$18
13328 2F2A                        18            .byte	$18
13329 2F2B                        00            .byte	0
13330 2F2C                        00            .byte	0
13331 2F2D                        00            .byte	0
13332 2F2E                        00            .byte	0
13333                                           ! 1533  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13334 2F2F                        00            .byte	0
13335 2F30                        38            .byte	$38
13336 2F31                        6C            .byte	$6C
13337 2F32                        64            .byte	$64
13338 2F33                        60            .byte	$60
13339 2F34                        F0            .byte	$F0
13340 2F35                        60            .byte	$60
13341 2F36                        60            .byte	$60
13342 2F37                        60            .byte	$60
13343 2F38                        60            .byte	$60
13344 2F39                        E6            .byte	$E6
13345 2F3A                        FC            .byte	$FC
13346 2F3B                        00            .byte	0
13347 2F3C                        00            .byte	0
13348 2F3D                        00            .byte	0
13349 2F3E                        00            .byte	0
13350                                           ! 1534  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13351 2F3F                        00            .byte	0
13352 2F40                        00            .byte	0
13353 2F41                        C3            .byte	$C3
13354 2F42                        66            .byte	$66
13355 2F43                        3C            .byte	$3C
13356 2F44                        18            .byte	$18
13357 2F45                        FF            .byte	$FF
13358 2F46                        18            .byte	$18
13359 2F47                        FF            .byte	$FF
13360 2F48                        18            .byte	$18
13361 2F49                        18            .byte	$18
13362 2F4A                        18            .byte	$18
13363 2F4B                        00            .byte	0
13364 2F4C                        00            .byte	0
13365 2F4D                        00            .byte	0
13366 2F4E                        00            .byte	0
13367                                           ! 1535  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13368 2F4F                        00            .byte	0
13369 2F50                        FC            .byte	$FC
13370 2F51                        66            .byte	$66
13371 2F52                        66            .byte	$66
13372 2F53                        7C            .byte	$7C
13373 2F54                        62            .byte	$62
13374 2F55                        66            .byte	$66
13375 2F56                        6F            .byte	$6F
13376 2F57                        66            .byte	$66
13377 2F58                        66            .byte	$66
13378 2F59                        66            .byte	$66
13379 2F5A                        F3            .byte	$F3
13380 2F5B                        00            .byte	0
13381 2F5C                        00            .byte	0
13382 2F5D                        00            .byte	0
13383 2F5E                        00            .byte	0
13384                                           ! 1536  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0
13385 2F5F                        00            .byte	0
13386 2F60                        0E            .byte	$E
13387 2F61                        1B            .byte	$1B
13388 2F62                        18            .byte	$18
13389 2F63                        18            .byte	$18
13390 2F64                        18            .byte	$18
13391 2F65                        7E            .byte	$7E
13392 2F66                        18            .byte	$18
13393 2F67                        18            .byte	$18
13394 2F68                        18            .byte	$18
13395                                           ! 1536 x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13396 2F69                        18            .byte	$18
13397 2F6A                        18            .byte	$18
13398 2F6B                        D8            .byte	$D8
13399 2F6C                        70            .byte	$70
13400 2F6D                        00            .byte	0
13401 2F6E                        00            .byte	0
13402                                           ! 1537  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13403 2F6F                        00            .byte	0
13404 2F70                        18            .byte	$18
13405 2F71                        30            .byte	$30
13406 2F72                        60            .byte	$60
13407 2F73                        00            .byte	0
13408 2F74                        78            .byte	$78
13409 2F75                        0C            .byte	$C
13410 2F76                        7C            .byte	$7C
13411 2F77                        CC            .byte	$CC
13412 2F78                        CC            .byte	$CC
13413 2F79                        CC            .byte	$CC
13414 2F7A                        76            .byte	$76
13415 2F7B                        00            .byte	0
13416 2F7C                        00            .byte	0
13417 2F7D                        00            .byte	0
13418 2F7E                        00            .byte	0
13419                                           ! 1538  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13420 2F7F                        00            .byte	0
13421 2F80                        0C            .byte	$C
13422 2F81                        18            .byte	$18
13423 2F82                        30            .byte	$30
13424 2F83                        00            .byte	0
13425 2F84                        38            .byte	$38
13426 2F85                        18            .byte	$18
13427 2F86                        18            .byte	$18
13428 2F87                        18            .byte	$18
13429 2F88                        18            .byte	$18
13430 2F89                        18            .byte	$18
13431 2F8A                        3C            .byte	$3C
13432 2F8B                        00            .byte	0
13433 2F8C                        00            .byte	0
13434 2F8D                        00            .byte	0
13435 2F8E                        00            .byte	0
13436                                           ! 1539  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13437 2F8F                        00            .byte	0
13438 2F90                        18            .byte	$18
13439 2F91                        30            .byte	$30
13440 2F92                        60            .byte	$60
13441 2F93                        00            .byte	0
13442 2F94                        7C            .byte	$7C
13443 2F95                        C6            .byte	$C6
13444 2F96                        C6            .byte	$C6
13445 2F97                        C6            .byte	$C6
13446 2F98                        C6            .byte	$C6
13447 2F99                        C6            .byte	$C6
13448 2F9A                        7C            .byte	$7C
13449 2F9B                        00            .byte	0
13450 2F9C                        00            .byte	0
13451 2F9D                        00            .byte	0
13452 2F9E                        00            .byte	0
13453                                           ! 1540  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13454 2F9F                        00            .byte	0
13455 2FA0                        18            .byte	$18
13456 2FA1                        30            .byte	$30
13457 2FA2                        60            .byte	$60
13458 2FA3                        00            .byte	0
13459 2FA4                        CC            .byte	$CC
13460 2FA5                        CC            .byte	$CC
13461 2FA6                        CC            .byte	$CC
13462 2FA7                        CC            .byte	$CC
13463 2FA8                        CC            .byte	$CC
13464 2FA9                        CC            .byte	$CC
13465 2FAA                        76            .byte	$76
13466 2FAB                        00            .byte	0
13467 2FAC                        00            .byte	0
13468 2FAD                        00            .byte	0
13469 2FAE                        00            .byte	0
13470                                           ! 1541  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13471 2FAF                        00            .byte	0
13472 2FB0                        00            .byte	0
13473 2FB1                        76            .byte	$76
13474 2FB2                        DC            .byte	$DC
13475 2FB3                        00            .byte	0
13476 2FB4                        DC            .byte	$DC
13477 2FB5                        66            .byte	$66
13478 2FB6                        66            .byte	$66
13479 2FB7                        66            .byte	$66
13480 2FB8                        66            .byte	$66
13481 2FB9                        66            .byte	$66
13482 2FBA                        66            .byte	$66
13483 2FBB                        00            .byte	0
13484 2FBC                        00            .byte	0
13485 2FBD                        00            .byte	0
13486 2FBE                        00            .byte	0
13487                                           ! 1542  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13488 2FBF                        76            .byte	$76
13489 2FC0                        DC            .byte	$DC
13490 2FC1                        00            .byte	0
13491 2FC2                        C6            .byte	$C6
13492 2FC3                        E6            .byte	$E6
13493 2FC4                        F6            .byte	$F6
13494 2FC5                        FE            .byte	$FE
13495 2FC6                        DE            .byte	$DE
13496 2FC7                        CE            .byte	$CE
13497 2FC8                        C6            .byte	$C6
13498 2FC9                        C6            .byte	$C6
13499 2FCA                        C6            .byte	$C6
13500 2FCB                        00            .byte	0
13501 2FCC                        00            .byte	0
13502 2FCD                        00            .byte	0
13503 2FCE                        00            .byte	0
13504                                           ! 1543  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13505 2FCF                        00            .byte	0
13506 2FD0                        3C            .byte	$3C
13507 2FD1                        6C            .byte	$6C
13508 2FD2                        6C            .byte	$6C
13509 2FD3                        3E            .byte	$3E
13510 2FD4                        00            .byte	0
13511 2FD5                        7E            .byte	$7E
13512 2FD6                        00            .byte	0
13513 2FD7                        00            .byte	0
13514 2FD8                        00            .byte	0
13515 2FD9                        00            .byte	0
13516 2FDA                        00            .byte	0
13517 2FDB                        00            .byte	0
13518 2FDC                        00            .byte	0
13519 2FDD                        00            .byte	0
13520 2FDE                        00            .byte	0
13521                                           ! 1544  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13522 2FDF                        00            .byte	0
13523 2FE0                        38            .byte	$38
13524 2FE1                        6C            .byte	$6C
13525 2FE2                        6C            .byte	$6C
13526 2FE3                        38            .byte	$38
13527 2FE4                        00            .byte	0
13528 2FE5                        7C            .byte	$7C
13529 2FE6                        00            .byte	0
13530 2FE7                        00            .byte	0
13531 2FE8                        00            .byte	0
13532 2FE9                        00            .byte	0
13533 2FEA                        00            .byte	0
13534 2FEB                        00            .byte	0
13535 2FEC                        00            .byte	0
13536 2FED                        00            .byte	0
13537 2FEE                        00            .byte	0
13538                                           ! 1545  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13539 2FEF                        00            .byte	0
13540 2FF0                        00            .byte	0
13541 2FF1                        30            .byte	$30
13542 2FF2                        30            .byte	$30
13543 2FF3                        00            .byte	0
13544 2FF4                        30            .byte	$30
13545 2FF5                        30            .byte	$30
13546 2FF6                        60            .byte	$60
13547 2FF7                        C0            .byte	$C0
13548 2FF8                        C6            .byte	$C6
13549 2FF9                        C6            .byte	$C6
13550 2FFA                        7C            .byte	$7C
13551 2FFB                        00            .byte	0
13552 2FFC                        00            .byte	0
13553 2FFD                        00            .byte	0
13554 2FFE                        00            .byte	0
13555                                           ! 1546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13556 2FFF                        00            .byte	0
13557 3000                        00            .byte	0
13558 3001                        00            .byte	0
13559 3002                        00            .byte	0
13560 3003                        00            .byte	0
13561 3004                        00            .byte	0
13562 3005                        FE            .byte	$FE
13563 3006                        C0            .byte	$C0
13564 3007                        C0            .byte	$C0
13565 3008                        C0            .byte	$C0
13566 3009                        C0            .byte	$C0
13567 300A                        00            .byte	0
13568 300B                        00            .byte	0
13569 300C                        00            .byte	0
13570 300D                        00            .byte	0
13571 300E                        00            .byte	0
13572                                           ! 1547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13573 300F                        00            .byte	0
13574 3010                        00            .byte	0
13575 3011                        00            .byte	0
13576 3012                        00            .byte	0
13577 3013                        00            .byte	0
13578 3014                        00            .byte	0
13579 3015                        FE            .byte	$FE
13580 3016                        06            .byte	6
13581 3017                        06            .byte	6
13582 3018                        06            .byte	6
13583 3019                        06            .byte	6
13584 301A                        00            .byte	0
13585 301B                        00            .byte	0
13586 301C                        00            .byte	0
13587 301D                        00            .byte	0
13588 301E                        00            .byte	0
13589                                           ! 1548  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13590 301F                        00            .byte	0
13591 3020                        C0            .byte	$C0
13592 3021                        C0            .byte	$C0
13593 3022                        C2            .byte	$C2
13594 3023                        C6            .byte	$C6
13595 3024                        CC            .byte	$CC
13596 3025                        18            .byte	$18
13597 3026                        30            .byte	$30
13598 3027                        60            .byte	$60
13599 3028                        CE            .byte	$CE
13600 3029                        9B            .byte	$9B
13601 302A                        06            .byte	6
13602 302B                        0C            .byte	$C
13603 302C                        1F            .byte	$1F
13604 302D                        00            .byte	0
13605 302E                        00            .byte	0
13606                                           ! 1549  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13607 302F                        00            .byte	0
13608 3030                        C0            .byte	$C0
13609 3031                        C0            .byte	$C0
13610 3032                        C2            .byte	$C2
13611 3033                        C6            .byte	$C6
13612 3034                        CC            .byte	$CC
13613 3035                        18            .byte	$18
13614 3036                        30            .byte	$30
13615 3037                        66            .byte	$66
13616 3038                        CE            .byte	$CE
13617 3039                        96            .byte	$96
13618 303A                        3E            .byte	$3E
13619 303B                        06            .byte	6
13620 303C                        06            .byte	6
13621 303D                        00            .byte	0
13622 303E                        00            .byte	0
13623                                           ! 1550  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13624 303F                        00            .byte	0
13625 3040                        00            .byte	0
13626 3041                        18            .byte	$18
13627 3042                        18            .byte	$18
13628 3043                        00            .byte	0
13629 3044                        18            .byte	$18
13630 3045                        18            .byte	$18
13631 3046                        18            .byte	$18
13632 3047                        3C            .byte	$3C
13633 3048                        3C            .byte	$3C
13634 3049                        3C            .byte	$3C
13635 304A                        18            .byte	$18
13636 304B                        00            .byte	0
13637 304C                        00            .byte	0
13638 304D                        00            .byte	0
13639 304E                        00            .byte	0
13640                                           ! 1551  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13641 304F                        00            .byte	0
13642 3050                        00            .byte	0
13643 3051                        00            .byte	0
13644 3052                        00            .byte	0
13645 3053                        00            .byte	0
13646 3054                        36            .byte	$36
13647 3055                        6C            .byte	$6C
13648 3056                        D8            .byte	$D8
13649 3057                        6C            .byte	$6C
13650 3058                        36            .byte	$36
13651 3059                        00            .byte	0
13652 305A                        00            .byte	0
13653 305B                        00            .byte	0
13654 305C                        00            .byte	0
13655 305D                        00            .byte	0
13656 305E                        00            .byte	0
13657                                           ! 1552  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13658 305F                        00            .byte	0
13659 3060                        00            .byte	0
13660 3061                        00            .byte	0
13661 3062                        00            .byte	0
13662 3063                        00            .byte	0
13663 3064                        D8            .byte	$D8
13664 3065                        6C            .byte	$6C
13665 3066                        36            .byte	$36
13666 3067                        6C            .byte	$6C
13667 3068                        D8            .byte	$D8
13668 3069                        00            .byte	0
13669 306A                        00            .byte	0
13670 306B                        00            .byte	0
13671 306C                        00            .byte	0
13672 306D                        00            .byte	0
13673 306E                        00            .byte	0
13674                                           ! 1553  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
13675 306F                        11            .byte	$11
13676 3070                        44            .byte	$44
13677 3071                        11            .byte	$11
13678 3072                        44            .byte	$44
13679 3073                        11            .byte	$11
13680 3074                        44            .byte	$44
13681 3075                        11            .byte	$11
13682 3076                        44            .byte	$44
13683 3077                        11            .byte	$11
13684 3078                        44            .byte	$44
13685 3079                        11            .byte	$11
13686 307A                        44            .byte	$44
13687 307B                        11            .byte	$11
13688 307C                        44            .byte	$44
13689 307D                        11            .byte	$11
13690 307E                        44            .byte	$44
13691                                           ! 1554  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13692 307F                        55            .byte	$55
13693 3080                        AA            .byte	$AA
13694 3081                        55            .byte	$55
13695 3082                        AA            .byte	$AA
13696 3083                        55            .byte	$55
13697 3084                        AA            .byte	$AA
13698 3085                        55            .byte	$55
13699 3086                        AA            .byte	$AA
13700 3087                        55            .byte	$55
13701 3088                        AA            .byte	$AA
13702 3089                        55            .byte	$55
13703 308A                        AA            .byte	$AA
13704 308B                        55            .byte	$55
13705 308C                        AA            .byte	$AA
13706 308D                        55            .byte	$55
13707 308E                        AA            .byte	$AA
13708                                           ! 1555  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13709 308F                        DD            .byte	$DD
13710 3090                        77            .byte	$77
13711 3091                        DD            .byte	$DD
13712 3092                        77            .byte	$77
13713 3093                        DD            .byte	$DD
13714 3094                        77            .byte	$77
13715 3095                        DD            .byte	$DD
13716 3096                        77            .byte	$77
13717 3097                        DD            .byte	$DD
13718 3098                        77            .byte	$77
13719 3099                        DD            .byte	$DD
13720 309A                        77            .byte	$77
13721 309B                        DD            .byte	$DD
13722 309C                        77            .byte	$77
13723 309D                        DD            .byte	$DD
13724 309E                        77            .byte	$77
13725                                           ! 1556  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13726 309F                        18            .byte	$18
13727 30A0                        18            .byte	$18
13728 30A1                        18            .byte	$18
13729 30A2                        18            .byte	$18
13730 30A3                        18            .byte	$18
13731 30A4                        18            .byte	$18
13732 30A5                        18            .byte	$18
13733 30A6                        18            .byte	$18
13734 30A7                        18            .byte	$18
13735 30A8                        18            .byte	$18
13736 30A9                        18            .byte	$18
13737 30AA                        18            .byte	$18
13738 30AB                        18            .byte	$18
13739 30AC                        18            .byte	$18
13740 30AD                        18            .byte	$18
13741 30AE                        18            .byte	$18
13742                                           ! 1557  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 
13743 30AF                        18            .byte	$18
13744 30B0                        18            .byte	$18
13745 30B1                        18            .byte	$18
13746 30B2                        18            .byte	$18
13747 30B3                        18            .byte	$18
13748 30B4                        18            .byte	$18
13749 30B5                        18            .byte	$18
13750 30B6                        F8            .byte	$F8
13751 30B7                        18            .byte	$18
13752 30B8                        18            .byte	$18
13753 30B9                        18            .byte	$18
13754 30BA                        18            .byte	$18
13755                                           ! 1557 0x18, 0x18, 0x18, 0x18,
13756 30BB                        18            .byte	$18
13757 30BC                        18            .byte	$18
13758 30BD                        18            .byte	$18
13759 30BE                        18            .byte	$18
13760                                           ! 1558  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13761 30BF                        18            .byte	$18
13762 30C0                        18            .byte	$18
13763 30C1                        18            .byte	$18
13764 30C2                        18            .byte	$18
13765 30C3                        18            .byte	$18
13766 30C4                        F8            .byte	$F8
13767 30C5                        18            .byte	$18
13768 30C6                        F8            .byte	$F8
13769 30C7                        18            .byte	$18
13770 30C8                        18            .byte	$18
13771 30C9                        18            .byte	$18
13772 30CA                        18            .byte	$18
13773 30CB                        18            .byte	$18
13774 30CC                        18            .byte	$18
13775 30CD                        18            .byte	$18
13776 30CE                        18            .byte	$18
13777                                           ! 1559  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13778 30CF                        36            .byte	$36
13779 30D0                        36            .byte	$36
13780 30D1                        36            .byte	$36
13781 30D2                        36            .byte	$36
13782 30D3                        36            .byte	$36
13783 30D4                        36            .byte	$36
13784 30D5                        36            .byte	$36
13785 30D6                        F6            .byte	$F6
13786 30D7                        36            .byte	$36
13787 30D8                        36            .byte	$36
13788 30D9                        36            .byte	$36
13789 30DA                        36            .byte	$36
13790 30DB                        36            .byte	$36
13791 30DC                        36            .byte	$36
13792 30DD                        36            .byte	$36
13793 30DE                        36            .byte	$36
13794                                           ! 1560  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13795 30DF                        00            .byte	0
13796 30E0                        00            .byte	0
13797 30E1                        00            .byte	0
13798 30E2                        00            .byte	0
13799 30E3                        00            .byte	0
13800 30E4                        00            .byte	0
13801 30E5                        00            .byte	0
13802 30E6                        FE            .byte	$FE
13803 30E7                        36            .byte	$36
13804 30E8                        36            .byte	$36
13805 30E9                        36            .byte	$36
13806 30EA                        36            .byte	$36
13807 30EB                        36            .byte	$36
13808 30EC                        36            .byte	$36
13809 30ED                        36            .byte	$36
13810 30EE                        36            .byte	$36
13811                                           ! 1561  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13812 30EF                        00            .byte	0
13813 30F0                        00            .byte	0
13814 30F1                        00            .byte	0
13815 30F2                        00            .byte	0
13816 30F3                        00            .byte	0
13817 30F4                        F8            .byte	$F8
13818 30F5                        18            .byte	$18
13819 30F6                        F8            .byte	$F8
13820 30F7                        18            .byte	$18
13821 30F8                        18            .byte	$18
13822 30F9                        18            .byte	$18
13823 30FA                        18            .byte	$18
13824 30FB                        18            .byte	$18
13825 30FC                        18            .byte	$18
13826 30FD                        18            .byte	$18
13827 30FE                        18            .byte	$18
13828                                           ! 1562  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13829 30FF                        36            .byte	$36
13830 3100                        36            .byte	$36
13831 3101                        36            .byte	$36
13832 3102                        36            .byte	$36
13833 3103                        36            .byte	$36
13834 3104                        F6            .byte	$F6
13835 3105                        06            .byte	6
13836 3106                        F6            .byte	$F6
13837 3107                        36            .byte	$36
13838 3108                        36            .byte	$36
13839 3109                        36            .byte	$36
13840 310A                        36            .byte	$36
13841 310B                        36            .byte	$36
13842 310C                        36            .byte	$36
13843 310D                        36            .byte	$36
13844 310E                        36            .byte	$36
13845                                           ! 1563  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13846 310F                        36            .byte	$36
13847 3110                        36            .byte	$36
13848 3111                        36            .byte	$36
13849 3112                        36            .byte	$36
13850 3113                        36            .byte	$36
13851 3114                        36            .byte	$36
13852 3115                        36            .byte	$36
13853 3116                        36            .byte	$36
13854 3117                        36            .byte	$36
13855 3118                        36            .byte	$36
13856 3119                        36            .byte	$36
13857 311A                        36            .byte	$36
13858 311B                        36            .byte	$36
13859 311C                        36            .byte	$36
13860 311D                        36            .byte	$36
13861 311E                        36            .byte	$36
13862                                           ! 1564  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13863 311F                        00            .byte	0
13864 3120                        00            .byte	0
13865 3121                        00            .byte	0
13866 3122                        00            .byte	0
13867 3123                        00            .byte	0
13868 3124                        FE            .byte	$FE
13869 3125                        06            .byte	6
13870 3126                        F6            .byte	$F6
13871 3127                        36            .byte	$36
13872 3128                        36            .byte	$36
13873 3129                        36            .byte	$36
13874 312A                        36            .byte	$36
13875 312B                        36            .byte	$36
13876 312C                        36            .byte	$36
13877 312D                        36            .byte	$36
13878 312E                        36            .byte	$36
13879                                           ! 1565  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13880 312F                        36            .byte	$36
13881 3130                        36            .byte	$36
13882 3131                        36            .byte	$36
13883 3132                        36            .byte	$36
13884 3133                        36            .byte	$36
13885 3134                        F6            .byte	$F6
13886 3135                        06            .byte	6
13887 3136                        FE            .byte	$FE
13888 3137                        00            .byte	0
13889 3138                        00            .byte	0
13890 3139                        00            .byte	0
13891 313A                        00            .byte	0
13892 313B                        00            .byte	0
13893 313C                        00            .byte	0
13894 313D                        00            .byte	0
13895 313E                        00            .byte	0
13896                                           ! 1566  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13897 313F                        36            .byte	$36
13898 3140                        36            .byte	$36
13899 3141                        36            .byte	$36
13900 3142                        36            .byte	$36
13901 3143                        36            .byte	$36
13902 3144                        36            .byte	$36
13903 3145                        36            .byte	$36
13904 3146                        FE            .byte	$FE
13905 3147                        00            .byte	0
13906 3148                        00            .byte	0
13907 3149                        00            .byte	0
13908 314A                        00            .byte	0
13909 314B                        00            .byte	0
13910 314C                        00            .byte	0
13911 314D                        00            .byte	0
13912 314E                        00            .byte	0
13913                                           ! 1567  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13914 314F                        18            .byte	$18
13915 3150                        18            .byte	$18
13916 3151                        18            .byte	$18
13917 3152                        18            .byte	$18
13918 3153                        18            .byte	$18
13919 3154                        F8            .byte	$F8
13920 3155                        18            .byte	$18
13921 3156                        F8            .byte	$F8
13922 3157                        00            .byte	0
13923 3158                        00            .byte	0
13924 3159                        00            .byte	0
13925 315A                        00            .byte	0
13926 315B                        00            .byte	0
13927 315C                        00            .byte	0
13928 315D                        00            .byte	0
13929 315E                        00            .byte	0
13930                                           ! 1568  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13931 315F                        00            .byte	0
13932 3160                        00            .byte	0
13933 3161                        00            .byte	0
13934 3162                        00            .byte	0
13935 3163                        00            .byte	0
13936 3164                        00            .byte	0
13937 3165                        00            .byte	0
13938 3166                        F8            .byte	$F8
13939 3167                        18            .byte	$18
13940 3168                        18            .byte	$18
13941 3169                        18            .byte	$18
13942 316A                        18            .byte	$18
13943 316B                        18            .byte	$18
13944 316C                        18            .byte	$18
13945 316D                        18            .byte	$18
13946 316E                        18            .byte	$18
13947                                           ! 1569  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13948 316F                        18            .byte	$18
13949 3170                        18            .byte	$18
13950 3171                        18            .byte	$18
13951 3172                        18            .byte	$18
13952 3173                        18            .byte	$18
13953 3174                        18            .byte	$18
13954 3175                        18            .byte	$18
13955 3176                        1F            .byte	$1F
13956 3177                        00            .byte	0
13957 3178                        00            .byte	0
13958 3179                        00            .byte	0
13959 317A                        00            .byte	0
13960 317B                        00            .byte	0
13961 317C                        00            .byte	0
13962 317D                        00            .byte	0
13963 317E                        00            .byte	0
13964                                           ! 1570  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13965 317F                        18            .byte	$18
13966 3180                        18            .byte	$18
13967 3181                        18            .byte	$18
13968 3182                        18            .byte	$18
13969 3183                        18            .byte	$18
13970 3184                        18            .byte	$18
13971 3185                        18            .byte	$18
13972 3186                        FF            .byte	$FF
13973 3187                        00            .byte	0
13974 3188                        00            .byte	0
13975 3189                        00            .byte	0
13976 318A                        00            .byte	0
13977 318B                        00            .byte	0
13978 318C                        00            .byte	0
13979 318D                        00            .byte	0
13980 318E                        00            .byte	0
13981                                           ! 1571  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13982 318F                        00            .byte	0
13983 3190                        00            .byte	0
13984 3191                        00            .byte	0
13985 3192                        00            .byte	0
13986 3193                        00            .byte	0
13987 3194                        00            .byte	0
13988 3195                        00            .byte	0
13989 3196                        FF            .byte	$FF
13990 3197                        18            .byte	$18
13991 3198                        18            .byte	$18
13992 3199                        18            .byte	$18
13993 319A                        18            .byte	$18
13994 319B                        18            .byte	$18
13995 319C                        18            .byte	$18
13996 319D                        18            .byte	$18
13997 319E                        18            .byte	$18
13998                                           ! 1572  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13999 319F                        18            .byte	$18
14000 31A0                        18            .byte	$18
14001 31A1                        18            .byte	$18
14002 31A2                        18            .byte	$18
14003 31A3                        18            .byte	$18
14004 31A4                        18            .byte	$18
14005 31A5                        18            .byte	$18
14006 31A6                        1F            .byte	$1F
14007 31A7                        18            .byte	$18
14008 31A8                        18            .byte	$18
14009 31A9                        18            .byte	$18
14010 31AA                        18            .byte	$18
14011 31AB                        18            .byte	$18
14012 31AC                        18            .byte	$18
14013 31AD                        18            .byte	$18
14014 31AE                        18            .byte	$18
14015                                           ! 1573  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14016 31AF                        00            .byte	0
14017 31B0                        00            .byte	0
14018 31B1                        00            .byte	0
14019 31B2                        00            .byte	0
14020 31B3                        00            .byte	0
14021 31B4                        00            .byte	0
14022 31B5                        00            .byte	0
14023 31B6                        FF            .byte	$FF
14024 31B7                        00            .byte	0
14025 31B8                        00            .byte	0
14026 31B9                        00            .byte	0
14027 31BA                        00            .byte	0
14028 31BB                        00            .byte	0
14029 31BC                        00            .byte	0
14030 31BD                        00            .byte	0
14031 31BE                        00            .byte	0
14032                                           ! 1574  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14033 31BF                        18            .byte	$18
14034 31C0                        18            .byte	$18
14035 31C1                        18            .byte	$18
14036 31C2                        18            .byte	$18
14037 31C3                        18            .byte	$18
14038 31C4                        18            .byte	$18
14039 31C5                        18            .byte	$18
14040 31C6                        FF            .byte	$FF
14041 31C7                        18            .byte	$18
14042 31C8                        18            .byte	$18
14043 31C9                        18            .byte	$18
14044 31CA                        18            .byte	$18
14045 31CB                        18            .byte	$18
14046 31CC                        18            .byte	$18
14047 31CD                        18            .byte	$18
14048 31CE                        18            .byte	$18
14049                                           ! 1575  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14050 31CF                        18            .byte	$18
14051 31D0                        18            .byte	$18
14052 31D1                        18            .byte	$18
14053 31D2                        18            .byte	$18
14054 31D3                        18            .byte	$18
14055 31D4                        1F            .byte	$1F
14056 31D5                        18            .byte	$18
14057 31D6                        1F            .byte	$1F
14058 31D7                        18            .byte	$18
14059 31D8                        18            .byte	$18
14060 31D9                        18            .byte	$18
14061 31DA                        18            .byte	$18
14062 31DB                        18            .byte	$18
14063 31DC                        18            .byte	$18
14064 31DD                        18            .byte	$18
14065 31DE                        18            .byte	$18
14066                                           ! 1576  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14067 31DF                        36            .byte	$36
14068 31E0                        36            .byte	$36
14069 31E1                        36            .byte	$36
14070 31E2                        36            .byte	$36
14071 31E3                        36            .byte	$36
14072 31E4                        36            .byte	$36
14073 31E5                        36            .byte	$36
14074 31E6                        37            .byte	$37
14075 31E7                        36            .byte	$36
14076 31E8                        36            .byte	$36
14077 31E9                        36            .byte	$36
14078 31EA                        36            .byte	$36
14079 31EB                        36            .byte	$36
14080 31EC                        36            .byte	$36
14081 31ED                        36            .byte	$36
14082 31EE                        36            .byte	$36
14083                                           ! 1577  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14084 31EF                        36            .byte	$36
14085 31F0                        36            .byte	$36
14086 31F1                        36            .byte	$36
14087 31F2                        36            .byte	$36
14088 31F3                        36            .byte	$36
14089 31F4                        37            .byte	$37
14090 31F5                        30            .byte	$30
14091 31F6                        3F            .byte	$3F
14092 31F7                        00            .byte	0
14093 31F8                        00            .byte	0
14094 31F9                        00            .byte	0
14095 31FA                        00            .byte	0
14096 31FB                        00            .byte	0
14097 31FC                        00            .byte	0
14098 31FD                        00            .byte	0
14099 31FE                        00            .byte	0
14100                                           ! 1578  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14101 31FF                        00            .byte	0
14102 3200                        00            .byte	0
14103 3201                        00            .byte	0
14104 3202                        00            .byte	0
14105 3203                        00            .byte	0
14106 3204                        3F            .byte	$3F
14107 3205                        30            .byte	$30
14108 3206                        37            .byte	$37
14109 3207                        36            .byte	$36
14110 3208                        36            .byte	$36
14111 3209                        36            .byte	$36
14112 320A                        36            .byte	$36
14113 320B                        36            .byte	$36
14114                                           ! 1578  0x36, 0x36,
14115 320C                        36            .byte	$36
14116 320D                        36            .byte	$36
14117 320E                        36            .byte	$36
14118                                           ! 1579  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14119 320F                        36            .byte	$36
14120 3210                        36            .byte	$36
14121 3211                        36            .byte	$36
14122 3212                        36            .byte	$36
14123 3213                        36            .byte	$36
14124 3214                        F7            .byte	$F7
14125 3215                        00            .byte	0
14126 3216                        FF            .byte	$FF
14127 3217                        00            .byte	0
14128 3218                        00            .byte	0
14129 3219                        00            .byte	0
14130 321A                        00            .byte	0
14131 321B                        00            .byte	0
14132 321C                        00            .byte	0
14133 321D                        00            .byte	0
14134 321E                        00            .byte	0
14135                                           ! 1580  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14136 321F                        00            .byte	0
14137 3220                        00            .byte	0
14138 3221                        00            .byte	0
14139 3222                        00            .byte	0
14140 3223                        00            .byte	0
14141 3224                        FF            .byte	$FF
14142 3225                        00            .byte	0
14143 3226                        F7            .byte	$F7
14144 3227                        36            .byte	$36
14145 3228                        36            .byte	$36
14146 3229                        36            .byte	$36
14147 322A                        36            .byte	$36
14148 322B                        36            .byte	$36
14149 322C                        36            .byte	$36
14150 322D                        36            .byte	$36
14151 322E                        36            .byte	$36
14152                                           ! 1581  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14153 322F                        36            .byte	$36
14154 3230                        36            .byte	$36
14155 3231                        36            .byte	$36
14156 3232                        36            .byte	$36
14157 3233                        36            .byte	$36
14158 3234                        37            .byte	$37
14159 3235                        30            .byte	$30
14160 3236                        37            .byte	$37
14161 3237                        36            .byte	$36
14162 3238                        36            .byte	$36
14163 3239                        36            .byte	$36
14164 323A                        36            .byte	$36
14165 323B                        36            .byte	$36
14166 323C                        36            .byte	$36
14167 323D                        36            .byte	$36
14168 323E                        36            .byte	$36
14169                                           ! 1582  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14170 323F                        00            .byte	0
14171 3240                        00            .byte	0
14172 3241                        00            .byte	0
14173 3242                        00            .byte	0
14174 3243                        00            .byte	0
14175 3244                        FF            .byte	$FF
14176 3245                        00            .byte	0
14177 3246                        FF            .byte	$FF
14178 3247                        00            .byte	0
14179 3248                        00            .byte	0
14180 3249                        00            .byte	0
14181 324A                        00            .byte	0
14182 324B                        00            .byte	0
14183 324C                        00            .byte	0
14184 324D                        00            .byte	0
14185 324E                        00            .byte	0
14186                                           ! 1583  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14187 324F                        36            .byte	$36
14188 3250                        36            .byte	$36
14189 3251                        36            .byte	$36
14190 3252                        36            .byte	$36
14191 3253                        36            .byte	$36
14192 3254                        F7            .byte	$F7
14193 3255                        00            .byte	0
14194 3256                        F7            .byte	$F7
14195 3257                        36            .byte	$36
14196 3258                        36            .byte	$36
14197 3259                        36            .byte	$36
14198 325A                        36            .byte	$36
14199 325B                        36            .byte	$36
14200 325C                        36            .byte	$36
14201 325D                        36            .byte	$36
14202 325E                        36            .byte	$36
14203                                           ! 1584  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14204 325F                        18            .byte	$18
14205 3260                        18            .byte	$18
14206 3261                        18            .byte	$18
14207 3262                        18            .byte	$18
14208 3263                        18            .byte	$18
14209 3264                        FF            .byte	$FF
14210 3265                        00            .byte	0
14211 3266                        FF            .byte	$FF
14212 3267                        00            .byte	0
14213 3268                        00            .byte	0
14214 3269                        00            .byte	0
14215 326A                        00            .byte	0
14216 326B                        00            .byte	0
14217 326C                        00            .byte	0
14218 326D                        00            .byte	0
14219 326E                        00            .byte	0
14220                                           ! 1585  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14221 326F                        36            .byte	$36
14222 3270                        36            .byte	$36
14223 3271                        36            .byte	$36
14224 3272                        36            .byte	$36
14225 3273                        36            .byte	$36
14226 3274                        36            .byte	$36
14227 3275                        36            .byte	$36
14228 3276                        FF            .byte	$FF
14229 3277                        00            .byte	0
14230 3278                        00            .byte	0
14231 3279                        00            .byte	0
14232 327A                        00            .byte	0
14233 327B                        00            .byte	0
14234 327C                        00            .byte	0
14235 327D                        00            .byte	0
14236 327E                        00            .byte	0
14237                                           ! 1586  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14238 327F                        00            .byte	0
14239 3280                        00            .byte	0
14240 3281                        00            .byte	0
14241 3282                        00            .byte	0
14242 3283                        00            .byte	0
14243 3284                        FF            .byte	$FF
14244 3285                        00            .byte	0
14245 3286                        FF            .byte	$FF
14246 3287                        18            .byte	$18
14247 3288                        18            .byte	$18
14248 3289                        18            .byte	$18
14249 328A                        18            .byte	$18
14250 328B                        18            .byte	$18
14251 328C                        18            .byte	$18
14252 328D                        18            .byte	$18
14253 328E                        18            .byte	$18
14254                                           ! 1587  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14255 328F                        00            .byte	0
14256 3290                        00            .byte	0
14257 3291                        00            .byte	0
14258 3292                        00            .byte	0
14259 3293                        00            .byte	0
14260 3294                        00            .byte	0
14261 3295                        00            .byte	0
14262 3296                        FF            .byte	$FF
14263 3297                        36            .byte	$36
14264 3298                        36            .byte	$36
14265 3299                        36            .byte	$36
14266 329A                        36            .byte	$36
14267 329B                        36            .byte	$36
14268 329C                        36            .byte	$36
14269 329D                        36            .byte	$36
14270 329E                        36            .byte	$36
14271                                           ! 1588  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14272 329F                        36            .byte	$36
14273 32A0                        36            .byte	$36
14274 32A1                        36            .byte	$36
14275 32A2                        36            .byte	$36
14276 32A3                        36            .byte	$36
14277 32A4                        36            .byte	$36
14278 32A5                        36            .byte	$36
14279 32A6                        3F            .byte	$3F
14280 32A7                        00            .byte	0
14281 32A8                        00            .byte	0
14282 32A9                        00            .byte	0
14283 32AA                        00            .byte	0
14284 32AB                        00            .byte	0
14285 32AC                        00            .byte	0
14286 32AD                        00            .byte	0
14287 32AE                        00            .byte	0
14288                                           ! 1589  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14289 32AF                        18            .byte	$18
14290 32B0                        18            .byte	$18
14291 32B1                        18            .byte	$18
14292 32B2                        18            .byte	$18
14293 32B3                        18            .byte	$18
14294 32B4                        1F            .byte	$1F
14295 32B5                        18            .byte	$18
14296 32B6                        1F            .byte	$1F
14297 32B7                        00            .byte	0
14298 32B8                        00            .byte	0
14299 32B9                        00            .byte	0
14300 32BA                        00            .byte	0
14301 32BB                        00            .byte	0
14302 32BC                        00            .byte	0
14303 32BD                        00            .byte	0
14304 32BE                        00            .byte	0
14305                                           ! 1590  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14306 32BF                        00            .byte	0
14307 32C0                        00            .byte	0
14308 32C1                        00            .byte	0
14309 32C2                        00            .byte	0
14310 32C3                        00            .byte	0
14311 32C4                        1F            .byte	$1F
14312 32C5                        18            .byte	$18
14313 32C6                        1F            .byte	$1F
14314 32C7                        18            .byte	$18
14315 32C8                        18            .byte	$18
14316 32C9                        18            .byte	$18
14317 32CA                        18            .byte	$18
14318 32CB                        18            .byte	$18
14319 32CC                        18            .byte	$18
14320 32CD                        18            .byte	$18
14321 32CE                        18            .byte	$18
14322                                           ! 1591  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14323 32CF                        00            .byte	0
14324 32D0                        00            .byte	0
14325 32D1                        00            .byte	0
14326 32D2                        00            .byte	0
14327 32D3                        00            .byte	0
14328 32D4                        00            .byte	0
14329 32D5                        00            .byte	0
14330 32D6                        3F            .byte	$3F
14331 32D7                        36            .byte	$36
14332 32D8                        36            .byte	$36
14333 32D9                        36            .byte	$36
14334 32DA                        36            .byte	$36
14335 32DB                        36            .byte	$36
14336 32DC                        36            .byte	$36
14337 32DD                        36            .byte	$36
14338 32DE                        36            .byte	$36
14339                                           ! 1592  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14340 32DF                        36            .byte	$36
14341 32E0                        36            .byte	$36
14342 32E1                        36            .byte	$36
14343 32E2                        36            .byte	$36
14344 32E3                        36            .byte	$36
14345 32E4                        36            .byte	$36
14346 32E5                        36            .byte	$36
14347 32E6                        FF            .byte	$FF
14348 32E7                        36            .byte	$36
14349 32E8                        36            .byte	$36
14350 32E9                        36            .byte	$36
14351 32EA                        36            .byte	$36
14352 32EB                        36            .byte	$36
14353 32EC                        36            .byte	$36
14354 32ED                        36            .byte	$36
14355 32EE                        36            .byte	$36
14356                                           ! 1593  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14357 32EF                        18            .byte	$18
14358 32F0                        18            .byte	$18
14359 32F1                        18            .byte	$18
14360 32F2                        18            .byte	$18
14361 32F3                        18            .byte	$18
14362 32F4                        FF            .byte	$FF
14363 32F5                        18            .byte	$18
14364 32F6                        FF            .byte	$FF
14365 32F7                        18            .byte	$18
14366 32F8                        18            .byte	$18
14367 32F9                        18            .byte	$18
14368 32FA                        18            .byte	$18
14369 32FB                        18            .byte	$18
14370 32FC                        18            .byte	$18
14371 32FD                        18            .byte	$18
14372 32FE                        18            .byte	$18
14373                                           ! 1594  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14374 32FF                        18            .byte	$18
14375 3300                        18            .byte	$18
14376 3301                        18            .byte	$18
14377 3302                        18            .byte	$18
14378 3303                        18            .byte	$18
14379 3304                        18            .byte	$18
14380 3305                        18            .byte	$18
14381 3306                        F8            .byte	$F8
14382 3307                        00            .byte	0
14383 3308                        00            .byte	0
14384 3309                        00            .byte	0
14385 330A                        00            .byte	0
14386 330B                        00            .byte	0
14387 330C                        00            .byte	0
14388 330D                        00            .byte	0
14389 330E                        00            .byte	0
14390                                           ! 1595  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14391 330F                        00            .byte	0
14392 3310                        00            .byte	0
14393 3311                        00            .byte	0
14394 3312                        00            .byte	0
14395 3313                        00            .byte	0
14396 3314                        00            .byte	0
14397 3315                        00            .byte	0
14398 3316                        1F            .byte	$1F
14399 3317                        18            .byte	$18
14400 3318                        18            .byte	$18
14401 3319                        18            .byte	$18
14402 331A                        18            .byte	$18
14403 331B                        18            .byte	$18
14404 331C                        18            .byte	$18
14405 331D                        18            .byte	$18
14406 331E                        18            .byte	$18
14407                                           ! 1596  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14408 331F                        FF            .byte	$FF
14409 3320                        FF            .byte	$FF
14410 3321                        FF            .byte	$FF
14411 3322                        FF            .byte	$FF
14412 3323                        FF            .byte	$FF
14413 3324                        FF            .byte	$FF
14414 3325                        FF            .byte	$FF
14415 3326                        FF            .byte	$FF
14416 3327                        FF            .byte	$FF
14417 3328                        FF            .byte	$FF
14418 3329                        FF            .byte	$FF
14419 332A                        FF            .byte	$FF
14420 332B                        FF            .byte	$FF
14421 332C                        FF            .byte	$FF
14422 332D                        FF            .byte	$FF
14423 332E                        FF            .byte	$FF
14424                                           ! 1597  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14425 332F                        00            .byte	0
14426 3330                        00            .byte	0
14427 3331                        00            .byte	0
14428 3332                        00            .byte	0
14429 3333                        00            .byte	0
14430 3334                        00            .byte	0
14431 3335                        00            .byte	0
14432 3336                        FF            .byte	$FF
14433 3337                        FF            .byte	$FF
14434 3338                        FF            .byte	$FF
14435 3339                        FF            .byte	$FF
14436 333A                        FF            .byte	$FF
14437 333B                        FF            .byte	$FF
14438 333C                        FF            .byte	$FF
14439 333D                        FF            .byte	$FF
14440 333E                        FF            .byte	$FF
14441                                           ! 1598  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14442 333F                        F0            .byte	$F0
14443 3340                        F0            .byte	$F0
14444 3341                        F0            .byte	$F0
14445 3342                        F0            .byte	$F0
14446 3343                        F0            .byte	$F0
14447 3344                        F0            .byte	$F0
14448 3345                        F0            .byte	$F0
14449 3346                        F0            .byte	$F0
14450 3347                        F0            .byte	$F0
14451 3348                        F0            .byte	$F0
14452 3349                        F0            .byte	$F0
14453 334A                        F0            .byte	$F0
14454 334B                        F0            .byte	$F0
14455 334C                        F0            .byte	$F0
14456 334D                        F0            .byte	$F0
14457 334E                        F0            .byte	$F0
14458                                           ! 1599  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f
14459 334F                        0F            .byte	$F
14460 3350                        0F            .byte	$F
14461 3351                        0F            .byte	$F
14462 3352                        0F            .byte	$F
14463 3353                        0F            .byte	$F
14464 3354                        0F            .byte	$F
14465 3355                        0F            .byte	$F
14466 3356                        0F            .byte	$F
14467 3357                        0F            .byte	$F
14468 3358                        0F            .byte	$F
14469 3359                        0F            .byte	$F
14470 335A                        0F            .byte	$F
14471 335B                        0F            .byte	$F
14472 335C                        0F            .byte	$F
14473 335D                        0F            .byte	$F
14474                                           ! 1599 ,
14475 335E                        0F            .byte	$F
14476                                           ! 1600  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14477 335F                        FF            .byte	$FF
14478 3360                        FF            .byte	$FF
14479 3361                        FF            .byte	$FF
14480 3362                        FF            .byte	$FF
14481 3363                        FF            .byte	$FF
14482 3364                        FF            .byte	$FF
14483 3365                        FF            .byte	$FF
14484 3366                        00            .byte	0
14485 3367                        00            .byte	0
14486 3368                        00            .byte	0
14487 3369                        00            .byte	0
14488 336A                        00            .byte	0
14489 336B                        00            .byte	0
14490 336C                        00            .byte	0
14491 336D                        00            .byte	0
14492 336E                        00            .byte	0
14493                                           ! 1601  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14494 336F                        00            .byte	0
14495 3370                        00            .byte	0
14496 3371                        00            .byte	0
14497 3372                        00            .byte	0
14498 3373                        00            .byte	0
14499 3374                        76            .byte	$76
14500 3375                        DC            .byte	$DC
14501 3376                        D8            .byte	$D8
14502 3377                        D8            .byte	$D8
14503 3378                        D8            .byte	$D8
14504 3379                        DC            .byte	$DC
14505 337A                        76            .byte	$76
14506 337B                        00            .byte	0
14507 337C                        00            .byte	0
14508 337D                        00            .byte	0
14509 337E                        00            .byte	0
14510                                           ! 1602  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14511 337F                        00            .byte	0
14512 3380                        00            .byte	0
14513 3381                        78            .byte	$78
14514 3382                        CC            .byte	$CC
14515 3383                        CC            .byte	$CC
14516 3384                        CC            .byte	$CC
14517 3385                        D8            .byte	$D8
14518 3386                        CC            .byte	$CC
14519 3387                        C6            .byte	$C6
14520 3388                        C6            .byte	$C6
14521 3389                        C6            .byte	$C6
14522 338A                        CC            .byte	$CC
14523 338B                        00            .byte	0
14524 338C                        00            .byte	0
14525 338D                        00            .byte	0
14526 338E                        00            .byte	0
14527                                           ! 1603  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14528 338F                        00            .byte	0
14529 3390                        00            .byte	0
14530 3391                        FE            .byte	$FE
14531 3392                        C6            .byte	$C6
14532 3393                        C6            .byte	$C6
14533 3394                        C0            .byte	$C0
14534 3395                        C0            .byte	$C0
14535 3396                        C0            .byte	$C0
14536 3397                        C0            .byte	$C0
14537 3398                        C0            .byte	$C0
14538 3399                        C0            .byte	$C0
14539 339A                        C0            .byte	$C0
14540 339B                        00            .byte	0
14541 339C                        00            .byte	0
14542 339D                        00            .byte	0
14543 339E                        00            .byte	0
14544                                           ! 1604  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14545 339F                        00            .byte	0
14546 33A0                        00            .byte	0
14547 33A1                        00            .byte	0
14548 33A2                        00            .byte	0
14549 33A3                        FE            .byte	$FE
14550 33A4                        6C            .byte	$6C
14551 33A5                        6C            .byte	$6C
14552 33A6                        6C            .byte	$6C
14553 33A7                        6C            .byte	$6C
14554 33A8                        6C            .byte	$6C
14555 33A9                        6C            .byte	$6C
14556 33AA                        6C            .byte	$6C
14557 33AB                        00            .byte	0
14558 33AC                        00            .byte	0
14559 33AD                        00            .byte	0
14560 33AE                        00            .byte	0
14561                                           ! 1605  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14562 33AF                        00            .byte	0
14563 33B0                        00            .byte	0
14564 33B1                        00            .byte	0
14565 33B2                        FE            .byte	$FE
14566 33B3                        C6            .byte	$C6
14567 33B4                        60            .byte	$60
14568 33B5                        30            .byte	$30
14569 33B6                        18            .byte	$18
14570 33B7                        30            .byte	$30
14571 33B8                        60            .byte	$60
14572 33B9                        C6            .byte	$C6
14573 33BA                        FE            .byte	$FE
14574 33BB                        00            .byte	0
14575 33BC                        00            .byte	0
14576 33BD                        00            .byte	0
14577 33BE                        00            .byte	0
14578                                           ! 1606  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14579 33BF                        00            .byte	0
14580 33C0                        00            .byte	0
14581 33C1                        00            .byte	0
14582 33C2                        00            .byte	0
14583 33C3                        00            .byte	0
14584 33C4                        7E            .byte	$7E
14585 33C5                        D8            .byte	$D8
14586 33C6                        D8            .byte	$D8
14587 33C7                        D8            .byte	$D8
14588 33C8                        D8            .byte	$D8
14589 33C9                        D8            .byte	$D8
14590 33CA                        70            .byte	$70
14591 33CB                        00            .byte	0
14592 33CC                        00            .byte	0
14593 33CD                        00            .byte	0
14594 33CE                        00            .byte	0
14595                                           ! 1607  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14596 33CF                        00            .byte	0
14597 33D0                        00            .byte	0
14598 33D1                        00            .byte	0
14599 33D2                        00            .byte	0
14600 33D3                        66            .byte	$66
14601 33D4                        66            .byte	$66
14602 33D5                        66            .byte	$66
14603 33D6                        66            .byte	$66
14604 33D7                        66            .byte	$66
14605 33D8                        7C            .byte	$7C
14606 33D9                        60            .byte	$60
14607 33DA                        60            .byte	$60
14608 33DB                        C0            .byte	$C0
14609 33DC                        00            .byte	0
14610 33DD                        00            .byte	0
14611 33DE                        00            .byte	0
14612                                           ! 1608  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14613 33DF                        00            .byte	0
14614 33E0                        00            .byte	0
14615 33E1                        00            .byte	0
14616 33E2                        00            .byte	0
14617 33E3                        76            .byte	$76
14618 33E4                        DC            .byte	$DC
14619 33E5                        18            .byte	$18
14620 33E6                        18            .byte	$18
14621 33E7                        18            .byte	$18
14622 33E8                        18            .byte	$18
14623 33E9                        18            .byte	$18
14624 33EA                        18            .byte	$18
14625 33EB                        00            .byte	0
14626 33EC                        00            .byte	0
14627 33ED                        00            .byte	0
14628 33EE                        00            .byte	0
14629                                           ! 1609  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14630 33EF                        00            .byte	0
14631 33F0                        00            .byte	0
14632 33F1                        00            .byte	0
14633 33F2                        7E            .byte	$7E
14634 33F3                        18            .byte	$18
14635 33F4                        3C            .byte	$3C
14636 33F5                        66            .byte	$66
14637 33F6                        66            .byte	$66
14638 33F7                        66            .byte	$66
14639 33F8                        3C            .byte	$3C
14640 33F9                        18            .byte	$18
14641 33FA                        7E            .byte	$7E
14642 33FB                        00            .byte	0
14643 33FC                        00            .byte	0
14644 33FD                        00            .byte	0
14645 33FE                        00            .byte	0
14646                                           ! 1610  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14647 33FF                        00            .byte	0
14648 3400                        00            .byte	0
14649 3401                        00            .byte	0
14650 3402                        38            .byte	$38
14651 3403                        6C            .byte	$6C
14652 3404                        C6            .byte	$C6
14653 3405                        C6            .byte	$C6
14654 3406                        FE            .byte	$FE
14655 3407                        C6            .byte	$C6
14656 3408                        C6            .byte	$C6
14657 3409                        6C            .byte	$6C
14658 340A                        38            .byte	$38
14659 340B                        00            .byte	0
14660 340C                        00            .byte	0
14661 340D                        00            .byte	0
14662 340E                        00            .byte	0
14663                                           ! 1611  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14664 340F                        00            .byte	0
14665 3410                        00            .byte	0
14666 3411                        38            .byte	$38
14667 3412                        6C            .byte	$6C
14668 3413                        C6            .byte	$C6
14669 3414                        C6            .byte	$C6
14670 3415                        C6            .byte	$C6
14671 3416                        6C            .byte	$6C
14672 3417                        6C            .byte	$6C
14673 3418                        6C            .byte	$6C
14674 3419                        6C            .byte	$6C
14675 341A                        EE            .byte	$EE
14676 341B                        00            .byte	0
14677 341C                        00            .byte	0
14678 341D                        00            .byte	0
14679 341E                        00            .byte	0
14680                                           ! 1612  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14681 341F                        00            .byte	0
14682 3420                        00            .byte	0
14683 3421                        1E            .byte	$1E
14684 3422                        30            .byte	$30
14685 3423                        18            .byte	$18
14686 3424                        0C            .byte	$C
14687 3425                        3E            .byte	$3E
14688 3426                        66            .byte	$66
14689 3427                        66            .byte	$66
14690 3428                        66            .byte	$66
14691 3429                        66            .byte	$66
14692 342A                        3C            .byte	$3C
14693 342B                        00            .byte	0
14694 342C                        00            .byte	0
14695 342D                        00            .byte	0
14696 342E                        00            .byte	0
14697                                           ! 1613  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14698 342F                        00            .byte	0
14699 3430                        00            .byte	0
14700 3431                        00            .byte	0
14701 3432                        00            .byte	0
14702 3433                        00            .byte	0
14703 3434                        7E            .byte	$7E
14704 3435                        DB            .byte	$DB
14705 3436                        DB            .byte	$DB
14706 3437                        DB            .byte	$DB
14707 3438                        7E            .byte	$7E
14708 3439                        00            .byte	0
14709 343A                        00            .byte	0
14710 343B                        00            .byte	0
14711 343C                        00            .byte	0
14712 343D                        00            .byte	0
14713 343E                        00            .byte	0
14714                                           ! 1614  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14715 343F                        00            .byte	0
14716 3440                        00            .byte	0
14717 3441                        00            .byte	0
14718 3442                        03            .byte	3
14719 3443                        06            .byte	6
14720 3444                        7E            .byte	$7E
14721 3445                        DB            .byte	$DB
14722 3446                        DB            .byte	$DB
14723 3447                        F3            .byte	$F3
14724 3448                        7E            .byte	$7E
14725 3449                        60            .byte	$60
14726 344A                        C0            .byte	$C0
14727 344B                        00            .byte	0
14728 344C                        00            .byte	0
14729 344D                        00            .byte	0
14730 344E                        00            .byte	0
14731                                           ! 1615  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14732 344F                        00            .byte	0
14733 3450                        00            .byte	0
14734 3451                        1C            .byte	$1C
14735 3452                        30            .byte	$30
14736 3453                        60            .byte	$60
14737 3454                        60            .byte	$60
14738 3455                        7C            .byte	$7C
14739 3456                        60            .byte	$60
14740 3457                        60            .byte	$60
14741 3458                        60            .byte	$60
14742 3459                        30            .byte	$30
14743 345A                        1C            .byte	$1C
14744 345B                        00            .byte	0
14745 345C                        00            .byte	0
14746 345D                        00            .byte	0
14747 345E                        00            .byte	0
14748                                           ! 1616  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14749 345F                        00            .byte	0
14750 3460                        00            .byte	0
14751 3461                        00            .byte	0
14752 3462                        7C            .byte	$7C
14753 3463                        C6            .byte	$C6
14754 3464                        C6            .byte	$C6
14755 3465                        C6            .byte	$C6
14756 3466                        C6            .byte	$C6
14757 3467                        C6            .byte	$C6
14758 3468                        C6            .byte	$C6
14759 3469                        C6            .byte	$C6
14760 346A                        C6            .byte	$C6
14761 346B                        00            .byte	0
14762 346C                        00            .byte	0
14763 346D                        00            .byte	0
14764 346E                        00            .byte	0
14765                                           ! 1617  0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14766 346F                        00            .byte	0
14767 3470                        00            .byte	0
14768 3471                        00            .byte	0
14769 3472                        00            .byte	0
14770 3473                        FE            .byte	$FE
14771 3474                        00            .byte	0
14772 3475                        00            .byte	0
14773 3476                        FE            .byte	$FE
14774 3477                        00            .byte	0
14775 3478                        00            .byte	0
14776 3479                        FE            .byte	$FE
14777 347A                        00            .byte	0
14778 347B                        00            .byte	0
14779 347C                        00            .byte	0
14780 347D                        00            .byte	0
14781 347E                        00            .byte	0
14782                                           ! 1618  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14783 347F                        00            .byte	0
14784 3480                        00            .byte	0
14785 3481                        00            .byte	0
14786 3482                        00            .byte	0
14787 3483                        18            .byte	$18
14788 3484                        18            .byte	$18
14789 3485                        7E            .byte	$7E
14790 3486                        18            .byte	$18
14791 3487                        18            .byte	$18
14792 3488                        00            .byte	0
14793 3489                        00            .byte	0
14794 348A                        FF            .byte	$FF
14795 348B                        00            .byte	0
14796 348C                        00            .byte	0
14797 348D                        00            .byte	0
14798 348E                        00            .byte	0
14799                                           ! 1619  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14800 348F                        00            .byte	0
14801 3490                        00            .byte	0
14802 3491                        00            .byte	0
14803 3492                        30            .byte	$30
14804 3493                        18            .byte	$18
14805 3494                        0C            .byte	$C
14806 3495                        06            .byte	6
14807 3496                        0C            .byte	$C
14808 3497                        18            .byte	$18
14809 3498                        30            .byte	$30
14810 3499                        00            .byte	0
14811 349A                        7E            .byte	$7E
14812 349B                        00            .byte	0
14813 349C                        00            .byte	0
14814 349D                        00            .byte	0
14815 349E                        00            .byte	0
14816                                           ! 1620  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14817 349F                        00            .byte	0
14818 34A0                        00            .byte	0
14819 34A1                        00            .byte	0
14820 34A2                        0C            .byte	$C
14821 34A3                        18            .byte	$18
14822 34A4                        30            .byte	$30
14823 34A5                        60            .byte	$60
14824 34A6                        30            .byte	$30
14825 34A7                        18            .byte	$18
14826 34A8                        0C            .byte	$C
14827 34A9                        00            .byte	0
14828 34AA                        7E            .byte	$7E
14829 34AB                        00            .byte	0
14830 34AC                        00            .byte	0
14831 34AD                        00            .byte	0
14832 34AE                        00            .byte	0
14833                                           ! 1621  0x00, 0x
14834 34AF                        00            .byte	0
14835                                           ! 1621 00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14836 34B0                        00            .byte	0
14837 34B1                        0E            .byte	$E
14838 34B2                        1B            .byte	$1B
14839 34B3                        1B            .byte	$1B
14840 34B4                        18            .byte	$18
14841 34B5                        18            .byte	$18
14842 34B6                        18            .byte	$18
14843 34B7                        18            .byte	$18
14844 34B8                        18            .byte	$18
14845 34B9                        18            .byte	$18
14846 34BA                        18            .byte	$18
14847 34BB                        18            .byte	$18
14848 34BC                        18            .byte	$18
14849 34BD                        18            .byte	$18
14850 34BE                        18            .byte	$18
14851                                           ! 1622  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14852 34BF                        18            .byte	$18
14853 34C0                        18            .byte	$18
14854 34C1                        18            .byte	$18
14855 34C2                        18            .byte	$18
14856 34C3                        18            .byte	$18
14857 34C4                        18            .byte	$18
14858 34C5                        18            .byte	$18
14859 34C6                        18            .byte	$18
14860 34C7                        D8            .byte	$D8
14861 34C8                        D8            .byte	$D8
14862 34C9                        D8            .byte	$D8
14863 34CA                        70            .byte	$70
14864 34CB                        00            .byte	0
14865 34CC                        00            .byte	0
14866 34CD                        00            .byte	0
14867 34CE                        00            .byte	0
14868                                           ! 1623  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14869 34CF                        00            .byte	0
14870 34D0                        00            .byte	0
14871 34D1                        00            .byte	0
14872 34D2                        00            .byte	0
14873 34D3                        18            .byte	$18
14874 34D4                        18            .byte	$18
14875 34D5                        00            .byte	0
14876 34D6                        7E            .byte	$7E
14877 34D7                        00            .byte	0
14878 34D8                        18            .byte	$18
14879 34D9                        18            .byte	$18
14880 34DA                        00            .byte	0
14881 34DB                        00            .byte	0
14882 34DC                        00            .byte	0
14883 34DD                        00            .byte	0
14884 34DE                        00            .byte	0
14885                                           ! 1624  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14886 34DF                        00            .byte	0
14887 34E0                        00            .byte	0
14888 34E1                        00            .byte	0
14889 34E2                        00            .byte	0
14890 34E3                        00            .byte	0
14891 34E4                        76            .byte	$76
14892 34E5                        DC            .byte	$DC
14893 34E6                        00            .byte	0
14894 34E7                        76            .byte	$76
14895 34E8                        DC            .byte	$DC
14896 34E9                        00            .byte	0
14897 34EA                        00            .byte	0
14898 34EB                        00            .byte	0
14899 34EC                        00            .byte	0
14900 34ED                        00            .byte	0
14901 34EE                        00            .byte	0
14902                                           ! 1625  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14903 34EF                        00            .byte	0
14904 34F0                        38            .byte	$38
14905 34F1                        6C            .byte	$6C
14906 34F2                        6C            .byte	$6C
14907 34F3                        38            .byte	$38
14908 34F4                        00            .byte	0
14909 34F5                        00            .byte	0
14910 34F6                        00            .byte	0
14911 34F7                        00            .byte	0
14912 34F8                        00            .byte	0
14913 34F9                        00            .byte	0
14914 34FA                        00            .byte	0
14915 34FB                        00            .byte	0
14916 34FC                        00            .byte	0
14917 34FD                        00            .byte	0
14918 34FE                        00            .byte	0
14919                                           ! 1626  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14920 34FF                        00            .byte	0
14921 3500                        00            .byte	0
14922 3501                        00            .byte	0
14923 3502                        00            .byte	0
14924 3503                        00            .byte	0
14925 3504                        00            .byte	0
14926 3505                        00            .byte	0
14927 3506                        18            .byte	$18
14928 3507                        18            .byte	$18
14929 3508                        00            .byte	0
14930 3509                        00            .byte	0
14931 350A                        00            .byte	0
14932 350B                        00            .byte	0
14933 350C                        00            .byte	0
14934 350D                        00            .byte	0
14935 350E                        00            .byte	0
14936                                           ! 1627  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14937 350F                        00            .byte	0
14938 3510                        00            .byte	0
14939 3511                        00            .byte	0
14940 3512                        00            .byte	0
14941 3513                        00            .byte	0
14942 3514                        00            .byte	0
14943 3515                        00            .byte	0
14944 3516                        00            .byte	0
14945 3517                        18            .byte	$18
14946 3518                        00            .byte	0
14947 3519                        00            .byte	0
14948 351A                        00            .byte	0
14949 351B                        00            .byte	0
14950 351C                        00            .byte	0
14951 351D                        00            .byte	0
14952 351E                        00            .byte	0
14953                                           ! 1628  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14954 351F                        00            .byte	0
14955 3520                        0F            .byte	$F
14956 3521                        0C            .byte	$C
14957 3522                        0C            .byte	$C
14958 3523                        0C            .byte	$C
14959 3524                        0C            .byte	$C
14960 3525                        0C            .byte	$C
14961 3526                        EC            .byte	$EC
14962 3527                        6C            .byte	$6C
14963 3528                        6C            .byte	$6C
14964 3529                        3C            .byte	$3C
14965 352A                        1C            .byte	$1C
14966 352B                        00            .byte	0
14967 352C                        00            .byte	0
14968 352D                        00            .byte	0
14969 352E                        00            .byte	0
14970                                           ! 1629  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14971 352F                        00            .byte	0
14972 3530                        D8            .byte	$D8
14973 3531                        6C            .byte	$6C
14974 3532                        6C            .byte	$6C
14975 3533                        6C            .byte	$6C
14976 3534                        6C            .byte	$6C
14977 3535                        6C            .byte	$6C
14978 3536                        00            .byte	0
14979 3537                        00            .byte	0
14980 3538                        00            .byte	0
14981 3539                        00            .byte	0
14982 353A                        00            .byte	0
14983 353B                        00            .byte	0
14984 353C                        00            .byte	0
14985 353D                        00            .byte	0
14986 353E                        00            .byte	0
14987                                           ! 1630  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14988 353F                        00            .byte	0
14989 3540                        70            .byte	$70
14990 3541                        D8            .byte	$D8
14991 3542                        30            .byte	$30
14992 3543                        60            .byte	$60
14993 3544                        C8            .byte	$C8
14994 3545                        F8            .byte	$F8
14995 3546                        00            .byte	0
14996 3547                        00            .byte	0
14997 3548                        00            .byte	0
14998 3549                        00            .byte	0
14999 354A                        00            .byte	0
15000 354B                        00            .byte	0
15001 354C                        00            .byte	0
15002 354D                        00            .byte	0
15003 354E                        00            .byte	0
15004                                           ! 1631  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
15005 354F                        00            .byte	0
15006 3550                        00            .byte	0
15007 3551                        00            .byte	0
15008 3552                        00            .byte	0
15009 3553                        7C            .byte	$7C
15010 3554                        7C            .byte	$7C
15011 3555                        7C            .byte	$7C
15012 3556                        7C            .byte	$7C
15013 3557                        7C            .byte	$7C
15014 3558                        7C            .byte	$7C
15015 3559                        7C            .byte	$7C
15016 355A                        00            .byte	0
15017 355B                        00            .byte	0
15018 355C                        00            .byte	0
15019 355D                        00            .byte	0
15020 355E                        00            .byte	0
15021                                           ! 1632  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
15022 355F                        00            .byte	0
15023 3560                        00            .byte	0
15024 3561                        00            .byte	0
15025 3562                        00            .byte	0
15026 3563                        00            .byte	0
15027 3564                        00            .byte	0
15028 3565                        00            .byte	0
15029 3566                        00            .byte	0
15030 3567                        00            .byte	0
15031 3568                        00            .byte	0
15032 3569                        00            .byte	0
15033 356A                        00            .byte	0
15034 356B                        00            .byte	0
15035 356C                        00            .byte	0
15036 356D                        00            .byte	0
15037                                           ! 1633 };
15038 356E                        00            .byte	0
15039                                           !BCC_EOS
15040                                           ! 1634 static Bit8u vgafont14alt[1]={0x00};
15041                       0000356F            _vgafont14alt:
15042 356F                        00            .byte	0
15043                                           !BCC_EOS
15044                                           ! 1635 static Bit8u vgafont16alt[1]={0x00};
15045                       00003570            _vgafont16alt:
15046 3570                        00            .byte	0
15047                                           !BCC_EOS
15048                                           ! 1636 #asm
15049                                           !BCC_ASM
15050                       00003571            init_vga_card:
15051                                           ;; switch to color mode and enable CPU access 480 lines
15052 3571           BA                   03C2    mov dx, #0x3C2
15053 3574           B0                     C3    mov al, #0xC3
15054 3576           EE                           outb dx,al
15055                                           ;; more than 64k 3C4/04
15056 3577           BA                   03C4    mov dx, #0x3C4
15057 357A           B0                     04    mov al, #0x04
15058 357C           EE                           outb dx,al
15059 357D           BA                   03C5    mov dx, #0x3C5
15060 3580           B0                     02    mov al, #0x02
15061 3582           EE                           outb dx,al
15062 3583           BB                   358D    mov bx, #msg_vga_init
15063 3586           53                           push bx
15064 3587           E8         4896              call _printf
15065 358A           44                           inc sp
15066 358B           44                           inc sp
15067 358C           C3                           ret
15068                       0000358D            msg_vga_init:
15069 358D                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
15070 35CD                        0D            .byte 0x0d,0x0a,0x00
15071                                           ! 1658 endasm
15072                                           !BCC_ENDASM
15073                                           ! 1659 #asm
15074                                           !BCC_ASM
15075                       000035D0            init_bios_area:
15076 35D0           1E                           push ds
15077 35D1           B8                   0040    mov ax, # 0x40
15078 35D4           8ED8                         mov ds, ax
15079                                           ;; init detected hardware BIOS Area
15080 35D6           BB                   0010    mov bx, # 0x10
15081 35D9           8B07                         mov ax, [bx]
15082 35DB           25                   FFCF    and ax, #0xffcf
15083                                           ;; set 80x25 color (not clear from RBIL but usual)
15084 35DE           0D                   0020    or ax, #0x0020
15085 35E1           8907                         mov [bx], ax
15086                                           ;; Just for the first int10 find its children
15087                                           ;; the default char height
15088 35E3           BB                   0085    mov bx, # 0x85
15089 35E6           B0                     10    mov al, #0x10
15090 35E8           8807                         mov [bx], al
15091                                           ;; Clear the screen
15092 35EA           BB                   0087    mov bx, # 0x87
15093 35ED           B0                     60    mov al, #0x60
15094 35EF           8807                         mov [bx], al
15095                                           ;; Set the basic screen we have
15096 35F1           BB                   0088    mov bx, # 0x88
15097 35F4           B0                     F9    mov al, #0xf9
15098 35F6           8807                         mov [bx], al
15099                                           ;; Set the basic modeset options
15100 35F8           BB                   0089    mov bx, # 0x89
15101 35FB           B0                     51    mov al, #0x51
15102 35FD           8807                         mov [bx], al
15103                                           ;; Set the default MSR
15104 35FF           BB                   0065    mov bx, # 0x65
15105 3602           B0                     09    mov al, #0x09
15106 3604           8807                         mov [bx], al
15107 3606           1F                           pop ds
15108 3607           C3                           ret
15109                       00003608            _video_save_pointer_table:
15110 3608                      029F              .word _video_param_table
15111 360A                      C000              .word 0xc000
15112 360C                      0000              .word 0
15113 360E                      0000              .word 0
15114 3610                      0000              .word 0
15115 3612                      0000              .word 0
15116 3614                      0000              .word 0
15117 3616                      0000              .word 0
15118 3618                      0000              .word 0
15119 361A                      0000              .word 0
15120 361C                      0000              .word 0
15121 361E                      0000              .word 0
15122 3620                      0000              .word 0
15123 3622                      0000              .word 0
15124                                           ! 1709 endasm
15125                                           !BCC_ENDASM
15126                                           ! 1710 static void display_splash_screen()
15127                                           ! 1711 {
15128                                           
15129                       00003624            _display_splash_screen:
15130                                           ! 1712 }
15131 3624           C3                         ret
15132                                           ! 1713 static void display_info()
15133                                           ! 1714 {
15134                       00003625            _display_info:
15135                                           ! 1715 #asm
15136                                           !BCC_ASM
15137 3625           B8                   C000   mov ax,#0xc000
15138 3628           8ED8                        mov ds,ax
15139 362A           BE                   0022   mov si,#vgabios_name
15140 362D           E8         0013             call _display_string
15141 3630           BE                   0038   mov si,#vgabios_version
15142 3633           E8         000D             call _display_string
15143                                            ;;mov si,#vgabios_copyright
15144                                            ;;call _display_string
15145                                            ;;mov si,#crlf
15146                                            ;;call _display_string
15147 3636           BE                   007E   mov si,#vgabios_license
15148 3639           E8         0007             call _display_string
15149 363C           BE                   00B3   mov si,#vgabios_website
15150 363F           E8         0001             call _display_string
15151                                           ! 1730 endasm
15152                                           !BCC_ENDASM
15153                                           ! 1731 }
15154 3642           C3                         ret
15155                                           ! 1732 static void display_string()
15156                                           ! 1733 {
15157                       00003643            _display_string:
15158                                           ! 1734 #asm
15159                                           !BCC_ASM
15160 3643           8CD8                        mov ax,ds
15161 3645           8EC0                        mov es,ax
15162 3647           89F7                        mov di,si
15163 3649           31C9                        xor cx,cx
15164 364B           F7D1                        not cx
15165 364D           30C0                        xor al,al
15166 364F           FC                          cld
15167 3650           F2                          repne
15168 3651           AE                           scasb
15169 3652           F7D1                        not cx
15170 3654           49                          dec cx
15171 3655           51                          push cx
15172 3656           B8                   0300   mov ax,#0x0300
15173 3659           BB                   0000   mov bx,#0x0000
15174 365C           CD                     10   int #0x10
15175 365E           59                          pop cx
15176 365F           B8                   1301   mov ax,#0x1301
15177 3662           BB                   000B   mov bx,#0x000b
15178 3665           89F5                        mov bp,si
15179 3667           CD                     10   int #0x10
15180                                           ! 1755 endasm
15181                                           !BCC_ENDASM
15182                                           ! 1756 }
15183 3669           C3                         ret
15184                                           ! 1757 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15185                                           ! 1758   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15186                       0000366A            _int10_debugmsg:
15187                                           !BCC_EOS
15188                                           ! 1759 {
15189                                           ! 1760  if(( AX >> 8 )!=0x0E)
15190 366A           55                         push	bp
15191 366B           89E5                       mov	bp,sp
15192                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15193 366D           8B46         12            mov	ax,$12[bp]
15194 3670           88E0                       mov	al,ah
15195 3672           30E4                       xor	ah,ah
15196                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
15197 3674           3D                   000E  cmp	ax,*$E
15198 3677           74           20            je  	.1
15199                       00003679            .2:
15200                                           ! 1761   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
15201                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15202 3679           FF76         0E            push	$E[bp]
15203                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15204 367C           FF76         10            push	$10[bp]
15205                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15206 367F           FF76         0C            push	$C[bp]
15207                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15208 3682           8A46         12            mov	al,$12[bp]
15209                                           ! Debug: list unsigned char = al+0 (used reg = )
15210 3685           30E4                       xor	ah,ah
15211 3687           50                         push	ax
15212                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
15213 3688           8B46         12            mov	ax,$12[bp]
15214 368B           88E0                       mov	al,ah
15215 368D           30E4                       xor	ah,ah
15216                                           ! Debug: list unsigned int = ax+0 (used reg = )
15217 368F           50                         push	ax
15218                                           ! Debug: list * char = .3+0 (used reg = )
15219 3690           BB                   A1C4  mov	bx,#.3
15220 3693           53                         push	bx
15221                                           ! Debug: func () void = printf+0 (used reg = )
15222 3694           E8         4789            call	_printf
15223 3697           89EC                       mov	sp,bp
15224                                           !BCC_EOS
15225                                           ! 1762 }
15226                       00003699            .1:
15227 3699           5D                         pop	bp
15228 369A           C3                         ret
15229                                           ! 1763 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
15230                                           ! Register BX used in function int10_debugmsg
15231                                           ! 1764   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
15232                       0000369B            _int10_func:
15233                                           !BCC_EOS
15234                                           ! 1765 {
15235                                           ! 1766  switch(( AX >> 8 ))
15236 369B           55                         push	bp
15237 369C           89E5                       mov	bp,sp
15238                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
15239 369E           8B46         12            mov	ax,$12[bp]
15240 36A1           88E0                       mov	al,ah
15241 36A3           30E4                       xor	ah,ah
15242                                           ! 1767   {
15243 36A5           E9         04F6            br 	.6
15244                                           ! 1768    case 0x00:
15245                                           ! 1769      biosfn_set_video_mode(( AX & 0x00ff ));
15246                       000036A8            .7:
15247                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15248 36A8           8A46         12            mov	al,$12[bp]
15249                                           ! Debug: list unsigned char = al+0 (used reg = )
15250 36AB           30E4                       xor	ah,ah
15251 36AD           50                         push	ax
15252                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
15253 36AE           E8         0545            call	_biosfn_set_video_mode
15254 36B1           44                         inc	sp
15255 36B2           44                         inc	sp
15256                                           !BCC_EOS
15257                                           ! 1770      switch(( AX & 0x00ff )&0x7F)
15258                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15259 36B3           8A46         12            mov	al,$12[bp]
15260                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15261 36B6           24                     7F  and	al,*$7F
15262                                           ! 1771       {case 6:
15263 36B8           EB           24            jmp .A
15264                                           ! 1772         AX = ((AX & 0xff00) | (0x3F));
15265                       000036BA            .B:
15266                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15267 36BA           8B46         12            mov	ax,$12[bp]
15268 36BD           30C0                       xor	al,al
15269                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15270 36BF           0C                     3F  or	al,*$3F
15271                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15272 36C1           8946         12            mov	$12[bp],ax
15273                                           !BCC_EOS
15274                                           ! 1773         break;
15275 36C4           EB           3D            jmp .8
15276                                           !BCC_EOS
15277                                           ! 1774        case 0:
15278                                           ! 1775        case 1:
15279                       000036C6            .C:
15280                                           ! 1776        case 2:
15281                       000036C6            .D:
15282                                           ! 1777        case 3:
15283                       000036C6            .E:
15284                                           ! 1778        case 4:
15285                       000036C6            .F:
15286                                           ! 1779        case 5:
15287                       000036C6            .10:
15288                                           ! 1780        case 7:
15289                       000036C6            .11:
15290                                           ! 1781         AX = ((AX & 0xff00) | (0x30));
15291                       000036C6            .12:
15292                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15293 36C6           8B46         12            mov	ax,$12[bp]
15294 36C9           30C0                       xor	al,al
15295                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15296 36CB           0C                     30  or	al,*$30
15297                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15298 36CD           8946         12            mov	$12[bp],ax
15299                                           !BCC_EOS
15300                                           ! 1782         break;
15301 36D0           EB           31            jmp .8
15302                                           !BCC_EOS
15303                                           ! 1783       default:
15304                                           ! 1784         AX = ((AX & 0xff00) | (0x20));
15305                       000036D2            .13:
15306                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15307 36D2           8B46         12            mov	ax,$12[bp]
15308 36D5           30C0                       xor	al,al
15309                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15310 36D7           0C                     20  or	al,*$20
15311                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15312 36D9           8946         12            mov	$12[bp],ax
15313                                           !BCC_EOS
15314                                           ! 1785       }
15315                                           ! 1786      break;
15316 36DC           EB           25            jmp .8
15317                       000036DE            .A:
15318 36DE           2C                     00  sub	al,*0
15319 36E0           72           F0            jb 	.13
15320 36E2           3C                     07  cmp	al,*7
15321 36E4           77           1B            ja  	.14
15322 36E6           30E4                       xor	ah,ah
15323 36E8           D1E0                       shl	ax,*1
15324 36EA           89C3                       mov	bx,ax
15325 36EC           2E                         seg	cs
15326 36ED           FFA7       36F1            br	.15[bx]
15327                       000036F1            .15:
15328 36F1                      36C6            .word	.C
15329 36F3                      36C6            .word	.D
15330 36F5                      36C6            .word	.E
15331 36F7                      36C6            .word	.F
15332 36F9                      36C6            .word	.10
15333 36FB                      36C6            .word	.11
15334 36FD                      36BA            .word	.B
15335 36FF                      36C6            .word	.12
15336                       00003701            .14:
15337 3701           EB           CF            jmp	.13
15338                       00003703            .8:
15339 3703           E9         04EE            br 	.4
15340                                           !BCC_EOS
15341                                           ! 1787    case 0x01:
15342                                           ! 1788      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15343                       00003706            .16:
15344                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15345 3706           8A46         10            mov	al,$10[bp]
15346                                           ! Debug: list unsigned char = al+0 (used reg = )
15347 3709           30E4                       xor	ah,ah
15348 370B           50                         push	ax
15349                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15350 370C           8B46         10            mov	ax,$10[bp]
15351 370F           88E0                       mov	al,ah
15352 3711           30E4                       xor	ah,ah
15353                                           ! Debug: list unsigned int = ax+0 (used reg = )
15354 3713           50                         push	ax
15355                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15356 3714           E8         0B8C            call	_biosfn_set_cursor_shape
15357 3717           83C4                   04  add	sp,*4
15358                                           !BCC_EOS
15359                                           ! 1789      break;
15360 371A           E9         04D7            br 	.4
15361                                           !BCC_EOS
15362                                           ! 1790    case 0x02:
15363                                           ! 1791      biosfn_set_cursor
15364                                           ! 1791 _pos(( BX >> 8 ),DX);
15365                       0000371D            .17:
15366                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15367 371D           FF76         0E            push	$E[bp]
15368                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15369 3720           8B46         0C            mov	ax,$C[bp]
15370 3723           88E0                       mov	al,ah
15371 3725           30E4                       xor	ah,ah
15372                                           ! Debug: list unsigned int = ax+0 (used reg = )
15373 3727           50                         push	ax
15374                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15375 3728           E8         0C93            call	_biosfn_set_cursor_pos
15376 372B           83C4                   04  add	sp,*4
15377                                           !BCC_EOS
15378                                           ! 1792      break;
15379 372E           E9         04C3            br 	.4
15380                                           !BCC_EOS
15381                                           ! 1793    case 0x03:
15382                                           ! 1794      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15383                       00003731            .18:
15384                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15385 3731           8D5E         0E            lea	bx,$E[bp]
15386 3734           53                         push	bx
15387                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15388 3735           8D5E         10            lea	bx,$10[bp]
15389 3738           53                         push	bx
15390                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15391 3739           8B46         0C            mov	ax,$C[bp]
15392 373C           88E0                       mov	al,ah
15393 373E           30E4                       xor	ah,ah
15394                                           ! Debug: list unsigned int = ax+0 (used reg = )
15395 3740           50                         push	ax
15396                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15397 3741           E8         0D7A            call	_biosfn_get_cursor_pos
15398 3744           83C4                   06  add	sp,*6
15399                                           !BCC_EOS
15400                                           ! 1795      break;
15401 3747           E9         04AA            br 	.4
15402                                           !BCC_EOS
15403                                           ! 1796    case 0x04:
15404                                           ! 1797      unimplemented();
15405                       0000374A            .19:
15406                                           ! Debug: func () void = unimplemented+0 (used reg = )
15407 374A           E8         46B7            call	_unimplemented
15408                                           !BCC_EOS
15409                                           ! 1798      AX=0x00;
15410                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15411 374D           31C0                       xor	ax,ax
15412 374F           8946         12            mov	$12[bp],ax
15413                                           !BCC_EOS
15414                                           ! 1799      BX=0x00;
15415                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15416 3752           31C0                       xor	ax,ax
15417 3754           8946         0C            mov	$C[bp],ax
15418                                           !BCC_EOS
15419                                           ! 1800      CX=0x00;
15420                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15421 3757           31C0                       xor	ax,ax
15422 3759           8946         10            mov	$10[bp],ax
15423                                           !BCC_EOS
15424                                           ! 1801      DX=0x00;
15425                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15426 375C           31C0                       xor	ax,ax
15427 375E           8946         0E            mov	$E[bp],ax
15428                                           !BCC_EOS
15429                                           ! 1802      break;
15430 3761           E9         0490            br 	.4
15431                                           !BCC_EOS
15432                                           ! 1803    case 0x05:
15433                                           ! 1804      biosfn_set_active_page(( AX & 0x00ff ));
15434                       00003764            .1A:
15435                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15436 3764           8A46         12            mov	al,$12[bp]
15437                                           ! Debug: list unsigned char = al+0 (used reg = )
15438 3767           30E4                       xor	ah,ah
15439 3769           50                         push	ax
15440                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15441 376A           E8         0DC6            call	_biosfn_set_active_page
15442 376D           44                         inc	sp
15443 376E           44                         inc	sp
15444                                           !BCC_EOS
15445                                           ! 1805      break;
15446 376F           E9         0482            br 	.4
15447                                           !BCC_EOS
15448                                           ! 1806    case 0x06:
15449                                           ! 1807      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15450                       00003772            .1B:
15451                                           ! Debug: list int = const 1 (used reg = )
15452 3772           B8                   0001  mov	ax,*1
15453 3775           50                         push	ax
15454                                           ! Debug: list int = const $FF (used reg = )
15455 3776           B8                   00FF  mov	ax,#$FF
15456 3779           50                         push	ax
15457                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15458 377A           8A46         0E            mov	al,$E[bp]
15459                                           ! Debug: list unsigned char = al+0 (used reg = )
15460 377D           30E4                       xor	ah,ah
15461 377F           50                         push	ax
15462                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15463 3780           8B46         0E            mov	ax,$E[bp]
15464 3783           88E0                       mov	al,ah
15465 3785           30E4                       xor	ah,ah
15466                                           ! Debug: list unsigned int = ax+0 (used reg = )
15467 3787           50                         push	ax
15468                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15469 3788           8A46         10            mov	al,$10[bp]
15470                                           ! Debug: list unsigned char = al+0 (used reg = )
15471 378B           30E4                       xor	ah,ah
15472 378D           50                         push	ax
15473                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15474 378E           8B46         10            mov	ax,$10[bp]
15475 3791           88E0                       mov	al,ah
15476 3793           30E4                       xor	ah,ah
15477                                           ! Debug: list unsigned int = ax+0 (used reg = )
15478 3795           50                         push	ax
15479                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15480 3796           8B46         0C            mov	ax,$C[bp]
15481 3799           88E0                       mov	al,ah
15482 379B           30E4                       xor	ah,ah
15483                                           ! Debug: list unsigned int = ax+0 (used reg = )
15484 379D           50                         push	ax
15485                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15486 379E           8A46         12            mov	al,$12[bp]
15487                                           ! Debug: list unsigned char = al+0 (used reg = )
15488 37A1           30E4                       xor	ah,ah
15489 37A3           50                         push	ax
15490                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15491 37A4           E8         1222            call	_biosfn_scroll
15492 37A7           83C4                   10  add	sp,*$10
15493                                           !BCC_EOS
15494                                           ! 1808      break;
15495 37AA           E9         0447            br 	.4
15496                                           !BCC_EOS
15497                                           ! 1809    case 0x07:
15498                                           ! 1810      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15499                       000037AD            .1C:
15500                                           ! Debug: list int = const 0 (used reg = )
15501 37AD           31C0                       xor	ax,ax
15502 37AF           50                         push	ax
15503                                           ! Debug: list int = const $FF (used reg = )
15504 37B0           B8                   00FF  mov	ax,#$FF
15505 37B3           50                         push	ax
15506                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15507 37B4           8A46         0E            mov	al,$E[bp]
15508                                           ! Debug: list unsigned char = al+0 (used reg = )
15509 37B7           30E4                       xor	ah,ah
15510 37B9           50                         push	ax
15511                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15512 37BA           8B46         0E            mov	ax,$E[bp]
15513 37BD           88E0                       mov	al,ah
15514 37BF           30E4                       xor	ah,ah
15515                                           ! Debug: list unsigned int = ax+0 (used reg = )
15516 37C1           50                         push	ax
15517                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15518 37C2           8A46         10            mov	al,$10[bp]
15519                                           ! Debug: list unsigned char = al+0 (used reg = )
15520 37C5           30E4                       xor	ah,ah
15521 37C7           50                         push	ax
15522                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15523 37C8           8B46         10            mov	ax,$10[bp]
15524 37CB           88E0                       mov	al,ah
15525 37CD           30E4                       xor	ah,ah
15526                                           ! Debug: list unsigned int = ax+0 (used reg = )
15527 37CF           50                         push	ax
15528                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15529 37D0           8B46         0C            mov	ax,$C[bp]
15530 37D3           88E0                       mov	al,ah
15531 37D5           30E4                       xor	ah,ah
15532                                           ! Debug: list unsigned int = ax+0 (used reg = )
15533 37D7           50                         push	ax
15534                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15535 37D8           8A46         12            mov	al,$12[bp]
15536                                           ! Debug: list unsigned char = al+0 (used reg = )
15537 37DB           30E4                       xor	ah,ah
15538 37DD           50                         push	ax
15539                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15540 37DE           E8         11E8            call	_biosfn_scroll
15541 37E1           83C4                   10  add	sp,*$10
15542                                           !BCC_EOS
15543                                           ! 1811      break;
15544 37E4           E9         040D            br 	.4
15545                                           !BCC_EOS
15546                                           ! 1812    case 0x08:
15547                                           ! 1813      biosfn_read_char_attr(( BX >> 8 ),&AX);
15548                       000037E7            .1D:
15549                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15550 37E7           8D5E         12            lea	bx,$12[bp]
15551 37EA           53                         push	bx
15552                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15553 37EB           8B46         0C            mov	ax,$C[bp]
15554 37EE           88E0                       mov	al,ah
15555 37F0           30E4                       xor	ah,ah
15556                                           ! Debug: list unsigned int = ax+0 (used reg = )
15557 37F2           50                         push	ax
15558                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15559 37F3           E8         1900            call	_biosfn_read_char_attr
15560 37F6           83C4                   04  add	sp,*4
15561                                           !BCC_EOS
15562                                           ! 1814      break;
15563 37F9           E9         03F8            br 	.4
15564                                           !BCC_EOS
15565                                           ! 1815    case 0x09:
15566                                           ! 1816      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15567                       000037FC            .1E:
15568                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15569 37FC           FF76         10            push	$10[bp]
15570                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15571 37FF           8A46         0C            mov	al,$C[bp]
15572                                           ! Debug: list unsigned char = al+0 (used reg = )
15573 3802           30E4                       xor	ah,ah
15574 3804           50                         push	ax
15575                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15576 3805           8B46         0C            mov	ax,$C[bp]
15577 3808           88E0                       mov	al,ah
15578 380A           30E4                       xor	ah,ah
15579                                           ! Debug: list unsigned int = ax+0 (used reg = )
15580 380C           50                         push	ax
15581                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15582 380D           8A46         12            mov	al,$12[bp]
15583                                           ! Debug: list unsigned char = al+0 (used reg = )
15584 3810           30E4                       xor	ah,ah
15585 3812           50                         push	ax
15586                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15587 3813           E8         1E28            call	_biosfn_write_char_attr
15588 3816           83C4                   08  add	sp,*8
15589                                           !BCC_EOS
15590                                           ! 1817      break;
15591 3819           E9         03D8            br 	.4
15592                                           !BCC_EOS
15593                                           ! 1818    case 0x0A:
15594                                           ! 1819      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15595                       0000381C            .1F:
15596                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15597 381C           FF76         10            push	$10[bp]
15598                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15599 381F           8A46         0C            mov	al,$C[bp]
15600                                           ! Debug: list unsigned char = al+0 (used reg = )
15601 3822           30E4                       xor	ah,ah
15602 3824           50                         push	ax
15603                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15604 3825           8B46         0C            mov	ax,$C[bp]
15605 3828           88E0                       mov	al,ah
15606 382A           30E4                       xor	ah,ah
15607                                           ! Debug: list unsigned int = ax+0 (used reg = )
15608 382C           50                         push	ax
15609                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15610 382D           8A46         12            mov	al,$12[bp]
15611                                           ! Debug: list unsigned char = al+0 (used reg = )
15612 3830           30E4                       xor	ah,ah
15613 3832           50                         push	ax
15614                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15615 3833           E8         2001            call	_biosfn_write_char_only
15616 3836           83C4                   08  add	sp,*8
15617                                           !BCC_EOS
15618                                           ! 1820      break;
15619 3839           E9         03B8            br 	.4
15620                                           !BCC_EOS
15621                                           ! 1821    case 0x0C:
15622                                           ! 1822      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15623                       0000383C            .20:
15624                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15625 383C           FF76         0E            push	$E[bp]
15626                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15627 383F           FF76         10            push	$10[bp]
15628                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15629 3842           8A46         12            mov	al,$12[bp]
15630                                           ! Debug: list unsigned char = al+0 (used reg = )
15631 3845           30E4                       xor	ah,ah
15632 3847           50                         push	ax
15633                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15634 3848           8B46         0C            mov	ax,$C[bp]
15635 384B           88E0                       mov	al,ah
15636 384D           30E4                       xor	ah,ah
15637                                           ! Debug: list unsigned int = ax+0 (used reg = )
15638 384F           50                         push	ax
15639                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15640 3850           E8         225A            call	_biosfn_write_pixel
15641 3853           83C4                   08  add	sp,*8
15642                                           !BCC_EOS
15643                                           ! 1823      break;
15644 3856           E9         039B            br 	.4
15645                                           !BCC_EOS
15646                                           ! 1824    case 0x0D:
15647                                           ! 1825      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15648                       00003859            .21:
15649                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15650 3859           8D5E         12            lea	bx,$12[bp]
15651 385C           53                         push	bx
15652                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15653 385D           FF76         0E            push	$E[bp]
15654                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15655 3860           FF76         10            push	$10[bp]
15656                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15657 3863           8B46         0C            mov	ax,$C[bp]
15658 3866           88E0                       mov	al,ah
15659 3868           30E4                       xor	ah,ah
15660                                           ! Debug: list unsigned int = ax+0 (used reg = )
15661 386A           50                         push	ax
15662                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15663 386B           E8         24E0            call	_biosfn_read_pixel
15664 386E           83C4                   08  add	sp,*8
15665                                           !BCC_EOS
15666                                           ! 1826      break;
15667 3871           E9         0380            br 	.4
15668                                           !BCC_EOS
15669                                           ! 1827    case 0x0E:
15670                                           ! 1828      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15671                       00003874            .22:
15672                                           ! Debug: list int = const 2 (used reg = )
15673 3874           B8                   0002  mov	ax,*2
15674 3877           50                         push	ax
15675                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15676 3878           8A46         0C            mov	al,$C[bp]
15677                                           ! Debug: list unsigned char = al+0 (used reg = )
15678 387B           30E4                       xor	ah,ah
15679 387D           50                         push	ax
15680                                           ! Debug: list int = const $FF (used reg = )
15681 387E           B8                   00FF  mov	ax,#$FF
15682 3881           50                         push	ax
15683                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15684 3882           8A46         12            mov	al,$12[bp]
15685                                           ! Debug: list unsigned char = al+0 (used reg = )
15686 3885           30E4                       xor	ah,ah
15687 3887           50                         push	ax
15688                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15689 3888           E8         26CC            call	_biosfn_write_teletype
15690 388B           83C4                   08  add	sp,*8
15691                                           !BCC_EOS
15692                                           ! 1829      break;
15693 388E           E9         0363            br 	.4
15694                                           !BCC_EOS
15695                                           ! 1830    case 0x10:
15696                                           ! 1831      biosfn_perform_gray_scale_summing(BX,CX);
15697                       00003891            .23:
15698                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15699 3891           FF76         10            push	$10[bp]
15700                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15701 3894           FF76         0C            push	$C[bp]
15702                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15703 3897           E8         2D15            call	_biosfn_perform_gray_scale_summing
15704 389A           83C4                   04  add	sp,*4
15705                                           !BCC_EOS
15706                                           ! 1832      break;
15707 389D           E9         0354            br 	.4
15708                                           !BCC_EOS
15709                                           ! 1833    case 0x11:
15710                                           ! 1834      switch(( AX & 0x00ff ))
15711                       000038A0            .24:
15712                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15713 38A0           8A46         12            mov	al,$12[bp]
15714                                           ! 1835       {
15715 38A3           E9         00E4            br 	.27
15716                                           ! 1836        case 0x00:
15717                                           ! 1837        case 0x10:
15718                       000038A6            .28:
15719                                           ! 1838         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15720                       000038A6            .29:
15721                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15722 38A6           8B46         0C            mov	ax,$C[bp]
15723 38A9           88E0                       mov	al,ah
15724 38AB           30E4                       xor	ah,ah
15725                                           ! Debug: list unsigned int = ax+0 (used reg = )
15726 38AD           50                         push	ax
15727                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15728 38AE           8A46         0C            mov	al,$C[bp]
15729                                           ! Debug: list unsigned char = al+0 (used reg = )
15730 38B1           30E4                       xor	ah,ah
15731 38B3           50                         push	ax
15732                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15733 38B4           FF76         0E            push	$E[bp]
15734                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15735 38B7           FF76         10            push	$10[bp]
15736                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15737 38BA           FF76         08            push	8[bp]
15738                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15739 38BD           FF76         16            push	$16[bp]
15740                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15741 38C0           8A46         12            mov	al,$12[bp]
15742                                           ! Debug: list unsigned char = al+0 (used reg = )
15743 38C3           30E4                       xor	ah,ah
15744 38C5           50                         push	ax
15745                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15746 38C6           E8         2F8D            call	_biosfn_load_text_user_pat
15747 38C9           83C4                   0E  add	sp,*$E
15748                                           !BCC_EOS
15749                                           ! 1839         break;
15750 38CC           E9         0111            br 	.25
15751                                           !BCC_EOS
15752                                           ! 1840        case 0x01:
15753                                           ! 1841        case 0x11:
15754                       000038CF            .2A:
15755                                           ! 1842         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15756                       000038CF            .2B:
15757                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15758 38CF           8A46         0C            mov	al,$C[bp]
15759                                           ! Debug: list unsigned char = al+0 (used reg = )
15760 38D2           30E4                       xor	ah,ah
15761 38D4           50                         push	ax
15762                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15763 38D5           8A46         12            mov	al,$12[bp]
15764                                           ! Debug: list unsigned char = al+0 (used reg = )
15765 38D8           30E4                       xor	ah,ah
15766 38DA           50                         push	ax
15767                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15768 38DB           E8         3014            call	_biosfn_load_text_8_14_pat
15769 38DE           83C4                   04  add	sp,*4
15770                                           !BCC_EOS
15771                                           ! 1843         break;
15772 38E1           E9         00FC            br 	.25
15773                                           !BCC_EOS
15774                                           ! 1844        case 0x02:
15775                                           ! 1845        case 0x12:
15776                       000038E4            .2C:
15777                                           ! 1846         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15778                       000038E4            .2D:
15779                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15780 38E4           8A46         0C            mov	al,$C[bp]
15781                                           ! Debug: list unsigned char = al+0 (used reg = )
15782 38E7           30E4                       xor	ah,ah
15783 38E9           50                         push	ax
15784                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15785 38EA           8A46         12            mov	al,$12[bp]
15786                                           ! Debug: list unsigned char = al+0 (used reg = )
15787 38ED           30E4                       xor	ah,ah
15788 38EF           50                         push	ax
15789                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15790 38F0           E8         3096            call	_biosfn_load_text_8_8_pat
15791 38F3           83C4                   04  add	sp,*4
15792                                           !BCC_EOS
15793                                           ! 1847         break;
15794 38F6           E9         00E7            br 	.25
15795                                           !BCC_EOS
15796                                           ! 1848        case 0x04:
15797                                           ! 1849        case 0x14:
15798                       000038F9            .2E:
15799                                           ! 1850         biosfn_load_text_8_16_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15800                       000038F9            .2F:
15801                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15802 38F9           8A46         0C            mov	al,$C[bp]
15803                                           ! Debug: list unsigned char = al+0 (used reg = )
15804 38FC           30E4                       xor	ah,ah
15805 38FE           50                         push	ax
15806                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15807 38FF           8A46         12            mov	al,$12[bp]
15808                                           ! Debug: list unsigned char = al+0 (used reg = )
15809 3902           30E4                       xor	ah,ah
15810 3904           50                         push	ax
15811                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15812 3905           E8         311F            call	_biosfn_load_text_8_16_pat
15813 3908           83C4                   04  add	sp,*4
15814                                           !BCC_EOS
15815                                           ! 1851         break;
15816 390B           E9         00D2            br 	.25
15817                                           !BCC_EOS
15818                                           ! 1852        case 0x20:
15819                                           ! 1853         biosfn_load_gfx_8_8_chars(ES,BP);
15820                       0000390E            .30:
15821                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15822 390E           FF76         08            push	8[bp]
15823                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15824 3911           FF76         16            push	$16[bp]
15825                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15826 3914           E8         31A1            call	_biosfn_load_gfx_8_8_chars
15827 3917           83C4                   04  add	sp,*4
15828                                           !BCC_EOS
15829                                           ! 1854         break;
15830 391A           E9         00C3            br 	.25
15831                                           !BCC_EOS
15832                                           ! 1855        case 0x21:
15833                                           ! 1856         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15834                       0000391D            .31:
15835                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15836 391D           8A46         0E            mov	al,$E[bp]
15837                                           ! Debug: list unsigned char = al+0 (used reg = )
15838 3920           30E4                       xor	ah,ah
15839 3922           50                         push	ax
15840                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15841 3923           8A46         0C            mov	al,$C[bp]
15842                                           ! Debug: list unsigned char = al+0 (used reg = )
15843 3926           30E4                       xor	ah,ah
15844 3928           50                         push	ax
15845                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15846 3929           FF76         10            push	$10[bp]
15847                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15848 392C           FF76         08            push	8[bp]
15849                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15850 392F           FF76         16            push	$16[bp]
15851                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15852 3932           E8         318B            call	_biosfn_load_gfx_user_chars
15853 3935           83C4                   0A  add	sp,*$A
15854                                           !BCC_EOS
15855                                           ! 1857         break;
15856 3938           E9         00A5            br 	.25
15857                                           !BCC_EOS
15858                                           ! 1858        case 0x22:
15859                                           ! 1859         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15860                       0000393B            .32:
15861                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15862 393B           8A46         0C            mov	al,$C[bp]
15863                                           ! Debug: list unsigned char = al+0 (used reg = )
15864 393E           30E4                       xor	ah,ah
15865 3940           50                         push	ax
15866                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15867 3941           E8         3184            call	_biosfn_load_gfx_8_14_chars
15868 3944           44                         inc	sp
15869 3945           44                         inc	sp
15870                                           !BCC_EOS
15871                                           ! 1860         break;
15872 3946           E9         0097            br 	.25
15873                                           !BCC_EOS
15874                                           ! 1861        case 0x23:
15875                                           ! 1862         biosfn_load_gfx_8_8_dd_chars(( BX & 
15876                       00003949            .33:
15877                                           ! 1862 0x00ff ));
15878                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15879 3949           8A46         0C            mov	al,$C[bp]
15880                                           ! Debug: list unsigned char = al+0 (used reg = )
15881 394C           30E4                       xor	ah,ah
15882 394E           50                         push	ax
15883                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15884 394F           E8         317E            call	_biosfn_load_gfx_8_8_dd_chars
15885 3952           44                         inc	sp
15886 3953           44                         inc	sp
15887                                           !BCC_EOS
15888                                           ! 1863         break;
15889 3954           E9         0089            br 	.25
15890                                           !BCC_EOS
15891                                           ! 1864        case 0x24:
15892                                           ! 1865         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15893                       00003957            .34:
15894                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15895 3957           8A46         0C            mov	al,$C[bp]
15896                                           ! Debug: list unsigned char = al+0 (used reg = )
15897 395A           30E4                       xor	ah,ah
15898 395C           50                         push	ax
15899                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15900 395D           E8         3178            call	_biosfn_load_gfx_8_16_chars
15901 3960           44                         inc	sp
15902 3961           44                         inc	sp
15903                                           !BCC_EOS
15904                                           ! 1866         break;
15905 3962           E9         007B            br 	.25
15906                                           !BCC_EOS
15907                                           ! 1867        case 0x30:
15908                                           ! 1868         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15909                       00003965            .35:
15910                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15911 3965           8D5E         0E            lea	bx,$E[bp]
15912 3968           53                         push	bx
15913                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15914 3969           8D5E         10            lea	bx,$10[bp]
15915 396C           53                         push	bx
15916                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15917 396D           8D5E         08            lea	bx,8[bp]
15918 3970           53                         push	bx
15919                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15920 3971           8D5E         16            lea	bx,$16[bp]
15921 3974           53                         push	bx
15922                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15923 3975           8B46         0C            mov	ax,$C[bp]
15924 3978           88E0                       mov	al,ah
15925 397A           30E4                       xor	ah,ah
15926                                           ! Debug: list unsigned int = ax+0 (used reg = )
15927 397C           50                         push	ax
15928                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15929 397D           E8         3160            call	_biosfn_get_font_info
15930 3980           83C4                   0A  add	sp,*$A
15931                                           !BCC_EOS
15932                                           ! 1869         break;
15933 3983           EB           5B            jmp .25
15934                                           !BCC_EOS
15935                                           ! 1870        default:
15936                                           ! 1871         unknown();
15937                       00003985            .36:
15938                                           ! Debug: func () void = unknown+0 (used reg = )
15939 3985           E8         448A            call	_unknown
15940                                           !BCC_EOS
15941                                           ! 1872       }
15942                                           ! 1873      break;
15943 3988           EB           56            jmp .25
15944                       0000398A            .27:
15945 398A           2C                     00  sub	al,*0
15946 398C         0F84         FF16            beq 	.28
15947 3990           2C                     01  sub	al,*1
15948 3992         0F84         FF39            beq 	.2A
15949 3996           2C                     01  sub	al,*1
15950 3998         0F84         FF48            beq 	.2C
15951 399C           2C                     02  sub	al,*2
15952 399E         0F84         FF57            beq 	.2E
15953 39A2           2C                     0C  sub	al,*$C
15954 39A4         0F84         FEFE            beq 	.29
15955 39A8           2C                     01  sub	al,*1
15956 39AA         0F84         FF21            beq 	.2B
15957 39AE           2C                     01  sub	al,*1
15958 39B0         0F84         FF30            beq 	.2D
15959 39B4           2C                     02  sub	al,*2
15960 39B6         0F84         FF3F            beq 	.2F
15961 39BA           2C                     0C  sub	al,*$C
15962 39BC         0F84         FF4E            beq 	.30
15963 39C0           2C                     01  sub	al,*1
15964 39C2         0F84         FF57            beq 	.31
15965 39C6           2C                     01  sub	al,*1
15966 39C8         0F84         FF6F            beq 	.32
15967 39CC           2C                     01  sub	al,*1
15968 39CE         0F84         FF77            beq 	.33
15969 39D2           2C                     01  sub	al,*1
15970 39D4         0F84         FF7F            beq 	.34
15971 39D8           2C                     0C  sub	al,*$C
15972 39DA         0F84         FF87            beq 	.35
15973 39DE           EB           A5            jmp	.36
15974                       000039E0            .25:
15975 39E0           E9         0211            br 	.4
15976                                           !BCC_EOS
15977                                           ! 1874    case 0x12:
15978                                           ! 1875      switch(( BX & 0x00ff ))
15979                       000039E3            .37:
15980                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15981 39E3           8A46         0C            mov	al,$C[bp]
15982                                           ! 1876       {
15983 39E6           EB           3F            jmp .3A
15984                                           ! 1877        case 0x20:
15985                                           ! 1878         biosfn_alternate_prtsc();
15986                       000039E8            .3B:
15987                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15988 39E8           E8         32E0            call	_biosfn_alternate_prtsc
15989                                           !BCC_EOS
15990                                           ! 1879         break;
15991 39EB           EB           48            jmp .38
15992                                           !BCC_EOS
15993                                           ! 1880        case 0x35:
15994                                           ! 1881         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15995                       000039ED            .3C:
15996                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15997 39ED           FF76         0E            push	$E[bp]
15998                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15999 39F0           FF76         16            push	$16[bp]
16000                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
16001 39F3           8A46         12            mov	al,$12[bp]
16002                                           ! Debug: list unsigned char = al+0 (used reg = )
16003 39F6           30E4                       xor	ah,ah
16004 39F8           50                         push	ax
16005                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
16006 39F9           E8         33E6            call	_biosfn_switch_video_interface
16007 39FC           83C4                   06  add	sp,*6
16008                                           !BCC_EOS
16009                                           ! 1882         AX = ((AX & 0xff00) | (0x12));
16010                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16011 39FF           8B46         12            mov	ax,$12[bp]
16012 3A02           30C0                       xor	al,al
16013                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16014 3A04           0C                     12  or	al,*$12
16015                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16016 3A06           8946         12            mov	$12[bp],ax
16017                                           !BCC_EOS
16018                                           ! 1883         break;
16019 3A09           EB           2A            jmp .38
16020                                           !BCC_EOS
16021                                           ! 1884        case 0x36:
16022                                           ! 1885         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
16023                       00003A0B            .3D:
16024                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16025 3A0B           8A46         12            mov	al,$12[bp]
16026                                           ! Debug: list unsigned char = al+0 (used reg = )
16027 3A0E           30E4                       xor	ah,ah
16028 3A10           50                         push	ax
16029                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
16030 3A11           E8         33D6            call	_biosfn_enable_video_refresh_control
16031 3A14           44                         inc	sp
16032 3A15           44                         inc	sp
16033                                           !BCC_EOS
16034                                           ! 1886         AX = ((AX & 0xff00) | (0x12));
16035                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16036 3A16           8B46         12            mov	ax,$12[bp]
16037 3A19           30C0                       xor	al,al
16038                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
16039 3A1B           0C                     12  or	al,*$12
16040                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16041 3A1D           8946         12            mov	$12[bp],ax
16042                                           !BCC_EOS
16043                                           ! 1887         break;
16044 3A20           EB           13            jmp .38
16045                                           !BCC_EOS
16046                                           ! 1888        default:
16047                                           ! 1889         unknown();
16048                       00003A22            .3E:
16049                                           ! Debug: func () void = unknown+0 (used reg = )
16050 3A22           E8         43ED            call	_unknown
16051                                           !BCC_EOS
16052                                           ! 1890       }
16053                                           ! 1891      break;
16054 3A25           EB           0E            jmp .38
16055                       00003A27            .3A:
16056 3A27           2C                     20  sub	al,*$20
16057 3A29           74           BD            je 	.3B
16058 3A2B           2C                     15  sub	al,*$15
16059 3A2D           74           BE            je 	.3C
16060 3A2F           2C                     01  sub	al,*1
16061 3A31           74           D8            je 	.3D
16062 3A33           EB           ED            jmp	.3E
16063                       00003A35            .38:
16064 3A35           E9         01BC            br 	.4
16065                                           !BCC_EOS
16066                                           ! 1892    case 0x13:
16067                                           ! 1893      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
16068                       00003A38            .3F:
16069                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
16070 3A38           FF76         08            push	8[bp]
16071                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16072 3A3B           FF76         16            push	$16[bp]
16073                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
16074 3A3E           8A46         0E            mov	al,$E[bp]
16075                                           ! Debug: list unsigned char = al+0 (used reg = )
16076 3A41           30E4                       xor	ah,ah
16077 3A43           50                         push	ax
16078                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
16079 3A44           8B46         0E            mov	ax,$E[bp]
16080 3A47           88E0                       mov	al,ah
16081 3A49           30E4                       xor	ah,ah
16082                                           ! Debug: list unsigned int = ax+0 (used reg = )
16083 3A4B           50                         push	ax
16084                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
16085 3A4C           FF76         10            push	$10[bp]
16086                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
16087 3A4F           8A46         0C            mov	al,$C[bp]
16088                                           ! Debug: list unsigned char = al+0 (used reg = )
16089 3A52           30E4                       xor	ah,ah
16090 3A54           50                         push	ax
16091                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
16092 3A55           8B46         0C            mov	ax,$C[bp]
16093 3A58           88E0                       mov	al,ah
16094 3A5A           30E4                       xor	ah,ah
16095                                           ! Debug: list unsigned int = ax+0 (used reg = )
16096 3A5C           50                         push	ax
16097                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
16098 3A5D           8A46         12            mov	al,$12[bp]
16099                                           ! Debug: list unsigned char = al+0 (used reg = )
16100 3A60           30E4                       xor	ah,ah
16101 3A62           50                         push	ax
16102                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
16103 3A63           E8         338C            call	_biosfn_write_string
16104 3A66           83C4                   10  add	sp,*$10
16105                                           !BCC_EOS
16106                                           ! 1894      break;
16107 3A69           E9         0188            br 	.4
16108                                           !BCC_EOS
16109                                           ! 1895    case 0x1B:
16110                                           ! 1896      biosfn_read_state_info(BX,ES,DI);
16111                       00003A6C            .40:
16112                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16113 3A6C           FF76         04            push	4[bp]
16114                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16115 3A6F           FF76         16            push	$16[bp]
16116                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16117 3A72           FF76         0C            push	$C[bp]
16118                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
16119 3A75           E8         34C6            call	_biosfn_read_state_info
16120 3A78           83C4                   06  add	sp,*6
16121                                           !BCC_EOS
16122                                           ! 1897      AX = ((AX & 0xff00) | (0x1B));
16123                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16124 3A7B           8B46         12            mov	ax,$12[bp]
16125 3A7E           30C0                       xor	al,al
16126                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
16127 3A80           0C                     1B  or	al,*$1B
16128                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16129 3A82           8946         12            mov	$12[bp],ax
16130                                           !BCC_EOS
16131                                           ! 1898      break;
16132 3A85           E9         016C            br 	.4
16133                                           !BCC_EOS
16134                                           ! 1899    case 0x1C:
16135                                           ! 1900      switch(( AX & 0x00ff ))
16136                       00003A88            .41:
16137                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16138 3A88           8A46         12            mov	al,$12[bp]
16139                                           ! 1901       {
16140 3A8B           EB           36            jmp .44
16141                                           ! 1902        case 0x00:
16142                                           ! 1903         biosfn_read_video_state_size(CX,&BX);
16143                       00003A8D            .45:
16144                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16145 3A8D           8D5E         0C            lea	bx,$C[bp]
16146 3A90           53                         push	bx
16147                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
16148 3A91           FF76         10            push	$10[bp]
16149                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
16150 3A94           E8         3626            call	_biosfn_read_video_state_size
16151 3A97           83C4                   04  add	sp,*4
16152                                           !BCC_EOS
16153                                           ! 1904         break;
16154 3A9A           EB           35            jmp .42
16155                                           !BCC_EOS
16156                                           ! 1905        case 0x01:
16157                                           ! 1906         biosfn_save_video_state(CX,ES,BX);
16158                       00003A9C            .46:
16159                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16160 3A9C           FF76         0C            push	$C[bp]
16161                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16162 3A9F           FF76         16            push	$16[bp]
16163                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16164 3AA2           FF76         10            push	$10[bp]
16165                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
16166 3AA5           E8         3639            call	_biosfn_save_video_state
16167 3AA8           83C4                   06  add	sp,*6
16168                                           !BCC_EOS
16169                                           ! 1907         break;
16170 3AAB           EB           24            jmp .42
16171                                           !BCC_EOS
16172                                           ! 1908        case 0x02:
16173                                           ! 1909         biosfn_restore_video_state(CX,ES,BX);
16174                       00003AAD            .47:
16175                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
16176 3AAD           FF76         0C            push	$C[bp]
16177                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16178 3AB0           FF76         16            push	$16[bp]
16179                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16180 3AB3           FF76         10            push	$10[bp]
16181                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
16182 3AB6           E8         3BF2            call	_biosfn_restore_video_state
16183 3AB9           83C4                   06  add	sp,*6
16184                                           !BCC_EOS
16185                                           ! 1910         break;
16186 3ABC           EB           13            jmp .42
16187                                           !BCC_EOS
16188                                           ! 1911        default:
16189                                           ! 1912         unknown();
16190                       00003ABE            .48:
16191                                           ! Debug: func () void = unknown+0 (used reg = )
16192 3ABE           E8         4351            call	_unknown
16193                                           !BCC_EOS
16194                                           ! 1913       }
16195                                           ! 1914      AX = ((AX & 0xff00) | (0x1C));
16196 3AC1           EB           0E            jmp .42
16197                       00003AC3            .44:
16198 3AC3           2C                     00  sub	al,*0
16199 3AC5           74           C6            je 	.45
16200 3AC7           2C                     01  sub	al,*1
16201 3AC9           74           D1            je 	.46
16202 3ACB           2C                     01  sub	al,*1
16203 3ACD           74           DE            je 	.47
16204 3ACF           EB           ED            jmp	.48
16205                       00003AD1            .42:
16206                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
16207 3AD1           8B46         12            mov	ax,$12[bp]
16208 3AD4           30C0                       xor	al,al
16209                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
16210 3AD6           0C                     1C  or	al,*$1C
16211                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
16212 3AD8           8946         12            mov	$12[bp],ax
16213                                           !BCC_EOS
16214                                           ! 1915      break;
16215 3ADB           E9         0116            br 	.4
16216                                           !BCC_EOS
16217                                           ! 1916    case 0x4f:
16218                                           ! 1917      if (vbe_has_vbe_display()) {
16219                       00003ADE            .49:
16220                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16221 3ADE           E8         5A87            call	_vbe_has_vbe_display
16222 3AE1           85C0                       test	ax,ax
16223 3AE3         0F84         00AA            beq 	.4A
16224                       00003AE7            .4B:
16225                                           ! 1918        switch(( AX & 0x00ff ))
16226                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
16227 3AE7           8A46         12            mov	al,$12[bp]
16228                                           ! 1919        {
16229 3AEA           E9         0077            br 	.4E
16230                                           ! 1920          case 0x00:
16231                                           ! 1921           vbe_biosfn_return_controller_information(&AX,ES,DI);
16232                       00003AED            .4F:
16233                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16234 3AED           FF76         04            push	4[bp]
16235                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16236 3AF0           FF76         16            push	$16[bp]
16237                                           ! Debug: list * unsigned short AX = S+6+$10 (used reg = )
16238 3AF3           8D5E         12            lea	bx,$12[bp]
16239 3AF6           53                         push	bx
16240                                           ! Debug: func () void = vbe_biosfn_return_controller_information+0 (used reg = )
16241 3AF7           E8         5AE5            call	_vbe_biosfn_return_controller_information
16242 3AFA           83C4                   06  add	sp,*6
16243                                           !BCC_EOS
16244                                           ! 1922           break;
16245 3AFD           E9         008F            br 	.4C
16246                                           !BCC_EOS
16247                                           ! 1923          case 0x01:
16248                                           ! 1924           vbe_biosfn_return_mode_information(&AX,CX,ES,DI);
16249                       00003B00            .50:
16250                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16251 3B00           FF76         04            push	4[bp]
16252                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16253 3B03           FF76         16            push	$16[bp]
16254                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
16255 3B06           FF76         10            push	$10[bp]
16256                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16257 3B09           8D5E         12            lea	bx,$12[bp]
16258 3B0C           53                         push	bx
16259                                           ! Debug: func () void = vbe_biosfn_return_mode_information+0 (used reg = )
16260 3B0D           E8         5D79            call	_vbe_biosfn_return_mode_information
16261 3B10           83C4                   08  add	sp,*8
16262                                           !BCC_EOS
16263                                           ! 1925           break;
16264 3B13           EB           7A            jmp .4C
16265                                           !BCC_EOS
16266                                           ! 1926          case 0x02:
16267                                           ! 1927           vbe_biosfn_set_mode(&AX,BX,ES,DI);
16268                       00003B15            .51:
16269                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
16270 3B15           FF76         04            push	4[bp]
16271                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16272 3B18           FF76         16            push	$16[bp]
16273                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
16274 3B1B           FF76         0C            push	$C[bp]
16275                                           ! Debug: list * unsigned short AX = S+8+$10 (used reg = )
16276 3B1E           8D5E         12            lea	bx,$12[bp]
16277 3B21           53                         push	bx
16278                                           ! Debug: func () void = vbe_biosfn_set_mode+0 (used reg = )
16279 3B22           E8         5EAD            call	_vbe_biosfn_set_mode
16280 3B25           83C4                   08  add	sp,*8
16281                                           !BCC_EOS
16282                                           ! 1928           break;
16283 3B28           EB           65            jmp .4C
16284                                           !BCC_EOS
16285                                           ! 1929          case 0x04:
16286                                           ! 1930           vbe_biosfn_save_restore_state(&AX, CX, DX, ES, &BX);
16287                       00003B2A            .52:
16288                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
16289 3B2A           8D5E         0C            lea	bx,$C[bp]
16290 3B2D           53                         push	bx
16291                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
16292 3B2E           FF76         16            push	$16[bp]
16293                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
16294 3B31           FF76         0E            push	$E[bp]
16295                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
16296 3B34           FF76         10            push	$10[bp]
16297                                           ! Debug: list * unsigned short AX = S+$A+$10 (used reg = )
16298 3B37           8D5E         12            lea	bx,$12[bp]
16299 3B3A           53                         push	bx
16300                                           ! Debug: func () void = vbe_biosfn_save_restore_state+0 (used reg = )
16301 3B3B           E8         6201            call	_vbe_biosfn_save_restore_state
16302 3B3E           83C4                   0A  add	sp,*$A
16303                                           !BCC_EOS
16304                                           ! 1931           break;
16305 3B41           EB           4C            jmp .4C
16306                                           !BCC_EOS
16307                                           ! 1932          case 0x09:
16308                                           ! 1933           unimplemented();
16309                       00003B43            .53:
16310                                           ! Debug: func () void = unimplemented+0 (used reg = )
16311 3B43           E8         42BE            call	_unimplemented
16312                                           !BCC_EOS
16313                                           ! 1934           AX=0x100;
16314                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16315 3B46           B8                   0100  mov	ax,#$100
16316 3B49           8946         12            mov	$12[bp],ax
16317                                           !BCC_EOS
16318                                           ! 1935           break;
16319 3B4C           EB           41            jmp .4C
16320                                           !BCC_EOS
16321                                           ! 1936          case 0x0A:
16322                                           ! 1937           unimplemented();
16323                       00003B4E            .54:
16324                                           ! Debug: func () void = unimplemented+0 (used reg = )
16325 3B4E           E8         42B3            call	_unimplemented
16326                                           !BCC_EOS
16327                                           ! 1938           AX=0x100;
16328                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16329 3B51           B8                   0100  mov	ax,#$100
16330 3B54           8946         12            mov	$12[bp],ax
16331                                           !BCC_EOS
16332                                           ! 1939           break;
16333 3B57           EB           36            jmp .4C
16334                                           !BCC_EOS
16335                                           ! 1940          default:
16336                                           ! 1941           unknown();
16337                       00003B59            .55:
16338                                           ! Debug: func () void = unknown+0 (used reg = )
16339 3B59           E8         42B6            call	_unknown
16340                                           !BCC_EOS
16341                                           ! 1942           AX=0x100;
16342                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16343 3B5C           B8                   0100  mov	ax,#$100
16344 3B5F           8946         12            mov	$12[bp],ax
16345                                           !BCC_EOS
16346                                           ! 1943           }
16347                                           ! 1944         }
16348 3B62           EB           2B            jmp .4C
16349                       00003B64            .4E:
16350 3B64           2C                     00  sub	al,*0
16351 3B66           72           F1            jb 	.55
16352 3B68           3C                     0A  cmp	al,*$A
16353 3B6A           77           21            ja  	.56
16354 3B6C           30E4                       xor	ah,ah
16355 3B6E           D1E0                       shl	ax,*1
16356 3B70           89C3                       mov	bx,ax
16357 3B72           2E                         seg	cs
16358 3B73           FFA7       3B77            br	.57[bx]
16359                       00003B77            .57:
16360 3B77                      3AED            .word	.4F
16361 3B79                      3B00            .word	.50
16362 3B7B                      3B15            .word	.51
16363 3B7D                      3B59            .word	.55
16364 3B7F                      3B2A            .word	.52
16365 3B81                      3B59            .word	.55
16366 3B83                      3B59            .word	.55
16367 3B85                      3B59            .word	.55
16368 3B87                      3B59            .word	.55
16369 3B89                      3B43            .word	.53
16370 3B8B                      3B4E            .word	.54
16371                       00003B8D            .56:
16372 3B8D           EB           CA            jmp	.55
16373                       00003B8F            .4C:
16374                                           ! 1945         else {
16375 3B8F           EB           06            jmp .58
16376                       00003B91            .4A:
16377                                           ! 1946       
16378                                           ! 1946     AX=0x0100;
16379                                           ! Debug: eq int = const $100 to unsigned short AX = [S+2+$10] (used reg = )
16380 3B91           B8                   0100  mov	ax,#$100
16381 3B94           8946         12            mov	$12[bp],ax
16382                                           !BCC_EOS
16383                                           ! 1947           }
16384                                           ! 1948         break;
16385                       00003B97            .58:
16386 3B97           EB           5B            jmp .4
16387                                           !BCC_EOS
16388                                           ! 1949    default:
16389                                           ! 1950      unknown();
16390                       00003B99            .59:
16391                                           ! Debug: func () void = unknown+0 (used reg = )
16392 3B99           E8         4276            call	_unknown
16393                                           !BCC_EOS
16394                                           ! 1951   }
16395                                           ! 1952 }
16396 3B9C           EB           56            jmp .4
16397                       00003B9E            .6:
16398 3B9E           2D                   0000  sub	ax,*0
16399 3BA1           7C           F6            jl 	.59
16400 3BA3           3D                   001C  cmp	ax,*$1C
16401 3BA6           77           43            ja  	.5A
16402 3BA8           D1E0                       shl	ax,*1
16403 3BAA           89C3                       mov	bx,ax
16404 3BAC           2E                         seg	cs
16405 3BAD           FFA7       3BB1            br	.5B[bx]
16406                       00003BB1            .5B:
16407 3BB1                      36A8            .word	.7
16408 3BB3                      3706            .word	.16
16409 3BB5                      371D            .word	.17
16410 3BB7                      3731            .word	.18
16411 3BB9                      374A            .word	.19
16412 3BBB                      3764            .word	.1A
16413 3BBD                      3772            .word	.1B
16414 3BBF                      37AD            .word	.1C
16415 3BC1                      37E7            .word	.1D
16416 3BC3                      37FC            .word	.1E
16417 3BC5                      381C            .word	.1F
16418 3BC7                      3B99            .word	.59
16419 3BC9                      383C            .word	.20
16420 3BCB                      3859            .word	.21
16421 3BCD                      3874            .word	.22
16422 3BCF                      3B99            .word	.59
16423 3BD1                      3891            .word	.23
16424 3BD3                      38A0            .word	.24
16425 3BD5                      39E3            .word	.37
16426 3BD7                      3A38            .word	.3F
16427 3BD9                      3B99            .word	.59
16428 3BDB                      3B99            .word	.59
16429 3BDD                      3B99            .word	.59
16430 3BDF                      3B99            .word	.59
16431 3BE1                      3B99            .word	.59
16432 3BE3                      3B99            .word	.59
16433 3BE5                      3B99            .word	.59
16434 3BE7                      3A6C            .word	.40
16435 3BE9                      3A88            .word	.41
16436                       00003BEB            .5A:
16437 3BEB           2D                   004F  sub	ax,*$4F
16438 3BEE         0F84         FEEC            beq 	.49
16439 3BF2           EB           A5            jmp	.59
16440                       00003BF4            .4:
16441                       FFFFFFFE            ..FFFF	=	-2
16442 3BF4           5D                         pop	bp
16443 3BF5           C3                         ret
16444                                           ! 1953 static void biosfn_set_video_mode(mode) Bit8u mode;
16445                                           ! Register BX used in function int10_func
16446                       00003BF6            _biosfn_set_video_mode:
16447                                           !BCC_EOS
16448                                           ! 1954 {
16449                                           ! 1955  Bit8u noclearmem=mode&0x80;
16450 3BF6           55                         push	bp
16451 3BF7           89E5                       mov	bp,sp
16452 3BF9           4C                         dec	sp
16453                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16454 3BFA           8A46         04            mov	al,4[bp]
16455 3BFD           24                     80  and	al,#$80
16456                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16457 3BFF           8846         FF            mov	-1[bp],al
16458                                           !BCC_EOS
16459                                           ! 1956  Bit8u line,mmask,*palette,vpti;
16460                                           !BCC_EOS
16461                                           ! 1957  Bit16u i,twidth,theightm1,cheight;
16462                                           !BCC_EOS
16463                                           ! 1958  Bit8u modeset_ctl,video_ctl,vga_switches;
16464                                           !BCC_EOS
16465                                           ! 1959  Bit16u crtc_addr;
16466                                           !BCC_EOS
16467                                           ! 1960  if (vbe_has_vbe_display()) {
16468 3C02           83C4                   EB  add	sp,*-$15
16469                                           ! Debug: func () unsigned short = vbe_has_vbe_display+0 (used reg = )
16470 3C05           E8         5960            call	_vbe_has_vbe_display
16471 3C08           85C0                       test	ax,ax
16472 3C0A           74           08            je  	.5C
16473                       00003C0C            .5D:
16474                                           ! 1961    dispi_set_enable(0x00);
16475                                           ! Debug: list int = const 0 (used reg = )
16476 3C0C           31C0                       xor	ax,ax
16477 3C0E           50                         push	ax
16478                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
16479 3C0F           E8         5723            call	_dispi_set_enable
16480 3C12           44                         inc	sp
16481 3C13           44                         inc	sp
16482                                           !BCC_EOS
16483                                           ! 1962   }
16484                                           ! 1963  mode=mode&0x7f;
16485                       00003C14            .5C:
16486                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16487 3C14           8A46         04            mov	al,4[bp]
16488 3C17           24                     7F  and	al,*$7F
16489                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16490 3C19           8846         04            mov	4[bp],al
16491                                           !BCC_EOS
16492                                           ! 1964  line=find_vga_entry(mode);
16493                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16494 3C1C           8A46         04            mov	al,4[bp]
16495 3C1F           30E4                       xor	ah,ah
16496 3C21           50                         push	ax
16497                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16498 3C22           E8         4064            call	_find_vga_entry
16499 3C25           44                         inc	sp
16500 3C26           44                         inc	sp
16501                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16502 3C27           8846         FE            mov	-2[bp],al
16503                                           !BCC_EOS
16504                                           ! 1965  printf("mode search %02x found line %02x\n",mode,line);
16505                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16506 3C2A           8A46         FE            mov	al,-2[bp]
16507 3C2D           30E4                       xor	ah,ah
16508 3C2F           50                         push	ax
16509                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16510 3C30           8A46         04            mov	al,4[bp]
16511 3C33           30E4                       xor	ah,ah
16512 3C35           50                         push	ax
16513                                           ! Debug: list * char = .5E+0 (used reg = )
16514 3C36           BB                   A1A2  mov	bx,#.5E
16515 3C39           53                         push	bx
16516                                           ! Debug: func () void = printf+0 (used reg = )
16517 3C3A           E8         41E3            call	_printf
16518 3C3D           83C4                   06  add	sp,*6
16519                                           !BCC_EOS
16520                                           ! 1966  if(line==0xFF)
16521                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16522 3C40           8A46         FE            mov	al,-2[bp]
16523 3C43           3C                     FF  cmp	al,#$FF
16524 3C45           75           04            jne 	.5F
16525                       00003C47            .60:
16526                                           ! 1967   return;
16527 3C47           89EC                       mov	sp,bp
16528 3C49           5D                         pop	bp
16529 3C4A           C3                         ret
16530                                           !BCC_EOS
16531                                           ! 1968  vpti=line_to_vpti[line];
16532                       00003C4B            .5F:
16533                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16534 3C4B           8A46         FE            mov	al,-2[bp]
16535 3C4E           30E4                       xor	ah,ah
16536 3C50           89C3                       mov	bx,ax
16537                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16538 3C52           8A87       028B            mov	al,_line_to_vpti[bx]
16539 3C56           8846         F9            mov	-7[bp],al
16540                                           !BCC_EOS
16541                                           ! 1969  twidth=video_param_table[vpti].twidth;
16542                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16543 3C59           8A46         F9            mov	al,-7[bp]
16544 3C5C           30E4                       xor	ah,ah
16545 3C5E           B1                     06  mov	cl,*6
16546 3C60           D3E0                       shl	ax,cl
16547 3C62           89C3                       mov	bx,ax
16548                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16549 3C64           8A87       029F            mov	al,_video_param_table[bx]
16550 3C68           30E4                       xor	ah,ah
16551 3C6A           8946         F4            mov	-$C[bp],ax
16552                                           !BCC_EOS
16553                                           ! 1970  theightm1=video_param_table[vpti].theightm1;
16554                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16555 3C6D           8A46         F9            mov	al,-7[bp]
16556 3C70           30E4                       xor	ah,ah
16557 3C72           B1                     06  mov	cl,*6
16558 3C74           D3E0                       shl	ax,cl
16559 3C76           89C3                       mov	bx,ax
16560 3C78           81C3                 029F  add	bx,#_video_param_table
16561                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16562 3C7C           8A47         01            mov	al,1[bx]
16563 3C7F           30E4                       xor	ah,ah
16564 3C81           8946         F2            mov	-$E[bp],ax
16565                                           !BCC_EOS
16566                                           ! 1971  cheight=video_param_table[vpti].cheight;
16567                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16568 3C84           8A46         F9            mov	al,-7[bp]
16569 3C87           30E4                       xor	ah,ah
16570 3C89           B1                     06  mov	cl,*6
16571 3C8B           D3E0                       shl	ax,cl
16572 3C8D           89C3                       mov	bx,ax
16573 3C8F           81C3                 029F  add	bx,#_video_param_table
16574                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16575 3C93           8A47         02            mov	al,2[bx]
16576 3C96           30E4                       xor	ah,ah
16577 3C98           8946         F0            mov	-$10[bp],ax
16578                                           !BCC_EOS
16579                                           ! 1972  video_ctl=read_byte(0x40,0x87);
16580                                           ! Debug: list int = const $87 (used reg = )
16581 3C9B           B8                   0087  mov	ax,#$87
16582 3C9E           50                         push	ax
16583                                           ! Debug: list int = const $40 (used reg = )
16584 3C9F           B8                   0040  mov	ax,*$40
16585 3CA2           50                         push	ax
16586                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16587 3CA3           E8         40CF            call	_read_byte
16588 3CA6           83C4                   04  add	sp,*4
16589                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16590 3CA9           8846         EE            mov	-$12[bp],al
16591                                           !BCC_EOS
16592                                           ! 1973  vga_switches=read_byte(0x40,0x88);
16593                                           ! Debug: list int = const $88 (used reg = )
16594 3CAC           B8                   0088  mov	ax,#$88
16595 3CAF           50                         push	ax
16596                                           ! Debug: list int = const $40 (used reg = )
16597 3CB0           B8                   0040  mov	ax,*$40
16598 3CB3           50                         push	ax
16599                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16600 3CB4           E8         40BE            call	_read_byte
16601 3CB7           83C4                   04  add	sp,*4
16602                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16603 3CBA           8846         ED            mov	-$13[bp],al
16604                                           !BCC_EOS
16605                                           ! 1974  modeset_ctl=read_byte(0x40,0x89);
16606                                           ! Debug: list int = const $89 (used reg = )
16607 3CBD           B8                   0089  mov	ax,#$89
16608 3CC0           50                         push	ax
16609                                           ! Debug: list int = const $40 (used reg = )
16610 3CC1           B8                   0040  mov	ax,*$40
16611 3CC4           50                         push	ax
16612                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16613 3CC5           E8         40AD            call	_read_byte
16614 3CC8           83C4                   04  add	sp,*4
16615                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16616 3CCB           8846         EF            mov	-$11[bp],al
16617                                           !BCC_EOS
16618                                           ! 1975  if((modeset_ctl&0x08)==0)
16619                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16620 3CCE           8A46         EF            mov	al,-$11[bp]
16621 3CD1           24                     08  and	al,*8
16622                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16623 3CD3           84C0                       test	al,al
16624 3CD5         0F85         0145            bne 	.61
16625                       00003CD9            .62:
16626                                           ! 1976   {
16627                                           ! 1977    outb(0x3c6,vga_modes[line].pelmask);
16628                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16629 3CD9           8A46         FE            mov	al,-2[bp]
16630 3CDC           30E4                       xor	ah,ah
16631 3CDE           B1                     03  mov	cl,*3
16632 3CE0           D3E0                       shl	ax,cl
16633 3CE2           89C3                       mov	bx,ax
16634 3CE4           81C3                 020B  add	bx,#_vga_modes
16635                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16636 3CE8           8A47         06            mov	al,6[bx]
16637 3CEB           30E4                       xor	ah,ah
16638 3CED           50                         push	ax
16639                                           ! Debug: list int = const $3C6 (used reg = )
16640 3CEE           B8                   03C6  mov	ax,#$3C6
16641 3CF1           50                         push	ax
16642                                           ! Debug: func () void = outb+0 (used reg = )
16643 3CF2           E8         40EC            call	_outb
16644 3CF5           83C4                   04  add	sp,*4
16645                                           !BCC_EOS
16646                                           ! 1978    outb(0x3c8,0x00);
16647                                           ! Debug: list int = const 0 (used reg = )
16648 3CF8           31C0                       xor	ax,ax
16649 3CFA           50                         push	ax
16650                                           ! Debug: list int = const $3C8 (used reg = )
16651 3CFB           B8                   03C8  mov	ax,#$3C8
16652 3CFE           50                         push	ax
16653                                           ! Debug: func () void = outb+0 (used reg = )
16654 3CFF           E8         40DF            call	_outb
16655 3D02           83C4                   04  add	sp,*4
16656                                           !BCC_EOS
16657                                           ! 1979    switch(vga_modes[line].dacmodel)
16658                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16659 3D05           8A46         FE            mov	al,-2[bp]
16660 3D08           30E4                       xor	ah,ah
16661 3D0A           B1                     03  mov	cl,*3
16662 3D0C           D3E0                       shl	ax,cl
16663 3D0E           89C3                       mov	bx,ax
16664 3D10           81C3                 020B  add	bx,#_vga_modes
16665 3D14           8A47         07            mov	al,7[bx]
16666                                           ! 1980     {case 0:
16667 3D17           EB           22            jmp .65
16668                                           ! 1981       palette=&palette0;
16669                       00003D19            .66:
16670                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16671 3D19           BB                   0A1F  mov	bx,#_palette0
16672 3D1C           895E         FA            mov	-6[bp],bx
16673                                           !BCC_EOS
16674                                           ! 1982       break;
16675 3D1F           EB           2A            jmp .63
16676                                           !BCC_EOS
16677                                           ! 1983      case 1:
16678                                           ! 1984       palette=&palette1;
16679                       00003D21            .67:
16680                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16681 3D21           BB                   0ADF  mov	bx,#_palette1
16682 3D24           895E         FA            mov	-6[bp],bx
16683                                           !BCC_EOS
16684                                           ! 1985       break;
16685 3D27           EB           22            jmp .63
16686                                           !BCC_EOS
16687                                           ! 1986      case 2:
16688                                           ! 1987       palette=&palette2;
16689                       00003D29            .68:
16690                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16691 3D29           BB                   0B9F  mov	bx,#_palette2
16692 3D2C           895E         FA            mov	-6[bp],bx
16693                                           !BCC_EOS
16694                                           ! 1988       break;
16695 3D2F           EB           1A            jmp .63
16696                                           !BCC_EOS
16697                                           ! 1989      case 3:
16698                                           ! 1990       palette=&palette3;
16699                       00003D31            .69:
16700                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16701 3D31           BB                   0C5F  mov	bx,#_palette3
16702 3D34           895E         FA            mov	-6[bp],bx
16703                                           !BCC_EOS
16704                                           ! 1991       break;
16705 3D37           EB           12            jmp .63
16706                                           !BCC_EOS
16707                                           ! 1992     }
16708                                           ! 1993    for(i=0;i<0x0100;i++)
16709 3D39           EB           10            jmp .63
16710                       00003D3B            .65:
16711 3D3B           2C                     00  sub	al,*0
16712 3D3D           74           DA            je 	.66
16713 3D3F           2C                     01  sub	al,*1
16714 3D41           74           DE            je 	.67
16715 3D43           2C                     01  sub	al,*1
16716 3D45           74           E2            je 	.68
16717 3D47           2C                     01  sub	al,*1
16718 3D49           74           E6            je 	.69
16719                       00003D4B            .63:
16720                       FFFFFFE8            ..FFFE	=	-$18
16721                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16722 3D4B           31C0                       xor	ax,ax
16723 3D4D           8946         F6            mov	-$A[bp],ax
16724                                           !BCC_EOS
16725                                           !BCC_EOS
16726                                           ! 1994     {if(i<=dac_regs[vga_modes[line].dacmodel])
16727 3D50           E9         00AB            br 	.6C
16728                       00003D53            .6D:
16729                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16730 3D53           8A46         FE            mov	al,-2[bp]
16731 3D56           30E4                       xor	ah,ah
16732 3D58           B1                     03  mov	cl,*3
16733 3D5A           D3E0                       shl	ax,cl
16734 3D5C           89C3                       mov	bx,ax
16735 3D5E           81C3                 020B  add	bx,#_vga_modes
16736                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16737 3D62           8A47         07            mov	al,7[bx]
16738 3D65           30E4                       xor	ah,ah
16739 3D67           89C3                       mov	bx,ax
16740                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16741 3D69           8A87       029B            mov	al,_dac_regs[bx]
16742 3D6D           30E4                       xor	ah,ah
16743 3D6F           3B46         F6            cmp	ax,-$A[bp]
16744 3D72           72           5C            jb  	.6E
16745                       00003D74            .6F:
16746                                           ! 1995       {outb(0x3c9,palette[(i*3)+0]);
16747                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16748 3D74           8B46         F6            mov	ax,-$A[bp]
16749 3D77           89C2                       mov	dx,ax
16750 3D79           D1E0                       shl	ax,*1
16751 3D7B           01D0                       add	ax,dx
16752                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16753                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16754 3D7D           0346         FA            add	ax,-6[bp]
16755 3D80           89C3                       mov	bx,ax
16756                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16757 3D82           8A07                       mov	al,[bx]
16758 3D84           30E4                       xor	ah,ah
16759 3D86           50                         push	ax
16760                                           ! Debug: list int = const $3C9 (used reg = )
16761 3D87           B8                   03C9  mov	ax,#$3C9
16762 3D8A           50                         push	ax
16763                                           ! Debug: func () void = outb+0 (used reg = )
16764 3D8B           E8         4053            call	_outb
16765 3D8E           83C4                   04  add	sp,*4
16766                                           !BCC_EOS
16767                                           ! 1996        outb(0x3c9,palette[(i*3)+1]);
16768                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16769 3D91           8B46         F6            mov	ax,-$A[bp]
16770 3D94           89C2                       mov	dx,ax
16771 3D96           D1E0                       shl	ax,*1
16772 3D98           01D0                       add	ax,dx
16773                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16774                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16775 3D9A           40                         inc	ax
16776 3D9B           0346         FA            add	ax,-6[bp]
16777 3D9E           89C3                       mov	bx,ax
16778                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16779 3DA0           8A07                       mov	al,[bx]
16780 3DA2           30E4                       xor	ah,ah
16781 3DA4           50                         push	ax
16782                                           ! Debug: list int = const $3C9 (used reg = )
16783 3DA5           B8                   03C9  mov	ax,#$3C9
16784 3DA8           50                         push	ax
16785                                           ! Debug: func () void = outb+0 (used reg = )
16786 3DA9           E8         4035            call	_outb
16787 3DAC           83C4                   04  add	sp,*4
16788                                           !BCC_EOS
16789                                           ! 1997        outb(0x3c9,palette[(i*3)+2]);
16790                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16791 3DAF           8B46         F6            mov	ax,-$A[bp]
16792 3DB2           89C2                       mov	dx,ax
16793 3DB4           D1E0                       shl	ax,*1
16794 3DB6           01D0                       add	ax,dx
16795                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16796                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16797 3DB8           40                         inc	ax
16798 3DB9           40                         inc	ax
16799 3DBA           0346         FA            add	ax,-6[bp]
16800 3DBD           89C3                       mov	bx,ax
16801                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16802 3DBF           8A07                       mov	al,[bx]
16803 3DC1           30E4                       xor	ah,ah
16804 3DC3           50                         push	ax
16805                                           ! Debug: list int = const $3C9 (used reg = )
16806 3DC4           B8                   03C9  mov	ax,#$3C9
16807 3DC7           50                         push	ax
16808                                           ! Debug: func () void = outb+0 (used reg = )
16809 3DC8           E8         4016            call	_outb
16810 3DCB           83C4                   04  add	sp,*4
16811                                           !BCC_EOS
16812                                           ! 1998       }
16813                                           ! 1999      else
16814                                           ! 2000       {outb(0x3c9,0);
16815 3DCE           EB           27            jmp .70
16816                       00003DD0            .6E:
16817                                           ! Debug: list int = const 0 (used reg = )
16818 3DD0           31C0                       xor	ax,ax
16819 3DD2           50                         push	ax
16820                                           ! Debug: list int = const $3C9 (used reg = )
16821 3DD3           B8                   03C9  mov	ax,#$3C9
16822 3DD6           50                         push	ax
16823                                           ! Debug: func () void = outb+0 (used reg = )
16824 3DD7           E8         4007            call	_outb
16825 3DDA           83C4                   04  add	sp,*4
16826                                           !BCC_EOS
16827                                           ! 2001        outb(0x3c9,0);
16828                                           ! Debug: list int = const 0 (used reg = )
16829 3DDD           31C0                       xor	ax,ax
16830 3DDF           50                         push	ax
16831                                           ! Debug: list int = const $3C9 (used reg = )
16832 3DE0           B8                   03C9  mov	ax,#$3C9
16833 3DE3           50                         push	ax
16834                                           ! Debug: func () void = outb+0 (used reg = )
16835 3DE4           E8         3FFA            call	_outb
16836 3DE7           83C4                   04  add	sp,*4
16837                                           !BCC_EOS
16838                                           ! 2002        outb(0x3c9,0);
16839                                           ! Debug: list int = const 0 (used reg = )
16840 3DEA           31C0                       xor	ax,ax
16841 3DEC           50                         push	ax
16842                                           ! Debug: list int = const $3C9 (used reg = )
16843 3DED           B8                   03C9  mov	ax,#$3C9
16844 3DF0           50                         push	ax
16845                                           ! Debug: func () void = outb+0 (used reg = )
16846 3DF1           E8         3FED            call	_outb
16847 3DF4           83C4                   04  add	sp,*4
16848                                           !BCC_EOS
16849                                           ! 2003       }
16850                                           ! 2004     }
16851                       00003DF7            .70:
16852                                           ! 2005    if((modeset_ctl&0x02)==0x02)
16853                       00003DF7            .6B:
16854                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16855 3DF7           8B46         F6            mov	ax,-$A[bp]
16856 3DFA           40                         inc	ax
16857 3DFB           8946         F6            mov	-$A[bp],ax
16858                       00003DFE            .6C:
16859                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16860 3DFE           8B46         F6            mov	ax,-$A[bp]
16861 3E01           3D                   0100  cmp	ax,#$100
16862 3E04         0F82         FF4B            blo 	.6D
16863                       00003E08            .71:
16864                       00003E08            .6A:
16865                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16866 3E08           8A46         EF            mov	al,-$11[bp]
16867 3E0B           24                     02  and	al,*2
16868                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16869 3E0D           3C                     02  cmp	al,*2
16870 3E0F           75           0D            jne 	.72
16871                       00003E11            .73:
16872                                           ! 2006     {
16873                                           ! 2007      biosfn_perform_gray_scale_summing(0x00, 0x100);
16874                                           ! Debug: list int = const $100 (used reg = )
16875 3E11           B8                   0100  mov	ax,#$100
16876 3E14           50                         push	ax
16877                                           ! Debug: list int = const 0 (used reg = )
16878 3E15           31C0                       xor	ax,ax
16879 3E17           50                         push	ax
16880                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16881 3E18           E8         2794            call	_biosfn_perform_gray_scale_summing
16882 3E1B           83C4                   04  add	sp,*4
16883                                           !BCC_EOS
16884                                           ! 2008     }
16885                                           ! 2009   }
16886                       00003E1E            .72:
16887                                           ! 2010  inb(0x3da);
16888                       00003E1E            .61:
16889                                           ! Debug: list int = const $3DA (used reg = )
16890 3E1E           B8                   03DA  mov	ax,#$3DA
16891 3E21           50                         push	ax
16892                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16893 3E22           E8         3FA6            call	_inb
16894 3E25           44                         inc	sp
16895 3E26           44                         inc	sp
16896                                           !BCC_EOS
16897                                           ! 2011  for(i=0;i<=0x13;i++)
16898                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16899 3E27           31C0                       xor	ax,ax
16900 3E29           8946         F6            mov	-$A[bp],ax
16901                                           !BCC_EOS
16902                                           !BCC_EOS
16903                                           ! 2012   {outb(0x3c0,i);
16904 3E2C           EB           38            jmp .76
16905                       00003E2E            .77:
16906                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16907 3E2E           FF76         F6            push	-$A[bp]
16908                                           ! Debug: list int = const $3C0 (used reg = )
16909 3E31           B8                   03C0  mov	ax,#$3C0
16910 3E34           50                         push	ax
16911                                           ! Debug: func () void = outb+0 (used reg = )
16912 3E35           E8         3FA9            call	_outb
16913 3E38           83C4                   04  add	sp,*4
16914                                           !BCC_EOS
16915                                           ! 2013    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16916                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16917 3E3B           8A46         F9            mov	al,-7[bp]
16918 3E3E           30E4                       xor	ah,ah
16919 3E40           B1                     06  mov	cl,*6
16920 3E42           D3E0                       shl	ax,cl
16921 3E44           89C3                       mov	bx,ax
16922 3E46           81C3                 029F  add	bx,#_video_param_table
16923                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16924 3E4A           8B46         F6            mov	ax,-$A[bp]
16925 3E4D           01C3                       add	bx,ax
16926                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16927 3E4F           8A47         23            mov	al,$23[bx]
16928 3E52           30E4                       xor	ah,ah
16929 3E54           50                         push	ax
16930                                           ! Debug: list int = const $3C0 (used reg = )
16931 3E55           B8                   03C0  mov	ax,#$3C0
16932 3E58           50                         push	ax
16933                                           ! Debug: func () void = outb+0 (used reg = )
16934 3E59           E8         3F85            call	_outb
16935 3E5C           83C4                   04  add	sp,*4
16936                                           !BCC_EOS
16937                                           ! 2014   }
16938                                           ! 2015  outb(0x3c0,0x14);
16939                       00003E5F            .75:
16940                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16941 3E5F           8B46         F6            mov	ax,-$A[bp]
16942 3E62           40                         inc	ax
16943 3E63           8946         F6            mov	-$A[bp],ax
16944                       00003E66            .76:
16945                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16946 3E66           8B46         F6            mov	ax,-$A[bp]
16947 3E69           3D                   0013  cmp	ax,*$13
16948 3E6C           76           C0            jbe	.77
16949                       00003E6E            .78:
16950                       00003E6E            .74:
16951                                           ! Debug: list int = const $14 (used reg = )
16952 3E6E           B8                   0014  mov	ax,*$14
16953 3E71           50                         push	ax
16954                                           ! Debug: list int = const $3C0 (used reg = )
16955 3E72           B8                   03C0  mov	ax,#$3C0
16956 3E75           50                         push	ax
16957                                           ! Debug: func () void = outb+0 (used reg = )
16958 3E76           E8         3F68            call	_outb
16959 3E79           83C4                   04  add	sp,*4
16960                                           !BCC_EOS
16961                                           ! 2016  outb(0x3c0,0x00);
16962                                           ! Debug: list int = const 0 (used reg = )
16963 3E7C           31C0                       xor	ax,ax
16964 3E7E           50                         push	ax
16965                                           ! Debug: list int = const $3C0 (used reg = )
16966 3E7F           B8                   03C0  mov	ax,#$3C0
16967 3E82           50                         push	ax
16968                                           ! Debug: func () void = outb+0 (used reg = )
16969 3E83           E8         3F5B            call	_outb
16970 3E86           83C4                   04  add	sp,*4
16971                                           !BCC_EOS
16972                                           ! 2017  outb(0x3c4,0);
16973                                           ! Debug: list int = const 0 (used reg = )
16974 3E89           31C0                       xor	ax,ax
16975 3E8B           50                         push	ax
16976                                           ! Debug: list int = const $3C4 (used reg = )
16977 3E8C           B8                   03C4  mov	ax,#$3C4
16978 3E8F           50                         push	ax
16979                                           ! Debug: func () void = outb+0 (used reg = )
16980 3E90           E8         3F4E            call	_outb
16981 3E93           83C4                   04  add	sp,*4
16982                                           !BCC_EOS
16983                                           ! 2018  outb(0x3c5,0x03);
16984                                           ! Debug: list int = const 3 (used reg = )
16985 3E96           B8                   0003  mov	ax,*3
16986 3E99           50                         push	ax
16987                                           ! Debug: list int = const $3C5 (used reg = )
16988 3E9A           B8                   03C5  mov	ax,#$3C5
16989 3E9D           50                         push	ax
16990                                           ! Debug: func () void = outb+0 (used reg = )
16991 3E9E           E8         3F40            call	_outb
16992 3EA1           83C4                   04  add	sp,*4
16993                                           !BCC_EOS
16994                                           ! 2019  for(i=1;i<=4;i++)
16995                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16996 3EA4           B8                   0001  mov	ax,*1
16997 3EA7           8946         F6            mov	-$A[bp],ax
16998                                           !BCC_EOS
16999                                           !BCC_EOS
17000                                           ! 2020   {outb(0x3c4,i);
17001 3EAA           EB           3F            jmp .7B
17002                       00003EAC            .7C:
17003                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17004 3EAC           FF76         F6            push	-$A[bp]
17005                                           ! Debug: list int = const $3C4 (used reg = )
17006 3EAF           B8                   03C4  mov	ax,#$3C4
17007 3EB2           50                         push	ax
17008                                           ! Debug: func () void = outb+0 (used reg = )
17009 3EB3           E8         3F2B            call	_outb
17010 3EB6           83C4                   04  add	sp,*4
17011                                           !BCC_EOS
17012                                           ! 2021    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
17013                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
17014 3EB9           8B46         F6            mov	ax,-$A[bp]
17015 3EBC           48                         dec	ax
17016 3EBD           50                         push	ax
17017                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
17018 3EBE           8A46         F9            mov	al,-7[bp]
17019 3EC1           30E4                       xor	ah,ah
17020 3EC3           B1                     06  mov	cl,*6
17021 3EC5           D3E0                       shl	ax,cl
17022 3EC7           89C3                       mov	bx,ax
17023 3EC9           81C3                 029F  add	bx,#_video_param_table
17024                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
17025 3ECD           8B46         E8            mov	ax,-$18[bp]
17026 3ED0           01C3                       add	bx,ax
17027 3ED2           44                         inc	sp
17028 3ED3           44                         inc	sp
17029                                           ! Debug: list unsigned char = [bx+5] (used reg = )
17030 3ED4           8A47         05            mov	al,5[bx]
17031 3ED7           30E4                       xor	ah,ah
17032 3ED9           50                         push	ax
17033                                           ! Debug: list int = const $3C5 (used reg = )
17034 3EDA           B8                   03C5  mov	ax,#$3C5
17035 3EDD           50                         push	ax
17036                                           ! Debug: func () void = outb+0 (used reg = )
17037 3EDE           E8         3F00            call	_outb
17038 3EE1           83C4                   04  add	sp,*4
17039                                           !BCC_EOS
17040                                           ! 2022   }
17041                                           ! 2023  for(i=0;i<=8;i++)
17042                       00003EE4            .7A:
17043                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17044 3EE4           8B46         F6            mov	ax,-$A[bp]
17045 3EE7           40                         inc	ax
17046 3EE8           8946         F6            mov	-$A[bp],ax
17047                       00003EEB            .7B:
17048                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
17049 3EEB           8B46         F6            mov	ax,-$A[bp]
17050 3EEE           3D                   0004  cmp	ax,*4
17051 3EF1           76           B9            jbe	.7C
17052                       00003EF3            .7D:
17053                       00003EF3            .79:
17054                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17055 3EF3           31C0                       xor	ax,ax
17056 3EF5           8946         F6            mov	-$A[bp],ax
17057                                           !BCC_EOS
17058                                           !BCC_EOS
17059                                           ! 2024   {outb(0x3ce,i);
17060 3EF8           EB           38            jmp .80
17061                       00003EFA            .81:
17062                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17063 3EFA           FF76         F6            push	-$A[bp]
17064                                           ! Debug: list int = const $3CE (used reg = )
17065 3EFD           B8                   03CE  mov	ax,#$3CE
17066 3F00           50                         push	ax
17067                                           ! Debug: func () void = outb+0 (used reg = )
17068 3F01           E8         3EDD            call	_outb
17069 3F04           83C4                   04  add	sp,*4
17070                                           !BCC_EOS
17071                                           ! 2025    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
17072                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17073 3F07           8A46         F9            mov	al,-7[bp]
17074 3F0A           30E4                       xor	ah,ah
17075 3F0C           B1                     06  mov	cl,*6
17076 3F0E           D3E0                       shl	ax,cl
17077 3F10           89C3                       mov	bx,ax
17078 3F12           81C3                 029F  add	bx,#_video_param_table
17079                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
17080 3F16           8B46         F6            mov	ax,-$A[bp]
17081 3F19           01C3                       add	bx,ax
17082                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
17083 3F1B           8A47         37            mov	al,$37[bx]
17084 3F1E           30E4                       xor	ah,ah
17085 3F20           50                         push	ax
17086                                           ! Debug: list int = const $3CF (used reg = )
17087 3F21           B8                   03CF  mov	ax,#$3CF
17088 3F24           50                         push	ax
17089                                           ! Debug: func () void = outb+0 (used reg = )
17090 3F25           E8         3EB9            call	_outb
17091 3F28           83C4                   04  add	sp,*4
17092                                           !BCC_EOS
17093                                           ! 2026   }
17094                                           ! 2027  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
17095                       00003F2B            .7F:
17096                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17097 3F2B           8B46         F6            mov	ax,-$A[bp]
17098 3F2E           40                         inc	ax
17099 3F2F           8946         F6            mov	-$A[bp],ax
17100                       00003F32            .80:
17101                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17102 3F32           8B46         F6            mov	ax,-$A[bp]
17103 3F35           3D                   0008  cmp	ax,*8
17104 3F38           76           C0            jbe	.81
17105                       00003F3A            .82:
17106                       00003F3A            .7E:
17107                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17108 3F3A           8A46         FE            mov	al,-2[bp]
17109 3F3D           30E4                       xor	ah,ah
17110 3F3F           B1                     03  mov	cl,*3
17111 3F41           D3E0                       shl	ax,cl
17112 3F43           89C3                       mov	bx,ax
17113 3F45           81C3                 020B  add	bx,#_vga_modes
17114                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
17115 3F49           8A47         02            mov	al,2[bx]
17116 3F4C           3C                     01  cmp	al,*1
17117 3F4E           75           05            jne 	.83
17118                       00003F50            .84:
17119 3F50           B8                   03B4  mov	ax,#$3B4
17120 3F53           EB           03            jmp .85
17121                       00003F55            .83:
17122 3F55           B8                   03D4  mov	ax,#$3D4
17123                       00003F58            .85:
17124                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
17125 3F58           8946         EA            mov	-$16[bp],ax
17126                                           !BCC_EOS
17127                                           ! 2028  outw(crtc_addr,0x0011);
17128                                           ! Debug: list int = const $11 (used reg = )
17129 3F5B           B8                   0011  mov	ax,*$11
17130 3F5E           50                         push	ax
17131                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17132 3F5F           FF76         EA            push	-$16[bp]
17133                                           ! Debug: func () void = outw+0 (used reg = )
17134 3F62           E8         3E8C            call	_outw
17135 3F65           83C4                   04  add	sp,*4
17136                                           !BCC_EOS
17137                                           ! 2029  for(i=0;i<=0x18;i++)
17138                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17139 3F68           31C0                       xor	ax,ax
17140 3F6A           8946         F6            mov	-$A[bp],ax
17141                                           !BCC_EOS
17142                                           !BCC_EOS
17143                                           ! 2030   {outb(crtc_addr,i);
17144 3F6D           EB           38            jmp .88
17145                       00003F6F            .89:
17146                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
17147 3F6F           FF76         F6            push	-$A[bp]
17148                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17149 3F72           FF76         EA            push	-$16[bp]
17150                                           ! Debug: func () void = outb+0 (used reg = )
17151 3F75           E8         3E69            call	_outb
17152 3F78           83C4                   04  add	sp,*4
17153                                           !BCC_EOS
17154                                           ! 2031    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
17155                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17156 3F7B           8A46         F9            mov	al,-7[bp]
17157 3F7E           30E4                       xor	ah,ah
17158 3F80           B1                     06  mov	cl,*6
17159 3F82           D3E0                       shl	ax,cl
17160 3F84           89C3                       mov	bx,ax
17161 3F86           81C3                 029F  add	bx,#_video_param_table
17162                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
17163 3F8A           8B46         F6            mov	ax,-$A[bp]
17164 3F8D           01C3                       add	bx,ax
17165                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
17166 3F8F           8A47         0A            mov	al,$A[bx]
17167 3F92           30E4                       xor	ah,ah
17168 3F94           50                         push	ax
17169                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
17170 3F95           8B46         EA            mov	ax,-$16[bp]
17171                                           ! Debug: list unsigned int = ax+1 (used reg = )
17172 3F98           40                         inc	ax
17173 3F99           50                         push	ax
17174                                           ! Debug: func () void = outb+0 (used reg = )
17175 3F9A           E8         3E44            call	_outb
17176 3F9D           83C4                   04  add	sp,*4
17177                                           !BCC_EOS
17178                                           ! 2032   }
17179                                           ! 2033  outb(0x3c2,video_param_table
17180                       00003FA0            .87:
17181                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17182 3FA0           8B46         F6            mov	ax,-$A[bp]
17183 3FA3           40                         inc	ax
17184 3FA4           8946         F6            mov	-$A[bp],ax
17185                       00003FA7            .88:
17186                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
17187 3FA7           8B46         F6            mov	ax,-$A[bp]
17188 3FAA           3D                   0018  cmp	ax,*$18
17189 3FAD           76           C0            jbe	.89
17190                       00003FAF            .8A:
17191                       00003FAF            .86:
17192                                           ! 2033 [vpti].miscreg);
17193                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17194 3FAF           8A46         F9            mov	al,-7[bp]
17195 3FB2           30E4                       xor	ah,ah
17196 3FB4           B1                     06  mov	cl,*6
17197 3FB6           D3E0                       shl	ax,cl
17198 3FB8           89C3                       mov	bx,ax
17199 3FBA           81C3                 029F  add	bx,#_video_param_table
17200                                           ! Debug: list unsigned char = [bx+9] (used reg = )
17201 3FBE           8A47         09            mov	al,9[bx]
17202 3FC1           30E4                       xor	ah,ah
17203 3FC3           50                         push	ax
17204                                           ! Debug: list int = const $3C2 (used reg = )
17205 3FC4           B8                   03C2  mov	ax,#$3C2
17206 3FC7           50                         push	ax
17207                                           ! Debug: func () void = outb+0 (used reg = )
17208 3FC8           E8         3E16            call	_outb
17209 3FCB           83C4                   04  add	sp,*4
17210                                           !BCC_EOS
17211                                           ! 2034  outb(0x3c0,0x20);
17212                                           ! Debug: list int = const $20 (used reg = )
17213 3FCE           B8                   0020  mov	ax,*$20
17214 3FD1           50                         push	ax
17215                                           ! Debug: list int = const $3C0 (used reg = )
17216 3FD2           B8                   03C0  mov	ax,#$3C0
17217 3FD5           50                         push	ax
17218                                           ! Debug: func () void = outb+0 (used reg = )
17219 3FD6           E8         3E08            call	_outb
17220 3FD9           83C4                   04  add	sp,*4
17221                                           !BCC_EOS
17222                                           ! 2035  inb(0x3da);
17223                                           ! Debug: list int = const $3DA (used reg = )
17224 3FDC           B8                   03DA  mov	ax,#$3DA
17225 3FDF           50                         push	ax
17226                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17227 3FE0           E8         3DE8            call	_inb
17228 3FE3           44                         inc	sp
17229 3FE4           44                         inc	sp
17230                                           !BCC_EOS
17231                                           ! 2036  if(noclearmem==0x00)
17232                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
17233 3FE5           8A46         FF            mov	al,-1[bp]
17234 3FE8           84C0                       test	al,al
17235 3FEA         0F85         00C1            bne 	.8B
17236                       00003FEE            .8C:
17237                                           ! 2037   {
17238                                           ! 2038    if(vga_modes[line].class==0x00)
17239                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17240 3FEE           8A46         FE            mov	al,-2[bp]
17241 3FF1           30E4                       xor	ah,ah
17242 3FF3           B1                     03  mov	cl,*3
17243 3FF5           D3E0                       shl	ax,cl
17244 3FF7           89C3                       mov	bx,ax
17245 3FF9           81C3                 020B  add	bx,#_vga_modes
17246                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17247 3FFD           8A47         01            mov	al,1[bx]
17248 4000           84C0                       test	al,al
17249 4002           75           26            jne 	.8D
17250                       00004004            .8E:
17251                                           ! 2039     {
17252                                           ! 2040      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
17253                                           ! Debug: list int = const $4000 (used reg = )
17254 4004           B8                   4000  mov	ax,#$4000
17255 4007           50                         push	ax
17256                                           ! Debug: list int = const $720 (used reg = )
17257 4008           B8                   0720  mov	ax,#$720
17258 400B           50                         push	ax
17259                                           ! Debug: list int = const 0 (used reg = )
17260 400C           31C0                       xor	ax,ax
17261 400E           50                         push	ax
17262                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17263 400F           8A46         FE            mov	al,-2[bp]
17264 4012           30E4                       xor	ah,ah
17265 4014           B1                     03  mov	cl,*3
17266 4016           D3E0                       shl	ax,cl
17267 4018           89C3                       mov	bx,ax
17268 401A           81C3                 020B  add	bx,#_vga_modes
17269                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17270 401E           FF77         04            push	4[bx]
17271                                           ! Debug: func () void = memsetw+0 (used reg = )
17272 4021           E8         3CCC            call	_memsetw
17273 4024           83C4                   08  add	sp,*8
17274                                           !BCC_EOS
17275                                           ! 2041     }
17276                                           ! 2042    else
17277                                           ! 2043     {
17278 4027           E9         0085            br 	.8F
17279                       0000402A            .8D:
17280                                           ! 2044      if(mode<0x0d)
17281                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
17282 402A           8A46         04            mov	al,4[bp]
17283 402D           3C                     0D  cmp	al,*$D
17284 402F           73           24            jae 	.90
17285                       00004031            .91:
17286                                           ! 2045       {
17287                                           ! 2046        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
17288                                           ! Debug: list int = const $4000 (used reg = )
17289 4031           B8                   4000  mov	ax,#$4000
17290 4034           50                         push	ax
17291                                           ! Debug: list int = const 0 (used reg = )
17292 4035           31C0                       xor	ax,ax
17293 4037           50                         push	ax
17294                                           ! Debug: list int = const 0 (used reg = )
17295 4038           31C0                       xor	ax,ax
17296 403A           50                         push	ax
17297                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17298 403B           8A46         FE            mov	al,-2[bp]
17299 403E           30E4                       xor	ah,ah
17300 4040           B1                     03  mov	cl,*3
17301 4042           D3E0                       shl	ax,cl
17302 4044           89C3                       mov	bx,ax
17303 4046           81C3                 020B  add	bx,#_vga_modes
17304                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17305 404A           FF77         04            push	4[bx]
17306                                           ! Debug: func () void = memsetw+0 (used reg = )
17307 404D           E8         3CA0            call	_memsetw
17308 4050           83C4                   08  add	sp,*8
17309                                           !BCC_EOS
17310                                           ! 2047       }
17311                                           ! 2048      else
17312                                           ! 2049       {
17313 4053           EB           5A            jmp .92
17314                       00004055            .90:
17315                                           ! 2050        outb( 0x3c4, 0x02 );
17316                                           ! Debug: list int = const 2 (used reg = )
17317 4055           B8                   0002  mov	ax,*2
17318 4058           50                         push	ax
17319                                           ! Debug: list int = const $3C4 (used reg = )
17320 4059           B8                   03C4  mov	ax,#$3C4
17321 405C           50                         push	ax
17322                                           ! Debug: func () void = outb+0 (used reg = )
17323 405D           E8         3D81            call	_outb
17324 4060           83C4                   04  add	sp,*4
17325                                           !BCC_EOS
17326                                           ! 2051        mmask = inb( 0x3c5 );
17327                                           ! Debug: list int = const $3C5 (used reg = )
17328 4063           B8                   03C5  mov	ax,#$3C5
17329 4066           50                         push	ax
17330                                           ! Debug: func () unsigned char = inb+0 (used reg = )
17331 4067           E8         3D61            call	_inb
17332 406A           44                         inc	sp
17333 406B           44                         inc	sp
17334                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
17335 406C           8846         FD            mov	-3[bp],al
17336                                           !BCC_EOS
17337                                           ! 2052        outb( 0x3c5, 0x0f );
17338                                           ! Debug: list int = const $F (used reg = )
17339 406F           B8                   000F  mov	ax,*$F
17340 4072           50                         push	ax
17341                                           ! Debug: list int = const $3C5 (used reg = )
17342 4073           B8                   03C5  mov	ax,#$3C5
17343 4076           50                         push	ax
17344                                           ! Debug: func () void = outb+0 (used reg = )
17345 4077           E8         3D67            call	_outb
17346 407A           83C4                   04  add	sp,*4
17347                                           !BCC_EOS
17348                                           ! 2053        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
17349                                           ! Debug: list unsigned int = const $8000 (used reg = )
17350 407D           B8                   8000  mov	ax,#$8000
17351 4080           50                         push	ax
17352                                           ! Debug: list int = const 0 (used reg = )
17353 4081           31C0                       xor	ax,ax
17354 4083           50                         push	ax
17355                                           ! Debug: list int = const 0 (used reg = )
17356 4084           31C0                       xor	ax,ax
17357 4086           50                         push	ax
17358                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
17359 4087           8A46         FE            mov	al,-2[bp]
17360 408A           30E4                       xor	ah,ah
17361 408C           B1                     03  mov	cl,*3
17362 408E           D3E0                       shl	ax,cl
17363 4090           89C3                       mov	bx,ax
17364 4092           81C3                 020B  add	bx,#_vga_modes
17365                                           ! Debug: list unsigned short = [bx+4] (used reg = )
17366 4096           FF77         04            push	4[bx]
17367                                           ! Debug: func () void = memsetw+0 (used reg = )
17368 4099           E8         3C54            call	_memsetw
17369 409C           83C4                   08  add	sp,*8
17370                                           !BCC_EOS
17371                                           ! 2054        outb( 0x3c5, mmask );
17372                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
17373 409F           8A46         FD            mov	al,-3[bp]
17374 40A2           30E4                       xor	ah,ah
17375 40A4           50                         push	ax
17376                                           ! Debug: list int = const $3C5 (used reg = )
17377 40A5           B8                   03C5  mov	ax,#$3C5
17378 40A8           50                         push	ax
17379                                           ! Debug: func () void = outb+0 (used reg = )
17380 40A9           E8         3D35            call	_outb
17381 40AC           83C4                   04  add	sp,*4
17382                                           !BCC_EOS
17383                                           ! 2055       }
17384                                           ! 2056     }
17385                       000040AF            .92:
17386                                           ! 2057   }
17387                       000040AF            .8F:
17388                                           ! 2058  write_byte(0x40,0x49,mode);
17389                       000040AF            .8B:
17390                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
17391 40AF           8A46         04            mov	al,4[bp]
17392 40B2           30E4                       xor	ah,ah
17393 40B4           50                         push	ax
17394                                           ! Debug: list int = const $49 (used reg = )
17395 40B5           B8                   0049  mov	ax,*$49
17396 40B8           50                         push	ax
17397                                           ! Debug: list int = const $40 (used reg = )
17398 40B9           B8                   0040  mov	ax,*$40
17399 40BC           50                         push	ax
17400                                           ! Debug: func () void = write_byte+0 (used reg = )
17401 40BD           E8         3CDB            call	_write_byte
17402 40C0           83C4                   06  add	sp,*6
17403                                           !BCC_EOS
17404                                           ! 2059  write_word(0x40,0x4A,twidth);
17405                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
17406 40C3           FF76         F4            push	-$C[bp]
17407                                           ! Debug: list int = const $4A (used reg = )
17408 40C6           B8                   004A  mov	ax,*$4A
17409 40C9           50                         push	ax
17410                                           ! Debug: list int = const $40 (used reg = )
17411 40CA           B8                   0040  mov	ax,*$40
17412 40CD           50                         push	ax
17413                                           ! Debug: func () void = write_word+0 (used reg = )
17414 40CE           E8         3CE2            call	_write_word
17415 40D1           83C4                   06  add	sp,*6
17416                                           !BCC_EOS
17417                                           ! 2060  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
17418                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
17419 40D4           8A46         F9            mov	al,-7[bp]
17420 40D7           30E4                       xor	ah,ah
17421 40D9           B1                     06  mov	cl,*6
17422 40DB           D3E0                       shl	ax,cl
17423 40DD           89C3                       mov	bx,ax
17424 40DF           81C3                 029F  add	bx,#_video_param_table
17425                                           ! Debug: address unsigned char = [bx+3] (used reg = )
17426                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
17427                                           ! Debug: list unsigned short = [bx+3] (used reg = )
17428 40E3           FF77         03            push	3[bx]
17429                                           ! Debug: list int = const $4C (used reg = )
17430 40E6           B8                   004C  mov	ax,*$4C
17431 40E9           50                         push	ax
17432                                           ! Debug: list int = const $40 (used reg = )
17433 40EA           B8                   0040  mov	ax,*$40
17434 40ED           50                         push	ax
17435                                           ! Debug: func () void = write_word+0 (used reg = )
17436 40EE           E8         3CC2            call	_write_word
17437 40F1           83C4                   06  add	sp,*6
17438                                           !BCC_EOS
17439                                           ! 2061  write_word(0x40,0x63,crtc_addr);
17440                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
17441 40F4           FF76         EA            push	-$16[bp]
17442                                           ! Debug: list int = const $63 (used reg = )
17443 40F7           B8                   0063  mov	ax,*$63
17444 40FA           50                         push	ax
17445                                           ! Debug: list int = const $40 (used reg = )
17446 40FB           B8                   0040  mov	ax,*$40
17447 40FE           50                         push	ax
17448                                           ! Debug: func () void = write_word+0 (used reg = )
17449 40FF           E8         3CB1            call	_write_word
17450 4102           83C4                   06  add	sp,*6
17451                                           !BCC_EOS
17452                                           ! 2062  write_byte(0x40,0x84,theightm1);
17453                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17454 4105           FF76         F2            push	-$E[bp]
17455                                           ! Debug: list int = const $84 (used reg = )
17456 4108           B8                   0084  mov	ax,#$84
17457 410B           50                         push	ax
17458                                           ! Debug: list int = const $40 (used reg = )
17459 410C           B8                   0040  mov	ax,*$40
17460 410F           50                         push	ax
17461                                           ! Debug: func () void = write_byte+0 (used reg = )
17462 4110           E8         3C88            call	_write_byte
17463 4113           83C4                   06  add	sp,*6
17464                                           !BCC_EOS
17465                                           ! 2063  write_word(0x40,0x85,cheight);
17466                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17467 4116           FF76         F0            push	-$10[bp]
17468                                           ! Debug: list int = const $85 (used reg = )
17469 4119           B8                   0085  mov	ax,#$85
17470 411C           50                         push	ax
17471                                           ! Debug: list int = const $40 (used reg = )
17472 411D           B8                   0040  mov	ax,*$40
17473 4120           50                         push	ax
17474                                           ! Debug: func () void = write_word+0 (used reg = )
17475 4121           E8         3C8F            call	_write_word
17476 4124           83C4                   06  add	sp,*6
17477                                           !BCC_EOS
17478                                           ! 2064  write_byte(0x40,0x87,(0x60|noclearmem));
17479                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17480                                           ! Debug: expression subtree swapping
17481 4127           8A46         FF            mov	al,-1[bp]
17482 412A           0C                     60  or	al,*$60
17483                                           ! Debug: list unsigned char = al+0 (used reg = )
17484 412C           30E4                       xor	ah,ah
17485 412E           50                         push	ax
17486                                           ! Debug: list int = const $87 (used reg = )
17487 412F           B8                   0087  mov	ax,#$87
17488 4132           50                         push	ax
17489                                           ! Debug: list int = const $40 (used reg = )
17490 4133           B8                   0040  mov	ax,*$40
17491 4136           50                         push	ax
17492                                           ! Debug: func () void = write_byte+0 (used reg = )
17493 4137           E8         3C61            call	_write_byte
17494 413A           83C4                   06  add	sp,*6
17495                                           !BCC_EOS
17496                                           ! 2065  write_byte(0x40,0x88,0xF9);
17497                                           ! Debug: list int = const $F9 (used reg = )
17498 413D           B8                   00F9  mov	ax,#$F9
17499 4140           50                         push	ax
17500                                           ! Debug: list int = const $88 (used reg = )
17501 4141           B8                   0088  mov	ax,#$88
17502 4144           50                         push	ax
17503                                           ! Debug: list int = const $40 (used reg = )
17504 4145           B8                   0040  mov	ax,*$40
17505 4148           50                         push	ax
17506                                           ! Debug: func () void = write_byte+0 (used reg = )
17507 4149           E8         3C4F            call	_write_byte
17508 414C           83C4                   06  add	sp,*6
17509                                           !BCC_EOS
17510                                           ! 2066  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17511                                           ! Debug: list int = const $89 (used reg = )
17512 414F           B8                   0089  mov	ax,#$89
17513 4152           50                         push	ax
17514                                           ! Debug: list int = const $40 (used reg = )
17515 4153           B8                   0040  mov	ax,*$40
17516 4156           50                         push	ax
17517                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17518 4157           E8         3C1B            call	_read_byte
17519 415A           83C4                   04  add	sp,*4
17520                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17521 415D           24                     7F  and	al,*$7F
17522                                           ! Debug: list unsigned char = al+0 (used reg = )
17523 415F           30E4                       xor	ah,ah
17524 4161           50                         push	ax
17525                                           ! Debug: list int = const $89 (used reg = )
17526 4162           B8                   0089  mov	ax,#$89
17527 4165           50                         push	ax
17528                                           ! Debug: list int = const $40 (used reg = )
17529 4166           B8                   0040  mov	ax,*$40
17530 4169           50                         push	ax
17531                                           ! Debug: func () void = write_byte+0 (used reg = )
17532 416A           E8         3C2E            call	_write_byte
17533 416D           83C4                   06  add	sp,*6
17534                                           !BCC_EOS
17535                                           ! 2067  write_byte(0x40,0x8A,0x08);
17536                                           ! Debug: list int = const 8 (used reg = )
17537 4170           B8                   0008  mov	ax,*8
17538 4173           50                         push	ax
17539                                           ! Debug: list int = const $8A (used reg = )
17540 4174           B8                   008A  mov	ax,#$8A
17541 4177           50                         push	ax
17542                                           ! Debug: list int = const $40 (used reg = )
17543 4178           B8                   0040  mov	ax,*$40
17544 417B           50                         push	ax
17545                                           ! Debug: func () void = write_byte+0 (used reg = )
17546 417C           E8         3C1C            call	_write_byte
17547 417F           83C4                   06  add	sp,*6
17548                                           !BCC_EOS
17549                                           ! 2068  write_word(0x40,0xA8, video_save_pointer_table);
17550                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17551 4182           BB                   3608  mov	bx,#_video_save_pointer_table
17552 4185           53                         push	bx
17553                                           ! Debug: list int = const $A8 (used reg = )
17554 4186           B8                   00A8  mov	ax,#$A8
17555 4189           50                         push	ax
17556                                           ! Debug: list int = const $40 (used reg = )
17557 418A           B8                   0040  mov	ax,*$40
17558 418D           50                         push	ax
17559                                           ! Debug: func () void = write_word+0 (used reg = )
17560 418E           E8         3C22            call	_write_word
17561 4191           83C4                   06  add	sp,*6
17562                                           !BCC_EOS
17563                                           ! 2069  write_word(0x40,0xA8 +2, 0xc000);
17564                                           ! Debug: list unsigned int = const $C000 (used reg = )
17565 4194           B8                   C000  mov	ax,#$C000
17566 4197           50                         push	ax
17567                                           ! Debug: list int = const $AA (used reg = )
17568 4198           B8                   00AA  mov	ax,#$AA
17569 419B           50                         push	ax
17570                                           ! Debug: list int = const $40 (used reg = )
17571 419C           B8                   0040  mov	ax,*$40
17572 419F           50                         push	ax
17573                                           ! Debug: func () void = write_word+0 (used reg = )
17574 41A0           E8         3C10            call	_write_word
17575 41A3           83C4                   06  add	sp,*6
17576                                           !BCC_EOS
17577                                           ! 2070  write_byte(0x40,0x65,0x00);
17578                                           ! Debug: list int = const 0 (used reg = )
17579 41A6           31C0                       xor	ax,ax
17580 41A8           50                         push	ax
17581                                           ! Debug: list int = const $65 (used reg = )
17582 41A9           B8                   0065  mov	ax,*$65
17583 41AC           50                         push	ax
17584                                           ! Debug: list int = const $40 (used reg = )
17585 41AD           B8                   0040  mov	ax,*$40
17586 41B0           50                         push	ax
17587                                           ! Debug: func () void = write_byte+0 (used reg = )
17588 41B1           E8         3BE7            call	_write_byte
17589 41B4           83C4                   06  add	sp,*6
17590                                           !BCC_EOS
17591                                           ! 2071  write_byte(0x40,0x66,0x00);
17592                                           ! Debug: list int = const 0 (used reg = )
17593 41B7           31C0                       xor	ax,ax
17594 41B9           50                         push	ax
17595                                           ! Debug: list int = const $66 (used reg = )
17596 41BA           B8                   0066  mov	ax,*$66
17597 41BD           50                         push	ax
17598                                           ! Debug: list int = const $40 (used reg = )
17599 41BE           B8                   0040  mov	ax,*$40
17600 41C1           50                         push	ax
17601                                           ! Debug: func () void = write_byte+0 (used reg = )
17602 41C2           E8         3BD6            call	_write_byte
17603 41C5           83C4                   06  add	sp,*6
17604                                           !BCC_EOS
17605                                           ! 2072  if(vga_modes[line].class==0x00)
17606                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17607 41C8           8A46         FE            mov	al,-2[bp]
17608 41CB           30E4                       xor	ah,ah
17609 41CD           B1                     03  mov	cl,*3
17610 41CF           D3E0                       shl	ax,cl
17611 41D1           89C3                       mov	bx,ax
17612 41D3           81C3                 020B  add	bx,#_vga_modes
17613                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17614 41D7           8A47         01            mov	al,1[bx]
17615 41DA           84C0                       test	al,al
17616 41DC           75           0E            jne 	.93
17617                       000041DE            .94:
17618                                           ! 2073   {
17619                                           ! 2074    biosfn_set_cursor_shape(0x06,0x07);
17620                                           ! Debug: list int = const 7 (used reg = )
17621 41DE           B8                   0007  mov	ax,*7
17622 41E1           50                         push	ax
17623                                           ! Debug: list int = const 6 (used reg = )
17624 41E2           B8                   0006  mov	ax,*6
17625 41E5           50                         push	ax
17626                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17627 41E6           E8         00BA            call	_biosfn_set_cursor_shape
17628 41E9           83C4                   04  add	sp,*4
17629                                           !BCC_EOS
17630                                           ! 2075   }
17631                                           ! 2076  for(i=0;i<8;i++)
17632                       000041EC            .93:
17633                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17634 41EC           31C0                       xor	ax,ax
17635 41EE           8946         F6            mov	-$A[bp],ax
17636                                           !BCC_EOS
17637                                           !BCC_EOS
17638                                           ! 2077   biosfn_set_cursor_pos(i,0x0000);
17639 41F1           EB           13            jmp .97
17640                       000041F3            .98:
17641                                           ! Debug: list int = const 0 (used reg = )
17642 41F3           31C0                       xor	ax,ax
17643 41F5           50                         push	ax
17644                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17645 41F6           FF76         F6            push	-$A[bp]
17646                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17647 41F9           E8         01C2            call	_biosfn_set_cursor_pos
17648 41FC           83C4                   04  add	sp,*4
17649                                           !BCC_EOS
17650                                           ! 2078  biosfn_set_active_page(0x00);
17651                       000041FF            .96:
17652                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17653 41FF           8B46         F6            mov	ax,-$A[bp]
17654 4202           40                         inc	ax
17655 4203           8946         F6            mov	-$A[bp],ax
17656                       00004206            .97:
17657                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17658 4206           8B46         F6            mov	ax,-$A[bp]
17659 4209           3D                   0008  cmp	ax,*8
17660 420C           72           E5            jb 	.98
17661                       0000420E            .99:
17662                       0000420E            .95:
17663                                           ! Debug: list int = const 0 (used reg = )
17664 420E           31C0                       xor	ax,ax
17665 4210           50                         push	ax
17666                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17667 4211           E8         031F            call	_biosfn_set_active_page
17668 4214           44                         inc	sp
17669 4215           44                         inc	sp
17670                                           !BCC_EOS
17671                                           ! 2079  if(vga_modes[line].class==0x00)
17672                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17673 4216           8A46         FE            mov	al,-2[bp]
17674 4219           30E4                       xor	ah,ah
17675 421B           B1                     03  mov	cl,*3
17676 421D           D3E0                       shl	ax,cl
17677 421F           89C3                       mov	bx,ax
17678 4221           81C3                 020B  add	bx,#_vga_modes
17679                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17680 4225           8A47         01            mov	al,1[bx]
17681 4228           84C0                       test	al,al
17682 422A           75           0E            jne 	.9A
17683                       0000422C            .9B:
17684                                           ! 2080   {
17685                                           ! 2081 #asm
17686                                           !BCC_EOS
17687                                           !BCC_ASM
17688                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17689                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17690                       00000008            _biosfn_set_video_mode.theightm1	set	8
17691                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17692                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17693                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17694                       00000014            _biosfn_set_video_mode.line	set	$14
17695                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17696                       00000006            _biosfn_set_video_mode.cheight	set	6
17697                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17698                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17699                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17700                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17701                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17702                       0000000C            _biosfn_set_video_mode.i	set	$C
17703                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17704                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17705                       00000004            .biosfn_set_video_mode.mode	set	4
17706                       00000010            _biosfn_set_video_mode.palette	set	$10
17707                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17708                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17709                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17710                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17711                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17712                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17713                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17714                       00000013            _biosfn_set_video_mode.mmask	set	$13
17715                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17716                                             ;; copy and activate 8x16 font
17717 422C           B8                   1104    mov ax, #0x1104
17718 422F           B3                     00    mov bl, #0x00
17719 4231           CD                     10    int #0x10
17720 4233           B8                   1103    mov ax, #0x1103
17721 4236           B3                     00    mov bl, #0x00
17722 4238           CD                     10    int #0x10
17723                                           ! 2089 endasm
17724                                           !BCC_ENDASM
17725                                           !BCC_EOS
17726                                           ! 2090   }
17727                                           ! 2091 #asm
17728                       0000423A            .9A:
17729                                           !BCC_EOS
17730                                           !BCC_ASM
17731                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17732                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17733                       00000008            _biosfn_set_video_mode.theightm1	set	8
17734                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17735                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17736                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17737                       00000014            _biosfn_set_video_mode.line	set	$14
17738                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17739                       00000006            _biosfn_set_video_mode.cheight	set	6
17740                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17741                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17742                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17743                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17744                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17745                       0000000C            _biosfn_set_video_mode.i	set	$C
17746                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17747                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17748                       00000004            .biosfn_set_video_mode.mode	set	4
17749                       00000010            _biosfn_set_video_mode.palette	set	$10
17750                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17751                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17752                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17753                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17754                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17755                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17756                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17757                       00000013            _biosfn_set_video_mode.mmask	set	$13
17758                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17759                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   423A           1E                           push ds
 +a   423B           31C0                         xor ax, ax
 +a   423D           8ED8                         mov ds, ax
 +a   423F           B8                   136F    mov ax,  #_vgafont8+128*8
 +a   4242           A3         007C              mov 0x1f*4, ax
 +a   4245           B8                   C000    mov ax,  #0xC000
 +a   4248           A3         007E              mov 0x1f*4+2, ax
 +a   424B           1F                           pop ds
17760                                           ! 2093 endasm
17761                                           !BCC_ENDASM
17762                                           !BCC_EOS
17763                                           ! 2094   switch(cheight)
17764 424C           8B46         F0            mov	ax,-$10[bp]
17765                                           ! 2095    {case 8:
17766 424F           E9         003E            br 	.9E
17767                                           ! 2096 #asm
17768                       00004252            .9F:
17769                                           !BCC_EOS
17770                                           !BCC_ASM
17771                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17772                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17773                       00000008            _biosfn_set_video_mode.theightm1	set	8
17774                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17775                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17776                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17777                       00000014            _biosfn_set_video_mode.line	set	$14
17778                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17779                       00000006            _biosfn_set_video_mode.cheight	set	6
17780                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17781                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17782                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17783                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17784                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17785                       0000000C            _biosfn_set_video_mode.i	set	$C
17786                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17787                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17788                       00000004            .biosfn_set_video_mode.mode	set	4
17789                       00000010            _biosfn_set_video_mode.palette	set	$10
17790                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17791                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17792                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17793                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17794                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17795                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17796                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17797                       00000013            _biosfn_set_video_mode.mmask	set	$13
17798                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17799                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4252           1E                           push ds
 +a   4253           31C0                         xor ax, ax
 +a   4255           8ED8                         mov ds, ax
 +a   4257           B8                   0F6F    mov ax,  #_vgafont8
 +a   425A           A3         010C              mov 0x43*4, ax
 +a   425D           B8                   C000    mov ax,  #0xC000
 +a   4260           A3         010E              mov 0x43*4+2, ax
 +a   4263           1F                           pop ds
17800                                           ! 2098 endasm
17801                                           !BCC_ENDASM
17802                                           !BCC_EOS
17803                                           ! 2099      break;
17804 4264           EB           39            jmp .9C
17805                                           !BCC_EOS
17806                                           ! 2100     case 14:
17807                                           ! 2101 #asm
17808                       00004266            .A0:
17809                                           !BCC_EOS
17810                                           !BCC_ASM
17811                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17812                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17813                       00000008            _biosfn_set_video_mode.theightm1	set	8
17814                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17815                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17816                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17817                       00000014            _biosfn_set_video_mode.line	set	$14
17818                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17819                       00000006            _biosfn_set_video_mode.cheight	set	6
17820                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17821                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17822                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17823                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17824                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17825                       0000000C            _biosfn_set_video_mode.i	set	$C
17826                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17827                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17828                       00000004            .biosfn_set_video_mode.mode	set	4
17829                       00000010            _biosfn_set_video_mode.palette	set	$10
17830                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17831                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17832                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17833                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17834                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17835                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17836                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17837                       00000013            _biosfn_set_video_mode.mmask	set	$13
17838                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17839                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   4266           1E                           push ds
 +a   4267           31C0                         xor ax, ax
 +a   4269           8ED8                         mov ds, ax
 +a   426B           B8                   176F    mov ax,  #_vgafont14
 +a   426E           A3         010C              mov 0x43*4, ax
 +a   4271           B8                   C000    mov ax,  #0xC000
 +a   4274           A3         010E              mov 0x43*4+2, ax
 +a   4277           1F                           pop ds
17840                                           ! 2103 endasm
17841                                           !BCC_ENDASM
17842                                           !BCC_EOS
17843                                           ! 2104      break;
17844 4278           EB           25            jmp .9C
17845                                           !BCC_EOS
17846                                           ! 2105     case 16:
17847                                           ! 2106 #asm
17848                       0000427A            .A1:
17849                                           !BCC_EOS
17850                                           !BCC_ASM
17851                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17852                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17853                       00000008            _biosfn_set_video_mode.theightm1	set	8
17854                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17855                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17856                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17857                       00000014            _biosfn_set_video_mode.line	set	$14
17858                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17859                       00000006            _biosfn_set_video_mode.cheight	set	6
17860                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17861                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17862                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17863                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17864                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17865                       0000000C            _biosfn_set_video_mode.i	set	$C
17866                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17867                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17868                       00000004            .biosfn_set_video_mode.mode	set	4
17869                       00000010            _biosfn_set_video_mode.palette	set	$10
17870                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17871                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17872                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17873                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17874                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17875                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17876                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17877                       00000013            _biosfn_set_video_mode.mmask	set	$13
17878                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17879                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   427A           1E                           push ds
 +a   427B           31C0                         xor ax, ax
 +a   427D           8ED8                         mov ds, ax
 +a   427F           B8                   256F    mov ax,  #_vgafont16
 +a   4282           A3         010C              mov 0x43*4, ax
 +a   4285           B8                   C000    mov ax,  #0xC000
 +a   4288           A3         010E              mov 0x43*4+2, ax
 +a   428B           1F                           pop ds
17880                                           ! 2108 endasm
17881                                           !BCC_ENDASM
17882                                           !BCC_EOS
17883                                           ! 2109      break;
17884 428C           EB           11            jmp .9C
17885                                           !BCC_EOS
17886                                           ! 2110    }
17887                                           ! 2111 }
17888 428E           EB           0F            jmp .9C
17889                       00004290            .9E:
17890 4290           2D                   0008  sub	ax,*8
17891 4293           74           BD            je 	.9F
17892 4295           2D                   0006  sub	ax,*6
17893 4298           74           CC            je 	.A0
17894 429A           2D                   0002  sub	ax,*2
17895 429D           74           DB            je 	.A1
17896                       0000429F            .9C:
17897                       FFFFFFE8            ..FFFD	=	-$18
17898 429F           89EC                       mov	sp,bp
17899 42A1           5D                         pop	bp
17900 42A2           C3                         ret
17901                                           ! 2112 static void biosfn_set_cursor_shape (CH,CL)
17902                                           ! Register BX used in function biosfn_set_video_mode
17903                                           ! 2113 Bit8u CH;Bit8u CL;
17904                       000042A3            _biosfn_set_cursor_shape:
17905                                           !BCC_EOS
17906                                           !BCC_EOS
17907                                           ! 2114 {Bit16u cheight,curs,crtc_addr;
17908                                           !BCC_EOS
17909                                           ! 2115  Bit8u modeset_ctl;
17910                                           !BCC_EOS
17911                                           ! 2116  CH&=0x3f;
17912 42A3           55                         push	bp
17913 42A4           89E5                       mov	bp,sp
17914 42A6           83C4                   F8  add	sp,*-8
17915                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17916 42A9           8A46         04            mov	al,4[bp]
17917 42AC           24                     3F  and	al,*$3F
17918 42AE           8846         04            mov	4[bp],al
17919                                           !BCC_EOS
17920                                           ! 2117  CL&=0x1f;
17921                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17922 42B1           8A46         06            mov	al,6[bp]
17923 42B4           24                     1F  and	al,*$1F
17924 42B6           8846         06            mov	6[bp],al
17925                                           !BCC_EOS
17926                                           ! 2118  curs=(CH<<8)+CL;
17927                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17928 42B9           8A46         04            mov	al,4[bp]
17929 42BC           30E4                       xor	ah,ah
17930 42BE           88C4                       mov	ah,al
17931 42C0           30C0                       xor	al,al
17932                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17933 42C2           0246         06            add	al,6[bp]
17934 42C5           80D4                   00  adc	ah,*0
17935                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17936 42C8           8946         FC            mov	-4[bp],ax
17937                                           !BCC_EOS
17938                                           ! 2119  write_word(0x40,0x60,curs);
17939                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17940 42CB           FF76         FC            push	-4[bp]
17941                                           ! Debug: list int = const $60 (used reg = )
17942 42CE           B8                   0060  mov	ax,*$60
17943 42D1           50                         push	ax
17944                                           ! Debug: list int = const $40 (used reg = )
17945 42D2           B8                   0040  mov	ax,*$40
17946 42D5           50                         push	ax
17947                                           ! Debug: func () void = write_word+0 (used reg = )
17948 42D6           E8         3ADA            call	_write_word
17949 42D9           83C4                   06  add	sp,*6
17950                                           !BCC_EOS
17951                                           ! 2120  modeset_ctl=read_byte(0x40,0x89);
17952                                           ! Debug: list int = const $89 (used reg = )
17953 42DC           B8                   0089  mov	ax,#$89
17954 42DF           50                         push	ax
17955                                           ! Debug: list int = const $40 (used reg = )
17956 42E0           B8                   0040  mov	ax,*$40
17957 42E3           50                         push	ax
17958                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17959 42E4           E8         3A8E            call	_read_byte
17960 42E7           83C4                   04  add	sp,*4
17961                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17962 42EA           8846         F9            mov	-7[bp],al
17963                                           !BCC_EOS
17964                                           ! 2121  cheight = read_word(0x40,0x85);
17965                                           ! Debug: list int = const $85 (used reg = )
17966 42ED           B8                   0085  mov	ax,#$85
17967 42F0           50                         push	ax
17968                                           ! Debug: list int = const $40 (used reg = )
17969 42F1           B8                   0040  mov	ax,*$40
17970 42F4           50                         push	ax
17971                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17972 42F5           E8         3A90            call	_read_word
17973 42F8           83C4                   04  add	sp,*4
17974                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17975 42FB           8946         FE            mov	-2[bp],ax
17976                                           !BCC_EOS
17977                                           ! 2122  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17978                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17979 42FE           8A46         F9            mov	al,-7[bp]
17980 4301           24                     01  and	al,*1
17981 4303           84C0                       test	al,al
17982 4305           74           66            je  	.A2
17983                       00004307            .A6:
17984                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17985 4307           8B46         FE            mov	ax,-2[bp]
17986 430A           3D                   0008  cmp	ax,*8
17987 430D           76           5E            jbe 	.A2
17988                       0000430F            .A5:
17989                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17990 430F           8A46         06            mov	al,6[bp]
17991 4312           3C                     08  cmp	al,*8
17992 4314           73           57            jae 	.A2
17993                       00004316            .A4:
17994                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17995 4316           8A46         04            mov	al,4[bp]
17996 4319           3C                     20  cmp	al,*$20
17997 431B           73           50            jae 	.A2
17998                       0000431D            .A3:
17999                                           ! 2123   {
18000                                           ! 2124    if(CL!=(CH+1))
18001                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18002 431D           8A46         04            mov	al,4[bp]
18003 4320           30E4                       xor	ah,ah
18004                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
18005                                           ! Debug: expression subtree swapping
18006 4322           40                         inc	ax
18007 4323           50                         push	ax
18008 4324           8A46         06            mov	al,6[bp]
18009 4327           30E4                       xor	ah,ah
18010 4329           3B46         F6            cmp	ax,-$A[bp]
18011 432C           8D66         F8            lea	sp,-8[bp]
18012 432F           74           15            je  	.A7
18013                       00004331            .A8:
18014                                           ! 2125     {
18015                                           ! 2126      CH = 
18016                                           ! 2126 ((CH+1) * cheight / 8) -1;
18017                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
18018 4331           8A46         04            mov	al,4[bp]
18019 4334           30E4                       xor	ah,ah
18020                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18021 4336           40                         inc	ax
18022 4337           8B4E         FE            mov	cx,-2[bp]
18023 433A           F7E9                       imul	cx
18024                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18025 433C           B1                     03  mov	cl,*3
18026 433E           D3E8                       shr	ax,cl
18027                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18028                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
18029 4340           48                         dec	ax
18030 4341           8846         04            mov	4[bp],al
18031                                           !BCC_EOS
18032                                           ! 2127     }
18033                                           ! 2128    else
18034                                           ! 2129     {
18035 4344           EB           14            jmp .A9
18036                       00004346            .A7:
18037                                           ! 2130      CH = ((CL+1) * cheight / 8) - 2;
18038                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18039 4346           8A46         06            mov	al,6[bp]
18040 4349           30E4                       xor	ah,ah
18041                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18042 434B           40                         inc	ax
18043 434C           8B4E         FE            mov	cx,-2[bp]
18044 434F           F7E9                       imul	cx
18045                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18046 4351           B1                     03  mov	cl,*3
18047 4353           D3E8                       shr	ax,cl
18048                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
18049                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
18050 4355           48                         dec	ax
18051 4356           48                         dec	ax
18052 4357           8846         04            mov	4[bp],al
18053                                           !BCC_EOS
18054                                           ! 2131     }
18055                                           ! 2132    CL = ((CL+1) * cheight / 8) - 1;
18056                       0000435A            .A9:
18057                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
18058 435A           8A46         06            mov	al,6[bp]
18059 435D           30E4                       xor	ah,ah
18060                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
18061 435F           40                         inc	ax
18062 4360           8B4E         FE            mov	cx,-2[bp]
18063 4363           F7E9                       imul	cx
18064                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
18065 4365           B1                     03  mov	cl,*3
18066 4367           D3E8                       shr	ax,cl
18067                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
18068                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
18069 4369           48                         dec	ax
18070 436A           8846         06            mov	6[bp],al
18071                                           !BCC_EOS
18072                                           ! 2133   }
18073                                           ! 2134  crtc_addr=read_word(0x40,0x63);
18074                       0000436D            .A2:
18075                                           ! Debug: list int = const $63 (used reg = )
18076 436D           B8                   0063  mov	ax,*$63
18077 4370           50                         push	ax
18078                                           ! Debug: list int = const $40 (used reg = )
18079 4371           B8                   0040  mov	ax,*$40
18080 4374           50                         push	ax
18081                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18082 4375           E8         3A10            call	_read_word
18083 4378           83C4                   04  add	sp,*4
18084                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
18085 437B           8946         FA            mov	-6[bp],ax
18086                                           !BCC_EOS
18087                                           ! 2135  outb(crtc_addr,0x0a);
18088                                           ! Debug: list int = const $A (used reg = )
18089 437E           B8                   000A  mov	ax,*$A
18090 4381           50                         push	ax
18091                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18092 4382           FF76         FA            push	-6[bp]
18093                                           ! Debug: func () void = outb+0 (used reg = )
18094 4385           E8         3A59            call	_outb
18095 4388           83C4                   04  add	sp,*4
18096                                           !BCC_EOS
18097                                           ! 2136  outb(crtc_addr+1,CH);
18098                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
18099 438B           8A46         04            mov	al,4[bp]
18100 438E           30E4                       xor	ah,ah
18101 4390           50                         push	ax
18102                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18103 4391           8B46         FA            mov	ax,-6[bp]
18104                                           ! Debug: list unsigned int = ax+1 (used reg = )
18105 4394           40                         inc	ax
18106 4395           50                         push	ax
18107                                           ! Debug: func () void = outb+0 (used reg = )
18108 4396           E8         3A48            call	_outb
18109 4399           83C4                   04  add	sp,*4
18110                                           !BCC_EOS
18111                                           ! 2137  outb(crtc_addr,0x0b);
18112                                           ! Debug: list int = const $B (used reg = )
18113 439C           B8                   000B  mov	ax,*$B
18114 439F           50                         push	ax
18115                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
18116 43A0           FF76         FA            push	-6[bp]
18117                                           ! Debug: func () void = outb+0 (used reg = )
18118 43A3           E8         3A3B            call	_outb
18119 43A6           83C4                   04  add	sp,*4
18120                                           !BCC_EOS
18121                                           ! 2138  outb(crtc_addr+1,CL);
18122                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
18123 43A9           8A46         06            mov	al,6[bp]
18124 43AC           30E4                       xor	ah,ah
18125 43AE           50                         push	ax
18126                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
18127 43AF           8B46         FA            mov	ax,-6[bp]
18128                                           ! Debug: list unsigned int = ax+1 (used reg = )
18129 43B2           40                         inc	ax
18130 43B3           50                         push	ax
18131                                           ! Debug: func () void = outb+0 (used reg = )
18132 43B4           E8         3A2A            call	_outb
18133 43B7           83C4                   04  add	sp,*4
18134                                           !BCC_EOS
18135                                           ! 2139 }
18136 43BA           89EC                       mov	sp,bp
18137 43BC           5D                         pop	bp
18138 43BD           C3                         ret
18139                                           ! 2140 static void biosfn_set_cursor_pos (page, cursor)
18140                                           ! 2141 Bit8u page;Bit16u cursor;
18141                       000043BE            _biosfn_set_cursor_pos:
18142                                           !BCC_EOS
18143                                           !BCC_EOS
18144                                           ! 2142 {
18145                                           ! 2143  Bit8u xcurs,ycurs,current;
18146                                           !BCC_EOS
18147                                           ! 2144  Bit16u nbcols,nbrows,address,crtc_addr;
18148                                           !BCC_EOS
18149                                           ! 2145  if(page>7)return;
18150 43BE           55                         push	bp
18151 43BF           89E5                       mov	bp,sp
18152 43C1           83C4                   F4  add	sp,*-$C
18153                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
18154 43C4           8A46         04            mov	al,4[bp]
18155 43C7           3C                     07  cmp	al,*7
18156 43C9           76           04            jbe 	.AA
18157                       000043CB            .AB:
18158 43CB           89EC                       mov	sp,bp
18159 43CD           5D                         pop	bp
18160 43CE           C3                         ret
18161                                           !BCC_EOS
18162                                           ! 2146  write_word(0x40, 0x50 +2*page, cursor);
18163                       000043CF            .AA:
18164                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
18165 43CF           FF76         06            push	6[bp]
18166                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
18167                                           ! Debug: expression subtree swapping
18168 43D2           8A46         04            mov	al,4[bp]
18169 43D5           30E4                       xor	ah,ah
18170 43D7           D1E0                       shl	ax,*1
18171                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18172                                           ! Debug: expression subtree swapping
18173                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18174 43D9           05                   0050  add	ax,*$50
18175 43DC           50                         push	ax
18176                                           ! Debug: list int = const $40 (used reg = )
18177 43DD           B8                   0040  mov	ax,*$40
18178 43E0           50                         push	ax
18179                                           ! Debug: func () void = write_word+0 (used reg = )
18180 43E1           E8         39CF            call	_write_word
18181 43E4           83C4                   06  add	sp,*6
18182                                           !BCC_EOS
18183                                           ! 2147  current=read_byte(0x40,0x62);
18184                                           ! Debug: list int = const $62 (used reg = )
18185 43E7           B8                   0062  mov	ax,*$62
18186 43EA           50                         push	ax
18187                                           ! Debug: list int = const $40 (used reg = )
18188 43EB           B8                   0040  mov	ax,*$40
18189 43EE           50                         push	ax
18190                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18191 43EF           E8         3983            call	_read_byte
18192 43F2           83C4                   04  add	sp,*4
18193                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
18194 43F5           8846         FD            mov	-3[bp],al
18195                                           !BCC_EOS
18196                                           ! 2148  if(page==current)
18197                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
18198 43F8           8A46         04            mov	al,4[bp]
18199 43FB           3A46         FD            cmp	al,-3[bp]
18200 43FE         0F85         00B8            bne 	.AC
18201                       00004402            .AD:
18202                                           ! 2149   {
18203                                           ! 2150    nbcols=read_word(0x40,0x4A);
18204                                           ! Debug: list int = const $4A (used reg = )
18205 4402           B8                   004A  mov	ax,*$4A
18206 4405           50                         push	ax
18207                                           ! Debug: list int = const $40 (used reg = )
18208 4406           B8                   0040  mov	ax,*$40
18209 4409           50                         push	ax
18210                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18211 440A           E8         397B            call	_read_word
18212 440D           83C4                   04  add	sp,*4
18213                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
18214 4410           8946         FA            mov	-6[bp],ax
18215                                           !BCC_EOS
18216                                           ! 2151    nbrows=read_byte(0x40,0x84)+1;
18217                                           ! Debug: list int = const $84 (used reg = )
18218 4413           B8                   0084  mov	ax,#$84
18219 4416           50                         push	ax
18220                                           ! Debug: list int = const $40 (used reg = )
18221 4417           B8                   0040  mov	ax,*$40
18222 441A           50                         push	ax
18223                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18224 441B           E8         3957            call	_read_byte
18225 441E           83C4                   04  add	sp,*4
18226                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18227 4421           30E4                       xor	ah,ah
18228                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
18229 4423           40                         inc	ax
18230 4424           8946         F8            mov	-8[bp],ax
18231                                           !BCC_EOS
18232                                           ! 2152    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
18233                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
18234 4427           8A46         06            mov	al,6[bp]
18235                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
18236 442A           8846         FF            mov	-1[bp],al
18237                                           !BCC_EOS
18238                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
18239 442D           8B46         06            mov	ax,6[bp]
18240 4430           30C0                       xor	al,al
18241                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18242 4432           88E0                       mov	al,ah
18243 4434           30E4                       xor	ah,ah
18244                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
18245 4436           8846         FE            mov	-2[bp],al
18246                                           !BCC_EOS
18247                                           ! 2153    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
18248                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
18249 4439           8A46         FE            mov	al,-2[bp]
18250 443C           30E4                       xor	ah,ah
18251 443E           8B4E         FA            mov	cx,-6[bp]
18252 4441           F7E9                       imul	cx
18253 4443           50                         push	ax
18254                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
18255 4444           8B46         FA            mov	ax,-6[bp]
18256 4447           8B4E         F8            mov	cx,-8[bp]
18257 444A           F7E9                       imul	cx
18258                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18259 444C           0C                     FF  or	al,#$FF
18260                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18261                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18262 444E           89C3                       mov	bx,ax
18263 4450           8A46         04            mov	al,4[bp]
18264 4453           30E4                       xor	ah,ah
18265 4455           93                         xchg	ax,bx
18266 4456           40                         inc	ax
18267 4457           89D9                       mov	cx,bx
18268 4459           F7E9                       imul	cx
18269                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
18270 445B           0246         FF            add	al,-1[bp]
18271 445E           80D4                   00  adc	ah,*0
18272                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
18273 4461           0346         F2            add	ax,-$E[bp]
18274 4464           44                         inc	sp
18275 4465           44                         inc	sp
18276                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
18277 4466           8946         F6            mov	-$A[bp],ax
18278                                           !BCC_EOS
18279                                           ! 2154    crtc_addr=read_word(0x40,0x63);
18280                                           ! Debug: list int = const $63 (used reg = )
18281 4469           B8                   0063  mov	ax,*$63
18282 446C           50                         push	ax
18283                                           ! Debug: list int = const $40 (used reg = )
18284 446D           B8                   0040  mov	ax,*$40
18285 4470           50                         push	ax
18286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18287 4471           E8         3914            call	_read_word
18288 4474           83C4                   04  add	sp,*4
18289                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
18290 4477           8946         F4            mov	-$C[bp],ax
18291                                           !BCC_EOS
18292                                           ! 2155    outb(crtc_addr,0x0e);
18293                                           ! Debug: list int = const $E (used reg = )
18294 447A           B8                   000E  mov	ax,*$E
18295 447D           50                         push	ax
18296                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18297 447E           FF76         F4            push	-$C[bp]
18298                                           ! Debug: func () void = outb+0 (used reg = )
18299 4481           E8         395D            call	_outb
18300 4484           83C4                   04  add	sp,*4
18301                                           !BCC_EOS
18302                                           ! 2156    outb(crtc_addr+1,(address&0xff00)>>8);
18303                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
18304 4487           8B46         F6            mov	ax,-$A[bp]
18305 448A           30C0                       xor	al,al
18306                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18307 448C           88E0                       mov	al,ah
18308 448E           30E4                       xor	ah,ah
18309                                           ! Debug: list unsigned int = ax+0 (used reg = )
18310 4490           50                         push	ax
18311                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18312 4491           8B46         F4            mov	ax,-$C[bp]
18313                                           ! Debug: list unsigned int = ax+1 (used reg = )
18314 4494           40                         inc	ax
18315 4495           50                         push	ax
18316                                           ! Debug: func () void = outb+0 (used reg = )
18317 4496           E8         3948            call	_outb
18318 4499           83C4                   04  add	sp,*4
18319                                           !BCC_EOS
18320                                           ! 2157    outb(crtc_addr,0x0f);
18321                                           ! Debug: list int = const $F (used reg = )
18322 449C           B8                   000F  mov	ax,*$F
18323 449F           50                         push	ax
18324                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
18325 44A0           FF76         F4            push	-$C[bp]
18326                                           ! Debug: func () void = outb+0 (used reg = )
18327 44A3           E8         393B            call	_outb
18328 44A6           83C4                   04  add	sp,*4
18329                                           !BCC_EOS
18330                                           ! 2158    outb(crtc_addr+1,address&0x00ff);
18331                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
18332 44A9           8A46         F6            mov	al,-$A[bp]
18333                                           ! Debug: list unsigned char = al+0 (used reg = )
18334 44AC           30E4                       xor	ah,ah
18335 44AE           50                         push	ax
18336                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
18337 44AF           8B46         F4            mov	ax,-$C[bp]
18338                                           ! Debug: list unsigned int = ax+1 (used reg = )
18339 44B2           40                         inc	ax
18340 44B3           50                         push	ax
18341                                           ! Debug: func () void = outb+0 (used reg = )
18342 44B4           E8         392A            call	_outb
18343 44B7           83C4                   04  add	sp,*4
18344                                           !BCC_EOS
18345                                           ! 2159   }
18346                                           ! 2160 }
18347                       000044BA            .AC:
18348 44BA           89EC                       mov	sp,bp
18349 44BC           5D                         pop	bp
18350 44BD           C3                         ret
18351                                           ! 2161 static void biosfn_get_cursor_pos (page,shape, pos)
18352                                           ! Register BX used in function biosfn_set_cursor_pos
18353                                           ! 2162 Bit8u page;Bit16u *shape;Bit16u *pos;
18354                       000044BE            _biosfn_get_cursor_pos:
18355                                           !BCC_EOS
18356                                           !BCC_EOS
18357                                           !BCC_EOS
18358                                           ! 2163 {
18359                                           ! 2164  Bit16u ss=get_SS();
18360 44BE           55                         push	bp
18361 44BF           89E5                       mov	bp,sp
18362 44C1           4C                         dec	sp
18363 44C2           4C                         dec	sp
18364                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
18365 44C3           E8         393B            call	_get_SS
18366                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
18367 44C6           8946         FE            mov	-2[bp],ax
18368                                           !BCC_EOS
18369                                           ! 2165  write_word(ss, shape, 0);
18370                                           ! Debug: list int = const 0 (used reg = )
18371 44C9           31C0                       xor	ax,ax
18372 44CB           50                         push	ax
18373                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18374 44CC           FF76         06            push	6[bp]
18375                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18376 44CF           FF76         FE            push	-2[bp]
18377                                           ! Debug: func () void = write_word+0 (used reg = )
18378 44D2           E8         38DE            call	_write_word
18379 44D5           83C4                   06  add	sp,*6
18380                                           !BCC_EOS
18381                                           ! 2166  write_word(ss, pos, 0);
18382                                           ! Debug: list int = const 0 (used reg = )
18383 44D8           31C0                       xor	ax,ax
18384 44DA           50                         push	ax
18385                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18386 44DB           FF76         08            push	8[bp]
18387                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18388 44DE           FF76         FE            push	-2[bp]
18389                                           ! Debug: func () void = write_word+0 (used reg = )
18390 44E1           E8         38CF            call	_write_word
18391 44E4           83C4                   06  add	sp,*6
18392                                           !BCC_EOS
18393                                           ! 2167  if(page>7)return;
18394                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
18395 44E7           8A46         04            mov	al,4[bp]
18396 44EA           3C                     07  cmp	al,*7
18397 44EC           76           04            jbe 	.AE
18398                       000044EE            .AF:
18399 44EE           89EC                       mov	sp,bp
18400 44F0           5D                         pop	bp
18401 44F1           C3                         ret
18402                                           !BCC_EOS
18403                                           ! 2168  write_word(ss,shape,read_word(0x40,0x60));
18404                       000044F2            .AE:
18405                                           ! Debug: list int = const $60 (used reg = )
18406 44F2           B8                   0060  mov	ax,*$60
18407 44F5           50                         push	ax
18408                                           ! Debug: list int = const $40 (used reg = )
18409 44F6           B8                   0040  mov	ax,*$40
18410 44F9           50                         push	ax
18411                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18412 44FA           E8         388B            call	_read_word
18413 44FD           83C4                   04  add	sp,*4
18414                                           ! Debug: list unsigned short = ax+0 (used reg = )
18415 4500           50                         push	ax
18416                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
18417 4501           FF76         06            push	6[bp]
18418                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18419 4504           FF76         FE            push	-2[bp]
18420                                           ! Debug: func () void = write_word+0 (used reg = )
18421 4507           E8         38A9            call	_write_word
18422 450A           83C4                   06  add	sp,*6
18423                                           !BCC_EOS
18424                                           ! 2169  write_word(ss,pos,read_word(0x40,0x50 +page*2));
18425                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
18426 450D           8A46         04            mov	al,4[bp]
18427 4510           30E4                       xor	ah,ah
18428 4512           D1E0                       shl	ax,*1
18429                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
18430                                           ! Debug: expression subtree swapping
18431                                           ! Debug: list unsigned int = ax+$50 (used reg = )
18432 4514           05                   0050  add	ax,*$50
18433 4517           50                         push	ax
18434                                           ! Debug: list int = const $40 (used reg = )
18435 4518           B8                   0040  mov	ax,*$40
18436 451B           50                         push	ax
18437                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18438 451C           E8         3869            call	_read_word
18439 451F           83C4                   04  add	sp,*4
18440                                           ! Debug: list unsigned short = ax+0 (used reg = )
18441 4522           50                         push	ax
18442                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18443 4523           FF76         08            push	8[bp]
18444                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18445 4526           FF76         FE            push	-2[bp]
18446                                           ! Debug: func () void = write_word+0 (used reg = )
18447 4529           E8         3887            call	_write_word
18448 452C           83C4                   06  add	sp,*6
18449                                           !BCC_EOS
18450                                           ! 2170 }
18451 452F           89EC                       mov	sp,bp
18452 4531           5D                         pop	bp
18453 4532           C3                         ret
18454                                           ! 2171 static void biosfn_set_active_page (page)
18455                                           ! 2172 Bit8u page;
18456                       00004533            _biosfn_set_active_page:
18457                                           !BCC_EOS
18458                                           ! 2173 {
18459                                           ! 2174  Bit16u cursor,dummy,crtc_addr;
18460                                           !BCC_EOS
18461                                           ! 2175  Bit16u nbcols,nbrows,address;
18462                                           !BCC_EOS
18463                                           ! 2176  Bit8u mode,line;
18464                                           !BCC_EOS
18465                                           ! 2177  if(page>7)return;
18466 4533           55                         push	bp
18467 4534           89E5                       mov	bp,sp
18468 4536           83C4                   F2  add	sp,*-$E
18469                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18470 4539           8A46         04            mov	al,4[bp]
18471 453C           3C                     07  cmp	al,*7
18472 453E           76           04            jbe 	.B0
18473                       00004540            .B1:
18474 4540           89EC                       mov	sp,bp
18475 4542           5D                         pop	bp
18476 4543           C3                         ret
18477                                           !BCC_EOS
18478                                           ! 2178  mode=read_byte(0x40,0x49);
18479                       00004544            .B0:
18480                                           ! Debug: list int = const $49 (used reg = )
18481 4544           B8                   0049  mov	ax,*$49
18482 4547           50                         push	ax
18483                                           ! Debug: list int = const $40 (used reg = )
18484 4548           B8                   0040  mov	ax,*$40
18485 454B           50                         push	ax
18486                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18487 454C           E8         3826            call	_read_byte
18488 454F           83C4                   04  add	sp,*4
18489                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18490 4552           8846         F3            mov	-$D[bp],al
18491                                           !BCC_EOS
18492                                           ! 2179  line=find_vga_entry(mode);
18493                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18494 4555           8A46         F3            mov	al,-$D[bp]
18495 4558           30E4                       xor	ah,ah
18496 455A           50                         push	ax
18497                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18498 455B           E8         372B            call	_find_vga_entry
18499 455E           44                         inc	sp
18500 455F           44                         inc	sp
18501                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18502 4560           8846         F2            mov	-$E[bp],al
18503                                           !BCC_EOS
18504                                           ! 2180  if(line==0xFF)return;
18505                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18506 4563           8A46         F2            mov	al,-$E[bp]
18507 4566           3C                     FF  cmp	al,#$FF
18508 4568           75           04            jne 	.B2
18509                       0000456A            .B3:
18510 456A           89EC                       mov	sp,bp
18511 456C           5D                         pop	bp
18512 456D           C3                         ret
18513                                           !BCC_EOS
18514                                           ! 2181  biosfn_get_cursor_pos(page,&dummy,&cursor);
18515                       0000456E            .B2:
18516                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18517 456E           8D5E         FE            lea	bx,-2[bp]
18518 4571           53                         push	bx
18519                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18520 4572           8D5E         FC            lea	bx,-4[bp]
18521 4575           53                         push	bx
18522                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18523 4576           8A46         04            mov	al,4[bp]
18524 4579           30E4                       xor	ah,ah
18525 457B           50                         push	ax
18526                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18527 457C           E8         FF3F            call	_biosfn_get_cursor_pos
18528 457F           83C4                   06  add	sp,*6
18529                                           !BCC_EOS
18530                                           ! 2182  if(vga_modes[line].class==0x00)
18531                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18532 4582           8A46         F2            mov	al,-$E[bp]
18533 4585           30E4                       xor	ah,ah
18534 4587           B1                     03  mov	cl,*3
18535 4589           D3E0                       shl	ax,cl
18536 458B           89C3                       mov	bx,ax
18537 458D           81C3                 020B  add	bx,#_vga_modes
18538                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18539 4591           8A47         01            mov	al,1[bx]
18540 4594           84C0                       test	al,al
18541 4596           75           6E            jne 	.B4
18542                       00004598            .B5:
18543                                           ! 2183   {
18544                                           ! 2184    nbcols=read_word(0x40,0x4A);
18545                                           ! Debug: list int = const $4A (used reg = )
18546 4598           B8                   004A  mov	ax,*$4A
18547 459B           50                         push	ax
18548                                           ! Debug: list int = const $40 (used reg = )
18549 459C           B8                   0040  mov	ax,*$40
18550 459F           50                         push	ax
18551                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18552 45A0           E8         37E5            call	_read_word
18553 45A3           83C4                   04  add	sp,*4
18554                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18555 45A6           8946         F8            mov	-8[bp],ax
18556                                           !BCC_EOS
18557                                           ! 2185    nbrows=read_byte(0x40,0x84)+1;
18558                                           ! Debug: list int = const $84 (used reg = )
18559 45A9           B8                   0084  mov	ax,#$84
18560 45AC           50                         push	ax
18561                                           ! Debug: list int = const $40 (used reg = )
18562 45AD           B8                   0040  mov	ax,*$40
18563 45B0           50                         push	ax
18564                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18565 45B1           E8         37C1            call	_read_byte
18566 45B4           83C4                   04  add	sp,*4
18567                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18568 45B7           30E4                       xor	ah,ah
18569                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18570 45B9           40                         inc	ax
18571 45BA           8946         F6            mov	-$A[bp],ax
18572                                           !BCC_EOS
18573                                           ! 2186    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18574                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18575 45BD           8B46         F8            mov	ax,-8[bp]
18576 45C0           8B4E         F6            mov	cx,-$A[bp]
18577 45C3           F7E9                       imul	cx
18578                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18579 45C5           D1E0                       shl	ax,*1
18580                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18581 45C7           0C                     FF  or	al,#$FF
18582                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18583                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18584 45C9           89C3                       mov	bx,ax
18585 45CB           8A46         04            mov	al,4[bp]
18586 45CE           30E4                       xor	ah,ah
18587 45D0           93                         xchg	ax,bx
18588 45D1           40                         inc	ax
18589 45D2           89D9                       mov	cx,bx
18590 45D4           F7E9                       imul	cx
18591                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18592 45D6           8946         F4            mov	-$C[bp],ax
18593                                           !BCC_EOS
18594                                           ! 2187    write_word(0x40,0x4E,address);
18595                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18596 45D9           FF76         F4            push	-$C[bp]
18597                                           ! Debug: list int = const $4E (used reg = )
18598 45DC           B8                   004E  mov	ax,*$4E
18599 45DF           50                         push	ax
18600                                           ! Debug: list int = const $40 (used reg = )
18601 45E0           B8                   0040  mov	ax,*$40
18602 45E3           50                         push	ax
18603                                           ! Debug: func () void = write_word+0 (used reg = )
18604 45E4           E8         37CC            call	_write_word
18605 45E7           83C4                   06  add	sp,*6
18606                                           !BCC_EOS
18607                                           ! 2188    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18608                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18609 45EA           8B46         F8            mov	ax,-8[bp]
18610 45ED           8B4E         F6            mov	cx,-$A[bp]
18611 45F0           F7E9                       imul	cx
18612                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18613 45F2           0C                     FF  or	al,#$FF
18614                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18615                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18616 45F4           89C3                       mov	bx,ax
18617 45F6           8A46         04            mov	al,4[bp]
18618 45F9           30E4                       xor	ah,ah
18619 45FB           93                         xchg	ax,bx
18620 45FC           40                         inc	ax
18621 45FD           89D9                       mov	cx,bx
18622 45FF           F7E9                       imul	cx
18623                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18624 4601           8946         F4            mov	-$C[bp],ax
18625                                           !BCC_EOS
18626                                           ! 2189   }
18627                                           ! 2190  else
18628                                           ! 2191   {
18629 4604           EB           24            jmp .B6
18630                       00004606            .B4:
18631                                           ! 2192    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18632                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18633 4606           8A46         F2            mov	al,-$E[bp]
18634 4609           30E4                       xor	ah,ah
18635 460B           89C3                       mov	bx,ax
18636                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18637 460D           8A87       028B            mov	al,_line_to_vpti[bx]
18638 4611           30E4                       xor	ah,ah
18639 4613           B1                     06  mov	cl,*6
18640 4615           D3E0                       shl	ax,cl
18641 4617           89C3                       mov	bx,ax
18642 4619           81C3                 029F  add	bx,#_video_param_table
18643                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18644                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18645                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18646 461D           8A46         04            mov	al,4[bp]
18647 4620           30E4                       xor	ah,ah
18648 4622           8B4F         03            mov	cx,3[bx]
18649 4625           F7E9                       imul	cx
18650                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18651 4627           8946         F4            mov	-$C[bp],ax
18652                                           !BCC_EOS
18653                                           ! 2193   }
18654                                           ! 2194  crtc_addr=read_word(0x40,0x63);
18655                       0000462A            .B6:
18656                                           ! Debug: list int = const $63 (used reg = )
18657 462A           B8                   0063  mov	ax,*$63
18658 462D           50                         push	ax
18659                                           ! Debug: list int = const $40 (used reg = )
18660 462E           B8                   0040  mov	ax,*$40
18661 4631           50                         push	ax
18662                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18663 4632           E8         3753            call	_read_word
18664 4635           83C4                   04  add	sp,*4
18665                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18666 4638           8946         FA            mov	-6[bp],ax
18667                                           !BCC_EOS
18668                                           ! 2195  outb(crtc_addr,0x0c);
18669                                           ! Debug: list int = const $C (used reg = )
18670 463B           B8                   000C  mov	ax,*$C
18671 463E           50                         push	ax
18672                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18673 463F           FF76         FA            push	-6[bp]
18674                                           ! Debug: func () void = outb+0 (used reg = )
18675 4642           E8         379C            call	_outb
18676 4645           83C4                   04  add	sp,*4
18677                                           !BCC_EOS
18678                                           ! 2196  outb(crtc_addr+1,(address&0xff00)>>8);
18679                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18680 4648           8B46         F4            mov	ax,-$C[bp]
18681 464B           30C0                       xor	al,al
18682                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18683 464D           88E0                       mov	al,ah
18684 464F           30E4                       xor	ah,ah
18685                                           ! Debug: list unsigned int = ax+0 (used reg = )
18686 4651           50                         push	ax
18687                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18688 4652           8B46         FA            mov	ax,-6[bp]
18689                                           ! Debug: list unsigned int = ax+1 (used reg = )
18690 4655           40                         inc	ax
18691 4656           50                         push	ax
18692                                           ! Debug: func () void = outb+0 (used reg = )
18693 4657           E8         3787            call	_outb
18694 465A           83C4                   04  add	sp,*4
18695                                           !BCC_EOS
18696                                           ! 2197  outb(crtc_addr,0x0d);
18697                                           ! Debug: list int = const $D (used reg = )
18698 465D           B8                   000D  mov	ax,*$D
18699 4660           50                         push	ax
18700                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18701 4661           FF76         FA            push	-6[bp]
18702                                           ! Debug: func () void = outb+0 (used reg = )
18703 4664           E8         377A            call	_outb
18704 4667           83C4                   04  add	sp,*4
18705                                           !BCC_EOS
18706                                           ! 2198  outb(crtc_addr+1,address&0x00ff);
18707                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18708 466A           8A46         F4            mov	al,-$C[bp]
18709                                           ! Debug: list unsigned char = al+0 (used reg = )
18710 466D           30E4                       xor	ah,ah
18711 466F           50                         push	ax
18712                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18713 4670           8B46         FA            mov	ax,-6[bp]
18714                                           ! Debug: list unsigned int = ax+1 (used reg = )
18715 4673           40                         inc	ax
18716 4674           50                         push	ax
18717                                           ! Debug: func () void = outb+0 (used reg = )
18718 4675           E8         3769            call	_outb
18719 4678           83C4                   04  add	sp,*4
18720                                           !BCC_EOS
18721                                           ! 2199  write_byte(0x40,0x62,page);
18722                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18723 467B           8A46         04            mov	al,4[bp]
18724 467E           30E4                       xor	ah,ah
18725 4680           50                         push	ax
18726                                           ! Debug: list int = const $62 (used reg = )
18727 4681           B8                   0062  mov	ax,*$62
18728 4684           50                         push	ax
18729                                           ! Debug: list int = const $40 (used reg = )
18730 4685           B8                   0040  mov	ax,*$40
18731 4688           50                         push	ax
18732                                           ! Debug: func () void = write_byte+0 (used reg = )
18733 4689           E8         370F            call	_write_byte
18734 468C           83C4                   06  add	sp,*6
18735                                           !BCC_EOS
18736                                           ! 2200  printf("Set active page %02x address %04x\n",page,address);
18737                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18738 468F           FF76         F4            push	-$C[bp]
18739                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18740 4692           8A46         04            mov	al,4[bp]
18741 4695           30E4                       xor	ah,ah
18742 4697           50                         push	ax
18743                                           ! Debug: list * char = .B7+0 (used reg = )
18744 4698           BB                   A17F  mov	bx,#.B7
18745 469B           53                         push	bx
18746                                           ! Debug: func () void = printf+0 (used reg = )
18747 469C           E8         3781            call	_printf
18748 469F           83C4                   06  add	sp,*6
18749                                           !BCC_EOS
18750                                           ! 2201  biosfn_set_cursor_pos(page,cursor);
18751                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18752 46A2           FF76         FE            push	-2[bp]
18753                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18754 46A5           8A46         04            mov	al,4[bp]
18755 46A8           30E4                       xor	ah,ah
18756 46AA           50                         push	ax
18757                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18758 46AB           E8         FD10            call	_biosfn_set_cursor_pos
18759 46AE           83C4                   04  add	sp,*4
18760                                           !BCC_EOS
18761                                           ! 2202 }
18762                                           ! 2202 
18763 46B1           89EC                       mov	sp,bp
18764 46B3           5D                         pop	bp
18765 46B4           C3                         ret
18766                                           ! 2203 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18767                                           ! Register BX used in function biosfn_set_active_page
18768                                           ! 2204 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18769                       000046B5            _vgamem_copy_pl4:
18770                                           !BCC_EOS
18771                                           !BCC_EOS
18772                                           !BCC_EOS
18773                                           !BCC_EOS
18774                                           !BCC_EOS
18775                                           !BCC_EOS
18776                                           ! 2205 {
18777                                           ! 2206  Bit16u src,dest;
18778                                           !BCC_EOS
18779                                           ! 2207  Bit8u i;
18780                                           !BCC_EOS
18781                                           ! 2208  src=ysrc*cheight*nbcols+xstart;
18782 46B5           55                         push	bp
18783 46B6           89E5                       mov	bp,sp
18784 46B8           83C4                   FA  add	sp,*-6
18785                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18786 46BB           8A46         0E            mov	al,$E[bp]
18787 46BE           30E4                       xor	ah,ah
18788 46C0           89C3                       mov	bx,ax
18789 46C2           8A46         06            mov	al,6[bp]
18790 46C5           30E4                       xor	ah,ah
18791 46C7           89D9                       mov	cx,bx
18792 46C9           F7E9                       imul	cx
18793                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18794 46CB           89C3                       mov	bx,ax
18795 46CD           8A46         0C            mov	al,$C[bp]
18796 46D0           30E4                       xor	ah,ah
18797 46D2           93                         xchg	ax,bx
18798 46D3           89D9                       mov	cx,bx
18799 46D5           F7E9                       imul	cx
18800                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18801 46D7           0246         04            add	al,4[bp]
18802 46DA           80D4                   00  adc	ah,*0
18803                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18804 46DD           8946         FE            mov	-2[bp],ax
18805                                           !BCC_EOS
18806                                           ! 2209  dest=ydest*cheight*nbcols+xstart;
18807                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18808 46E0           8A46         0E            mov	al,$E[bp]
18809 46E3           30E4                       xor	ah,ah
18810 46E5           89C3                       mov	bx,ax
18811 46E7           8A46         08            mov	al,8[bp]
18812 46EA           30E4                       xor	ah,ah
18813 46EC           89D9                       mov	cx,bx
18814 46EE           F7E9                       imul	cx
18815                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18816 46F0           89C3                       mov	bx,ax
18817 46F2           8A46         0C            mov	al,$C[bp]
18818 46F5           30E4                       xor	ah,ah
18819 46F7           93                         xchg	ax,bx
18820 46F8           89D9                       mov	cx,bx
18821 46FA           F7E9                       imul	cx
18822                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18823 46FC           0246         04            add	al,4[bp]
18824 46FF           80D4                   00  adc	ah,*0
18825                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18826 4702           8946         FC            mov	-4[bp],ax
18827                                           !BCC_EOS
18828                                           ! 2210  outw(0x3ce, 0x0105);
18829                                           ! Debug: list int = const $105 (used reg = )
18830 4705           B8                   0105  mov	ax,#$105
18831 4708           50                         push	ax
18832                                           ! Debug: list int = const $3CE (used reg = )
18833 4709           B8                   03CE  mov	ax,#$3CE
18834 470C           50                         push	ax
18835                                           ! Debug: func () void = outw+0 (used reg = )
18836 470D           E8         36E1            call	_outw
18837 4710           83C4                   04  add	sp,*4
18838                                           !BCC_EOS
18839                                           ! 2211  for(i=0;i<cheight;i++)
18840                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18841 4713           30C0                       xor	al,al
18842 4715           8846         FB            mov	-5[bp],al
18843                                           !BCC_EOS
18844                                           !BCC_EOS
18845                                           ! 2212   {
18846 4718           EB           43            jmp .BA
18847                       0000471A            .BB:
18848                                           ! 2213    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18849                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18850 471A           8A46         0A            mov	al,$A[bp]
18851 471D           30E4                       xor	ah,ah
18852 471F           50                         push	ax
18853                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18854 4720           8A46         0C            mov	al,$C[bp]
18855 4723           30E4                       xor	ah,ah
18856 4725           89C3                       mov	bx,ax
18857 4727           8A46         FB            mov	al,-5[bp]
18858 472A           30E4                       xor	ah,ah
18859 472C           89D9                       mov	cx,bx
18860 472E           F7E9                       imul	cx
18861                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18862                                           ! Debug: expression subtree swapping
18863 4730           0346         FE            add	ax,-2[bp]
18864                                           ! Debug: list unsigned int = ax+0 (used reg = )
18865 4733           50                         push	ax
18866                                           ! Debug: list unsigned int = const $A000 (used reg = )
18867 4734           B8                   A000  mov	ax,#$A000
18868 4737           50                         push	ax
18869                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18870 4738           8A46         0C            mov	al,$C[bp]
18871 473B           30E4                       xor	ah,ah
18872 473D           89C3                       mov	bx,ax
18873 473F           8A46         FB            mov	al,-5[bp]
18874 4742           30E4                       xor	ah,ah
18875 4744           89D9                       mov	cx,bx
18876 4746           F7E9                       imul	cx
18877                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18878                                           ! Debug: expression subtree swapping
18879 4748           0346         FC            add	ax,-4[bp]
18880                                           ! Debug: list unsigned int = ax+0 (used reg = )
18881 474B           50                         push	ax
18882                                           ! Debug: list unsigned int = const $A000 (used reg = )
18883 474C           B8                   A000  mov	ax,#$A000
18884 474F           50                         push	ax
18885                                           ! Debug: func () void = memcpyb+0 (used reg = )
18886 4750           E8         35C2            call	_memcpyb
18887 4753           83C4                   0A  add	sp,*$A
18888                                           !BCC_EOS
18889                                           ! 2214   }
18890                                           ! 2215  outw(0x3ce, 0x0005);
18891                       00004756            .B9:
18892                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18893 4756           8A46         FB            mov	al,-5[bp]
18894 4759           40                         inc	ax
18895 475A           8846         FB            mov	-5[bp],al
18896                       0000475D            .BA:
18897                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18898 475D           8A46         FB            mov	al,-5[bp]
18899 4760           3A46         0E            cmp	al,$E[bp]
18900 4763           72           B5            jb 	.BB
18901                       00004765            .BC:
18902                       00004765            .B8:
18903                                           ! Debug: list int = const 5 (used reg = )
18904 4765           B8                   0005  mov	ax,*5
18905 4768           50                         push	ax
18906                                           ! Debug: list int = const $3CE (used reg = )
18907 4769           B8                   03CE  mov	ax,#$3CE
18908 476C           50                         push	ax
18909                                           ! Debug: func () void = outw+0 (used reg = )
18910 476D           E8         3681            call	_outw
18911 4770           83C4                   04  add	sp,*4
18912                                           !BCC_EOS
18913                                           ! 2216 }
18914 4773           89EC                       mov	sp,bp
18915 4775           5D                         pop	bp
18916 4776           C3                         ret
18917                                           ! 2217 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18918                                           ! Register BX used in function vgamem_copy_pl4
18919                                           ! 2218 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18920                       00004777            _vgamem_fill_pl4:
18921                                           !BCC_EOS
18922                                           !BCC_EOS
18923                                           !BCC_EOS
18924                                           !BCC_EOS
18925                                           !BCC_EOS
18926                                           !BCC_EOS
18927                                           ! 2219 {
18928                                           ! 2220  Bit16u dest;
18929                                           !BCC_EOS
18930                                           ! 2221  Bit8u i;
18931                                           !BCC_EOS
18932                                           ! 2222  dest=ystart*cheight*nbcols+xstart;
18933 4777           55                         push	bp
18934 4778           89E5                       mov	bp,sp
18935 477A           83C4                   FC  add	sp,*-4
18936                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18937 477D           8A46         0C            mov	al,$C[bp]
18938 4780           30E4                       xor	ah,ah
18939 4782           89C3                       mov	bx,ax
18940 4784           8A46         06            mov	al,6[bp]
18941 4787           30E4                       xor	ah,ah
18942 4789           89D9                       mov	cx,bx
18943 478B           F7E9                       imul	cx
18944                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18945 478D           89C3                       mov	bx,ax
18946 478F           8A46         0A            mov	al,$A[bp]
18947 4792           30E4                       xor	ah,ah
18948 4794           93                         xchg	ax,bx
18949 4795           89D9                       mov	cx,bx
18950 4797           F7E9                       imul	cx
18951                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18952 4799           0246         04            add	al,4[bp]
18953 479C           80D4                   00  adc	ah,*0
18954                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18955 479F           8946         FE            mov	-2[bp],ax
18956                                           !BCC_EOS
18957                                           ! 2223  outw(0x3ce, 0x0205);
18958                                           ! Debug: list int = const $205 (used reg = )
18959 47A2           B8                   0205  mov	ax,#$205
18960 47A5           50                         push	ax
18961                                           ! Debug: list int = const $3CE (used reg = )
18962 47A6           B8                   03CE  mov	ax,#$3CE
18963 47A9           50                         push	ax
18964                                           ! Debug: func () void = outw+0 (used reg = )
18965 47AA           E8         3644            call	_outw
18966 47AD           83C4                   04  add	sp,*4
18967                                           !BCC_EOS
18968                                           ! 2224  for(i=0;i<cheight;i++)
18969                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18970 47B0           30C0                       xor	al,al
18971 47B2           8846         FD            mov	-3[bp],al
18972                                           !BCC_EOS
18973                                           !BCC_EOS
18974                                           ! 2225   {
18975 47B5           EB           31            jmp .BF
18976                       000047B7            .C0:
18977                                           ! 2226    memsetb(0xa000,dest+i*nbcols,attr,cols);
18978                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18979 47B7           8A46         08            mov	al,8[bp]
18980 47BA           30E4                       xor	ah,ah
18981 47BC           50                         push	ax
18982                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18983 47BD           8A46         0E            mov	al,$E[bp]
18984 47C0           30E4                       xor	ah,ah
18985 47C2           50                         push	ax
18986                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18987 47C3           8A46         0A            mov	al,$A[bp]
18988 47C6           30E4                       xor	ah,ah
18989 47C8           89C3                       mov	bx,ax
18990 47CA           8A46         FD            mov	al,-3[bp]
18991 47CD           30E4                       xor	ah,ah
18992 47CF           89D9                       mov	cx,bx
18993 47D1           F7E9                       imul	cx
18994                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18995                                           ! Debug: expression subtree swapping
18996 47D3           0346         FE            add	ax,-2[bp]
18997                                           ! Debug: list unsigned int = ax+0 (used reg = )
18998 47D6           50                         push	ax
18999                                           ! Debug: list unsigned int = const $A000 (used reg = )
19000 47D7           B8                   A000  mov	ax,#$A000
19001 47DA           50                         push	ax
19002                                           ! Debug: func () void = memsetb+0 (used reg = )
19003 47DB           E8         34ED            call	_memsetb
19004 47DE           83C4                   08  add	sp,*8
19005                                           !BCC_EOS
19006                                           ! 2227   }
19007                                           ! 2228  outw(0x3ce, 0x0005);
19008                       000047E1            .BE:
19009                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19010 47E1           8A46         FD            mov	al,-3[bp]
19011 47E4           40                         inc	ax
19012 47E5           8846         FD            mov	-3[bp],al
19013                       000047E8            .BF:
19014                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19015 47E8           8A46         FD            mov	al,-3[bp]
19016 47EB           3A46         0C            cmp	al,$C[bp]
19017 47EE           72           C7            jb 	.C0
19018                       000047F0            .C1:
19019                       000047F0            .BD:
19020                                           ! Debug: list int = const 5 (used reg = )
19021 47F0           B8                   0005  mov	ax,*5
19022 47F3           50                         push	ax
19023                                           ! Debug: list int = const $3CE (used reg = )
19024 47F4           B8                   03CE  mov	ax,#$3CE
19025 47F7           50                         push	ax
19026                                           ! Debug: func () void = outw+0 (used reg = )
19027 47F8           E8         35F6            call	_outw
19028 47FB           83C4                   04  add	sp,*4
19029                                           !BCC_EOS
19030                                           ! 2229 }
19031 47FE           89EC                       mov	sp,bp
19032 4800           5D                         pop	bp
19033 4801           C3                         ret
19034                                           ! 2230 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
19035                                           ! Register BX used in function vgamem_fill_pl4
19036                                           ! 2231 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
19037                       00004802            _vgamem_copy_cga:
19038                                           !BCC_EOS
19039                                           !BCC_EOS
19040                                           !BCC_EOS
19041                                           !BCC_EOS
19042                                           !BCC_EOS
19043                                           !BCC_EOS
19044                                           ! 2232 {
19045                                           ! 2233  Bit16u src,dest;
19046                                           !BCC_EOS
19047                                           ! 2234  Bit8u i;
19048                                           !BCC_EOS
19049                                           ! 2235  src=((ysrc*cheight*nbcols)>>1)+xstart;
19050 4802           55                         push	bp
19051 4803           89E5                       mov	bp,sp
19052 4805           83C4                   FA  add	sp,*-6
19053                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
19054 4808           8A46         0E            mov	al,$E[bp]
19055 480B           30E4                       xor	ah,ah
19056 480D           89C3                       mov	bx,ax
19057 480F           8A46         06            mov	al,6[bp]
19058 4812           30E4                       xor	ah,ah
19059 4814           89D9                       mov	cx,bx
19060 4816           F7E9                       imul	cx
19061                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19062 4818           89C3                       mov	bx,ax
19063 481A           8A46         0C            mov	al,$C[bp]
19064 481D           30E4                       xor	ah,ah
19065 481F           93                         xchg	ax,bx
19066 4820           89D9                       mov	cx,bx
19067 4822           F7E9                       imul	cx
19068                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19069 4824           D1E8                       shr	ax,*1
19070                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19071 4826           0246         04            add	al,4[bp]
19072 4829           80D4                   00  adc	ah,*0
19073                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
19074 482C           8946         FE            mov	-2[bp],ax
19075                                           !BCC_EOS
19076                                           ! 2236  dest=((ydest*cheight*nbcols)>>1)+xstart;
19077                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
19078 482F           8A46         0E            mov	al,$E[bp]
19079 4832           30E4                       xor	ah,ah
19080 4834           89C3                       mov	bx,ax
19081 4836           8A46         08            mov	al,8[bp]
19082 4839           30E4                       xor	ah,ah
19083 483B           89D9                       mov	cx,bx
19084 483D           F7E9                       imul	cx
19085                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
19086 483F           89C3                       mov	bx,ax
19087 4841           8A46         0C            mov	al,$C[bp]
19088 4844           30E4                       xor	ah,ah
19089 4846           93                         xchg	ax,bx
19090 4847           89D9                       mov	cx,bx
19091 4849           F7E9                       imul	cx
19092                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19093 484B           D1E8                       shr	ax,*1
19094                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
19095 484D           0246         04            add	al,4[bp]
19096 4850           80D4                   00  adc	ah,*0
19097                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
19098 4853           8946         FC            mov	-4[bp],ax
19099                                           !BCC_EOS
19100                                           ! 2237  for(i=0;i<cheight;i++)
19101                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
19102 4856           30C0                       xor	al,al
19103 4858           8846         FB            mov	-5[bp],al
19104                                           !BCC_EOS
19105                                           !BCC_EOS
19106                                           ! 2238   {
19107 485B           E9         00A8            br 	.C4
19108                       0000485E            .C5:
19109                                           ! 2239    if (i & 1)
19110                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
19111 485E           8A46         FB            mov	al,-5[bp]
19112 4861           24                     01  and	al,*1
19113 4863           84C0                       test	al,al
19114 4865           74           56            je  	.C6
19115                       00004867            .C7:
19116                                           ! 2240      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
19117                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19118 4867           8A46         0A            mov	al,$A[bp]
19119 486A           30E4                       xor	ah,ah
19120 486C           50                         push	ax
19121                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19122 486D           8A46         FB            mov	al,-5[bp]
19123 4870           30E4                       xor	ah,ah
19124 4872           D1E8                       shr	ax,*1
19125                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19126 4874           89C3                       mov	bx,ax
19127 4876           8A46         0C            mov	al,$C[bp]
19128 4879           30E4                       xor	ah,ah
19129 487B           93                         xchg	ax,bx
19130 487C           89D9                       mov	cx,bx
19131 487E           F7E9                       imul	cx
19132 4880           50                         push	ax
19133                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
19134                                           ! Debug: expression subtree swapping
19135 4881           8B46         FE            mov	ax,-2[bp]
19136                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19137 4884           05                   2000  add	ax,#$2000
19138 4887           0346         F6            add	ax,-$A[bp]
19139 488A           44                         inc	sp
19140 488B           44                         inc	sp
19141                                           ! Debug: list unsigned int = ax+0 (used reg = )
19142 488C           50                         push	ax
19143                                           ! Debug: list unsigned int = const $B800 (used reg = )
19144 488D           B8                   B800  mov	ax,#$B800
19145 4890           50                         push	ax
19146                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19147 4891           8A46         FB            mov	al,-5[bp]
19148 4894           30E4                       xor	ah,ah
19149 4896           D1E8                       shr	ax,*1
19150                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19151 4898           89C3                       mov	bx,ax
19152 489A           8A46         0C            mov	al,$C[bp]
19153 489D           30E4                       xor	ah,ah
19154 489F           93                         xchg	ax,bx
19155 48A0           89D9                       mov	cx,bx
19156 48A2           F7E9                       imul	cx
19157 48A4           50                         push	ax
19158                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
19159                                           ! Debug: expression subtree swapping
19160 48A5           8B46         FC            mov	ax,-4[bp]
19161                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
19162 48A8           05                   2000  add	ax,#$2000
19163 48AB           0346         F2            add	ax,-$E[bp]
19164 48AE           44                         inc	sp
19165 48AF           44                         inc	sp
19166                                           ! Debug: list unsigned int = ax+0 (used reg = )
19167 48B0           50                         push	ax
19168                                           ! Debug: list unsigned int = const $B800 (used reg = )
19169 48B1           B8                   B800  mov	ax,#$B800
19170 48B4           50                         push	ax
19171                                           ! Debug: func () void = memcpyb+0 (used reg = )
19172 48B5           E8         345D            call	_memcpyb
19173 48B8           83C4                   0A  add	sp,*$A
19174                                           !BCC_EOS
19175                                           ! 2241    else
19176                                           ! 2242      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
19177 48BB           EB           42            jmp .C8
19178                       000048BD            .C6:
19179                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
19180 48BD           8A46         0A            mov	al,$A[bp]
19181 48C0           30E4                       xor	ah,ah
19182 48C2           50                         push	ax
19183                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
19184 48C3           8A46         FB            mov	al,-5[bp]
19185 48C6           30E4                       xor	ah,ah
19186 48C8           D1E8                       shr	ax,*1
19187                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
19188 48CA           89C3                       mov	bx,ax
19189 48CC           8A46         0C            mov	al,$C[bp]
19190 48CF           30E4                       xor	ah,ah
19191 48D1           93                         xchg	ax,bx
19192 48D2           89D9                       mov	cx,bx
19193 48D4           F7E9                       imul	cx
19194                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
19195                                           ! Debug: expression subtree swapping
19196 48D6           0346         FE            add	ax,-2[bp]
19197                                           ! Debug: list unsigned int = ax+0 (used reg = )
19198 48D9           50                         push	ax
19199                                           ! Debug: list unsigned int = const $B800 (used reg = )
19200 48DA           B8                   B800  mov	ax,#$B800
19201 48DD           50                         push	ax
19202                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
19203 48DE           8A46         FB            mov	al,-5[bp]
19204 48E1           30E4                       xor	ah,ah
19205 48E3           D1E8                       shr	ax,*1
19206                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
19207 48E5           89C3                       mov	bx,ax
19208 48E7           8A46         0C            mov	al,$C[bp]
19209 48EA           30E4                       xor	ah,ah
19210 48EC           93                         xchg	ax,bx
19211 48ED           89D9                       mov	cx,bx
19212 48EF           F7E9                       imul	cx
19213                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
19214                                           ! Debug: expression subtree swapping
19215 48F1           0346         FC            add	ax,-4[bp]
19216                                           ! Debug: list unsigned int = ax+0 (used reg = )
19217 48F4           50                         push	ax
19218                                           ! Debug: list unsigned int = const $B800 (used reg = )
19219 48F5           B8                   B800  mov	ax,#$B800
19220 48F8           50                         push	ax
19221                                           ! Debug: func () void = memcpyb+0 (used reg = )
19222 48F9           E8         3419            call	_memcpyb
19223 48FC           83C4                   0A  add	sp,*$A
19224                                           !BCC_EOS
19225                                           ! 2243   }
19226                       000048FF            .C8:
19227                                           ! 2244 }
19228                       000048FF            .C3:
19229                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
19230 48FF           8A46         FB            mov	al,-5[bp]
19231 4902           40                         inc	ax
19232 4903           8846         FB            mov	-5[bp],al
19233                       00004906            .C4:
19234                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
19235 4906           8A46         FB            mov	al,-5[bp]
19236 4909           3A46         0E            cmp	al,$E[bp]
19237 490C         0F82         FF4E            blo 	.C5
19238                       00004910            .C9:
19239                       00004910            .C2:
19240 4910           89EC                       mov	sp,bp
19241 4912           5D                         pop	bp
19242 4913           C3                         ret
19243                                           ! 2245 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
19244                                           ! Register BX used in function vgamem_copy_cga
19245                                           ! 2246 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
19246                       00004914            _vgamem_fill_cga:
19247                                           !BCC_EOS
19248                                           !BCC_EOS
19249                                           !BCC_EOS
19250                                           !BCC_EOS
19251                                           !BCC_EOS
19252                                           !BCC_EOS
19253                                           ! 2247 {
19254                                           ! 2248  Bit16u dest;
19255                                           !BCC_EOS
19256                                           ! 2249  Bit8u i;
19257                                           !BCC_EOS
19258                                           ! 2250  dest=((ystart*cheight*nbcols)>>1)+xstart;
19259 4914           55                         push	bp
19260 4915           89E5                       mov	bp,sp
19261 4917           83C4                   FC  add	sp,*-4
19262                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
19263 491A           8A46         0C            mov	al,$C[bp]
19264 491D           30E4                       xor	ah,ah
19265 491F           89C3                       mov	bx,ax
19266 4921           8A46         06            mov	al,6[bp]
19267 4924           30E4                       xor	ah,ah
19268 4926           89D9                       mov	cx,bx
19269 4928           F7E9                       imul	cx
19270                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
19271 492A           89C3                       mov	bx,ax
19272 492C           8A46         0A            mov	al,$A[bp]
19273 492F           30E4                       xor	ah,ah
19274 4931           93                         xchg	ax,bx
19275 4932           89D9                       mov	cx,bx
19276 4934           F7E9                       imul	cx
19277                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
19278 4936           D1E8                       shr	ax,*1
19279                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
19280 4938           0246         04            add	al,4[bp]
19281 493B           80D4                   00  adc	ah,*0
19282                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
19283 493E           8946         FE            mov	-2[bp],ax
19284                                           !BCC_EOS
19285                                           ! 2251  for(i=0;i<cheight;i++)
19286                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
19287 4941           30C0                       xor	al,al
19288 4943           8846         FD            mov	-3[bp],al
19289                                           !BCC_EOS
19290                                           !BCC_EOS
19291                                           ! 2252   {
19292 4946           EB           75            jmp .CC
19293                       00004948            .CD:
19294                                           ! 2253    if (i & 1)
19295                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
19296 4948           8A46         FD            mov	al,-3[bp]
19297 494B           24                     01  and	al,*1
19298 494D           84C0                       test	al,al
19299 494F           74           38            je  	.CE
19300                       00004951            .CF:
19301                                           ! 2254      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
19302                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19303 4951           8A46         08            mov	al,8[bp]
19304 4954           30E4                       xor	ah,ah
19305 4956           50                         push	ax
19306                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19307 4957           8A46         0E            mov	al,$E[bp]
19308 495A           30E4                       xor	ah,ah
19309 495C           50                         push	ax
19310                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19311 495D           8A46         FD            mov	al,-3[bp]
19312 4960           30E4                       xor	ah,ah
19313 4962           D1E8                       shr	ax,*1
19314                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19315 4964           89C3                       mov	bx,ax
19316 4966           8A46         0A            mov	al,$A[bp]
19317 4969           30E4                       xor	ah,ah
19318 496B           93                         xchg	ax,bx
19319 496C           89D9                       mov	cx,bx
19320 496E           F7E9                       imul	cx
19321 4970           50                         push	ax
19322                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
19323                                           ! Debug: expression subtree swapping
19324 4971           8B46         FE            mov	ax,-2[bp]
19325                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
19326 4974           05                   2000  add	ax,#$2000
19327 4977           0346         F6            add	ax,-$A[bp]
19328 497A           44                         inc	sp
19329 497B           44                         inc	sp
19330                                           ! Debug: list unsigned int = ax+0 (used reg = )
19331 497C           50                         push	ax
19332                                           ! Debug: list unsigned int = const $B800 (used reg = )
19333 497D           B8                   B800  mov	ax,#$B800
19334 4980           50                         push	ax
19335                                           ! Debug: func () void = memsetb+0 (used reg = )
19336 4981           E8         3347            call	_memsetb
19337 4984           83C4                   08  add	sp,*8
19338                                           !BCC_EOS
19339                                           ! 2255    else
19340                                           ! 2256      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
19341 4987           EB           2D            jmp .D0
19342                       00004989            .CE:
19343                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
19344 4989           8A46         08            mov	al,8[bp]
19345 498C           30E4                       xor	ah,ah
19346 498E           50                         push	ax
19347                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
19348 498F           8A46         0E            mov	al,$E[bp]
19349 4992           30E4                       xor	ah,ah
19350 4994           50                         push	ax
19351                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
19352 4995           8A46         FD            mov	al,-3[bp]
19353 4998           30E4                       xor	ah,ah
19354 499A           D1E8                       shr	ax,*1
19355                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
19356 499C           89C3                       mov	bx,ax
19357 499E           8A46         0A            mov	al,$A[bp]
19358 49A1           30E4                       xor	ah,ah
19359 49A3           93                         xchg	ax,bx
19360 49A4           89D9                       mov	cx,bx
19361 49A6           F7E9                       imul	cx
19362                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
19363                                           ! Debug: expression subtree swapping
19364 49A8           0346         FE            add	ax,-2[bp]
19365                                           ! Debug: list unsigned int = ax+0 (used reg = )
19366 49AB           50                         push	ax
19367                                           ! Debug: list unsigned int = const $B800 (used reg = )
19368 49AC           B8                   B800  mov	ax,#$B800
19369 49AF           50                         push	ax
19370                                           ! Debug: func () void = memsetb+0 (used reg = )
19371 49B0           E8         3318            call	_memsetb
19372 49B3           83C4                   08  add	sp,*8
19373                                           !BCC_EOS
19374                                           ! 2257   }
19375                       000049B6            .D0:
19376                                           ! 2258 }
19377                       000049B6            .CB:
19378                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
19379 49B6           8A46         FD            mov	al,-3[bp]
19380 49B9           40                         inc	ax
19381 49BA           8846         FD            mov	-3[bp],al
19382                       000049BD            .CC:
19383                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
19384 49BD           8A46         FD            mov	al,-3[bp]
19385 49C0           3A46         0C            cmp	al,$C[bp]
19386 49C3           72           83            jb 	.CD
19387                       000049C5            .D1:
19388                       000049C5            .CA:
19389 49C5           89EC                       mov	sp,bp
19390 49C7           5D                         pop	bp
19391 49C8           C3                         ret
19392                                           ! 2259 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
19393                                           ! Register BX used in function vgamem_fill_cga
19394                                           ! 2260 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
19395                       000049C9            _biosfn_scroll:
19396                                           !BCC_EOS
19397                                           !BCC_EOS
19398                                           !BCC_EOS
19399                                           !BCC_EOS
19400                                           !BCC_EOS
19401                                           !BCC_EOS
19402                                           !BCC_EOS
19403                                           !BCC_EOS
19404                                           ! 2261 {
19405                                           ! 2262  Bit8u mode,line,cheight,bpp,cols;
19406                                           !BCC_EOS
19407                                           ! 2263  Bit16u nbcols,nbrows,i;
19408                                           !BCC_EOS
19409                                           ! 2264  Bit16u address;
19410                                           !BCC_EOS
19411                                           ! 2265  if(rul>rlr)return;
19412 49C9           55                         push	bp
19413 49CA           89E5                       mov	bp,sp
19414 49CC           83C4                   F2  add	sp,*-$E
19415                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
19416 49CF           8A46         08            mov	al,8[bp]
19417 49D2           3A46         0C            cmp	al,$C[bp]
19418 49D5           76           04            jbe 	.D2
19419                       000049D7            .D3:
19420 49D7           89EC                       mov	sp,bp
19421 49D9           5D                         pop	bp
19422 49DA           C3                         ret
19423                                           !BCC_EOS
19424                                           ! 2266  if(cul>clr)return;
19425                       000049DB            .D2:
19426                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
19427 49DB           8A46         0A            mov	al,$A[bp]
19428 49DE           3A46         0E            cmp	al,$E[bp]
19429 49E1           76           04            jbe 	.D4
19430                       000049E3            .D5:
19431 49E3           89EC                       mov	sp,bp
19432 49E5           5D                         pop	bp
19433 49E6           C3                         ret
19434                                           !BCC_EOS
19435                                           ! 2267  mode=read_byte(0x40,0x49);
19436                       000049E7            .D4:
19437                                           ! Debug: list int = const $49 (used reg = )
19438 49E7           B8                   0049  mov	ax,*$49
19439 49EA           50                         push	ax
19440                                           ! Debug: list int = const $40 (used reg = )
19441 49EB           B8                   0040  mov	ax,*$40
19442 49EE           50                         push	ax
19443                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19444 49EF           E8         3383            call	_read_byte
19445 49F2           83C4                   04  add	sp,*4
19446                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19447 49F5           8846         FF            mov	-1[bp],al
19448                                           !BCC_EOS
19449                                           ! 2268  line=find_vga_entry(mode);
19450                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19451 49F8           8A46         FF            mov	al,-1[bp]
19452 49FB           30E4                       xor	ah,ah
19453 49FD           50                         push	ax
19454                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19455 49FE           E8         3288            call	_find_vga_entry
19456 4A01           44                         inc	sp
19457 4A02           44                         inc	sp
19458                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19459 4A03           8846         FE            mov	-2[bp],al
19460                                           !BCC_EOS
19461                                           ! 2269  if(line==0xFF)return;
19462                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19463 4A06           8A46         FE            mov	al,-2[bp]
19464 4A09           3C                     FF  cmp	al,#$FF
19465 4A0B           75           04            jne 	.D6
19466                       00004A0D            .D7:
19467 4A0D           89EC                       mov	sp,bp
19468 4A0F           5D                         pop	bp
19469 4A10           C3                         ret
19470                                           !BCC_EOS
19471                                           ! 2270  nbrows=read_byte(0x40,0x84)+1;
19472                       00004A11            .D6:
19473                                           ! Debug: list int = const $84 (used reg = )
19474 4A11           B8                   0084  mov	ax,#$84
19475 4A14           50                         push	ax
19476                                           ! Debug: list int = const $40 (used reg = )
19477 4A15           B8                   0040  mov	ax,*$40
19478 4A18           50                         push	ax
19479                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19480 4A19           E8         3359            call	_read_byte
19481 4A1C           83C4                   04  add	sp,*4
19482                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19483 4A1F           30E4                       xor	ah,ah
19484                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19485 4A21           40                         inc	ax
19486 4A22           8946         F6            mov	-$A[bp],ax
19487                                           !BCC_EOS
19488                                           ! 2271  nbcols=read_word(0x40,0x4A);
19489                                           ! Debug: list int = const $4A (used reg = )
19490 4A25           B8                   004A  mov	ax,*$4A
19491 4A28           50                         push	ax
19492                                           ! Debug: list int = const $40 (used reg = )
19493 4A29           B8                   0040  mov	ax,*$40
19494 4A2C           50                         push	ax
19495                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19496 4A2D           E8         3358            call	_read_word
19497 4A30           83C4                   04  add	sp,*4
19498                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19499 4A33           8946         F8            mov	-8[bp],ax
19500                                           !BCC_EOS
19501                                           ! 2272  if(page==0xFF)
19502                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19503 4A36           8A46         10            mov	al,$10[bp]
19504 4A39           3C                     FF  cmp	al,#$FF
19505 4A3B           75           11            jne 	.D8
19506                       00004A3D            .D9:
19507                                           ! 2273   page=read_byte(0x40,0x62);
19508                                           ! Debug: list int = const $62 (used reg = )
19509 4A3D           B8                   0062  mov	ax,*$62
19510 4A40           50                         push	ax
19511                                           ! Debug: list int = const $40 (used reg = )
19512 4A41           B8                   0040  mov	ax,*$40
19513 4A44           50                         push	ax
19514                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19515 4A45           E8         332D            call	_read_byte
19516 4A48           83C4                   04  add	sp,*4
19517                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19518 4A4B           8846         10            mov	$10[bp],al
19519                                           !BCC_EOS
19520                                           ! 2274  if(rlr>=nbrows)rlr=nbrows-1;
19521                       00004A4E            .D8:
19522                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19523 4A4E           8A46         0C            mov	al,$C[bp]
19524 4A51           30E4                       xor	ah,ah
19525 4A53           3B46         F6            cmp	ax,-$A[bp]
19526 4A56           72           07            jb  	.DA
19527                       00004A58            .DB:
19528                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19529 4A58           8B46         F6            mov	ax,-$A[bp]
19530                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19531 4A5B           48                         dec	ax
19532 4A5C           8846         0C            mov	$C[bp],al
19533                                           !BCC_EOS
19534                                           ! 2275  if(clr>=n
19535                       00004A5F            .DA:
19536                                           ! 2275 bcols)clr=nbcols-1;
19537                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19538 4A5F           8A46         0E            mov	al,$E[bp]
19539 4A62           30E4                       xor	ah,ah
19540 4A64           3B46         F8            cmp	ax,-8[bp]
19541 4A67           72           07            jb  	.DC
19542                       00004A69            .DD:
19543                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19544 4A69           8B46         F8            mov	ax,-8[bp]
19545                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19546 4A6C           48                         dec	ax
19547 4A6D           8846         0E            mov	$E[bp],al
19548                                           !BCC_EOS
19549                                           ! 2276  if(nblines>nbrows)nblines=0;
19550                       00004A70            .DC:
19551                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19552 4A70           8A46         04            mov	al,4[bp]
19553 4A73           30E4                       xor	ah,ah
19554 4A75           3B46         F6            cmp	ax,-$A[bp]
19555 4A78           76           05            jbe 	.DE
19556                       00004A7A            .DF:
19557                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19558 4A7A           30C0                       xor	al,al
19559 4A7C           8846         04            mov	4[bp],al
19560                                           !BCC_EOS
19561                                           ! 2277  cols=clr-cul+1;
19562                       00004A7F            .DE:
19563                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19564 4A7F           8A46         0E            mov	al,$E[bp]
19565 4A82           30E4                       xor	ah,ah
19566 4A84           2A46         0A            sub	al,$A[bp]
19567 4A87           80DC                   00  sbb	ah,*0
19568                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19569                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19570 4A8A           40                         inc	ax
19571 4A8B           8846         FB            mov	-5[bp],al
19572                                           !BCC_EOS
19573                                           ! 2278  if(vga_modes[line].class==0x00)
19574                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19575 4A8E           8A46         FE            mov	al,-2[bp]
19576 4A91           30E4                       xor	ah,ah
19577 4A93           B1                     03  mov	cl,*3
19578 4A95           D3E0                       shl	ax,cl
19579 4A97           89C3                       mov	bx,ax
19580 4A99           81C3                 020B  add	bx,#_vga_modes
19581                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19582 4A9D           8A47         01            mov	al,1[bx]
19583 4AA0           84C0                       test	al,al
19584 4AA2         0F85         0269            bne 	.E0
19585                       00004AA6            .E1:
19586                                           ! 2279   {
19587                                           ! 2280    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19588                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19589 4AA6           8B46         F8            mov	ax,-8[bp]
19590 4AA9           8B4E         F6            mov	cx,-$A[bp]
19591 4AAC           F7E9                       imul	cx
19592                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19593 4AAE           D1E0                       shl	ax,*1
19594                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19595 4AB0           0C                     FF  or	al,#$FF
19596                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19597                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19598 4AB2           89C3                       mov	bx,ax
19599 4AB4           8A46         10            mov	al,$10[bp]
19600 4AB7           30E4                       xor	ah,ah
19601 4AB9           93                         xchg	ax,bx
19602 4ABA           40                         inc	ax
19603 4ABB           89D9                       mov	cx,bx
19604 4ABD           F7E9                       imul	cx
19605                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19606 4ABF           8946         F2            mov	-$E[bp],ax
19607                                           !BCC_EOS
19608                                           ! 2281    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19609                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19610 4AC2           8A46         10            mov	al,$10[bp]
19611 4AC5           30E4                       xor	ah,ah
19612 4AC7           50                         push	ax
19613                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19614 4AC8           FF76         F8            push	-8[bp]
19615                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19616 4ACB           FF76         F6            push	-$A[bp]
19617                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19618 4ACE           FF76         F2            push	-$E[bp]
19619                                           ! Debug: list * char = .E2+0 (used reg = )
19620 4AD1           BB                   A158  mov	bx,#.E2
19621 4AD4           53                         push	bx
19622                                           ! Debug: func () void = printf+0 (used reg = )
19623 4AD5           E8         3348            call	_printf
19624 4AD8           83C4                   0A  add	sp,*$A
19625                                           !BCC_EOS
19626                                           ! 2282    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19627                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19628 4ADB           8A46         04            mov	al,4[bp]
19629 4ADE           84C0                       test	al,al
19630 4AE0           75           67            jne 	.E3
19631                       00004AE2            .E8:
19632                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19633 4AE2           8A46         08            mov	al,8[bp]
19634 4AE5           84C0                       test	al,al
19635 4AE7           75           60            jne 	.E3
19636                       00004AE9            .E7:
19637                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19638 4AE9           8A46         0A            mov	al,$A[bp]
19639 4AEC           84C0                       test	al,al
19640 4AEE           75           59            jne 	.E3
19641                       00004AF0            .E6:
19642                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19643 4AF0           8B46         F6            mov	ax,-$A[bp]
19644                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19645                                           ! Debug: expression subtree swapping
19646 4AF3           48                         dec	ax
19647 4AF4           50                         push	ax
19648 4AF5           8A46         0C            mov	al,$C[bp]
19649 4AF8           30E4                       xor	ah,ah
19650 4AFA           3B46         F0            cmp	ax,-$10[bp]
19651 4AFD           8D66         F2            lea	sp,-$E[bp]
19652 4B00           75           47            jne 	.E3
19653                       00004B02            .E5:
19654                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19655 4B02           8B46         F8            mov	ax,-8[bp]
19656                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19657                                           ! Debug: expression subtree swapping
19658 4B05           48                         dec	ax
19659 4B06           50                         push	ax
19660 4B07           8A46         0E            mov	al,$E[bp]
19661 4B0A           30E4                       xor	ah,ah
19662 4B0C           3B46         F0            cmp	ax,-$10[bp]
19663 4B0F           8D66         F2            lea	sp,-$E[bp]
19664 4B12           75           35            jne 	.E3
19665                       00004B14            .E4:
19666                                           ! 2283     {
19667                                           ! 2284      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19668                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19669 4B14           8B46         F6            mov	ax,-$A[bp]
19670 4B17           8B4E         F8            mov	cx,-8[bp]
19671 4B1A           F7E9                       imul	cx
19672                                           ! Debug: list unsigned int = ax+0 (used reg = )
19673 4B1C           50                         push	ax
19674                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19675 4B1D           8A46         06            mov	al,6[bp]
19676 4B20           30E4                       xor	ah,ah
19677                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19678 4B22           B9                   0100  mov	cx,#$100
19679 4B25           F7E9                       imul	cx
19680                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19681                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19682 4B27           05                   0020  add	ax,*$20
19683 4B2A           50                         push	ax
19684                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19685 4B2B           FF76         F2            push	-$E[bp]
19686                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19687 4B2E           8A46         FE            mov	al,-2[bp]
19688 4B31           30E4                       xor	ah,ah
19689 4B33           B1                     03  mov	cl,*3
19690 4B35           D3E0                       shl	ax,cl
19691 4B37           89C3                       mov	bx,ax
19692 4B39           81C3                 020B  add	bx,#_vga_modes
19693                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19694 4B3D           FF77         04            push	4[bx]
19695                                           ! Debug: func () void = memsetw+0 (used reg = )
19696 4B40           E8         31AD            call	_memsetw
19697 4B43           83C4                   08  add	sp,*8
19698                                           !BCC_EOS
19699                                           ! 2285     }
19700                                           ! 2286    else
19701                                           ! 2287     {
19702 4B46           E9         01C3            br 	.E9
19703                       00004B49            .E3:
19704                                           ! 2288      if(dir==1)
19705                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19706 4B49           8A46         12            mov	al,$12[bp]
19707 4B4C           3C                     01  cmp	al,*1
19708 4B4E         0F85         00DC            bne 	.EA
19709                       00004B52            .EB:
19710                                           ! 2289       {for(i=rul;i<=rlr;i++)
19711                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19712 4B52           8A46         08            mov	al,8[bp]
19713 4B55           30E4                       xor	ah,ah
19714 4B57           8946         F4            mov	-$C[bp],ax
19715                                           !BCC_EOS
19716                                           !BCC_EOS
19717                                           ! 2290         {
19718 4B5A           E9         00C2            br 	.EE
19719                       00004B5D            .EF:
19720                                           ! 2291          if((i+nblines>rlr)||(nblines==0))
19721                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19722 4B5D           8B46         F4            mov	ax,-$C[bp]
19723 4B60           0246         04            add	al,4[bp]
19724 4B63           80D4                   00  adc	ah,*0
19725                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19726 4B66           50                         push	ax
19727 4B67           8A46         0C            mov	al,$C[bp]
19728 4B6A           30E4                       xor	ah,ah
19729 4B6C           3B46         F0            cmp	ax,-$10[bp]
19730 4B6F           8D66         F2            lea	sp,-$E[bp]
19731 4B72           72           07            jb  	.F1
19732                       00004B74            .F2:
19733                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19734 4B74           8A46         04            mov	al,4[bp]
19735 4B77           84C0                       test	al,al
19736 4B79           75           42            jne 	.F0
19737                       00004B7B            .F1:
19738                                           ! 2292           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19739                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19740 4B7B           8A46         FB            mov	al,-5[bp]
19741 4B7E           30E4                       xor	ah,ah
19742 4B80           50                         push	ax
19743                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19744 4B81           8A46         06            mov	al,6[bp]
19745 4B84           30E4                       xor	ah,ah
19746                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19747 4B86           B9                   0100  mov	cx,#$100
19748 4B89           F7E9                       imul	cx
19749                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19750                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19751 4B8B           05                   0020  add	ax,*$20
19752 4B8E           50                         push	ax
19753                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19754 4B8F           8B46         F4            mov	ax,-$C[bp]
19755 4B92           8B4E         F8            mov	cx,-8[bp]
19756 4B95           F7E9                       imul	cx
19757                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19758 4B97           0246         0A            add	al,$A[bp]
19759 4B9A           80D4                   00  adc	ah,*0
19760                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19761 4B9D           D1E0                       shl	ax,*1
19762                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19763                                           ! Debug: expression subtree swapping
19764 4B9F           0346         F2            add	ax,-$E[bp]
19765                                           ! Debug: list unsigned int = ax+0 (used reg = )
19766 4BA2           50                         push	ax
19767                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19768 4BA3           8A46         FE            mov	al,-2[bp]
19769 4BA6           30E4                       xor	ah,ah
19770 4BA8           B1                     03  mov	cl,*3
19771 4BAA           D3E0                       shl	ax,cl
19772 4BAC           89C3                       mov	bx,ax
19773 4BAE           81C3                 020B  add	bx,#_vga_modes
19774                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19775 4BB2           FF77         04            push	4[bx]
19776                                           ! Debug: func () void = memsetw+0 (used reg = )
19777 4BB5           E8         3138            call	_memsetw
19778 4BB8           83C4                   08  add	sp,*8
19779                                           !BCC_EOS
19780                                           ! 2293          else
19781                                           ! 2294           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19782 4BBB           EB           5B            jmp .F3
19783                       00004BBD            .F0:
19784                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19785 4BBD           8A46         FB            mov	al,-5[bp]
19786 4BC0           30E4                       xor	ah,ah
19787 4BC2           50                         push	ax
19788                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19789 4BC3           8B46         F4            mov	ax,-$C[bp]
19790 4BC6           0246         04            add	al,4[bp]
19791 4BC9           80D4                   00  adc	ah,*0
19792                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19793 4BCC           8B4E         F8            mov	cx,-8[bp]
19794 4BCF           F7E9                       imul	cx
19795                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19796 4BD1           0246         0A            add	al,$A[bp]
19797 4BD4           80D4                   00  adc	ah,*0
19798                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19799 4BD7           D1E0                       shl	ax,*1
19800                                           ! Debug: list unsigned int = ax+0 (used reg = )
19801 4BD9           50                         push	ax
19802                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19803 4BDA           8A46         FE            mov	al,-2[bp]
19804 4BDD           30E4                       xor	ah,ah
19805 4BDF           B1                     03  mov	cl,*3
19806 4BE1           D3E0                       shl	ax,cl
19807 4BE3           89C3                       mov	bx,ax
19808 4BE5           81C3                 020B  add	bx,#_vga_modes
19809                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19810 4BE9           FF77         04            push	4[bx]
19811                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19812 4BEC           8B46         F4            mov	ax,-$C[bp]
19813 4BEF           8B4E         F8            mov	cx,-8[bp]
19814 4BF2           F7E9                       imul	cx
19815                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19816 4BF4           0246         0A            add	al,$A[bp]
19817 4BF7           80D4                   00  adc	ah,*0
19818                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19819 4BFA           D1E0                       shl	ax,*1
19820                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19821                                           ! Debug: expression subtree swapping
19822 4BFC           0346         F2            add	ax,-$E[bp]
19823                                           ! Debug: list unsigned int = ax+0 (used reg = )
19824 4BFF           50                         push	ax
19825                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19826 4C00           8A46         FE            mov	al,-2[bp]
19827 4C03           30E4                       xor	ah,ah
19828 4C05           B1                     03  mov	cl,*3
19829 4C07           D3E0                       shl	ax,cl
19830 4C09           89C3                       mov	bx,ax
19831 4C0B           81C3                 020B  add	bx,#_vga_modes
19832                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19833 4C0F           FF77         04            push	4[bx]
19834                                           ! Debug: func () void = memcpyw+0 (used reg = )
19835 4C12           E8         3130            call	_memcpyw
19836 4C15           83C4                   0A  add	sp,*$A
19837                                           !BCC_EOS
19838                                           ! 2295         }
19839                       00004C18            .F3:
19840                                           ! 2296       }
19841                       00004C18            .ED:
19842                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19843 4C18           8B46         F4            mov	ax,-$C[bp]
19844 4C1B           40                         inc	ax
19845 4C1C           8946         F4            mov	-$C[bp],ax
19846                       00004C1F            .EE:
19847                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19848 4C1F           8A46         0C            mov	al,$C[bp]
19849 4C22           30E4                       xor	ah,ah
19850 4C24           3B46         F4            cmp	ax,-$C[bp]
19851 4C27         0F83         FF32            bhis	.EF
19852                       00004C2B            .F4:
19853                       00004C2B            .EC:
19854                                           ! 2297      else
19855                                           ! 2298       {for(i=rlr;i>=rul;i--)
19856 4C2B           E9         00DE            br 	.F5
19857                       00004C2E            .EA:
19858                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19859 4C2E           8A46         0C            mov	al,$C[bp]
19860 4C31           30E4                       xor	ah,ah
19861 4C33           8946         F4            mov	-$C[bp],ax
19862                                           !BCC_EOS
19863                                           !BCC_EOS
19864                                           ! 2299         {
19865 4C36           E9         00C7            br 	.F8
19866                       00004C39            .F9:
19867                                           ! 2300          if((i<rul+nblines)||(nblines==0))
19868                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19869 4C39           8A46         08            mov	al,8[bp]
19870 4C3C           30E4                       xor	ah,ah
19871 4C3E           0246         04            add	al,4[bp]
19872 4C41           80D4                   00  adc	ah,*0
19873                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19874 4C44           3B46         F4            cmp	ax,-$C[bp]
19875 4C47           77           07            ja  	.FB
19876                       00004C49            .FC:
19877                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19878 4C49           8A46         04            mov	al,4[bp]
19879 4C4C           84C0                       test	al,al
19880 4C4E           75           42            jne 	.FA
19881                       00004C50            .FB:
19882                                           ! 2301           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19883                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19884 4C50           8A46         FB            mov	al,-5[bp]
19885 4C53           30E4                       xor	ah,ah
19886 4C55           50                         push	ax
19887                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19888 4C56           8A46         06            mov	al,6[bp]
19889 4C59           30E4                       xor	ah,ah
19890                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19891 4C5B           B9                   0100  mov	cx,#$100
19892 4C5E           F7E9                       imul	cx
19893                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19894                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19895 4C60           05                   0020  add	ax,*$20
19896 4C63           50                         push	ax
19897                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19898 4C64           8B46         F4            mov	ax,-$C[bp]
19899 4C67           8B4E         F8            mov	cx,-8[bp]
19900 4C6A           F7E9                       imul	cx
19901                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19902 4C6C           0246         0A            add	al,$A[bp]
19903 4C6F           80D4                   00  adc	ah,*0
19904                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19905 4C72           D1E0                       shl	ax,*1
19906                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19907                                           ! Debug: expression subtree swapping
19908 4C74           0346         F2            add	ax,-$E[bp]
19909                                           ! Debug: list unsigned int = ax+0 (used reg = )
19910 4C77           50                         push	ax
19911                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19912 4C78           8A46         FE            mov	al,-2[bp]
19913 4C7B           30E4                       xor	ah,ah
19914 4C7D           B1                     03  mov	cl,*3
19915 4C7F           D3E0                       shl	ax,cl
19916 4C81           89C3                       mov	bx,ax
19917 4C83           81C3                 020B  add	bx,#_vga_modes
19918                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19919 4C87           FF77         04            push	4[bx]
19920                                           ! Debug: func () void = memsetw+0 (used reg = )
19921 4C8A           E8         3063            call	_memsetw
19922 4C8D           83C4                   08  add	sp,*8
19923                                           !BCC_EOS
19924                                           ! 2302          else
19925                                           ! 2303           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19926 4C90           EB           5B            jmp .FD
19927                       00004C92            .FA:
19928                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19929 4C92           8A46         FB            mov	al,-5[bp]
19930 4C95           30E4                       xor	ah,ah
19931 4C97           50                         push	ax
19932                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19933 4C98           8B46         F4            mov	ax,-$C[bp]
19934 4C9B           2A46         04            sub	al,4[bp]
19935 4C9E           80DC                   00  sbb	ah,*0
19936                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19937 4CA1           8B4E         F8            mov	cx,-8[bp]
19938 4CA4           F7E9                       imul	cx
19939                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19940 4CA6           0246         0A            add	al,$A[bp]
19941 4CA9           80D4                   00  adc	ah,*0
19942                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19943 4CAC           D1E0                       shl	ax,*1
19944                                           ! Debug: list unsigned int = ax+0 (used reg = )
19945 4CAE           50                         push	ax
19946                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19947 4CAF           8A46         FE            mov	al,-2[bp]
19948 4CB2           30E4                       xor	ah,ah
19949 4CB4           B1                     03  mov	cl,*3
19950 4CB6           D3E0                       shl	ax,cl
19951 4CB8           89C3                       mov	bx,ax
19952 4CBA           81C3                 020B  add	bx,#_vga_modes
19953                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19954 4CBE           FF77         04            push	4[bx]
19955                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19956 4CC1           8B46         F4            mov	ax,-$C[bp]
19957 4CC4           8B4E         F8            mov	cx,-8[bp]
19958 4CC7           F7E9                       imul	cx
19959                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19960 4CC9           0246         0A            add	al,$A[bp]
19961 4CCC           80D4                   00  adc	ah,*0
19962                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19963 4CCF           D1E0                       shl	ax,*1
19964                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19965                                           ! Debug: expression subtree swapping
19966 4CD1           0346         F2            add	ax,-$E[bp]
19967                                           ! Debug: list unsigned int = ax+0 (used reg = )
19968 4CD4           50                         push	ax
19969                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19970 4CD5           8A46         FE            mov	al,-2[bp]
19971 4CD8           30E4                       xor	ah,ah
19972 4CDA           B1                     03  mov	cl,*3
19973 4CDC           D3E0                       shl	ax,cl
19974 4CDE           89C3                       mov	bx,ax
19975 4CE0           81C3                 020B  add	bx,#_vga_modes
19976                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19977 4CE4           FF77         04            push	4[bx]
19978                                           ! Debug: func () void = memcpyw+0 (used reg = )
19979 4CE7           E8         305B            call	_memcpyw
19980 4CEA           83C4                   0A  add	sp,*$A
19981                                           !BCC_EOS
19982                                           ! 2304          if (i>rlr) break;
19983                       00004CED            .FD:
19984                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19985 4CED           8A46         0C            mov	al,$C[bp]
19986 4CF0           30E4                       xor	ah,ah
19987 4CF2           3B46         F4            cmp	ax,-$C[bp]
19988 4CF5           73           02            jae 	.FE
19989                       00004CF7            .FF:
19990 4CF7           EB           13            jmp .F6
19991                                           !BCC_EOS
19992                                           ! 2305         }
19993                       00004CF9            .FE:
19994                                           ! 2306       }
19995                       00004CF9            .F7:
19996                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19997 4CF9           8B46         F4            mov	ax,-$C[bp]
19998 4CFC           48                         dec	ax
19999 4CFD           8946         F4            mov	-$C[bp],ax
20000                       00004D00            .F8:
20001                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20002 4D00           8A46         08            mov	al,8[bp]
20003 4D03           30E4                       xor	ah,ah
20004 4D05           3B46         F4            cmp	ax,-$C[bp]
20005 4D08         0F86         FF2D            blos	.F9
20006                       00004D0C            .100:
20007                       00004D0C            .F6:
20008                                           ! 2307     }
20009                       00004D0C            .F5:
20010                                           ! 2308   }
20011                       00004D0C            .E9:
20012                                           ! 2309  else
20013                                           ! 2310   {
20014 4D0C           E9         03E3            br 	.101
20015                       00004D0F            .E0:
20016                                           ! 2311    cheight=video_param_table[line_to_vpti[line]].cheight;
20017                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
20018 4D0F           8A46         FE            mov	al,-2[bp]
20019 4D12           30E4                       xor	ah,ah
20020 4D14           89C3                       mov	bx,ax
20021                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
20022 4D16           8A87       028B            mov	al,_line_to_vpti[bx]
20023 4D1A           30E4                       xor	ah,ah
20024 4D1C           B1                     06  mov	cl,*6
20025 4D1E           D3E0                       shl	ax,cl
20026 4D20           89C3                       mov	bx,ax
20027 4D22           81C3                 029F  add	bx,#_video_param_table
20028                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
20029 4D26           8A47         02            mov	al,2[bx]
20030 4D29           8846         FD            mov	-3[bp],al
20031                                           !BCC_EOS
20032                                           ! 2312    switch(vga_modes[line].memmodel)
20033                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20034 4D2C           8A46         FE            mov	al,-2[bp]
20035 4D2F           30E4                       xor	ah,ah
20036 4D31           B1                     03  mov	cl,*3
20037 4D33           D3E0                       shl	ax,cl
20038 4D35           89C3                       mov	bx,ax
20039 4D37           81C3                 020B  add	bx,#_vga_modes
20040 4D3B           8A47         02            mov	al,2[bx]
20041                                           ! 2313     {
20042 4D3E           E9         039D            br 	.104
20043                                           ! 2314      case 0x04:
20044                                           ! 2315      case 0x03:
20045                       00004D41            .105:
20046                                           ! 2316        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20047                       00004D41            .106:
20048                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20049 4D41           8A46         04            mov	al,4[bp]
20050 4D44           84C0                       test	al,al
20051 4D46         0F85         0089            bne 	.107
20052                       00004D4A            .10C:
20053                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20054 4D4A           8A46         08            mov	al,8[bp]
20055 4D4D           84C0                       test	al,al
20056 4D4F         0F85         0080            bne 	.107
20057                       00004D53            .10B:
20058                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20059 4D53           8A46         0A            mov	al,$A[bp]
20060 4D56           84C0                       test	al,al
20061 4D58           75           79            jne 	.107
20062                       00004D5A            .10A:
20063                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20064 4D5A           8B46         F6            mov	ax,-$A[bp]
20065                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20066                                           ! Debug: expression subtree swapping
20067 4D5D           48                         dec	ax
20068 4D5E           50                         push	ax
20069 4D5F           8A46         0C            mov	al,$C[bp]
20070 4D62           30E4                       xor	ah,ah
20071 4D64           3B46         F0            cmp	ax,0+..FFFC[bp]
20072 4D67           8D66         F2            lea	sp,2+..FFFC[bp]
20073 4D6A           75           67            jne 	.107
20074                       00004D6C            .109:
20075                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20076 4D6C           8B46         F8            mov	ax,-8[bp]
20077                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20078                                           ! Debug: expression subtree swapping
20079 4D6F           48                         dec	ax
20080 4D70           50                         push	ax
20081 4D71           8A46         0E            mov	al,$E[bp]
20082 4D74           30E4                       xor	ah,ah
20083 4D76           3B46         F0            cmp	ax,0+..FFFC[bp]
20084 4D79           8D66         F2            lea	sp,2+..FFFC[bp]
20085 4D7C           75           55            jne 	.107
20086                       00004D7E            .108:
20087                                           ! 2317         {
20088                                           ! 2318          outw(0x3ce, 0x0205);
20089                                           ! Debug: list int = const $205 (used reg = )
20090 4D7E           B8                   0205  mov	ax,#$205
20091 4D81           50                         push	ax
20092                                           ! Debug: list int = const $3CE (used reg = )
20093 4D82           B8                   03CE  mov	ax,#$3CE
20094 4D85           50                         push	ax
20095                                           ! Debug: func () void = outw+0 (used reg = )
20096 4D86           E8         3068            call	_outw
20097 4D89           83C4                   04  add	sp,*4
20098                                           !BCC_EOS
20099                                           ! 2319          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
20100                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20101 4D8C           8B46         F6            mov	ax,-$A[bp]
20102 4D8F           8B4E         F8            mov	cx,-8[bp]
20103 4D92           F7E9                       imul	cx
20104                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20105 4D94           89C3                       mov	bx,ax
20106 4D96           8A46         FD            mov	al,-3[bp]
20107 4D99           30E4                       xor	ah,ah
20108 4D9B           93                         xchg	ax,bx
20109 4D9C           89D9                       mov	cx,bx
20110 4D9E           F7E9                       imul	cx
20111                                           ! Debug: list unsigned int = ax+0 (used reg = )
20112 4DA0           50                         push	ax
20113                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20114 4DA1           8A46         06            mov	al,6[bp]
20115 4DA4           30E4                       xor	ah,ah
20116 4DA6           50                         push	ax
20117                                           ! Debug: list int = const 0 (used reg = )
20118 4DA7           31C0                       xor	ax,ax
20119 4DA9           50                         push	ax
20120                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20121 4DAA           8A46         FE            mov	al,-2[bp]
20122 4DAD           30E4                       xor	ah,ah
20123 4DAF           B1                     03  mov	cl,*3
20124 4DB1           D3E0                       shl	ax,cl
20125 4DB3           89C3                       mov	bx,ax
20126 4DB5           81C3                 020B  add	bx,#_vga_modes
20127                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20128 4DB9           FF77         04            push	4[bx]
20129                                           ! Debug: func () void = memsetb+0 (used reg = )
20130 4DBC           E8         2F0C            call	_memsetb
20131 4DBF           83C4                   08  add	sp,*8
20132                                           !BCC_EOS
20133                                           ! 2320          outw(0x3ce, 0x0005);
20134                                           ! Debug: list int = const 5 (used reg = )
20135 4DC2           B8                   0005  mov	ax,*5
20136 4DC5           50                         push	ax
20137                                           ! Debug: list int = const $3CE (used reg = )
20138 4DC6           B8                   03CE  mov	ax,#$3CE
20139 4DC9           50                         push	ax
20140                                           ! Debug: func () void = outw+0 (used reg = )
20141 4DCA           E8         3024            call	_outw
20142 4DCD           83C4                   04  add	sp,*4
20143                                           !BCC_EOS
20144                                           ! 2321         }
20145                                           ! 2322        else
20146                                           ! 2323         {
20147 4DD0           E9         0121            br 	.10D
20148                       00004DD3            .107:
20149                                           ! 2324          if(dir==1)
20150                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20151 4DD3           8A46         12            mov	al,$12[bp]
20152 4DD6           3C                     01  cmp	al,*1
20153 4DD8         0F85         008A            bne 	.10E
20154                       00004DDC            .10F:
20155                                           ! 2325           {for(i=rul;i<=rlr;i++)
20156                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20157 4DDC           8A46         08            mov	al,8[bp]
20158 4DDF           30E4                       xor	ah,ah
20159 4DE1           8946         F4            mov	-$C[bp],ax
20160                                           !BCC_EOS
20161                                           !BCC_EOS
20162                                           ! 2326             {
20163 4DE4           EB           73            jmp .112
20164                       00004DE6            .113:
20165                                           ! 2327              if((i+nblines>rlr)||(nblines==0))
20166                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20167 4DE6           8B46         F4            mov	ax,-$C[bp]
20168 4DE9           0246         04            add	al,4[bp]
20169 4DEC           80D4                   00  adc	ah,*0
20170                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20171 4DEF           50                         push	ax
20172 4DF0           8A46         0C            mov	al,$C[bp]
20173 4DF3           30E4                       xor	ah,ah
20174 4DF5           3B46         F0            cmp	ax,0+..FFFC[bp]
20175 4DF8           8D66         F2            lea	sp,2+..FFFC[bp]
20176 4DFB           72           07            jb  	.115
20177                       00004DFD            .116:
20178                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20179 4DFD           8A46         04            mov	al,4[bp]
20180 4E00           84C0                       test	al,al
20181 4E02           75           26            jne 	.114
20182                       00004E04            .115:
20183                                           ! 2328               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20184                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20185 4E04           8A46         06            mov	al,6[bp]
20186 4E07           30E4                       xor	ah,ah
20187 4E09           50                         push	ax
20188                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20189 4E0A           8A46         FD            mov	al,-3[bp]
20190 4E0D           30E4                       xor	ah,ah
20191 4E0F           50                         push	ax
20192                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20193 4E10           FF76         F8            push	-8[bp]
20194                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20195 4E13           8A46         FB            mov	al,-5[bp]
20196 4E16           30E4                       xor	ah,ah
20197 4E18           50                         push	ax
20198                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20199 4E19           FF76         F4            push	-$C[bp]
20200                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20201 4E1C           8A46         0A            mov	al,$A[bp]
20202 4E1F           30E4                       xor	ah,ah
20203 4E21           50                         push	ax
20204                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20205 4E22           E8         F952            call	_vgamem_fill_pl4
20206 4E25           83C4                   0C  add	sp,*$C
20207                                           !BCC_EOS
20208                                           ! 2329              else
20209                                           ! 2330               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
20210 4E28           EB           28            jmp .117
20211                       00004E2A            .114:
20212                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20213 4E2A           8A46         FD            mov	al,-3[bp]
20214 4E2D           30E4                       xor	ah,ah
20215 4E2F           50                         push	ax
20216                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20217 4E30           FF76         F8            push	-8[bp]
20218                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20219 4E33           8A46         FB            mov	al,-5[bp]
20220 4E36           30E4                       xor	ah,ah
20221 4E38           50                         push	ax
20222                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20223 4E39           FF76         F4            push	-$C[bp]
20224                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20225 4E3C           8B46         F4            mov	ax,-$C[bp]
20226 4E3F           0246         04            add	al,4[bp]
20227 4E42           80D4                   00  adc	ah,*0
20228                                           ! Debug: list unsigned int = ax+0 (used reg = )
20229 4E45           50                         push	ax
20230                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20231 4E46           8A46         0A            mov	al,$A[bp]
20232 4E49           30E4                       xor	ah,ah
20233 4E4B           50                         push	ax
20234                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20235 4E4C           E8         F866            call	_vgamem_copy_pl4
20236 4E4F           83C4                   0C  add	sp,*$C
20237                                           !BCC_EOS
20238                                           ! 2331             }
20239                       00004E52            .117:
20240                                           ! 2332           }
20241                       00004E52            .111:
20242                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20243 4E52           8B46         F4            mov	ax,-$C[bp]
20244 4E55           40                         inc	ax
20245 4E56           8946         F4            mov	-$C[bp],ax
20246                       00004E59            .112:
20247                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20248 4E59           8A46         0C            mov	al,$C[bp]
20249 4E5C           30E4                       xor	ah,ah
20250 4E5E           3B46         F4            cmp	ax,-$C[bp]
20251 4E61           73           83            jae	.113
20252                       00004E63            .118:
20253                       00004E63            .110:
20254                                           ! 2333          else
20255                                           ! 2334           {for(i=rlr;i>=rul;i--)
20256 4E63           E9         008E            br 	.119
20257                       00004E66            .10E:
20258                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20259 4E66           8A46         0C            mov	al,$C[bp]
20260 4E69           30E4                       xor	ah,ah
20261 4E6B           8946         F4            mov	-$C[bp],ax
20262                                           !BCC_EOS
20263                                           !BCC_EOS
20264                                           ! 2335             {
20265 4E6E           EB           78            jmp .11C
20266                       00004E70            .11D:
20267                                           ! 2336              if((i<rul+nblines)||(nblines==0))
20268                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20269 4E70           8A46         08            mov	al,8[bp]
20270 4E73           30E4                       xor	ah,ah
20271 4E75           0246         04            add	al,4[bp]
20272 4E78           80D4                   00  adc	ah,*0
20273                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20274 4E7B           3B46         F4            cmp	ax,-$C[bp]
20275 4E7E           77           07            ja  	.11F
20276                       00004E80            .120:
20277                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20278 4E80           8A46         04            mov	al,4[bp]
20279 4E83           84C0                       test	al,al
20280 4E85           75           26            jne 	.11E
20281                       00004E87            .11F:
20282                                           ! 2337               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
20283                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20284 4E87           8A46         06            mov	al,6[bp]
20285 4E8A           30E4                       xor	ah,ah
20286 4E8C           50                         push	ax
20287                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20288 4E8D           8A46         FD            mov	al,-3[bp]
20289 4E90           30E4                       xor	ah,ah
20290 4E92           50                         push	ax
20291                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20292 4E93           FF76         F8            push	-8[bp]
20293                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20294 4E96           8A46         FB            mov	al,-5[bp]
20295 4E99           30E4                       xor	ah,ah
20296 4E9B           50                         push	ax
20297                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20298 4E9C           FF76         F4            push	-$C[bp]
20299                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20300 4E9F           8A46         0A            mov	al,$A[bp]
20301 4EA2           30E4                       xor	ah,ah
20302 4EA4           50                         push	ax
20303                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
20304 4EA5           E8         F8CF            call	_vgamem_fill_pl4
20305 4EA8           83C4                   0C  add	sp,*$C
20306                                           !BCC_EOS
20307                                           ! 2338              else
20308                                           ! 2339               vgamem_copy_pl4(cul,i,i-nblines,cols
20309 4EAB           EB           28            jmp .121
20310                       00004EAD            .11E:
20311                                           ! 2339 ,nbcols,cheight);
20312                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20313 4EAD           8A46         FD            mov	al,-3[bp]
20314 4EB0           30E4                       xor	ah,ah
20315 4EB2           50                         push	ax
20316                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20317 4EB3           FF76         F8            push	-8[bp]
20318                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20319 4EB6           8A46         FB            mov	al,-5[bp]
20320 4EB9           30E4                       xor	ah,ah
20321 4EBB           50                         push	ax
20322                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20323 4EBC           8B46         F4            mov	ax,-$C[bp]
20324 4EBF           2A46         04            sub	al,4[bp]
20325 4EC2           80DC                   00  sbb	ah,*0
20326                                           ! Debug: list unsigned int = ax+0 (used reg = )
20327 4EC5           50                         push	ax
20328                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20329 4EC6           FF76         F4            push	-$C[bp]
20330                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20331 4EC9           8A46         0A            mov	al,$A[bp]
20332 4ECC           30E4                       xor	ah,ah
20333 4ECE           50                         push	ax
20334                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
20335 4ECF           E8         F7E3            call	_vgamem_copy_pl4
20336 4ED2           83C4                   0C  add	sp,*$C
20337                                           !BCC_EOS
20338                                           ! 2340              if (i>rlr) break;
20339                       00004ED5            .121:
20340                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20341 4ED5           8A46         0C            mov	al,$C[bp]
20342 4ED8           30E4                       xor	ah,ah
20343 4EDA           3B46         F4            cmp	ax,-$C[bp]
20344 4EDD           73           02            jae 	.122
20345                       00004EDF            .123:
20346 4EDF           EB           13            jmp .11A
20347                                           !BCC_EOS
20348                                           ! 2341             }
20349                       00004EE1            .122:
20350                                           ! 2342           }
20351                       00004EE1            .11B:
20352                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20353 4EE1           8B46         F4            mov	ax,-$C[bp]
20354 4EE4           48                         dec	ax
20355 4EE5           8946         F4            mov	-$C[bp],ax
20356                       00004EE8            .11C:
20357                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20358 4EE8           8A46         08            mov	al,8[bp]
20359 4EEB           30E4                       xor	ah,ah
20360 4EED           3B46         F4            cmp	ax,-$C[bp]
20361 4EF0         0F86         FF7C            blos	.11D
20362                       00004EF4            .124:
20363                       00004EF4            .11A:
20364                                           ! 2343         }
20365                       00004EF4            .119:
20366                                           ! 2344        break;
20367                       00004EF4            .10D:
20368 4EF4           E9         01FB            br 	.102
20369                                           !BCC_EOS
20370                                           ! 2345      case 0x02:
20371                                           ! 2346        bpp=vga_modes[line].pixbits;
20372                       00004EF7            .125:
20373                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
20374 4EF7           8A46         FE            mov	al,-2[bp]
20375 4EFA           30E4                       xor	ah,ah
20376 4EFC           B1                     03  mov	cl,*3
20377 4EFE           D3E0                       shl	ax,cl
20378 4F00           89C3                       mov	bx,ax
20379 4F02           81C3                 020B  add	bx,#_vga_modes
20380                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
20381 4F06           8A47         03            mov	al,3[bx]
20382 4F09           8846         FC            mov	-4[bp],al
20383                                           !BCC_EOS
20384                                           ! 2347        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
20385                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20386 4F0C           8A46         04            mov	al,4[bp]
20387 4F0F           84C0                       test	al,al
20388 4F11           75           77            jne 	.126
20389                       00004F13            .12B:
20390                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
20391 4F13           8A46         08            mov	al,8[bp]
20392 4F16           84C0                       test	al,al
20393 4F18           75           70            jne 	.126
20394                       00004F1A            .12A:
20395                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
20396 4F1A           8A46         0A            mov	al,$A[bp]
20397 4F1D           84C0                       test	al,al
20398 4F1F           75           69            jne 	.126
20399                       00004F21            .129:
20400                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
20401 4F21           8B46         F6            mov	ax,-$A[bp]
20402                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
20403                                           ! Debug: expression subtree swapping
20404 4F24           48                         dec	ax
20405 4F25           50                         push	ax
20406 4F26           8A46         0C            mov	al,$C[bp]
20407 4F29           30E4                       xor	ah,ah
20408 4F2B           3B46         F0            cmp	ax,0+..FFFC[bp]
20409 4F2E           8D66         F2            lea	sp,2+..FFFC[bp]
20410 4F31           75           57            jne 	.126
20411                       00004F33            .128:
20412                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20413 4F33           8B46         F8            mov	ax,-8[bp]
20414                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
20415                                           ! Debug: expression subtree swapping
20416 4F36           48                         dec	ax
20417 4F37           50                         push	ax
20418 4F38           8A46         0E            mov	al,$E[bp]
20419 4F3B           30E4                       xor	ah,ah
20420 4F3D           3B46         F0            cmp	ax,0+..FFFC[bp]
20421 4F40           8D66         F2            lea	sp,2+..FFFC[bp]
20422 4F43           75           45            jne 	.126
20423                       00004F45            .127:
20424                                           ! 2348         {
20425                                           ! 2349          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
20426                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
20427 4F45           8B46         F6            mov	ax,-$A[bp]
20428 4F48           8B4E         F8            mov	cx,-8[bp]
20429 4F4B           F7E9                       imul	cx
20430                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
20431 4F4D           89C3                       mov	bx,ax
20432 4F4F           8A46         FD            mov	al,-3[bp]
20433 4F52           30E4                       xor	ah,ah
20434 4F54           93                         xchg	ax,bx
20435 4F55           89D9                       mov	cx,bx
20436 4F57           F7E9                       imul	cx
20437                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
20438 4F59           89C3                       mov	bx,ax
20439 4F5B           8A46         FC            mov	al,-4[bp]
20440 4F5E           30E4                       xor	ah,ah
20441 4F60           93                         xchg	ax,bx
20442 4F61           89D9                       mov	cx,bx
20443 4F63           F7E9                       imul	cx
20444                                           ! Debug: list unsigned int = ax+0 (used reg = )
20445 4F65           50                         push	ax
20446                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20447 4F66           8A46         06            mov	al,6[bp]
20448 4F69           30E4                       xor	ah,ah
20449 4F6B           50                         push	ax
20450                                           ! Debug: list int = const 0 (used reg = )
20451 4F6C           31C0                       xor	ax,ax
20452 4F6E           50                         push	ax
20453                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20454 4F6F           8A46         FE            mov	al,-2[bp]
20455 4F72           30E4                       xor	ah,ah
20456 4F74           B1                     03  mov	cl,*3
20457 4F76           D3E0                       shl	ax,cl
20458 4F78           89C3                       mov	bx,ax
20459 4F7A           81C3                 020B  add	bx,#_vga_modes
20460                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20461 4F7E           FF77         04            push	4[bx]
20462                                           ! Debug: func () void = memsetb+0 (used reg = )
20463 4F81           E8         2D47            call	_memsetb
20464 4F84           83C4                   08  add	sp,*8
20465                                           !BCC_EOS
20466                                           ! 2350         }
20467                                           ! 2351        else
20468                                           ! 2352         {
20469 4F87           E9         0144            br 	.12C
20470                       00004F8A            .126:
20471                                           ! 2353          if(bpp==2)
20472                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20473 4F8A           8A46         FC            mov	al,-4[bp]
20474 4F8D           3C                     02  cmp	al,*2
20475 4F8F           75           1C            jne 	.12D
20476                       00004F91            .12E:
20477                                           ! 2354           {
20478                                           ! 2355            cul<<=1;
20479                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20480 4F91           8A46         0A            mov	al,$A[bp]
20481 4F94           30E4                       xor	ah,ah
20482 4F96           D1E0                       shl	ax,*1
20483 4F98           8846         0A            mov	$A[bp],al
20484                                           !BCC_EOS
20485                                           ! 2356            cols<<=1;
20486                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20487 4F9B           8A46         FB            mov	al,-5[bp]
20488 4F9E           30E4                       xor	ah,ah
20489 4FA0           D1E0                       shl	ax,*1
20490 4FA2           8846         FB            mov	-5[bp],al
20491                                           !BCC_EOS
20492                                           ! 2357            nbcols<<=1;
20493                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20494 4FA5           8B46         F8            mov	ax,-8[bp]
20495 4FA8           D1E0                       shl	ax,*1
20496 4FAA           8946         F8            mov	-8[bp],ax
20497                                           !BCC_EOS
20498                                           ! 2358           }
20499                                           ! 2359          if(dir==1)
20500                       00004FAD            .12D:
20501                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20502 4FAD           8A46         12            mov	al,$12[bp]
20503 4FB0           3C                     01  cmp	al,*1
20504 4FB2         0F85         008A            bne 	.12F
20505                       00004FB6            .130:
20506                                           ! 2360           {for(i=rul;i<=rlr;i++)
20507                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20508 4FB6           8A46         08            mov	al,8[bp]
20509 4FB9           30E4                       xor	ah,ah
20510 4FBB           8946         F4            mov	-$C[bp],ax
20511                                           !BCC_EOS
20512                                           !BCC_EOS
20513                                           ! 2361             {
20514 4FBE           EB           73            jmp .133
20515                       00004FC0            .134:
20516                                           ! 2362              if((i+nblines>rlr)||(nblines==0))
20517                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20518 4FC0           8B46         F4            mov	ax,-$C[bp]
20519 4FC3           0246         04            add	al,4[bp]
20520 4FC6           80D4                   00  adc	ah,*0
20521                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20522 4FC9           50                         push	ax
20523 4FCA           8A46         0C            mov	al,$C[bp]
20524 4FCD           30E4                       xor	ah,ah
20525 4FCF           3B46         F0            cmp	ax,0+..FFFC[bp]
20526 4FD2           8D66         F2            lea	sp,2+..FFFC[bp]
20527 4FD5           72           07            jb  	.136
20528                       00004FD7            .137:
20529                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20530 4FD7           8A46         04            mov	al,4[bp]
20531 4FDA           84C0                       test	al,al
20532 4FDC           75           26            jne 	.135
20533                       00004FDE            .136:
20534                                           ! 2363               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20535                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20536 4FDE           8A46         06            mov	al,6[bp]
20537 4FE1           30E4                       xor	ah,ah
20538 4FE3           50                         push	ax
20539                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20540 4FE4           8A46         FD            mov	al,-3[bp]
20541 4FE7           30E4                       xor	ah,ah
20542 4FE9           50                         push	ax
20543                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20544 4FEA           FF76         F8            push	-8[bp]
20545                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20546 4FED           8A46         FB            mov	al,-5[bp]
20547 4FF0           30E4                       xor	ah,ah
20548 4FF2           50                         push	ax
20549                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20550 4FF3           FF76         F4            push	-$C[bp]
20551                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20552 4FF6           8A46         0A            mov	al,$A[bp]
20553 4FF9           30E4                       xor	ah,ah
20554 4FFB           50                         push	ax
20555                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20556 4FFC           E8         F915            call	_vgamem_fill_cga
20557 4FFF           83C4                   0C  add	sp,*$C
20558                                           !BCC_EOS
20559                                           ! 2364              else
20560                                           ! 2365               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20561 5002           EB           28            jmp .138
20562                       00005004            .135:
20563                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20564 5004           8A46         FD            mov	al,-3[bp]
20565 5007           30E4                       xor	ah,ah
20566 5009           50                         push	ax
20567                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20568 500A           FF76         F8            push	-8[bp]
20569                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20570 500D           8A46         FB            mov	al,-5[bp]
20571 5010           30E4                       xor	ah,ah
20572 5012           50                         push	ax
20573                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20574 5013           FF76         F4            push	-$C[bp]
20575                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20576 5016           8B46         F4            mov	ax,-$C[bp]
20577 5019           0246         04            add	al,4[bp]
20578 501C           80D4                   00  adc	ah,*0
20579                                           ! Debug: list unsigned int = ax+0 (used reg = )
20580 501F           50                         push	ax
20581                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20582 5020           8A46         0A            mov	al,$A[bp]
20583 5023           30E4                       xor	ah,ah
20584 5025           50                         push	ax
20585                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20586 5026           E8         F7D9            call	_vgamem_copy_cga
20587 5029           83C4                   0C  add	sp,*$C
20588                                           !BCC_EOS
20589                                           ! 2366             }
20590                       0000502C            .138:
20591                                           ! 2367           }
20592                       0000502C            .132:
20593                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20594 502C           8B46         F4            mov	ax,-$C[bp]
20595 502F           40                         inc	ax
20596 5030           8946         F4            mov	-$C[bp],ax
20597                       00005033            .133:
20598                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20599 5033           8A46         0C            mov	al,$C[bp]
20600 5036           30E4                       xor	ah,ah
20601 5038           3B46         F4            cmp	ax,-$C[bp]
20602 503B           73           83            jae	.134
20603                       0000503D            .139:
20604                       0000503D            .131:
20605                                           ! 2368          else
20606                                           ! 2369           {for(i=rlr;i>=rul;i--)
20607 503D           E9         008E            br 	.13A
20608                       00005040            .12F:
20609                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20610 5040           8A46         0C            mov	al,$C[bp]
20611 5043           30E4                       xor	ah,ah
20612 5045           8946         F4            mov	-$C[bp],ax
20613                                           !BCC_EOS
20614                                           !BCC_EOS
20615                                           ! 2370             {
20616 5048           EB           78            jmp .13D
20617                       0000504A            .13E:
20618                                           ! 2371              if((i<rul+nblines)||(nblines==0))
20619                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20620 504A           8A46         08            mov	al,8[bp]
20621 504D           30E4                       xor	ah,ah
20622 504F           0246         04            add	al,4[bp]
20623 5052           80D4                   00  adc	ah,*0
20624                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20625 5055           3B46         F4            cmp	ax,-$C[bp]
20626 5058           77           07            ja  	.140
20627                       0000505A            .141:
20628                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20629 505A           8A46         04            mov	al,4[bp]
20630 505D           84C0                       test	al,al
20631 505F           75           26            jne 	.13F
20632                       00005061            .140:
20633                                           ! 2372               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20634                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20635 5061           8A46         06            mov	al,6[bp]
20636 5064           30E4                       xor	ah,ah
20637 5066           50                         push	ax
20638                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20639 5067           8A46         FD            mov	al,-3[bp]
20640 506A           30E4                       xor	ah,ah
20641 506C           50                         push	ax
20642                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20643 506D           FF76         F8            push	-8[bp]
20644                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20645 5070           8A46         FB            mov	al,-5[bp]
20646 5073           30E4                       xor	ah,ah
20647 5075           50                         push	ax
20648                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20649 5076           FF76         F4            push	-$C[bp]
20650                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20651 5079           8A46         0A            mov	al,$A[bp]
20652 507C           30E4                       xor	ah,ah
20653 507E           50                         push	ax
20654                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20655 507F           E8         F892            call	_vgamem_fill_cga
20656 5082           83C4                   0C  add	sp,*$C
20657                                           !BCC_EOS
20658                                           ! 2373              else
20659                                           ! 2374               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20660 5085           EB           28            jmp .142
20661                       00005087            .13F:
20662                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20663 5087           8A46         FD            mov	al,-3[bp]
20664 508A           30E4                       xor	ah,ah
20665 508C           50                         push	ax
20666                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20667 508D           FF76         F8            push	-8[bp]
20668                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20669 5090           8A46         FB            mov	al,-5[bp]
20670 5093           30E4                       xor	ah,ah
20671 5095           50                         push	ax
20672                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20673 5096           8B46         F4            mov	ax,-$C[bp]
20674 5099           2A46         04            sub	al,4[bp]
20675 509C           80DC                   00  sbb	ah,*0
20676                                           ! Debug: list unsigned int = ax+0 (used reg = )
20677 509F           50                         push	ax
20678                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20679 50A0           FF76         F4            push	-$C[bp]
20680                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20681 50A3           8A46         0A            mov	al,$A[bp]
20682 50A6           30E4                       xor	ah,ah
20683 50A8           50                         push	ax
20684                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20685 50A9           E8         F756            call	_vgamem_copy_cga
20686 50AC           83C4                   0C  add	sp,*$C
20687                                           !BCC_EOS
20688                                           ! 2375              if (i>rlr) break;
20689                       000050AF            .142:
20690                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20691 50AF           8A46         0C            mov	al,$C[bp]
20692 50B2           30E4                       xor	ah,ah
20693 50B4           3B46         F4            cmp	ax,-$C[bp]
20694 50B7           73           02            jae 	.143
20695                       000050B9            .144:
20696 50B9           EB           13            jmp .13B
20697                                           !BCC_EOS
20698                                           ! 2376             }
20699                       000050BB            .143:
20700                                           ! 2377           }
20701                       000050BB            .13C:
20702                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20703 50BB           8B46         F4            mov	ax,-$C[bp]
20704 50BE           48                         dec	ax
20705 50BF           8946         F4            mov	-$C[bp],ax
20706                       000050C2            .13D:
20707                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20708 50C2           8A46         08            mov	al,8[bp]
20709 50C5           30E4                       xor	ah,ah
20710 50C7           3B46         F4            cmp	ax,-$C[bp]
20711 50CA         0F86         FF7C            blos	.13E
20712                       000050CE            .145:
20713                       000050CE            .13B:
20714                                           ! 2378         }
20715                       000050CE            .13A:
20716                                           ! 2379        break;
20717                       000050CE            .12C:
20718 50CE           EB           22            jmp .102
20719                                           !BCC_EOS
20720                                           ! 2380      default:
20721                                           ! 2381        printf("Scroll in graphics mode ");
20722                       000050D0            .146:
20723                                           ! Debug: list * char = .147+0 (used reg = )
20724 50D0           BB                   A13F  mov	bx,#.147
20725 50D3           53                         push	bx
20726                                           ! Debug: func () void = printf+0 (used reg = )
20727 50D4           E8         2D49            call	_printf
20728 50D7           44                         inc	sp
20729 50D8           44                         inc	sp
20730                                           !BCC_EOS
20731                                           ! 2382        unimplemented();
20732                                           ! Debug: func () void = unimplemented+0 (used reg = )
20733 50D9           E8         2D28            call	_unimplemented
20734                                           !BCC_EOS
20735                                           ! 2383     }
20736                                           ! 2384   }
20737 50DC           EB           14            jmp .102
20738                       000050DE            .104:
20739 50DE           2C                     02  sub	al,*2
20740 50E0         0F84         FE13            beq 	.125
20741 50E4           2C                     01  sub	al,*1
20742 50E6         0F84         FC57            beq 	.106
20743 50EA           2C                     01  sub	al,*1
20744 50EC         0F84         FC51            beq 	.105
20745 50F0           EB           DE            jmp	.146
20746                       000050F2            .102:
20747                       FFFFFFF0            ..FFFC	=	-$10
20748                                           ! 2385 }
20749                       000050F2            .101:
20750 50F2           89EC                       mov	sp,bp
20751 50F4           5D                         pop	bp
20752 50F5           C3                         ret
20753                                           ! 2386 static void biosfn_read_char_attr (page,car)
20754                                           ! Register BX used in function biosfn_scroll
20755                                           ! 2387 Bit8u page;Bit16u *car;
20756                       000050F6            _biosfn_read_char_attr:
20757                                           !BCC_EOS
20758                                           !BCC_EOS
20759                                           ! 2388 {Bit16u ss=get_SS();
20760 50F6           55                         push	bp
20761 50F7           89E5                       mov	bp,sp
20762 50F9           4C                         dec	sp
20763 50FA           4C                         dec	sp
20764                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20765 50FB           E8         2D03            call	_get_SS
20766                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20767 50FE           8946         FE            mov	-2[bp],ax
20768                                           !BCC_EOS
20769                                           ! 2389  Bit8u xcurs,ycurs,mode,line;
20770                                           !BCC_EOS
20771                                           ! 2390  Bit16u nbcols,nbrows,address;
20772                                           !BCC_EOS
20773                                           ! 2391  Bit16u cursor,dummy;
20774                                           !BCC_EOS
20775                                           ! 2392  mode=read_byte(0x40,0x49);
20776 5101           83C4                   F2  add	sp,*-$E
20777                                           ! Debug: list int = const $49 (used reg = )
20778 5104           B8                   0049  mov	ax,*$49
20779 5107           50                         push	ax
20780                                           ! Debug: list int = const $40 (used reg = )
20781 5108           B8                   0040  mov	ax,*$40
20782 510B           50                         push	ax
20783                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20784 510C           E8         2C66            call	_read_byte
20785 510F           83C4                   04  add	sp,*4
20786                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20787 5112           8846         FB            mov	-5[bp],al
20788                                           !BCC_EOS
20789                                           ! 2393  line=find_vga_entry(mode);
20790                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20791 5115           8A46         FB            mov	al,-5[bp]
20792 5118           30E4                       xor	ah,ah
20793 511A           50                         push	ax
20794                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20795 511B           E8         2B6B            call	_find_vga_entry
20796 511E           44                         inc	sp
20797 511F           44                         inc	sp
20798                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20799 5120           8846         FA            mov	-6[bp],al
20800                                           !BCC_EOS
20801                                           ! 2394  if(line==0xFF)return;
20802                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20803 5123           8A46         FA            mov	al,-6[bp]
20804 5126           3C                     FF  cmp	al,#$FF
20805 5128           75           04            jne 	.148
20806                       0000512A            .149:
20807 512A           89EC                       mov	sp,bp
20808 512C           5D                         pop	bp
20809 512D           C3                         ret
20810                                           !BCC_EOS
20811                                           ! 2395  biosfn_get_cursor_pos(page,&dummy,&cursor);
20812                       0000512E            .148:
20813                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20814 512E           8D5E         F2            lea	bx,-$E[bp]
20815 5131           53                         push	bx
20816                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20817 5132           8D5E         F0            lea	bx,-$10[bp]
20818 5135           53                         push	bx
20819                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20820 5136           8A46         04            mov	al,4[bp]
20821 5139           30E4                       xor	ah,ah
20822 513B           50                         push	ax
20823                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20824 513C           E8         F37F            call	_biosfn_get_cursor_pos
20825 513F           83C4                   06  add	sp,*6
20826                                           !BCC_EOS
20827                                           ! 2396  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20828                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20829 5142           8A46         F2            mov	al,-$E[bp]
20830                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20831 5145           8846         FD            mov	-3[bp],al
20832                                           !BCC_EOS
20833                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20834 5148           8B46         F2            mov	ax,-$E[bp]
20835 514B           30C0                       xor	al,al
20836                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20837 514D           88E0                       mov	al,ah
20838 514F           30E4                       xor	ah,ah
20839                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20840 5151           8846         FC            mov	-4[bp],al
20841                                           !BCC_EOS
20842                                           ! 2397  nbrows=read_byte(0x40,0x84)+1;
20843                                           ! Debug: list int = const $84 (used reg = )
20844 5154           B8                   0084  mov	ax,#$84
20845 5157           50                         push	ax
20846                                           ! Debug: list int = const $40 (used reg = )
20847 5158           B8                   0040  mov	ax,*$40
20848 515B           50                         push	ax
20849                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20850 515C           E8         2C16            call	_read_byte
20851 515F           83C4                   04  add	sp,*4
20852                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20853 5162           30E4                       xor	ah,ah
20854                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20855 5164           40                         inc	ax
20856 5165           8946         F6            mov	-$A[bp],ax
20857                                           !BCC_EOS
20858                                           ! 2398  nbcols=read_word(0x40,0x4A);
20859                                           ! Debug: list int = const $4A (used reg = )
20860 5168           B8                   004A  mov	ax,*$4A
20861 516B           50                         push	ax
20862                                           ! Debug: list int = const $40 (used reg = )
20863 516C           B8                   0040  mov	ax,*$40
20864 516F           50                         push	ax
20865                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20866 5170           E8         2C15            call	_read_word
20867 5173           83C4                   04  add	sp,*4
20868                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20869 5176           8946         F8            mov	-8[bp],ax
20870                                           !BCC_EOS
20871                                           ! 2399  if(vga_modes[line].class==0x00)
20872                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20873 5179           8A46         FA            mov	al,-6[bp]
20874 517C           30E4                       xor	ah,ah
20875 517E           B1                     03  mov	cl,*3
20876 5180           D3E0                       shl	ax,cl
20877 5182           89C3                       mov	bx,ax
20878 5184           81C3                 020B  add	bx,#_vga_modes
20879                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20880 5188           8A47         01            mov	al,1[bx]
20881 518B           84C0                       test	al,al
20882 518D           75           5E            jne 	.14A
20883                       0000518F            .14B:
20884                                           ! 2400   {
20885                                           ! 2401    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20886                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20887 518F           8A46         FC            mov	al,-4[bp]
20888 5192           30E4                       xor	ah,ah
20889 5194           8B4E         F8            mov	cx,-8[bp]
20890 5197           F7E9                       imul	cx
20891                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20892                                           ! Debug: expression subtree swapping
20893 5199           0246         FD            add	al,-3[bp]
20894 519C           80D4                   00  adc	ah,*0
20895                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20896 519F           D1E0                       shl	ax,*1
20897 51A1           50                         push	ax
20898                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20899 51A2           8B46         F8            mov	ax,-8[bp]
20900 51A5           8B4E         F6            mov	cx,-$A[bp]
20901 51A8           F7E9                       imul	cx
20902                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20903 51AA           D1E0                       shl	ax,*1
20904                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20905 51AC           0C                     FF  or	al,#$FF
20906                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20907                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20908 51AE           89C3                       mov	bx,ax
20909 51B0           8A46         04            mov	al,4[bp]
20910 51B3           30E4                       xor	ah,ah
20911 51B5           93                         xchg	ax,bx
20912 51B6           40                         inc	ax
20913 51B7           89D9                       mov	cx,bx
20914 51B9           F7E9                       imul	cx
20915                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20916 51BB           0346         EE            add	ax,-$12[bp]
20917 51BE           44                         inc	sp
20918 51BF           44                         inc	sp
20919                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20920 51C0           8946         F4            mov	-$C[bp],ax
20921                                           !BCC_EOS
20922                                           ! 2402    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20923                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20924 51C3           FF76         F4            push	-$C[bp]
20925                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20926 51C6           8A46         FA            mov	al,-6[bp]
20927 51C9           30E4                       xor	ah,ah
20928 51CB           B1                     03  mov	cl,*3
20929 51CD           D3E0                       shl	ax,cl
20930 51CF           89C3                       mov	bx,ax
20931 51D1           81C3                 020B  add	bx,#_vga_modes
20932                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20933 51D5           FF77         04            push	4[bx]
20934                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20935 51D8           E8         2BAD            call	_read_word
20936 51DB           83C4                   04  add	sp,*4
20937                                           ! Debug: list unsigned short = ax+0 (used reg = )
20938 51DE           50                         push	ax
20939                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20940 51DF           FF76         06            push	6[bp]
20941                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20942 51E2           FF76         FE            push	-2[bp]
20943                                           ! Debug: func () void = write_word+0 (used reg = )
20944 51E5           E8         2BCB            call	_write_word
20945 51E8           83C4                   06  add	sp,*6
20946                                           !BCC_EOS
20947                                           ! 2403   }
20948                                           ! 2404  else
20949                                           ! 2405   {
20950 51EB           EB           03            jmp .14C
20951                       000051ED            .14A:
20952                                           ! 2406    unimplemented();
20953                                           ! Debug: func () void = unimplemented+0 (used reg = )
20954 51ED           E8         2C14            call	_unimplemented
20955                                           !BCC_EOS
20956                                           ! 2407   }
20957                                           ! 2408 }
20958                       000051F0            .14C:
20959 51F0           89EC                       mov	sp,bp
20960 51F2           5D                         pop	bp
20961 51F3           C3                         ret
20962                                           ! 2409 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20963                                           ! Register BX used in function biosfn_read_char_attr
20964                                           ! 2410 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20965                       000051F4            _write_gfx_char_pl4:
20966                                           !BCC_EOS
20967                                           !BCC_EOS
20968                                           !BCC_EOS
20969                                           !BCC_EOS
20970                                           !BCC_EOS
20971                                           !BCC_EOS
20972                                           ! 2411 {
20973                                           ! 2412  Bit8u i,j,mask;
20974                                           !BCC_EOS
20975                                           ! 2413  Bit8u *fdata;
20976                                           !BCC_EOS
20977                                           ! 2414  Bit16u addr,dest,src;
20978                                           !BCC_EOS
20979                                           ! 2415  switch(cheight)
20980 51F4           55                         push	bp
20981 51F5           89E5                       mov	bp,sp
20982 51F7           83C4                   F4  add	sp,*-$C
20983 51FA           8A46         0E            mov	al,$E[bp]
20984                                           ! 2416   {case 14:
20985 51FD           EB           18            jmp .14F
20986                                           ! 2417     fdata = &vgafont14;
20987                       000051FF            .150:
20988                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20989 51FF           BB                   176F  mov	bx,#_vgafont14
20990 5202           895E         FA            mov	-6[bp],bx
20991                                           !BCC_EOS
20992                                           ! 2418     break;
20993 5205           EB           1A            jmp .14D
20994                                           !BCC_EOS
20995                                           ! 2419  
20996                                           ! 2419   case 16:
20997                                           ! 2420     fdata = &vgafont16;
20998                       00005207            .151:
20999                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21000 5207           BB                   256F  mov	bx,#_vgafont16
21001 520A           895E         FA            mov	-6[bp],bx
21002                                           !BCC_EOS
21003                                           ! 2421     break;
21004 520D           EB           12            jmp .14D
21005                                           !BCC_EOS
21006                                           ! 2422    default:
21007                                           ! 2423     fdata = &vgafont8;
21008                       0000520F            .152:
21009                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21010 520F           BB                   0F6F  mov	bx,#_vgafont8
21011 5212           895E         FA            mov	-6[bp],bx
21012                                           !BCC_EOS
21013                                           ! 2424   }
21014                                           ! 2425  addr=xcurs+ycurs*cheight*nbcols;
21015 5215           EB           0A            jmp .14D
21016                       00005217            .14F:
21017 5217           2C                     0E  sub	al,*$E
21018 5219           74           E4            je 	.150
21019 521B           2C                     02  sub	al,*2
21020 521D           74           E8            je 	.151
21021 521F           EB           EE            jmp	.152
21022                       00005221            .14D:
21023                       FFFFFFF2            ..FFFB	=	-$E
21024                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
21025 5221           8A46         0E            mov	al,$E[bp]
21026 5224           30E4                       xor	ah,ah
21027 5226           89C3                       mov	bx,ax
21028 5228           8A46         0A            mov	al,$A[bp]
21029 522B           30E4                       xor	ah,ah
21030 522D           89D9                       mov	cx,bx
21031 522F           F7E9                       imul	cx
21032                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
21033 5231           89C3                       mov	bx,ax
21034 5233           8A46         0C            mov	al,$C[bp]
21035 5236           30E4                       xor	ah,ah
21036 5238           93                         xchg	ax,bx
21037 5239           89D9                       mov	cx,bx
21038 523B           F7E9                       imul	cx
21039                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
21040                                           ! Debug: expression subtree swapping
21041 523D           0246         08            add	al,8[bp]
21042 5240           80D4                   00  adc	ah,*0
21043                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21044 5243           8946         F8            mov	-8[bp],ax
21045                                           !BCC_EOS
21046                                           ! 2426  src = car * cheight;
21047                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
21048 5246           8A46         0E            mov	al,$E[bp]
21049 5249           30E4                       xor	ah,ah
21050 524B           89C3                       mov	bx,ax
21051 524D           8A46         04            mov	al,4[bp]
21052 5250           30E4                       xor	ah,ah
21053 5252           89D9                       mov	cx,bx
21054 5254           F7E9                       imul	cx
21055                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21056 5256           8946         F4            mov	-$C[bp],ax
21057                                           !BCC_EOS
21058                                           ! 2427  outw(0x3c4, 0x0f02);
21059                                           ! Debug: list int = const $F02 (used reg = )
21060 5259           B8                   0F02  mov	ax,#$F02
21061 525C           50                         push	ax
21062                                           ! Debug: list int = const $3C4 (used reg = )
21063 525D           B8                   03C4  mov	ax,#$3C4
21064 5260           50                         push	ax
21065                                           ! Debug: func () void = outw+0 (used reg = )
21066 5261           E8         2B8D            call	_outw
21067 5264           83C4                   04  add	sp,*4
21068                                           !BCC_EOS
21069                                           ! 2428  outw(0x3ce, 0x0205);
21070                                           ! Debug: list int = const $205 (used reg = )
21071 5267           B8                   0205  mov	ax,#$205
21072 526A           50                         push	ax
21073                                           ! Debug: list int = const $3CE (used reg = )
21074 526B           B8                   03CE  mov	ax,#$3CE
21075 526E           50                         push	ax
21076                                           ! Debug: func () void = outw+0 (used reg = )
21077 526F           E8         2B7F            call	_outw
21078 5272           83C4                   04  add	sp,*4
21079                                           !BCC_EOS
21080                                           ! 2429  if(attr&0x80)
21081                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21082 5275           8A46         06            mov	al,6[bp]
21083 5278           24                     80  and	al,#$80
21084 527A           84C0                       test	al,al
21085 527C           74           10            je  	.153
21086                       0000527E            .154:
21087                                           ! 2430   {
21088                                           ! 2431    outw(0x3ce, 0x1803);
21089                                           ! Debug: list int = const $1803 (used reg = )
21090 527E           B8                   1803  mov	ax,#$1803
21091 5281           50                         push	ax
21092                                           ! Debug: list int = const $3CE (used reg = )
21093 5282           B8                   03CE  mov	ax,#$3CE
21094 5285           50                         push	ax
21095                                           ! Debug: func () void = outw+0 (used reg = )
21096 5286           E8         2B68            call	_outw
21097 5289           83C4                   04  add	sp,*4
21098                                           !BCC_EOS
21099                                           ! 2432   }
21100                                           ! 2433  else
21101                                           ! 2434   {
21102 528C           EB           0E            jmp .155
21103                       0000528E            .153:
21104                                           ! 2435    outw(0x3ce, 0x0003);
21105                                           ! Debug: list int = const 3 (used reg = )
21106 528E           B8                   0003  mov	ax,*3
21107 5291           50                         push	ax
21108                                           ! Debug: list int = const $3CE (used reg = )
21109 5292           B8                   03CE  mov	ax,#$3CE
21110 5295           50                         push	ax
21111                                           ! Debug: func () void = outw+0 (used reg = )
21112 5296           E8         2B58            call	_outw
21113 5299           83C4                   04  add	sp,*4
21114                                           !BCC_EOS
21115                                           ! 2436   }
21116                                           ! 2437  for(i=0;i<cheight;i++)
21117                       0000529C            .155:
21118                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21119 529C           30C0                       xor	al,al
21120 529E           8846         FF            mov	-1[bp],al
21121                                           !BCC_EOS
21122                                           !BCC_EOS
21123                                           ! 2438   {
21124 52A1           E9         00A6            br 	.158
21125                       000052A4            .159:
21126                                           ! 2439    dest=addr+i*nbcols;
21127                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21128 52A4           8A46         0C            mov	al,$C[bp]
21129 52A7           30E4                       xor	ah,ah
21130 52A9           89C3                       mov	bx,ax
21131 52AB           8A46         FF            mov	al,-1[bp]
21132 52AE           30E4                       xor	ah,ah
21133 52B0           89D9                       mov	cx,bx
21134 52B2           F7E9                       imul	cx
21135                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21136                                           ! Debug: expression subtree swapping
21137 52B4           0346         F8            add	ax,-8[bp]
21138                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21139 52B7           8946         F6            mov	-$A[bp],ax
21140                                           !BCC_EOS
21141                                           ! 2440    for(j=0;j<8;j++)
21142                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21143 52BA           30C0                       xor	al,al
21144 52BC           8846         FE            mov	-2[bp],al
21145                                           !BCC_EOS
21146                                           !BCC_EOS
21147                                           ! 2441     {
21148 52BF           EB           79            jmp .15C
21149                       000052C1            .15D:
21150                                           ! 2442      mask=0x80>>j;
21151                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
21152 52C1           8A46         FE            mov	al,-2[bp]
21153 52C4           30E4                       xor	ah,ah
21154 52C6           89C3                       mov	bx,ax
21155 52C8           B8                   0080  mov	ax,#$80
21156 52CB           89D9                       mov	cx,bx
21157 52CD           D3F8                       sar	ax,cl
21158                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
21159 52CF           8846         FD            mov	-3[bp],al
21160                                           !BCC_EOS
21161                                           ! 2443      outw(0x3ce, (mask << 8) | 0x08);
21162                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
21163 52D2           8A46         FD            mov	al,-3[bp]
21164 52D5           30E4                       xor	ah,ah
21165 52D7           88C4                       mov	ah,al
21166 52D9           30C0                       xor	al,al
21167                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
21168 52DB           0C                     08  or	al,*8
21169                                           ! Debug: list unsigned int = ax+0 (used reg = )
21170 52DD           50                         push	ax
21171                                           ! Debug: list int = const $3CE (used reg = )
21172 52DE           B8                   03CE  mov	ax,#$3CE
21173 52E1           50                         push	ax
21174                                           ! Debug: func () void = outw+0 (used reg = )
21175 52E2           E8         2B0C            call	_outw
21176 52E5           83C4                   04  add	sp,*4
21177                                           !BCC_EOS
21178                                           ! 2444      read_byte(0xa000,dest);
21179                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21180 52E8           FF76         F6            push	-$A[bp]
21181                                           ! Debug: list unsigned int = const $A000 (used reg = )
21182 52EB           B8                   A000  mov	ax,#$A000
21183 52EE           50                         push	ax
21184                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21185 52EF           E8         2A83            call	_read_byte
21186 52F2           83C4                   04  add	sp,*4
21187                                           !BCC_EOS
21188                                           ! 2445      if(fdata[src+i]&mask)
21189                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21190 52F5           8B46         F4            mov	ax,-$C[bp]
21191 52F8           0246         FF            add	al,-1[bp]
21192 52FB           80D4                   00  adc	ah,*0
21193                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21194 52FE           0346         FA            add	ax,-6[bp]
21195 5301           89C3                       mov	bx,ax
21196                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21197 5303           8A07                       mov	al,[bx]
21198 5305           2246         FD            and	al,-3[bp]
21199 5308           84C0                       test	al,al
21200 530A           74           17            je  	.15E
21201                       0000530C            .15F:
21202                                           ! 2446       {
21203                                           ! 2447        write_byte(0xa000,dest,attr&0x0f);
21204                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
21205 530C           8A46         06            mov	al,6[bp]
21206 530F           24                     0F  and	al,*$F
21207                                           ! Debug: list unsigned char = al+0 (used reg = )
21208 5311           30E4                       xor	ah,ah
21209 5313           50                         push	ax
21210                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21211 5314           FF76         F6            push	-$A[bp]
21212                                           ! Debug: list unsigned int = const $A000 (used reg = )
21213 5317           B8                   A000  mov	ax,#$A000
21214 531A           50                         push	ax
21215                                           ! Debug: func () void = write_byte+0 (used reg = )
21216 531B           E8         2A7D            call	_write_byte
21217 531E           83C4                   06  add	sp,*6
21218                                           !BCC_EOS
21219                                           ! 2448       }
21220                                           ! 2449      else
21221                                           ! 2450       {
21222 5321           EB           10            jmp .160
21223                       00005323            .15E:
21224                                           ! 2451        write_byte(0xa000,dest,0x00);
21225                                           ! Debug: list int = const 0 (used reg = )
21226 5323           31C0                       xor	ax,ax
21227 5325           50                         push	ax
21228                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21229 5326           FF76         F6            push	-$A[bp]
21230                                           ! Debug: list unsigned int = const $A000 (used reg = )
21231 5329           B8                   A000  mov	ax,#$A000
21232 532C           50                         push	ax
21233                                           ! Debug: func () void = write_byte+0 (used reg = )
21234 532D           E8         2A6B            call	_write_byte
21235 5330           83C4                   06  add	sp,*6
21236                                           !BCC_EOS
21237                                           ! 2452       }
21238                                           ! 2453     }
21239                       00005333            .160:
21240                                           ! 2454   }
21241                       00005333            .15B:
21242                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21243 5333           8A46         FE            mov	al,-2[bp]
21244 5336           40                         inc	ax
21245 5337           8846         FE            mov	-2[bp],al
21246                       0000533A            .15C:
21247                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21248 533A           8A46         FE            mov	al,-2[bp]
21249 533D           3C                     08  cmp	al,*8
21250 533F         0F82         FF7E            blo 	.15D
21251                       00005343            .161:
21252                       00005343            .15A:
21253                                           ! 2455 #asm
21254                       00005343            .157:
21255                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21256 5343           8A46         FF            mov	al,-1[bp]
21257 5346           40                         inc	ax
21258 5347           8846         FF            mov	-1[bp],al
21259                       0000534A            .158:
21260                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
21261 534A           8A46         FF            mov	al,-1[bp]
21262 534D           3A46         0E            cmp	al,$E[bp]
21263 5350         0F82         FF50            blo 	.159
21264                       00005354            .162:
21265                       00005354            .156:
21266                                           !BCC_EOS
21267                                           !BCC_ASM
21268                       0000000A            _write_gfx_char_pl4.j	set	$A
21269                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
21270                       00000006            _write_gfx_char_pl4.fdata	set	6
21271                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
21272                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
21273                       0000000E            .write_gfx_char_pl4.cheight	set	$E
21274                       00000018            _write_gfx_char_pl4.nbcols	set	$18
21275                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
21276                       0000000B            _write_gfx_char_pl4.i	set	$B
21277                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
21278                       00000016            _write_gfx_char_pl4.ycurs	set	$16
21279                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
21280                       00000009            _write_gfx_char_pl4.mask	set	9
21281                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
21282                       00000002            _write_gfx_char_pl4.dest	set	2
21283                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
21284                       00000014            _write_gfx_char_pl4.xcurs	set	$14
21285                       00000008            .write_gfx_char_pl4.xcurs	set	8
21286                       00000000            _write_gfx_char_pl4.src	set	0
21287                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
21288                       00000012            _write_gfx_char_pl4.attr	set	$12
21289                       00000006            .write_gfx_char_pl4.attr	set	6
21290                       00000010            _write_gfx_char_pl4.car	set	$10
21291                       00000004            .write_gfx_char_pl4.car	set	4
21292                       00000004            _write_gfx_char_pl4.addr	set	4
21293                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
21294 5354           BA                   03CE    mov dx, # 0x3ce
21295 5357           B8                   FF08    mov ax, #0xff08
21296 535A           EF                           out dx, ax
21297 535B           B8                   0005    mov ax, #0x0005
21298 535E           EF                           out dx, ax
21299 535F           B8                   0003    mov ax, #0x0003
21300 5362           EF                           out dx, ax
21301                                           ! 2463 endasm
21302                                           !BCC_ENDASM
21303                                           !BCC_EOS
21304                                           ! 2464 }
21305 5363           89EC                       mov	sp,bp
21306 5365           5D                         pop	bp
21307 5366           C3                         ret
21308                                           ! 2465 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
21309                                           ! Register BX used in function write_gfx_char_pl4
21310                                           ! 2466 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
21311                       00005367            _write_gfx_char_cga:
21312                                           !BCC_EOS
21313                                           !BCC_EOS
21314                                           !BCC_EOS
21315                                           !BCC_EOS
21316                                           !BCC_EOS
21317                                           !BCC_EOS
21318                                           ! 2467 {
21319                                           ! 2468  Bit8u i,j,mask,data;
21320                                           !BCC_EOS
21321                                           ! 2469  Bit8u *fdata;
21322                                           !BCC_EOS
21323                                           ! 2470  Bit16u addr,dest,src;
21324                                           !BCC_EOS
21325                                           ! 2471  fdata = &vgafont8;
21326 5367           55                         push	bp
21327 5368           89E5                       mov	bp,sp
21328 536A           83C4                   F4  add	sp,*-$C
21329                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21330 536D           BB                   0F6F  mov	bx,#_vgafont8
21331 5370           895E         FA            mov	-6[bp],bx
21332                                           !BCC_EOS
21333                                           ! 2472  addr=(xcurs*bpp)+ycurs*320;
21334                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
21335 5373           8A46         0A            mov	al,$A[bp]
21336 5376           30E4                       xor	ah,ah
21337 5378           B9                   0140  mov	cx,#$140
21338 537B           F7E9                       imul	cx
21339 537D           50                         push	ax
21340                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
21341 537E           8A46         0E            mov	al,$E[bp]
21342 5381           30E4                       xor	ah,ah
21343 5383           89C3                       mov	bx,ax
21344 5385           8A46         08            mov	al,8[bp]
21345 5388           30E4                       xor	ah,ah
21346 538A           89D9                       mov	cx,bx
21347 538C           F7E9                       imul	cx
21348                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21349 538E           0346         F2            add	ax,-$E[bp]
21350 5391           44                         inc	sp
21351 5392           44                         inc	sp
21352                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21353 5393           8946         F8            mov	-8[bp],ax
21354                                           !BCC_EOS
21355                                           ! 2473  src = car * 8;
21356                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21357 5396           8A46         04            mov	al,4[bp]
21358 5399           30E4                       xor	ah,ah
21359 539B           B1                     03  mov	cl,*3
21360 539D           D3E0                       shl	ax,cl
21361                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21362 539F           8946         F4            mov	-$C[bp],ax
21363                                           !BCC_EOS
21364                                           ! 2474  for(i=0;i<8;i++)
21365                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21366 53A2           30C0                       xor	al,al
21367 53A4           8846         FF            mov	-1[bp],al
21368                                           !BCC_EOS
21369                                           !BCC_EOS
21370                                           ! 2475   {
21371 53A7           E9         01B3            br 	.165
21372                       000053AA            .166:
21373                                           ! 2476    dest=addr+(i>>1)*80;
21374                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21375 53AA           8A46         FF            mov	al,-1[bp]
21376 53AD           30E4                       xor	ah,ah
21377 53AF           D1E8                       shr	ax,*1
21378                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
21379 53B1           B9                   0050  mov	cx,*$50
21380 53B4           F7E9                       imul	cx
21381                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21382                                           ! Debug: expression subtree swapping
21383 53B6           0346         F8            add	ax,-8[bp]
21384                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21385 53B9           8946         F6            mov	-$A[bp],ax
21386                                           !BCC_EOS
21387                                           ! 2477    if (i & 1) dest += 0x2000;
21388                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
21389 53BC           8A46         FF            mov	al,-1[bp]
21390 53BF           24                     01  and	al,*1
21391 53C1           84C0                       test	al,al
21392 53C3           74           09            je  	.167
21393                       000053C5            .168:
21394                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
21395 53C5           8B46         F6            mov	ax,-$A[bp]
21396 53C8           05                   2000  add	ax,#$2000
21397 53CB           8946         F6            mov	-$A[bp],ax
21398                                           !BCC_EOS
21399                                           ! 2478    mask = 0x80;
21400                       000053CE            .167:
21401                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21402 53CE           B0                     80  mov	al,#$80
21403 53D0           8846         FD            mov	-3[bp],al
21404                                           !BCC_EOS
21405                                           ! 2479    if (bpp == 1)
21406                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
21407 53D3           8A46         0E            mov	al,$E[bp]
21408 53D6           3C                     01  cmp	al,*1
21409 53D8         0F85         00B3            bne 	.169
21410                       000053DC            .16A:
21411                                           ! 2480     {
21412                                           ! 2481      if (attr & 0x80)
21413                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21414 53DC           8A46         06            mov	al,6[bp]
21415 53DF           24                     80  and	al,#$80
21416 53E1           84C0                       test	al,al
21417 53E3           74           12            je  	.16B
21418                       000053E5            .16C:
21419                                           ! 2482       {
21420                                           ! 2483        data = read_byte(0xb800,dest);
21421                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21422 53E5           FF76         F6            push	-$A[bp]
21423                                           ! Debug: list unsigned int = const $B800 (used reg = )
21424 53E8           B8                   B800  mov	ax,#$B800
21425 53EB           50                         push	ax
21426                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21427 53EC           E8         2986            call	_read_byte
21428 53EF           83C4                   04  add	sp,*4
21429                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21430 53F2           8846         FC            mov	-4[bp],al
21431                                           !BCC_EOS
21432                                           ! 2484       }
21433                                           ! 2485      else
21434                                           ! 2486       {
21435 53F5           EB           05            jmp .16D
21436                       000053F7            .16B:
21437                                           ! 2487        data = 0x00;
21438                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21439 53F7           30C0                       xor	al,al
21440 53F9           8846         FC            mov	-4[bp],al
21441                                           !BCC_EOS
21442                                           ! 2488       }
21443                                           ! 2489      for(j=0;j<8;j++)
21444                       000053FC            .16D:
21445                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21446 53FC           30C0                       xor	al,al
21447 53FE           8846         FE            mov	-2[bp],al
21448                                           !BCC_EOS
21449                                           !BCC_EOS
21450                                           ! 2490       {
21451 5401           EB           6F            jmp .170
21452                       00005403            .171:
21453                                           ! 2491        if (fdata[src+i] & mask)
21454                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21455 5403           8B46         F4            mov	ax,-$C[bp]
21456 5406           0246         FF            add	al,-1[bp]
21457 5409           80D4                   00  adc	ah,*0
21458                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21459 540C           0346         FA            add	ax,-6[bp]
21460 540F           89C3                       mov	bx,ax
21461                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21462 5411           8A07                       mov	al,[bx]
21463 5413           2246         FD            and	al,-3[bp]
21464 5416           84C0                       test	al,al
21465 5418           74           47            je  	.172
21466                       0000541A            .173:
21467                                           ! 2492         {
21468                                           ! 2493          if (attr & 0x80)
21469                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21470 541A           8A46         06            mov	al,6[bp]
21471 541D           24                     80  and	al,#$80
21472 541F           84C0                       test	al,al
21473 5421           74           20            je  	.174
21474                       00005423            .175:
21475                                           ! 2494           {
21476                                           ! 2495            data ^= (attr & 0x01) << (7-j);
21477                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21478 5423           B8                   0007  mov	ax,*7
21479 5426           2A46         FE            sub	al,-2[bp]
21480 5429           80DC                   00  sbb	ah,*0
21481 542C           50                         push	ax
21482                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21483 542D           8A46         06            mov	al,6[bp]
21484 5430           24                     01  and	al,*1
21485                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21486 5432           30E4                       xor	ah,ah
21487 5434           8B4E         F2            mov	cx,-$E[bp]
21488 5437           D3E0                       shl	ax,cl
21489 5439           44                         inc	sp
21490 543A           44                         inc	sp
21491                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21492 543B           3246         FC            xor	al,-4[bp]
21493 543E           8846         FC            mov	-4[bp],al
21494                                           !BCC_EOS
21495                                           ! 2496           }
21496                                           ! 2497          else
21497                                           ! 2498           {
21498 5441           EB           1E            jmp .176
21499                       00005443            .174:
21500                                           ! 2499            data |= (attr & 0x01) << (7-j);
21501                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21502 5443           B8                   0007  mov	ax,*7
21503 5446           2A46         FE            sub	al,-2[bp]
21504 5449           80DC                   00  sbb	ah,*0
21505 544C           50                         push	ax
21506                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21507 544D           8A46         06            mov	al,6[bp]
21508 5450           24                     01  and	al,*1
21509                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21510 5452           30E4                       xor	ah,ah
21511 5454           8B4E         F2            mov	cx,-$E[bp]
21512 5457           D3E0                       shl	ax,cl
21513 5459           44                         inc	sp
21514 545A           44                         inc	sp
21515                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21516 545B           0A46         FC            or	al,-4[bp]
21517 545E           8846         FC            mov	-4[bp],al
21518                                           !BCC_EOS
21519                                           ! 2500           }
21520                                           ! 2501         }
21521                       00005461            .176:
21522                                           ! 2502        mask >>= 1;
21523                       00005461            .172:
21524                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21525 5461           8A46         FD            mov	al,-3[bp]
21526 5464           30E4                       xor	ah,ah
21527 5466           D1E8                       shr	ax,*1
21528 5468           8846         FD            mov	-3[bp],al
21529                                           !BCC_EOS
21530                                           ! 2503       }
21531                                           ! 2504      write_byte(0xb800,dest,data);
21532                       0000546B            .16F:
21533                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21534 546B           8A46         FE            mov	al,-2[bp]
21535 546E           40                         inc	ax
21536 546F           8846         FE            mov	-2[bp],al
21537                       00005472            .170:
21538                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21539 5472           8A46         FE            mov	al,-2[bp]
21540 5475           3C                     08  cmp	al,*8
21541 5477           72           8A            jb 	.171
21542                       00005479            .177:
21543                       00005479            .16E:
21544                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21545 5479           8A46         FC            mov	al,-4[bp]
21546 547C           30E4                       xor	ah,ah
21547 547E           50                         push	ax
21548                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21549 547F           FF76         F6            push	-$A[bp]
21550                                           ! Debug: list unsigned int = const $B800 (used reg = )
21551 5482           B8                   B800  mov	ax,#$B800
21552 5485           50                         push	ax
21553                                           ! Debug: func () void = write_byte+0 (used reg = )
21554 5486           E8         2912            call	_write_byte
21555 5489           83C4                   06  add	sp,*6
21556                                           !BCC_EOS
21557                                           ! 2505     }
21558                                           ! 2506    else
21559                                           ! 2507     {
21560 548C           E9         00C7            br 	.178
21561                       0000548F            .169:
21562                                           ! 2508      while (mask > 0)
21563                                           ! 2509       {
21564 548F           E9         00BB            br 	.17A
21565                       00005492            .17B:
21566                                           ! 2510        if (attr & 0x80)
21567                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21568 5492           8A46         06            mov	al,6[bp]
21569 5495           24                     80  and	al,#$80
21570 5497           84C0                       test	al,al
21571 5499           74           12            je  	.17C
21572                       0000549B            .17D:
21573                                           ! 2511         {
21574                                           ! 2512          data = read_byte(0xb800,dest);
21575                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21576 549B           FF76         F6            push	-$A[bp]
21577                                           ! Debug: list unsigned int = const $B800 (used reg = )
21578 549E           B8                   B800  mov	ax,#$B800
21579 54A1           50                         push	ax
21580                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21581 54A2           E8         28D0            call	_read_byte
21582 54A5           83C4                   04  add	sp,*4
21583                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21584 54A8           8846         FC            mov	-4[bp],al
21585                                           !BCC_EOS
21586                                           ! 2513         }
21587                                           ! 2514        else
21588                                           ! 2515         {
21589 54AB           EB           05            jmp .17E
21590                       000054AD            .17C:
21591                                           ! 2516          data = 0x00;
21592                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21593 54AD           30C0                       xor	al,al
21594 54AF           8846         FC            mov	-4[bp],al
21595                                           !BCC_EOS
21596                                           ! 2517         }
21597                                           ! 2518        for(j=0;j<4;j++)
21598                       000054B2            .17E:
21599                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21600 54B2           30C0                       xor	al,al
21601 54B4           8846         FE            mov	-2[bp],al
21602                                           !BCC_EOS
21603                                           !BCC_EOS
21604                                           ! 2519         {
21605 54B7           EB           73            jmp .181
21606                       000054B9            .182:
21607                                           ! 2520          if (fdata[src+i] & mask)
21608                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21609 54B9           8B46         F4            mov	ax,-$C[bp]
21610 54BC           0246         FF            add	al,-1[bp]
21611 54BF           80D4                   00  adc	ah,*0
21612                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21613 54C2           0346         FA            add	ax,-6[bp]
21614 54C5           89C3                       mov	bx,ax
21615                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21616 54C7           8A07                       mov	al,[bx]
21617 54C9           2246         FD            and	al,-3[bp]
21618 54CC           84C0                       test	al,al
21619 54CE           74           4B            je  	.183
21620                       000054D0            .184:
21621                                           ! 2521           {
21622                                           ! 2522            if (attr & 0x80)
21623                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21624 54D0           8A46         06            mov	al,6[bp]
21625 54D3           24                     80  and	al,#$80
21626 54D5           84C0                       test	al,al
21627 54D7           74           22            je  	.185
21628                       000054D9            .186:
21629                                           ! 2523             {
21630                                           ! 2524              data ^= (attr & 0x03) << ((3-j)*2);
21631                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21632 54D9           B8                   0003  mov	ax,*3
21633 54DC           2A46         FE            sub	al,-2[bp]
21634 54DF           80DC                   00  sbb	ah,*0
21635                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21636 54E2           D1E0                       shl	ax,*1
21637 54E4           50                         push	ax
21638                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21639 54E5           8A46         06            mov	al,6[bp]
21640 54E8           24                     03  and	al,*3
21641                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21642 54EA           30E4                       xor	ah,ah
21643 54EC           8B4E         F2            mov	cx,-$E[bp]
21644 54EF           D3E0                       shl	ax,cl
21645 54F1           44                         inc	sp
21646 54F2           44                         inc	sp
21647                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21648 54F3           3246         FC            xor	al,-4[bp]
21649 54F6           8846         FC            mov	-4[bp],al
21650                                           !BCC_EOS
21651                                           ! 2525             }
21652                                           ! 2526            else
21653                                           ! 2527             {
21654 54F9           EB           20            jmp .187
21655                       000054FB            .185:
21656                                           ! 2528              data |= (attr & 0x03) << ((3-j)*2);
21657                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21658 54FB           B8                   0003  mov	ax,*3
21659 54FE           2A46         FE            sub	al,-2[bp]
21660 5501           80DC                   00  sbb	ah,*0
21661                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21662 5504           D1E0                       shl	ax,*1
21663 5506           50                         push	ax
21664                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21665 5507           8A46         06            mov	al,6[bp]
21666 550A           24                     03  and	al,*3
21667                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21668 550C           30E4                       xor	ah,ah
21669 550E           8B4E         F2            mov	cx,-$E[bp]
21670 5511           D3E0                       shl	ax,cl
21671 5513           44                         inc	sp
21672 5514           44                         inc	sp
21673                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21674 5515           0A46         FC            or	al,-4[bp]
21675 5518           8846         FC            mov	-4[bp],al
21676                                           !BCC_EOS
21677                                           ! 2529             }
21678                                           ! 2530           }
21679                       0000551B            .187:
21680                                           ! 2531          mask >>= 1;
21681                       0000551B            .183:
21682                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21683 551B           8A46         FD            mov	al,-3[bp]
21684 551E           30E4                       xor	ah,ah
21685 5520           D1E8                       shr	ax,*1
21686 5522           8846         FD            mov	-3[bp],al
21687                                           !BCC_EOS
21688                                           ! 2532         }
21689                                           ! 2533        
21690                                           ! 2533 write_byte(0xb800,dest,data);
21691                       00005525            .180:
21692                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21693 5525           8A46         FE            mov	al,-2[bp]
21694 5528           40                         inc	ax
21695 5529           8846         FE            mov	-2[bp],al
21696                       0000552C            .181:
21697                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21698 552C           8A46         FE            mov	al,-2[bp]
21699 552F           3C                     04  cmp	al,*4
21700 5531           72           86            jb 	.182
21701                       00005533            .188:
21702                       00005533            .17F:
21703                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21704 5533           8A46         FC            mov	al,-4[bp]
21705 5536           30E4                       xor	ah,ah
21706 5538           50                         push	ax
21707                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21708 5539           FF76         F6            push	-$A[bp]
21709                                           ! Debug: list unsigned int = const $B800 (used reg = )
21710 553C           B8                   B800  mov	ax,#$B800
21711 553F           50                         push	ax
21712                                           ! Debug: func () void = write_byte+0 (used reg = )
21713 5540           E8         2858            call	_write_byte
21714 5543           83C4                   06  add	sp,*6
21715                                           !BCC_EOS
21716                                           ! 2534        dest += 1;
21717                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21718 5546           8B46         F6            mov	ax,-$A[bp]
21719 5549           40                         inc	ax
21720 554A           8946         F6            mov	-$A[bp],ax
21721                                           !BCC_EOS
21722                                           ! 2535       }
21723                                           ! 2536     }
21724                       0000554D            .17A:
21725                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21726 554D           8A46         FD            mov	al,-3[bp]
21727 5550           84C0                       test	al,al
21728 5552         0F85         FF3C            bne 	.17B
21729                       00005556            .189:
21730                       00005556            .179:
21731                                           ! 2537   }
21732                       00005556            .178:
21733                                           ! 2538 }
21734                       00005556            .164:
21735                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21736 5556           8A46         FF            mov	al,-1[bp]
21737 5559           40                         inc	ax
21738 555A           8846         FF            mov	-1[bp],al
21739                       0000555D            .165:
21740                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21741 555D           8A46         FF            mov	al,-1[bp]
21742 5560           3C                     08  cmp	al,*8
21743 5562         0F82         FE44            blo 	.166
21744                       00005566            .18A:
21745                       00005566            .163:
21746 5566           89EC                       mov	sp,bp
21747 5568           5D                         pop	bp
21748 5569           C3                         ret
21749                                           ! 2539 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21750                                           ! Register BX used in function write_gfx_char_cga
21751                                           ! 2540 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21752                       0000556A            _write_gfx_char_lin:
21753                                           !BCC_EOS
21754                                           !BCC_EOS
21755                                           !BCC_EOS
21756                                           !BCC_EOS
21757                                           !BCC_EOS
21758                                           ! 2541 {
21759                                           ! 2542  Bit8u i,j,mask,data;
21760                                           !BCC_EOS
21761                                           ! 2543  Bit8u *fdata;
21762                                           !BCC_EOS
21763                                           ! 2544  Bit16u addr,dest,src;
21764                                           !BCC_EOS
21765                                           ! 2545  fdata = &vgafont8;
21766 556A           55                         push	bp
21767 556B           89E5                       mov	bp,sp
21768 556D           83C4                   F4  add	sp,*-$C
21769                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21770 5570           BB                   0F6F  mov	bx,#_vgafont8
21771 5573           895E         FA            mov	-6[bp],bx
21772                                           !BCC_EOS
21773                                           ! 2546  addr=xcurs*8+ycurs*nbcols*64;
21774                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21775 5576           8A46         0C            mov	al,$C[bp]
21776 5579           30E4                       xor	ah,ah
21777 557B           89C3                       mov	bx,ax
21778 557D           8A46         0A            mov	al,$A[bp]
21779 5580           30E4                       xor	ah,ah
21780 5582           89D9                       mov	cx,bx
21781 5584           F7E9                       imul	cx
21782                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21783 5586           B1                     06  mov	cl,*6
21784 5588           D3E0                       shl	ax,cl
21785 558A           50                         push	ax
21786                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21787 558B           8A46         08            mov	al,8[bp]
21788 558E           30E4                       xor	ah,ah
21789 5590           B1                     03  mov	cl,*3
21790 5592           D3E0                       shl	ax,cl
21791                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21792 5594           0346         F2            add	ax,-$E[bp]
21793 5597           44                         inc	sp
21794 5598           44                         inc	sp
21795                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21796 5599           8946         F8            mov	-8[bp],ax
21797                                           !BCC_EOS
21798                                           ! 2547  src = car * 8;
21799                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21800 559C           8A46         04            mov	al,4[bp]
21801 559F           30E4                       xor	ah,ah
21802 55A1           B1                     03  mov	cl,*3
21803 55A3           D3E0                       shl	ax,cl
21804                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21805 55A5           8946         F4            mov	-$C[bp],ax
21806                                           !BCC_EOS
21807                                           ! 2548  for(i=0;i<8;i++)
21808                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21809 55A8           30C0                       xor	al,al
21810 55AA           8846         FF            mov	-1[bp],al
21811                                           !BCC_EOS
21812                                           !BCC_EOS
21813                                           ! 2549   {
21814 55AD           E9         0081            br 	.18D
21815                       000055B0            .18E:
21816                                           ! 2550    dest=addr+i*nbcols*8;
21817                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21818 55B0           8A46         0C            mov	al,$C[bp]
21819 55B3           30E4                       xor	ah,ah
21820 55B5           89C3                       mov	bx,ax
21821 55B7           8A46         FF            mov	al,-1[bp]
21822 55BA           30E4                       xor	ah,ah
21823 55BC           89D9                       mov	cx,bx
21824 55BE           F7E9                       imul	cx
21825                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21826 55C0           B1                     03  mov	cl,*3
21827 55C2           D3E0                       shl	ax,cl
21828                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21829                                           ! Debug: expression subtree swapping
21830 55C4           0346         F8            add	ax,-8[bp]
21831                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21832 55C7           8946         F6            mov	-$A[bp],ax
21833                                           !BCC_EOS
21834                                           ! 2551    mask = 0x80;
21835                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21836 55CA           B0                     80  mov	al,#$80
21837 55CC           8846         FD            mov	-3[bp],al
21838                                           !BCC_EOS
21839                                           ! 2552    for(j=0;j<8;j++)
21840                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21841 55CF           30C0                       xor	al,al
21842 55D1           8846         FE            mov	-2[bp],al
21843                                           !BCC_EOS
21844                                           !BCC_EOS
21845                                           ! 2553     {
21846 55D4           EB           4D            jmp .191
21847                       000055D6            .192:
21848                                           ! 2554      data = 0x00;
21849                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21850 55D6           30C0                       xor	al,al
21851 55D8           8846         FC            mov	-4[bp],al
21852                                           !BCC_EOS
21853                                           ! 2555      if (fdata[src+i] & mask)
21854                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21855 55DB           8B46         F4            mov	ax,-$C[bp]
21856 55DE           0246         FF            add	al,-1[bp]
21857 55E1           80D4                   00  adc	ah,*0
21858                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21859 55E4           0346         FA            add	ax,-6[bp]
21860 55E7           89C3                       mov	bx,ax
21861                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21862 55E9           8A07                       mov	al,[bx]
21863 55EB           2246         FD            and	al,-3[bp]
21864 55EE           84C0                       test	al,al
21865 55F0           74           06            je  	.193
21866                       000055F2            .194:
21867                                           ! 2556       {
21868                                           ! 2557        data = attr;
21869                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21870 55F2           8A46         06            mov	al,6[bp]
21871 55F5           8846         FC            mov	-4[bp],al
21872                                           !BCC_EOS
21873                                           ! 2558       }
21874                                           ! 2559      write_byte(0xa000,dest+j,data);
21875                       000055F8            .193:
21876                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21877 55F8           8A46         FC            mov	al,-4[bp]
21878 55FB           30E4                       xor	ah,ah
21879 55FD           50                         push	ax
21880                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21881 55FE           8B46         F6            mov	ax,-$A[bp]
21882 5601           0246         FE            add	al,-2[bp]
21883 5604           80D4                   00  adc	ah,*0
21884                                           ! Debug: list unsigned int = ax+0 (used reg = )
21885 5607           50                         push	ax
21886                                           ! Debug: list unsigned int = const $A000 (used reg = )
21887 5608           B8                   A000  mov	ax,#$A000
21888 560B           50                         push	ax
21889                                           ! Debug: func () void = write_byte+0 (used reg = )
21890 560C           E8         278C            call	_write_byte
21891 560F           83C4                   06  add	sp,*6
21892                                           !BCC_EOS
21893                                           ! 2560      mask >>= 1;
21894                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21895 5612           8A46         FD            mov	al,-3[bp]
21896 5615           30E4                       xor	ah,ah
21897 5617           D1E8                       shr	ax,*1
21898 5619           8846         FD            mov	-3[bp],al
21899                                           !BCC_EOS
21900                                           ! 2561     }
21901                                           ! 2562   }
21902                       0000561C            .190:
21903                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21904 561C           8A46         FE            mov	al,-2[bp]
21905 561F           40                         inc	ax
21906 5620           8846         FE            mov	-2[bp],al
21907                       00005623            .191:
21908                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21909 5623           8A46         FE            mov	al,-2[bp]
21910 5626           3C                     08  cmp	al,*8
21911 5628           72           AC            jb 	.192
21912                       0000562A            .195:
21913                       0000562A            .18F:
21914                                           ! 2563 }
21915                       0000562A            .18C:
21916                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21917 562A           8A46         FF            mov	al,-1[bp]
21918 562D           40                         inc	ax
21919 562E           8846         FF            mov	-1[bp],al
21920                       00005631            .18D:
21921                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21922 5631           8A46         FF            mov	al,-1[bp]
21923 5634           3C                     08  cmp	al,*8
21924 5636         0F82         FF76            blo 	.18E
21925                       0000563A            .196:
21926                       0000563A            .18B:
21927 563A           89EC                       mov	sp,bp
21928 563C           5D                         pop	bp
21929 563D           C3                         ret
21930                                           ! 2564 static void biosfn_write_char_attr (car,page,attr,count)
21931                                           ! Register BX used in function write_gfx_char_lin
21932                                           ! 2565 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21933                       0000563E            _biosfn_write_char_attr:
21934                                           !BCC_EOS
21935                                           !BCC_EOS
21936                                           !BCC_EOS
21937                                           !BCC_EOS
21938                                           ! 2566 {
21939                                           ! 2567  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21940                                           !BCC_EOS
21941                                           ! 2568  Bit16u nbcols,nbrows,address;
21942                                           !BCC_EOS
21943                                           ! 2569  Bit16u cursor,dummy;
21944                                           !BCC_EOS
21945                                           ! 2570  mode=read_byte(0x40,0x49);
21946 563E           55                         push	bp
21947 563F           89E5                       mov	bp,sp
21948 5641           83C4                   F0  add	sp,*-$10
21949                                           ! Debug: list int = const $49 (used reg = )
21950 5644           B8                   0049  mov	ax,*$49
21951 5647           50                         push	ax
21952                                           ! Debug: list int = const $40 (used reg = )
21953 5648           B8                   0040  mov	ax,*$40
21954 564B           50                         push	ax
21955                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21956 564C           E8         2726            call	_read_byte
21957 564F           83C4                   04  add	sp,*4
21958                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21959 5652           8846         FC            mov	-4[bp],al
21960                                           !BCC_EOS
21961                                           ! 2571  line=find_vga_entry(mode);
21962                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21963 5655           8A46         FC            mov	al,-4[bp]
21964 5658           30E4                       xor	ah,ah
21965 565A           50                         push	ax
21966                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21967 565B           E8         262B            call	_find_vga_entry
21968 565E           44                         inc	sp
21969 565F           44                         inc	sp
21970                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21971 5660           8846         FB            mov	-5[bp],al
21972                                           !BCC_EOS
21973                                           ! 2572  if(line==0xFF)return;
21974                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21975 5663           8A46         FB            mov	al,-5[bp]
21976 5666           3C                     FF  cmp	al,#$FF
21977 5668           75           04            jne 	.197
21978                       0000566A            .198:
21979 566A           89EC                       mov	sp,bp
21980 566C           5D                         pop	bp
21981 566D           C3                         ret
21982                                           !BCC_EOS
21983                                           ! 2573  biosfn_get_cursor_pos(page,&dummy,&cursor);
21984                       0000566E            .197:
21985                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21986 566E           8D5E         F2            lea	bx,-$E[bp]
21987 5671           53                         push	bx
21988                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21989 5672           8D5E         F0            lea	bx,-$10[bp]
21990 5675           53                         push	bx
21991                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21992 5676           8A46         06            mov	al,6[bp]
21993 5679           30E4                       xor	ah,ah
21994 567B           50                         push	ax
21995                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21996 567C           E8         EE3F            call	_biosfn_get_cursor_pos
21997 567F           83C4                   06  add	sp,*6
21998                                           !BCC_EOS
21999                                           ! 2574  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22000                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22001 5682           8A46         F2            mov	al,-$E[bp]
22002                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22003 5685           8846         FE            mov	-2[bp],al
22004                                           !BCC_EOS
22005                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22006 5688           8B46         F2            mov	ax,-$E[bp]
22007 568B           30C0                       xor	al,al
22008                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22009 568D           88E0                       mov	al,ah
22010 568F           30E4                       xor	ah,ah
22011                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22012 5691           8846         FD            mov	-3[bp],al
22013                                           !BCC_EOS
22014                                           ! 2575  nbrows=read_byte(0x40,0x84)+1;
22015                                           ! Debug: list int = const $84 (used reg = )
22016 5694           B8                   0084  mov	ax,#$84
22017 5697           50                         push	ax
22018                                           ! Debug: list int = const $40 (used reg = )
22019 5698           B8                   0040  mov	ax,*$40
22020 569B           50                         push	ax
22021                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22022 569C           E8         26D6            call	_read_byte
22023 569F           83C4                   04  add	sp,*4
22024                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22025 56A2           30E4                       xor	ah,ah
22026                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22027 56A4           40                         inc	ax
22028 56A5           8946         F6            mov	-$A[bp],ax
22029                                           !BCC_EOS
22030                                           ! 2576  nbcols=read_word(0x40,0x4A);
22031                                           ! Debug: list int = const $4A (used reg = )
22032 56A8           B8                   004A  mov	ax,*$4A
22033 56AB           50                         push	ax
22034                                           ! Debug: list int = const $40 (used reg = )
22035 56AC           B8                   0040  mov	ax,*$40
22036 56AF           50                         push	ax
22037                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22038 56B0           E8         26D5            call	_read_word
22039 56B3           83C4                   04  add	sp,*4
22040                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22041 56B6           8946         F8            mov	-8[bp],ax
22042                                           !BCC_EOS
22043                                           ! 2577  if(vga_modes[line].class==0x00)
22044                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22045 56B9           8A46         FB            mov	al,-5[bp]
22046 56BC           30E4                       xor	ah,ah
22047 56BE           B1                     03  mov	cl,*3
22048 56C0           D3E0                       shl	ax,cl
22049 56C2           89C3                       mov	bx,ax
22050 56C4           81C3                 020B  add	bx,#_vga_modes
22051                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22052 56C8           8A47         01            mov	al,1[bx]
22053 56CB           84C0                       test	al,al
22054 56CD         0F85         006A            bne 	.199
22055                       000056D1            .19A:
22056                                           ! 2578   {
22057                                           ! 2579    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22058                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22059 56D1           8A46         FD            mov	al,-3[bp]
22060 56D4           30E4                       xor	ah,ah
22061 56D6           8B4E         F8            mov	cx,-8[bp]
22062 56D9           F7E9                       imul	cx
22063                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22064                                           ! Debug: expression subtree swapping
22065 56DB           0246         FE            add	al,-2[bp]
22066 56DE           80D4                   00  adc	ah,*0
22067                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22068 56E1           D1E0                       shl	ax,*1
22069 56E3           50                         push	ax
22070                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22071 56E4           8B46         F8            mov	ax,-8[bp]
22072 56E7           8B4E         F6            mov	cx,-$A[bp]
22073 56EA           F7E9                       imul	cx
22074                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22075 56EC           D1E0                       shl	ax,*1
22076                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22077 56EE           0C                     FF  or	al,#$FF
22078                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22079                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22080 56F0           89C3                       mov	bx,ax
22081 56F2           8A46         06            mov	al,6[bp]
22082 56F5           30E4                       xor	ah,ah
22083 56F7           93                         xchg	ax,bx
22084 56F8           40                         inc	ax
22085 56F9           89D9                       mov	cx,bx
22086 56FB           F7E9                       imul	cx
22087                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22088 56FD           0346         EE            add	ax,-$12[bp]
22089 5700           44                         inc	sp
22090 5701           44                         inc	sp
22091                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22092 5702           8946         F4            mov	-$C[bp],ax
22093                                           !BCC_EOS
22094                                           ! 2580    dummy=((Bit16u)attr<<8)+car;
22095                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
22096 5705           8A46         08            mov	al,8[bp]
22097 5708           30E4                       xor	ah,ah
22098                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
22099 570A           88C4                       mov	ah,al
22100 570C           30C0                       xor	al,al
22101                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
22102 570E           0246         04            add	al,4[bp]
22103 5711           80D4                   00  adc	ah,*0
22104                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
22105 5714           8946         F0            mov	-$10[bp],ax
22106                                           !BCC_EOS
22107                                           ! 2581    memsetw(vga_modes[line].sstart,address,dummy,count);
22108                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
22109 5717           FF76         0A            push	$A[bp]
22110                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
22111 571A           FF76         F0            push	-$10[bp]
22112                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
22113 571D           FF76         F4            push	-$C[bp]
22114                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
22115 5720           8A46         FB            mov	al,-5[bp]
22116 5723           30E4                       xor	ah,ah
22117 5725           B1                     03  mov	cl,*3
22118 5727           D3E0                       shl	ax,cl
22119 5729           89C3                       mov	bx,ax
22120 572B           81C3                 020B  add	bx,#_vga_modes
22121                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22122 572F           FF77         04            push	4[bx]
22123                                           ! Debug: func () void = memsetw+0 (used reg = )
22124 5732           E8         25BB            call	_memsetw
22125 5735           83C4                   08  add	sp,*8
22126                                           !BCC_EOS
22127                                           ! 2582   }
22128                                           ! 2583  else
22129                                           ! 2584   {
22130 5738           E9         00F8            br 	.19B
22131                       0000573B            .199:
22132                                           ! 2585    cheight=video_param_table[line_to_vpti[line]].cheight;
22133                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22134 573B           8A46         FB            mov	al,-5[bp]
22135 573E           30E4                       xor	ah,ah
22136 5740           89C3                       mov	bx,ax
22137                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22138 5742           8A87       028B            mov	al,_line_to_vpti[bx]
22139 5746           30E4                       xor	ah,ah
22140 5748           B1                     06  mov	cl,*6
22141 574A           D3E0                       shl	ax,cl
22142 574C           89C3                       mov	bx,ax
22143 574E           81C3                 029F  add	bx,#_video_param_table
22144                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22145 5752           8A47         02            mov	al,2[bx]
22146 5755           8846         FF            mov	-1[bp],al
22147                                           !BCC_EOS
22148                                           ! 2586    bpp=vga_modes[line].pixbits;
22149                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22150 5758           8A46         FB            mov	al,-5[bp]
22151 575B           30E4                       xor	ah,ah
22152 575D           B1                     03  mov	cl,*3
22153 575F           D3E0                       shl	ax,cl
22154 5761           89C3                       mov	bx,ax
22155 5763           81C3                 020B  add	bx,#_vga_modes
22156                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22157 5767           8A47         03            mov	al,3[bx]
22158 576A           8846         FA            mov	-6[bp],al
22159                                           !BCC_EOS
22160                                           ! 2587    while((count-->0) && (xcurs<nbcols))
22161                                           ! 2588     {
22162 576D           E9         00AB            br 	.19D
22163                       00005770            .19E:
22164                                           ! 2589      switch(vga_modes[line].memmodel)
22165                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22166 5770           8A46         FB            mov	al,-5[bp]
22167 5773           30E4                       xor	ah,ah
22168 5775           B1                     03  mov	cl,*3
22169 5777           D3E0                       shl	ax,cl
22170 5779           89C3                       mov	bx,ax
22171 577B           81C3                 020B  add	bx,#_vga_modes
22172 577F           8A47         02            mov	al,2[bx]
22173                                           ! 2590       {
22174 5782           EB           7A            jmp .1A1
22175                                           ! 2591        case 0x04:
22176                                           ! 2592        case 0x03:
22177                       00005784            .1A2:
22178                                           ! 2593          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22179                       00005784            .1A3:
22180                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22181 5784           8A46         FF            mov	al,-1[bp]
22182 5787           30E4                       xor	ah,ah
22183 5789           50                         push	ax
22184                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22185 578A           FF76         F8            push	-8[bp]
22186                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22187 578D           8A46         FD            mov	al,-3[bp]
22188 5790           30E4                       xor	ah,ah
22189 5792           50                         push	ax
22190                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22191 5793           8A46         FE            mov	al,-2[bp]
22192 5796           30E4                       xor	ah,ah
22193 5798           50                         push	ax
22194                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22195 5799           8A46         08            mov	al,8[bp]
22196 579C           30E4                       xor	ah,ah
22197 579E           50                         push	ax
22198                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22199 579F           8A46         04            mov	al,4[bp]
22200 57A2           30E4                       xor	ah,ah
22201 57A4           50                         push	ax
22202                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22203 57A5           E8         FA4C            call	_write_gfx_char_pl4
22204 57A8           83C4                   0C  add	sp,*$C
22205                                           !BCC_EOS
22206                                           ! 2594          break;
22207 57AB           EB           67            jmp .19F
22208                                           !BCC_EOS
22209                                           ! 2595        case 0x02:
22210                                           ! 2596          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22211                       000057AD            .1A4:
22212                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22213 57AD           8A46         FA            mov	al,-6[bp]
22214 57B0           30E4                       xor	ah,ah
22215 57B2           50                         push	ax
22216                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22217 57B3           FF76         F8            push	-8[bp]
22218                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22219 57B6           8A46         FD            mov	al,-3[bp]
22220 57B9           30E4                       xor	ah,ah
22221 57BB           50                         push	ax
22222                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22223 57BC           8A46         FE            mov	al,-2[bp]
22224 57BF           30E4                       xor	ah,ah
22225 57C1           50                         push	ax
22226                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22227 57C2           8A46         08            mov	al,8[bp]
22228 57C5           30E4                       xor	ah,ah
22229 57C7           50                         push	ax
22230                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22231 57C8           8A46         04            mov	al,4[bp]
22232 57CB           30E4                       xor	ah,ah
22233 57CD           50                         push	ax
22234                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22235 57CE           E8         FB96            call	_write_gfx_char_cga
22236 57D1           83C4                   0C  add	sp,*$C
22237                                           !BCC_EOS
22238                                           ! 2597          break;
22239 57D4           EB           3E            jmp .19F
22240                                           !BCC_EOS
22241                                           ! 2598        case 0x05:
22242                                           ! 2599          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22243                       000057D6            .1A5:
22244                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22245 57D6           FF76         F8            push	-8[bp]
22246                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22247 57D9           8A46         FD            mov	al,-3[bp]
22248 57DC           30E4                       xor	ah,ah
22249 57DE           50                         push	ax
22250                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22251 57DF           8A46         FE            mov	al,-2[bp]
22252 57E2           30E4                       xor	ah,ah
22253 57E4           50                         push	ax
22254                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22255 57E5           8A46         08            mov	al,8[bp]
22256 57E8           30E4                       xor	ah,ah
22257 57EA           50                         push	ax
22258                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22259 57EB           8A46         04            mov	al,4[bp]
22260 57EE           30E4                       xor	ah,ah
22261 57F0           50                         push	ax
22262                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22263 57F1           E8         FD76            call	_write_gfx_char_lin
22264 57F4           83C4                   0A  add	sp,*$A
22265                                           !BCC_EOS
22266                                           ! 2600          break;
22267 57F7           EB           1B            jmp .19F
22268                                           !BCC_EOS
22269                                           ! 2601        default:
22270                                           ! 2602          unimplemented();
22271                       000057F9            .1A6:
22272                                           ! Debug: func () void = unimplemented+0 (used reg = )
22273 57F9           E8         2608            call	_unimplemented
22274                                           !BCC_EOS
22275                                           ! 2603       }
22276                                           ! 2604      xcurs++;
22277 57FC           EB           16            jmp .19F
22278                       000057FE            .1A1:
22279 57FE           2C                     02  sub	al,*2
22280 5800           74           AB            je 	.1A4
22281 5802           2C                     01  sub	al,*1
22282 5804         0F84         FF7C            beq 	.1A3
22283 5808           2C                     01  sub	al,*1
22284 580A         0F84         FF76            beq 	.1A2
22285 580E           2C                     01  sub	al,*1
22286 5810           74           C4            je 	.1A5
22287 5812           EB           E5            jmp	.1A6
22288                       00005814            .19F:
22289                       FFFFFFEE            ..FFFA	=	-$12
22290                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22291 5814           8A46         FE            mov	al,-2[bp]
22292 5817           40                         inc	ax
22293 5818           8846         FE            mov	-2[bp],al
22294                                           !BCC_EOS
22295                                           ! 2605     }
22296                                           ! 2606   }
22297                       0000581B            .19D:
22298                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22299 581B           8B46         0A            mov	ax,$A[bp]
22300 581E           48                         dec	ax
22301 581F           8946         0A            mov	$A[bp],ax
22302                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22303 5822           3D                   FFFF  cmp	ax,*-1
22304 5825           74           0C            je  	.1A7
22305                       00005827            .1A8:
22306                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22307 5827           8A46         FE            mov	al,-2[bp]
22308 582A           30E4                       xor	ah,ah
22309 582C           3B46         F8            cmp	ax,-8[bp]
22310 582F         0F82         FF3D            blo 	.19E
22311                       00005833            .1A7:
22312                       00005833            .19C:
22313                                           ! 2607 }
22314                       00005833            .19B:
22315 5833           89EC                       mov	sp,bp
22316 5835           5D                         pop	bp
22317 5836           C3                         ret
22318                                           ! 2608 static void biosfn_write_char_only (car,page,attr,count)
22319                                           ! Register BX used in function biosfn_write_char_attr
22320                                           ! 2609 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
22321                       00005837            _biosfn_write_char_only:
22322                                           !BCC_EOS
22323                                           !BCC_EOS
22324                                           !BCC_EOS
22325                                           !BCC_EOS
22326                                           ! 2610 {
22327                                           ! 2611  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
22328                                           !BCC_EOS
22329                                           ! 2612  Bit16u nbcols,nbrows,address;
22330                                           !BCC_EOS
22331                                           ! 2613  Bit16u cursor,dummy;
22332                                           !BCC_EOS
22333                                           ! 2614  mode=read_byte(0x40,0x49);
22334 5837           55                         push	bp
22335 5838           89E5                       mov	bp,sp
22336 583A           83C4                   F0  add	sp,*-$10
22337                                           ! Debug: list int = const $49 (used reg = )
22338 583D           B8                   0049  mov	ax,*$49
22339 5840           50                         push	ax
22340                                           ! Debug: list int = const $40 (used reg = )
22341 5841           B8                   0040  mov	ax,*$40
22342 5844           50                         push	ax
22343                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22344 5845           E8         252D            call	_read_byte
22345 5848           83C4                   04  add	sp,*4
22346                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
22347 584B           8846         FC            mov	-4[bp],al
22348                                           !BCC_EOS
22349                                           ! 2615  line=find_vga_entry(mode);
22350                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
22351 584E           8A46         FC            mov	al,-4[bp]
22352 5851           30E4                       xor	ah,ah
22353 5853           50                         push	ax
22354                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22355 5854           E8         2432            call	_find_vga_entry
22356 5857           44                         inc	sp
22357 5858           44                         inc	sp
22358                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
22359 5859           8846         FB            mov	-5[bp],al
22360                                           !BCC_EOS
22361                                           ! 2616  if(line==0xFF)return;
22362                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
22363 585C           8A46         FB            mov	al,-5[bp]
22364 585F           3C                     FF  cmp	al,#$FF
22365 5861           75           04            jne 	.1A9
22366                       00005863            .1AA:
22367 5863           89EC                       mov	sp,bp
22368 5865           5D                         pop	bp
22369 5866           C3                         ret
22370                                           !BCC_EOS
22371                                           ! 2617  bios
22372                                           ! 2617 fn_get_cursor_pos(page,&dummy,&cursor);
22373                       00005867            .1A9:
22374                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
22375 5867           8D5E         F2            lea	bx,-$E[bp]
22376 586A           53                         push	bx
22377                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
22378 586B           8D5E         F0            lea	bx,-$10[bp]
22379 586E           53                         push	bx
22380                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
22381 586F           8A46         06            mov	al,6[bp]
22382 5872           30E4                       xor	ah,ah
22383 5874           50                         push	ax
22384                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
22385 5875           E8         EC46            call	_biosfn_get_cursor_pos
22386 5878           83C4                   06  add	sp,*6
22387                                           !BCC_EOS
22388                                           ! 2618  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
22389                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
22390 587B           8A46         F2            mov	al,-$E[bp]
22391                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22392 587E           8846         FE            mov	-2[bp],al
22393                                           !BCC_EOS
22394                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
22395 5881           8B46         F2            mov	ax,-$E[bp]
22396 5884           30C0                       xor	al,al
22397                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
22398 5886           88E0                       mov	al,ah
22399 5888           30E4                       xor	ah,ah
22400                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
22401 588A           8846         FD            mov	-3[bp],al
22402                                           !BCC_EOS
22403                                           ! 2619  nbrows=read_byte(0x40,0x84)+1;
22404                                           ! Debug: list int = const $84 (used reg = )
22405 588D           B8                   0084  mov	ax,#$84
22406 5890           50                         push	ax
22407                                           ! Debug: list int = const $40 (used reg = )
22408 5891           B8                   0040  mov	ax,*$40
22409 5894           50                         push	ax
22410                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22411 5895           E8         24DD            call	_read_byte
22412 5898           83C4                   04  add	sp,*4
22413                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
22414 589B           30E4                       xor	ah,ah
22415                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
22416 589D           40                         inc	ax
22417 589E           8946         F6            mov	-$A[bp],ax
22418                                           !BCC_EOS
22419                                           ! 2620  nbcols=read_word(0x40,0x4A);
22420                                           ! Debug: list int = const $4A (used reg = )
22421 58A1           B8                   004A  mov	ax,*$4A
22422 58A4           50                         push	ax
22423                                           ! Debug: list int = const $40 (used reg = )
22424 58A5           B8                   0040  mov	ax,*$40
22425 58A8           50                         push	ax
22426                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22427 58A9           E8         24DC            call	_read_word
22428 58AC           83C4                   04  add	sp,*4
22429                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
22430 58AF           8946         F8            mov	-8[bp],ax
22431                                           !BCC_EOS
22432                                           ! 2621  if(vga_modes[line].class==0x00)
22433                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22434 58B2           8A46         FB            mov	al,-5[bp]
22435 58B5           30E4                       xor	ah,ah
22436 58B7           B1                     03  mov	cl,*3
22437 58B9           D3E0                       shl	ax,cl
22438 58BB           89C3                       mov	bx,ax
22439 58BD           81C3                 020B  add	bx,#_vga_modes
22440                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22441 58C1           8A47         01            mov	al,1[bx]
22442 58C4           84C0                       test	al,al
22443 58C6           75           6E            jne 	.1AB
22444                       000058C8            .1AC:
22445                                           ! 2622   {
22446                                           ! 2623    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22447                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22448 58C8           8A46         FD            mov	al,-3[bp]
22449 58CB           30E4                       xor	ah,ah
22450 58CD           8B4E         F8            mov	cx,-8[bp]
22451 58D0           F7E9                       imul	cx
22452                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22453                                           ! Debug: expression subtree swapping
22454 58D2           0246         FE            add	al,-2[bp]
22455 58D5           80D4                   00  adc	ah,*0
22456                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22457 58D8           D1E0                       shl	ax,*1
22458 58DA           50                         push	ax
22459                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22460 58DB           8B46         F8            mov	ax,-8[bp]
22461 58DE           8B4E         F6            mov	cx,-$A[bp]
22462 58E1           F7E9                       imul	cx
22463                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22464 58E3           D1E0                       shl	ax,*1
22465                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22466 58E5           0C                     FF  or	al,#$FF
22467                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22468                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22469 58E7           89C3                       mov	bx,ax
22470 58E9           8A46         06            mov	al,6[bp]
22471 58EC           30E4                       xor	ah,ah
22472 58EE           93                         xchg	ax,bx
22473 58EF           40                         inc	ax
22474 58F0           89D9                       mov	cx,bx
22475 58F2           F7E9                       imul	cx
22476                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22477 58F4           0346         EE            add	ax,-$12[bp]
22478 58F7           44                         inc	sp
22479 58F8           44                         inc	sp
22480                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22481 58F9           8946         F4            mov	-$C[bp],ax
22482                                           !BCC_EOS
22483                                           ! 2624    while(count-->0)
22484                                           ! 2625     {write_byte(vga_modes[line].sstart,address,car);
22485 58FC           EB           29            jmp .1AE
22486                       000058FE            .1AF:
22487                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22488 58FE           8A46         04            mov	al,4[bp]
22489 5901           30E4                       xor	ah,ah
22490 5903           50                         push	ax
22491                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22492 5904           FF76         F4            push	-$C[bp]
22493                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22494 5907           8A46         FB            mov	al,-5[bp]
22495 590A           30E4                       xor	ah,ah
22496 590C           B1                     03  mov	cl,*3
22497 590E           D3E0                       shl	ax,cl
22498 5910           89C3                       mov	bx,ax
22499 5912           81C3                 020B  add	bx,#_vga_modes
22500                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22501 5916           FF77         04            push	4[bx]
22502                                           ! Debug: func () void = write_byte+0 (used reg = )
22503 5919           E8         247F            call	_write_byte
22504 591C           83C4                   06  add	sp,*6
22505                                           !BCC_EOS
22506                                           ! 2626      address+=2;
22507                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22508 591F           8B46         F4            mov	ax,-$C[bp]
22509 5922           40                         inc	ax
22510 5923           40                         inc	ax
22511 5924           8946         F4            mov	-$C[bp],ax
22512                                           !BCC_EOS
22513                                           ! 2627     }
22514                                           ! 2628   }
22515                       00005927            .1AE:
22516                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22517 5927           8B46         0A            mov	ax,$A[bp]
22518 592A           48                         dec	ax
22519 592B           8946         0A            mov	$A[bp],ax
22520                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22521 592E           3D                   FFFF  cmp	ax,*-1
22522 5931           75           CB            jne	.1AF
22523                       00005933            .1B0:
22524                       00005933            .1AD:
22525                                           ! 2629  else
22526                                           ! 2630   {
22527 5933           E9         00F8            br 	.1B1
22528                       00005936            .1AB:
22529                                           ! 2631    cheight=video_param_table[line_to_vpti[line]].cheight;
22530                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22531 5936           8A46         FB            mov	al,-5[bp]
22532 5939           30E4                       xor	ah,ah
22533 593B           89C3                       mov	bx,ax
22534                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22535 593D           8A87       028B            mov	al,_line_to_vpti[bx]
22536 5941           30E4                       xor	ah,ah
22537 5943           B1                     06  mov	cl,*6
22538 5945           D3E0                       shl	ax,cl
22539 5947           89C3                       mov	bx,ax
22540 5949           81C3                 029F  add	bx,#_video_param_table
22541                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22542 594D           8A47         02            mov	al,2[bx]
22543 5950           8846         FF            mov	-1[bp],al
22544                                           !BCC_EOS
22545                                           ! 2632    bpp=vga_modes[line].pixbits;
22546                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22547 5953           8A46         FB            mov	al,-5[bp]
22548 5956           30E4                       xor	ah,ah
22549 5958           B1                     03  mov	cl,*3
22550 595A           D3E0                       shl	ax,cl
22551 595C           89C3                       mov	bx,ax
22552 595E           81C3                 020B  add	bx,#_vga_modes
22553                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22554 5962           8A47         03            mov	al,3[bx]
22555 5965           8846         FA            mov	-6[bp],al
22556                                           !BCC_EOS
22557                                           ! 2633    while((count-->0) && (xcurs<nbcols))
22558                                           ! 2634     {
22559 5968           E9         00AB            br 	.1B3
22560                       0000596B            .1B4:
22561                                           ! 2635      switch(vga_modes[line].memmodel)
22562                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22563 596B           8A46         FB            mov	al,-5[bp]
22564 596E           30E4                       xor	ah,ah
22565 5970           B1                     03  mov	cl,*3
22566 5972           D3E0                       shl	ax,cl
22567 5974           89C3                       mov	bx,ax
22568 5976           81C3                 020B  add	bx,#_vga_modes
22569 597A           8A47         02            mov	al,2[bx]
22570                                           ! 2636       {
22571 597D           EB           7A            jmp .1B7
22572                                           ! 2637        case 0x04:
22573                                           ! 2638        case 0x03:
22574                       0000597F            .1B8:
22575                                           ! 2639          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22576                       0000597F            .1B9:
22577                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22578 597F           8A46         FF            mov	al,-1[bp]
22579 5982           30E4                       xor	ah,ah
22580 5984           50                         push	ax
22581                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22582 5985           FF76         F8            push	-8[bp]
22583                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22584 5988           8A46         FD            mov	al,-3[bp]
22585 598B           30E4                       xor	ah,ah
22586 598D           50                         push	ax
22587                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22588 598E           8A46         FE            mov	al,-2[bp]
22589 5991           30E4                       xor	ah,ah
22590 5993           50                         push	ax
22591                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22592 5994           8A46         08            mov	al,8[bp]
22593 5997           30E4                       xor	ah,ah
22594 5999           50                         push	ax
22595                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22596 599A           8A46         04            mov	al,4[bp]
22597 599D           30E4                       xor	ah,ah
22598 599F           50                         push	ax
22599                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22600 59A0           E8         F851            call	_write_gfx_char_pl4
22601 59A3           83C4                   0C  add	sp,*$C
22602                                           !BCC_EOS
22603                                           ! 2640          break;
22604 59A6           EB           67            jmp .1B5
22605                                           !BCC_EOS
22606                                           ! 2641        case 0x02:
22607                                           ! 2642          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22608                       000059A8            .1BA:
22609                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22610 59A8           8A46         FA            mov	al,-6[bp]
22611 59AB           30E4                       xor	ah,ah
22612 59AD           50                         push	ax
22613                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22614 59AE           FF76         F8            push	-8[bp]
22615                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22616 59B1           8A46         FD            mov	al,-3[bp]
22617 59B4           30E4                       xor	ah,ah
22618 59B6           50                         push	ax
22619                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22620 59B7           8A46         FE            mov	al,-2[bp]
22621 59BA           30E4                       xor	ah,ah
22622 59BC           50                         push	ax
22623                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22624 59BD           8A46         08            mov	al,8[bp]
22625 59C0           30E4                       xor	ah,ah
22626 59C2           50                         push	ax
22627                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22628 59C3           8A46         04            mov	al,4[bp]
22629 59C6           30E4                       xor	ah,ah
22630 59C8           50                         push	ax
22631                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22632 59C9           E8         F99B            call	_write_gfx_char_cga
22633 59CC           83C4                   0C  add	sp,*$C
22634                                           !BCC_EOS
22635                                           ! 2643          break;
22636 59CF           EB           3E            jmp .1B5
22637                                           !BCC_EOS
22638                                           ! 2644        case 0x05:
22639                                           ! 2645          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22640                       000059D1            .1BB:
22641                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22642 59D1           FF76         F8            push	-8[bp]
22643                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22644 59D4           8A46         FD            mov	al,-3[bp]
22645 59D7           30E4                       xor	ah,ah
22646 59D9           50                         push	ax
22647                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22648 59DA           8A46         FE            mov	al,-2[bp]
22649 59DD           30E4                       xor	ah,ah
22650 59DF           50                         push	ax
22651                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22652 59E0           8A46         08            mov	al,8[bp]
22653 59E3           30E4                       xor	ah,ah
22654 59E5           50                         push	ax
22655                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22656 59E6           8A46         04            mov	al,4[bp]
22657 59E9           30E4                       xor	ah,ah
22658 59EB           50                         push	ax
22659                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22660 59EC           E8         FB7B            call	_write_gfx_char_lin
22661 59EF           83C4                   0A  add	sp,*$A
22662                                           !BCC_EOS
22663                                           ! 2646          break;
22664 59F2           EB           1B            jmp .1B5
22665                                           !BCC_EOS
22666                                           ! 2647        default:
22667                                           ! 2648          unimplemented();
22668                       000059F4            .1BC:
22669                                           ! Debug: func () void = unimplemented+0 (used reg = )
22670 59F4           E8         240D            call	_unimplemented
22671                                           !BCC_EOS
22672                                           ! 2649       }
22673                                           ! 2650      xcurs++;
22674 59F7           EB           16            jmp .1B5
22675                       000059F9            .1B7:
22676 59F9           2C                     02  sub	al,*2
22677 59FB           74           AB            je 	.1BA
22678 59FD           2C                     01  sub	al,*1
22679 59FF         0F84         FF7C            beq 	.1B9
22680 5A03           2C                     01  sub	al,*1
22681 5A05         0F84         FF76            beq 	.1B8
22682 5A09           2C                     01  sub	al,*1
22683 5A0B           74           C4            je 	.1BB
22684 5A0D           EB           E5            jmp	.1BC
22685                       00005A0F            .1B5:
22686                       FFFFFFEE            ..FFF9	=	-$12
22687                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22688 5A0F           8A46         FE            mov	al,-2[bp]
22689 5A12           40                         inc	ax
22690 5A13           8846         FE            mov	-2[bp],al
22691                                           !BCC_EOS
22692                                           ! 2651     }
22693                                           ! 2652   }
22694                       00005A16            .1B3:
22695                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22696 5A16           8B46         0A            mov	ax,$A[bp]
22697 5A19           48                         dec	ax
22698 5A1A           8946         0A            mov	$A[bp],ax
22699                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22700 5A1D           3D                   FFFF  cmp	ax,*-1
22701 5A20           74           0C            je  	.1BD
22702                       00005A22            .1BE:
22703                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22704 5A22           8A46         FE            mov	al,-2[bp]
22705 5A25           30E4                       xor	ah,ah
22706 5A27           3B46         F8            cmp	ax,-8[bp]
22707 5A2A         0F82         FF3D            blo 	.1B4
22708                       00005A2E            .1BD:
22709                       00005A2E            .1B2:
22710                                           ! 2653 }
22711                       00005A2E            .1B1:
22712 5A2E           89EC                       mov	sp,bp
22713 5A30           5D                         pop	bp
22714 5A31           C3                         ret
22715                                           ! 2654 #asm
22716                                           !BCC_ASM
22717                       00000008            _biosfn_write_char_only.count	set	8
22718                       00000006            _biosfn_write_char_only.attr	set	6
22719                       00000004            _biosfn_write_char_only.page	set	4
22720                       00000002            _biosfn_write_char_only.car	set	2
22721                       00005A32            biosfn_group_0B:
22722 5A32           80FF                   00    cmp bh, #0x00
22723 5A35           74           09              je biosfn_set_border_color
22724 5A37           80FF                   01    cmp bh, #0x01
22725 5A3A           74           43              je biosfn_set_palette
22726 5A3C           E8         23D3              call _unknown
22727 5A3F           C3                           ret
22728                       00005A40            biosfn_set_border_color:
22729 5A40           50                           push ax
22730 5A41           53                           push bx
22731 5A42           51                           push cx
22732 5A43           52                           push dx
22733 5A44           BA                   03DA    mov dx, # 0x3da
22734 5A47           EC                           in al, dx
22735 5A48           BA                   03C0    mov dx, # 0x3c0
22736 5A4B           B0                     00    mov al, #0x00
22737 5A4D           EE                           out dx, al
22738 5A4E           88D8                         mov al, bl
22739 5A50           24                     0F    and al, #0x0f
22740 5A52           A8                     08    test al, #0x08
22741 5A54           74           02              jz set_low_border
22742 5A56           04                     08    add al, #0x08
22743                       00005A58            set_low_border:
22744 5A58           EE                           out dx, al
22745 5A59           B1                     01    mov cl, #0x01
22746 5A5B           80E3                   10    and bl, #0x10
22747                       00005A5E            set_intensity_loop:
22748 5A5E           BA                   03C0    mov dx, # 0x3c0
22749 5A61           88C8                         mov al, cl
22750 5A63           EE                           out dx, al
22751 5A64           BA                   03C1    mov dx, # 0x3c1
22752 5A67           EC                           in al, dx
22753 5A68           24                     EF    and al, #0xef
22754 5A6A           08D8                         or al, bl
22755 5A6C           BA                   03C0    mov dx, # 0x3c0
22756 5A6F           EE                           out dx, al
22757 5A70           FEC1                         inc cl
22758 5A72           80F9                   04    cmp cl, #0x04
22759 5A75           75           E7              jne set_intensity_loop
22760 5A77           B0                     20    mov al, #0x20
22761 5A79           EE                           out dx, al
22762 5A7A           5A                           pop dx
22763 5A7B           59                           pop cx
22764 5A7C           5B                           pop bx
22765 5A7D           58                           pop ax
22766 5A7E           C3                           ret
22767                       00005A7F            biosfn_set_palette:
22768 5A7F           50                           push ax
22769 5A80           53                           push bx
22770 5A81           51                           push cx
22771 5A82           52                           push dx
22772 5A83           BA                   03DA    mov dx, # 0x3da
22773 5A86           EC                           in al, dx
22774 5A87           B1                     01    mov cl, #0x01
22775 5A89           80E3                   01    and bl, #0x01
22776                       00005A8C            set_cga_palette_loop:
22777 5A8C           BA                   03C0    mov dx, # 0x3c0
22778 5A8F           88C8                         mov al, cl
22779 5A91           EE                           out dx, al
22780 5A92           BA                   03C1    mov dx, # 0x3c1
22781 5A95           EC                           in al, dx
22782 5A96           24                     FE    and al, #0xfe
22783 5A98           08D8                         or al, bl
22784 5A9A           BA                   03C0    mov dx, # 0x3c0
22785 5A9D           EE                           out dx, al
22786 5A9E           FEC1                         inc cl
22787 5AA0           80F9                   04    cmp cl, #0x04
22788 5AA3           75           E7              jne set_cga_palette_loop
22789 5AA5           B0                     20    mov al, #0x20
22790 5AA7           EE                           out dx, al
22791 5AA8           5A                           pop dx
22792 5AA9           59                           pop cx
22793 5AAA           5B                           pop bx
22794 5AAB           58                           pop ax
22795 5AAC           C3                           ret
22796                                           ! 2730 endasm
22797                                           !BCC_ENDASM
22798                                           ! 2731 static void biosfn_
22799                                           ! Register BX used in function biosfn_write_char_only
22800                                           ! 2731 write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22801                       00005AAD            _biosfn_write_pixel:
22802                                           !BCC_EOS
22803                                           !BCC_EOS
22804                                           !BCC_EOS
22805                                           !BCC_EOS
22806                                           ! 2732 {
22807                                           ! 2733  Bit8u mode,line,mask,attr,data;
22808                                           !BCC_EOS
22809                                           ! 2734  Bit16u addr;
22810                                           !BCC_EOS
22811                                           ! 2735  mode=read_byte(0x40,0x49);
22812 5AAD           55                         push	bp
22813 5AAE           89E5                       mov	bp,sp
22814 5AB0           83C4                   F8  add	sp,*-8
22815                                           ! Debug: list int = const $49 (used reg = )
22816 5AB3           B8                   0049  mov	ax,*$49
22817 5AB6           50                         push	ax
22818                                           ! Debug: list int = const $40 (used reg = )
22819 5AB7           B8                   0040  mov	ax,*$40
22820 5ABA           50                         push	ax
22821                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22822 5ABB           E8         22B7            call	_read_byte
22823 5ABE           83C4                   04  add	sp,*4
22824                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22825 5AC1           8846         FF            mov	-1[bp],al
22826                                           !BCC_EOS
22827                                           ! 2736  line=find_vga_entry(mode);
22828                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22829 5AC4           8A46         FF            mov	al,-1[bp]
22830 5AC7           30E4                       xor	ah,ah
22831 5AC9           50                         push	ax
22832                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22833 5ACA           E8         21BC            call	_find_vga_entry
22834 5ACD           44                         inc	sp
22835 5ACE           44                         inc	sp
22836                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22837 5ACF           8846         FE            mov	-2[bp],al
22838                                           !BCC_EOS
22839                                           ! 2737  if(line==0xFF)return;
22840                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22841 5AD2           8A46         FE            mov	al,-2[bp]
22842 5AD5           3C                     FF  cmp	al,#$FF
22843 5AD7           75           04            jne 	.1BF
22844                       00005AD9            .1C0:
22845 5AD9           89EC                       mov	sp,bp
22846 5ADB           5D                         pop	bp
22847 5ADC           C3                         ret
22848                                           !BCC_EOS
22849                                           ! 2738  if(vga_modes[line].class==0x00)return;
22850                       00005ADD            .1BF:
22851                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22852 5ADD           8A46         FE            mov	al,-2[bp]
22853 5AE0           30E4                       xor	ah,ah
22854 5AE2           B1                     03  mov	cl,*3
22855 5AE4           D3E0                       shl	ax,cl
22856 5AE6           89C3                       mov	bx,ax
22857 5AE8           81C3                 020B  add	bx,#_vga_modes
22858                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22859 5AEC           8A47         01            mov	al,1[bx]
22860 5AEF           84C0                       test	al,al
22861 5AF1           75           04            jne 	.1C1
22862                       00005AF3            .1C2:
22863 5AF3           89EC                       mov	sp,bp
22864 5AF5           5D                         pop	bp
22865 5AF6           C3                         ret
22866                                           !BCC_EOS
22867                                           ! 2739  switch(vga_modes[line].memmodel)
22868                       00005AF7            .1C1:
22869                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22870 5AF7           8A46         FE            mov	al,-2[bp]
22871 5AFA           30E4                       xor	ah,ah
22872 5AFC           B1                     03  mov	cl,*3
22873 5AFE           D3E0                       shl	ax,cl
22874 5B00           89C3                       mov	bx,ax
22875 5B02           81C3                 020B  add	bx,#_vga_modes
22876 5B06           8A47         02            mov	al,2[bx]
22877                                           ! 2740   {
22878 5B09           E9         0226            br 	.1C5
22879                                           ! 2741    case 0x04:
22880                                           ! 2742    case 0x03:
22881                       00005B0C            .1C6:
22882                                           ! 2743      addr = CX/8+DX*read_word(0x40,0x4A);
22883                       00005B0C            .1C7:
22884                                           ! Debug: list int = const $4A (used reg = )
22885 5B0C           B8                   004A  mov	ax,*$4A
22886 5B0F           50                         push	ax
22887                                           ! Debug: list int = const $40 (used reg = )
22888 5B10           B8                   0040  mov	ax,*$40
22889 5B13           50                         push	ax
22890                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22891 5B14           E8         2271            call	_read_word
22892 5B17           83C4                   04  add	sp,*4
22893                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22894                                           ! Debug: expression subtree swapping
22895 5B1A           8B4E         0A            mov	cx,$A[bp]
22896 5B1D           F7E9                       imul	cx
22897 5B1F           50                         push	ax
22898                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22899 5B20           8B46         08            mov	ax,8[bp]
22900 5B23           B1                     03  mov	cl,*3
22901 5B25           D3E8                       shr	ax,cl
22902                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22903 5B27           0346         F6            add	ax,0+..FFF8[bp]
22904 5B2A           44                         inc	sp
22905 5B2B           44                         inc	sp
22906                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22907 5B2C           8946         F8            mov	-8[bp],ax
22908                                           !BCC_EOS
22909                                           ! 2744      mask = 0x80 >> (CX & 0x07);
22910                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22911 5B2F           8A46         08            mov	al,8[bp]
22912 5B32           24                     07  and	al,*7
22913                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22914 5B34           30E4                       xor	ah,ah
22915 5B36           89C3                       mov	bx,ax
22916 5B38           B8                   0080  mov	ax,#$80
22917 5B3B           89D9                       mov	cx,bx
22918 5B3D           D3F8                       sar	ax,cl
22919                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22920 5B3F           8846         FD            mov	-3[bp],al
22921                                           !BCC_EOS
22922                                           ! 2745      outw(0x3ce, (mask << 8) | 0x08);
22923                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22924 5B42           8A46         FD            mov	al,-3[bp]
22925 5B45           30E4                       xor	ah,ah
22926 5B47           88C4                       mov	ah,al
22927 5B49           30C0                       xor	al,al
22928                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22929 5B4B           0C                     08  or	al,*8
22930                                           ! Debug: list unsigned int = ax+0 (used reg = )
22931 5B4D           50                         push	ax
22932                                           ! Debug: list int = const $3CE (used reg = )
22933 5B4E           B8                   03CE  mov	ax,#$3CE
22934 5B51           50                         push	ax
22935                                           ! Debug: func () void = outw+0 (used reg = )
22936 5B52           E8         229C            call	_outw
22937 5B55           83C4                   04  add	sp,*4
22938                                           !BCC_EOS
22939                                           ! 2746      outw(0x3ce, 0x0205);
22940                                           ! Debug: list int = const $205 (used reg = )
22941 5B58           B8                   0205  mov	ax,#$205
22942 5B5B           50                         push	ax
22943                                           ! Debug: list int = const $3CE (used reg = )
22944 5B5C           B8                   03CE  mov	ax,#$3CE
22945 5B5F           50                         push	ax
22946                                           ! Debug: func () void = outw+0 (used reg = )
22947 5B60           E8         228E            call	_outw
22948 5B63           83C4                   04  add	sp,*4
22949                                           !BCC_EOS
22950                                           ! 2747      data = read_byte(0xa000,addr);
22951                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22952 5B66           FF76         F8            push	-8[bp]
22953                                           ! Debug: list unsigned int = const $A000 (used reg = )
22954 5B69           B8                   A000  mov	ax,#$A000
22955 5B6C           50                         push	ax
22956                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22957 5B6D           E8         2205            call	_read_byte
22958 5B70           83C4                   04  add	sp,*4
22959                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22960 5B73           8846         FB            mov	-5[bp],al
22961                                           !BCC_EOS
22962                                           ! 2748      if (AL & 0x80)
22963                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22964 5B76           8A46         06            mov	al,6[bp]
22965 5B79           24                     80  and	al,#$80
22966 5B7B           84C0                       test	al,al
22967 5B7D           74           0E            je  	.1C8
22968                       00005B7F            .1C9:
22969                                           ! 2749       {
22970                                           ! 2750        outw(0x3ce, 0x1803);
22971                                           ! Debug: list int = const $1803 (used reg = )
22972 5B7F           B8                   1803  mov	ax,#$1803
22973 5B82           50                         push	ax
22974                                           ! Debug: list int = const $3CE (used reg = )
22975 5B83           B8                   03CE  mov	ax,#$3CE
22976 5B86           50                         push	ax
22977                                           ! Debug: func () void = outw+0 (used reg = )
22978 5B87           E8         2267            call	_outw
22979 5B8A           83C4                   04  add	sp,*4
22980                                           !BCC_EOS
22981                                           ! 2751       }
22982                                           ! 2752      write_byte(0xa000,addr,AL);
22983                       00005B8D            .1C8:
22984                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22985 5B8D           8A46         06            mov	al,6[bp]
22986 5B90           30E4                       xor	ah,ah
22987 5B92           50                         push	ax
22988                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22989 5B93           FF76         F8            push	-8[bp]
22990                                           ! Debug: list unsigned int = const $A000 (used reg = )
22991 5B96           B8                   A000  mov	ax,#$A000
22992 5B99           50                         push	ax
22993                                           ! Debug: func () void = write_byte+0 (used reg = )
22994 5B9A           E8         21FE            call	_write_byte
22995 5B9D           83C4                   06  add	sp,*6
22996                                           !BCC_EOS
22997                                           ! 2753 #asm
22998                                           !BCC_EOS
22999                                           !BCC_ASM
23000                       0000000C            _biosfn_write_pixel.BH	set	$C
23001                       00000004            .biosfn_write_pixel.BH	set	4
23002                       00000010            _biosfn_write_pixel.CX	set	$10
23003                       00000008            .biosfn_write_pixel.CX	set	8
23004                       00000006            _biosfn_write_pixel.line	set	6
23005                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
23006                       0000000E            _biosfn_write_pixel.AL	set	$E
23007                       00000006            .biosfn_write_pixel.AL	set	6
23008                       00000003            _biosfn_write_pixel.data	set	3
23009                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
23010                       00000012            _biosfn_write_pixel.DX	set	$12
23011                       0000000A            .biosfn_write_pixel.DX	set	$A
23012                       00000005            _biosfn_write_pixel.mask	set	5
23013                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
23014                       00000004            _biosfn_write_pixel.attr	set	4
23015                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
23016                       00000007            _biosfn_write_pixel.mode	set	7
23017                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
23018                       00000000            _biosfn_write_pixel.addr	set	0
23019                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
23020 5BA0           BA                   03CE       mov dx, # 0x3ce
23021 5BA3           B8                   FF08       mov ax, #0xff08
23022 5BA6           EF                              out dx, ax
23023 5BA7           B8                   0005       mov ax, #0x0005
23024 5BAA           EF                              out dx, ax
23025 5BAB           B8                   0003       mov ax, #0x0003
23026 5BAE           EF                              out dx, ax
23027                                           ! 2761 endasm
23028                                           !BCC_ENDASM
23029                                           !BCC_EOS
23030                                           ! 2762      break;
23031 5BAF           E9         0198            br 	.1C3
23032                                           !BCC_EOS
23033                                           ! 2763    case 0x02:
23034                                           ! 2764      if(vga_modes[line].pixbits==2)
23035                       00005BB2            .1CA:
23036                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23037 5BB2           8A46         FE            mov	al,-2[bp]
23038 5BB5           30E4                       xor	ah,ah
23039 5BB7           B1                     03  mov	cl,*3
23040 5BB9           D3E0                       shl	ax,cl
23041 5BBB           89C3                       mov	bx,ax
23042 5BBD           81C3                 020B  add	bx,#_vga_modes
23043                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23044 5BC1           8A47         03            mov	al,3[bx]
23045 5BC4           3C                     02  cmp	al,*2
23046 5BC6           75           1C            jne 	.1CB
23047                       00005BC8            .1CC:
23048                                           ! 2765       {
23049                                           ! 2766        addr=(CX>>2)+(DX>>1)*80;
23050                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23051 5BC8           8B46         0A            mov	ax,$A[bp]
23052 5BCB           D1E8                       shr	ax,*1
23053                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23054 5BCD           B9                   0050  mov	cx,*$50
23055 5BD0           F7E9                       imul	cx
23056 5BD2           50                         push	ax
23057                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
23058 5BD3           8B46         08            mov	ax,8[bp]
23059 5BD6           D1E8                       shr	ax,*1
23060 5BD8           D1E8                       shr	ax,*1
23061                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23062 5BDA           0346         F6            add	ax,0+..FFF8[bp]
23063 5BDD           44                         inc	sp
23064 5BDE           44                         inc	sp
23065                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23066 5BDF           8946         F8            mov	-8[bp],ax
23067                                           !BCC_EOS
23068                                           ! 2767       }
23069                                           ! 2768      else
23070                                           ! 2769       {
23071 5BE2           EB           1A            jmp .1CD
23072                       00005BE4            .1CB:
23073                                           ! 2770        addr=(CX>>3)+(DX>>1)*80;
23074                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23075 5BE4           8B46         0A            mov	ax,$A[bp]
23076 5BE7           D1E8                       shr	ax,*1
23077                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23078 5BE9           B9                   0050  mov	cx,*$50
23079 5BEC           F7E9                       imul	cx
23080 5BEE           50                         push	ax
23081                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
23082 5BEF           8B46         08            mov	ax,8[bp]
23083 5BF2           B1                     03  mov	cl,*3
23084 5BF4           D3E8                       shr	ax,cl
23085                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
23086 5BF6           0346         F6            add	ax,0+..FFF8[bp]
23087 5BF9           44                         inc	sp
23088 5BFA           44                         inc	sp
23089                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23090 5BFB           8946         F8            mov	-8[bp],ax
23091                                           !BCC_EOS
23092                                           ! 2771       }
23093                                           ! 2772      if (DX & 1) addr += 0x2000;
23094                       00005BFE            .1CD:
23095                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
23096 5BFE           8A46         0A            mov	al,$A[bp]
23097 5C01           24                     01  and	al,*1
23098 5C03           84C0                       test	al,al
23099 5C05           74           09            je  	.1CE
23100                       00005C07            .1CF:
23101                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
23102 5C07           8B46         F8            mov	ax,-8[bp]
23103 5C0A           05                   2000  add	ax,#$2000
23104 5C0D           8946         F8            mov	-8[bp],ax
23105                                           !BCC_EOS
23106                                           ! 2773      data = read_byte(0xb800,addr);
23107                       00005C10            .1CE:
23108                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
23109 5C10           FF76         F8            push	-8[bp]
23110                                           ! Debug: list unsigned int = const $B800 (used reg = )
23111 5C13           B8                   B800  mov	ax,#$B800
23112 5C16           50                         push	ax
23113                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23114 5C17           E8         215B            call	_read_byte
23115 5C1A           83C4                   04  add	sp,*4
23116                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
23117 5C1D           8846         FB            mov	-5[bp],al
23118                                           !BCC_EOS
23119                                           ! 2774      if(vga_modes[line].pixbits==2)
23120                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
23121 5C20           8A46         FE            mov	al,-2[bp]
23122 5C23           30E4                       xor	ah,ah
23123 5C25           B1                     03  mov	cl,*3
23124 5C27           D3E0                       shl	ax,cl
23125 5C29           89C3                       mov	bx,ax
23126 5C2B           81C3                 020B  add	bx,#_vga_modes
23127                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23128 5C2F           8A47         03            mov	al,3[bx]
23129 5C32           3C                     02  cmp	al,*2
23130 5C34           75           46            jne 	.1D0
23131                       00005C36            .1D1:
23132                                           ! 2775       {
23133                                           ! 2776        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
23134                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23135 5C36           8A46         08            mov	al,8[bp]
23136 5C39           24                     03  and	al,*3
23137                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23138 5C3B           50                         push	ax
23139 5C3C           B8                   0003  mov	ax,*3
23140 5C3F           2A46         F6            sub	al,0+..FFF8[bp]
23141 5C42           80DC                   00  sbb	ah,*0
23142 5C45           44                         inc	sp
23143 5C46           44                         inc	sp
23144                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23145 5C47           D1E0                       shl	ax,*1
23146 5C49           50                         push	ax
23147                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
23148 5C4A           8A46         06            mov	al,6[bp]
23149 5C4D           24                     03  and	al,*3
23150                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23151 5C4F           30E4                       xor	ah,ah
23152 5C51           8B4E         F6            mov	cx,0+..FFF8[bp]
23153 5C54           D3E0                       shl	ax,cl
23154 5C56           44                         inc	sp
23155 5C57           44                         inc	sp
23156                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23157 5C58           8846         FC            mov	-4[bp],al
23158                                           !BCC_EOS
23159                                           ! 2777        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
23160                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
23161 5C5B           8A46         08            mov	al,8[bp]
23162 5C5E           24                     03  and	al,*3
23163                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23164 5C60           50                         push	ax
23165 5C61           B8                   0003  mov	ax,*3
23166 5C64           2A46         F6            sub	al,0+..FFF8[bp]
23167 5C67           80DC                   00  sbb	ah,*0
23168 5C6A           44                         inc	sp
23169 5C6B           44                         inc	sp
23170                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23171 5C6C           D1E0                       shl	ax,*1
23172                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
23173 5C6E           89C3                       mov	bx,ax
23174 5C70           B8                   0003  mov	ax,*3
23175 5C73           89D9                       mov	cx,bx
23176 5C75           D3E0                       shl	ax,cl
23177                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23178 5C77           8846         FD            mov	-3[bp],al
23179                                           !BCC_EOS
23180                                           ! 2778       }
23181                                           ! 2779      else
23182                                           ! 2780       {
23183 5C7A           EB           40            jmp .1D2
23184                       00005C7C            .1D0:
23185                                           ! 2781        attr = (AL & 0x01) << (7 - (CX & 0x07));
23186                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23187 5C7C           8A46         08            mov	al,8[bp]
23188 5C7F           24                     07  and	al,*7
23189                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23190 5C81           50                         push	ax
23191 5C82           B8                   0007  mov	ax,*7
23192 5C85           2A46         F6            sub	al,0+..FFF8[bp]
23193 5C88           80DC                   00  sbb	ah,*0
23194 5C8B           44                         inc	sp
23195 5C8C           44                         inc	sp
23196 5C8D           50                         push	ax
23197                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
23198 5C8E           8A46         06            mov	al,6[bp]
23199 5C91           24                     01  and	al,*1
23200                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
23201 5C93           30E4                       xor	ah,ah
23202 5C95           8B4E         F6            mov	cx,0+..FFF8[bp]
23203 5C98           D3E0                       shl	ax,cl
23204 5C9A           44                         inc	sp
23205 5C9B           44                         inc	sp
23206                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
23207 5C9C           8846         FC            mov	-4[bp],al
23208                                           !BCC_EOS
23209                                           ! 2782        mask = 0x01 << (7 - (CX & 0x07));
23210                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
23211 5C9F           8A46         08            mov	al,8[bp]
23212 5CA2           24                     07  and	al,*7
23213                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23214 5CA4           50                         push	ax
23215 5CA5           B8                   0007  mov	ax,*7
23216 5CA8           2A46         F6            sub	al,0+..FFF8[bp]
23217 5CAB           80DC                   00  sbb	ah,*0
23218 5CAE           44                         inc	sp
23219 5CAF           44                         inc	sp
23220                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
23221 5CB0           89C3                       mov	bx,ax
23222 5CB2           B8                   0001  mov	ax,*1
23223 5CB5           89D9                       mov	cx,bx
23224 5CB7           D3E0                       shl	ax,cl
23225                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
23226 5CB9           8846         FD            mov	-3[bp],al
23227                                           !BCC_EOS
23228                                           ! 2783       }
23229                                           ! 2784      if (AL & 0x80)
23230                       00005CBC            .1D2:
23231                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
23232 5CBC           8A46         06            mov	al,6[bp]
23233 5CBF           24                     80  and	al,#$80
23234 5CC1           84C0                       test	al,al
23235 5CC3           74           0B            je  	.1D3
23236                       00005CC5            .1D4:
23237                                           ! 2785       {
23238                                           ! 2786        data ^= attr;
23239                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23240 5CC5           8A46         FB            mov	al,-5[bp]
23241 5CC8           3246         FC            xor	al,-4[bp]
23242 5CCB           8846         FB            mov	-5[bp],al
23243                                           !BCC_EOS
23244                                           ! 2787       }
23245                                           ! 2788      else
23246                                           ! 2789       {
23247 5CCE           EB           16            jmp .1D5
23248                       00005CD0            .1D3:
23249                                           ! 2790        data &= ~mask;
23250                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
23251 5CD0           8A46         FD            mov	al,-3[bp]
23252 5CD3           30E4                       xor	ah,ah
23253 5CD5           F7D0                       not	ax
23254                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
23255 5CD7           2246         FB            and	al,-5[bp]
23256 5CDA           8846         FB            mov	-5[bp],al
23257                                           !BCC_EOS
23258                                           ! 2791        data |= attr;
23259                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
23260 5CDD           8A46         FB            mov	al,-5[bp]
23261 5CE0           0A46         FC            or	al,-4[bp]
23262 5CE3           8846         FB            mov	-5[bp],al
23263                                           !BCC_EOS
23264                                           ! 2792       }
23265                                           ! 2793      write_byte(0xb800,addr,data);
23266                       00005CE6            .1D5:
23267                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
23268 5CE6           8A46         FB            mov	al,-5[bp]
23269 5CE9           30E4                       xor	ah,ah
23270 5CEB           50                         push	ax
23271                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23272 5CEC           FF76         F8            push	-8[bp]
23273                                           ! Debug: list unsigned int = const $B800 (used reg = )
23274 5CEF           B8                   B800  mov	ax,#$B800
23275 5CF2           50                         push	ax
23276                                           ! Debug: func () void = write_byte+0 (used reg = )
23277 5CF3           E8         20A5            call	_write_byte
23278 5CF6           83C4                   06  add	sp,*6
23279                                           !BCC_EOS
23280                                           ! 2794      break;
23281 5CF9           EB           4F            jmp .1C3
23282                                           !BCC_EOS
23283                                           ! 2795    case 0x05:
23284                                           ! 2796      addr=CX+DX*(read_word(0x40,0x4A)*8);
23285                       00005CFB            .1D6:
23286                                           ! Debug: list int = const $4A (used reg = )
23287 5CFB           B8                   004A  mov	ax,*$4A
23288 5CFE           50                         push	ax
23289                                           ! Debug: list int = const $40 (used reg = )
23290 5CFF           B8                   0040  mov	ax,*$40
23291 5D02           50                         push	ax
23292                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23293 5D03           E8         2082            call	_read_word
23294 5D06           83C4                   04  add	sp,*4
23295                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23296 5D09           B1                     03  mov	cl,*3
23297 5D0B           D3E0                       shl	ax,cl
23298                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
23299                                           ! Debug: expression subtree swapping
23300 5D0D           8B4E         0A            mov	cx,$A[bp]
23301 5D10           F7E9                       imul	cx
23302                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
23303                                           ! Debug: expression subtree swapping
23304 5D12           0346         08            add	ax,8[bp]
23305                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
23306 5D15           8946         F8            mov	-8[bp],ax
23307                                           !BCC_EOS
23308                                           ! 2797      write_byte(0xa000,addr,AL);
23309                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
23310 5D18           8A46         06            mov	al,6[bp]
23311 5D1B           30E4                       xor	ah,ah
23312 5D1D           50                         push	ax
23313                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23314 5D1E           FF76         F8            push	-8[bp]
23315                                           ! Debug: list unsigned int = const $A000 (used reg = )
23316 5D21           B8                   A000  mov	ax,#$A000
23317 5D24           50                         push	ax
23318                                           ! Debug: func () void = write_byte+0 (used reg = )
23319 5D25           E8         2073            call	_write_byte
23320 5D28           83C4                   06  add	sp,*6
23321                                           !BCC_EOS
23322                                           ! 2798      break;
23323 5D2B           EB           1D            jmp .1C3
23324                                           !BCC_EOS
23325                                           ! 2799    default:
23326                                           ! 2800      unimplemented();
23327                       00005D2D            .1D7:
23328                                           ! Debug: func () void = unimplemented+0 (used reg = )
23329 5D2D           E8         20D4            call	_unimplemented
23330                                           !BCC_EOS
23331                                           ! 2801   }
23332                                           ! 2802 }
23333 5D30           EB           18            jmp .1C3
23334                       00005D32            .1C5:
23335 5D32           2C                     02  sub	al,*2
23336 5D34         0F84         FE7A            beq 	.1CA
23337 5D38           2C                     01  sub	al,*1
23338 5D3A         0F84         FDCE            beq 	.1C7
23339 5D3E           2C                     01  sub	al,*1
23340 5D40         0F84         FDC8            beq 	.1C6
23341 5D44           2C                     01  sub	al,*1
23342 5D46           74           B3            je 	.1D6
23343 5D48           EB           E3            jmp	.1D7
23344                       00005D4A            .1C3:
23345                       FFFFFFF6            ..FFF8	=	-$A
23346 5D4A           89EC                       mov	sp,bp
23347 5D4C           5D                         pop	bp
23348 5D4D           C3                         ret
23349                                           ! 2803 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
23350                                           ! Register BX used in function biosfn_write_pixel
23351                       00005D4E            _biosfn_read_pixel:
23352                                           !BCC_EOS
23353                                           !BCC_EOS
23354                                           !BCC_EOS
23355                                           !BCC_EOS
23356                                           ! 2804 {
23357                                           ! 2805  Bit8u mode,line,mask,attr,data,i;
23358                                           !BCC_EOS
23359                                           ! 2806  Bit16u addr;
23360                                           !BCC_EOS
23361                                           ! 2807  Bit16u ss=get_SS();
23362 5D4E           55                         push	bp
23363 5D4F           89E5                       mov	bp,sp
23364 5D51           83C4                   F6  add	sp,*-$A
23365                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
23366 5D54           E8         20AA            call	_get_SS
23367                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
23368 5D57           8946         F6            mov	-$A[bp],ax
23369                                           !BCC_EOS
23370                                           ! 2808  mode=read_byte(0x40,0x49);
23371                                           ! Debug: list int = const $49 (used reg = )
23372 5D5A           B8                   0049  mov	ax,*$49
23373 5D5D           50                         push	ax
23374                                           ! Debug: list int = const $40 (used reg = )
23375 5D5E           B8                   0040  mov	ax,*$40
23376 5D61           50                         push	ax
23377                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23378 5D62           E8         2010            call	_read_byte
23379 5D65           83C4                   04  add	sp,*4
23380                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
23381 5D68           8846         FF            mov	-1[bp],al
23382                                           !BCC_EOS
23383                                           ! 2809  line=find_vga_entry(mode);
23384                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
23385 5D6B           8A46         FF            mov	al,-1[bp]
23386 5D6E           30E4                       xor	ah,ah
23387 5D70           50                         push	ax
23388                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23389 5D71           E8         1F15            call	_find_vga_entry
23390 5D74           44                         inc	sp
23391 5D75           44                         inc	sp
23392                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
23393 5D76           8846         FE            mov	-2[bp],al
23394                                           !BCC_EOS
23395                                           ! 2810  if(line==0xFF)return;
23396                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
23397 5D79           8A46         FE            mov	al,-2[bp]
23398 5D7C           3C                     FF  cmp	al,#$FF
23399 5D7E           75           04            jne 	.1D8
23400                       00005D80            .1D9:
23401 5D80           89EC                       mov	sp,bp
23402 5D82           5D                         pop	bp
23403 5D83           C3                         ret
23404                                           !BCC_EOS
23405                                           ! 2811  if(vga_modes[line].class==0x00)return;
23406                       00005D84            .1D8:
23407                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23408 5D84           8A46         FE            mov	al,-2[bp]
23409 5D87           30E4                       xor	ah,ah
23410 5D89           B1                     03  mov	cl,*3
23411 5D8B           D3E0                       shl	ax,cl
23412 5D8D           89C3                       mov	bx,ax
23413 5D8F           81C3                 020B  add	bx,#_vga_modes
23414                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23415 5D93           8A47         01            mov	al,1[bx]
23416 5D96           84C0                       test	al,al
23417 5D98           75           04            jne 	.1DA
23418                       00005D9A            .1DB:
23419 5D9A           89EC                       mov	sp,bp
23420 5D9C           5D                         pop	bp
23421 5D9D           C3                         ret
23422                                           !BCC_EOS
23423                                           ! 2812  switch(vga_modes[line].memmodel)
23424                       00005D9E            .1DA:
23425                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23426 5D9E           8A46         FE            mov	al,-2[bp]
23427 5DA1           30E4                       xor	ah,ah
23428 5DA3           B1                     03  mov	cl,*3
23429 5DA5           D3E0                       shl	ax,cl
23430 5DA7           89C3                       mov	bx,ax
23431 5DA9           81C3                 020B  add	bx,#_vga_modes
23432 5DAD           8A47         02            mov	al,2[bx]
23433                                           ! 2813   {
23434 5DB0           E9         016A            br 	.1DE
23435                                           ! 2814    case 0x04:
23436                                           ! 2815    case 0x03:
23437                       00005DB3            .1DF:
23438                                           ! 2816      addr = CX/8+DX*read_word(0x40,0x4A);
23439                       00005DB3            .1E0:
23440                                           ! Debug: list int = const $4A (used reg = )
23441 5DB3           B8                   004A  mov	ax,*$4A
23442 5DB6           50                         push	ax
23443                                           ! Debug: list int = const $40 (used reg = )
23444 5DB7           B8                   0040  mov	ax,*$40
23445 5DBA           50                         push	ax
23446                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23447 5DBB           E8         1FCA            call	_read_word
23448 5DBE           83C4                   04  add	sp,*4
23449                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23450                                           ! Debug: expression subtree swapping
23451 5DC1           8B4E         08            mov	cx,8[bp]
23452 5DC4           F7E9                       imul	cx
23453 5DC6           50                         push	ax
23454                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23455 5DC7           8B46         06            mov	ax,6[bp]
23456 5DCA           B1                     03  mov	cl,*3
23457 5DCC           D3E8                       shr	ax,cl
23458                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23459 5DCE           0346         F4            add	ax,0+..FFF7[bp]
23460 5DD1           44                         inc	sp
23461 5DD2           44                         inc	sp
23462                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23463 5DD3           8946         F8            mov	-8[bp],ax
23464                                           !BCC_EOS
23465                                           ! 2817      mask = 0x80 >> (CX & 0x07);
23466                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23467 5DD6           8A46         06            mov	al,6[bp]
23468 5DD9           24                     07  and	al,*7
23469                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23470 5DDB           30E4                       xor	ah,ah
23471 5DDD           89C3                       mov	bx,ax
23472 5DDF           B8                   0080  mov	ax,#$80
23473 5DE2           89D9                       mov	cx,bx
23474 5DE4           D3F8                       sar	ax,cl
23475                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23476 5DE6           8846         FD            mov	-3[bp],al
23477                                           !BCC_EOS
23478                                           ! 2818      attr = 0x00;
23479                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23480 5DE9           30C0                       xor	al,al
23481 5DEB           8846         FC            mov	-4[bp],al
23482                                           !BCC_EOS
23483                                           ! 2819      for(i=0;i<4;i++)
23484                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23485 5DEE           30C0                       xor	al,al
23486 5DF0           8846         FA            mov	-6[bp],al
23487                                           !BCC_EOS
23488                                           !BCC_EOS
23489                                           ! 2820       {
23490 5DF3           EB           4B            jmp .1E3
23491                       00005DF5            .1E4:
23492                                           ! 2821        outw(0x3ce, (i << 8) | 0x04);
23493                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23494 5DF5           8A46         FA            mov	al,-6[bp]
23495 5DF8           30E4                       xor	ah,ah
23496 5DFA           88C4                       mov	ah,al
23497 5DFC           30C0                       xor	al,al
23498                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23499 5DFE           0C                     04  or	al,*4
23500                                           ! Debug: list unsigned int = ax+0 (used reg = )
23501 5E00           50                         push	ax
23502                                           ! Debug: list int = const $3CE (used reg = )
23503 5E01           B8                   03CE  mov	ax,#$3CE
23504 5E04           50                         push	ax
23505                                           ! Debug: func () void = outw+0 (used reg = )
23506 5E05           E8         1FE9            call	_outw
23507 5E08           83C4                   04  add	sp,*4
23508                                           !BCC_EOS
23509                                           ! 2822        data
23510                                           ! 2822  = read_byte(0xa000,addr) & mask;
23511                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23512 5E0B           FF76         F8            push	-8[bp]
23513                                           ! Debug: list unsigned int = const $A000 (used reg = )
23514 5E0E           B8                   A000  mov	ax,#$A000
23515 5E11           50                         push	ax
23516                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23517 5E12           E8         1F60            call	_read_byte
23518 5E15           83C4                   04  add	sp,*4
23519                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23520 5E18           2246         FD            and	al,-3[bp]
23521                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23522 5E1B           8846         FB            mov	-5[bp],al
23523                                           !BCC_EOS
23524                                           ! 2823        if (data > 0) attr |= (0x01 << i);
23525                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23526 5E1E           8A46         FB            mov	al,-5[bp]
23527 5E21           84C0                       test	al,al
23528 5E23           74           14            je  	.1E5
23529                       00005E25            .1E6:
23530                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23531 5E25           8A46         FA            mov	al,-6[bp]
23532 5E28           30E4                       xor	ah,ah
23533 5E2A           89C3                       mov	bx,ax
23534 5E2C           B8                   0001  mov	ax,*1
23535 5E2F           89D9                       mov	cx,bx
23536 5E31           D3E0                       shl	ax,cl
23537                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23538 5E33           0A46         FC            or	al,-4[bp]
23539 5E36           8846         FC            mov	-4[bp],al
23540                                           !BCC_EOS
23541                                           ! 2824       }
23542                       00005E39            .1E5:
23543                                           ! 2825      break;
23544                       00005E39            .1E2:
23545                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23546 5E39           8A46         FA            mov	al,-6[bp]
23547 5E3C           40                         inc	ax
23548 5E3D           8846         FA            mov	-6[bp],al
23549                       00005E40            .1E3:
23550                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23551 5E40           8A46         FA            mov	al,-6[bp]
23552 5E43           3C                     04  cmp	al,*4
23553 5E45           72           AE            jb 	.1E4
23554                       00005E47            .1E7:
23555                       00005E47            .1E1:
23556 5E47           E9         00EB            br 	.1DC
23557                                           !BCC_EOS
23558                                           ! 2826    case 0x02:
23559                                           ! 2827      addr=(CX>>2)+(DX>>1)*80;
23560                       00005E4A            .1E8:
23561                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23562 5E4A           8B46         08            mov	ax,8[bp]
23563 5E4D           D1E8                       shr	ax,*1
23564                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23565 5E4F           B9                   0050  mov	cx,*$50
23566 5E52           F7E9                       imul	cx
23567 5E54           50                         push	ax
23568                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23569 5E55           8B46         06            mov	ax,6[bp]
23570 5E58           D1E8                       shr	ax,*1
23571 5E5A           D1E8                       shr	ax,*1
23572                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23573 5E5C           0346         F4            add	ax,0+..FFF7[bp]
23574 5E5F           44                         inc	sp
23575 5E60           44                         inc	sp
23576                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23577 5E61           8946         F8            mov	-8[bp],ax
23578                                           !BCC_EOS
23579                                           ! 2828      if (DX & 1) addr += 0x2000;
23580                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23581 5E64           8A46         08            mov	al,8[bp]
23582 5E67           24                     01  and	al,*1
23583 5E69           84C0                       test	al,al
23584 5E6B           74           09            je  	.1E9
23585                       00005E6D            .1EA:
23586                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23587 5E6D           8B46         F8            mov	ax,-8[bp]
23588 5E70           05                   2000  add	ax,#$2000
23589 5E73           8946         F8            mov	-8[bp],ax
23590                                           !BCC_EOS
23591                                           ! 2829      data = read_byte(0xb800,addr);
23592                       00005E76            .1E9:
23593                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23594 5E76           FF76         F8            push	-8[bp]
23595                                           ! Debug: list unsigned int = const $B800 (used reg = )
23596 5E79           B8                   B800  mov	ax,#$B800
23597 5E7C           50                         push	ax
23598                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23599 5E7D           E8         1EF5            call	_read_byte
23600 5E80           83C4                   04  add	sp,*4
23601                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23602 5E83           8846         FB            mov	-5[bp],al
23603                                           !BCC_EOS
23604                                           ! 2830      if(vga_modes[line].pixbits==2)
23605                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23606 5E86           8A46         FE            mov	al,-2[bp]
23607 5E89           30E4                       xor	ah,ah
23608 5E8B           B1                     03  mov	cl,*3
23609 5E8D           D3E0                       shl	ax,cl
23610 5E8F           89C3                       mov	bx,ax
23611 5E91           81C3                 020B  add	bx,#_vga_modes
23612                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23613 5E95           8A47         03            mov	al,3[bx]
23614 5E98           3C                     02  cmp	al,*2
23615 5E9A           75           25            jne 	.1EB
23616                       00005E9C            .1EC:
23617                                           ! 2831       {
23618                                           ! 2832        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23619                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23620 5E9C           8A46         06            mov	al,6[bp]
23621 5E9F           24                     03  and	al,*3
23622                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23623 5EA1           50                         push	ax
23624 5EA2           B8                   0003  mov	ax,*3
23625 5EA5           2A46         F4            sub	al,0+..FFF7[bp]
23626 5EA8           80DC                   00  sbb	ah,*0
23627 5EAB           44                         inc	sp
23628 5EAC           44                         inc	sp
23629                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23630 5EAD           D1E0                       shl	ax,*1
23631                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23632 5EAF           89C3                       mov	bx,ax
23633 5EB1           8A46         FB            mov	al,-5[bp]
23634 5EB4           30E4                       xor	ah,ah
23635 5EB6           89D9                       mov	cx,bx
23636 5EB8           D3E8                       shr	ax,cl
23637                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23638 5EBA           24                     03  and	al,*3
23639                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23640 5EBC           8846         FC            mov	-4[bp],al
23641                                           !BCC_EOS
23642                                           ! 2833       }
23643                                           ! 2834      else
23644                                           ! 2835       {
23645 5EBF           EB           21            jmp .1ED
23646                       00005EC1            .1EB:
23647                                           ! 2836        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23648                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23649 5EC1           8A46         06            mov	al,6[bp]
23650 5EC4           24                     07  and	al,*7
23651                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23652 5EC6           50                         push	ax
23653 5EC7           B8                   0007  mov	ax,*7
23654 5ECA           2A46         F4            sub	al,0+..FFF7[bp]
23655 5ECD           80DC                   00  sbb	ah,*0
23656 5ED0           44                         inc	sp
23657 5ED1           44                         inc	sp
23658                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23659 5ED2           89C3                       mov	bx,ax
23660 5ED4           8A46         FB            mov	al,-5[bp]
23661 5ED7           30E4                       xor	ah,ah
23662 5ED9           89D9                       mov	cx,bx
23663 5EDB           D3E8                       shr	ax,cl
23664                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23665 5EDD           24                     01  and	al,*1
23666                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23667 5EDF           8846         FC            mov	-4[bp],al
23668                                           !BCC_EOS
23669                                           ! 2837       }
23670                                           ! 2838      break;
23671                       00005EE2            .1ED:
23672 5EE2           EB           51            jmp .1DC
23673                                           !BCC_EOS
23674                                           ! 2839    case 0x05:
23675                                           ! 2840      addr=CX+DX*(read_word(0x40,0x4A)*8);
23676                       00005EE4            .1EE:
23677                                           ! Debug: list int = const $4A (used reg = )
23678 5EE4           B8                   004A  mov	ax,*$4A
23679 5EE7           50                         push	ax
23680                                           ! Debug: list int = const $40 (used reg = )
23681 5EE8           B8                   0040  mov	ax,*$40
23682 5EEB           50                         push	ax
23683                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23684 5EEC           E8         1E99            call	_read_word
23685 5EEF           83C4                   04  add	sp,*4
23686                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23687 5EF2           B1                     03  mov	cl,*3
23688 5EF4           D3E0                       shl	ax,cl
23689                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23690                                           ! Debug: expression subtree swapping
23691 5EF6           8B4E         08            mov	cx,8[bp]
23692 5EF9           F7E9                       imul	cx
23693                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23694                                           ! Debug: expression subtree swapping
23695 5EFB           0346         06            add	ax,6[bp]
23696                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23697 5EFE           8946         F8            mov	-8[bp],ax
23698                                           !BCC_EOS
23699                                           ! 2841      attr=read_byte(0xa000,addr);
23700                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23701 5F01           FF76         F8            push	-8[bp]
23702                                           ! Debug: list unsigned int = const $A000 (used reg = )
23703 5F04           B8                   A000  mov	ax,#$A000
23704 5F07           50                         push	ax
23705                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23706 5F08           E8         1E6A            call	_read_byte
23707 5F0B           83C4                   04  add	sp,*4
23708                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23709 5F0E           8846         FC            mov	-4[bp],al
23710                                           !BCC_EOS
23711                                           ! 2842      break;
23712 5F11           EB           22            jmp .1DC
23713                                           !BCC_EOS
23714                                           ! 2843    default:
23715                                           ! 2844      unimplemented();
23716                       00005F13            .1EF:
23717                                           ! Debug: func () void = unimplemented+0 (used reg = )
23718 5F13           E8         1EEE            call	_unimplemented
23719                                           !BCC_EOS
23720                                           ! 2845      attr = 0;
23721                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23722 5F16           30C0                       xor	al,al
23723 5F18           8846         FC            mov	-4[bp],al
23724                                           !BCC_EOS
23725                                           ! 2846   }
23726                                           ! 2847  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23727 5F1B           EB           18            jmp .1DC
23728                       00005F1D            .1DE:
23729 5F1D           2C                     02  sub	al,*2
23730 5F1F         0F84         FF27            beq 	.1E8
23731 5F23           2C                     01  sub	al,*1
23732 5F25         0F84         FE8A            beq 	.1E0
23733 5F29           2C                     01  sub	al,*1
23734 5F2B         0F84         FE84            beq 	.1DF
23735 5F2F           2C                     01  sub	al,*1
23736 5F31           74           B1            je 	.1EE
23737 5F33           EB           DE            jmp	.1EF
23738                       00005F35            .1DC:
23739                       FFFFFFF4            ..FFF7	=	-$C
23740                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23741 5F35           FF76         0A            push	$A[bp]
23742                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23743 5F38           FF76         F6            push	-$A[bp]
23744                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23745 5F3B           E8         1E4A            call	_read_word
23746 5F3E           83C4                   04  add	sp,*4
23747                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23748 5F41           30C0                       xor	al,al
23749                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23750 5F43           0A46         FC            or	al,-4[bp]
23751                                           ! Debug: list unsigned int = ax+0 (used reg = )
23752 5F46           50                         push	ax
23753                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23754 5F47           FF76         0A            push	$A[bp]
23755                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23756 5F4A           FF76         F6            push	-$A[bp]
23757                                           ! Debug: func () void = write_word+0 (used reg = )
23758 5F4D           E8         1E63            call	_write_word
23759 5F50           83C4                   06  add	sp,*6
23760                                           !BCC_EOS
23761                                           ! 2848 }
23762 5F53           89EC                       mov	sp,bp
23763 5F55           5D                         pop	bp
23764 5F56           C3                         ret
23765                                           ! 2849 static void biosfn_write_teletype (car, page, attr, flag)
23766                                           ! Register BX used in function biosfn_read_pixel
23767                                           ! 2850 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23768                       00005F57            _biosfn_write_teletype:
23769                                           !BCC_EOS
23770                                           !BCC_EOS
23771                                           !BCC_EOS
23772                                           !BCC_EOS
23773                                           ! 2851 {
23774                                           ! 2852  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23775                                           !BCC_EOS
23776                                           ! 2853  Bit16u nbcols,nbrows,address;
23777                                           !BCC_EOS
23778                                           ! 2854  Bit16u cursor,dummy;
23779                                           !BCC_EOS
23780                                           ! 2855  if(page==0xff)
23781 5F57           55                         push	bp
23782 5F58           89E5                       mov	bp,sp
23783 5F5A           83C4                   F0  add	sp,*-$10
23784                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23785 5F5D           8A46         06            mov	al,6[bp]
23786 5F60           3C                     FF  cmp	al,#$FF
23787 5F62           75           11            jne 	.1F0
23788                       00005F64            .1F1:
23789                                           ! 2856   page=read_byte(0x40,0x62);
23790                                           ! Debug: list int = const $62 (used reg = )
23791 5F64           B8                   0062  mov	ax,*$62
23792 5F67           50                         push	ax
23793                                           ! Debug: list int = const $40 (used reg = )
23794 5F68           B8                   0040  mov	ax,*$40
23795 5F6B           50                         push	ax
23796                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23797 5F6C           E8         1E06            call	_read_byte
23798 5F6F           83C4                   04  add	sp,*4
23799                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23800 5F72           8846         06            mov	6[bp],al
23801                                           !BCC_EOS
23802                                           ! 2857  mode=read_byte(0x40,0x49);
23803                       00005F75            .1F0:
23804                                           ! Debug: list int = const $49 (used reg = )
23805 5F75           B8                   0049  mov	ax,*$49
23806 5F78           50                         push	ax
23807                                           ! Debug: list int = const $40 (used reg = )
23808 5F79           B8                   0040  mov	ax,*$40
23809 5F7C           50                         push	ax
23810                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23811 5F7D           E8         1DF5            call	_read_byte
23812 5F80           83C4                   04  add	sp,*4
23813                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23814 5F83           8846         FC            mov	-4[bp],al
23815                                           !BCC_EOS
23816                                           ! 2858  line=find_vga_entry(mode);
23817                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23818 5F86           8A46         FC            mov	al,-4[bp]
23819 5F89           30E4                       xor	ah,ah
23820 5F8B           50                         push	ax
23821                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23822 5F8C           E8         1CFA            call	_find_vga_entry
23823 5F8F           44                         inc	sp
23824 5F90           44                         inc	sp
23825                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23826 5F91           8846         FB            mov	-5[bp],al
23827                                           !BCC_EOS
23828                                           ! 2859  if(line==0xFF)return;
23829                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23830 5F94           8A46         FB            mov	al,-5[bp]
23831 5F97           3C                     FF  cmp	al,#$FF
23832 5F99           75           04            jne 	.1F2
23833                       00005F9B            .1F3:
23834 5F9B           89EC                       mov	sp,bp
23835 5F9D           5D                         pop	bp
23836 5F9E           C3                         ret
23837                                           !BCC_EOS
23838                                           ! 2860  biosfn_get_cursor_pos(page,&dummy,&cursor);
23839                       00005F9F            .1F2:
23840                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23841 5F9F           8D5E         F2            lea	bx,-$E[bp]
23842 5FA2           53                         push	bx
23843                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23844 5FA3           8D5E         F0            lea	bx,-$10[bp]
23845 5FA6           53                         push	bx
23846                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23847 5FA7           8A46         06            mov	al,6[bp]
23848 5FAA           30E4                       xor	ah,ah
23849 5FAC           50                         push	ax
23850                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23851 5FAD           E8         E50E            call	_biosfn_get_cursor_pos
23852 5FB0           83C4                   06  add	sp,*6
23853                                           !BCC_EOS
23854                                           ! 2861  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23855                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23856 5FB3           8A46         F2            mov	al,-$E[bp]
23857                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23858 5FB6           8846         FE            mov	-2[bp],al
23859                                           !BCC_EOS
23860                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23861 5FB9           8B46         F2            mov	ax,-$E[bp]
23862 5FBC           30C0                       xor	al,al
23863                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23864 5FBE           88E0                       mov	al,ah
23865 5FC0           30E4                       xor	ah,ah
23866                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23867 5FC2           8846         FD            mov	-3[bp],al
23868                                           !BCC_EOS
23869                                           ! 2862  nbrows=read_byte(0x40,0x84)+1;
23870                                           ! Debug: list int = const $84 (used reg = )
23871 5FC5           B8                   0084  mov	ax,#$84
23872 5FC8           50                         push	ax
23873                                           ! Debug: list int = const $40 (used reg = )
23874 5FC9           B8                   0040  mov	ax,*$40
23875 5FCC           50                         push	ax
23876                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23877 5FCD           E8         1DA5            call	_read_byte
23878 5FD0           83C4                   04  add	sp,*4
23879                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23880 5FD3           30E4                       xor	ah,ah
23881                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23882 5FD5           40                         inc	ax
23883 5FD6           8946         F6            mov	-$A[bp],ax
23884                                           !BCC_EOS
23885                                           ! 2863  nbcols=read_word(0x40,0x4A);
23886                                           ! Debug: list int = const $4A (used reg = )
23887 5FD9           B8                   004A  mov	ax,*$4A
23888 5FDC           50                         push	ax
23889                                           ! Debug: list int = const $40 (used reg = )
23890 5FDD           B8                   0040  mov	ax,*$40
23891 5FE0           50                         push	ax
23892                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23893 5FE1           E8         1DA4            call	_read_word
23894 5FE4           83C4                   04  add	sp,*4
23895                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23896 5FE7           8946         F8            mov	-8[bp],ax
23897                                           !BCC_EOS
23898                                           ! 2864  switch(car)
23899 5FEA           8A46         04            mov	al,4[bp]
23900                                           ! 2865   {
23901 5FED           E9         01EF            br 	.1F6
23902                                           ! 2866    case 7:
23903                                           ! 2867     break;
23904                       00005FF0            .1F7:
23905 5FF0           E9         020D            br 	.1F4
23906                                           !BCC_EOS
23907                                           ! 2868    case 8:
23908                                           ! 2869     if(xcurs>0)xcurs--;
23909                       00005FF3            .1F8:
23910                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23911 5FF3           8A46         FE            mov	al,-2[bp]
23912 5FF6           84C0                       test	al,al
23913 5FF8           74           07            je  	.1F9
23914                       00005FFA            .1FA:
23915                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23916 5FFA           8A46         FE            mov	al,-2[bp]
23917 5FFD           48                         dec	ax
23918 5FFE           8846         FE            mov	-2[bp],al
23919                                           !BCC_EOS
23920                                           ! 2870     break;
23921                       00006001            .1F9:
23922 6001           E9         01FC            br 	.1F4
23923                                           !BCC_EOS
23924                                           ! 2871    case '\r':
23925                                           ! 2872     xcurs=0;
23926                       00006004            .1FB:
23927                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23928 6004           30C0                       xor	al,al
23929 6006           8846         FE            mov	-2[bp],al
23930                                           !BCC_EOS
23931                                           ! 2873     break;
23932 6009           E9         01F4            br 	.1F4
23933                                           !BCC_EOS
23934                                           ! 2874    case '\n':
23935                                           ! 2875     ycurs++;
23936                       0000600C            .1FC:
23937                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23938 600C           8A46         FD            mov	al,-3[bp]
23939 600F           40                         inc	ax
23940 6010           8846         FD            mov	-3[bp],al
23941                                           !BCC_EOS
23942                                           ! 2876     break;
23943 6013           E9         01EA            br 	.1F4
23944                                           !BCC_EOS
23945                                           ! 2877    case '\t':
23946                                           ! 2878     do
23947                       00006016            .1FD:
23948                                           ! 2879      {
23949                       00006016            .200:
23950                                           ! 2880       biosfn_write_teletype(' ',page,attr,flag);
23951                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23952 6016           8A46         0A            mov	al,$A[bp]
23953 6019           30E4                       xor	ah,ah
23954 601B           50                         push	ax
23955                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23956 601C           8A46         08            mov	al,8[bp]
23957 601F           30E4                       xor	ah,ah
23958 6021           50                         push	ax
23959                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23960 6022           8A46         06            mov	al,6[bp]
23961 6025           30E4                       xor	ah,ah
23962 6027           50                         push	ax
23963                                           ! Debug: list int = const $20 (used reg = )
23964 6028           B8                   0020  mov	ax,*$20
23965 602B           50                         push	ax
23966                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23967 602C           E8         FF28            call	_biosfn_write_teletype
23968 602F           83C4                   08  add	sp,*8
23969                                           !BCC_EOS
23970                                           ! 2881       biosfn_get_cursor_pos(page,&dummy,&cursor);
23971                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23972 6032           8D5E         F2            lea	bx,-$E[bp]
23973 6035           53                         push	bx
23974                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23975 6036           8D5E         F0            lea	bx,-$10[bp]
23976 6039           53                         push	bx
23977                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23978 603A           8A46         06            mov	al,6[bp]
23979 603D           30E4                       xor	ah,ah
23980 603F           50                         push	ax
23981                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23982 6040           E8         E47B            call	_biosfn_get_cursor_pos
23983 6043           83C4                   06  add	sp,*6
23984                                           !BCC_EOS
23985                                           ! 2882       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23986                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23987 6046           8A46         F2            mov	al,-$E[bp]
23988                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23989 6049           8846         FE            mov	-2[bp],al
23990                                           !BCC_EOS
23991                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23992 604C           8B46         F2            mov	ax,-$E[bp]
23993 604F           30C0                       xor	al,al
23994                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23995 6051           88E0                       mov	al,ah
23996 6053           30E4                       xor	ah,ah
23997                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23998 6055           8846         FD            mov	-3[bp],al
23999                                           !BCC_EOS
24000                                           ! 2883      }while(xcurs%8==0);
24001                       00006058            .1FF:
24002                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
24003 6058           8A46         FE            mov	al,-2[bp]
24004 605B           30E4                       xor	ah,ah
24005 605D           24                     07  and	al,*7
24006                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
24007 605F           84C0                       test	al,al
24008 6061           74           B3            je 	.200
24009                       00006063            .201:
24010                                           !BCC_EOS
24011                                           ! 2884     break;
24012                       00006063            .1FE:
24013 6063           E9         019A            br 	.1F4
24014                                           !BCC_EOS
24015                                           ! 2885    default:
24016                                           ! 2886     if(vga_modes[line].class==0x00)
24017                       00006066            .202:
24018                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24019 6066           8A46         FB            mov	al,-5[bp]
24020 6069           30E4                       xor	ah,ah
24021 606B           B1                     03  mov	cl,*3
24022 606D           D3E0                       shl	ax,cl
24023 606F           89C3                       mov	bx,ax
24024 6071           81C3                 020B  add	bx,#_vga_modes
24025                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24026 6075           8A47         01            mov	al,1[bx]
24027 6078           84C0                       test	al,al
24028 607A         0F85         0082            bne 	.203
24029                       0000607E            .204:
24030                                           ! 2887      {
24031                                           ! 2888       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
24032                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
24033 607E           8A46         FD            mov	al,-3[bp]
24034 6081           30E4                       xor	ah,ah
24035 6083           8B4E         F8            mov	cx,-8[bp]
24036 6086           F7E9                       imul	cx
24037                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24038                                           ! Debug: expression subtree swapping
24039 6088           0246         FE            add	al,-2[bp]
24040 608B           80D4                   00  adc	ah,*0
24041                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24042 608E           D1E0                       shl	ax,*1
24043 6090           50                         push	ax
24044                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24045 6091           8B46         F8            mov	ax,-8[bp]
24046 6094           8B4E         F6            mov	cx,-$A[bp]
24047 6097           F7E9                       imul	cx
24048                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24049 6099           D1E0                       shl	ax,*1
24050                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24051 609B           0C                     FF  or	al,#$FF
24052                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24053                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24054 609D           89C3                       mov	bx,ax
24055 609F           8A46         06            mov	al,6[bp]
24056 60A2           30E4                       xor	ah,ah
24057 60A4           93                         xchg	ax,bx
24058 60A5           40                         inc	ax
24059 60A6           89D9                       mov	cx,bx
24060 60A8           F7E9                       imul	cx
24061                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24062 60AA           0346         EE            add	ax,0+..FFF6[bp]
24063 60AD           44                         inc	sp
24064 60AE           44                         inc	sp
24065                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24066 60AF           8946         F4            mov	-$C[bp],ax
24067                                           !BCC_EOS
24068                                           ! 2889       write_byte(vga_modes[line].sstart,address,car);
24069                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
24070 60B2           8A46         04            mov	al,4[bp]
24071 60B5           30E4                       xor	ah,ah
24072 60B7           50                         push	ax
24073                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
24074 60B8           FF76         F4            push	-$C[bp]
24075                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24076 60BB           8A46         FB            mov	al,-5[bp]
24077 60BE           30E4                       xor	ah,ah
24078 60C0           B1                     03  mov	cl,*3
24079 60C2           D3E0                       shl	ax,cl
24080 60C4           89C3                       mov	bx,ax
24081 60C6           81C3                 020B  add	bx,#_vga_modes
24082                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24083 60CA           FF77         04            push	4[bx]
24084                                           ! Debug: func () void = write_byte+0 (used reg = )
24085 60CD           E8         1CCB            call	_write_byte
24086 60D0           83C4                   06  add	sp,*6
24087                                           !BCC_EOS
24088                                           ! 2890       if(flag==3)
24089                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
24090 60D3           8A46         0A            mov	al,$A[bp]
24091 60D6           3C                     03  cmp	al,*3
24092 60D8           75           23            jne 	.205
24093                       000060DA            .206:
24094                                           ! 2891        write_byte(vga_modes[line].sstart,address+1,attr);
24095                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
24096 60DA           8A46         08            mov	al,8[bp]
24097 60DD           30E4                       xor	ah,ah
24098 60DF           50                         push	ax
24099                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
24100 60E0           8B46         F4            mov	ax,-$C[bp]
24101                                           ! Debug: list unsigned int = ax+1 (used reg = )
24102 60E3           40                         inc	ax
24103 60E4           50                         push	ax
24104                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
24105 60E5           8A46         FB            mov	al,-5[bp]
24106 60E8           30E4                       xor	ah,ah
24107 60EA           B1                     03  mov	cl,*3
24108 60EC           D3E0                       shl	ax,cl
24109 60EE           89C3                       mov	bx,ax
24110 60F0           81C3                 020B  add	bx,#_vga_modes
24111                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24112 60F4           FF77         04            push	4[bx]
24113                                           ! Debug: func () void = write_byte+0 (used reg = )
24114 60F7           E8         1CA1            call	_write_byte
24115 60FA           83C4                   06  add	sp,*6
24116                                           !BCC_EOS
24117                                           ! 2892      }
24118                       000060FD            .205:
24119                                           ! 2893     else
24120                                           ! 2894      {
24121 60FD           E9         00D6            br 	.207
24122                       00006100            .203:
24123                                           ! 2895       cheight=video_param_table[line_to_vpti[line]].cheight;
24124                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
24125 6100           8A46         FB            mov	al,-5[bp]
24126 6103           30E4                       xor	ah,ah
24127 6105           89C3                       mov	bx,ax
24128                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
24129 6107           8A87       028B            mov	al,_line_to_vpti[bx]
24130 610B           30E4                       xor	ah,ah
24131 610D           B1                     06  mov	cl,*6
24132 610F           D3E0                       shl	ax,cl
24133 6111           89C3                       mov	bx,ax
24134 6113           81C3                 029F  add	bx,#_video_param_table
24135                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
24136 6117           8A47         02            mov	al,2[bx]
24137 611A           8846         FF            mov	-1[bp],al
24138                                           !BCC_EOS
24139                                           ! 2896       bpp=vga_modes[line].pixbits;
24140                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24141 611D           8A46         FB            mov	al,-5[bp]
24142 6120           30E4                       xor	ah,ah
24143 6122           B1                     03  mov	cl,*3
24144 6124           D3E0                       shl	ax,cl
24145 6126           89C3                       mov	bx,ax
24146 6128           81C3                 020B  add	bx,#_vga_modes
24147                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
24148 612C           8A47         03            mov	al,3[bx]
24149 612F           8846         FA            mov	-6[bp],al
24150                                           !BCC_EOS
24151                                           ! 2897       switch(vga_modes[line].memmodel)
24152                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24153 6132           8A46         FB            mov	al,-5[bp]
24154 6135           30E4                       xor	ah,ah
24155 6137           B1                     03  mov	cl,*3
24156 6139           D3E0                       shl	ax,cl
24157 613B           89C3                       mov	bx,ax
24158 613D           81C3                 020B  add	bx,#_vga_modes
24159 6141           8A47         02            mov	al,2[bx]
24160                                           ! 2898        {
24161 6144           EB           7A            jmp .20A
24162                                           ! 2899         case 0x04:
24163                                           ! 2900         case 0x03:
24164                       00006146            .20B:
24165                                           ! 2901           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
24166                       00006146            .20C:
24167                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
24168 6146           8A46         FF            mov	al,-1[bp]
24169 6149           30E4                       xor	ah,ah
24170 614B           50                         push	ax
24171                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24172 614C           FF76         F8            push	-8[bp]
24173                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24174 614F           8A46         FD            mov	al,-3[bp]
24175 6152           30E4                       xor	ah,ah
24176 6154           50                         push	ax
24177                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24178 6155           8A46         FE            mov	al,-2[bp]
24179 6158           30E4                       xor	ah,ah
24180 615A           50                         push	ax
24181                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24182 615B           8A46         08            mov	al,8[bp]
24183 615E           30E4                       xor	ah,ah
24184 6160           50                         push	ax
24185                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24186 6161           8A46         04            mov	al,4[bp]
24187 6164           30E4                       xor	ah,ah
24188 6166           50                         push	ax
24189                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
24190 6167           E8         F08A            call	_write_gfx_char_pl4
24191 616A           83C4                   0C  add	sp,*$C
24192                                           !BCC_EOS
24193                                           ! 2902           break;
24194 616D           EB           67            jmp .208
24195                                           !BCC_EOS
24196                                           ! 2903         case 0x02:
24197                                           ! 2904          
24198                                           ! 2904  write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
24199                       0000616F            .20D:
24200                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
24201 616F           8A46         FA            mov	al,-6[bp]
24202 6172           30E4                       xor	ah,ah
24203 6174           50                         push	ax
24204                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
24205 6175           FF76         F8            push	-8[bp]
24206                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
24207 6178           8A46         FD            mov	al,-3[bp]
24208 617B           30E4                       xor	ah,ah
24209 617D           50                         push	ax
24210                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
24211 617E           8A46         FE            mov	al,-2[bp]
24212 6181           30E4                       xor	ah,ah
24213 6183           50                         push	ax
24214                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
24215 6184           8A46         08            mov	al,8[bp]
24216 6187           30E4                       xor	ah,ah
24217 6189           50                         push	ax
24218                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
24219 618A           8A46         04            mov	al,4[bp]
24220 618D           30E4                       xor	ah,ah
24221 618F           50                         push	ax
24222                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
24223 6190           E8         F1D4            call	_write_gfx_char_cga
24224 6193           83C4                   0C  add	sp,*$C
24225                                           !BCC_EOS
24226                                           ! 2905           break;
24227 6196           EB           3E            jmp .208
24228                                           !BCC_EOS
24229                                           ! 2906         case 0x05:
24230                                           ! 2907           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
24231                       00006198            .20E:
24232                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
24233 6198           FF76         F8            push	-8[bp]
24234                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
24235 619B           8A46         FD            mov	al,-3[bp]
24236 619E           30E4                       xor	ah,ah
24237 61A0           50                         push	ax
24238                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
24239 61A1           8A46         FE            mov	al,-2[bp]
24240 61A4           30E4                       xor	ah,ah
24241 61A6           50                         push	ax
24242                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
24243 61A7           8A46         08            mov	al,8[bp]
24244 61AA           30E4                       xor	ah,ah
24245 61AC           50                         push	ax
24246                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
24247 61AD           8A46         04            mov	al,4[bp]
24248 61B0           30E4                       xor	ah,ah
24249 61B2           50                         push	ax
24250                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
24251 61B3           E8         F3B4            call	_write_gfx_char_lin
24252 61B6           83C4                   0A  add	sp,*$A
24253                                           !BCC_EOS
24254                                           ! 2908           break;
24255 61B9           EB           1B            jmp .208
24256                                           !BCC_EOS
24257                                           ! 2909         default:
24258                                           ! 2910           unimplemented();
24259                       000061BB            .20F:
24260                                           ! Debug: func () void = unimplemented+0 (used reg = )
24261 61BB           E8         1C46            call	_unimplemented
24262                                           !BCC_EOS
24263                                           ! 2911        }
24264                                           ! 2912      }
24265 61BE           EB           16            jmp .208
24266                       000061C0            .20A:
24267 61C0           2C                     02  sub	al,*2
24268 61C2           74           AB            je 	.20D
24269 61C4           2C                     01  sub	al,*1
24270 61C6         0F84         FF7C            beq 	.20C
24271 61CA           2C                     01  sub	al,*1
24272 61CC         0F84         FF76            beq 	.20B
24273 61D0           2C                     01  sub	al,*1
24274 61D2           74           C4            je 	.20E
24275 61D4           EB           E5            jmp	.20F
24276                       000061D6            .208:
24277                                           ! 2913     xcurs++;
24278                       000061D6            .207:
24279                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
24280 61D6           8A46         FE            mov	al,-2[bp]
24281 61D9           40                         inc	ax
24282 61DA           8846         FE            mov	-2[bp],al
24283                                           !BCC_EOS
24284                                           ! 2914   }
24285                                           ! 2915  if(xcurs==nbcols)
24286 61DD           EB           21            jmp .1F4
24287                       000061DF            .1F6:
24288 61DF           2C                     07  sub	al,*7
24289 61E1         0F84         FE0B            beq 	.1F7
24290 61E5           2C                     01  sub	al,*1
24291 61E7         0F84         FE08            beq 	.1F8
24292 61EB           2C                     01  sub	al,*1
24293 61ED         0F84         FE25            beq 	.1FD
24294 61F1           2C                     01  sub	al,*1
24295 61F3         0F84         FE15            beq 	.1FC
24296 61F7           2C                     03  sub	al,*3
24297 61F9         0F84         FE07            beq 	.1FB
24298 61FD           E9         FE66            br 	.202
24299                       00006200            .1F4:
24300                       FFFFFFEE            ..FFF6	=	-$12
24301                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
24302 6200           8A46         FE            mov	al,-2[bp]
24303 6203           30E4                       xor	ah,ah
24304 6205           3B46         F8            cmp	ax,-8[bp]
24305 6208           75           0C            jne 	.210
24306                       0000620A            .211:
24307                                           ! 2916   {xcurs=0;
24308                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
24309 620A           30C0                       xor	al,al
24310 620C           8846         FE            mov	-2[bp],al
24311                                           !BCC_EOS
24312                                           ! 2917    ycurs++;
24313                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
24314 620F           8A46         FD            mov	al,-3[bp]
24315 6212           40                         inc	ax
24316 6213           8846         FD            mov	-3[bp],al
24317                                           !BCC_EOS
24318                                           ! 2918   }
24319                                           ! 2919  if(ycurs==nbrows)
24320                       00006216            .210:
24321                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
24322 6216           8A46         FD            mov	al,-3[bp]
24323 6219           30E4                       xor	ah,ah
24324 621B           3B46         F6            cmp	ax,-$A[bp]
24325 621E         0F85         00C9            bne 	.212
24326                       00006222            .213:
24327                                           ! 2920   {
24328                                           ! 2921    if(vga_modes[line].class==0x00)
24329                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
24330 6222           8A46         FB            mov	al,-5[bp]
24331 6225           30E4                       xor	ah,ah
24332 6227           B1                     03  mov	cl,*3
24333 6229           D3E0                       shl	ax,cl
24334 622B           89C3                       mov	bx,ax
24335 622D           81C3                 020B  add	bx,#_vga_modes
24336                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
24337 6231           8A47         01            mov	al,1[bx]
24338 6234           84C0                       test	al,al
24339 6236         0F85         0081            bne 	.214
24340                       0000623A            .215:
24341                                           ! 2922     {
24342                                           ! 2923      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
24343                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24344 623A           8A46         FD            mov	al,-3[bp]
24345 623D           30E4                       xor	ah,ah
24346                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
24347 623F           48                         dec	ax
24348 6240           8B4E         F8            mov	cx,-8[bp]
24349 6243           F7E9                       imul	cx
24350                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
24351                                           ! Debug: expression subtree swapping
24352 6245           0246         FE            add	al,-2[bp]
24353 6248           80D4                   00  adc	ah,*0
24354                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24355 624B           D1E0                       shl	ax,*1
24356 624D           50                         push	ax
24357                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
24358 624E           8B46         F8            mov	ax,-8[bp]
24359 6251           8B4E         F6            mov	cx,-$A[bp]
24360 6254           F7E9                       imul	cx
24361                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
24362 6256           D1E0                       shl	ax,*1
24363                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
24364 6258           0C                     FF  or	al,#$FF
24365                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
24366                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
24367 625A           89C3                       mov	bx,ax
24368 625C           8A46         06            mov	al,6[bp]
24369 625F           30E4                       xor	ah,ah
24370 6261           93                         xchg	ax,bx
24371 6262           40                         inc	ax
24372 6263           89D9                       mov	cx,bx
24373 6265           F7E9                       imul	cx
24374                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
24375 6267           0346         EE            add	ax,-$12[bp]
24376 626A           44                         inc	sp
24377 626B           44                         inc	sp
24378                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
24379 626C           8946         F4            mov	-$C[bp],ax
24380                                           !BCC_EOS
24381                                           ! 2924      attr=read_byte(vga_modes[line].sstart,address+1);
24382                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
24383 626F           8B46         F4            mov	ax,-$C[bp]
24384                                           ! Debug: list unsigned int = ax+1 (used reg = )
24385 6272           40                         inc	ax
24386 6273           50                         push	ax
24387                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
24388 6274           8A46         FB            mov	al,-5[bp]
24389 6277           30E4                       xor	ah,ah
24390 6279           B1                     03  mov	cl,*3
24391 627B           D3E0                       shl	ax,cl
24392 627D           89C3                       mov	bx,ax
24393 627F           81C3                 020B  add	bx,#_vga_modes
24394                                           ! Debug: list unsigned short = [bx+4] (used reg = )
24395 6283           FF77         04            push	4[bx]
24396                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
24397 6286           E8         1AEC            call	_read_byte
24398 6289           83C4                   04  add	sp,*4
24399                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
24400 628C           8846         08            mov	8[bp],al
24401                                           !BCC_EOS
24402                                           ! 2925      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
24403                                           ! Debug: list int = const 1 (used reg = )
24404 628F           B8                   0001  mov	ax,*1
24405 6292           50                         push	ax
24406                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24407 6293           8A46         06            mov	al,6[bp]
24408 6296           30E4                       xor	ah,ah
24409 6298           50                         push	ax
24410                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24411 6299           8B46         F8            mov	ax,-8[bp]
24412                                           ! Debug: list unsigned int = ax-1 (used reg = )
24413 629C           48                         dec	ax
24414 629D           50                         push	ax
24415                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24416 629E           8B46         F6            mov	ax,-$A[bp]
24417                                           ! Debug: list unsigned int = ax-1 (used reg = )
24418 62A1           48                         dec	ax
24419 62A2           50                         push	ax
24420                                           ! Debug: list int = const 0 (used reg = )
24421 62A3           31C0                       xor	ax,ax
24422 62A5           50                         push	ax
24423                                           ! Debug: list int = const 0 (used reg = )
24424 62A6           31C0                       xor	ax,ax
24425 62A8           50                         push	ax
24426                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
24427 62A9           8A46         08            mov	al,8[bp]
24428 62AC           30E4                       xor	ah,ah
24429 62AE           50                         push	ax
24430                                           ! Debug: list int = const 1 (used reg = )
24431 62AF           B8                   0001  mov	ax,*1
24432 62B2           50                         push	ax
24433                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24434 62B3           E8         E713            call	_biosfn_scroll
24435 62B6           83C4                   10  add	sp,*$10
24436                                           !BCC_EOS
24437                                           ! 2926     }
24438                                           ! 2927    else
24439                                           ! 2928     {
24440 62B9           EB           27            jmp .216
24441                       000062BB            .214:
24442                                           ! 2929      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24443                                           ! Debug: list int = const 1 (used reg = )
24444 62BB           B8                   0001  mov	ax,*1
24445 62BE           50                         push	ax
24446                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24447 62BF           8A46         06            mov	al,6[bp]
24448 62C2           30E4                       xor	ah,ah
24449 62C4           50                         push	ax
24450                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24451 62C5           8B46         F8            mov	ax,-8[bp]
24452                                           ! Debug: list unsigned int = ax-1 (used reg = )
24453 62C8           48                         dec	ax
24454 62C9           50                         push	ax
24455                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24456 62CA           8B46         F6            mov	ax,-$A[bp]
24457                                           ! Debug: list unsigned int = ax-1 (used reg = )
24458 62CD           48                         dec	ax
24459 62CE           50                         push	ax
24460                                           ! Debug: list int = const 0 (used reg = )
24461 62CF           31C0                       xor	ax,ax
24462 62D1           50                         push	ax
24463                                           ! Debug: list int = const 0 (used reg = )
24464 62D2           31C0                       xor	ax,ax
24465 62D4           50                         push	ax
24466                                           ! Debug: list int = const 0 (used reg = )
24467 62D5           31C0                       xor	ax,ax
24468 62D7           50                         push	ax
24469                                           ! Debug: list int = const 1 (used reg = )
24470 62D8           B8                   0001  mov	ax,*1
24471 62DB           50                         push	ax
24472                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24473 62DC           E8         E6EA            call	_biosfn_scroll
24474 62DF           83C4                   10  add	sp,*$10
24475                                           !BCC_EOS
24476                                           ! 2930     }
24477                                           ! 2931    ycurs-=1;
24478                       000062E2            .216:
24479                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24480 62E2           8A46         FD            mov	al,-3[bp]
24481 62E5           30E4                       xor	ah,ah
24482 62E7           48                         dec	ax
24483 62E8           8846         FD            mov	-3[bp],al
24484                                           !BCC_EOS
24485                                           ! 2932   }
24486                                           ! 2933  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24487                       000062EB            .212:
24488                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24489 62EB           8A46         FD            mov	al,-3[bp]
24490 62EE           30E4                       xor	ah,ah
24491 62F0           8946         F2            mov	-$E[bp],ax
24492                                           !BCC_EOS
24493                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24494 62F3           8B46         F2            mov	ax,-$E[bp]
24495 62F6           88C4                       mov	ah,al
24496 62F8           30C0                       xor	al,al
24497 62FA           8946         F2            mov	-$E[bp],ax
24498                                           !BCC_EOS
24499                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24500 62FD           8B46         F2            mov	ax,-$E[bp]
24501 6300           0246         FE            add	al,-2[bp]
24502 6303           80D4                   00  adc	ah,*0
24503 6306           8946         F2            mov	-$E[bp],ax
24504                                           !BCC_EOS
24505                                           ! 2934  biosfn_set_cursor_pos(page,cursor);
24506                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24507 6309           FF76         F2            push	-$E[bp]
24508                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24509 630C           8A46         06            mov	al,6[bp]
24510 630F           30E4                       xor	ah,ah
24511 6311           50                         push	ax
24512                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24513 6312           E8         E0A9            call	_biosfn_set_cursor_pos
24514 6315           83C4                   04  add	sp,*4
24515                                           !BCC_EOS
24516                                           ! 2935 }
24517 6318           89EC                       mov	sp,bp
24518 631A           5D                         pop	bp
24519 631B           C3                         ret
24520                                           ! 2936 #asm
24521                                           !BCC_ASM
24522                       00000008            _biosfn_write_teletype.flag	set	8
24523                       00000006            _biosfn_write_teletype.attr	set	6
24524                       00000004            _biosfn_write_teletype.page	set	4
24525                       00000002            _biosfn_write_teletype.car	set	2
24526                       0000631C            biosfn_get_video_mode:
24527 631C           1E                           push ds
24528 631D           B8                   0040    mov ax, # 0x40
24529 6320           8ED8                         mov ds, ax
24530 6322           53                           push bx
24531 6323           BB                   0062    mov bx, # 0x62
24532 6326           8A07                         mov al, [bx]
24533 6328           5B                           pop bx
24534 6329           88C7                         mov bh, al
24535 632B           53                           push bx
24536 632C           BB                   0087    mov bx, # 0x87
24537 632F           8A27                         mov ah, [bx]
24538 6331           80E4                   80    and ah, #0x80
24539 6334           BB                   0049    mov bx, # 0x49
24540 6337           8A07                         mov al, [bx]
24541 6339           08E0                         or al, ah
24542 633B           BB                   004A    mov bx, # 0x4A
24543 633E           8A27                         mov ah, [bx]
24544 6340           5B                           pop bx
24545 6341           1F                           pop ds
24546 6342           C3                           ret
24547                                           ! 2958 endasm
24548                                           !BCC_ENDASM
24549                                           ! 2959 #asm
24550                                           !BCC_ASM
24551                       00000008            _biosfn_write_teletype.flag	set	8
24552                       00000006            _biosfn_write_teletype.attr	set	6
24553                       00000004            _biosfn_write_teletype.page	set	4
24554                       00000002            _biosfn_write_teletype.car	set	2
24555                       00006343            biosfn_group_10:
24556 6343           3C                     00    cmp al, #0x00
24557 6345           75           02              jne int10_test_1001
24558 6347           EB           64              jmp biosfn_set_single_palette_reg
24559                       00006349            int10_test_1001:
24560 6349           3C                     01    cmp al, #0x01
24561 634B           75           02              jne int10_test_1002
24562 634D           EB           78              jmp biosfn_set_overscan_border_color
24563                       0000634F            int10_test_1002:
24564 634F           3C                     02    cmp al, #0x02
24565 6351           75           02              jne int10_test_1003
24566 6353           EB           7A              jmp biosfn_set_all_palette_reg
24567                       00006355            int10_test_1003:
24568 6355           3C                     03    cmp al, #0x03
24569 6357           75           03              jne int10_test_1007
24570 6359           E9         00A0              jmp biosfn_toggle_intensity
24571                       0000635C            int10_test_1007:
24572 635C           3C                     07    cmp al, #0x07
24573 635E           75           03              jne int10_test_1008
24574 6360           E9         00BF              jmp biosfn_get_single_palette_reg
24575                       00006363            int10_test_1008:
24576 6363           3C                     08    cmp al, #0x08
24577 6365           75           03              jne int10_test_1009
24578 6367           E9         00DC              jmp biosfn_read_overscan_border_color
24579                       0000636A            int10_test_1009:
24580 636A           3C                     09    cmp al, #0x09
24581 636C           75           03              jne int10_test_1010
24582 636E           E9         00E3              jmp biosfn_get_all_palette_reg
24583                       00006371            int10_test_1010:
24584 6371           3C                     10    cmp al, #0x10
24585 6373           75           03              jne int10_test_1012
24586 6375           E9         011D              jmp biosfn_set_single_dac_reg
24587                       00006378            int10_test_1012:
24588 6378           3C                     12    cmp al, #0x12
24589 637A           75           03              jne int10_test_1013
24590 637C           E9         012F              jmp biosfn_set_all_dac_reg
24591                       0000637F            int10_test_1013:
24592 637F           3C                     13    cmp al, #0x13
24593 6381           75           03              jne int10_test_1015
24594 6383           E9         0150              jmp biosfn_select_video_dac_color_page
24595                       00006386            int10_test_1015:
24596 6386           3C                     15    cmp al, #0x15
24597 6388           75           03              jne int10_test_1017
24598 638A           E9         018C              jmp biosfn_read_single_dac_reg
24599                       0000638D            int10_test_1017:
24600 638D           3C                     17    cmp al, #0x17
24601 638F           75           03              jne int10_test_1018
24602 6391           E9         01A0              jmp biosfn_read_all_dac_reg
24603                       00006394            int10_test_1018:
24604 6394           3C                     18    cmp al, #0x18
24605 6396           75           03              jne int10_test_1019
24606 6398           E9         01C1              jmp biosfn_set_pel_mask
24607                       0000639B            int10_test_1019:
24608 639B           3C                     19    cmp al, #0x19
24609 639D           75           03              jne int10_test_101A
24610 639F           E9         01C5              jmp biosfn_read_pel_mask
24611                       000063A2            int10_test_101A:
24612 63A2           3C                     1A    cmp al, #0x1a
24613 63A4           75           03              jne int10_group_10_unknown
24614 63A6           E9         01C9              jmp biosfn_read_video_dac_state
24615                       000063A9            int10_group_10_unknown:
24616 63A9           E8         1A66              call _unknown
24617 63AC           C3                           ret
24618                       000063AD            biosfn_set_single_palette_reg:
24619 63AD           80FB                   14    cmp bl, #0x14
24620 63B0           77           14              ja no_actl_reg1
24621 63B2           50                           push ax
24622 63B3           52                           push dx
24623 63B4           BA                   03DA    mov dx, # 0x3da
24624 63B7           EC                           in al, dx
24625 63B8           BA                   03C0    mov dx, # 0x3c0
24626 63BB           88D8                         mov al, bl
24627 63BD           EE                           out dx, al
24628 63BE           88F8                         mov al, bh
24629 63C0           EE                           out dx, al
24630 63C1           B0                     20    mov al, #0x20
24631 63C3           EE                           out dx, al
24632 63C4           5A                           pop dx
24633 63C5           58                           pop ax
24634                       000063C6            no_actl_reg1:
24635 63C6           C3                           ret
24636                                           ! 3041 endasm
24637                                           !BCC_ENDASM
24638                                           ! 3042 #asm
24639                                           !BCC_ASM
24640                       00000008            _biosfn_write_teletype.flag	set	8
24641                       00000006            _biosfn_write_teletype.attr	set	6
24642                       00000004            _biosfn_write_teletype.page	set	4
24643                       00000002            _biosfn_write_teletype.car	set	2
24644                       000063C7            biosfn_set_overscan_border_color:
24645 63C7           53                           push bx
24646 63C8           B3                     11    mov bl, #0x11
24647 63CA           E8         FFE0              call biosfn_set_single_palette_reg
24648 63CD           5B                           pop bx
24649 63CE           C3                           ret
24650                                           ! 3049 endasm
24651                                           !BCC_ENDASM
24652                                           ! 3050 #asm
24653                                           !BCC_ASM
24654                       00000008            _biosfn_write_teletype.flag	set	8
24655                       00000006            _biosfn_write_teletype.attr	set	6
24656                       00000004            _biosfn_write_teletype.page	set	4
24657                       00000002            _biosfn_write_teletype.car	set	2
24658                       000063CF            biosfn_set_all_palette_reg:
24659 63CF           50                           push ax
24660 63D0           53                           push bx
24661 63D1           51                           push cx
24662 63D2           52                           push dx
24663 63D3           89D3                         mov bx, dx
24664 63D5           BA                   03DA    mov dx, # 0x3da
24665 63D8           EC                           in al, dx
24666 63D9           B1                     00    mov cl, #0x00
24667 63DB           BA                   03C0    mov dx, # 0x3c0
24668                       000063DE            set_palette_loop:
24669 63DE           88C8                         mov al, cl
24670 63E0           EE                           out dx, al
24671 63E1           26                           seg es
24672 63E2           8A07                         mov al, [bx]
24673 63E4           EE                           out dx, al
24674 63E5           43                           inc bx
24675 63E6           FEC1                         inc cl
24676 63E8           80F9                   10    cmp cl, #0x10
24677 63EB           75           F1              jne set_palette_loop
24678 63ED           B0                     11    mov al, #0x11
24679 63EF           EE                           out dx, al
24680 63F0           26                           seg es
24681 63F1           8A07                         mov al, [bx]
24682 63F3           EE                           out dx, al
24683 63F4           B0                     20    mov al, #0x20
24684 63F6           EE                           out dx, al
24685 63F7           5A                           pop dx
24686 63F8           59                           pop cx
24687 63F9           5B                           pop bx
24688 63FA           58                           pop ax
24689 63FB           C3                           ret
24690                                           ! 3083 endasm
24691                                           !BCC_ENDASM
24692                                           ! 3084 #asm
24693                                           !BCC_ASM
24694                       00000008            _biosfn_write_teletype.flag	set	8
24695                       00000006            _biosfn_write_teletype.attr	set	6
24696                       00000004            _biosfn_write_teletype.page	set	4
24697                       00000002            _biosfn_write_teletype.car	set	2
24698                       000063FC            biosfn_toggle_intensity:
24699 63FC           50                           push ax
24700 63FD           53                           push bx
24701 63FE           52                           push dx
24702 63FF           BA                   03DA    mov dx, # 0x3da
24703 6402           EC                           in al, dx
24704 6403           BA                   03C0    mov dx, # 0x3c0
24705 6406           B0                     10    mov al, #0x10
24706 6408           EE                           out dx, al
24707 6409           BA                   03C1    mov dx, # 0x3c1
24708 640C           EC                           in al, dx
24709 640D           24                     F7    and al, #0xf7
24710 640F           80E3                   01    and bl, #0x01
24711 6412           C0E3                   03    shl bl, 3
24712 6415           08D8                         or al, bl
24713 6417           BA                   03C0    mov dx, # 0x3c0
24714 641A           EE                           out dx, al
24715 641B           B0                     20    mov al, #0x20
24716 641D           EE                           out dx, al
24717 641E           5A                           pop dx
24718 641F           5B                           pop bx
24719 6420           58                           pop ax
24720 6421           C3                           ret
24721                                           ! 3108 endasm
24722                                           !BCC_ENDASM
24723                                           ! 3109 #asm
24724                                           !BCC_ASM
24725                       00000008            _biosfn_write_teletype.flag	set	8
24726                       00000006            _biosfn_write_teletype.attr	set	6
24727                       00000004            _biosfn_write_teletype.page	set	4
24728                       00000002            _biosfn_write_teletype.car	set	2
24729                       00006422            biosfn_get_single_palette_reg:
24730 6422           80FB                   14    cmp bl, #0x14
24731 6425           77           1E              ja no_actl_reg2
24732 6427           50                           push ax
24733 6428           52                           push dx
24734 6429           BA                   03DA    mov dx, # 0x3da
24735 642C           EC                           in al, dx
24736 642D           BA                   03C0    mov dx, # 0x3c0
24737 6430           88D8                         mov al, bl
24738 6432           EE                           out dx, al
24739 6433           BA                   03C1    mov dx, # 0x3c1
24740 6436           EC                           in al, dx
24741 6437           88C7                         mov bh, al
24742 6439           BA                   03DA    mov dx, # 0x3da
24743 643C           EC                           in al, dx
24744 643D           BA                   03C0    mov dx, # 0x3c0
24745 6440           B0                     20    mov al, #0x20
24746 6442           EE                           out dx, al
24747 6443           5A                           pop dx
24748 6444           58                           pop ax
24749                       00006445            no_actl_reg2:
24750 6445           C3                           ret
24751                                           ! 3132 endasm
24752                                           !BCC_ENDASM
24753                                           ! 3133 #asm
24754                                           !BCC_ASM
24755                       00000008            _biosfn_write_teletype.flag	set	8
24756                       00000006            _biosfn_write_teletype.attr	set	6
24757                       00000004            _biosfn_write_teletype.page	set	4
24758                       00000002            _biosfn_write_teletype.car	set	2
24759                       00006446            biosfn_read_overscan_border_color:
24760 6446           50                           push ax
24761 6447           53                           push bx
24762 6448           B3                     11    mov bl, #0x11
24763 644A           E8         FFD5              call biosfn_get_single_palette_reg
24764 644D           88F8                         mov al, bh
24765 644F           5B                           pop bx
24766 6450           88C7                         mov bh, al
24767 6452           58                           pop ax
24768 6453           C3                           ret
24769                                           ! 3144 endasm
24770                                           !BCC_ENDASM
24771                                           ! 3145 #asm
24772                                           !BCC_ASM
24773                       00000008            _biosfn_write_teletype.flag	set	8
24774                       00000006            _biosfn_write_teletype.attr	set	6
24775                       00000004            _biosfn_write_teletype.page	set	4
24776                       00000002            _biosfn_write_teletype.car	set	2
24777                       00006454            biosfn_get_all_palette_reg:
24778 6454           50                           push ax
24779 6455           53                           push bx
24780 6456           51                           push cx
24781 6457           52                           push dx
24782 6458           89D3                         mov bx, dx
24783 645A           B1                     00    mov cl, #0x00
24784                       0000645C            get_palette_loop:
24785 645C           BA                   03DA    mov dx, # 0x3da
24786 645F           EC                           in al, dx
24787 6460           BA                   03C0    mov dx, # 0x3c0
24788 6463           88C8                         mov al, cl
24789 6465           EE                           out dx, al
24790 6466           BA                   03C1    mov dx, # 0x3c1
24791 6469           EC                           in al, dx
24792 646A           26                           seg es
24793 646B           8807                         mov [bx], al
24794 646D           43                           inc bx
24795 646E           FEC1                         inc cl
24796 6470           80F9                   10    cmp cl, #0x10
24797 6473           75           E7              jne get_palette_loop
24798 6475           BA                   03DA    mov dx, # 0x3da
24799 6478           EC                           in al, dx
24800 6479           BA                   03C0    mov dx, # 0x3c0
24801 647C           B0                     11    mov al, #0x11
24802 647E           EE                           out dx, al
24803 647F           BA                   03C1    mov dx, # 0x3c1
24804 6482           EC                           in al, dx
24805 6483           26                           seg es
24806 6484           8807                         mov [bx], al
24807 6486           BA                   03DA    mov dx, # 0x3da
24808 6489           EC                           in al, dx
24809 648A           BA                   03C0    mov dx, # 0x3c0
24810 648D           B0                     20    mov al, #0x20
24811 648F           EE                           out dx, al
24812 6490           5A                           pop dx
24813 6491           59                           pop cx
24814 6492           5B                           pop bx
24815 6493           58                           pop ax
24816 6494           C3                           ret
24817                                           ! 3186 endasm
24818                                           !BCC_ENDASM
24819                                           ! 3187 #asm
24820                                           !BCC_ASM
24821                       00000008            _biosfn_write_teletype.flag	set	8
24822                       00000006            _biosfn_write_teletype.attr	set	6
24823                       00000004            _biosfn_write_teletype.page	set	4
24824                       00000002            _biosfn_write_teletype.car	set	2
24825                       00006495            biosfn_set_single_dac_reg:
24826 6495           50                           push ax
24827 6496           52                           push dx
24828 6497           BA                   03C8    mov dx, # 0x3c8
24829 649A           88D8                         mov al, bl
24830 649C           EE                           out dx, al
24831 649D           BA                   03C9    mov dx, # 0x3c9
24832 64A0           58                           pop ax
24833 64A1           50                           push ax
24834 64A2           88E0                         mov al, ah
24835 64A4           EE                           out dx, al
24836 64A5           88E8                         mov al, ch
24837 64A7           EE                           out dx, al
24838 64A8           88C8                         mov al, cl
24839 64AA           EE                           out dx, al
24840 64AB           5A                           pop dx
24841 64AC           58                           pop ax
24842 64AD           C3                           ret
24843                                           ! 3206 endasm
24844                                           !BCC_ENDASM
24845                                           ! 3207 #asm
24846                                           !BCC_ASM
24847                       00000008            _biosfn_write_teletype.flag	set	8
24848                       00000006            _biosfn_write_teletype.attr	set	6
24849                       00000004            _biosfn_write_teletype.page	set	4
24850                       00000002            _biosfn_write_teletype.car	set	2
24851                       000064AE            biosfn_set_all_dac_reg:
24852 64AE           50                           push ax
24853 64AF           53                           push bx
24854 64B0           51                           push cx
24855 64B1           52                           push dx
24856 64B2           BA                   03C8    mov dx, # 0x3c8
24857 64B5           88D8                         mov al, bl
24858 64B7           EE                           out dx, al
24859 64B8           5A                           pop dx
24860 64B9           52                           push dx
24861 64BA           89D3                         mov bx, dx
24862 64BC           BA                   03C9    mov dx, # 0x3c9
24863                       000064BF            set_dac_loop:
24864 64BF           26                           seg es
24865 64C0           8A07                         mov al, [bx]
24866 64C2           EE                           out dx, al
24867 64C3           43                           inc bx
24868 64C4           26                           seg es
24869 64C5           8A07                         mov al, [bx]
24870 64C7           EE                           out dx, al
24871 64C8           43                           inc bx
24872 64C9           26                           seg es
24873 64CA           8A07                         mov al, [bx]
24874 64CC           EE                           out dx, al
24875 64CD           43                           inc bx
24876 64CE           49                           dec cx
24877 64CF           75           EE              jnz set_dac_loop
24878 64D1           5A                           pop dx
24879 64D2           59                           pop cx
24880 64D3           5B                           pop bx
24881 64D4           58                           pop ax
24882 64D5           C3                           ret
24883                                           ! 3240 endasm
24884                                           !BCC_ENDASM
24885                                           ! 3241 #asm
24886                                           !BCC_ASM
24887                       00000008            _biosfn_write_teletype.flag	set	8
24888                       00000006            _biosfn_write_teletype.attr	set	6
24889                       00000004            _biosfn_write_teletype.page	set	4
24890                       00000002            _biosfn_write_teletype.car	set	2
24891                       000064D6            biosfn_select_video_dac_color_page:
24892 64D6           50                           push ax
24893 64D7           53                           push bx
24894 64D8           52                           push dx
24895 64D9           BA                   03DA    mov dx, # 0x3da
24896 64DC           EC                           in al, dx
24897 64DD           BA                   03C0    mov dx, # 0x3c0
24898 64E0           B0                     10    mov al, #0x10
24899 64E2           EE                           out dx, al
24900 64E3           BA                   03C1    mov dx, # 0x3c1
24901 64E6           EC                           in al, dx
24902 64E7           80E3                   01    and bl, #0x01
24903 64EA           75           0D              jnz set_dac_page
24904 64EC           24                     7F    and al, #0x7f
24905 64EE           C0E7                   07    shl bh, 7
24906 64F1           08F8                         or al, bh
24907 64F3           BA                   03C0    mov dx, # 0x3c0
24908 64F6           EE                           out dx, al
24909 64F7           EB           19              jmp set_actl_normal
24910                       000064F9            set_dac_page:
24911 64F9           50                           push ax
24912 64FA           BA                   03DA    mov dx, # 0x3da
24913 64FD           EC                           in al, dx
24914 64FE           BA                   03C0    mov dx, # 0x3c0
24915 6501           B0                     14    mov al, #0x14
24916 6503           EE                           out dx, al
24917 6504           58                           pop ax
24918 6505           24                     80    and al, #0x80
24919 6507           75           03              jnz set_dac_16_page
24920 6509           C0E7                   02    shl bh, 2
24921                       0000650C            set_dac_16_page:
24922 650C           80E7                   0F    and bh, #0x0f
24923 650F           88F8                         mov al, bh
24924 6511           EE                           out dx, al
24925                       00006512            set_actl_normal:
24926 6512           B0                     20    mov al, #0x20
24927 6514           EE                           out dx, al
24928 6515           5A                           pop dx
24929 6516           5B                           pop bx
24930 6517           58                           pop ax
24931 6518           C3                           ret
24932                                           ! 3283 endasm
24933                                           !BCC_ENDASM
24934                                           ! 3284 #asm
24935                                           !BCC_ASM
24936                       00000008            _biosfn_write_teletype.flag	set	8
24937                       00000006            _biosfn_write_teletype.attr	set	6
24938                       00000004            _biosfn_write_teletype.page	set	4
24939                       00000002            _biosfn_write_teletype.car	set	2
24940                       00006519            biosfn_read_single_dac_reg:
24941 6519           50                           push ax
24942 651A           52                           push dx
24943 651B           BA                   03C7    mov dx, # 0x3c7
24944 651E           88D8                         mov al, bl
24945 6520           EE                           out dx, al
24946 6521           58                           pop ax
24947 6522           88C4                         mov ah, al
24948 6524           BA                   03C9    mov dx, # 0x3c9
24949 6527           EC                           in al, dx
24950 6528           86E0                         xchg al, ah
24951 652A           50                           push ax
24952 652B           EC                           in al, dx
24953 652C           88C5                         mov ch, al
24954 652E           EC                           in al, dx
24955 652F           88C1                         mov cl, al
24956 6531           5A                           pop dx
24957 6532           58                           pop ax
24958 6533           C3                           ret
24959                                           ! 3304 endasm
24960                                           !BCC_ENDASM
24961                                           ! 3305 #asm
24962                                           !BCC_ASM
24963                       00000008            _biosfn_write_teletype.flag	set	8
24964                       00000006            _biosfn_write_teletype.attr	set	6
24965                       00000004            _biosfn_write_teletype.page	set	4
24966                       00000002            _biosfn_write_teletype.car	set	2
24967                       00006534            biosfn_read_all_dac_reg:
24968 6534           50                           push ax
24969 6535           53                           push bx
24970 6536           51                           push cx
24971 6537           52                           push dx
24972 6538           BA                   03C7    mov dx, # 0x3c7
24973 653B           88D8                         mov al, bl
24974 653D           EE                           out dx, al
24975 653E           5A                           pop dx
24976 653F           52                           push dx
24977 6540           89D3                         mov bx, dx
24978 6542           BA                   03C9    mov dx, # 0x3c9
24979                       00006545            read_dac_loop:
24980 6545           EC                           in al, dx
24981 6546           26                           seg es
24982 6547           8807                         mov [bx], al
24983 6549           43                           inc bx
24984 654A           EC                           in al, dx
24985 654B           26                           seg es
24986 654C           8807                         mov [bx], al
24987 654E           43                           inc bx
24988 654F           EC                           in al, dx
24989 6550           26                           seg es
24990 6551           8807                         mov [bx], al
24991 6553           43                           inc bx
24992 6554           49                           dec cx
24993 6555           75           EE              jnz read_dac_loop
24994 6557           5A                           pop dx
24995 6558           59                           pop cx
24996 6559           5B                           pop bx
24997 655A           58                           pop ax
24998 655B           C3                           ret
24999                                           ! 3338 endasm
25000                                           !BCC_ENDASM
25001                                           ! 3339 #asm
25002                                           !BCC_ASM
25003                       00000008            _biosfn_write_teletype.flag	set	8
25004                       00000006            _biosfn_write_teletype.attr	set	6
25005                       00000004            _biosfn_write_teletype.page	set	4
25006                       00000002            _biosfn_write_teletype.car	set	2
25007                       0000655C            biosfn_set_pel_mask:
25008 655C           50                           push ax
25009 655D           52                           push dx
25010 655E           BA                   03C6    mov dx, # 0x3c6
25011 6561           88D8                         mov al, bl
25012 6563           EE                           out dx, al
25013 6564           5A                           pop dx
25014 6565           58                           pop ax
25015 6566           C3                           ret
25016                                           ! 3349 endasm
25017                                           !BCC_ENDASM
25018                                           ! 3350 #asm
25019                                           !BCC_ASM
25020                       00000008            _biosfn_write_teletype.flag	set	8
25021                       00000006            _biosfn_write_teletype.attr	set	6
25022                       00000004            _biosfn_write_teletype.page	set	4
25023                       00000002            _biosfn_write_teletype.car	set	2
25024                       00006567            biosfn_read_pel_mask:
25025 6567           50                           push ax
25026 6568           52                           push dx
25027 6569           BA                   03C6    mov dx, # 0x3c6
25028 656C           EC                           in al, dx
25029 656D           88C3                         mov bl, al
25030 656F           5A                           pop dx
25031 6570           58                           pop ax
25032 6571           C3                           ret
25033                                           ! 3360 endasm
25034                                           !BCC_ENDASM
25035                                           ! 3361 #asm
25036                                           !BCC_ASM
25037                       00000008            _biosfn_write_teletype.flag	set	8
25038                       00000006            _biosfn_write_teletype.attr	set	6
25039                       00000004            _biosfn_write_teletype.page	set	4
25040                       00000002            _biosfn_write_teletype.car	set	2
25041                       00006572            biosfn_read_video_dac_state:
25042 6572           50                           push ax
25043 6573           52                           push dx
25044 6574           BA                   03DA    mov dx, # 0x3da
25045 6577           EC                           in al, dx
25046 6578           BA                   03C0    mov dx, # 0x3c0
25047 657B           B0                     10    mov al, #0x10
25048 657D           EE                           out dx, al
25049 657E           BA                   03C1    mov dx, # 0x3c1
25050 6581           EC                           in al, dx
25051 6582           88C3                         mov bl, al
25052 6584           C0EB                   07    shr bl, 7
25053 6587           BA                   03DA    mov dx, # 0x3da
25054 658A           EC                           in al, dx
25055 658B           BA                   03C0    mov dx, # 0x3c0
25056 658E           B0                     14    mov al, #0x14
25057 6590           EE                           out dx, al
25058 6591           BA                   03C1    mov dx, # 0x3c1
25059 6594           EC                           in al, dx
25060 6595           88C7                         mov bh, al
25061 6597           80E7                   0F    and bh, #0x0f
25062 659A           F6C3                   01    test bl, #0x01
25063 659D           75           03              jnz get_dac_16_page
25064 659F           C0EF                   02    shr bh, 2
25065                       000065A2            get_dac_16_page:
25066 65A2           BA                   03DA    mov dx, # 0x3da
25067 65A5           EC                           in al, dx
25068 65A6           BA                   03C0    mov dx, # 0x3c0
25069 65A9           B0                     20    mov al, #0x20
25070 65AB           EE                           out dx, al
25071 65AC           5A                           pop dx
25072 65AD           58                           pop ax
25073 65AE           C3                           ret
25074                                           ! 3395 endasm
25075                                           !BCC_ENDASM
25076                                           ! 3396 static void biosfn_perform_gray_scale_summing (start,count)
25077                                           ! Register BX used in function biosfn_write_teletype
25078                                           ! 3397 Bit16u start;Bit16u count;
25079                       000065AF            _biosfn_perform_gray_scale_summing:
25080                                           !BCC_EOS
25081                                           !BCC_EOS
25082                                           ! 3398 {Bit8u r,g,b;
25083                                           !BCC_EOS
25084                                           ! 3399  Bit16u i;
25085                                           !BCC_EOS
25086                                           ! 3400  Bit16u index;
25087                                           !BCC_EOS
25088                                           ! 3401  inb(0x3da);
25089 65AF           55                         push	bp
25090 65B0           89E5                       mov	bp,sp
25091 65B2           83C4                   F8  add	sp,*-8
25092                                           ! Debug: list int = const $3DA (used reg = )
25093 65B5           B8                   03DA  mov	ax,#$3DA
25094 65B8           50                         push	ax
25095                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25096 65B9           E8         180F            call	_inb
25097 65BC           44                         inc	sp
25098 65BD           44                         inc	sp
25099                                           !BCC_EOS
25100                                           ! 3402  outb(0x3c0,0x00);
25101                                           ! Debug: list int = const 0 (used reg = )
25102 65BE           31C0                       xor	ax,ax
25103 65C0           50                         push	ax
25104                                           ! Debug: list int = const $3C0 (used reg = )
25105 65C1           B8                   03C0  mov	ax,#$3C0
25106 65C4           50                         push	ax
25107                                           ! Debug: func () void = outb+0 (used reg = )
25108 65C5           E8         1819            call	_outb
25109 65C8           83C4                   04  add	sp,*4
25110                                           !BCC_EOS
25111                                           ! 3403  for( index = 0; index < count; index++ )
25112                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
25113 65CB           31C0                       xor	ax,ax
25114 65CD           8946         F8            mov	-8[bp],ax
25115                                           !BCC_EOS
25116                                           !BCC_EOS
25117                                           ! 3404   {
25118 65D0           E9         00BE            br 	.219
25119                       000065D3            .21A:
25120                                           ! 3405    outb(0x3c7,start);
25121                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25122 65D3           FF76         04            push	4[bp]
25123                                           ! Debug: list int = const $3C7 (used reg = )
25124 65D6           B8                   03C7  mov	ax,#$3C7
25125 65D9           50                         push	ax
25126                                           ! Debug: func () void = outb+0 (used reg = )
25127 65DA           E8         1804            call	_outb
25128 65DD           83C4                   04  add	sp,*4
25129                                           !BCC_EOS
25130                                           ! 3406    r=inb( 0x3c9 );
25131                                           ! Debug: list int = const $3C9 (used reg = )
25132 65E0           B8                   03C9  mov	ax,#$3C9
25133 65E3           50                         push	ax
25134                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25135 65E4           E8         17E4            call	_inb
25136 65E7           44                         inc	sp
25137 65E8           44                         inc	sp
25138                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
25139 65E9           8846         FF            mov	-1[bp],al
25140                                           !BCC_EOS
25141                                           ! 3407    g=inb( 0x3c9 );
25142                                           ! Debug: list int = const $3C9 (used reg = )
25143 65EC           B8                   03C9  mov	ax,#$3C9
25144 65EF           50                         push	ax
25145                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25146 65F0           E8         17D8            call	_inb
25147 65F3           44                         inc	sp
25148 65F4           44                         inc	sp
25149                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
25150 65F5           8846         FE            mov	-2[bp],al
25151                                           !BCC_EOS
25152                                           ! 3408    b=inb( 0x3c9 );
25153                                           ! Debug: list int = const $3C9 (used reg = )
25154 65F8           B8                   03C9  mov	ax,#$3C9
25155 65FB           50                         push	ax
25156                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25157 65FC           E8         17CC            call	_inb
25158 65FF           44                         inc	sp
25159 6600           44                         inc	sp
25160                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
25161 6601           8846         FD            mov	-3[bp],al
25162                                           !BCC_EOS
25163                                           ! 3409    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
25164                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
25165                                           ! Debug: expression subtree swapping
25166 6604           8A46         FD            mov	al,-3[bp]
25167 6607           30E4                       xor	ah,ah
25168 6609           B9                   001C  mov	cx,*$1C
25169 660C           F7E9                       imul	cx
25170 660E           50                         push	ax
25171                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
25172                                           ! Debug: expression subtree swapping
25173 660F           8A46         FE            mov	al,-2[bp]
25174 6612           30E4                       xor	ah,ah
25175 6614           B9                   0097  mov	cx,#$97
25176 6617           F7E9                       imul	cx
25177 6619           50                         push	ax
25178                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
25179                                           ! Debug: expression subtree swapping
25180 661A           8A46         FF            mov	al,-1[bp]
25181 661D           30E4                       xor	ah,ah
25182 661F           B9                   004D  mov	cx,*$4D
25183 6622           F7E9                       imul	cx
25184                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
25185 6624           0346         F4            add	ax,-$C[bp]
25186 6627           44                         inc	sp
25187 6628           44                         inc	sp
25188                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25189 6629           0346         F6            add	ax,-$A[bp]
25190 662C           44                         inc	sp
25191 662D           44                         inc	sp
25192                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
25193                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
25194 662E           05                   0080  add	ax,#$80
25195 6631           88E0                       mov	al,ah
25196 6633           30E4                       xor	ah,ah
25197                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
25198 6635           8946         FA            mov	-6[bp],ax
25199                                           !BCC_EOS
25200                                           ! 3410    if(i>0x3f)i=0x3f;
25201                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25202 6638           8B46         FA            mov	ax,-6[bp]
25203 663B           3D                   003F  cmp	ax,*$3F
25204 663E           76           06            jbe 	.21B
25205                       00006640            .21C:
25206                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
25207 6640           B8                   003F  mov	ax,*$3F
25208 6643           8946         FA            mov	-6[bp],ax
25209                                           !BCC_EOS
25210                                           ! 3411    outb(0x3c8,start);
25211                       00006646            .21B:
25212                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
25213 6646           FF76         04            push	4[bp]
25214                                           ! Debug: list int = const $3C8 (used reg = )
25215 6649           B8                   03C8  mov	ax,#$3C8
25216 664C           50                         push	ax
25217                                           ! Debug: func () void = outb+0 (used reg = )
25218 664D           E8         1791            call	_outb
25219 6650           83C4                   04  add	sp,*4
25220                                           !BCC_EOS
25221                                           ! 3412    outb( 0x3c9, i&0xff );
25222                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25223 6653           8A46         FA            mov	al,-6[bp]
25224                                           ! Debug: list unsigned char = al+0 (used reg = )
25225 6656           30E4                       xor	ah,ah
25226 6658           50                         push	ax
25227                                           ! Debug: list int = const $3C9 (used reg = )
25228 6659           B8                   03C9  mov	ax,#$3C9
25229 665C           50                         push	ax
25230                                           ! Debug: func () void = outb+0 (used reg = )
25231 665D           E8         1781            call	_outb
25232 6660           83C4                   04  add	sp,*4
25233                                           !BCC_EOS
25234                                           ! 3413    outb( 0x3c9, i&0xff );
25235                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25236 6663           8A46         FA            mov	al,-6[bp]
25237                                           ! Debug: list unsigned char = al+0 (used reg = )
25238 6666           30E4                       xor	ah,ah
25239 6668           50                         push	ax
25240                                           ! Debug: list int = const $3C9 (used reg = )
25241 6669           B8                   03C9  mov	ax,#$3C9
25242 666C           50                         push	ax
25243                                           ! Debug: func () void = outb+0 (used reg = )
25244 666D           E8         1771            call	_outb
25245 6670           83C4                   04  add	sp,*4
25246                                           !BCC_EOS
25247                                           ! 3414    outb( 0x3c9, i&0xff );
25248                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
25249 6673           8A46         FA            mov	al,-6[bp]
25250                                           ! Debug: list unsigned char = al+0 (used reg = )
25251 6676           30E4                       xor	ah,ah
25252 6678           50                         push	ax
25253                                           ! Debug: list int = const $3C9 (used reg = )
25254 6679           B8                   03C9  mov	ax,#$3C9
25255 667C           50                         push	ax
25256                                           ! Debug: func () void = outb+0 (used reg = )
25257 667D           E8         1761            call	_outb
25258 6680           83C4                   04  add	sp,*4
25259                                           !BCC_EOS
25260                                           ! 3415    start++;
25261                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
25262 6683           8B46         04            mov	ax,4[bp]
25263 6686           40                         inc	ax
25264 6687           8946         04            mov	4[bp],ax
25265                                           !BCC_EOS
25266                                           ! 3416   }
25267                                           ! 3417  inb(0x3da);
25268                       0000668A            .218:
25269                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
25270 668A           8B46         F8            mov	ax,-8[bp]
25271 668D           40                         inc	ax
25272 668E           8946         F8            mov	-8[bp],ax
25273                       00006691            .219:
25274                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
25275 6691           8B46         F8            mov	ax,-8[bp]
25276 6694           3B46         06            cmp	ax,6[bp]
25277 6697         0F82         FF38            blo 	.21A
25278                       0000669B            .21D:
25279                       0000669B            .217:
25280                                           ! Debug: list int = const $3DA (used reg = )
25281 669B           B8                   03DA  mov	ax,#$3DA
25282 669E           50                         push	ax
25283                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25284 669F           E8         1729            call	_inb
25285 66A2           44                         inc	sp
25286 66A3           44                         inc	sp
25287                                           !BCC_EOS
25288                                           ! 3418  outb(0x3c0,0x20);
25289                                           ! Debug: list int = const $20 (used reg = )
25290 66A4           B8                   0020  mov	ax,*$20
25291 66A7           50                         push	ax
25292                                           ! Debug: list int = const $3C0 (used reg = )
25293 66A8           B8                   03C0  mov	ax,#$3C0
25294 66AB           50                         push	ax
25295                                           ! Debug: func () void = outb+0 (used reg = )
25296 66AC           E8         1732            call	_outb
25297 66AF           83C4                   04  add	sp,*4
25298                                           !BCC_EOS
25299                                           ! 3419 }
25300 66B2           89EC                       mov	sp,bp
25301 66B4           5D                         pop	bp
25302 66B5           C3                         ret
25303                                           ! 3420 static void get_font_access()
25304                                           ! 3421 {
25305                       000066B6            _get_font_access:
25306                                           ! 3422 #asm
25307                                           !BCC_ASM
25308 66B6           BA                   03C4   mov dx, # 0x3c4
25309 66B9           B8                   0100   mov ax, #0x0100
25310 66BC           EF                          out dx, ax
25311 66BD           B8                   0402   mov ax, #0x0402
25312 66C0           EF                          out dx, ax
25313 66C1           B8                   0704   mov ax, #0x0704
25314 66C4           EF                          out dx, ax
25315 66C5           B8                   0300   mov ax, #0x0300
25316 66C8           EF                          out dx, ax
25317 66C9           BA                   03CE   mov dx, # 0x3ce
25318 66CC           B8                   0204   mov ax, #0x0204
25319 66CF           EF                          out dx, ax
25320 66D0           B8                   0005   mov ax, #0x0005
25321 66D3           EF                          out dx, ax
25322 66D4           B8                   0406   mov ax, #0x0406
25323 66D7           EF                          out dx, ax
25324                                           ! 3439 endasm
25325                                           !BCC_ENDASM
25326                                           ! 3440 }
25327 66D8           C3                         ret
25328                                           ! 3441 static void release_font_access()
25329                                           ! 3442 {
25330                       000066D9            _release_font_access:
25331                                           ! 3443 #asm
25332                                           !BCC_ASM
25333 66D9           BA                   03C4   mov dx, # 0x3c4
25334 66DC           B8                   0100   mov ax, #0x0100
25335 66DF           EF                          out dx, ax
25336 66E0           B8                   0302   mov ax, #0x0302
25337 66E3           EF                          out dx, ax
25338 66E4           B8                   0304   mov ax, #0x0304
25339 66E7           EF                          out dx, ax
25340 66E8           B8                   0300   mov ax, #0x0300
25341 66EB           EF                          out dx, ax
25342 66EC           BA                   03CC   mov dx, # 0x3cc
25343 66EF           EC                          in al, dx
25344 66F0           24                     01   and al, #0x01
25345 66F2           C0E0                   02   shl al, 2
25346 66F5           0C                     0A   or al, #0x0a
25347 66F7           88C4                        mov ah, al
25348 66F9           B0                     06   mov al, #0x06
25349 66FB           BA                   03CE   mov dx, # 0x3ce
25350 66FE           EF                          out dx, ax
25351 66FF           B8                   0004   mov ax, #0x0004
25352 6702           EF                          out dx, ax
25353 6703           B8                   1005   mov ax, #0x1005
25354 6706           EF                          out dx, ax
25355                                           ! 3466 endasm
25356                                           !BCC_ENDASM
25357                                           ! 3467 }
25358 6707           C3                         ret
25359                                           ! 3468 #asm
25360                                           !BCC_ASM
25361                       00006708            idiv_u:
25362 6708           31D2                         xor dx,dx
25363 670A           F7F3                         div bx
25364 670C           C3                           ret
25365                                           ! 3473 endasm
25366                                           !BCC_ENDASM
25367                                           ! 3474 static void set_scan_lines(lines) Bit8u lines;
25368                       0000670D            _set_scan_lines:
25369                                           !BCC_EOS
25370                                           ! 3475 {
25371                                           ! 3476  Bit16u crtc_addr,cols,page,vde;
25372                                           !BCC_EOS
25373                                           ! 3477  Bit8u crtc_r9,ovl,rows;
25374                                           !BCC_EOS
25375                                           ! 3478  crtc_addr = read_word(0x40,0x63);
25376 670D           55                         push	bp
25377 670E           89E5                       mov	bp,sp
25378 6710           83C4                   F4  add	sp,*-$C
25379                                           ! Debug: list int = const $63 (used reg = )
25380 6713           B8                   0063  mov	ax,*$63
25381 6716           50                         push	ax
25382                                           ! Debug: list int = const $40 (used reg = )
25383 6717           B8                   0040  mov	ax,*$40
25384 671A           50                         push	ax
25385                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25386 671B           E8         166A            call	_read_word
25387 671E           83C4                   04  add	sp,*4
25388                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25389 6721           8946         FE            mov	-2[bp],ax
25390                                           !BCC_EOS
25391                                           ! 3479  outb(crtc_addr, 0x09);
25392                                           ! Debug: list int = const 9 (used reg = )
25393 6724           B8                   0009  mov	ax,*9
25394 6727           50                         push	ax
25395                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25396 6728           FF76         FE            push	-2[bp]
25397                                           ! Debug: func () void = outb+0 (used reg = )
25398 672B           E8         16B3            call	_outb
25399 672E           83C4                   04  add	sp,*4
25400                                           !BCC_EOS
25401                                           ! 3480  crtc_r9 = inb(crtc_addr+1);
25402                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25403 6731           8B46         FE            mov	ax,-2[bp]
25404                                           ! Debug: list unsigned int = ax+1 (used reg = )
25405 6734           40                         inc	ax
25406 6735           50                         push	ax
25407                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25408 6736           E8         1692            call	_inb
25409 6739           44                         inc	sp
25410 673A           44                         inc	sp
25411                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25412 673B           8846         F7            mov	-9[bp],al
25413                                           !BCC_EOS
25414                                           ! 3481  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
25415                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
25416 673E           8A46         04            mov	al,4[bp]
25417 6741           30E4                       xor	ah,ah
25418 6743           48                         dec	ax
25419 6744           50                         push	ax
25420                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25421 6745           8A46         F7            mov	al,-9[bp]
25422 6748           24                     E0  and	al,#$E0
25423                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25424 674A           30E4                       xor	ah,ah
25425 674C           0B46         F2            or	ax,-$E[bp]
25426 674F           44                         inc	sp
25427 6750           44                         inc	sp
25428                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25429 6751           8846         F7            mov	-9[bp],al
25430                                           !BCC_EOS
25431                                           ! 3482  outb(crtc_addr+1, crtc_r9);
25432                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25433 6754           8A46         F7            mov	al,-9[bp]
25434 6757           30E4                       xor	ah,ah
25435 6759           50                         push	ax
25436                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25437 675A           8B46         FE            mov	ax,-2[bp]
25438                                           ! Debug: list unsigned int = ax+1 (used reg = )
25439 675D           40                         inc	ax
25440 675E           50                         push	ax
25441                                           ! Debug: func () void = outb+0 (used reg = )
25442 675F           E8         167F            call	_outb
25443 6762           83C4                   04  add	sp,*4
25444                                           !BCC_EOS
25445                                           ! 3483  if(lines==8)
25446                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25447 6765           8A46         04            mov	al,4[bp]
25448 6768           3C                     08  cmp	al,*8
25449 676A           75           10            jne 	.21E
25450                       0000676C            .21F:
25451                                           ! 3484   {
25452                                           ! 3485    biosfn_set_cursor_shape(0x06,0x07);
25453                                           ! Debug: list int = const 7 (used reg = )
25454 676C           B8                   0007  mov	ax,*7
25455 676F           50                         push	ax
25456                                           ! Debug: list int = const 6 (used reg = )
25457 6770           B8                   0006  mov	ax,*6
25458 6773           50                         push	ax
25459                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25460 6774           E8         DB2C            call	_biosfn_set_cursor_shape
25461 6777           83C4                   04  add	sp,*4
25462                                           !BCC_EOS
25463                                           ! 3486   }
25464                                           ! 3487  else
25465                                           ! 3488   {
25466 677A           EB           18            jmp .220
25467                       0000677C            .21E:
25468                                           ! 3489    biosfn_set_cursor_shape(lines-4,lines-3);
25469                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25470 677C           8A46         04            mov	al,4[bp]
25471 677F           30E4                       xor	ah,ah
25472                                           ! Debug: list unsigned int = ax-3 (used reg = )
25473 6781           05                   FFFD  add	ax,*-3
25474 6784           50                         push	ax
25475                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25476 6785           8A46         04            mov	al,4[bp]
25477 6788           30E4                       xor	ah,ah
25478                                           ! Debug: list unsigned int = ax-4 (used reg = )
25479 678A           05                   FFFC  add	ax,*-4
25480 678D           50                         push	ax
25481                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25482 678E           E8         DB12            call	_biosfn_set_cursor_shape
25483 6791           83C4                   04  add	sp,*4
25484                                           !BCC_EOS
25485                                           ! 3490   }
25486                                           ! 3491  write_word(0x40,0x85, lines);
25487                       00006794            .220:
25488                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25489 6794           8A46         04            mov	al,4[bp]
25490 6797           30E4                       xor	ah,ah
25491 6799           50                         push	ax
25492                                           ! Debug: list int = const $85 (used reg = )
25493 679A           B8                   0085  mov	ax,#$85
25494 679D           50                         push	ax
25495                                           ! Debug: list int = const $40 (used reg = )
25496 679E           B8                   0040  mov	ax,*$40
25497 67A1           50                         push	ax
25498                                           ! Debug: func () void = write_word+0 (used reg = )
25499 67A2           E8         160E            call	_write_word
25500 67A5           83C4                   06  add	sp,*6
25501                                           !BCC_EOS
25502                                           ! 3492  outb(crtc_addr, 0x12);
25503                                           ! Debug: list int = const $12 (used reg = )
25504 67A8           B8                   0012  mov	ax,*$12
25505 67AB           50                         push	ax
25506                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25507 67AC           FF76         FE            push	-2[bp]
25508                                           ! Debug: func () void = outb+0 (used reg = )
25509 67AF           E8         162F            call	_outb
25510 67B2           83C4                   04  add	sp,*4
25511                                           !BCC_EOS
25512                                           ! 3493  vde = inb(crtc_addr+1);
25513                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25514 67B5           8B46         FE            mov	ax,-2[bp]
25515                                           ! Debug: list unsigned int = ax+1 (used reg = )
25516 67B8           40                         inc	ax
25517 67B9           50                         push	ax
25518                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25519 67BA           E8         160E            call	_inb
25520 67BD           44                         inc	sp
25521 67BE           44                         inc	sp
25522                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25523 67BF           30E4                       xor	ah,ah
25524 67C1           8946         F8            mov	-8[bp],ax
25525                                           !BCC_EOS
25526                                           ! 3494  outb(crtc_addr, 0x07);
25527                                           ! Debug: list int = const 7 (used reg = )
25528 67C4           B8                   0007  mov	ax,*7
25529 67C7           50                         push	ax
25530                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25531 67C8           FF76         FE            push	-2[bp]
25532                                           ! Debug: func () void = outb+0 (used reg = )
25533 67CB           E8         1613            call	_outb
25534 67CE           83C4                   04  add	sp,*4
25535                                           !BCC_EOS
25536                                           ! 3495  ovl = inb(crtc_addr+1);
25537                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25538 67D1           8B46         FE            mov	ax,-2[bp]
25539                                           ! Debug: list unsigned int = ax+1 (used reg = )
25540 67D4           40                         inc	ax
25541 67D5           50                         push	ax
25542                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25543 67D6           E8         15F2            call	_inb
25544 67D9           44                         inc	sp
25545 67DA           44                         inc	sp
25546                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25547 67DB           8846         F6            mov	-$A[bp],al
25548                                           !BCC_EOS
25549                                           ! 3496  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25550                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25551 67DE           8A46         F6            mov	al,-$A[bp]
25552 67E1           24                     40  and	al,*$40
25553                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25554 67E3           30E4                       xor	ah,ah
25555 67E5           B1                     03  mov	cl,*3
25556 67E7           D3E0                       shl	ax,cl
25557 67E9           50                         push	ax
25558                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25559 67EA           8A46         F6            mov	al,-$A[bp]
25560 67ED           24                     02  and	al,*2
25561                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25562 67EF           30E4                       xor	ah,ah
25563 67F1           B1                     07  mov	cl,*7
25564 67F3           D3E0                       shl	ax,cl
25565                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25566 67F5           0346         F2            add	ax,-$E[bp]
25567 67F8           44                         inc	sp
25568 67F9           44                         inc	sp
25569                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25570                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25571 67FA           40                         inc	ax
25572 67FB           0346         F8            add	ax,-8[bp]
25573 67FE           8946         F8            mov	-8[bp],ax
25574                                           !BCC_EOS
25575                                           ! 3497  rows = vde / lines;
25576                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25577 6801           8A46         04            mov	al,4[bp]
25578 6804           30E4                       xor	ah,ah
25579 6806           89C3                       mov	bx,ax
25580 6808           8B46         F8            mov	ax,-8[bp]
25581 680B           E8         FEFA            call	idiv_u
25582                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25583 680E           8846         F5            mov	-$B[bp],al
25584                                           !BCC_EOS
25585                                           ! 3498  write_byte(0x40,0x84, rows-1);
25586                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25587 6811           8A46         F5            mov	al,-$B[bp]
25588 6814           30E4                       xor	ah,ah
25589                                           ! Debug: list unsigned int = ax-1 (used reg = )
25590 6816           48                         dec	ax
25591 6817           50                         push	ax
25592                                           ! Debug: list int = const $84 (used reg = )
25593 6818           B8                   0084  mov	ax,#$84
25594 681B           50                         push	ax
25595                                           ! Debug: list int = const $40 (used reg = )
25596 681C           B8                   0040  mov	ax,*$40
25597 681F           50                         push	ax
25598                                           ! Debug: func () void = write_byte+0 (used reg = )
25599 6820           E8         1578            call	_write_byte
25600 6823           83C4                   06  add	sp,*6
25601                                           !BCC_EOS
25602                                           ! 3499  cols = read_word(0x40,0x4A);
25603                                           ! Debug: list int = const $4A (used reg = )
25604 6826           B8                   004A  mov	ax,*$4A
25605 6829           50                         push	ax
25606                                           ! Debug: list int = const $40 (used reg = )
25607 682A           B8                   0040  mov	ax,*$40
25608 682D           50                         push	ax
25609                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25610 682E           E8         1557            call	_read_word
25611 6831           83C4                   04  add	sp,*4
25612                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25613 6834           8946         FC            mov	-4[bp],ax
25614                                           !BCC_EOS
25615                                           ! 3500  write_word(0x40,0x4C, rows * cols * 2);
25616                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25617 6837           8A46         F5            mov	al,-$B[bp]
25618 683A           30E4                       xor	ah,ah
25619 683C           8B4E         FC            mov	cx,-4[bp]
25620 683F           F7E9                       imul	cx
25621                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25622 6841           D1E0                       shl	ax,*1
25623                                           ! Debug: list unsigned int = ax+0 (used reg = )
25624 6843           50                         push	ax
25625                                           ! Debug: list int = const $4C (used reg = )
25626 6844           B8                   004C  mov	ax,*$4C
25627 6847           50                         push	ax
25628                                           ! Debug: list int = const $40 (used reg = )
25629 6848           B8                   0040  mov	ax,*$40
25630 684B           50                         push	ax
25631                                           ! Debug: func () void = write_word+0 (used reg = )
25632 684C           E8         1564            call	_write_word
25633 684F           83C4                   06  add	sp,*6
25634                                           !BCC_EOS
25635                                           ! 3501 }
25636 6852           89EC                       mov	sp,bp
25637 6854           5D                         pop	bp
25638 6855           C3                         ret
25639                                           ! 3502 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25640                                           ! Register BX used in function set_scan_lines
25641                       00006856            _biosfn_load_text_user_pat:
25642                                           !BCC_EOS
25643                                           !BCC_EOS
25644                                           !BCC_EOS
25645                                           !BCC_EOS
25646                                           !BCC_EOS
25647                                           !BCC_EOS
25648                                           !BCC_EOS
25649                                           ! 3503 {
25650                                           ! 3504  Bit16u blockaddr,dest,i,src;
25651                                           !BCC_EOS
25652                                           ! 3505  get_font_access();
25653 6856           55                         push	bp
25654 6857           89E5                       mov	bp,sp
25655 6859           83C4                   F8  add	sp,*-8
25656                                           ! Debug: func () void = get_font_access+0 (used reg = )
25657 685C           E8         FE57            call	_get_font_access
25658                                           !BCC_EOS
25659                                           ! 3506  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25660                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25661 685F           8A46         0E            mov	al,$E[bp]
25662 6862           24                     04  and	al,*4
25663                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25664 6864           30E4                       xor	ah,ah
25665 6866           88C4                       mov	ah,al
25666 6868           30C0                       xor	al,al
25667 686A           B1                     03  mov	cl,*3
25668 686C           D3E0                       shl	ax,cl
25669 686E           50                         push	ax
25670                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25671 686F           8A46         0E            mov	al,$E[bp]
25672 6872           24                     03  and	al,*3
25673                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25674 6874           30E4                       xor	ah,ah
25675 6876           88C4                       mov	ah,al
25676 6878           30C0                       xor	al,al
25677 687A           B1                     06  mov	cl,*6
25678 687C           D3E0                       shl	ax,cl
25679                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25680 687E           0346         F6            add	ax,-$A[bp]
25681 6881           44                         inc	sp
25682 6882           44                         inc	sp
25683                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25684 6883           8946         FE            mov	-2[bp],ax
25685                                           !BCC_EOS
25686                                           ! 3507  for(i=0;i<CX;i++)
25687                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25688 6886           31C0                       xor	ax,ax
25689 6888           8946         FA            mov	-6[bp],ax
25690                                           !BCC_EOS
25691                                           !BCC_EOS
25692                                           ! 3508   {
25693 688B           EB           44            jmp .223
25694                       0000688D            .224:
25695                                           ! 3509    src = BP + i * BH;
25696                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25697 688D           8A46         10            mov	al,$10[bp]
25698 6890           30E4                       xor	ah,ah
25699 6892           89C3                       mov	bx,ax
25700 6894           8B46         FA            mov	ax,-6[bp]
25701 6897           89D9                       mov	cx,bx
25702 6899           F7E9                       imul	cx
25703                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25704                                           ! Debug: expression subtree swapping
25705 689B           0346         08            add	ax,8[bp]
25706                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25707 689E           8946         F8            mov	-8[bp],ax
25708                                           !BCC_EOS
25709                                           ! 3510    dest = blockaddr + (DX + i) * 32;
25710                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25711 68A1           8B46         0C            mov	ax,$C[bp]
25712 68A4           0346         FA            add	ax,-6[bp]
25713                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25714 68A7           B1                     05  mov	cl,*5
25715 68A9           D3E0                       shl	ax,cl
25716                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25717                                           ! Debug: expression subtree swapping
25718 68AB           0346         FE            add	ax,-2[bp]
25719                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25720 68AE           8946         FC            mov	-4[bp],ax
25721                                           !BCC_EOS
25722                                           ! 3511    memcpyb(0xA000, dest, ES, src, BH);
25723                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25724 68B1           8A46         10            mov	al,$10[bp]
25725 68B4           30E4                       xor	ah,ah
25726 68B6           50                         push	ax
25727                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25728 68B7           FF76         F8            push	-8[bp]
25729                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25730 68BA           FF76         06            push	6[bp]
25731                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25732 68BD           FF76         FC            push	-4[bp]
25733                                           ! Debug: list unsigned int = const $A000 (used reg = )
25734 68C0           B8                   A000  mov	ax,#$A000
25735 68C3           50                         push	ax
25736                                           ! Debug: func () void = memcpyb+0 (used reg = )
25737 68C4           E8         144E            call	_memcpyb
25738 68C7           83C4                   0A  add	sp,*$A
25739                                           !BCC_EOS
25740                                           ! 3512   }
25741                                           ! 3513  release_font_access();
25742                       000068CA            .222:
25743                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25744 68CA           8B46         FA            mov	ax,-6[bp]
25745 68CD           40                         inc	ax
25746 68CE           8946         FA            mov	-6[bp],ax
25747                       000068D1            .223:
25748                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25749 68D1           8B46         FA            mov	ax,-6[bp]
25750 68D4           3B46         0A            cmp	ax,$A[bp]
25751 68D7           72           B4            jb 	.224
25752                       000068D9            .225:
25753                       000068D9            .221:
25754                                           ! Debug: func () void = release_font_access+0 (used reg = )
25755 68D9           E8         FDFD            call	_release_font_access
25756                                           !BCC_EOS
25757                                           ! 3514  if(AL>=0x10)
25758                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25759 68DC           8A46         04            mov	al,4[bp]
25760 68DF           3C                     10  cmp	al,*$10
25761 68E1           72           0B            jb  	.226
25762                       000068E3            .227:
25763                                           ! 3515   {
25764                                           ! 3516    set_scan_lines(BH);
25765                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25766 68E3           8A46         10            mov	al,$10[bp]
25767 68E6           30E4                       xor	ah,ah
25768 68E8           50                         push	ax
25769                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25770 68E9           E8         FE21            call	_set_scan_lines
25771 68EC           44                         inc	sp
25772 68ED           44                         inc	sp
25773                                           !BCC_EOS
25774                                           ! 3517   }
25775                                           ! 3518 }
25776                       000068EE            .226:
25777 68EE           89EC                       mov	sp,bp
25778 68F0           5D                         pop	bp
25779 68F1           C3                         ret
25780                                           ! 3519 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25781                                           ! Register BX used in function biosfn_load_text_user_pat
25782                       000068F2            _biosfn_load_text_8_14_pat:
25783                                           !BCC_EOS
25784                                           !BCC_EOS
25785                                           ! 3520 {
25786                                           ! 3521  Bit16u blockaddr,dest,i,src;
25787                                           !BCC_EOS
25788                                           ! 3522  get_font_access();
25789 68F2           55                         push	bp
25790 68F3           89E5                       mov	bp,sp
25791 68F5           83C4                   F8  add	sp,*-8
25792                                           ! Debug: func () void = get_font_access+0 (used reg = )
25793 68F8           E8         FDBB            call	_get_font_access
25794                                           !BCC_EOS
25795                                           ! 3523  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25796                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25797 68FB           8A46         06            mov	al,6[bp]
25798 68FE           24                     04  and	al,*4
25799                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25800 6900           30E4                       xor	ah,ah
25801 6902           88C4                       mov	ah,al
25802 6904           30C0                       xor	al,al
25803 6906           B1                     03  mov	cl,*3
25804 6908           D3E0                       shl	ax,cl
25805 690A           50                         push	ax
25806                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25807 690B           8A46         06            mov	al,6[bp]
25808 690E           24                     03  and	al,*3
25809                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25810 6910           30E4                       xor	ah,ah
25811 6912           88C4                       mov	ah,al
25812 6914           30C0                       xor	al,al
25813 6916           B1                     06  mov	cl,*6
25814 6918           D3E0                       shl	ax,cl
25815                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25816 691A           0346         F6            add	ax,-$A[bp]
25817 691D           44                         inc	sp
25818 691E           44                         inc	sp
25819                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25820 691F           8946         FE            mov	-2[bp],ax
25821                                           !BCC_EOS
25822                                           ! 3524  for(i=0;i<0x100;i++)
25823                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25824 6922           31C0                       xor	ax,ax
25825 6924           8946         FA            mov	-6[bp],ax
25826                                           !BCC_EOS
25827                                           !BCC_EOS
25828                                           ! 3525   {
25829 6927           EB           41            jmp .22A
25830                       00006929            .22B:
25831                                           ! 3526    src = i * 14;
25832                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25833 6929           8B46         FA            mov	ax,-6[bp]
25834 692C           89C2                       mov	dx,ax
25835 692E           B1                     03  mov	cl,*3
25836 6930           D3E0                       shl	ax,cl
25837 6932           29D0                       sub	ax,dx
25838 6934           D1E0                       shl	ax,*1
25839                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25840 6936           8946         F8            mov	-8[bp],ax
25841                                           !BCC_EOS
25842                                           ! 3527    dest = blockaddr + i * 32;
25843                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25844 6939           8B46         FA            mov	ax,-6[bp]
25845 693C           B1                     05  mov	cl,*5
25846 693E           D3E0                       shl	ax,cl
25847                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25848                                           ! Debug: expression subtree swapping
25849 6940           0346         FE            add	ax,-2[bp]
25850                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25851 6943           8946         FC            mov	-4[bp],ax
25852                                           !BCC_EOS
25853                                           ! 3528    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25854                                           ! Debug: list int = const $E (used reg = )
25855 6946           B8                   000E  mov	ax,*$E
25856 6949           50                         push	ax
25857                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25858 694A           8B5E         F8            mov	bx,-8[bp]
25859                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25860                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25861 694D           81C3                 176F  add	bx,#_vgafont14
25862 6951           53                         push	bx
25863                                           ! Debug: list unsigned int = const $C000 (used reg = )
25864 6952           B8                   C000  mov	ax,#$C000
25865 6955           50                         push	ax
25866                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25867 6956           FF76         FC            push	-4[bp]
25868                                           ! Debug: list unsigned int = const $A000 (used reg = )
25869 6959           B8                   A000  mov	ax,#$A000
25870 695C           50                         push	ax
25871                                           ! Debug: func () void = memcpyb+0 (used reg = )
25872 695D           E8         13B5            call	_memcpyb
25873 6960           83C4                   0A  add	sp,*$A
25874                                           !BCC_EOS
25875                                           ! 3529   }
25876                                           ! 3530  release_font_access();
25877                       00006963            .229:
25878                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25879 6963           8B46         FA            mov	ax,-6[bp]
25880 6966           40                         inc	ax
25881 6967           8946         FA            mov	-6[bp],ax
25882                       0000696A            .22A:
25883                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25884 696A           8B46         FA            mov	ax,-6[bp]
25885 696D           3D                   0100  cmp	ax,#$100
25886 6970           72           B7            jb 	.22B
25887                       00006972            .22C:
25888                       00006972            .228:
25889                                           ! Debug: func () void = release_font_access+0 (used reg = )
25890 6972           E8         FD64            call	_release_font_access
25891                                           !BCC_EOS
25892                                           ! 3531  if(AL>=0x10)
25893                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25894 6975           8A46         04            mov	al,4[bp]
25895 6978           3C                     10  cmp	al,*$10
25896 697A           72           09            jb  	.22D
25897                       0000697C            .22E:
25898                                           ! 3532   {
25899                                           ! 3533    set_scan_lines(14);
25900                                           ! Debug: list int = const $E (used reg = )
25901 697C           B8                   000E  mov	ax,*$E
25902 697F           50                         push	ax
25903                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25904 6980           E8         FD8A            call	_set_scan_lines
25905 6983           44                         inc	sp
25906 6984           44                         inc	sp
25907                                           !BCC_EOS
25908                                           ! 3534   }
25909                                           ! 3535 }
25910                       00006985            .22D:
25911 6985           89EC                       mov	sp,bp
25912 6987           5D                         pop	bp
25913 6988           C3                         ret
25914                                           ! 3536 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25915                                           ! Register BX used in function biosfn_load_text_8_14_pat
25916                       00006989            _biosfn_load_text_8_8_pat:
25917                                           !BCC_EOS
25918                                           !BCC_EOS
25919                                           ! 3537 {
25920                                           ! 3538  Bit16u blockaddr,dest,i,src;
25921                                           !BCC_EOS
25922                                           ! 3539  get_font_access();
25923 6989           55                         push	bp
25924 698A           89E5                       mov	bp,sp
25925 698C           83C4                   F8  add	sp,*-8
25926                                           ! Debug: func () void = get_font_access+0 (used reg = )
25927 698F           E8         FD24            call	_get_font_access
25928                                           !BCC_EOS
25929                                           ! 3540  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25930                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25931 6992           8A46         06            mov	al,6[bp]
25932 6995           24                     04  and	al,*4
25933                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25934 6997           30E4                       xor	ah,ah
25935 6999           88C4                       mov	ah,al
25936 699B           30C0                       xor	al,al
25937 699D           B1                     03  mov	cl,*3
25938 699F           D3E0                       shl	ax,cl
25939 69A1           50                         push	ax
25940                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25941 69A2           8A46         06            mov	al,6[bp]
25942 69A5           24                     03  and	al,*3
25943                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25944 69A7           30E4                       xor	ah,ah
25945 69A9           88C4                       mov	ah,al
25946 69AB           30C0                       xor	al,al
25947 69AD           B1                     06  mov	cl,*6
25948 69AF           D3E0                       shl	ax,cl
25949                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25950 69B1           0346         F6            add	ax,-$A[bp]
25951 69B4           44                         inc	sp
25952 69B5           44                         inc	sp
25953                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25954 69B6           8946         FE            mov	-2[bp],ax
25955                                           !BCC_EOS
25956                                           ! 3541  for(i=0;i<0x100;i++)
25957                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25958 69B9           31C0                       xor	ax,ax
25959 69BB           8946         FA            mov	-6[bp],ax
25960                                           !BCC_EOS
25961                                           !BCC_EOS
25962                                           ! 3542   {
25963 69BE           EB           3B            jmp .231
25964                       000069C0            .232:
25965                                           ! 3543    src = i * 8;
25966                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25967 69C0           8B46         FA            mov	ax,-6[bp]
25968 69C3           B1                     03  mov	cl,*3
25969 69C5           D3E0                       shl	ax,cl
25970                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25971 69C7           8946         F8            mov	-8[bp],ax
25972                                           !BCC_EOS
25973                                           ! 3544    dest = blockaddr + i * 32;
25974                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25975 69CA           8B46         FA            mov	ax,-6[bp]
25976 69CD           B1                     05  mov	cl,*5
25977 69CF           D3E0                       shl	ax,cl
25978                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25979                                           ! Debug: expression subtree swapping
25980 69D1           0346         FE            add	ax,-2[bp]
25981                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25982 69D4           8946         FC            mov	-4[bp],ax
25983                                           !BCC_EOS
25984                                           ! 3545    memcpyb(0xA000, dest, 0xC000,
25985                                           ! 3545  vgafont8+src, 8);
25986                                           ! Debug: list int = const 8 (used reg = )
25987 69D7           B8                   0008  mov	ax,*8
25988 69DA           50                         push	ax
25989                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25990 69DB           8B5E         F8            mov	bx,-8[bp]
25991                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25992                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25993 69DE           81C3                 0F6F  add	bx,#_vgafont8
25994 69E2           53                         push	bx
25995                                           ! Debug: list unsigned int = const $C000 (used reg = )
25996 69E3           B8                   C000  mov	ax,#$C000
25997 69E6           50                         push	ax
25998                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25999 69E7           FF76         FC            push	-4[bp]
26000                                           ! Debug: list unsigned int = const $A000 (used reg = )
26001 69EA           B8                   A000  mov	ax,#$A000
26002 69ED           50                         push	ax
26003                                           ! Debug: func () void = memcpyb+0 (used reg = )
26004 69EE           E8         1324            call	_memcpyb
26005 69F1           83C4                   0A  add	sp,*$A
26006                                           !BCC_EOS
26007                                           ! 3546   }
26008                                           ! 3547  release_font_access();
26009                       000069F4            .230:
26010                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26011 69F4           8B46         FA            mov	ax,-6[bp]
26012 69F7           40                         inc	ax
26013 69F8           8946         FA            mov	-6[bp],ax
26014                       000069FB            .231:
26015                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26016 69FB           8B46         FA            mov	ax,-6[bp]
26017 69FE           3D                   0100  cmp	ax,#$100
26018 6A01           72           BD            jb 	.232
26019                       00006A03            .233:
26020                       00006A03            .22F:
26021                                           ! Debug: func () void = release_font_access+0 (used reg = )
26022 6A03           E8         FCD3            call	_release_font_access
26023                                           !BCC_EOS
26024                                           ! 3548  if(AL>=0x10)
26025                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26026 6A06           8A46         04            mov	al,4[bp]
26027 6A09           3C                     10  cmp	al,*$10
26028 6A0B           72           09            jb  	.234
26029                       00006A0D            .235:
26030                                           ! 3549   {
26031                                           ! 3550    set_scan_lines(8);
26032                                           ! Debug: list int = const 8 (used reg = )
26033 6A0D           B8                   0008  mov	ax,*8
26034 6A10           50                         push	ax
26035                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26036 6A11           E8         FCF9            call	_set_scan_lines
26037 6A14           44                         inc	sp
26038 6A15           44                         inc	sp
26039                                           !BCC_EOS
26040                                           ! 3551   }
26041                                           ! 3552 }
26042                       00006A16            .234:
26043 6A16           89EC                       mov	sp,bp
26044 6A18           5D                         pop	bp
26045 6A19           C3                         ret
26046                                           ! 3553 #asm
26047                                           !BCC_ASM
26048                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
26049                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
26050                       00006A1A            biosfn_set_text_block_specifier:
26051 6A1A           50                           push ax
26052 6A1B           52                           push dx
26053 6A1C           BA                   03C4    mov dx, # 0x3c4
26054 6A1F           88DC                         mov ah, bl
26055 6A21           B0                     03    mov al, #0x03
26056 6A23           EF                           out dx, ax
26057 6A24           5A                           pop dx
26058 6A25           58                           pop ax
26059 6A26           C3                           ret
26060                                           ! 3564 endasm
26061                                           !BCC_ENDASM
26062                                           ! 3565 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
26063                                           ! Register BX used in function biosfn_load_text_8_8_pat
26064                       00006A27            _biosfn_load_text_8_16_pat:
26065                                           !BCC_EOS
26066                                           !BCC_EOS
26067                                           ! 3566 {
26068                                           ! 3567  Bit16u blockaddr,dest,i,src;
26069                                           !BCC_EOS
26070                                           ! 3568  get_font_access();
26071 6A27           55                         push	bp
26072 6A28           89E5                       mov	bp,sp
26073 6A2A           83C4                   F8  add	sp,*-8
26074                                           ! Debug: func () void = get_font_access+0 (used reg = )
26075 6A2D           E8         FC86            call	_get_font_access
26076                                           !BCC_EOS
26077                                           ! 3569  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
26078                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
26079 6A30           8A46         06            mov	al,6[bp]
26080 6A33           24                     04  and	al,*4
26081                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
26082 6A35           30E4                       xor	ah,ah
26083 6A37           88C4                       mov	ah,al
26084 6A39           30C0                       xor	al,al
26085 6A3B           B1                     03  mov	cl,*3
26086 6A3D           D3E0                       shl	ax,cl
26087 6A3F           50                         push	ax
26088                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
26089 6A40           8A46         06            mov	al,6[bp]
26090 6A43           24                     03  and	al,*3
26091                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
26092 6A45           30E4                       xor	ah,ah
26093 6A47           88C4                       mov	ah,al
26094 6A49           30C0                       xor	al,al
26095 6A4B           B1                     06  mov	cl,*6
26096 6A4D           D3E0                       shl	ax,cl
26097                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
26098 6A4F           0346         F6            add	ax,-$A[bp]
26099 6A52           44                         inc	sp
26100 6A53           44                         inc	sp
26101                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26102 6A54           8946         FE            mov	-2[bp],ax
26103                                           !BCC_EOS
26104                                           ! 3570  for(i=0;i<0x100;i++)
26105                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
26106 6A57           31C0                       xor	ax,ax
26107 6A59           8946         FA            mov	-6[bp],ax
26108                                           !BCC_EOS
26109                                           !BCC_EOS
26110                                           ! 3571   {
26111 6A5C           EB           3B            jmp .238
26112                       00006A5E            .239:
26113                                           ! 3572    src = i * 16;
26114                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
26115 6A5E           8B46         FA            mov	ax,-6[bp]
26116 6A61           B1                     04  mov	cl,*4
26117 6A63           D3E0                       shl	ax,cl
26118                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
26119 6A65           8946         F8            mov	-8[bp],ax
26120                                           !BCC_EOS
26121                                           ! 3573    dest = blockaddr + i * 32;
26122                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
26123 6A68           8B46         FA            mov	ax,-6[bp]
26124 6A6B           B1                     05  mov	cl,*5
26125 6A6D           D3E0                       shl	ax,cl
26126                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
26127                                           ! Debug: expression subtree swapping
26128 6A6F           0346         FE            add	ax,-2[bp]
26129                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
26130 6A72           8946         FC            mov	-4[bp],ax
26131                                           !BCC_EOS
26132                                           ! 3574    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
26133                                           ! Debug: list int = const $10 (used reg = )
26134 6A75           B8                   0010  mov	ax,*$10
26135 6A78           50                         push	ax
26136                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
26137 6A79           8B5E         F8            mov	bx,-8[bp]
26138                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
26139                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
26140 6A7C           81C3                 256F  add	bx,#_vgafont16
26141 6A80           53                         push	bx
26142                                           ! Debug: list unsigned int = const $C000 (used reg = )
26143 6A81           B8                   C000  mov	ax,#$C000
26144 6A84           50                         push	ax
26145                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
26146 6A85           FF76         FC            push	-4[bp]
26147                                           ! Debug: list unsigned int = const $A000 (used reg = )
26148 6A88           B8                   A000  mov	ax,#$A000
26149 6A8B           50                         push	ax
26150                                           ! Debug: func () void = memcpyb+0 (used reg = )
26151 6A8C           E8         1286            call	_memcpyb
26152 6A8F           83C4                   0A  add	sp,*$A
26153                                           !BCC_EOS
26154                                           ! 3575   }
26155                                           ! 3576  release_font_access();
26156                       00006A92            .237:
26157                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
26158 6A92           8B46         FA            mov	ax,-6[bp]
26159 6A95           40                         inc	ax
26160 6A96           8946         FA            mov	-6[bp],ax
26161                       00006A99            .238:
26162                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
26163 6A99           8B46         FA            mov	ax,-6[bp]
26164 6A9C           3D                   0100  cmp	ax,#$100
26165 6A9F           72           BD            jb 	.239
26166                       00006AA1            .23A:
26167                       00006AA1            .236:
26168                                           ! Debug: func () void = release_font_access+0 (used reg = )
26169 6AA1           E8         FC35            call	_release_font_access
26170                                           !BCC_EOS
26171                                           ! 3577  if(AL>=0x10)
26172                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
26173 6AA4           8A46         04            mov	al,4[bp]
26174 6AA7           3C                     10  cmp	al,*$10
26175 6AA9           72           09            jb  	.23B
26176                       00006AAB            .23C:
26177                                           ! 3578   {
26178                                           ! 3579    set_scan_lines(16);
26179                                           ! Debug: list int = const $10 (used reg = )
26180 6AAB           B8                   0010  mov	ax,*$10
26181 6AAE           50                         push	ax
26182                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
26183 6AAF           E8         FC5B            call	_set_scan_lines
26184 6AB2           44                         inc	sp
26185 6AB3           44                         inc	sp
26186                                           !BCC_EOS
26187                                           ! 3580   }
26188                                           ! 3581 }
26189                       00006AB4            .23B:
26190 6AB4           89EC                       mov	sp,bp
26191 6AB6           5D                         pop	bp
26192 6AB7           C3                         ret
26193                                           ! 3582 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
26194                                           ! Register BX used in function biosfn_load_text_8_16_pat
26195                       00006AB8            _biosfn_load_gfx_8_8_chars:
26196                                           !BCC_EOS
26197                                           !BCC_EOS
26198                                           ! 3583 {
26199                                           ! 3584  unimplemented();
26200 6AB8           55                         push	bp
26201 6AB9           89E5                       mov	bp,sp
26202                                           ! Debug: func () void = unimplemented+0 (used reg = )
26203 6ABB           E8         1346            call	_unimplemented
26204                                           !BCC_EOS
26205                                           ! 3585 }
26206 6ABE           5D                         pop	bp
26207 6ABF           C3                         ret
26208                                           ! 3586 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
26209                       00006AC0            _biosfn_load_gfx_user_chars:
26210                                           !BCC_EOS
26211                                           !BCC_EOS
26212                                           !BCC_EOS
26213                                           !BCC_EOS
26214                                           !BCC_EOS
26215                                           ! 3587 {
26216                                           ! 3588  unimplemented();
26217 6AC0           55                         push	bp
26218 6AC1           89E5                       mov	bp,sp
26219                                           ! Debug: func () void = unimplemented+0 (used reg = )
26220 6AC3           E8         133E            call	_unimplemented
26221                                           !BCC_EOS
26222                                           ! 3589 }
26223 6AC6           5D                         pop	bp
26224 6AC7           C3                         ret
26225                                           ! 3590 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
26226                       00006AC8            _biosfn_load_gfx_8_14_chars:
26227                                           !BCC_EOS
26228                                           ! 3591 {
26229                                           ! 3592  unimplemented();
26230 6AC8           55                         push	bp
26231 6AC9           89E5                       mov	bp,sp
26232                                           ! Debug: func () void = unimplemented+0 (used reg = )
26233 6ACB           E8         1336            call	_unimplemented
26234                                           !BCC_EOS
26235                                           ! 3593 }
26236 6ACE           5D                         pop	bp
26237 6ACF           C3                         ret
26238                                           ! 3594 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
26239                       00006AD0            _biosfn_load_gfx_8_8_dd_chars:
26240                                           !BCC_EOS
26241                                           ! 3595 {
26242                                           ! 3596  unimplemented();
26243 6AD0           55                         push	bp
26244 6AD1           89E5                       mov	bp,sp
26245                                           ! Debug: func () void = unimplemented+0 (used reg = )
26246 6AD3           E8         132E            call	_unimplemented
26247                                           !BCC_EOS
26248                                           ! 3597 }
26249 6AD6           5D                         pop	bp
26250 6AD7           C3                         ret
26251                                           ! 3598 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
26252                       00006AD8            _biosfn_load_gfx_8_16_chars:
26253                                           !BCC_EOS
26254                                           ! 3599 {
26255                                           ! 3600  unimplemented();
26256 6AD8           55                         push	bp
26257 6AD9           89E5                       mov	bp,sp
26258                                           ! Debug: func () void = unimplemented+0 (used reg = )
26259 6ADB           E8         1326            call	_unimplemented
26260                                           !BCC_EOS
26261                                           ! 3601 }
26262 6ADE           5D                         pop	bp
26263 6ADF           C3                         ret
26264                                           ! 3602 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
26265                                           ! 3603 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
26266                       00006AE0            _biosfn_get_font_info:
26267                                           !BCC_EOS
26268                                           !BCC_EOS
26269                                           !BCC_EOS
26270                                           !BCC_EOS
26271                                           !BCC_EOS
26272                                           ! 3604 {Bit16u ss=get_SS();
26273 6AE0           55                         push	bp
26274 6AE1           89E5                       mov	bp,sp
26275 6AE3           4C                         dec	sp
26276 6AE4           4C                         dec	sp
26277                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
26278 6AE5           E8         1319            call	_get_SS
26279                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
26280 6AE8           8946         FE            mov	-2[bp],ax
26281                                           !BCC_EOS
26282                                           ! 3605  switch(BH)
26283 6AEB           8A46         04            mov	al,4[bp]
26284                                           ! 3606   {case 0x00:
26285 6AEE           E9         0154            br 	.23F
26286                                           ! 3607     write_word(ss,ES,read_word(0x00,0x1f*4));
26287                       00006AF1            .240:
26288                                           ! Debug: list int = const $7C (used reg = )
26289 6AF1           B8                   007C  mov	ax,*$7C
26290 6AF4           50                         push	ax
26291                                           ! Debug: list int = const 0 (used reg = )
26292 6AF5           31C0                       xor	ax,ax
26293 6AF7           50                         push	ax
26294                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26295 6AF8           E8         128D            call	_read_word
26296 6AFB           83C4                   04  add	sp,*4
26297                                           ! Debug: list unsigned short = ax+0 (used reg = )
26298 6AFE           50                         push	ax
26299                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26300 6AFF           FF76         06            push	6[bp]
26301                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26302 6B02           FF76         FE            push	-2[bp]
26303                                           ! Debug: func () void = write_word+0 (used reg = )
26304 6B05           E8         12AB            call	_write_word
26305 6B08           83C4                   06  add	sp,*6
26306                                           !BCC_EOS
26307                                           ! 3608     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
26308                                           ! Debug: list int = const $7E (used reg = )
26309 6B0B           B8                   007E  mov	ax,*$7E
26310 6B0E           50                         push	ax
26311                                           ! Debug: list int = const 0 (used reg = )
26312 6B0F           31C0                       xor	ax,ax
26313 6B11           50                         push	ax
26314                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26315 6B12           E8         1273            call	_read_word
26316 6B15           83C4                   04  add	sp,*4
26317                                           ! Debug: list unsigned short = ax+0 (used reg = )
26318 6B18           50                         push	ax
26319                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26320 6B19           FF76         08            push	8[bp]
26321                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26322 6B1C           FF76         FE            push	-2[bp]
26323                                           ! Debug: func () void = write_word+0 (used reg = )
26324 6B1F           E8         1291            call	_write_word
26325 6B22           83C4                   06  add	sp,*6
26326                                           !BCC_EOS
26327                                           ! 3609     break;
26328 6B25           E9         0142            br 	.23D
26329                                           !BCC_EOS
26330                                           ! 3610    case 0x01:
26331                                           ! 3611     write_word(ss,ES,read_word(0x00,0x43*4));
26332                       00006B28            .241:
26333                                           ! Debug: list int = const $10C (used reg = )
26334 6B28           B8                   010C  mov	ax,#$10C
26335 6B2B           50                         push	ax
26336                                           ! Debug: list int = const 0 (used reg = )
26337 6B2C           31C0                       xor	ax,ax
26338 6B2E           50                         push	ax
26339                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26340 6B2F           E8         1256            call	_read_word
26341 6B32           83C4                   04  add	sp,*4
26342                                           ! Debug: list unsigned short = ax+0 (used reg = )
26343 6B35           50                         push	ax
26344                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26345 6B36           FF76         06            push	6[bp]
26346                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26347 6B39           FF76         FE            push	-2[bp]
26348                                           ! Debug: func () void = write_word+0 (used reg = )
26349 6B3C           E8         1274            call	_write_word
26350 6B3F           83C4                   06  add	sp,*6
26351                                           !BCC_EOS
26352                                           ! 3612     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
26353                                           ! Debug: list int = const $10E (used reg = )
26354 6B42           B8                   010E  mov	ax,#$10E
26355 6B45           50                         push	ax
26356                                           ! Debug: list int = const 0 (used reg = )
26357 6B46           31C0                       xor	ax,ax
26358 6B48           50                         push	ax
26359                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
26360 6B49           E8         123C            call	_read_word
26361 6B4C           83C4                   04  add	sp,*4
26362                                           ! Debug: list unsigned short = ax+0 (used reg = )
26363 6B4F           50                         push	ax
26364                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26365 6B50           FF76         08            push	8[bp]
26366                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26367 6B53           FF76         FE            push	-2[bp]
26368                                           ! Debug: func () void = write_word+0 (used reg = )
26369 6B56           E8         125A            call	_write_word
26370 6B59           83C4                   06  add	sp,*6
26371                                           !BCC_EOS
26372                                           ! 3613     break;
26373 6B5C           E9         010B            br 	.23D
26374                                           !BCC_EOS
26375                                           ! 3614    case 0x02:
26376                                           ! 3615     write_word(ss,ES,0xC000);
26377                       00006B5F            .242:
26378                                           ! Debug: list unsigned int = const $C000 (used reg = )
26379 6B5F           B8                   C000  mov	ax,#$C000
26380 6B62           50                         push	ax
26381                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26382 6B63           FF76         06            push	6[bp]
26383                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26384 6B66           FF76         FE            push	-2[bp]
26385                                           ! Debug: func () void = write_word+0 (used reg = )
26386 6B69           E8         1247            call	_write_word
26387 6B6C           83C4                   06  add	sp,*6
26388                                           !BCC_EOS
26389                                           ! 3616     write_word(ss,BP,vgafont14);
26390                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
26391 6B6F           BB                   176F  mov	bx,#_vgafont14
26392 6B72           53                         push	bx
26393                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26394 6B73           FF76         08            push	8[bp]
26395                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26396 6B76           FF76         FE            push	-2[bp]
26397                                           ! Debug: func () void = write_word+0 (used reg = )
26398 6B79           E8         1237            call	_write_word
26399 6B7C           83C4                   06  add	sp,*6
26400                                           !BCC_EOS
26401                                           ! 3617     break;
26402 6B7F           E9         00E8            br 	.23D
26403                                           !BCC_EOS
26404                                           ! 3618    case 0x03:
26405                                           ! 3619     write_word(ss,ES,0xC000);
26406                       00006B82            .243:
26407                                           ! Debug: list unsigned int = const $C000 (used reg = )
26408 6B82           B8                   C000  mov	ax,#$C000
26409 6B85           50                         push	ax
26410                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26411 6B86           FF76         06            push	6[bp]
26412                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26413 6B89           FF76         FE            push	-2[bp]
26414                                           ! Debug: func () void = write_word+0 (used reg = )
26415 6B8C           E8         1224            call	_write_word
26416 6B8F           83C4                   06  add	sp,*6
26417                                           !BCC_EOS
26418                                           ! 3620     write_word(ss,BP,vgafont8);
26419                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
26420 6B92           BB                   0F6F  mov	bx,#_vgafont8
26421 6B95           53                         push	bx
26422                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26423 6B96           FF76         08            push	8[bp]
26424                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26425 6B99           FF76         FE            push	-2[bp]
26426                                           ! Debug: func () void = write_word+0 (used reg = )
26427 6B9C           E8         1214            call	_write_word
26428 6B9F           83C4                   06  add	sp,*6
26429                                           !BCC_EOS
26430                                           ! 3621     break;
26431 6BA2           E9         00C5            br 	.23D
26432                                           !BCC_EOS
26433                                           ! 3622    case 0x04:
26434                                           ! 3623     write_word(ss,ES,0xC000);
26435                       00006BA5            .244:
26436                                           ! Debug: list unsigned int = const $C000 (used reg = )
26437 6BA5           B8                   C000  mov	ax,#$C000
26438 6BA8           50                         push	ax
26439                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26440 6BA9           FF76         06            push	6[bp]
26441                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26442 6BAC           FF76         FE            push	-2[bp]
26443                                           ! Debug: func () void = write_word+0 (used reg = )
26444 6BAF           E8         1201            call	_write_word
26445 6BB2           83C4                   06  add	sp,*6
26446                                           !BCC_EOS
26447                                           ! 3624     write_word(ss,BP,vgafont8+128*8);
26448                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26449 6BB5           BB                   136F  mov	bx,#_vgafont8+$400
26450 6BB8           53                         push	bx
26451                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26452 6BB9           FF76         08            push	8[bp]
26453                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26454 6BBC           FF76         FE            push	-2[bp]
26455                                           ! Debug: func () void = write_word+0 (used reg = )
26456 6BBF           E8         11F1            call	_write_word
26457 6BC2           83C4                   06  add	sp,*6
26458                                           !BCC_EOS
26459                                           ! 3625     break;
26460 6BC5           E9         00A2            br 	.23D
26461                                           !BCC_EOS
26462                                           ! 3626    case 0x05:
26463                                           ! 3627     write_word(ss,ES,0xC000);
26464                       00006BC8            .245:
26465                                           ! Debug: list unsigned int = const $C000 (used reg = )
26466 6BC8           B8                   C000  mov	ax,#$C000
26467 6BCB           50                         push	ax
26468                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26469 6BCC           FF76         06            push	6[bp]
26470                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26471 6BCF           FF76         FE            push	-2[bp]
26472                                           ! Debug: func () void = write_word+0 (used reg = )
26473 6BD2           E8         11DE            call	_write_word
26474 6BD5           83C4                   06  add	sp,*6
26475                                           !BCC_EOS
26476                                           ! 3628     write_word(ss,BP,vgafont14alt);
26477                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26478 6BD8           BB                   356F  mov	bx,#_vgafont14alt
26479 6BDB           53                         push	bx
26480                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26481 6BDC           FF76         08            push	8[bp]
26482                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26483 6BDF           FF76         FE            push	-2[bp]
26484                                           ! Debug: func () void = write_word+0 (used reg = )
26485 6BE2           E8         11CE            call	_write_word
26486 6BE5           83C4                   06  add	sp,*6
26487                                           !BCC_EOS
26488                                           ! 3629     break;
26489 6BE8           E9         007F            jmp .23D
26490                                           !BCC_EOS
26491                                           ! 3630    case 0x06:
26492                                           ! 3631     write_word(ss,ES,0xC000);
26493                       00006BEB            .246:
26494                                           ! Debug: list unsigned int = const $C000 (used reg = )
26495 6BEB           B8                   C000  mov	ax,#$C000
26496 6BEE           50                         push	ax
26497                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26498 6BEF           FF76         06            push	6[bp]
26499                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26500 6BF2           FF76         FE            push	-2[bp]
26501                                           ! Debug: func () void = write_word+0 (used reg = )
26502 6BF5           E8         11BB            call	_write_word
26503 6BF8           83C4                   06  add	sp,*6
26504                                           !BCC_EOS
26505                                           ! 3632     write_word(ss,BP,vgafont16);
26506                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26507 6BFB           BB                   256F  mov	bx,#_vgafont16
26508 6BFE           53                         push	bx
26509                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26510 6BFF           FF76         08            push	8[bp]
26511                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26512 6C02           FF76         FE            push	-2[bp]
26513                                           ! Debug: func () void = write_word+0 (used reg = )
26514 6C05           E8         11AB            call	_write_word
26515 6C08           83C4                   06  add	sp,*6
26516                                           !BCC_EOS
26517                                           ! 3633     break;
26518 6C0B           EB           5D            jmp .23D
26519                                           !BCC_EOS
26520                                           ! 3634    case 0x07:
26521                                           ! 3635     write_word(ss,ES,0xC000);
26522                       00006C0D            .247:
26523                                           ! Debug: list unsigned int = const $C000 (used reg = )
26524 6C0D           B8                   C000  mov	ax,#$C000
26525 6C10           50                         push	ax
26526                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26527 6C11           FF76         06            push	6[bp]
26528                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26529 6C14           FF76         FE            push	-2[bp]
26530                                           ! Debug: func () void = write_word+0 (used reg = )
26531 6C17           E8         1199            call	_write_word
26532 6C1A           83C4                   06  add	sp,*6
26533                                           !BCC_EOS
26534                                           ! 3636     write_word(ss,BP,vgafont16alt);
26535                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26536 6C1D           BB                   3570  mov	bx,#_vgafont16alt
26537 6C20           53                         push	bx
26538                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26539 6C21           FF76         08            push	8[bp]
26540                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26541 6C24           FF76         FE            push	-2[bp]
26542                                           ! Debug: func () void = write_word+0 (used reg = )
26543 6C27           E8         1189            call	_write_word
26544 6C2A           83C4                   06  add	sp,*6
26545                                           !BCC_EOS
26546                                           ! 3637     break;
26547 6C2D           EB           3B            jmp .23D
26548                                           !BCC_EOS
26549                                           ! 3638    default:
26550                                           ! 3639      printf("Get font info BH(%02x) was discarded\n",BH)
26551                       00006C2F            .248:
26552                                           ! 3639 ;
26553                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26554 6C2F           8A46         04            mov	al,4[bp]
26555 6C32           30E4                       xor	ah,ah
26556 6C34           50                         push	ax
26557                                           ! Debug: list * char = .249+0 (used reg = )
26558 6C35           BB                   A119  mov	bx,#.249
26559 6C38           53                         push	bx
26560                                           ! Debug: func () void = printf+0 (used reg = )
26561 6C39           E8         11E4            call	_printf
26562 6C3C           83C4                   04  add	sp,*4
26563                                           !BCC_EOS
26564                                           ! 3640     return;
26565 6C3F           89EC                       mov	sp,bp
26566 6C41           5D                         pop	bp
26567 6C42           C3                         ret
26568                                           !BCC_EOS
26569                                           ! 3641   }
26570                                           ! 3642  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26571 6C43           EB           25            jmp .23D
26572                       00006C45            .23F:
26573 6C45           2C                     00  sub	al,*0
26574 6C47           72           E6            jb 	.248
26575 6C49           3C                     07  cmp	al,*7
26576 6C4B           77           1B            ja  	.24A
26577 6C4D           30E4                       xor	ah,ah
26578 6C4F           D1E0                       shl	ax,*1
26579 6C51           89C3                       mov	bx,ax
26580 6C53           2E                         seg	cs
26581 6C54           FFA7       6C58            br	.24B[bx]
26582                       00006C58            .24B:
26583 6C58                      6AF1            .word	.240
26584 6C5A                      6B28            .word	.241
26585 6C5C                      6B5F            .word	.242
26586 6C5E                      6B82            .word	.243
26587 6C60                      6BA5            .word	.244
26588 6C62                      6BC8            .word	.245
26589 6C64                      6BEB            .word	.246
26590 6C66                      6C0D            .word	.247
26591                       00006C68            .24A:
26592 6C68           EB           C5            jmp	.248
26593                       00006C6A            .23D:
26594                       FFFFFFFC            ..FFF5	=	-4
26595                                           ! Debug: list int = const $85 (used reg = )
26596 6C6A           B8                   0085  mov	ax,#$85
26597 6C6D           50                         push	ax
26598                                           ! Debug: list int = const $40 (used reg = )
26599 6C6E           B8                   0040  mov	ax,*$40
26600 6C71           50                         push	ax
26601                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26602 6C72           E8         1100            call	_read_byte
26603 6C75           83C4                   04  add	sp,*4
26604                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26605 6C78           30E4                       xor	ah,ah
26606                                           ! Debug: list unsigned short = ax+0 (used reg = )
26607 6C7A           50                         push	ax
26608                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26609 6C7B           FF76         0A            push	$A[bp]
26610                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26611 6C7E           FF76         FE            push	-2[bp]
26612                                           ! Debug: func () void = write_word+0 (used reg = )
26613 6C81           E8         112F            call	_write_word
26614 6C84           83C4                   06  add	sp,*6
26615                                           !BCC_EOS
26616                                           ! 3643  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26617                                           ! Debug: list int = const $84 (used reg = )
26618 6C87           B8                   0084  mov	ax,#$84
26619 6C8A           50                         push	ax
26620                                           ! Debug: list int = const $40 (used reg = )
26621 6C8B           B8                   0040  mov	ax,*$40
26622 6C8E           50                         push	ax
26623                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26624 6C8F           E8         10E3            call	_read_byte
26625 6C92           83C4                   04  add	sp,*4
26626                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26627 6C95           30E4                       xor	ah,ah
26628                                           ! Debug: list unsigned short = ax+0 (used reg = )
26629 6C97           50                         push	ax
26630                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26631 6C98           FF76         0C            push	$C[bp]
26632                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26633 6C9B           FF76         FE            push	-2[bp]
26634                                           ! Debug: func () void = write_word+0 (used reg = )
26635 6C9E           E8         1112            call	_write_word
26636 6CA1           83C4                   06  add	sp,*6
26637                                           !BCC_EOS
26638                                           ! 3644 }
26639 6CA4           89EC                       mov	sp,bp
26640 6CA6           5D                         pop	bp
26641 6CA7           C3                         ret
26642                                           ! 3645 #asm
26643                                           !BCC_ASM
26644                       00000006            _biosfn_get_font_info.BP	set	6
26645                       00000002            _biosfn_get_font_info.BH	set	2
26646                       00000008            _biosfn_get_font_info.CX	set	8
26647                       0000000A            _biosfn_get_font_info.DX	set	$A
26648                       00000004            _biosfn_get_font_info.ES	set	4
26649                       00006CA8            biosfn_get_ega_info:
26650 6CA8           1E                           push ds
26651 6CA9           50                           push ax
26652 6CAA           B8                   0040    mov ax, # 0x40
26653 6CAD           8ED8                         mov ds, ax
26654 6CAF           30ED                         xor ch, ch
26655 6CB1           BB                   0088    mov bx, # 0x88
26656 6CB4           8A0F                         mov cl, [bx]
26657 6CB6           80E1                   0F    and cl, #0x0f
26658 6CB9           BB                   0063    mov bx, # 0x63
26659 6CBC           8B07                         mov ax, [bx]
26660 6CBE           BB                   0003    mov bx, #0x0003
26661 6CC1           3D                   03B4    cmp ax, # 0x3b4
26662 6CC4           75           02              jne mode_ega_color
26663 6CC6           B7                     01    mov bh, #0x01
26664                       00006CC8            mode_ega_color:
26665 6CC8           58                           pop ax
26666 6CC9           1F                           pop ds
26667 6CCA           C3                           ret
26668                                           ! 3665 endasm
26669                                           !BCC_ENDASM
26670                                           ! 3666 static void biosfn_alternate_prtsc()
26671                                           ! Register BX used in function biosfn_get_font_info
26672                                           ! 3667 {
26673                       00006CCB            _biosfn_alternate_prtsc:
26674                                           ! 3668  unimplemented();
26675 6CCB           55                         push	bp
26676 6CCC           89E5                       mov	bp,sp
26677                                           ! Debug: func () void = unimplemented+0 (used reg = )
26678 6CCE           E8         1133            call	_unimplemented
26679                                           !BCC_EOS
26680                                           ! 3669 }
26681 6CD1           5D                         pop	bp
26682 6CD2           C3                         ret
26683                                           ! 3670 #asm
26684                                           !BCC_ASM
26685                       00006CD3            biosfn_select_vert_res:
26686                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26687 6CD3           1E                           push ds
26688 6CD4           53                           push bx
26689 6CD5           52                           push dx
26690 6CD6           88C2                         mov dl, al
26691 6CD8           B8                   0040    mov ax, # 0x40
26692 6CDB           8ED8                         mov ds, ax
26693 6CDD           BB                   0089    mov bx, # 0x89
26694 6CE0           8A07                         mov al, [bx]
26695 6CE2           BB                   0088    mov bx, # 0x88
26696 6CE5           8A27                         mov ah, [bx]
26697 6CE7           80FA                   01    cmp dl, #0x01
26698 6CEA           74           24              je vert_res_350
26699 6CEC           72           2C              jb vert_res_200
26700 6CEE           80FA                   02    cmp dl, #0x02
26701 6CF1           74           11              je vert_res_400
26702 6CF3           88D0                         mov al, dl
26703 6CF5           30E4                         xor ah, ah
26704 6CF7           50                           push ax
26705 6CF8           BB                   6D35    mov bx, #msg_vert_res
26706 6CFB           53                           push bx
26707 6CFC           E8         1121              call _printf
26708 6CFF           83C4                   04    add sp, #4
26709 6D02           EB           2A              jmp set_retcode
26710                       00006D04            vert_res_400:
26711                                             ; reset modeset ctl bit 7 and set bit 4
26712                                             ; set switches bit 3-0 to 0x09
26713 6D04           24                     7F    and al, #0x7f
26714 6D06           0C                     10    or al, #0x10
26715 6D08           80E4                   F0    and ah, #0xf0
26716 6D0B           80CC                   09    or ah, #0x09
26717 6D0E           75           14              jnz set_vert_res
26718                       00006D10            vert_res_350:
26719                                             ; reset modeset ctl bit 7 and bit 4
26720                                             ; set switches bit 3-0 to 0x09
26721 6D10           24                     6F    and al, #0x6f
26722 6D12           80E4                   F0    and ah, #0xf0
26723 6D15           80CC                   09    or ah, #0x09
26724 6D18           75           0A              jnz set_vert_res
26725                       00006D1A            vert_res_200:
26726                                             ; set modeset ctl bit 7 and reset bit 4
26727                                             ; set switches bit 3-0 to 0x08
26728 6D1A           24                     EF    and al, #0xef
26729 6D1C           0C                     80    or al, #0x80
26730 6D1E           80E4                   F0    and ah, #0xf0
26731 6D21           80CC                   08    or ah, #0x08
26732                       00006D24            set_vert_res:
26733 6D24           BB                   0089    mov bx, # 0x89
26734 6D27           8807                         mov [bx], al
26735 6D29           BB                   0088    mov bx, # 0x88
26736 6D2C           8827                         mov [bx], ah
26737                       00006D2E            set_retcode:
26738 6D2E           B8                   1212    mov ax, #0x1212
26739 6D31           5A                           pop dx
26740 6D32           5B                           pop bx
26741 6D33           1F                           pop ds
26742 6D34           C3                           ret
26743                       00006D35            msg_vert_res:
26744 6D35                        53            .ascii "Select vert res (%02x) was discarded"
26745 6D59                        0D            .byte 0x0d,0x0a,0x00
26746                       00006D5C            biosfn_enable_default_palette_loading:
26747 6D5C           1E                           push ds
26748 6D5D           53                           push bx
26749 6D5E           52                           push dx
26750 6D5F           88C2                         mov dl, al
26751 6D61           80E2                   01    and dl, #0x01
26752 6D64           C0E2                   03    shl dl, 3
26753 6D67           B8                   0040    mov ax, # 0x40
26754 6D6A           8ED8                         mov ds, ax
26755 6D6C           BB                   0089    mov bx, # 0x89
26756 6D6F           8A07                         mov al, [bx]
26757 6D71           24                     F7    and al, #0xf7
26758 6D73           08D0                         or al, dl
26759 6D75           8807                         mov [bx], al
26760 6D77           B8                   1212    mov ax, #0x1212
26761 6D7A           5A                           pop dx
26762 6D7B           5B                           pop bx
26763 6D7C           1F                           pop ds
26764 6D7D           C3                           ret
26765                       00006D7E            biosfn_enable_video_addressing:
26766 6D7E           53                           push bx
26767 6D7F           52                           push dx
26768 6D80           88C3                         mov bl, al
26769 6D82           80E3                   01    and bl, #0x01
26770 6D85           80F3                   01    xor bl, #0x01
26771 6D88           D0E3                         shl bl, 1
26772 6D8A           BA                   03CC    mov dx, # 0x3cc
26773 6D8D           EC                           in al, dx
26774 6D8E           24                     FD    and al, #0xfd
26775 6D90           08D8                         or al, bl
26776 6D92           BA                   03C2    mov dx, # 0x3c2
26777 6D95           EE                           out dx, al
26778 6D96           B8                   1212    mov ax, #0x1212
26779 6D99           5A                           pop dx
26780 6D9A           5B                           pop bx
26781 6D9B           C3                           ret
26782                       00006D9C            biosfn_enable_grayscale_summing:
26783 6D9C           1E                           push ds
26784 6D9D           53                           push bx
26785 6D9E           52                           push dx
26786 6D9F           88C2                         mov dl, al
26787 6DA1           80E2                   01    and dl, #0x01
26788 6DA4           80F2                   01    xor dl, #0x01
26789 6DA7           D0E2                         shl dl, 1
26790 6DA9           B8                   0040    mov ax, # 0x40
26791 6DAC           8ED8                         mov ds, ax
26792 6DAE           BB                   0089    mov bx, # 0x89
26793 6DB1           8A07                         mov al, [bx]
26794 6DB3           24                     FD    and al, #0xfd
26795 6DB5           08D0                         or al, dl
26796 6DB7           8807                         mov [bx], al
26797 6DB9           B8                   1212    mov ax, #0x1212
26798 6DBC           5A                           pop dx
26799 6DBD           5B                           pop bx
26800 6DBE           1F                           pop ds
26801 6DBF           C3                           ret
26802                       00006DC0            biosfn_enable_cursor_emulation:
26803 6DC0           1E                           push ds
26804 6DC1           53                           push bx
26805 6DC2           52                           push dx
26806 6DC3           88C2                         mov dl, al
26807 6DC5           80E2                   01    and dl, #0x01
26808 6DC8           80F2                   01    xor dl, #0x01
26809 6DCB           B8                   0040    mov ax, # 0x40
26810 6DCE           8ED8                         mov ds, ax
26811 6DD0           BB                   0089    mov bx, # 0x89
26812 6DD3           8A07                         mov al, [bx]
26813 6DD5           24                     FE    and al, #0xfe
26814 6DD7           08D0                         or al, dl
26815 6DD9           8807                         mov [bx], al
26816 6DDB           B8                   1212    mov ax, #0x1212
26817 6DDE           5A                           pop dx
26818 6DDF           5B                           pop bx
26819 6DE0           1F                           pop ds
26820 6DE1           C3                           ret
26821                                           ! 3807 endasm
26822                                           !BCC_ENDASM
26823                                           ! 3808 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26824                       00006DE2            _biosfn_switch_video_interface:
26825                                           !BCC_EOS
26826                                           !BCC_EOS
26827                                           !BCC_EOS
26828                                           ! 3809 {
26829                                           ! 3810  unimplemented();
26830 6DE2           55                         push	bp
26831 6DE3           89E5                       mov	bp,sp
26832                                           ! Debug: func () void = unimplemented+0 (used reg = )
26833 6DE5           E8         101C            call	_unimplemented
26834                                           !BCC_EOS
26835                                           ! 3811 }
26836 6DE8           5D                         pop	bp
26837 6DE9           C3                         ret
26838                                           ! 3812 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26839                       00006DEA            _biosfn_enable_video_refresh_control:
26840                                           !BCC_EOS
26841                                           ! 3813 {
26842                                           ! 3814  unimplemented();
26843 6DEA           55                         push	bp
26844 6DEB           89E5                       mov	bp,sp
26845                                           ! Debug: func () void = unimplemented+0 (used reg = )
26846 6DED           E8         1014            call	_unimplemented
26847                                           !BCC_EOS
26848                                           ! 3815 }
26849 6DF0           5D                         pop	bp
26850 6DF1           C3                         ret
26851                                           ! 3816 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26852                                           ! 3817 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26853                       00006DF2            _biosfn_write_string:
26854                                           !BCC_EOS
26855                                           !BCC_EOS
26856                                           !BCC_EOS
26857                                           !BCC_EOS
26858                                           !BCC_EOS
26859                                           !BCC_EOS
26860                                           !BCC_EOS
26861                                           !BCC_EOS
26862                                           ! 3818 {
26863                                           ! 3819  Bit16u newcurs,oldcurs,dummy;
26864                                           !BCC_EOS
26865                                           ! 3820  Bit8u car,carattr;
26866                                           !BCC_EOS
26867                                           ! 3821  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26868 6DF2           55                         push	bp
26869 6DF3           89E5                       mov	bp,sp
26870 6DF5           83C4                   F8  add	sp,*-8
26871                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26872 6DF8           8D5E         FC            lea	bx,-4[bp]
26873 6DFB           53                         push	bx
26874                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26875 6DFC           8D5E         FA            lea	bx,-6[bp]
26876 6DFF           53                         push	bx
26877                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26878 6E00           8A46         06            mov	al,6[bp]
26879 6E03           30E4                       xor	ah,ah
26880 6E05           50                         push	ax
26881                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26882 6E06           E8         D6B5            call	_biosfn_get_cursor_pos
26883 6E09           83C4                   06  add	sp,*6
26884                                           !BCC_EOS
26885                                           ! 3822  if(row==0xff)
26886                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26887 6E0C           8A46         0C            mov	al,$C[bp]
26888 6E0F           3C                     FF  cmp	al,#$FF
26889 6E11           75           12            jne 	.24C
26890                       00006E13            .24D:
26891                                           ! 3823   {col=oldcurs&0x00ff;
26892                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26893 6E13           8A46         FC            mov	al,-4[bp]
26894                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26895 6E16           8846         0E            mov	$E[bp],al
26896                                           !BCC_EOS
26897                                           ! 3824    row=(oldcurs&0xff00)>>8;
26898                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26899 6E19           8B46         FC            mov	ax,-4[bp]
26900 6E1C           30C0                       xor	al,al
26901                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26902 6E1E           88E0                       mov	al,ah
26903 6E20           30E4                       xor	ah,ah
26904                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26905 6E22           8846         0C            mov	$C[bp],al
26906                                           !BCC_EOS
26907                                           ! 3825   }
26908                                           ! 3826  newcurs=row; newcurs<<=8; newcurs+=col;
26909                       00006E25            .24C:
26910                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26911 6E25           8A46         0C            mov	al,$C[bp]
26912 6E28           30E4                       xor	ah,ah
26913 6E2A           8946         FE            mov	-2[bp],ax
26914                                           !BCC_EOS
26915                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26916 6E2D           8B46         FE            mov	ax,-2[bp]
26917 6E30           88C4                       mov	ah,al
26918 6E32           30C0                       xor	al,al
26919 6E34           8946         FE            mov	-2[bp],ax
26920                                           !BCC_EOS
26921                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26922 6E37           8B46         FE            mov	ax,-2[bp]
26923 6E3A           0246         0E            add	al,$E[bp]
26924 6E3D           80D4                   00  adc	ah,*0
26925 6E40           8946         FE            mov	-2[bp],ax
26926                                           !BCC_EOS
26927                                           ! 3827  biosfn_set_cursor_pos(page,newcurs);
26928                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26929 6E43           FF76         FE            push	-2[bp]
26930                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26931 6E46           8A46         06            mov	al,6[bp]
26932 6E49           30E4                       xor	ah,ah
26933 6E4B           50                         push	ax
26934                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26935 6E4C           E8         D56F            call	_biosfn_set_cursor_pos
26936 6E4F           83C4                   04  add	sp,*4
26937                                           !BCC_EOS
26938                                           ! 3828  while(count--!=0)
26939                                           ! 3829   {
26940 6E52           EB           4F            jmp .24F
26941                       00006E54            .250:
26942                                           ! 3830    car=read_byte(seg,offset++);
26943                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26944 6E54           8B46         12            mov	ax,$12[bp]
26945 6E57           40                         inc	ax
26946 6E58           8946         12            mov	$12[bp],ax
26947                                           ! Debug: list unsigned short = ax-1 (used reg = )
26948 6E5B           48                         dec	ax
26949 6E5C           50                         push	ax
26950                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26951 6E5D           FF76         10            push	$10[bp]
26952                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26953 6E60           E8         0F12            call	_read_byte
26954 6E63           83C4                   04  add	sp,*4
26955                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26956 6E66           8846         F9            mov	-7[bp],al
26957                                           !BCC_EOS
26958                                           ! 3831    if((flag&0x02)!=0)
26959                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26960 6E69           8A46         04            mov	al,4[bp]
26961 6E6C           24                     02  and	al,*2
26962                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26963 6E6E           84C0                       test	al,al
26964 6E70           74           15            je  	.251
26965                       00006E72            .252:
26966                                           ! 3832     attr=read_byte(seg,offset++);
26967                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26968 6E72           8B46         12            mov	ax,$12[bp]
26969 6E75           40                         inc	ax
26970 6E76           8946         12            mov	$12[bp],ax
26971                                           ! Debug: list unsigned short = ax-1 (used reg = )
26972 6E79           48                         dec	ax
26973 6E7A           50                         push	ax
26974                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26975 6E7B           FF76         10            push	$10[bp]
26976                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26977 6E7E           E8         0EF4            call	_read_byte
26978 6E81           83C4                   04  add	sp,*4
26979                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26980 6E84           8846         08            mov	8[bp],al
26981                                           !BCC_EOS
26982                                           ! 3833    biosfn_write_teletype(car,page,attr,3);
26983                       00006E87            .251:
26984                                           ! Debug: list int = const 3 (used reg = )
26985 6E87           B8                   0003  mov	ax,*3
26986 6E8A           50                         push	ax
26987                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26988 6E8B           8A46         08            mov	al,8[bp]
26989 6E8E           30E4                       xor	ah,ah
26990 6E90           50                         push	ax
26991                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26992 6E91           8A46         06            mov	al,6[bp]
26993 6E94           30E4                       xor	ah,ah
26994 6E96           50                         push	ax
26995                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26996 6E97           8A46         F9            mov	al,-7[bp]
26997 6E9A           30E4                       xor	ah,ah
26998 6E9C           50                         push	ax
26999                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
27000 6E9D           E8         F0B7            call	_biosfn_write_teletype
27001 6EA0           83C4                   08  add	sp,*8
27002                                           !BCC_EOS
27003                                           ! 3834   }
27004                                           ! 3835  if((flag&0x01)==0)
27005                       00006EA3            .24F:
27006                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
27007 6EA3           8B46         0A            mov	ax,$A[bp]
27008 6EA6           48                         dec	ax
27009 6EA7           8946         0A            mov	$A[bp],ax
27010                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
27011 6EAA           3D                   FFFF  cmp	ax,*-1
27012 6EAD           75           A5            jne	.250
27013                       00006EAF            .253:
27014                       00006EAF            .24E:
27015                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
27016 6EAF           8A46         04            mov	al,4[bp]
27017 6EB2           24                     01  and	al,*1
27018                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
27019 6EB4           84C0                       test	al,al
27020 6EB6           75           0F            jne 	.254
27021                       00006EB8            .255:
27022                                           ! 3836   biosfn_set_cursor_pos(page,oldcurs);
27023                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
27024 6EB8           FF76         FC            push	-4[bp]
27025                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
27026 6EBB           8A46         06            mov	al,6[bp]
27027 6EBE           30E4                       xor	ah,ah
27028 6EC0           50                         push	ax
27029                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
27030 6EC1           E8         D4FA            call	_biosfn_set_cursor_pos
27031 6EC4           83C4                   04  add	sp,*4
27032                                           !BCC_EOS
27033                                           ! 3837 }
27034                       00006EC7            .254:
27035 6EC7           89EC                       mov	sp,bp
27036 6EC9           5D                         pop	bp
27037 6ECA           C3                         ret
27038                                           ! 3838 #asm
27039                                           !BCC_ASM
27040                       00000008            _biosfn_write_string.count	set	8
27041                       0000000E            _biosfn_write_string.seg	set	$E
27042                       0000000C            _biosfn_write_string.col	set	$C
27043                       00000002            _biosfn_write_string.flag	set	2
27044                       00000006            _biosfn_write_string.attr	set	6
27045                       00000004            _biosfn_write_string.page	set	4
27046                       0000000A            _biosfn_write_string.row	set	$A
27047                       00000010            _biosfn_write_string.offset	set	$10
27048                       00006ECB            biosfn_group_1A:
27049 6ECB           3C                     00    cmp al, #0x00
27050 6ECD           74           08              je biosfn_read_display_code
27051 6ECF           3C                     01    cmp al, #0x01
27052 6ED1           74           19              je biosfn_set_display_code
27053 6ED3           E8         0F3C              call _unknown
27054 6ED6           C3                           ret
27055                       00006ED7            biosfn_read_display_code:
27056 6ED7           1E                           push ds
27057 6ED8           50                           push ax
27058 6ED9           B8                   0040    mov ax, # 0x40
27059 6EDC           8ED8                         mov ds, ax
27060 6EDE           BB                   008A    mov bx, # 0x8A
27061 6EE1           8A07                         mov al, [bx]
27062 6EE3           88C3                         mov bl, al
27063 6EE5           30FF                         xor bh, bh
27064 6EE7           58                           pop ax
27065 6EE8           88E0                         mov al, ah
27066 6EEA           1F                           pop ds
27067 6EEB           C3                           ret
27068                       00006EEC            biosfn_set_display_code:
27069 6EEC           1E                           push ds
27070 6EED           50                           push ax
27071 6EEE           53                           push bx
27072 6EEF           B8                   0040    mov ax, # 0x40
27073 6EF2           8ED8                         mov ds, ax
27074 6EF4           89D8                         mov ax, bx
27075 6EF6           BB                   008A    mov bx, # 0x8A
27076 6EF9           8807                         mov [bx], al
27077 6EFB           88E0                         mov al, ah
27078 6EFD           30E4                         xor ah, ah
27079 6EFF           50                           push ax
27080 6F00           BB                   6F10    mov bx, #msg_alt_dcc
27081 6F03           53                           push bx
27082 6F04           E8         0F19              call _printf
27083 6F07           83C4                   04    add sp, #4
27084 6F0A           5B                           pop bx
27085 6F0B           58                           pop ax
27086 6F0C           88E0                         mov al, ah
27087 6F0E           1F                           pop ds
27088 6F0F           C3                           ret
27089                       00006F10            msg_alt_dcc:
27090 6F10                        41            .ascii "Alternate Display code (%02x) was discarded"
27091 6F3B                        0D            .byte 0x0d,0x0a,0x00
27092                                           ! 3883 endasm
27093                                           !BCC_ENDASM
27094                                           ! 3884 static void biosfn_read_state_info (BX,ES,DI)
27095                                           ! Register BX used in function biosfn_write_string
27096                                           ! 3885 Bit16u BX;Bit16u ES;Bit16u DI;
27097                       00006F3E            _biosfn_read_state_info:
27098                                           !BCC_EOS
27099                                           !BCC_EOS
27100                                           !BCC_EOS
27101                                           ! 3886 {
27102                                           ! 3887  write_word(ES,DI+0x00,&static_functionality);
27103 6F3E           55                         push	bp
27104 6F3F           89E5                       mov	bp,sp
27105                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
27106 6F41           BB                   0F5F  mov	bx,#_static_functionality
27107 6F44           53                         push	bx
27108                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
27109 6F45           8B46         08            mov	ax,8[bp]
27110                                           ! Debug: list unsigned int = ax+0 (used reg = )
27111 6F48           50                         push	ax
27112                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27113 6F49           FF76         06            push	6[bp]
27114                                           ! Debug: func () void = write_word+0 (used reg = )
27115 6F4C           E8         0E64            call	_write_word
27116 6F4F           89EC                       mov	sp,bp
27117                                           !BCC_EOS
27118                                           ! 3888  write_word(ES,DI+0x02,0xC000);
27119                                           ! Debug: list unsigned int = const $C000 (used reg = )
27120 6F51           B8                   C000  mov	ax,#$C000
27121 6F54           50                         push	ax
27122                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
27123 6F55           8B46         08            mov	ax,8[bp]
27124                                           ! Debug: list unsigned int = ax+2 (used reg = )
27125 6F58           40                         inc	ax
27126 6F59           40                         inc	ax
27127 6F5A           50                         push	ax
27128                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27129 6F5B           FF76         06            push	6[bp]
27130                                           ! Debug: func () void = write_word+0 (used reg = )
27131 6F5E           E8         0E52            call	_write_word
27132 6F61           89EC                       mov	sp,bp
27133                                           !BCC_EOS
27134                                           ! 3889  memcpyb(ES,DI+0x04,0x40,0x49,30);
27135                                           ! Debug: list int = const $1E (used reg = )
27136 6F63           B8                   001E  mov	ax,*$1E
27137 6F66           50                         push	ax
27138                                           ! Debug: list int = const $49 (used reg = )
27139 6F67           B8                   0049  mov	ax,*$49
27140 6F6A           50                         push	ax
27141                                           ! Debug: list int = const $40 (used reg = )
27142 6F6B           B8                   0040  mov	ax,*$40
27143 6F6E           50                         push	ax
27144                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
27145 6F6F           8B46         08            mov	ax,8[bp]
27146                                           ! Debug: list unsigned int = ax+4 (used reg = )
27147 6F72           05                   0004  add	ax,*4
27148 6F75           50                         push	ax
27149                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27150 6F76           FF76         06            push	6[bp]
27151                                           ! Debug: func () void = memcpyb+0 (used reg = )
27152 6F79           E8         0D99            call	_memcpyb
27153 6F7C           89EC                       mov	sp,bp
27154                                           !BCC_EOS
27155                                           ! 3890  memcpyb(ES,DI+0x22,0x40,0x84,3);
27156                                           ! Debug: list int = const 3 (used reg = )
27157 6F7E           B8                   0003  mov	ax,*3
27158 6F81           50                         push	ax
27159                                           ! Debug: list int = const $84 (used reg = )
27160 6F82           B8                   0084  mov	ax,#$84
27161 6F85           50                         push	ax
27162                                           ! Debug: list int = const $40 (used reg = )
27163 6F86           B8                   0040  mov	ax,*$40
27164 6F89           50                         push	ax
27165                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
27166 6F8A           8B46         08            mov	ax,8[bp]
27167                                           ! Debug: list unsigned int = ax+$22 (used reg = )
27168 6F8D           05                   0022  add	ax,*$22
27169 6F90           50                         push	ax
27170                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
27171 6F91           FF76         06            push	6[bp]
27172                                           ! Debug: func () void = memcpyb+0 (used reg = )
27173 6F94           E8         0D7E            call	_memcpyb
27174 6F97           89EC                       mov	sp,bp
27175                                           !BCC_EOS
27176                                           ! 3891  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
27177                                           ! Debug: list int = const $8A (used reg = )
27178 6F99           B8                   008A  mov	ax,#$8A
27179 6F9C           50                         push	ax
27180                                           ! Debug: list int = const $40 (used reg = )
27181 6F9D           B8                   0040  mov	ax,*$40
27182 6FA0           50                         push	ax
27183                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27184 6FA1           E8         0DD1            call	_read_byte
27185 6FA4           89EC                       mov	sp,bp
27186                                           ! Debug: list unsigned char = al+0 (used reg = )
27187 6FA6           30E4                       xor	ah,ah
27188 6FA8           50                         push	ax
27189                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
27190 6FA9           8B46         08            mov	ax,8[bp]
27191                                           ! Debug: list unsigned int = ax+$25 (used reg = )
27192 6FAC           05                   0025  add	ax,*$25
27193 6FAF           50                         push	ax
27194                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27195 6FB0           FF76         06            push	6[bp]
27196                                           ! Debug: func () void = write_byte+0 (used reg = )
27197 6FB3           E8         0DE5            call	_write_byte
27198 6FB6           89EC                       mov	sp,bp
27199                                           !BCC_EOS
27200                                           ! 3892  write_byte(ES,DI+0x26,0);
27201                                           ! Debug: list int = const 0 (used reg = )
27202 6FB8           31C0                       xor	ax,ax
27203 6FBA           50                         push	ax
27204                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
27205 6FBB           8B46         08            mov	ax,8[bp]
27206                                           ! Debug: list unsigned int = ax+$26 (used reg = )
27207 6FBE           05                   0026  add	ax,*$26
27208 6FC1           50                         push	ax
27209                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27210 6FC2           FF76         06            push	6[bp]
27211                                           ! Debug: func () void = write_byte+0 (used reg = )
27212 6FC5           E8         0DD3            call	_write_byte
27213 6FC8           89EC                       mov	sp,bp
27214                                           !BCC_EOS
27215                                           ! 3893  write_byte(ES,DI+0x27,16);
27216                                           ! Debug: list int = const $10 (used reg = )
27217 6FCA           B8                   0010  mov	ax,*$10
27218 6FCD           50                         push	ax
27219                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
27220 6FCE           8B46         08            mov	ax,8[bp]
27221                                           ! Debug: list unsigned int = ax+$27 (used reg = )
27222 6FD1           05                   0027  add	ax,*$27
27223 6FD4           50                         push	ax
27224                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27225 6FD5           FF76         06            push	6[bp]
27226                                           ! Debug: func () void = write_byte+0 (used reg = )
27227 6FD8           E8         0DC0            call	_write_byte
27228 6FDB           89EC                       mov	sp,bp
27229                                           !BCC_EOS
27230                                           ! 3894  write_byte(ES,DI+0x28,0);
27231                                           ! Debug: list int = const 0 (used reg = )
27232 6FDD           31C0                       xor	ax,ax
27233 6FDF           50                         push	ax
27234                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
27235 6FE0           8B46         08            mov	ax,8[bp]
27236                                           ! Debug: list unsigned int = ax+$28 (used reg = )
27237 6FE3           05                   0028  add	ax,*$28
27238 6FE6           50                         push	ax
27239                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27240 6FE7           FF76         06            push	6[bp]
27241                                           ! Debug: func () void = write_byte+0 (used reg = )
27242 6FEA           E8         0DAE            call	_write_byte
27243 6FED           89EC                       mov	sp,bp
27244                                           !BCC_EOS
27245                                           ! 3895  write_byte(ES,DI+0x29,8);
27246                                           ! Debug: list int = const 8 (used reg = )
27247 6FEF           B8                   0008  mov	ax,*8
27248 6FF2           50                         push	ax
27249                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
27250 6FF3           8B46         08            mov	ax,8[bp]
27251                                           ! Debug: list unsigned int = ax+$29 (used reg = )
27252 6FF6           05                   0029  add	ax,*$29
27253 6FF9           50                         push	ax
27254                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27255 6FFA           FF76         06            push	6[bp]
27256                                           ! Debug: func () void = write_byte+0 (used reg = )
27257 6FFD           E8         0D9B            call	_write_byte
27258 7000           89EC                       mov	sp,bp
27259                                           !BCC_EOS
27260                                           ! 3896  write_byte(ES,DI+0x2a,2);
27261                                           ! Debug: list int = const 2 (used reg = )
27262 7002           B8                   0002  mov	ax,*2
27263 7005           50                         push	ax
27264                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
27265 7006           8B46         08            mov	ax,8[bp]
27266                                           ! Debug: list unsigned int = ax+$2A (used reg = )
27267 7009           05                   002A  add	ax,*$2A
27268 700C           50                         push	ax
27269                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27270 700D           FF76         06            push	6[bp]
27271                                           ! Debug: func () void = write_byte+0 (used reg = )
27272 7010           E8         0D88            call	_write_byte
27273 7013           89EC                       mov	sp,bp
27274                                           !BCC_EOS
27275                                           ! 3897  write_byte(ES,DI+0x2b,0);
27276                                           ! Debug: list int = const 0 (used reg = )
27277 7015           31C0                       xor	ax,ax
27278 7017           50                         push	ax
27279                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
27280 7018           8B46         08            mov	ax,8[bp]
27281                                           ! Debug: list unsigned int = ax+$2B (used reg = )
27282 701B           05                   002B  add	ax,*$2B
27283 701E           50                         push	ax
27284                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27285 701F           FF76         06            push	6[bp]
27286                                           ! Debug: func () void = write_byte+0 (used reg = )
27287 7022           E8         0D76            call	_write_byte
27288 7025           89EC                       mov	sp,bp
27289                                           !BCC_EOS
27290                                           ! 3898  write_byte(ES,DI+0x2c,0);
27291                                           ! Debug: list int = const 0 (used reg = )
27292 7027           31C0                       xor	ax,ax
27293 7029           50                         push	ax
27294                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
27295 702A           8B46         08            mov	ax,8[bp]
27296                                           ! Debug: list unsigned int = ax+$2C (used reg = )
27297 702D           05                   002C  add	ax,*$2C
27298 7030           50                         push	ax
27299                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27300 7031           FF76         06            push	6[bp]
27301                                           ! Debug: func () void = write_byte+0 (used reg = )
27302 7034           E8         0D64            call	_write_byte
27303 7037           89EC                       mov	sp,bp
27304                                           !BCC_EOS
27305                                           ! 3899  write_byte(ES,DI+0x31,3);
27306                                           ! Debug: list int = const 3 (used reg = )
27307 7039           B8                   0003  mov	ax,*3
27308 703C           50                         push	ax
27309                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
27310 703D           8B46         08            mov	ax,8[bp]
27311                                           ! Debug: list unsigned int = ax+$31 (used reg = )
27312 7040           05                   0031  add	ax,*$31
27313 7043           50                         push	ax
27314                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27315 7044           FF76         06            push	6[bp]
27316                                           ! Debug: func () void = write_byte+0 (used reg = )
27317 7047           E8         0D51            call	_write_byte
27318 704A           89EC                       mov	sp,bp
27319                                           !BCC_EOS
27320                                           ! 3900  write_byte(ES,DI+0x32,0);
27321                                           ! Debug: list int = const 0 (used reg = )
27322 704C           31C0                       xor	ax,ax
27323 704E           50                         push	ax
27324                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
27325 704F           8B46         08            mov	ax,8[bp]
27326                                           ! Debug: list unsigned int = ax+$32 (used reg = )
27327 7052           05                   0032  add	ax,*$32
27328 7055           50                         push	ax
27329                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
27330 7056           FF76         06            push	6[bp]
27331                                           ! Debug: func () void = write_byte+0 (used reg = )
27332 7059           E8         0D3F            call	_write_byte
27333 705C           89EC                       mov	sp,bp
27334                                           !BCC_EOS
27335                                           ! 3901  memsetb(ES,DI+0x33,0,13);
27336                                           ! Debug: list int = const $D (used reg = )
27337 705E           B8                   000D  mov	ax,*$D
27338 7061           50                         push	ax
27339                                           ! Debug: list int = const 0 (used reg = )
27340 7062           31C0                       xor	ax,ax
27341 7064           50                         push	ax
27342                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
27343 7065           8B46         08            mov	ax,8[bp]
27344                                           ! Debug: list unsigned int = ax+$33 (used reg = )
27345 7068           05                   0033  add	ax,*$33
27346 706B           50                         push	ax
27347                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
27348 706C           FF76         06            push	6[bp]
27349                                           ! Debug: func () void = memsetb+0 (used reg = )
27350 706F           E8         0C59            call	_memsetb
27351 7072           89EC                       mov	sp,bp
27352                                           !BCC_EOS
27353                                           ! 3902 }
27354 7074           5D                         pop	bp
27355 7075           C3                         ret
27356                                           ! 3903 static Bit16u biosfn_read_video_state_size2 (CX)
27357                                           ! Register BX used in function biosfn_read_state_info
27358                                           ! 3904      Bit16u CX;
27359                       00007076            _biosfn_read_video_state_size2:
27360                                           !BCC_EOS
27361                                           ! 3905 {
27362                                           ! 3906     Bit16u size;
27363                                           !BCC_EOS
27364                                           ! 3907     size = 0;
27365 7076           55                         push	bp
27366 7077           89E5                       mov	bp,sp
27367 7079           4C                         dec	sp
27368 707A           4C                         dec	sp
27369                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
27370 707B           31C0                       xor	ax,ax
27371 707D           8946         FE            mov	-2[bp],ax
27372                                           !BCC_EOS
27373                                           ! 3908     if (CX & 1) {
27374                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
27375 7080           8A46         04            mov	al,4[bp]
27376 7083           24                     01  and	al,*1
27377 7085           84C0                       test	al,al
27378 7087           74           09            je  	.256
27379                       00007089            .257:
27380                                           ! 3909         size += 0x46;
27381                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
27382 7089           8B46         FE            mov	ax,-2[bp]
27383 708C           05                   0046  add	ax,*$46
27384 708F           8946         FE            mov	-2[bp],ax
27385                                           !BCC_EOS
27386                                           ! 3910     }
27387                                           ! 3911     if (CX & 2) {
27388                       00007092            .256:
27389                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
27390 7092           8A46         04            mov	al,4[bp]
27391 7095           24                     02  and	al,*2
27392 7097           84C0                       test	al,al
27393 7099           74           09            je  	.258
27394                       0000709B            .259:
27395                                           ! 3912         size += (5 + 8 + 5) * 2 + 6;
27396                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
27397 709B           8B46         FE            mov	ax,-2[bp]
27398 709E           05                   002A  add	ax,*$2A
27399 70A1           8946         FE            mov	-2[bp],ax
27400                                           !BCC_EOS
27401                                           ! 3913     }
27402                                           ! 3914     if (CX & 4) {
27403                       000070A4            .258:
27404                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
27405 70A4           8A46         04            mov	al,4[bp]
27406 70A7           24                     04  and	al,*4
27407 70A9           84C0                       test	al,al
27408 70AB           74           09            je  	.25A
27409                       000070AD            .25B:
27410                                           ! 3915         size += 3 + 256 * 3 + 1;
27411                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
27412 70AD           8B46         FE            mov	ax,-2[bp]
27413 70B0           05                   0304  add	ax,#$304
27414 70B3           8946         FE            mov	-2[bp],ax
27415                                           !BCC_EOS
27416                                           ! 3916 }
27417                                           ! 3917     return size;
27418                       000070B6            .25A:
27419 70B6           8B46         FE            mov	ax,-2[bp]
27420 70B9           89EC                       mov	sp,bp
27421 70BB           5D                         pop	bp
27422 70BC           C3                         ret
27423                                           !BCC_EOS
27424                                           ! 3918 }
27425                                           ! 3919 static void biosfn_read_video_state_size (CX, BX)
27426                                           ! 3920      Bit16u CX; Bit16u *BX;
27427                       000070BD            _biosfn_read_video_state_size:
27428                                           !BCC_EOS
27429                                           !BCC_EOS
27430                                           ! 3921 {
27431                                           ! 3922     Bit16u ss=get_SS();
27432 70BD           55                         push	bp
27433 70BE           89E5                       mov	bp,sp
27434 70C0           4C                         dec	sp
27435 70C1           4C                         dec	sp
27436                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27437 70C2           E8         0D3C            call	_get_SS
27438                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27439 70C5           8946         FE            mov	-2[bp],ax
27440                                           !BCC_EOS
27441                                           ! 3923     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27442                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27443 70C8           FF76         04            push	4[bp]
27444                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27445 70CB           E8         FFA8            call	_biosfn_read_video_state_size2
27446 70CE           44                         inc	sp
27447 70CF           44                         inc	sp
27448                                           ! Debug: list unsigned short = ax+0 (used reg = )
27449 70D0           50                         push	ax
27450                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27451 70D1           FF76         06            push	6[bp]
27452                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27453 70D4           FF76         FE            push	-2[bp]
27454                                           ! Debug: func () void = write_word+0 (used reg = )
27455 70D7           E8         0CD9            call	_write_word
27456 70DA           83C4                   06  add	sp,*6
27457                                           !BCC_EOS
27458                                           ! 3924 }
27459 70DD           89EC                       mov	sp,bp
27460 70DF           5D                         pop	bp
27461 70E0           C3                         ret
27462                                           ! 3925 static Bit16u biosfn_save_video_state (CX,ES,BX)
27463                                           ! 3926      Bit16u CX;Bit16u ES;Bit16u BX;
27464                       000070E1            _biosfn_save_video_state:
27465                                           !BCC_EOS
27466                                           !BCC_EOS
27467                                           !BCC_EOS
27468                                           ! 3927 {
27469                                           ! 3928     Bit16u i, v, crtc_addr, ar_index;
27470                                           !BCC_EOS
27471                                           ! 3929     crtc_addr = read_word(0x40, 0x63);
27472 70E1           55                         push	bp
27473 70E2           89E5                       mov	bp,sp
27474 70E4           83C4                   F8  add	sp,*-8
27475                                           ! Debug: list int = const $63 (used reg = )
27476 70E7           B8                   0063  mov	ax,*$63
27477 70EA           50                         push	ax
27478                                           ! Debug: list int = const $40 (used reg = )
27479 70EB           B8                   0040  mov	ax,*$40
27480 70EE           50                         push	ax
27481                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27482 70EF           E8         0C96            call	_read_word
27483 70F2           83C4                   04  add	sp,*4
27484                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27485 70F5           8946         FA            mov	-6[bp],ax
27486                                           !BCC_EOS
27487                                           ! 3930     if (CX & 1) {
27488                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27489 70F8           8A46         04            mov	al,4[bp]
27490 70FB           24                     01  and	al,*1
27491 70FD           84C0                       test	al,al
27492 70FF         0F84         0266            beq 	.25C
27493                       00007103            .25D:
27494                                           ! 3931         write_byte(ES, BX, inb(0x3c4)); BX++;
27495                                           ! Debug: list int = const $3C4 (used reg = )
27496 7103           B8                   03C4  mov	ax,#$3C4
27497 7106           50                         push	ax
27498                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27499 7107           E8         0CC1            call	_inb
27500 710A           44                         inc	sp
27501 710B           44                         inc	sp
27502                                           ! Debug: list unsigned char = al+0 (used reg = )
27503 710C           30E4                       xor	ah,ah
27504 710E           50                         push	ax
27505                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27506 710F           FF76         08            push	8[bp]
27507                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27508 7112           FF76         06            push	6[bp]
27509                                           ! Debug: func () void = write_byte+0 (used reg = )
27510 7115           E8         0C83            call	_write_byte
27511 7118           83C4                   06  add	sp,*6
27512                                           !BCC_EOS
27513                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27514 711B           8B46         08            mov	ax,8[bp]
27515 711E           40                         inc	ax
27516 711F           8946         08            mov	8[bp],ax
27517                                           !BCC_EOS
27518                                           ! 3932         write_byte(ES, BX, inb(crtc_addr)); BX++;
27519                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27520 7122           FF76         FA            push	-6[bp]
27521                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27522 7125           E8         0CA3            call	_inb
27523 7128           44                         inc	sp
27524 7129           44                         inc	sp
27525                                           ! Debug: list unsigned char = al+0 (used reg = )
27526 712A           30E4                       xor	ah,ah
27527 712C           50                         push	ax
27528                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27529 712D           FF76         08            push	8[bp]
27530                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27531 7130           FF76         06            push	6[bp]
27532                                           ! Debug: func () void = write_byte+0 (used reg = )
27533 7133           E8         0C65            call	_write_byte
27534 7136           83C4                   06  add	sp,*6
27535                                           !BCC_EOS
27536                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27537 7139           8B46         08            mov	ax,8[bp]
27538 713C           40                         inc	ax
27539 713D           8946         08            mov	8[bp],ax
27540                                           !BCC_EOS
27541                                           ! 3933         write_byte(ES, BX, inb(0x3ce)); BX++;
27542                                           ! Debug: list int = const $3CE (used reg = )
27543 7140           B8                   03CE  mov	ax,#$3CE
27544 7143           50                         push	ax
27545                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27546 7144           E8         0C84            call	_inb
27547 7147           44                         inc	sp
27548 7148           44                         inc	sp
27549                                           ! Debug: list unsigned char = al+0 (used reg = )
27550 7149           30E4                       xor	ah,ah
27551 714B           50                         push	ax
27552                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27553 714C           FF76         08            push	8[bp]
27554                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27555 714F           FF76         06            push	6[bp]
27556                                           ! Debug: func () void = write_byte+0 (used reg = )
27557 7152           E8         0C46            call	_write_byte
27558 7155           83C4                   06  add	sp,*6
27559                                           !BCC_EOS
27560                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27561 7158           8B46         08            mov	ax,8[bp]
27562 715B           40                         inc	ax
27563 715C           8946         08            mov	8[bp],ax
27564                                           !BCC_EOS
27565                                           ! 3934         inb(0x3da);
27566                                           ! Debug: list int = const $3DA (used reg = )
27567 715F           B8                   03DA  mov	ax,#$3DA
27568 7162           50                         push	ax
27569                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27570 7163           E8         0C65            call	_inb
27571 7166           44                         inc	sp
27572 7167           44                         inc	sp
27573                                           !BCC_EOS
27574                                           ! 3935         ar_index = inb(0x3c0);
27575                                           ! Debug: list int = const $3C0 (used reg = )
27576 7168           B8                   03C0  mov	ax,#$3C0
27577 716B           50                         push	ax
27578                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27579 716C           E8         0C5C            call	_inb
27580 716F           44                         inc	sp
27581 7170           44                         inc	sp
27582                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27583 7171           30E4                       xor	ah,ah
27584 7173           8946         F8            mov	-8[bp],ax
27585                                           !BCC_EOS
27586                                           ! 3936         write_byte(ES, BX, ar_index); BX++;
27587                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27588 7176           FF76         F8            push	-8[bp]
27589                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27590 7179           FF76         08            push	8[bp]
27591                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27592 717C           FF76         06            push	6[bp]
27593                                           ! Debug: func () void = write_byte+0 (used reg = )
27594 717F           E8         0C19            call	_write_byte
27595 7182           83C4                   06  add	sp,*6
27596                                           !BCC_EOS
27597                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27598 7185           8B46         08            mov	ax,8[bp]
27599 7188           40                         inc	ax
27600 7189           8946         08            mov	8[bp],ax
27601                                           !BCC_EOS
27602                                           ! 3937         write_byte(ES, BX, inb(0x3ca)); BX++;
27603                                           ! Debug: list int = const $3CA (used reg = )
27604 718C           B8                   03CA  mov	ax,#$3CA
27605 718F           50                         push	ax
27606                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27607 7190           E8         0C38            call	_inb
27608 7193           44                         inc	sp
27609 7194           44                         inc	sp
27610                                           ! Debug: list unsigned char = al+0 (used reg = )
27611 7195           30E4                       xor	ah,ah
27612 7197           50                         push	ax
27613                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27614 7198           FF76         08            push	8[bp]
27615                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27616 719B           FF76         06            push	6[bp]
27617                                           ! Debug: func () void = write_byte+0 (used reg = )
27618 719E           E8         0BFA            call	_write_byte
27619 71A1           83C4                   06  add	sp,*6
27620                                           !BCC_EOS
27621                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27622 71A4           8B46         08            mov	ax,8[bp]
27623 71A7           40                         inc	ax
27624 71A8           8946         08            mov	8[bp],ax
27625                                           !BCC_EOS
27626                                           ! 3938         for(i=1;i<=4;i++){
27627                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27628 71AB           B8                   0001  mov	ax,*1
27629 71AE           8946         FE            mov	-2[bp],ax
27630                                           !BCC_EOS
27631                                           !BCC_EOS
27632 71B1           EB           33            jmp .260
27633                       000071B3            .261:
27634                                           ! 3939             outb(0x3c4, i);
27635                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27636 71B3           FF76         FE            push	-2[bp]
27637                                           ! Debug: list int = const $3C4 (used reg = )
27638 71B6           B8                   03C4  mov	ax,#$3C4
27639 71B9           50                         push	ax
27640                                           ! Debug: func () void = outb+0 (used reg = )
27641 71BA           E8         0C24            call	_outb
27642 71BD           83C4                   04  add	sp,*4
27643                                           !BCC_EOS
27644                                           ! 3940             write_byte(ES, BX, inb(0x3c5)); BX++;
27645                                           ! Debug: list int = const $3C5 (used reg = )
27646 71C0           B8                   03C5  mov	ax,#$3C5
27647 71C3           50                         push	ax
27648                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27649 71C4           E8         0C04            call	_inb
27650 71C7           44                         inc	sp
27651 71C8           44                         inc	sp
27652                                           ! Debug: list unsigned char = al+0 (used reg = )
27653 71C9           30E4                       xor	ah,ah
27654 71CB           50                         push	ax
27655                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27656 71CC           FF76         08            push	8[bp]
27657                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27658 71CF           FF76         06            push	6[bp]
27659                                           ! Debug: func () void = write_byte+0 (used reg = )
27660 71D2           E8         0BC6            call	_write_byte
27661 71D5           83C4                   06  add	sp,*6
27662                                           !BCC_EOS
27663                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27664 71D8           8B46         08            mov	ax,8[bp]
27665 71DB           40                         inc	ax
27666 71DC           8946         08            mov	8[bp],ax
27667                                           !BCC_EOS
27668                                           ! 3941         }
27669                                           ! 3942         outb(0x3c4, 0);
27670                       000071DF            .25F:
27671                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27672 71DF           8B46         FE            mov	ax,-2[bp]
27673 71E2           40                         inc	ax
27674 71E3           8946         FE            mov	-2[bp],ax
27675                       000071E6            .260:
27676                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27677 71E6           8B46         FE            mov	ax,-2[bp]
27678 71E9           3D                   0004  cmp	ax,*4
27679 71EC           76           C5            jbe	.261
27680                       000071EE            .262:
27681                       000071EE            .25E:
27682                                           ! Debug: list int = const 0 (used reg = )
27683 71EE           31C0                       xor	ax,ax
27684 71F0           50                         push	ax
27685                                           ! Debug: list int = const $3C4 (used reg = )
27686 71F1           B8                   03C4  mov	ax,#$3C4
27687 71F4           50                         push	ax
27688                                           ! Debug: func () void = outb+0 (used reg = )
27689 71F5           E8         0BE9            call	_outb
27690 71F8           83C4                   04  add	sp,*4
27691                                           !BCC_EOS
27692                                           ! 3943         write_byte(ES, BX, inb(0x3c5)); BX++;
27693                                           ! Debug: list int = const $3C5 (used reg = )
27694 71FB           B8                   03C5  mov	ax,#$3C5
27695 71FE           50                         push	ax
27696                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27697 71FF           E8         0BC9            call	_inb
27698 7202           44                         inc	sp
27699 7203           44                         inc	sp
27700                                           ! Debug: list unsigned char = al+0 (used reg = )
27701 7204           30E4                       xor	ah,ah
27702 7206           50                         push	ax
27703                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27704 7207           FF76         08            push	8[bp]
27705                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27706 720A           FF76         06            push	6[bp]
27707                                           ! Debug: func () void = write_byte+0 (used reg = )
27708 720D           E8         0B8B            call	_write_byte
27709 7210           83C4                   06  add	sp,*6
27710                                           !BCC_EOS
27711                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27712 7213           8B46         08            mov	ax,8[bp]
27713 7216           40                         inc	ax
27714 7217           8946         08            mov	8[bp],ax
27715                                           !BCC_EOS
27716                                           ! 3944         for(i=0;i<=0x18;i++) {
27717                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27718 721A           31C0                       xor	ax,ax
27719 721C           8946         FE            mov	-2[bp],ax
27720                                           !BCC_EOS
27721                                           !BCC_EOS
27722 721F           EB           33            jmp .265
27723                       00007221            .266:
27724                                           ! 3945             outb(crtc_addr,i);
27725                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27726 7221           FF76         FE            push	-2[bp]
27727                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27728 7224           FF76         FA            push	-6[bp]
27729                                           ! Debug: func () void = outb+0 (used reg = )
27730 7227           E8         0BB7            call	_outb
27731 722A           83C4                   04  add	sp,*4
27732                                           !BCC_EOS
27733                                           ! 3946             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27734                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27735 722D           8B46         FA            mov	ax,-6[bp]
27736                                           ! Debug: list unsigned int = ax+1 (used reg = )
27737 7230           40                         inc	ax
27738 7231           50                         push	ax
27739                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27740 7232           E8         0B96            call	_inb
27741 7235           44                         inc	sp
27742 7236           44                         inc	sp
27743                                           ! Debug: list unsigned char = al+0 (used reg = )
27744 7237           30E4                       xor	ah,ah
27745 7239           50                         push	ax
27746                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27747 723A           FF76         08            push	8[bp]
27748                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27749 723D           FF76         06            push	6[bp]
27750                                           ! Debug: func () void = write_byte+0 (used reg = )
27751 7240           E8         0B58            call	_write_byte
27752 7243           83C4                   06  add	sp,*6
27753                                           !BCC_EOS
27754                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27755 7246           8B46         08            mov	ax,8[bp]
27756 7249           40                         inc	ax
27757 724A           8946         08            mov	8[bp],ax
27758                                           !BCC_EOS
27759                                           ! 3947         }
27760                                           ! 3948         for(i=0;i<=0x13;i++) {
27761                       0000724D            .264:
27762                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27763 724D           8B46         FE            mov	ax,-2[bp]
27764 7250           40                         inc	ax
27765 7251           8946         FE            mov	-2[bp],ax
27766                       00007254            .265:
27767                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27768 7254           8B46         FE            mov	ax,-2[bp]
27769 7257           3D                   0018  cmp	ax,*$18
27770 725A           76           C5            jbe	.266
27771                       0000725C            .267:
27772                       0000725C            .263:
27773                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27774 725C           31C0                       xor	ax,ax
27775 725E           8946         FE            mov	-2[bp],ax
27776                                           !BCC_EOS
27777                                           !BCC_EOS
27778 7261           EB           44            jmp .26A
27779                       00007263            .26B:
27780                                           ! 3949             inb(0x3da);
27781                                           ! Debug: list int = const $3DA (used reg = )
27782 7263           B8                   03DA  mov	ax,#$3DA
27783 7266           50                         push	ax
27784                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27785 7267           E8         0B61            call	_inb
27786 726A           44                         inc	sp
27787 726B           44                         inc	sp
27788                                           !BCC_EOS
27789                                           ! 3950             outb(0x3c0, i | (ar_index & 0x20));
27790                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27791 726C           8A46         F8            mov	al,-8[bp]
27792 726F           24                     20  and	al,*$20
27793                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27794                                           ! Debug: expression subtree swapping
27795 7271           30E4                       xor	ah,ah
27796 7273           0B46         FE            or	ax,-2[bp]
27797                                           ! Debug: list unsigned int = ax+0 (used reg = )
27798 7276           50                         push	ax
27799                                           ! Debug: list int = const $3C0 (used reg = )
27800 7277           B8                   03C0  mov	ax,#$3C0
27801 727A           50                         push	ax
27802                                           ! Debug: func () void = outb+0 (used reg = )
27803 727B           E8         0B63            call	_outb
27804 727E           83C4                   04  add	sp,*4
27805                                           !BCC_EOS
27806                                           ! 3951             write_byte(ES, BX, inb(0x3c1)); BX++;
27807                                           ! Debug: list int = const $3C1 (used reg = )
27808 7281           B8                   03C1  mov	ax,#$3C1
27809 7284           50                         push	ax
27810                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27811 7285           E8         0B43            call	_inb
27812 7288           44                         inc	sp
27813 7289           44                         inc	sp
27814                                           ! Debug: list unsigned char = al+0 (used reg = )
27815 728A           30E4                       xor	ah,ah
27816 728C           50                         push	ax
27817                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27818 728D           FF76         08            push	8[bp]
27819                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27820 7290           FF76         06            push	6[bp]
27821                                           ! Debug: func () void = write_byte+0 (used reg = )
27822 7293           E8         0B05            call	_write_byte
27823 7296           83C4                   06  add	sp,*6
27824                                           !BCC_EOS
27825                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27826 7299           8B46         08            mov	ax,8[bp]
27827 729C           40                         inc	ax
27828 729D           8946         08            mov	8[bp],ax
27829                                           !BCC_EOS
27830                                           ! 3952         }
27831                                           ! 3953         inb(0x3da);
27832                       000072A0            .269:
27833                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27834 72A0           8B46         FE            mov	ax,-2[bp]
27835 72A3           40                         inc	ax
27836 72A4           8946         FE            mov	-2[bp],ax
27837                       000072A7            .26A:
27838                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27839 72A7           8B46         FE            mov	ax,-2[bp]
27840 72AA           3D                   0013  cmp	ax,*$13
27841 72AD           76           B4            jbe	.26B
27842                       000072AF            .26C:
27843                       000072AF            .268:
27844                                           ! Debug: list int = const $3DA (used reg = )
27845 72AF           B8                   03DA  mov	ax,#$3DA
27846 72B2           50                         push	ax
27847                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27848 72B3           E8         0B15            call	_inb
27849 72B6           44                         inc	sp
27850 72B7           44                         inc	sp
27851                                           !BCC_EOS
27852                                           ! 3954         for(i=0;i<=8;i++) {
27853                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27854 72B8           31C0                       xor	ax,ax
27855 72BA           8946         FE            mov	-2[bp],ax
27856                                           !BCC_EOS
27857                                           !BCC_EOS
27858 72BD           EB           33            jmp .26F
27859                       000072BF            .270:
27860                                           ! 3955             outb(0x3ce,i);
27861                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27862 72BF           FF76         FE            push	-2[bp]
27863                                           ! Debug: list int = const $3CE (used reg = )
27864 72C2           B8                   03CE  mov	ax,#$3CE
27865 72C5           50                         push	ax
27866                                           ! Debug: func () void = outb+0 (used reg = )
27867 72C6           E8         0B18            call	_outb
27868 72C9           83C4                   04  add	sp,*4
27869                                           !BCC_EOS
27870                                           ! 3956            
27871                                           ! 3956  write_byte(ES, BX, inb(0x3cf)); BX++;
27872                                           ! Debug: list int = const $3CF (used reg = )
27873 72CC           B8                   03CF  mov	ax,#$3CF
27874 72CF           50                         push	ax
27875                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27876 72D0           E8         0AF8            call	_inb
27877 72D3           44                         inc	sp
27878 72D4           44                         inc	sp
27879                                           ! Debug: list unsigned char = al+0 (used reg = )
27880 72D5           30E4                       xor	ah,ah
27881 72D7           50                         push	ax
27882                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27883 72D8           FF76         08            push	8[bp]
27884                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27885 72DB           FF76         06            push	6[bp]
27886                                           ! Debug: func () void = write_byte+0 (used reg = )
27887 72DE           E8         0ABA            call	_write_byte
27888 72E1           83C4                   06  add	sp,*6
27889                                           !BCC_EOS
27890                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27891 72E4           8B46         08            mov	ax,8[bp]
27892 72E7           40                         inc	ax
27893 72E8           8946         08            mov	8[bp],ax
27894                                           !BCC_EOS
27895                                           ! 3957         }
27896                                           ! 3958         write_word(ES, BX, crtc_addr); BX+= 2;
27897                       000072EB            .26E:
27898                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27899 72EB           8B46         FE            mov	ax,-2[bp]
27900 72EE           40                         inc	ax
27901 72EF           8946         FE            mov	-2[bp],ax
27902                       000072F2            .26F:
27903                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27904 72F2           8B46         FE            mov	ax,-2[bp]
27905 72F5           3D                   0008  cmp	ax,*8
27906 72F8           76           C5            jbe	.270
27907                       000072FA            .271:
27908                       000072FA            .26D:
27909                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27910 72FA           FF76         FA            push	-6[bp]
27911                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27912 72FD           FF76         08            push	8[bp]
27913                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27914 7300           FF76         06            push	6[bp]
27915                                           ! Debug: func () void = write_word+0 (used reg = )
27916 7303           E8         0AAD            call	_write_word
27917 7306           83C4                   06  add	sp,*6
27918                                           !BCC_EOS
27919                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27920 7309           8B46         08            mov	ax,8[bp]
27921 730C           40                         inc	ax
27922 730D           40                         inc	ax
27923 730E           8946         08            mov	8[bp],ax
27924                                           !BCC_EOS
27925                                           ! 3959         write_byte(ES, BX, 0); BX++;
27926                                           ! Debug: list int = const 0 (used reg = )
27927 7311           31C0                       xor	ax,ax
27928 7313           50                         push	ax
27929                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27930 7314           FF76         08            push	8[bp]
27931                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27932 7317           FF76         06            push	6[bp]
27933                                           ! Debug: func () void = write_byte+0 (used reg = )
27934 731A           E8         0A7E            call	_write_byte
27935 731D           83C4                   06  add	sp,*6
27936                                           !BCC_EOS
27937                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27938 7320           8B46         08            mov	ax,8[bp]
27939 7323           40                         inc	ax
27940 7324           8946         08            mov	8[bp],ax
27941                                           !BCC_EOS
27942                                           ! 3960         write_byte(ES, BX, 0); BX++;
27943                                           ! Debug: list int = const 0 (used reg = )
27944 7327           31C0                       xor	ax,ax
27945 7329           50                         push	ax
27946                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27947 732A           FF76         08            push	8[bp]
27948                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27949 732D           FF76         06            push	6[bp]
27950                                           ! Debug: func () void = write_byte+0 (used reg = )
27951 7330           E8         0A68            call	_write_byte
27952 7333           83C4                   06  add	sp,*6
27953                                           !BCC_EOS
27954                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27955 7336           8B46         08            mov	ax,8[bp]
27956 7339           40                         inc	ax
27957 733A           8946         08            mov	8[bp],ax
27958                                           !BCC_EOS
27959                                           ! 3961         write_byte(ES, BX, 0); BX++;
27960                                           ! Debug: list int = const 0 (used reg = )
27961 733D           31C0                       xor	ax,ax
27962 733F           50                         push	ax
27963                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27964 7340           FF76         08            push	8[bp]
27965                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27966 7343           FF76         06            push	6[bp]
27967                                           ! Debug: func () void = write_byte+0 (used reg = )
27968 7346           E8         0A52            call	_write_byte
27969 7349           83C4                   06  add	sp,*6
27970                                           !BCC_EOS
27971                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27972 734C           8B46         08            mov	ax,8[bp]
27973 734F           40                         inc	ax
27974 7350           8946         08            mov	8[bp],ax
27975                                           !BCC_EOS
27976                                           ! 3962         write_byte(ES, BX, 0); BX++;
27977                                           ! Debug: list int = const 0 (used reg = )
27978 7353           31C0                       xor	ax,ax
27979 7355           50                         push	ax
27980                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27981 7356           FF76         08            push	8[bp]
27982                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27983 7359           FF76         06            push	6[bp]
27984                                           ! Debug: func () void = write_byte+0 (used reg = )
27985 735C           E8         0A3C            call	_write_byte
27986 735F           83C4                   06  add	sp,*6
27987                                           !BCC_EOS
27988                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27989 7362           8B46         08            mov	ax,8[bp]
27990 7365           40                         inc	ax
27991 7366           8946         08            mov	8[bp],ax
27992                                           !BCC_EOS
27993                                           ! 3963     }
27994                                           ! 3964     if (CX & 2) {
27995                       00007369            .25C:
27996                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27997 7369           8A46         04            mov	al,4[bp]
27998 736C           24                     02  and	al,*2
27999 736E           84C0                       test	al,al
28000 7370         0F84         0270            beq 	.272
28001                       00007374            .273:
28002                                           ! 3965         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
28003                                           ! Debug: list int = const $49 (used reg = )
28004 7374           B8                   0049  mov	ax,*$49
28005 7377           50                         push	ax
28006                                           ! Debug: list int = const $40 (used reg = )
28007 7378           B8                   0040  mov	ax,*$40
28008 737B           50                         push	ax
28009                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28010 737C           E8         09F6            call	_read_byte
28011 737F           83C4                   04  add	sp,*4
28012                                           ! Debug: list unsigned char = al+0 (used reg = )
28013 7382           30E4                       xor	ah,ah
28014 7384           50                         push	ax
28015                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28016 7385           FF76         08            push	8[bp]
28017                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28018 7388           FF76         06            push	6[bp]
28019                                           ! Debug: func () void = write_byte+0 (used reg = )
28020 738B           E8         0A0D            call	_write_byte
28021 738E           83C4                   06  add	sp,*6
28022                                           !BCC_EOS
28023                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28024 7391           8B46         08            mov	ax,8[bp]
28025 7394           40                         inc	ax
28026 7395           8946         08            mov	8[bp],ax
28027                                           !BCC_EOS
28028                                           ! 3966         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
28029                                           ! Debug: list int = const $4A (used reg = )
28030 7398           B8                   004A  mov	ax,*$4A
28031 739B           50                         push	ax
28032                                           ! Debug: list int = const $40 (used reg = )
28033 739C           B8                   0040  mov	ax,*$40
28034 739F           50                         push	ax
28035                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28036 73A0           E8         09E5            call	_read_word
28037 73A3           83C4                   04  add	sp,*4
28038                                           ! Debug: list unsigned short = ax+0 (used reg = )
28039 73A6           50                         push	ax
28040                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28041 73A7           FF76         08            push	8[bp]
28042                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28043 73AA           FF76         06            push	6[bp]
28044                                           ! Debug: func () void = write_word+0 (used reg = )
28045 73AD           E8         0A03            call	_write_word
28046 73B0           83C4                   06  add	sp,*6
28047                                           !BCC_EOS
28048                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28049 73B3           8B46         08            mov	ax,8[bp]
28050 73B6           40                         inc	ax
28051 73B7           40                         inc	ax
28052 73B8           8946         08            mov	8[bp],ax
28053                                           !BCC_EOS
28054                                           ! 3967         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
28055                                           ! Debug: list int = const $4C (used reg = )
28056 73BB           B8                   004C  mov	ax,*$4C
28057 73BE           50                         push	ax
28058                                           ! Debug: list int = const $40 (used reg = )
28059 73BF           B8                   0040  mov	ax,*$40
28060 73C2           50                         push	ax
28061                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28062 73C3           E8         09C2            call	_read_word
28063 73C6           83C4                   04  add	sp,*4
28064                                           ! Debug: list unsigned short = ax+0 (used reg = )
28065 73C9           50                         push	ax
28066                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28067 73CA           FF76         08            push	8[bp]
28068                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28069 73CD           FF76         06            push	6[bp]
28070                                           ! Debug: func () void = write_word+0 (used reg = )
28071 73D0           E8         09E0            call	_write_word
28072 73D3           83C4                   06  add	sp,*6
28073                                           !BCC_EOS
28074                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28075 73D6           8B46         08            mov	ax,8[bp]
28076 73D9           40                         inc	ax
28077 73DA           40                         inc	ax
28078 73DB           8946         08            mov	8[bp],ax
28079                                           !BCC_EOS
28080                                           ! 3968         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
28081                                           ! Debug: list int = const $63 (used reg = )
28082 73DE           B8                   0063  mov	ax,*$63
28083 73E1           50                         push	ax
28084                                           ! Debug: list int = const $40 (used reg = )
28085 73E2           B8                   0040  mov	ax,*$40
28086 73E5           50                         push	ax
28087                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28088 73E6           E8         099F            call	_read_word
28089 73E9           83C4                   04  add	sp,*4
28090                                           ! Debug: list unsigned short = ax+0 (used reg = )
28091 73EC           50                         push	ax
28092                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28093 73ED           FF76         08            push	8[bp]
28094                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28095 73F0           FF76         06            push	6[bp]
28096                                           ! Debug: func () void = write_word+0 (used reg = )
28097 73F3           E8         09BD            call	_write_word
28098 73F6           83C4                   06  add	sp,*6
28099                                           !BCC_EOS
28100                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28101 73F9           8B46         08            mov	ax,8[bp]
28102 73FC           40                         inc	ax
28103 73FD           40                         inc	ax
28104 73FE           8946         08            mov	8[bp],ax
28105                                           !BCC_EOS
28106                                           ! 3969         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
28107                                           ! Debug: list int = const $84 (used reg = )
28108 7401           B8                   0084  mov	ax,#$84
28109 7404           50                         push	ax
28110                                           ! Debug: list int = const $40 (used reg = )
28111 7405           B8                   0040  mov	ax,*$40
28112 7408           50                         push	ax
28113                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28114 7409           E8         0969            call	_read_byte
28115 740C           83C4                   04  add	sp,*4
28116                                           ! Debug: list unsigned char = al+0 (used reg = )
28117 740F           30E4                       xor	ah,ah
28118 7411           50                         push	ax
28119                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28120 7412           FF76         08            push	8[bp]
28121                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28122 7415           FF76         06            push	6[bp]
28123                                           ! Debug: func () void = write_byte+0 (used reg = )
28124 7418           E8         0980            call	_write_byte
28125 741B           83C4                   06  add	sp,*6
28126                                           !BCC_EOS
28127                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28128 741E           8B46         08            mov	ax,8[bp]
28129 7421           40                         inc	ax
28130 7422           8946         08            mov	8[bp],ax
28131                                           !BCC_EOS
28132                                           ! 3970         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
28133                                           ! Debug: list int = const $85 (used reg = )
28134 7425           B8                   0085  mov	ax,#$85
28135 7428           50                         push	ax
28136                                           ! Debug: list int = const $40 (used reg = )
28137 7429           B8                   0040  mov	ax,*$40
28138 742C           50                         push	ax
28139                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28140 742D           E8         0958            call	_read_word
28141 7430           83C4                   04  add	sp,*4
28142                                           ! Debug: list unsigned short = ax+0 (used reg = )
28143 7433           50                         push	ax
28144                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28145 7434           FF76         08            push	8[bp]
28146                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28147 7437           FF76         06            push	6[bp]
28148                                           ! Debug: func () void = write_word+0 (used reg = )
28149 743A           E8         0976            call	_write_word
28150 743D           83C4                   06  add	sp,*6
28151                                           !BCC_EOS
28152                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28153 7440           8B46         08            mov	ax,8[bp]
28154 7443           40                         inc	ax
28155 7444           40                         inc	ax
28156 7445           8946         08            mov	8[bp],ax
28157                                           !BCC_EOS
28158                                           ! 3971         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
28159                                           ! Debug: list int = const $87 (used reg = )
28160 7448           B8                   0087  mov	ax,#$87
28161 744B           50                         push	ax
28162                                           ! Debug: list int = const $40 (used reg = )
28163 744C           B8                   0040  mov	ax,*$40
28164 744F           50                         push	ax
28165                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28166 7450           E8         0922            call	_read_byte
28167 7453           83C4                   04  add	sp,*4
28168                                           ! Debug: list unsigned char = al+0 (used reg = )
28169 7456           30E4                       xor	ah,ah
28170 7458           50                         push	ax
28171                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28172 7459           FF76         08            push	8[bp]
28173                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28174 745C           FF76         06            push	6[bp]
28175                                           ! Debug: func () void = write_byte+0 (used reg = )
28176 745F           E8         0939            call	_write_byte
28177 7462           83C4                   06  add	sp,*6
28178                                           !BCC_EOS
28179                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28180 7465           8B46         08            mov	ax,8[bp]
28181 7468           40                         inc	ax
28182 7469           8946         08            mov	8[bp],ax
28183                                           !BCC_EOS
28184                                           ! 3972         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
28185                                           ! Debug: list int = const $88 (used reg = )
28186 746C           B8                   0088  mov	ax,#$88
28187 746F           50                         push	ax
28188                                           ! Debug: list int = const $40 (used reg = )
28189 7470           B8                   0040  mov	ax,*$40
28190 7473           50                         push	ax
28191                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28192 7474           E8         08FE            call	_read_byte
28193 7477           83C4                   04  add	sp,*4
28194                                           ! Debug: list unsigned char = al+0 (used reg = )
28195 747A           30E4                       xor	ah,ah
28196 747C           50                         push	ax
28197                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28198 747D           FF76         08            push	8[bp]
28199                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28200 7480           FF76         06            push	6[bp]
28201                                           ! Debug: func () void = write_byte+0 (used reg = )
28202 7483           E8         0915            call	_write_byte
28203 7486           83C4                   06  add	sp,*6
28204                                           !BCC_EOS
28205                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28206 7489           8B46         08            mov	ax,8[bp]
28207 748C           40                         inc	ax
28208 748D           8946         08            mov	8[bp],ax
28209                                           !BCC_EOS
28210                                           ! 3973         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
28211                                           ! Debug: list int = const $89 (used reg = )
28212 7490           B8                   0089  mov	ax,#$89
28213 7493           50                         push	ax
28214                                           ! Debug: list int = const $40 (used reg = )
28215 7494           B8                   0040  mov	ax,*$40
28216 7497           50                         push	ax
28217                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28218 7498           E8         08DA            call	_read_byte
28219 749B           83C4                   04  add	sp,*4
28220                                           ! Debug: list unsigned char = al+0 (used reg = )
28221 749E           30E4                       xor	ah,ah
28222 74A0           50                         push	ax
28223                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28224 74A1           FF76         08            push	8[bp]
28225                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28226 74A4           FF76         06            push	6[bp]
28227                                           ! Debug: func () void = write_byte+0 (used reg = )
28228 74A7           E8         08F1            call	_write_byte
28229 74AA           83C4                   06  add	sp,*6
28230                                           !BCC_EOS
28231                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28232 74AD           8B46         08            mov	ax,8[bp]
28233 74B0           40                         inc	ax
28234 74B1           8946         08            mov	8[bp],ax
28235                                           !BCC_EOS
28236                                           ! 3974         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
28237                                           ! Debug: list int = const $60 (used reg = )
28238 74B4           B8                   0060  mov	ax,*$60
28239 74B7           50                         push	ax
28240                                           ! Debug: list int = const $40 (used reg = )
28241 74B8           B8                   0040  mov	ax,*$40
28242 74BB           50                         push	ax
28243                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28244 74BC           E8         08C9            call	_read_word
28245 74BF           83C4                   04  add	sp,*4
28246                                           ! Debug: list unsigned short = ax+0 (used reg = )
28247 74C2           50                         push	ax
28248                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28249 74C3           FF76         08            push	8[bp]
28250                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28251 74C6           FF76         06            push	6[bp]
28252                                           ! Debug: func () void = write_word+0 (used reg = )
28253 74C9           E8         08E7            call	_write_word
28254 74CC           83C4                   06  add	sp,*6
28255                                           !BCC_EOS
28256                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28257 74CF           8B46         08            mov	ax,8[bp]
28258 74D2           40                         inc	ax
28259 74D3           40                         inc	ax
28260 74D4           8946         08            mov	8[bp],ax
28261                                           !BCC_EOS
28262                                           ! 3975         for(i=0;i<8;i++) {
28263                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28264 74D7           31C0                       xor	ax,ax
28265 74D9           8946         FE            mov	-2[bp],ax
28266                                           !BCC_EOS
28267                                           !BCC_EOS
28268 74DC           EB           2F            jmp .276
28269                       000074DE            .277:
28270                                           ! 3976             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
28271                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
28272                                           ! Debug: expression subtree swapping
28273 74DE           8B46         FE            mov	ax,-2[bp]
28274 74E1           D1E0                       shl	ax,*1
28275                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
28276                                           ! Debug: expression subtree swapping
28277                                           ! Debug: list unsigned int = ax+$50 (used reg = )
28278 74E3           05                   0050  add	ax,*$50
28279 74E6           50                         push	ax
28280                                           ! Debug: list int = const $40 (used reg = )
28281 74E7           B8                   0040  mov	ax,*$40
28282 74EA           50                         push	ax
28283                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28284 74EB           E8         089A            call	_read_word
28285 74EE           83C4                   04  add	sp,*4
28286                                           ! Debug: list unsigned short = ax+0 (used reg = )
28287 74F1           50                         push	ax
28288                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28289 74F2           FF76         08            push	8[bp]
28290                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28291 74F5           FF76         06            push	6[bp]
28292                                           ! Debug: func () void = write_word+0 (used reg = )
28293 74F8           E8         08B8            call	_write_word
28294 74FB           83C4                   06  add	sp,*6
28295                                           !BCC_EOS
28296                                           ! 3977             BX += 2;
28297                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28298 74FE           8B46         08            mov	ax,8[bp]
28299 7501           40                         inc	ax
28300 7502           40                         inc	ax
28301 7503           8946         08            mov	8[bp],ax
28302                                           !BCC_EOS
28303                                           ! 3978         }
28304                                           ! 3979         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
28305                       00007506            .275:
28306                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28307 7506           8B46         FE            mov	ax,-2[bp]
28308 7509           40                         inc	ax
28309 750A           8946         FE            mov	-2[bp],ax
28310                       0000750D            .276:
28311                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
28312 750D           8B46         FE            mov	ax,-2[bp]
28313 7510           3D                   0008  cmp	ax,*8
28314 7513           72           C9            jb 	.277
28315                       00007515            .278:
28316                       00007515            .274:
28317                                           ! Debug: list int = const $4E (used reg = )
28318 7515           B8                   004E  mov	ax,*$4E
28319 7518           50                         push	ax
28320                                           ! Debug: list int = const $40 (used reg = )
28321 7519           B8                   0040  mov	ax,*$40
28322 751C           50                         push	ax
28323                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28324 751D           E8         0868            call	_read_word
28325 7520           83C4                   04  add	sp,*4
28326                                           ! Debug: list unsigned short = ax+0 (used reg = )
28327 7523           50                         push	ax
28328                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28329 7524           FF76         08            push	8[bp]
28330                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28331 7527           FF76         06            push	6[bp]
28332                                           ! Debug: func () void = write_word+0 (used reg = )
28333 752A           E8         0886            call	_write_word
28334 752D           83C4                   06  add	sp,*6
28335                                           !BCC_EOS
28336                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28337 7530           8B46         08            mov	ax,8[bp]
28338 7533           40                         inc	ax
28339 7534           40                         inc	ax
28340 7535           8946         08            mov	8[bp],ax
28341                                           !BCC_EOS
28342                                           ! 3980         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
28343                                           ! Debug: list int = const $62 (used reg = )
28344 7538           B8                   0062  mov	ax,*$62
28345 753B           50                         push	ax
28346                                           ! Debug: list int = const $40 (used reg = )
28347 753C           B8                   0040  mov	ax,*$40
28348 753F           50                         push	ax
28349                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28350 7540           E8         0832            call	_read_byte
28351 7543           83C4                   04  add	sp,*4
28352                                           ! Debug: list unsigned char = al+0 (used reg = )
28353 7546           30E4                       xor	ah,ah
28354 7548           50                         push	ax
28355                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28356 7549           FF76         08            push	8[bp]
28357                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28358 754C           FF76         06            push	6[bp]
28359                                           ! Debug: func () void = write_byte+0 (used reg = )
28360 754F           E8         0849            call	_write_byte
28361 7552           83C4                   06  add	sp,*6
28362                                           !BCC_EOS
28363                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28364 7555           8B46         08            mov	ax,8[bp]
28365 7558           40                         inc	ax
28366 7559           8946         08            mov	8[bp],ax
28367                                           !BCC_EOS
28368                                           ! 3981         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
28369                                           ! Debug: list int = const $7C (used reg = )
28370 755C           B8                   007C  mov	ax,*$7C
28371 755F           50                         push	ax
28372                                           ! Debug: list int = const 0 (used reg = )
28373 7560           31C0                       xor	ax,ax
28374 7562           50                         push	ax
28375                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28376 7563           E8         0822            call	_read_word
28377 7566           83C4                   04  add	sp,*4
28378                                           ! Debug: list unsigned short = ax+0 (used reg = )
28379 7569           50                         push	ax
28380                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28381 756A           FF76         08            push	8[bp]
28382                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28383 756D           FF76         06            push	6[bp]
28384                                           ! Debug: func () void = write_word+0 (used reg = )
28385 7570           E8         0840            call	_write_word
28386 7573           83C4                   06  add	sp,*6
28387                                           !BCC_EOS
28388                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28389 7576           8B46         08            mov	ax,8[bp]
28390 7579           40                         inc	ax
28391 757A           40                         inc	ax
28392 757B           8946         08            mov	8[bp],ax
28393                                           !BCC_EOS
28394                                           ! 3982         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
28395                                           ! Debug: list int = const $7E (used reg = )
28396 757E           B8                   007E  mov	ax,*$7E
28397 7581           50                         push	ax
28398                                           ! Debug: list int = const 0 (used reg = )
28399 7582           31C0                       xor	ax,ax
28400 7584           50                         push	ax
28401                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28402 7585           E8         0800            call	_read_word
28403 7588           83C4                   04  add	sp,*4
28404                                           ! Debug: list unsigned short = ax+0 (used reg = )
28405 758B           50                         push	ax
28406                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28407 758C           FF76         08            push	8[bp]
28408                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28409 758F           FF76         06            push	6[bp]
28410                                           ! Debug: func () void = write_word+0 (used reg = )
28411 7592           E8         081E            call	_write_word
28412 7595           83C4                   06  add	sp,*6
28413                                           !BCC_EOS
28414                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28415 7598           8B46         08            mov	ax,8[bp]
28416 759B           40                         inc	ax
28417 759C           40                         inc	ax
28418 759D           8946         08            mov	8[bp],ax
28419                                           !BCC_EOS
28420                                           ! 3983         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28421                                           ! Debug: list int = const $10C (used reg = )
28422 75A0           B8                   010C  mov	ax,#$10C
28423 75A3           50                         push	ax
28424                                           ! Debug: list int = const 0 (used reg = )
28425 75A4           31C0                       xor	ax,ax
28426 75A6           50                         push	ax
28427                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28428 75A7           E8         07DE            call	_read_word
28429 75AA           83C4                   04  add	sp,*4
28430                                           ! Debug: list unsigned short = ax+0 (used reg = )
28431 75AD           50                         push	ax
28432                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28433 75AE           FF76         08            push	8[bp]
28434                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28435 75B1           FF76         06            push	6[bp]
28436                                           ! Debug: func () void = write_word+0 (used reg = )
28437 75B4           E8         07FC            call	_write_word
28438 75B7           83C4                   06  add	sp,*6
28439                                           !BCC_EOS
28440                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28441 75BA           8B46         08            mov	ax,8[bp]
28442 75BD           40                         inc	ax
28443 75BE           40                         inc	ax
28444 75BF           8946         08            mov	8[bp],ax
28445                                           !BCC_EOS
28446                                           ! 3984         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28447                                           ! Debug: list int = const $10E (used reg = )
28448 75C2           B8                   010E  mov	ax,#$10E
28449 75C5           50                         push	ax
28450                                           ! Debug: list int = const 0 (used reg = )
28451 75C6           31C0                       xor	ax,ax
28452 75C8           50                         push	ax
28453                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28454 75C9           E8         07BC            call	_read_word
28455 75CC           83C4                   04  add	sp,*4
28456                                           ! Debug: list unsigned short = ax+0 (used reg = )
28457 75CF           50                         push	ax
28458                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28459 75D0           FF76         08            push	8[bp]
28460                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28461 75D3           FF76         06            push	6[bp]
28462                                           ! Debug: func () void = write_word+0 (used reg = )
28463 75D6           E8         07DA            call	_write_word
28464 75D9           83C4                   06  add	sp,*6
28465                                           !BCC_EOS
28466                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28467 75DC           8B46         08            mov	ax,8[bp]
28468 75DF           40                         inc	ax
28469 75E0           40                         inc	ax
28470 75E1           8946         08            mov	8[bp],ax
28471                                           !BCC_EOS
28472                                           ! 3985     }
28473                                           ! 3986     if (CX & 4) {
28474                       000075E4            .272:
28475                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28476 75E4           8A46         04            mov	al,4[bp]
28477 75E7           24                     04  and	al,*4
28478 75E9           84C0                       test	al,al
28479 75EB         0F84         00B5            beq 	.279
28480                       000075EF            .27A:
28481                                           ! 3987         write_byte(ES, BX, inb(0x3c7)); BX++;
28482                                           ! Debug: list int = const $3C7 (used reg = )
28483 75EF           B8                   03C7  mov	ax,#$3C7
28484 75F2           50                         push	ax
28485                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28486 75F3           E8         07D5            call	_inb
28487 75F6           44                         inc	sp
28488 75F7           44                         inc	sp
28489                                           ! Debug: list unsigned char = al+0 (used reg = )
28490 75F8           30E4                       xor	ah,ah
28491 75FA           50                         push	ax
28492                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28493 75FB           FF76         08            push	8[bp]
28494                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28495 75FE           FF76         06            push	6[bp]
28496                                           ! Debug: func () void = write_byte+0 (used reg = )
28497 7601           E8         0797            call	_write_byte
28498 7604           83C4                   06  add	sp,*6
28499                                           !BCC_EOS
28500                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28501 7607           8B46         08            mov	ax,8[bp]
28502 760A           40                         inc	ax
28503 760B           8946         08            mov	8[bp],ax
28504                                           !BCC_EOS
28505                                           ! 3988         write_byte(ES, BX, inb(0x3c8)); BX++;
28506                                           ! Debug: list int = const $3C8 (used reg = )
28507 760E           B8                   03C8  mov	ax,#$3C8
28508 7611           50                         push	ax
28509                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28510 7612           E8         07B6            call	_inb
28511 7615           44                         inc	sp
28512 7616           44                         inc	sp
28513                                           ! Debug: list unsigned char = al+0 (used reg = )
28514 7617           30E4                       xor	ah,ah
28515 7619           50                         push	ax
28516                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28517 761A           FF76         08            push	8[bp]
28518                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28519 761D           FF76         06            push	6[bp]
28520                                           ! Debug: func () void = write_byte+0 (used reg = )
28521 7620           E8         0778            call	_write_byte
28522 7623           83C4                   06  add	sp,*6
28523                                           !BCC_EOS
28524                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28525 7626           8B46         08            mov	ax,8[bp]
28526 7629           40                         inc	ax
28527 762A           8946         08            mov	8[bp],ax
28528                                           !BCC_EOS
28529                                           ! 3989         write_byte(ES, BX, inb(0x3c6)); BX++;
28530                                           ! Debug: list int = const $3C6 (used reg = )
28531 762D           B8                   03C6  mov	ax,#$3C6
28532 7630           50                         push	ax
28533                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28534 7631           E8         0797            call	_inb
28535 7634           44                         inc	sp
28536 7635           44                         inc	sp
28537                                           ! Debug: list unsigned char = al+0 (used reg = )
28538 7636           30E4                       xor	ah,ah
28539 7638           50                         push	ax
28540                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28541 7639           FF76         08            push	8[bp]
28542                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28543 763C           FF76         06            push	6[bp]
28544                                           ! Debug: func () void = write_byte+0 (used reg = )
28545 763F           E8         0759            call	_write_byte
28546 7642           83C4                   06  add	sp,*6
28547                                           !BCC_EOS
28548                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28549 7645           8B46         08            mov	ax,8[bp]
28550 7648           40                         inc	ax
28551 7649           8946         08            mov	8[bp],ax
28552                                           !BCC_EOS
28553                                           ! 3990         outb(0x3c8,0x00);
28554                                           ! Debug: list int = const 0 (used reg = )
28555 764C           31C0                       xor	ax,ax
28556 764E           50                         push	ax
28557                                           ! Debug: list int = const $3C8 (used reg = )
28558 764F           B8                   03C8  mov	ax,#$3C8
28559 7652           50                         push	ax
28560                                           ! Debug: func () void = outb+0 (used reg = )
28561 7653           E8         078B            call	_outb
28562 7656           83C4                   04  add	sp,*4
28563                                           !BCC_EOS
28564                                           ! 3991         for(i=0;i<256*3;i++) {
28565                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28566 7659           31C0                       xor	ax,ax
28567 765B           8946         FE            mov	-2[bp],ax
28568                                           !BCC_EOS
28569                                           !BCC_EOS
28570 765E           EB           26            jmp .27D
28571                       00007660            .27E:
28572                                           ! 3992             write_byte(ES, BX, inb(0x3c9)); BX++;
28573                                           ! Debug: list int = const $3C9 (used reg = )
28574 7660           B8                   03C9  mov	ax,#$3C9
28575 7663           50                         push	ax
28576                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28577 7664           E8         0764            call	_inb
28578 7667           44                         inc	sp
28579 7668           44                         inc	sp
28580                                           ! Debug: list unsigned char = al+0 (used reg = )
28581 7669           30E4                       xor	ah,ah
28582 766B           50                         push	ax
28583                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28584 766C           FF76         08            push	8[bp]
28585                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28586 766F           FF76         06            push	6[bp]
28587                                           ! Debug: func () void = write_byte+0 (used reg = )
28588 7672           E8         0726            call	_write_byte
28589 7675           83C4                   06  add	sp,*6
28590                                           !BCC_EOS
28591                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28592 7678           8B46         08            mov	ax,8[bp]
28593 767B           40                         inc	ax
28594 767C           8946         08            mov	8[bp],ax
28595                                           !BCC_EOS
28596                                           ! 3993         }
28597                                           ! 3994         write_byte(ES, BX, 0); BX++;
28598                       0000767F            .27C:
28599                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28600 767F           8B46         FE            mov	ax,-2[bp]
28601 7682           40                         inc	ax
28602 7683           8946         FE            mov	-2[bp],ax
28603                       00007686            .27D:
28604                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28605 7686           8B46         FE            mov	ax,-2[bp]
28606 7689           3D                   0300  cmp	ax,#$300
28607 768C           72           D2            jb 	.27E
28608                       0000768E            .27F:
28609                       0000768E            .27B:
28610                                           ! Debug: list int = const 0 (used reg = )
28611 768E           31C0                       xor	ax,ax
28612 7690           50                         push	ax
28613                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28614 7691           FF76         08            push	8[bp]
28615                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28616 7694           FF76         06            push	6[bp]
28617                                           ! Debug: func () void = write_byte+0 (used reg = )
28618 7697           E8         0701            call	_write_byte
28619 769A           83C4                   06  add	sp,*6
28620                                           !BCC_EOS
28621                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28622 769D           8B46         08            mov	ax,8[bp]
28623 76A0           40                         inc	ax
28624 76A1           8946         08            mov	8[bp],ax
28625                                           !BCC_EOS
28626                                           ! 3995     }
28627                                           ! 3996     return BX;
28628                       000076A4            .279:
28629 76A4           8B46         08            mov	ax,8[bp]
28630 76A7           89EC                       mov	sp,bp
28631 76A9           5D                         pop	bp
28632 76AA           C3                         ret
28633                                           !BCC_EOS
28634                                           ! 3997 }
28635                                           ! 3998 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28636                                           ! 3999      Bit16u CX;Bit16u ES;Bit16u BX;
28637                       000076AB            _biosfn_restore_video_state:
28638                                           !BCC_EOS
28639                                           !BCC_EOS
28640                                           !BCC_EOS
28641                                           ! 4000 {
28642                                           ! 4001     Bit16u i, crtc_addr, v, addr1, ar_index;
28643                                           !BCC_EOS
28644                                           ! 4002     if (CX & 1) {
28645 76AB           55                         push	bp
28646 76AC           89E5                       mov	bp,sp
28647 76AE           83C4                   F6  add	sp,*-$A
28648                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28649 76B1           8A46         04            mov	al,4[bp]
28650 76B4           24                     01  and	al,*1
28651 76B6           84C0                       test	al,al
28652 76B8         0F84         02AA            beq 	.280
28653                       000076BC            .281:
28654                                           ! 4003         inb(0x3da);
28655                                           ! Debug: list int = const $3DA (used reg = )
28656 76BC           B8                   03DA  mov	ax,#$3DA
28657 76BF           50                         push	ax
28658                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28659 76C0           E8         0708            call	_inb
28660 76C3           44                         inc	sp
28661 76C4           44                         inc	sp
28662                                           !BCC_EOS
28663                                           ! 4004         crtc_addr = read_word(ES, BX + 0x40);
28664                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28665 76C5           8B46         08            mov	ax,8[bp]
28666                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28667 76C8           05                   0040  add	ax,*$40
28668 76CB           50                         push	ax
28669                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28670 76CC           FF76         06            push	6[bp]
28671                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28672 76CF           E8         06B6            call	_read_word
28673 76D2           83C4                   04  add	sp,*4
28674                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28675 76D5           8946         FC            mov	-4[bp],ax
28676                                           !BCC_EOS
28677                                           ! 4005         addr1 = BX;
28678                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28679 76D8           8B46         08            mov	ax,8[bp]
28680 76DB           8946         F8            mov	-8[bp],ax
28681                                           !BCC_EOS
28682                                           ! 4006         BX += 5;
28683                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28684 76DE           8B46         08            mov	ax,8[bp]
28685 76E1           05                   0005  add	ax,*5
28686 76E4           8946         08            mov	8[bp],ax
28687                                           !BCC_EOS
28688                                           ! 4007         for(i=1;i<=4;i++){
28689                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28690 76E7           B8                   0001  mov	ax,*1
28691 76EA           8946         FE            mov	-2[bp],ax
28692                                           !BCC_EOS
28693                                           !BCC_EOS
28694 76ED           EB           34            jmp .284
28695                       000076EF            .285:
28696                                           ! 4008             outb(0x3c4, i);
28697                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28698 76EF           FF76         FE            push	-2[bp]
28699                                           ! Debug: list int = const $3C4 (used reg = )
28700 76F2           B8                   03C4  mov	ax,#$3C4
28701 76F5           50                         push	ax
28702                                           ! Debug: func () void = outb+0 (used reg = )
28703 76F6           E8         06E8            call	_outb
28704 76F9           83C4                   04  add	sp,*4
28705                                           !BCC_EOS
28706                                           ! 4009             outb(0x3c5, read_byte(ES, BX)); BX++;
28707                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28708 76FC           FF76         08            push	8[bp]
28709                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28710 76FF           FF76         06            push	6[bp]
28711                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28712 7702           E8         0670            call	_read_byte
28713 7705           83C4                   04  add	sp,*4
28714                                           ! Debug: list unsigned char = al+0 (used reg = )
28715 7708           30E4                       xor	ah,ah
28716 770A           50                         push	ax
28717                                           ! Debug: list int = const $3C5 (used reg = )
28718 770B           B8                   03C5  mov	ax,#$3C5
28719 770E           50                         push	ax
28720                                           ! Debug: func () void = outb+0 (used reg = )
28721 770F           E8         06CF            call	_outb
28722 7712           83C4                   04  add	sp,*4
28723                                           !BCC_EOS
28724                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28725 7715           8B46         08            mov	ax,8[bp]
28726 7718           40                         inc	ax
28727 7719           8946         08            mov	8[bp],ax
28728                                           !BCC_EOS
28729                                           ! 4010         }
28730                                           ! 4011         ou
28731                                           ! 4011 tb(0x3c4, 0);
28732                       0000771C            .283:
28733                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28734 771C           8B46         FE            mov	ax,-2[bp]
28735 771F           40                         inc	ax
28736 7720           8946         FE            mov	-2[bp],ax
28737                       00007723            .284:
28738                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28739 7723           8B46         FE            mov	ax,-2[bp]
28740 7726           3D                   0004  cmp	ax,*4
28741 7729           76           C4            jbe	.285
28742                       0000772B            .286:
28743                       0000772B            .282:
28744                                           ! Debug: list int = const 0 (used reg = )
28745 772B           31C0                       xor	ax,ax
28746 772D           50                         push	ax
28747                                           ! Debug: list int = const $3C4 (used reg = )
28748 772E           B8                   03C4  mov	ax,#$3C4
28749 7731           50                         push	ax
28750                                           ! Debug: func () void = outb+0 (used reg = )
28751 7732           E8         06AC            call	_outb
28752 7735           83C4                   04  add	sp,*4
28753                                           !BCC_EOS
28754                                           ! 4012         outb(0x3c5, read_byte(ES, BX)); BX++;
28755                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28756 7738           FF76         08            push	8[bp]
28757                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28758 773B           FF76         06            push	6[bp]
28759                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28760 773E           E8         0634            call	_read_byte
28761 7741           83C4                   04  add	sp,*4
28762                                           ! Debug: list unsigned char = al+0 (used reg = )
28763 7744           30E4                       xor	ah,ah
28764 7746           50                         push	ax
28765                                           ! Debug: list int = const $3C5 (used reg = )
28766 7747           B8                   03C5  mov	ax,#$3C5
28767 774A           50                         push	ax
28768                                           ! Debug: func () void = outb+0 (used reg = )
28769 774B           E8         0693            call	_outb
28770 774E           83C4                   04  add	sp,*4
28771                                           !BCC_EOS
28772                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28773 7751           8B46         08            mov	ax,8[bp]
28774 7754           40                         inc	ax
28775 7755           8946         08            mov	8[bp],ax
28776                                           !BCC_EOS
28777                                           ! 4013         outw(crtc_addr,0x0011);
28778                                           ! Debug: list int = const $11 (used reg = )
28779 7758           B8                   0011  mov	ax,*$11
28780 775B           50                         push	ax
28781                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28782 775C           FF76         FC            push	-4[bp]
28783                                           ! Debug: func () void = outw+0 (used reg = )
28784 775F           E8         068F            call	_outw
28785 7762           83C4                   04  add	sp,*4
28786                                           !BCC_EOS
28787                                           ! 4014         for(i=0;i<=0x18;i++) {
28788                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28789 7765           31C0                       xor	ax,ax
28790 7767           8946         FE            mov	-2[bp],ax
28791                                           !BCC_EOS
28792                                           !BCC_EOS
28793 776A           EB           3C            jmp .289
28794                       0000776C            .28A:
28795                                           ! 4015             if (i != 0x11) {
28796                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28797 776C           8B46         FE            mov	ax,-2[bp]
28798 776F           3D                   0011  cmp	ax,*$11
28799 7772           74           26            je  	.28B
28800                       00007774            .28C:
28801                                           ! 4016                 outb(crtc_addr,i);
28802                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28803 7774           FF76         FE            push	-2[bp]
28804                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28805 7777           FF76         FC            push	-4[bp]
28806                                           ! Debug: func () void = outb+0 (used reg = )
28807 777A           E8         0664            call	_outb
28808 777D           83C4                   04  add	sp,*4
28809                                           !BCC_EOS
28810                                           ! 4017                 outb(crtc_addr+1, read_byte(ES, BX));
28811                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28812 7780           FF76         08            push	8[bp]
28813                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28814 7783           FF76         06            push	6[bp]
28815                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28816 7786           E8         05EC            call	_read_byte
28817 7789           83C4                   04  add	sp,*4
28818                                           ! Debug: list unsigned char = al+0 (used reg = )
28819 778C           30E4                       xor	ah,ah
28820 778E           50                         push	ax
28821                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28822 778F           8B46         FC            mov	ax,-4[bp]
28823                                           ! Debug: list unsigned int = ax+1 (used reg = )
28824 7792           40                         inc	ax
28825 7793           50                         push	ax
28826                                           ! Debug: func () void = outb+0 (used reg = )
28827 7794           E8         064A            call	_outb
28828 7797           83C4                   04  add	sp,*4
28829                                           !BCC_EOS
28830                                           ! 4018             }
28831                                           ! 4019             BX++;
28832                       0000779A            .28B:
28833                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28834 779A           8B46         08            mov	ax,8[bp]
28835 779D           40                         inc	ax
28836 779E           8946         08            mov	8[bp],ax
28837                                           !BCC_EOS
28838                                           ! 4020         }
28839                                           ! 4021         v = inb(0x3cc) & ~0x01;
28840                       000077A1            .288:
28841                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28842 77A1           8B46         FE            mov	ax,-2[bp]
28843 77A4           40                         inc	ax
28844 77A5           8946         FE            mov	-2[bp],ax
28845                       000077A8            .289:
28846                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28847 77A8           8B46         FE            mov	ax,-2[bp]
28848 77AB           3D                   0018  cmp	ax,*$18
28849 77AE           76           BC            jbe	.28A
28850                       000077B0            .28D:
28851                       000077B0            .287:
28852                                           ! Debug: list int = const $3CC (used reg = )
28853 77B0           B8                   03CC  mov	ax,#$3CC
28854 77B3           50                         push	ax
28855                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28856 77B4           E8         0614            call	_inb
28857 77B7           44                         inc	sp
28858 77B8           44                         inc	sp
28859                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28860 77B9           24                     FE  and	al,#$FE
28861                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28862 77BB           30E4                       xor	ah,ah
28863 77BD           8946         FA            mov	-6[bp],ax
28864                                           !BCC_EOS
28865                                           ! 4022         if (crtc_addr = 0x3d4)
28866                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28867 77C0           B8                   03D4  mov	ax,#$3D4
28868 77C3           8946         FC            mov	-4[bp],ax
28869 77C6           85C0                       test	ax,ax
28870 77C8           74           08            je  	.28E
28871                       000077CA            .28F:
28872                                           ! 4023             v |= 0x01;
28873                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28874 77CA           8B46         FA            mov	ax,-6[bp]
28875 77CD           0C                     01  or	al,*1
28876 77CF           8946         FA            mov	-6[bp],ax
28877                                           !BCC_EOS
28878                                           ! 4024         outb(0x3c2, v);
28879                       000077D2            .28E:
28880                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28881 77D2           FF76         FA            push	-6[bp]
28882                                           ! Debug: list int = const $3C2 (used reg = )
28883 77D5           B8                   03C2  mov	ax,#$3C2
28884 77D8           50                         push	ax
28885                                           ! Debug: func () void = outb+0 (used reg = )
28886 77D9           E8         0605            call	_outb
28887 77DC           83C4                   04  add	sp,*4
28888                                           !BCC_EOS
28889                                           ! 4025         outb(crtc_addr, 0x11);
28890                                           ! Debug: list int = const $11 (used reg = )
28891 77DF           B8                   0011  mov	ax,*$11
28892 77E2           50                         push	ax
28893                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28894 77E3           FF76         FC            push	-4[bp]
28895                                           ! Debug: func () void = outb+0 (used reg = )
28896 77E6           E8         05F8            call	_outb
28897 77E9           83C4                   04  add	sp,*4
28898                                           !BCC_EOS
28899                                           ! 4026         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28900                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28901 77EC           8B46         08            mov	ax,8[bp]
28902                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28903                                           ! Debug: list unsigned int = ax-7 (used reg = )
28904 77EF           05                   FFF9  add	ax,*-7
28905 77F2           50                         push	ax
28906                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28907 77F3           FF76         06            push	6[bp]
28908                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28909 77F6           E8         057C            call	_read_byte
28910 77F9           83C4                   04  add	sp,*4
28911                                           ! Debug: list unsigned char = al+0 (used reg = )
28912 77FC           30E4                       xor	ah,ah
28913 77FE           50                         push	ax
28914                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28915 77FF           8B46         FC            mov	ax,-4[bp]
28916                                           ! Debug: list unsigned int = ax+1 (used reg = )
28917 7802           40                         inc	ax
28918 7803           50                         push	ax
28919                                           ! Debug: func () void = outb+0 (used reg = )
28920 7804           E8         05DA            call	_outb
28921 7807           83C4                   04  add	sp,*4
28922                                           !BCC_EOS
28923                                           ! 4027         ar_index = read_byte(ES, addr1 + 0x03);
28924                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28925 780A           8B46         F8            mov	ax,-8[bp]
28926                                           ! Debug: list unsigned int = ax+3 (used reg = )
28927 780D           05                   0003  add	ax,*3
28928 7810           50                         push	ax
28929                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28930 7811           FF76         06            push	6[bp]
28931                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28932 7814           E8         055E            call	_read_byte
28933 7817           83C4                   04  add	sp,*4
28934                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28935 781A           30E4                       xor	ah,ah
28936 781C           8946         F6            mov	-$A[bp],ax
28937                                           !BCC_EOS
28938                                           ! 4028         inb(0x3da);
28939                                           ! Debug: list int = const $3DA (used reg = )
28940 781F           B8                   03DA  mov	ax,#$3DA
28941 7822           50                         push	ax
28942                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28943 7823           E8         05A5            call	_inb
28944 7826           44                         inc	sp
28945 7827           44                         inc	sp
28946                                           !BCC_EOS
28947                                           ! 4029         for(i=0;i<=0x13;i++) {
28948                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28949 7828           31C0                       xor	ax,ax
28950 782A           8946         FE            mov	-2[bp],ax
28951                                           !BCC_EOS
28952                                           !BCC_EOS
28953 782D           EB           3C            jmp .292
28954                       0000782F            .293:
28955                                           ! 4030             outb(0x3c0, i | (ar_index & 0x20));
28956                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28957 782F           8A46         F6            mov	al,-$A[bp]
28958 7832           24                     20  and	al,*$20
28959                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28960                                           ! Debug: expression subtree swapping
28961 7834           30E4                       xor	ah,ah
28962 7836           0B46         FE            or	ax,-2[bp]
28963                                           ! Debug: list unsigned int = ax+0 (used reg = )
28964 7839           50                         push	ax
28965                                           ! Debug: list int = const $3C0 (used reg = )
28966 783A           B8                   03C0  mov	ax,#$3C0
28967 783D           50                         push	ax
28968                                           ! Debug: func () void = outb+0 (used reg = )
28969 783E           E8         05A0            call	_outb
28970 7841           83C4                   04  add	sp,*4
28971                                           !BCC_EOS
28972                                           ! 4031             outb(0x3c0, read_byte(ES, BX)); BX++;
28973                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28974 7844           FF76         08            push	8[bp]
28975                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28976 7847           FF76         06            push	6[bp]
28977                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28978 784A           E8         0528            call	_read_byte
28979 784D           83C4                   04  add	sp,*4
28980                                           ! Debug: list unsigned char = al+0 (used reg = )
28981 7850           30E4                       xor	ah,ah
28982 7852           50                         push	ax
28983                                           ! Debug: list int = const $3C0 (used reg = )
28984 7853           B8                   03C0  mov	ax,#$3C0
28985 7856           50                         push	ax
28986                                           ! Debug: func () void = outb+0 (used reg = )
28987 7857           E8         0587            call	_outb
28988 785A           83C4                   04  add	sp,*4
28989                                           !BCC_EOS
28990                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28991 785D           8B46         08            mov	ax,8[bp]
28992 7860           40                         inc	ax
28993 7861           8946         08            mov	8[bp],ax
28994                                           !BCC_EOS
28995                                           ! 4032         }
28996                                           ! 4033         outb(0x3c0, ar_index);
28997                       00007864            .291:
28998                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28999 7864           8B46         FE            mov	ax,-2[bp]
29000 7867           40                         inc	ax
29001 7868           8946         FE            mov	-2[bp],ax
29002                       0000786B            .292:
29003                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
29004 786B           8B46         FE            mov	ax,-2[bp]
29005 786E           3D                   0013  cmp	ax,*$13
29006 7871           76           BC            jbe	.293
29007                       00007873            .294:
29008                       00007873            .290:
29009                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
29010 7873           FF76         F6            push	-$A[bp]
29011                                           ! Debug: list int = const $3C0 (used reg = )
29012 7876           B8                   03C0  mov	ax,#$3C0
29013 7879           50                         push	ax
29014                                           ! Debug: func () void = outb+0 (used reg = )
29015 787A           E8         0564            call	_outb
29016 787D           83C4                   04  add	sp,*4
29017                                           !BCC_EOS
29018                                           ! 4034         inb(0x3da);
29019                                           ! Debug: list int = const $3DA (used reg = )
29020 7880           B8                   03DA  mov	ax,#$3DA
29021 7883           50                         push	ax
29022                                           ! Debug: func () unsigned char = inb+0 (used reg = )
29023 7884           E8         0544            call	_inb
29024 7887           44                         inc	sp
29025 7888           44                         inc	sp
29026                                           !BCC_EOS
29027                                           ! 4035         for(i=0;i<=8;i++) {
29028                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29029 7889           31C0                       xor	ax,ax
29030 788B           8946         FE            mov	-2[bp],ax
29031                                           !BCC_EOS
29032                                           !BCC_EOS
29033 788E           EB           34            jmp .297
29034                       00007890            .298:
29035                                           ! 4036             outb(0x3ce,i);
29036                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
29037 7890           FF76         FE            push	-2[bp]
29038                                           ! Debug: list int = const $3CE (used reg = )
29039 7893           B8                   03CE  mov	ax,#$3CE
29040 7896           50                         push	ax
29041                                           ! Debug: func () void = outb+0 (used reg = )
29042 7897           E8         0547            call	_outb
29043 789A           83C4                   04  add	sp,*4
29044                                           !BCC_EOS
29045                                           ! 4037             outb(0x3cf, read_byte(ES, BX)); BX++;
29046                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29047 789D           FF76         08            push	8[bp]
29048                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29049 78A0           FF76         06            push	6[bp]
29050                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29051 78A3           E8         04CF            call	_read_byte
29052 78A6           83C4                   04  add	sp,*4
29053                                           ! Debug: list unsigned char = al+0 (used reg = )
29054 78A9           30E4                       xor	ah,ah
29055 78AB           50                         push	ax
29056                                           ! Debug: list int = const $3CF (used reg = )
29057 78AC           B8                   03CF  mov	ax,#$3CF
29058 78AF           50                         push	ax
29059                                           ! Debug: func () void = outb+0 (used reg = )
29060 78B0           E8         052E            call	_outb
29061 78B3           83C4                   04  add	sp,*4
29062                                           !BCC_EOS
29063                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29064 78B6           8B46         08            mov	ax,8[bp]
29065 78B9           40                         inc	ax
29066 78BA           8946         08            mov	8[bp],ax
29067                                           !BCC_EOS
29068                                           ! 4038         }
29069                                           ! 4039         BX += 2;
29070                       000078BD            .296:
29071                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29072 78BD           8B46         FE            mov	ax,-2[bp]
29073 78C0           40                         inc	ax
29074 78C1           8946         FE            mov	-2[bp],ax
29075                       000078C4            .297:
29076                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29077 78C4           8B46         FE            mov	ax,-2[bp]
29078 78C7           3D                   0008  cmp	ax,*8
29079 78CA           76           C4            jbe	.298
29080                       000078CC            .299:
29081                       000078CC            .295:
29082                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29083 78CC           8B46         08            mov	ax,8[bp]
29084 78CF           40                         inc	ax
29085 78D0           40                         inc	ax
29086 78D1           8946         08            mov	8[bp],ax
29087                                           !BCC_EOS
29088                                           ! 4040         BX += 4;
29089                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
29090 78D4           8B46         08            mov	ax,8[bp]
29091 78D7           05                   0004  add	ax,*4
29092 78DA           8946         08            mov	8[bp],ax
29093                                           !BCC_EOS
29094                                           ! 4041         outb(0x3c4, read_byte(ES, addr1)); addr1++;
29095                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29096 78DD           FF76         F8            push	-8[bp]
29097                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29098 78E0           FF76         06            push	6[bp]
29099                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29100 78E3           E8         048F            call	_read_byte
29101 78E6           83C4                   04  add	sp,*4
29102                                           ! Debug: list unsigned char = al+0 (used reg = )
29103 78E9           30E4                       xor	ah,ah
29104 78EB           50                         push	ax
29105                                           ! Debug: list int = const $3C4 (used reg = )
29106 78EC           B8                   03C4  mov	ax,#$3C4
29107 78EF           50                         push	ax
29108                                           ! Debug: func () void = outb+0 (used reg = )
29109 78F0           E8         04EE            call	_outb
29110 78F3           83C4                   04  add	sp,*4
29111                                           !BCC_EOS
29112                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29113 78F6           8B46         F8            mov	ax,-8[bp]
29114 78F9           40                         inc	ax
29115 78FA           8946         F8            mov	-8[bp],ax
29116                                           !BCC_EOS
29117                                           ! 4042         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
29118                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29119 78FD           FF76         F8            push	-8[bp]
29120                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29121 7900           FF76         06            push	6[bp]
29122                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29123 7903           E8         046F            call	_read_byte
29124 7906           83C4                   04  add	sp,*4
29125                                           ! Debug: list unsigned char = al+0 (used reg = )
29126 7909           30E4                       xor	ah,ah
29127 790B           50                         push	ax
29128                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
29129 790C           FF76         FC            push	-4[bp]
29130                                           ! Debug: func () void = outb+0 (used reg = )
29131 790F           E8         04CF            call	_outb
29132 7912           83C4                   04  add	sp,*4
29133                                           !BCC_EOS
29134                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29135 7915           8B46         F8            mov	ax,-8[bp]
29136 7918           40                         inc	ax
29137 7919           8946         F8            mov	-8[bp],ax
29138                                           !BCC_EOS
29139                                           ! 4043         outb(0x3ce, read_byte(ES, addr1)); addr1++;
29140                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29141 791C           FF76         F8            push	-8[bp]
29142                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29143 791F           FF76         06            push	6[bp]
29144                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29145 7922           E8         0450            call	_read_byte
29146 7925           83C4                   04  add	sp,*4
29147                                           ! Debug: list unsigned char = al+0 (used reg = )
29148 7928           30E4                       xor	ah,ah
29149 792A           50                         push	ax
29150                                           ! Debug: list int = const $3CE (used reg = )
29151 792B           B8                   03CE  mov	ax,#$3CE
29152 792E           50                         push	ax
29153                                           ! Debug: func () void = outb+0 (used reg = )
29154 792F           E8         04AF            call	_outb
29155 7932           83C4                   04  add	sp,*4
29156                                           !BCC_EOS
29157                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29158 7935           8B46         F8            mov	ax,-8[bp]
29159 7938           40                         inc	ax
29160 7939           8946         F8            mov	-8[bp],ax
29161                                           !BCC_EOS
29162                                           ! 4044         addr1++;
29163                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29164 793C           8B46         F8            mov	ax,-8[bp]
29165 793F           40                         inc	ax
29166 7940           8946         F8            mov	-8[bp],ax
29167                                           !BCC_EOS
29168                                           ! 4045         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
29169                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
29170 7943           FF76         F8            push	-8[bp]
29171                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29172 7946           FF76         06            push	6[bp]
29173                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29174 7949           E8         0429            call	_read_byte
29175 794C           83C4                   04  add	sp,*4
29176                                           ! Debug: list unsigned char = al+0 (used reg = )
29177 794F           30E4                       xor	ah,ah
29178 7951           50                         push	ax
29179                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
29180 7952           8B46         FC            mov	ax,-4[bp]
29181                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
29182                                           ! Debug: list unsigned int = ax+6 (used reg = )
29183 7955           05                   0006  add	ax,*6
29184 7958           50                         push	ax
29185                                           ! Debug: func () void = outb+0 (used reg = )
29186 7959           E8         0485            call	_outb
29187 795C           83C4                   04  add	sp,*4
29188                                           !BCC_EOS
29189                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
29190 795F           8B46         F8            mov	ax,-8[bp]
29191 7962           40                         inc	ax
29192 7963           8946         F8            mov	-8[bp],ax
29193                                           !BCC_EOS
29194                                           ! 4046     }
29195                                           ! 4047     if (CX & 2) {
29196                       00007966            .280:
29197                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
29198 7966           8A46         04            mov	al,4[bp]
29199 7969           24                     02  and	al,*2
29200 796B           84C0                       test	al,al
29201 796D         0F84         0270            beq 	.29A
29202                       00007971            .29B:
29203                                           ! 4048         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
29204                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29205 7971           FF76         08            push	8[bp]
29206                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29207 7974           FF76         06            push	6[bp]
29208                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29209 7977           E8         03FB            call	_read_byte
29210 797A           83C4                   04  add	sp,*4
29211                                           ! Debug: list unsigned char = al+0 (used reg = )
29212 797D           30E4                       xor	ah,ah
29213 797F           50                         push	ax
29214                                           ! Debug: list int = const $49 (used reg = )
29215 7980           B8                   0049  mov	ax,*$49
29216 7983           50                         push	ax
29217                                           ! Debug: list int = const $40 (used reg = )
29218 7984           B8                   0040  mov	ax,*$40
29219 7987           50                         push	ax
29220                                           ! Debug: func () void = write_byte+0 (used reg = )
29221 7988           E8         0410            call	_write_byte
29222 798B           83C4                   06  add	sp,*6
29223                                           !BCC_EOS
29224                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29225 798E           8B46         08            mov	ax,8[bp]
29226 7991           40                         inc	ax
29227 7992           8946         08            mov	8[bp],ax
29228                                           !BCC_EOS
29229                                           ! 4049         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
29230                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29231 7995           FF76         08            push	8[bp]
29232                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29233 7998           FF76         06            push	6[bp]
29234                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29235 799B           E8         03EA            call	_read_word
29236 799E           83C4                   04  add	sp,*4
29237                                           ! Debug: list unsigned short = ax+0 (used reg = )
29238 79A1           50                         push	ax
29239                                           ! Debug: list int = const $4A (used reg = )
29240 79A2           B8                   004A  mov	ax,*$4A
29241 79A5           50                         push	ax
29242                                           ! Debug: list int = const $40 (used reg = )
29243 79A6           B8                   0040  mov	ax,*$40
29244 79A9           50                         push	ax
29245                                           ! Debug: func () void = write_word+0 (used reg = )
29246 79AA           E8         0406            call	_write_word
29247 79AD           83C4                   06  add	sp,*6
29248                                           !BCC_EOS
29249                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29250 79B0           8B46         08            mov	ax,8[bp]
29251 79B3           40                         inc	ax
29252 79B4           40                         inc	ax
29253 79B5           8946         08            mov	8[bp],ax
29254                                           !BCC_EOS
29255                                           ! 4050         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
29256                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29257 79B8           FF76         08            push	8[bp]
29258                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29259 79BB           FF76         06            push	6[bp]
29260                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29261 79BE           E8         03C7            call	_read_word
29262 79C1           83C4                   04  add	sp,*4
29263                                           ! Debug: list unsigned short = ax+0 (used reg = )
29264 79C4           50                         push	ax
29265                                           ! Debug: list int = const $4C (used reg = )
29266 79C5           B8                   004C  mov	ax,*$4C
29267 79C8           50                         push	ax
29268                                           ! Debug: list int = const $40 (used reg = )
29269 79C9           B8                   0040  mov	ax,*$40
29270 79CC           50                         push	ax
29271                                           ! Debug: func () void = write_word+0 (used reg = )
29272 79CD           E8         03E3            call	_write_word
29273 79D0           83C4                   06  add	sp,*6
29274                                           !BCC_EOS
29275                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29276 79D3           8B46         08            mov	ax,8[bp]
29277 79D6           40                         inc	ax
29278 79D7           40                         inc	ax
29279 79D8           8946         08            mov	8[bp],ax
29280                                           !BCC_EOS
29281                                           ! 4051         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
29282                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29283 79DB           FF76         08            push	8[bp]
29284                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29285 79DE           FF76         06            push	6[bp]
29286                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29287 79E1           E8         03A4            call	_read_word
29288 79E4           83C4                   04  add	sp,*4
29289                                           ! Debug: list unsigned short = ax+0 (used reg = )
29290 79E7           50                         push	ax
29291                                           ! Debug: list int = const $63 (used reg = )
29292 79E8           B8                   0063  mov	ax,*$63
29293 79EB           50                         push	ax
29294                                           ! Debug: list int = const $40 (used reg = )
29295 79EC           B8                   0040  mov	ax,*$40
29296 79EF           50                         push	ax
29297                                           ! Debug: func () void = write_word+0 (used reg = )
29298 79F0           E8         03C0            call	_write_word
29299 79F3           83C4                   06  add	sp,*6
29300                                           !BCC_EOS
29301                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29302 79F6           8B46         08            mov	ax,8[bp]
29303 79F9           40                         inc	ax
29304 79FA           40                         inc	ax
29305 79FB           8946         08            mov	8[bp],ax
29306                                           !BCC_EOS
29307                                           ! 4052         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
29308                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29309 79FE           FF76         08            push	8[bp]
29310                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29311 7A01           FF76         06            push	6[bp]
29312                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29313 7A04           E8         036E            call	_read_byte
29314 7A07           83C4                   04  add	sp,*4
29315                                           ! Debug: list unsigned char = al+0 (used reg = )
29316 7A0A           30E4                       xor	ah,ah
29317 7A0C           50                         push	ax
29318                                           ! Debug: list int = const $84 (used reg = )
29319 7A0D           B8                   0084  mov	ax,#$84
29320 7A10           50                         push	ax
29321                                           ! Debug: list int = const $40 (used reg = )
29322 7A11           B8                   0040  mov	ax,*$40
29323 7A14           50                         push	ax
29324                                           ! Debug: func () void = write_byte+0 (used reg = )
29325 7A15           E8         0383            call	_write_byte
29326 7A18           83C4                   06  add	sp,*6
29327                                           !BCC_EOS
29328                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29329 7A1B           8B46         08            mov	ax,8[bp]
29330 7A1E           40                         inc	ax
29331 7A1F           8946         08            mov	8[bp],ax
29332                                           !BCC_EOS
29333                                           ! 4053         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
29334                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29335 7A22           FF76         08            push	8[bp]
29336                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29337 7A25           FF76         06            push	6[bp]
29338                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29339 7A28           E8         035D            call	_read_word
29340 7A2B           83C4                   04  add	sp,*4
29341                                           ! Debug: list unsigned short = ax+0 (used reg = )
29342 7A2E           50                         push	ax
29343                                           ! Debug: list int = const $85 (used reg = )
29344 7A2F           B8                   0085  mov	ax,#$85
29345 7A32           50                         push	ax
29346                                           ! Debug: list int = const $40 (used reg = )
29347 7A33           B8                   0040  mov	ax,*$40
29348 7A36           50                         push	ax
29349                                           ! Debug: func () void = write_word+0 (used reg = )
29350 7A37           E8         0379            call	_write_word
29351 7A3A           83C4                   06  add	sp,*6
29352                                           !BCC_EOS
29353                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29354 7A3D           8B46         08            mov	ax,8[bp]
29355 7A40           40                         inc	ax
29356 7A41           40                         inc	ax
29357 7A42           8946         08            mov	8[bp],ax
29358                                           !BCC_EOS
29359                                           ! 4054         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
29360                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29361 7A45           FF76         08            push	8[bp]
29362                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29363 7A48           FF76         06            push	6[bp]
29364                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29365 7A4B           E8         0327            call	_read_byte
29366 7A4E           83C4                   04  add	sp,*4
29367                                           ! Debug: list unsigned char = al+0 (used reg = )
29368 7A51           30E4                       xor	ah,ah
29369 7A53           50                         push	ax
29370                                           ! Debug: list int = const $87 (used reg = )
29371 7A54           B8                   0087  mov	ax,#$87
29372 7A57           50                         push	ax
29373                                           ! Debug: list int = const $40 (used reg = )
29374 7A58           B8                   0040  mov	ax,*$40
29375 7A5B           50                         push	ax
29376                                           ! Debug: func () void = write_byte+0 (used reg = )
29377 7A5C           E8         033C            call	_write_byte
29378 7A5F           83C4                   06  add	sp,*6
29379                                           !BCC_EOS
29380                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29381 7A62           8B46         08            mov	ax,8[bp]
29382 7A65           40                         inc	ax
29383 7A66           8946         08            mov	8[bp],ax
29384                                           !BCC_EOS
29385                                           ! 4055         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
29386                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29387 7A69           FF76         08            push	8[bp]
29388                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29389 7A6C           FF76         06            push	6[bp]
29390                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29391 7A6F           E8         0303            call	_read_byte
29392 7A72           83C4                   04  add	sp,*4
29393                                           ! Debug: list unsigned char = al+0 (used reg = )
29394 7A75           30E4                       xor	ah,ah
29395 7A77           50                         push	ax
29396                                           ! Debug: list int = const $88 (used reg = )
29397 7A78           B8                   0088  mov	ax,#$88
29398 7A7B           50                         push	ax
29399                                           ! Debug: list int = const $40 (used reg = )
29400 7A7C           B8                   0040  mov	ax,*$40
29401 7A7F           50                         push	ax
29402                                           ! Debug: func () void = write_byte+0 (used reg = )
29403 7A80           E8         0318            call	_write_byte
29404 7A83           83C4                   06  add	sp,*6
29405                                           !BCC_EOS
29406                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29407 7A86           8B46         08            mov	ax,8[bp]
29408 7A89           40                         inc	ax
29409 7A8A           8946         08            mov	8[bp],ax
29410                                           !BCC_EOS
29411                                           ! 4056         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
29412                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29413 7A8D           FF76         08            push	8[bp]
29414                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29415 7A90           FF76         06            push	6[bp]
29416                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29417 7A93           E8         02DF            call	_read_byte
29418 7A96           83C4                   04  add	sp,*4
29419                                           ! Debug: list unsigned char = al+0 (used reg = )
29420 7A99           30E4                       xor	ah,ah
29421 7A9B           50                         push	ax
29422                                           ! Debug: list int = const $89 (used reg = )
29423 7A9C           B8                   0089  mov	ax,#$89
29424 7A9F           50                         push	ax
29425                                           ! Debug: list int = const $40 (used reg = )
29426 7AA0           B8                   0040  mov	ax,*$40
29427 7AA3           50                         push	ax
29428                                           ! Debug: func () void = write_byte+0 (used reg = )
29429 7AA4           E8         02F4            call	_write_byte
29430 7AA7           83C4                   06  add	sp,*6
29431                                           !BCC_EOS
29432                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29433 7AAA           8B46         08            mov	ax,8[bp]
29434 7AAD           40                         inc	ax
29435 7AAE           8946         08            mov	8[bp],ax
29436                                           !BCC_EOS
29437                                           ! 4057         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29438                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29439 7AB1           FF76         08            push	8[bp]
29440                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29441 7AB4           FF76         06            push	6[bp]
29442                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29443 7AB7           E8         02CE            call	_read_word
29444 7ABA           83C4                   04  add	sp,*4
29445                                           ! Debug: list unsigned short = ax+0 (used reg = )
29446 7ABD           50                         push	ax
29447                                           ! Debug: list int = const $60 (used reg = )
29448 7ABE           B8                   0060  mov	ax,*$60
29449 7AC1           50                         push	ax
29450                                           ! Debug: list int = const $40 (used reg = )
29451 7AC2           B8                   0040  mov	ax,*$40
29452 7AC5           50                         push	ax
29453                                           ! Debug: func () void = write_word+0 (used reg = )
29454 7AC6           E8         02EA            call	_write_word
29455 7AC9           83C4                   06  add	sp,*6
29456                                           !BCC_EOS
29457                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29458 7ACC           8B46         08            mov	ax,8[bp]
29459 7ACF           40                         inc	ax
29460 7AD0           40                         inc	ax
29461 7AD1           8946         08            mov	8[bp],ax
29462                                           !BCC_EOS
29463                                           ! 4058         for(i=0;i<8;i++) {
29464                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29465 7AD4           31C0                       xor	ax,ax
29466 7AD6           8946         FE            mov	-2[bp],ax
29467                                           !BCC_EOS
29468                                           !BCC_EOS
29469 7AD9           EB           2F            jmp .29E
29470                       00007ADB            .29F:
29471                                           ! 4059             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29472                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29473 7ADB           FF76         08            push	8[bp]
29474                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29475 7ADE           FF76         06            push	6[bp]
29476                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29477 7AE1           E8         02A4            call	_read_word
29478 7AE4           83C4                   04  add	sp,*4
29479                                           ! Debug: list unsigned short = ax+0 (used reg = )
29480 7AE7           50                         push	ax
29481                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29482                                           ! Debug: expression subtree swapping
29483 7AE8           8B46         FE            mov	ax,-2[bp]
29484 7AEB           D1E0                       shl	ax,*1
29485                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29486                                           ! Debug: expression subtree swapping
29487                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29488 7AED           05                   0050  add	ax,*$50
29489 7AF0           50                         push	ax
29490                                           ! Debug: list int = const $40 (used reg = )
29491 7AF1           B8                   0040  mov	ax,*$40
29492 7AF4           50                         push	ax
29493                                           ! Debug: func () void = write_word+0 (used reg = )
29494 7AF5           E8         02BB            call	_write_word
29495 7AF8           83C4                   06  add	sp,*6
29496                                           !BCC_EOS
29497                                           ! 4060             BX += 2;
29498                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29499 7AFB           8B46         08            mov	ax,8[bp]
29500 7AFE           40                         inc	ax
29501 7AFF           40                         inc	ax
29502 7B00           8946         08            mov	8[bp],ax
29503                                           !BCC_EOS
29504                                           ! 4061         }
29505                                           ! 4062         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29506                       00007B03            .29D:
29507                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29508 7B03           8B46         FE            mov	ax,-2[bp]
29509 7B06           40                         inc	ax
29510 7B07           8946         FE            mov	-2[bp],ax
29511                       00007B0A            .29E:
29512                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29513 7B0A           8B46         FE            mov	ax,-2[bp]
29514 7B0D           3D                   0008  cmp	ax,*8
29515 7B10           72           C9            jb 	.29F
29516                       00007B12            .2A0:
29517                       00007B12            .29C:
29518                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29519 7B12           FF76         08            push	8[bp]
29520                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29521 7B15           FF76         06            push	6[bp]
29522                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29523 7B18           E8         026D            call	_read_word
29524 7B1B           83C4                   04  add	sp,*4
29525                                           ! Debug: list unsigned short = ax+0 (used reg = )
29526 7B1E           50                         push	ax
29527                                           ! Debug: list int = const $4E (used reg = )
29528 7B1F           B8                   004E  mov	ax,*$4E
29529 7B22           50                         push	ax
29530                                           ! Debug: list int = const $40 (used reg = )
29531 7B23           B8                   0040  mov	ax,*$40
29532 7B26           50                         push	ax
29533                                           ! Debug: func () void = write_word+0 (used reg = )
29534 7B27           E8         0289            call	_write_word
29535 7B2A           83C4                   06  add	sp,*6
29536                                           !BCC_EOS
29537                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29538 7B2D           8B46         08            mov	ax,8[bp]
29539 7B30           40                         inc	ax
29540 7B31           40                         inc	ax
29541 7B32           8946         08            mov	8[bp],ax
29542                                           !BCC_EOS
29543                                           ! 4063         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29544                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29545 7B35           FF76         08            push	8[bp]
29546                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29547 7B38           FF76         06            push	6[bp]
29548                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29549 7B3B           E8         0237            call	_read_byte
29550 7B3E           83C4                   04  add	sp,*4
29551                                           ! Debug: list unsigned char = al+0 (used reg = )
29552 7B41           30E4                       xor	ah,ah
29553 7B43           50                         push	ax
29554                                           ! Debug: list int = const $62 (used reg = )
29555 7B44           B8                   0062  mov	ax,*$62
29556 7B47           50                         push	ax
29557                                           ! Debug: list int = const $40 (used reg = )
29558 7B48           B8                   0040  mov	ax,*$40
29559 7B4B           50                         push	ax
29560                                           ! Debug: func () void = write_byte+0 (used reg = )
29561 7B4C           E8         024C            call	_write_byte
29562 7B4F           83C4                   06  add	sp,*6
29563                                           !BCC_EOS
29564                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29565 7B52           8B46         08            mov	ax,8[bp]
29566 7B55           40                         inc	ax
29567 7B56           8946         08            mov	8[bp],ax
29568                                           !BCC_EOS
29569                                           ! 4064         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29570                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29571 7B59           FF76         08            push	8[bp]
29572                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29573 7B5C           FF76         06            push	6[bp]
29574                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29575 7B5F           E8         0226            call	_read_word
29576 7B62           83C4                   04  add	sp,*4
29577                                           ! Debug: list unsigned short = ax+0 (used reg = )
29578 7B65           50                         push	ax
29579                                           ! Debug: list int = const $7C (used reg = )
29580 7B66           B8                   007C  mov	ax,*$7C
29581 7B69           50                         push	ax
29582                                           ! Debug: list int = const 0 (used reg = )
29583 7B6A           31C0                       xor	ax,ax
29584 7B6C           50                         push	ax
29585                                           ! Debug: func () void = write_word+0 (used reg = )
29586 7B6D           E8         0243            call	_write_word
29587 7B70           83C4                   06  add	sp,*6
29588                                           !BCC_EOS
29589                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29590 7B73           8B46         08            mov	ax,8[bp]
29591 7B76           40                         inc	ax
29592 7B77           40                         inc	ax
29593 7B78           8946         08            mov	8[bp],ax
29594                                           !BCC_EOS
29595                                           ! 4065         write_word(
29596                                           ! 4065 0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29597                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29598 7B7B           FF76         08            push	8[bp]
29599                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29600 7B7E           FF76         06            push	6[bp]
29601                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29602 7B81           E8         0204            call	_read_word
29603 7B84           83C4                   04  add	sp,*4
29604                                           ! Debug: list unsigned short = ax+0 (used reg = )
29605 7B87           50                         push	ax
29606                                           ! Debug: list int = const $7E (used reg = )
29607 7B88           B8                   007E  mov	ax,*$7E
29608 7B8B           50                         push	ax
29609                                           ! Debug: list int = const 0 (used reg = )
29610 7B8C           31C0                       xor	ax,ax
29611 7B8E           50                         push	ax
29612                                           ! Debug: func () void = write_word+0 (used reg = )
29613 7B8F           E8         0221            call	_write_word
29614 7B92           83C4                   06  add	sp,*6
29615                                           !BCC_EOS
29616                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29617 7B95           8B46         08            mov	ax,8[bp]
29618 7B98           40                         inc	ax
29619 7B99           40                         inc	ax
29620 7B9A           8946         08            mov	8[bp],ax
29621                                           !BCC_EOS
29622                                           ! 4066         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29623                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29624 7B9D           FF76         08            push	8[bp]
29625                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29626 7BA0           FF76         06            push	6[bp]
29627                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29628 7BA3           E8         01E2            call	_read_word
29629 7BA6           83C4                   04  add	sp,*4
29630                                           ! Debug: list unsigned short = ax+0 (used reg = )
29631 7BA9           50                         push	ax
29632                                           ! Debug: list int = const $10C (used reg = )
29633 7BAA           B8                   010C  mov	ax,#$10C
29634 7BAD           50                         push	ax
29635                                           ! Debug: list int = const 0 (used reg = )
29636 7BAE           31C0                       xor	ax,ax
29637 7BB0           50                         push	ax
29638                                           ! Debug: func () void = write_word+0 (used reg = )
29639 7BB1           E8         01FF            call	_write_word
29640 7BB4           83C4                   06  add	sp,*6
29641                                           !BCC_EOS
29642                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29643 7BB7           8B46         08            mov	ax,8[bp]
29644 7BBA           40                         inc	ax
29645 7BBB           40                         inc	ax
29646 7BBC           8946         08            mov	8[bp],ax
29647                                           !BCC_EOS
29648                                           ! 4067         write_word(0, 0x43 * 4 + 2, read_word(ES, BX)); BX += 2;
29649                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29650 7BBF           FF76         08            push	8[bp]
29651                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29652 7BC2           FF76         06            push	6[bp]
29653                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29654 7BC5           E8         01C0            call	_read_word
29655 7BC8           83C4                   04  add	sp,*4
29656                                           ! Debug: list unsigned short = ax+0 (used reg = )
29657 7BCB           50                         push	ax
29658                                           ! Debug: list int = const $10E (used reg = )
29659 7BCC           B8                   010E  mov	ax,#$10E
29660 7BCF           50                         push	ax
29661                                           ! Debug: list int = const 0 (used reg = )
29662 7BD0           31C0                       xor	ax,ax
29663 7BD2           50                         push	ax
29664                                           ! Debug: func () void = write_word+0 (used reg = )
29665 7BD3           E8         01DD            call	_write_word
29666 7BD6           83C4                   06  add	sp,*6
29667                                           !BCC_EOS
29668                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29669 7BD9           8B46         08            mov	ax,8[bp]
29670 7BDC           40                         inc	ax
29671 7BDD           40                         inc	ax
29672 7BDE           8946         08            mov	8[bp],ax
29673                                           !BCC_EOS
29674                                           ! 4068     }
29675                                           ! 4069     if (CX & 4) {
29676                       00007BE1            .29A:
29677                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29678 7BE1           8A46         04            mov	al,4[bp]
29679 7BE4           24                     04  and	al,*4
29680 7BE6           84C0                       test	al,al
29681 7BE8         0F84         0096            beq 	.2A1
29682                       00007BEC            .2A2:
29683                                           ! 4070         BX++;
29684                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29685 7BEC           8B46         08            mov	ax,8[bp]
29686 7BEF           40                         inc	ax
29687 7BF0           8946         08            mov	8[bp],ax
29688                                           !BCC_EOS
29689                                           ! 4071         v = read_byte(ES, BX); BX++;
29690                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29691 7BF3           FF76         08            push	8[bp]
29692                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29693 7BF6           FF76         06            push	6[bp]
29694                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29695 7BF9           E8         0179            call	_read_byte
29696 7BFC           83C4                   04  add	sp,*4
29697                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29698 7BFF           30E4                       xor	ah,ah
29699 7C01           8946         FA            mov	-6[bp],ax
29700                                           !BCC_EOS
29701                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29702 7C04           8B46         08            mov	ax,8[bp]
29703 7C07           40                         inc	ax
29704 7C08           8946         08            mov	8[bp],ax
29705                                           !BCC_EOS
29706                                           ! 4072         outb(0x3c6, read_byte(ES, BX)); BX++;
29707                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29708 7C0B           FF76         08            push	8[bp]
29709                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29710 7C0E           FF76         06            push	6[bp]
29711                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29712 7C11           E8         0161            call	_read_byte
29713 7C14           83C4                   04  add	sp,*4
29714                                           ! Debug: list unsigned char = al+0 (used reg = )
29715 7C17           30E4                       xor	ah,ah
29716 7C19           50                         push	ax
29717                                           ! Debug: list int = const $3C6 (used reg = )
29718 7C1A           B8                   03C6  mov	ax,#$3C6
29719 7C1D           50                         push	ax
29720                                           ! Debug: func () void = outb+0 (used reg = )
29721 7C1E           E8         01C0            call	_outb
29722 7C21           83C4                   04  add	sp,*4
29723                                           !BCC_EOS
29724                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29725 7C24           8B46         08            mov	ax,8[bp]
29726 7C27           40                         inc	ax
29727 7C28           8946         08            mov	8[bp],ax
29728                                           !BCC_EOS
29729                                           ! 4073         outb(0x3c8,0x00);
29730                                           ! Debug: list int = const 0 (used reg = )
29731 7C2B           31C0                       xor	ax,ax
29732 7C2D           50                         push	ax
29733                                           ! Debug: list int = const $3C8 (used reg = )
29734 7C2E           B8                   03C8  mov	ax,#$3C8
29735 7C31           50                         push	ax
29736                                           ! Debug: func () void = outb+0 (used reg = )
29737 7C32           E8         01AC            call	_outb
29738 7C35           83C4                   04  add	sp,*4
29739                                           !BCC_EOS
29740                                           ! 4074         for(i=0;i<256*3;i++) {
29741                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29742 7C38           31C0                       xor	ax,ax
29743 7C3A           8946         FE            mov	-2[bp],ax
29744                                           !BCC_EOS
29745                                           !BCC_EOS
29746 7C3D           EB           27            jmp .2A5
29747                       00007C3F            .2A6:
29748                                           ! 4075             outb(0x3c9, read_byte(ES, BX)); BX++;
29749                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29750 7C3F           FF76         08            push	8[bp]
29751                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29752 7C42           FF76         06            push	6[bp]
29753                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29754 7C45           E8         012D            call	_read_byte
29755 7C48           83C4                   04  add	sp,*4
29756                                           ! Debug: list unsigned char = al+0 (used reg = )
29757 7C4B           30E4                       xor	ah,ah
29758 7C4D           50                         push	ax
29759                                           ! Debug: list int = const $3C9 (used reg = )
29760 7C4E           B8                   03C9  mov	ax,#$3C9
29761 7C51           50                         push	ax
29762                                           ! Debug: func () void = outb+0 (used reg = )
29763 7C52           E8         018C            call	_outb
29764 7C55           83C4                   04  add	sp,*4
29765                                           !BCC_EOS
29766                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29767 7C58           8B46         08            mov	ax,8[bp]
29768 7C5B           40                         inc	ax
29769 7C5C           8946         08            mov	8[bp],ax
29770                                           !BCC_EOS
29771                                           ! 4076         }
29772                                           ! 4077         BX++;
29773                       00007C5F            .2A4:
29774                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29775 7C5F           8B46         FE            mov	ax,-2[bp]
29776 7C62           40                         inc	ax
29777 7C63           8946         FE            mov	-2[bp],ax
29778                       00007C66            .2A5:
29779                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29780 7C66           8B46         FE            mov	ax,-2[bp]
29781 7C69           3D                   0300  cmp	ax,#$300
29782 7C6C           72           D1            jb 	.2A6
29783                       00007C6E            .2A7:
29784                       00007C6E            .2A3:
29785                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29786 7C6E           8B46         08            mov	ax,8[bp]
29787 7C71           40                         inc	ax
29788 7C72           8946         08            mov	8[bp],ax
29789                                           !BCC_EOS
29790                                           ! 4078         outb(0x3c8, v);
29791                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29792 7C75           FF76         FA            push	-6[bp]
29793                                           ! Debug: list int = const $3C8 (used reg = )
29794 7C78           B8                   03C8  mov	ax,#$3C8
29795 7C7B           50                         push	ax
29796                                           ! Debug: func () void = outb+0 (used reg = )
29797 7C7C           E8         0162            call	_outb
29798 7C7F           83C4                   04  add	sp,*4
29799                                           !BCC_EOS
29800                                           ! 4079     }
29801                                           ! 4080     return BX;
29802                       00007C82            .2A1:
29803 7C82           8B46         08            mov	ax,8[bp]
29804 7C85           89EC                       mov	sp,bp
29805 7C87           5D                         pop	bp
29806 7C88           C3                         ret
29807                                           !BCC_EOS
29808                                           ! 4081 }
29809                                           ! 4082 static Bit8u find_vga_entry(mode)
29810                                           ! 4083 Bit8u mode;
29811                       00007C89            _find_vga_entry:
29812                                           !BCC_EOS
29813                                           ! 4084 {
29814                                           ! 4085  Bit8u i,line=0xFF;
29815 7C89           55                         push	bp
29816 7C8A           89E5                       mov	bp,sp
29817 7C8C           4C                         dec	sp
29818 7C8D           4C                         dec	sp
29819                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29820 7C8E           B0                     FF  mov	al,#$FF
29821 7C90           8846         FE            mov	-2[bp],al
29822                                           !BCC_EOS
29823                                           ! 4086  for(i=0;i<=15;i++)
29824                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29825 7C93           30C0                       xor	al,al
29826 7C95           8846         FF            mov	-1[bp],al
29827                                           !BCC_EOS
29828                                           !BCC_EOS
29829                                           ! 4087   if(vga_modes[i].svgamode==mode)
29830 7C98           EB           23            jmp .2AA
29831                       00007C9A            .2AB:
29832                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29833 7C9A           8A46         FF            mov	al,-1[bp]
29834 7C9D           30E4                       xor	ah,ah
29835 7C9F           B1                     03  mov	cl,*3
29836 7CA1           D3E0                       shl	ax,cl
29837 7CA3           89C3                       mov	bx,ax
29838                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29839 7CA5           8A87       020B            mov	al,_vga_modes[bx]
29840 7CA9           3A46         04            cmp	al,4[bp]
29841 7CAC           75           08            jne 	.2AC
29842                       00007CAE            .2AD:
29843                                           ! 4088    {line=i;
29844                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29845 7CAE           8A46         FF            mov	al,-1[bp]
29846 7CB1           8846         FE            mov	-2[bp],al
29847                                           !BCC_EOS
29848                                           ! 4089     break;
29849 7CB4           EB           0E            jmp .2A8
29850                                           !BCC_EOS
29851                                           ! 4090    }
29852                                           ! 4091  return line;
29853                       00007CB6            .2AC:
29854                       00007CB6            .2A9:
29855                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29856 7CB6           8A46         FF            mov	al,-1[bp]
29857 7CB9           40                         inc	ax
29858 7CBA           8846         FF            mov	-1[bp],al
29859                       00007CBD            .2AA:
29860                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29861 7CBD           8A46         FF            mov	al,-1[bp]
29862 7CC0           3C                     0F  cmp	al,*$F
29863 7CC2           76           D6            jbe	.2AB
29864                       00007CC4            .2AE:
29865                       00007CC4            .2A8:
29866 7CC4           8A46         FE            mov	al,-2[bp]
29867 7CC7           89EC                       mov	sp,bp
29868 7CC9           5D                         pop	bp
29869 7CCA           C3                         ret
29870                                           !BCC_EOS
29871                                           ! 4092 }
29872                                           ! 4093 static void memsetb(seg,offset,value,count)
29873                                           ! Register BX used in function find_vga_entry
29874                                           ! 4094   Bit16u seg;
29875                       00007CCB            _memsetb:
29876                                           !BCC_EOS
29877                                           ! 4095   Bit16u offset;
29878                                           !BCC_EOS
29879                                           ! 4096   Bit16u value;
29880                                           !BCC_EOS
29881                                           ! 4097   Bit16u count;
29882                                           !BCC_EOS
29883                                           ! 4098 {
29884                                           ! 4099 #asm
29885                                           !BCC_ASM
29886                       00000008            _memsetb.count	set	8
29887                       00000002            _memsetb.seg	set	2
29888                       00000006            _memsetb.value	set	6
29889                       00000004            _memsetb.offset	set	4
29890 7CCB           55                           push bp
29891 7CCC           89E5                         mov bp, sp
29892 7CCE           50                             push ax
29893 7CCF           51                             push cx
29894 7CD0           06                             push es
29895 7CD1           57                             push di
29896 7CD2           8B4E         0A                mov cx, 10[bp] ; count
29897 7CD5           83F9                   00      cmp cx, #0x00
29898 7CD8           74           10                je memsetb_end
29899 7CDA           8B46         04                mov ax, 4[bp] ; segment
29900 7CDD           8EC0                           mov es, ax
29901 7CDF           8B46         06                mov ax, 6[bp] ; offset
29902 7CE2           89C7                           mov di, ax
29903 7CE4           8A46         08                mov al, 8[bp] ; value
29904 7CE7           FC                             cld
29905 7CE8           F3                             rep
29906 7CE9           AA                              stosb
29907                       00007CEA            memsetb_end:
29908 7CEA           5F                             pop di
29909 7CEB           07                             pop es
29910 7CEC           59                             pop cx
29911 7CED           58                             pop ax
29912 7CEE           5D                           pop bp
29913                                           ! 4123 endasm
29914                                           !BCC_ENDASM
29915                                           ! 4124 }
29916 7CEF           C3                         ret
29917                                           ! 4125 static void memsetw(seg,offset,value,count)
29918                                           ! 4126   Bit16u seg;
29919                       00007CF0            _memsetw:
29920                                           !BCC_EOS
29921                                           ! 4127   Bit16u offset;
29922                                           !BCC_EOS
29923                                           ! 4128   Bit16u value;
29924                                           !BCC_EOS
29925                                           ! 4129   Bit16u count;
29926                                           !BCC_EOS
29927                                           ! 4130 {
29928                                           ! 4131 #asm
29929                                           !BCC_ASM
29930                       00000008            _memsetw.count	set	8
29931                       00000002            _memsetw.seg	set	2
29932                       00000006            _memsetw.value	set	6
29933                       00000004            _memsetw.offset	set	4
29934 7CF0           55                           push bp
29935 7CF1           89E5                         mov bp, sp
29936 7CF3           50                             push ax
29937 7CF4           51                             push cx
29938 7CF5           06                             push es
29939 7CF6           57                             push di
29940 7CF7           8B4E         0A                mov cx, 10[bp] ; count
29941 7CFA           83F9                   00      cmp cx, #0x00
29942 7CFD           74           10                je memsetw_end
29943 7CFF           8B46         04                mov ax, 4[bp] ; segment
29944 7D02           8EC0                           mov es, ax
29945 7D04           8B46         06                mov ax, 6[bp] ; offset
29946 7D07           89C7                           mov di, ax
29947 7D09           8B46         08                mov ax, 8[bp] ; value
29948 7D0C           FC                             cld
29949 7D0D           F3                             rep
29950 7D0E           AB                              stosw
29951                       00007D0F            memsetw_end:
29952 7D0F           5F                             pop di
29953 7D10           07                             pop es
29954 7D11           59                             pop cx
29955 7D12           58                             pop ax
29956 7D13           5D                           pop bp
29957                                           ! 4155 endasm
29958                                           !BCC_ENDASM
29959                                           ! 4156 }
29960 7D14           C3                         ret
29961                                           ! 4157 static void memcpyb(dseg,doffset,sseg,soffset,count)
29962                                           ! 4158   Bit16u dseg;
29963                       00007D15            _memcpyb:
29964                                           !BCC_EOS
29965                                           ! 4159   Bit16u doffset;
29966                                           !BCC_EOS
29967                                           ! 4160   Bit16u sseg;
29968                                           !BCC_EOS
29969                                           ! 4161   Bit16u soffset;
29970                                           !BCC_EOS
29971                                           ! 4162   Bit16u count;
29972                                           !BCC_EOS
29973                                           ! 4163 {
29974                                           ! 4164 #asm
29975                                           !BCC_ASM
29976                       0000000A            _memcpyb.count	set	$A
29977                       00000006            _memcpyb.sseg	set	6
29978                       00000008            _memcpyb.soffset	set	8
29979                       00000002            _memcpyb.dseg	set	2
29980                       00000004            _memcpyb.doffset	set	4
29981 7D15           55                           push bp
29982 7D16           89E5                         mov bp, sp
29983 7D18           50                             push ax
29984 7D19           51                             push cx
29985 7D1A           06                             push es
29986 7D1B           57                             push di
29987 7D1C           1E                             push ds
29988 7D1D           56                             push si
29989 7D1E           8B4E         0C                mov cx, 12[bp] ; count
29990 7D21           83F9                   00      cmp cx, #0x0000
29991 7D24           74           17                je memcpyb_end
29992 7D26           8B46         04                mov ax, 4[bp] ; dsegment
29993 7D29           8EC0                           mov es, ax
29994 7D2B           8B46         06                mov ax, 6[bp] ; doffset
29995 7D2E           89C7                           mov di, ax
29996 7D30           8B46         08                mov ax, 8[bp] ; ssegment
29997 7D33           8ED8                           mov ds, ax
29998 7D35           8B46         0A                mov ax, 10[bp] ; soffset
29999 7D38           89C6                           mov si, ax
30000 7D3A           FC                             cld
30001 7D3B           F3                             rep
30002 7D3C           A4                              movsb
30003                       00007D3D            memcpyb_end:
30004 7D3D           5E                             pop si
30005 7D3E           1F                             pop ds
30006 7D3F           5F                             pop di
30007 7D40           07                             pop es
30008 7D41           59                             pop cx
30009 7D42           58                             pop ax
30010 7D43           5D                           pop bp
30011                                           ! 4195 endasm
30012                                           !BCC_ENDASM
30013                                           ! 4196 }
30014 7D44           C3                         ret
30015                                           ! 4197 static void memcpyw(dseg,doffset,sseg,soffset,count)
30016                                           ! 4198   Bit16u dseg;
30017                       00007D45            _memcpyw:
30018                                           !BCC_EOS
30019                                           ! 4199   Bit16u doffset;
30020                                           !BCC_EOS
30021                                           ! 4200   Bit16u sseg;
30022                                           !BCC_EOS
30023                                           ! 4201   Bit16u soffset;
30024                                           !BCC_EOS
30025                                           ! 4202   Bit16u count;
30026                                           !BCC_EOS
30027                                           ! 4203 {
30028                                           ! 4204 #asm
30029                                           !BCC_ASM
30030                       0000000A            _memcpyw.count	set	$A
30031                       00000006            _memcpyw.sseg	set	6
30032                       00000008            _memcpyw.soffset	set	8
30033                       00000002            _memcpyw.dseg	set	2
30034                       00000004            _memcpyw.doffset	set	4
30035 7D45           55                           push bp
30036 7D46           89E5                         mov bp, sp
30037 7D48           50                             push ax
30038 7D49           51                             push cx
30039 7D4A           06                             push es
30040 7D4B           57                             push di
30041 7D4C           1E                             push ds
30042 7D4D           56                             push si
30043 7D4E           8B4E         0C                mov cx, 12[bp] ; count
30044 7D51           83F9                   00      cmp cx, #0x0000
30045 7D54           74           17                je memcpyw_end
30046 7D56           8B46         04                mov ax, 4[bp] ; dsegment
30047 7D59           8EC0                           mov es, ax
30048 7D5B           8B46         06                mov ax, 6[bp] ; doffset
30049 7D5E           89C7                           mov di, ax
30050 7D60           8B46         08                mov ax, 8[bp] ; ssegment
30051 7D63           8ED8                           mov ds, ax
30052 7D65           8B46         0A                mov ax, 10[bp] ; soffset
30053 7D68           89C6                           mov si, ax
30054 7D6A           FC                             cld
30055 7D6B           F3                             rep
30056 7D6C           A5                              movsw
30057                       00007D6D            memcpyw_end:
30058 7D6D           5E                             pop si
30059 7D6E           1F                             pop ds
30060 7D6F           5F                             pop di
30061 7D70           07                             pop es
30062 7D71           59                             pop cx
30063 7D72           58                             pop ax
30064 7D73           5D                           pop bp
30065                                           ! 4235 endasm
30066                                           !BCC_ENDASM
30067                                           ! 4236 }
30068 7D74           C3                         ret
30069                                           ! 4237 static Bit8u
30070                                           ! 4238 read_byte(seg, offset)
30071                                           ! 4239   Bit16u seg;
30072                       00007D75            _read_byte:
30073                                           !BCC_EOS
30074                                           ! 4240   Bit16u offset;
30075                                           !BCC_EOS
30076                                           ! 4241 {
30077                                           ! 4242 #asm
30078                                           !BCC_ASM
30079                       00000002            _read_byte.seg	set	2
30080                       00000004            _read_byte.offset	set	4
30081 7D75           55                           push bp
30082 7D76           89E5                         mov bp, sp
30083 7D78           53                             push bx
30084 7D79           1E                             push ds
30085 7D7A           8B46         04                mov ax, 4[bp] ; segment
30086 7D7D           8ED8                           mov ds, ax
30087 7D7F           8B5E         06                mov bx, 6[bp] ; offset
30088 7D82           8A07                           mov al, [bx]
30089                                               ;; al = return value (byte)
30090 7D84           1F                             pop ds
30091 7D85           5B                             pop bx
30092 7D86           5D                           pop bp
30093                                           ! 4255 endasm
30094                                           !BCC_ENDASM
30095                                           ! 4256 }
30096 7D87           C3                         ret
30097                                           ! 4257 static Bit16u
30098                                           ! 4258 read_word(seg, offset)
30099                                           ! 4259   Bit16u seg;
30100                       00007D88            _read_word:
30101                                           !BCC_EOS
30102                                           ! 4260   Bit16u offset;
30103                                           !BCC_EOS
30104                                           ! 4261 {
30105                                           ! 4262 #asm
30106                                           !BCC_ASM
30107                       00000002            _read_word.seg	set	2
30108                       00000004            _read_word.offset	set	4
30109 7D88           55                           push bp
30110 7D89           89E5                         mov bp, sp
30111 7D8B           53                             push bx
30112 7D8C           1E                             push ds
30113 7D8D           8B46         04                mov ax, 4[bp] ; segment
30114 7D90           8ED8                           mov ds, ax
30115 7D92           8B5E         06                mov bx, 6[bp] ; offset
30116 7D95           8B07                           mov ax, [bx]
30117                                               ;; ax = return value (word)
30118 7D97           1F                             pop ds
30119 7D98           5B                             pop bx
30120 7D99           5D                           pop bp
30121                                           ! 4275 endasm
30122                                           !BCC_ENDASM
30123                                           ! 4276 }
30124 7D9A           C3                         ret
30125                                           ! 4277 static void
30126                                           ! 4278 write_byte(seg, offset, data)
30127                                           ! 4279   Bit16u seg;
30128                       00007D9B            _write_byte:
30129                                           !BCC_EOS
30130                                           ! 4280   Bit16u offset;
30131                                           !BCC_EOS
30132                                           ! 4281   Bit8u data;
30133                                           !BCC_EOS
30134                                           ! 4282 {
30135                                           ! 4283 #asm
30136                                           !BCC_ASM
30137                       00000002            _write_byte.seg	set	2
30138                       00000006            _write_byte.data	set	6
30139                       00000004            _write_byte.offset	set	4
30140 7D9B           55                           push bp
30141 7D9C           89E5                         mov bp, sp
30142 7D9E           50                             push ax
30143 7D9F           53                             push bx
30144 7DA0           1E                             push ds
30145 7DA1           8B46         04                mov ax, 4[bp] ; segment
30146 7DA4           8ED8                           mov ds, ax
30147 7DA6           8B5E         06                mov bx, 6[bp] ; offset
30148 7DA9           8A46         08                mov al, 8[bp] ; data byte
30149 7DAC           8807                           mov [bx], al ; write data byte
30150 7DAE           1F                             pop ds
30151 7DAF           5B                             pop bx
30152 7DB0           58                             pop ax
30153 7DB1           5D                           pop bp
30154                                           ! 4298 endasm
30155                                           !BCC_ENDASM
30156                                           ! 4299 }
30157 7DB2           C3                         ret
30158                                           ! 4300 static void
30159                                           ! 4301 write_word(seg, offset, data)
30160                                           ! 4302   Bit16u seg;
30161                       00007DB3            _write_word:
30162                                           !BCC_EOS
30163                                           ! 4303   Bit16u offset;
30164                                           !BCC_EOS
30165                                           ! 4304   Bit16u data;
30166                                           !BCC_EOS
30167                                           ! 4305 {
30168                                           ! 4306 #asm
30169                                           !BCC_ASM
30170                       00000002            _write_word.seg	set	2
30171                       00000006            _write_word.data	set	6
30172                       00000004            _write_word.offset	set	4
30173 7DB3           55                           push bp
30174 7DB4           89E5                         mov bp, sp
30175 7DB6           50                             push ax
30176 7DB7           53                             push bx
30177 7DB8           1E                             push ds
30178 7DB9           8B46         04                mov ax, 4[bp] ; segment
30179 7DBC           8ED8                           mov ds, ax
30180 7DBE           8B5E         06                mov bx, 6[bp] ; offset
30181 7DC1           8B46         08                mov ax, 8[bp] ; data word
30182 7DC4           8907                           mov [bx], ax ; write data word
30183 7DC6           1F                             pop ds
30184 7DC7           5B                             pop bx
30185 7DC8           58                             pop ax
30186 7DC9           5D                           pop bp
30187                                           ! 4321 endasm
30188                                           !BCC_ENDASM
30189                                           ! 4322 }
30190 7DCA           C3                         ret
30191                                           ! 4323  Bit8u
30192                                           ! 4324 inb(port)
30193                                           ! 4325   Bit16u port;
30194                                           export	_inb
30195                       00007DCB            _inb:
30196                                           !BCC_EOS
30197                                           ! 4326 {
30198                                           ! 4327 #asm
30199                                           !BCC_ASM
30200                       00000002            _inb.port	set	2
30201 7DCB           55                           push bp
30202 7DCC           89E5                         mov bp, sp
30203 7DCE           52                             push dx
30204 7DCF           8B56         04                mov dx, 4[bp]
30205 7DD2           EC                             in al, dx
30206 7DD3           5A                             pop dx
30207 7DD4           5D                           pop bp
30208                                           ! 4335 endasm
30209                                           !BCC_ENDASM
30210                                           ! 4336 }
30211 7DD5           C3                         ret
30212                                           ! 4337   Bit16u
30213                                           ! 4338 inw(port)
30214                                           ! 4339   Bit16u port;
30215                                           export	_inw
30216                       00007DD6            _inw:
30217                                           !BCC_EOS
30218                                           ! 4340 {
30219                                           ! 4341 #asm
30220                                           !BCC_ASM
30221                       00000002            _inw.port	set	2
30222 7DD6           55                           push bp
30223 7DD7           89E5                         mov bp, sp
30224 7DD9           52                             push dx
30225 7DDA           8B56         04                mov dx, 4[bp]
30226 7DDD           ED                             in ax, dx
30227 7DDE           5A                             pop dx
30228 7DDF           5D                           pop bp
30229                                           ! 4349 endasm
30230                                           !BCC_ENDASM
30231                                           ! 4350 }
30232 7DE0           C3                         ret
30233                                           ! 4351   void
30234                                           ! 4352 outb(port, val)
30235                                           ! 4353   Bit16u port;
30236                                           export	_outb
30237                       00007DE1            _outb:
30238                                           !BCC_EOS
30239                                           ! 4354   Bit8u val;
30240                                           !BCC_EOS
30241                                           ! 4355 {
30242                                           ! 4356 #asm
30243                                           !BCC_ASM
30244                       00000004            _outb.val	set	4
30245                       00000002            _outb.port	set	2
30246 7DE1           55                           push bp
30247 7DE2           89E5                         mov bp, sp
30248 7DE4           50                             push ax
30249 7DE5           52                             push dx
30250 7DE6           8B56         04                mov dx, 4[bp]
30251 7DE9           8A46         06                mov al, 6[bp]
30252 7DEC           EE                             out dx, al
30253 7DED           5A                             pop dx
30254 7DEE           58                             pop ax
30255 7DEF           5D                           pop bp
30256                                           ! 4367 endasm
30257                                           !BCC_ENDASM
30258                                           ! 4368 }
30259 7DF0           C3                         ret
30260                                           ! 4369   void
30261                                           ! 4370 outw(port, val)
30262                                           ! 4371   Bit16u port;
30263                                           export	_outw
30264                       00007DF1            _outw:
30265                                           !BCC_EOS
30266                                           ! 4372   Bit16u val;
30267                                           !BCC_EOS
30268                                           ! 4373 {
30269                                           ! 4374 #asm
30270                                           !BCC_ASM
30271                       00000004            _outw.val	set	4
30272                       00000002            _outw.port	set	2
30273 7DF1           55                           push bp
30274 7DF2           89E5                         mov bp, sp
30275 7DF4           50                             push ax
30276 7DF5           52                             push dx
30277 7DF6           8B56         04                mov dx, 4[bp]
30278 7DF9           8B46         06                mov ax, 6[bp]
30279 7DFC           EF                             out dx, ax
30280 7DFD           5A                             pop dx
30281 7DFE           58                             pop ax
30282 7DFF           5D                           pop bp
30283                                           ! 4385 endasm
30284                                           !BCC_ENDASM
30285                                           ! 4386 }
30286 7E00           C3                         ret
30287                                           ! 4387 Bit16u get_SS()
30288                                           ! 4388 {
30289                                           export	_get_SS
30290                       00007E01            _get_SS:
30291                                           ! 4389 #asm
30292                                           !BCC_ASM
30293 7E01           8CD0                         mov ax, ss
30294                                           ! 4391 endasm
30295                                           !BCC_ENDASM
30296                                           ! 4392 }
30297 7E03           C3                         ret
30298                                           ! 4393 void unimplemented()
30299                                           ! 4394 {
30300                                           export	_unimplemented
30301                       00007E04            _unimplemented:
30302                                           ! 4395  printf("--> Unimplemented\n");
30303 7E04           55                         push	bp
30304 7E05           89E5                       mov	bp,sp
30305                                           ! Debug: list * char = .2AF+0 (used reg = )
30306 7E07           BB                   A106  mov	bx,#.2AF
30307 7E0A           53                         push	bx
30308                                           ! Debug: func () void = printf+0 (used reg = )
30309 7E0B           E8         0012            call	_printf
30310 7E0E           89EC                       mov	sp,bp
30311                                           !BCC_EOS
30312                                           ! 4396 }
30313 7E10           5D                         pop	bp
30314 7E11           C3                         ret
30315                                           ! 4397 void unknown()
30316                                           ! Register BX used in function unimplemented
30317                                           ! 4398 {
30318                                           export	_unknown
30319                       00007E12            _unknown:
30320                                           ! 4399  printf("--> Unknown int10\n");
30321 7E12           55                         push	bp
30322 7E13           89E5                       mov	bp,sp
30323                                           ! Debug: list * char = .2B0+0 (used reg = )
30324 7E15           BB                   A0F3  mov	bx,#.2B0
30325 7E18           53                         push	bx
30326                                           ! Debug: func () void = printf+0 (used reg = )
30327 7E19           E8         0004            call	_printf
30328 7E1C           89EC                       mov	sp,bp
30329                                           !BCC_EOS
30330                                           ! 4400 }
30331 7E1E           5D                         pop	bp
30332 7E1F           C3                         ret
30333                                           ! 4401 void printf(s)
30334                                           ! Register BX used in function unknown
30335                                           ! 4402   Bit8u *s;
30336                                           export	_printf
30337                       00007E20            _printf:
30338                                           !BCC_EOS
30339                                           ! 4403 {
30340                                           ! 4404   Bit8u c, format_char;
30341                                           !BCC_EOS
30342                                           ! 4405   Boolean in_format;
30343                                           !BCC_EOS
30344                                           ! 4406   unsigned format_width, i;
30345                                           !BCC_EOS
30346                                           ! 4407   Bit16u *arg_ptr;
30347                                           !BCC_EOS
30348                                           ! 4408   Bit16u arg_seg, arg, digit, nibble, shift_count;
30349                                           !BCC_EOS
30350                                           ! 4409   arg_ptr = &s;
30351 7E20           55                         push	bp
30352 7E21           89E5                       mov	bp,sp
30353 7E23           83C4                   EC  add	sp,*-$14
30354                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30355 7E26           8D5E         04            lea	bx,4[bp]
30356 7E29           895E         F6            mov	-$A[bp],bx
30357                                           !BCC_EOS
30358                                           ! 4410   arg_seg = get_SS();
30359                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
30360 7E2C           E8         FFD2            call	_get_SS
30361                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
30362 7E2F           8946         F4            mov	-$C[bp],ax
30363                                           !BCC_EOS
30364                                           ! 4411   in_format = 0;
30365                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30366 7E32           31C0                       xor	ax,ax
30367 7E34           8946         FC            mov	-4[bp],ax
30368                                           !BCC_EOS
30369                                           ! 4412   format_width = 0;
30370                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30371 7E37           31C0                       xor	ax,ax
30372 7E39           8946         FA            mov	-6[bp],ax
30373                                           !BCC_EOS
30374                                           ! 4413   while (c = read_byte(0xc000, s)) {
30375 7E3C           E9         0104            br 	.2B2
30376                       00007E3F            .2B3:
30377                                           ! 4414     if ( c == '%' ) {
30378                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
30379 7E3F           8A46         FF            mov	al,-1[bp]
30380 7E42           3C                     25  cmp	al,*$25
30381 7E44           75           0E            jne 	.2B4
30382                       00007E46            .2B5:
30383                                           ! 4415       in_format = 1;
30384                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
30385 7E46           B8                   0001  mov	ax,*1
30386 7E49           8946         FC            mov	-4[bp],ax
30387                                           !BCC_EOS
30388                                           ! 4416       format_width = 0;
30389                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30390 7E4C           31C0                       xor	ax,ax
30391 7E4E           8946         FA            mov	-6[bp],ax
30392                                           !BCC_EOS
30393                                           ! 4417       }
30394                                           ! 4418     else if (in_format) {
30395 7E51           E9         00E8            br 	.2B6
30396                       00007E54            .2B4:
30397 7E54           8B46         FC            mov	ax,-4[bp]
30398 7E57           85C0                       test	ax,ax
30399 7E59         0F84         00CF            beq 	.2B7
30400                       00007E5D            .2B8:
30401                                           ! 4419       if ( (c>='0') && (c<='9') ) {
30402                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30403 7E5D           8A46         FF            mov	al,-1[bp]
30404 7E60           3C                     30  cmp	al,*$30
30405 7E62           72           28            jb  	.2B9
30406                       00007E64            .2BB:
30407                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
30408 7E64           8A46         FF            mov	al,-1[bp]
30409 7E67           3C                     39  cmp	al,*$39
30410 7E69           77           21            ja  	.2B9
30411                       00007E6B            .2BA:
30412                                           ! 4420         format_width = (format_width * 10) + (c - '0');
30413                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
30414 7E6B           8A46         FF            mov	al,-1[bp]
30415 7E6E           30E4                       xor	ah,ah
30416 7E70           05                   FFD0  add	ax,*-$30
30417 7E73           50                         push	ax
30418                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30419 7E74           8B46         FA            mov	ax,-6[bp]
30420 7E77           89C2                       mov	dx,ax
30421 7E79           D1E0                       shl	ax,*1
30422 7E7B           D1E0                       shl	ax,*1
30423 7E7D           01D0                       add	ax,dx
30424 7E7F           D1E0                       shl	ax,*1
30425                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30426 7E81           0346         EA            add	ax,-$16[bp]
30427 7E84           44                         inc	sp
30428 7E85           44                         inc	sp
30429                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30430 7E86           8946         FA            mov	-6[bp],ax
30431                                           !BCC_EOS
30432                                           ! 4421         }
30433                                           ! 4422       else if (c == 'x') {
30434 7E89           E9         009E            br 	.2BC
30435                       00007E8C            .2B9:
30436                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30437 7E8C           8A46         FF            mov	al,-1[bp]
30438 7E8F           3C                     78  cmp	al,*$78
30439 7E91         0F85         0095            bne 	.2BD
30440                       00007E95            .2BE:
30441                                           ! 4423         arg_ptr++;
30442                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30443 7E95           8B5E         F6            mov	bx,-$A[bp]
30444 7E98           43                         inc	bx
30445 7E99           43                         inc	bx
30446 7E9A           895E         F6            mov	-$A[bp],bx
30447                                           !BCC_EOS
30448                                           ! 4424         arg = read_word(arg_seg, arg_ptr);
30449                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30450 7E9D           FF76         F6            push	-$A[bp]
30451                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30452 7EA0           FF76         F4            push	-$C[bp]
30453                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30454 7EA3           E8         FEE2            call	_read_word
30455 7EA6           83C4                   04  add	sp,*4
30456                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30457 7EA9           8946         F2            mov	-$E[bp],ax
30458                                           !BCC_EOS
30459                                           ! 4425         if (format_width == 0)
30460                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30461 7EAC           8B46         FA            mov	ax,-6[bp]
30462 7EAF           85C0                       test	ax,ax
30463 7EB1           75           06            jne 	.2BF
30464                       00007EB3            .2C0:
30465                                           ! 4426           format_width = 4;
30466                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30467 7EB3           B8                   0004  mov	ax,*4
30468 7EB6           8946         FA            mov	-6[bp],ax
30469                                           !BCC_EOS
30470                                           ! 4427         i = 0;
30471                       00007EB9            .2BF:
30472                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30473 7EB9           31C0                       xor	ax,ax
30474 7EBB           8946         F8            mov	-8[bp],ax
30475                                           !BCC_EOS
30476                                           ! 4428         digit = format_width - 1;
30477                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30478 7EBE           8B46         FA            mov	ax,-6[bp]
30479                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30480 7EC1           48                         dec	ax
30481 7EC2           8946         F0            mov	-$10[bp],ax
30482                                           !BCC_EOS
30483                                           ! 4429         for (i=0; i<format_width; i++) {
30484                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30485 7EC5           31C0                       xor	ax,ax
30486 7EC7           8946         F8            mov	-8[bp],ax
30487                                           !BCC_EOS
30488                                           !BCC_EOS
30489 7ECA           EB           51            jmp .2C3
30490                       00007ECC            .2C4:
30491                                           ! 4430           nibble = (arg >> (4 * digit)) & 0x000f;
30492                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30493                                           ! Debug: expression subtree swapping
30494 7ECC           8B46         F0            mov	ax,-$10[bp]
30495 7ECF           D1E0                       shl	ax,*1
30496 7ED1           D1E0                       shl	ax,*1
30497                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30498 7ED3           89C3                       mov	bx,ax
30499 7ED5           8B46         F2            mov	ax,-$E[bp]
30500 7ED8           89D9                       mov	cx,bx
30501 7EDA           D3E8                       shr	ax,cl
30502                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30503 7EDC           24                     0F  and	al,*$F
30504                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30505 7EDE           30E4                       xor	ah,ah
30506 7EE0           8946         EE            mov	-$12[bp],ax
30507                                           !BCC_EOS
30508                                           ! 4431           if (nibble <= 9)
30509                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30510 7EE3           8B46         EE            mov	ax,-$12[bp]
30511 7EE6           3D                   0009  cmp	ax,*9
30512 7EE9           77           13            ja  	.2C5
30513                       00007EEB            .2C6:
30514                                           ! 4432             outb(0x0500, nibble + '0');
30515                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30516 7EEB           8B46         EE            mov	ax,-$12[bp]
30517                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30518 7EEE           05                   0030  add	ax,*$30
30519 7EF1           50                         push	ax
30520                                           ! Debug: list int = const $500 (used reg = )
30521 7EF2           B8                   0500  mov	ax,#$500
30522 7EF5           50                         push	ax
30523                                           ! Debug: func () void = outb+0 (used reg = )
30524 7EF6           E8         FEE8            call	_outb
30525 7EF9           83C4                   04  add	sp,*4
30526                                           !BCC_EOS
30527                                           ! 4433           else
30528                                           ! 4434             outb(0x0500, (nibble - 10) + 'A');
30529 7EFC           EB           11            jmp .2C7
30530                       00007EFE            .2C5:
30531                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30532 7EFE           8B46         EE            mov	ax,-$12[bp]
30533                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30534                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30535 7F01           05                   0037  add	ax,*$37
30536 7F04           50                         push	ax
30537                                           ! Debug: list int = const $500 (used reg = )
30538 7F05           B8                   0500  mov	ax,#$500
30539 7F08           50                         push	ax
30540                                           ! Debug: func () void = outb+0 (used reg = )
30541 7F09           E8         FED5            call	_outb
30542 7F0C           83C4                   04  add	sp,*4
30543                                           !BCC_EOS
30544                                           ! 4435           digit--;
30545                       00007F0F            .2C7:
30546                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30547 7F0F           8B46         F0            mov	ax,-$10[bp]
30548 7F12           48                         dec	ax
30549 7F13           8946         F0            mov	-$10[bp],ax
30550                                           !BCC_EOS
30551                                           ! 4436           }
30552                                           ! 4437         in_format = 0;
30553                       00007F16            .2C2:
30554                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30555 7F16           8B46         F8            mov	ax,-8[bp]
30556 7F19           40                         inc	ax
30557 7F1A           8946         F8            mov	-8[bp],ax
30558                       00007F1D            .2C3:
30559                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30560 7F1D           8B46         F8            mov	ax,-8[bp]
30561 7F20           3B46         FA            cmp	ax,-6[bp]
30562 7F23           72           A7            jb 	.2C4
30563                       00007F25            .2C8:
30564                       00007F25            .2C1:
30565                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30566 7F25           31C0                       xor	ax,ax
30567 7F27           8946         FC            mov	-4[bp],ax
30568                                           !BCC_EOS
30569                                           ! 4438         }
30570                                           ! 4439       }
30571                       00007F2A            .2BD:
30572                       00007F2A            .2BC:
30573                                           ! 4440     else {
30574 7F2A           EB           10            jmp .2C9
30575                       00007F2C            .2B7:
30576                                           ! 4441       outb(0x0500, c);
30577                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30578 7F2C           8A46         FF            mov	al,-1[bp]
30579 7F2F           30E4                       xor	ah,ah
30580 7F31           50                         push	ax
30581                                           ! Debug: list int = const $500 (used reg = )
30582 7F32           B8                   0500  mov	ax,#$500
30583 7F35           50                         push	ax
30584                                           ! Debug: func () void = outb+0 (used reg = )
30585 7F36           E8         FEA8            call	_outb
30586 7F39           83C4                   04  add	sp,*4
30587                                           !BCC_EOS
30588                                           ! 4442       }
30589                                           ! 4443     s ++;
30590                       00007F3C            .2C9:
30591                       00007F3C            .2B6:
30592                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30593 7F3C           8B5E         04            mov	bx,4[bp]
30594 7F3F           43                         inc	bx
30595 7F40           895E         04            mov	4[bp],bx
30596                                           !BCC_EOS
30597                                           ! 4444     }
30598                                           ! 4445 }
30599                       00007F43            .2B2:
30600                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30601 7F43           FF76         04            push	4[bp]
30602                                           ! Debug: list unsigned int = const $C000 (used reg = )
30603 7F46           B8                   C000  mov	ax,#$C000
30604 7F49           50                         push	ax
30605                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30606 7F4A           E8         FE28            call	_read_byte
30607 7F4D           83C4                   04  add	sp,*4
30608                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30609 7F50           8846         FF            mov	-1[bp],al
30610 7F53           84C0                       test	al,al
30611 7F55         0F85         FEE6            bne 	.2B3
30612                       00007F59            .2CA:
30613                       00007F59            .2B1:
30614 7F59           89EC                       mov	sp,bp
30615 7F5B           5D                         pop	bp
30616 7F5C           C3                         ret
30617                                           ! 4446 #asm
30618                                           !BCC_ASM
30619                       00000002            _printf.s	set	2
30620                                             ; get LFB address from PCI
30621                                             ; in - ax: PCI device vendor
30622                                             ; out - ax: LFB address (high 16 bit)
30623                                             ;; NOTE - may be called in protected mode
30624                       00007F5D            _pci_get_lfb_addr:
30625 7F5D           53                           push bx
30626 7F5E           51                           push cx
30627 7F5F           52                           push dx
30628 7F60     66    50                           push eax
30629 7F62           89C3                           mov bx, ax
30630 7F64           31C9                           xor cx, cx
30631 7F66           B2                     00      mov dl, #0x00
30632 7F68           E8         0033                call pci_read_reg
30633 7F6B           3D                   FFFF      cmp ax, #0xffff
30634 7F6E           74           12                jz pci_get_lfb_addr_5
30635                       00007F70             pci_get_lfb_addr_3:
30636 7F70           B2                     00      mov dl, #0x00
30637 7F72           E8         0029                call pci_read_reg
30638 7F75           39D8                           cmp ax, bx ;; check vendor
30639 7F77           74           0D                jz pci_get_lfb_addr_4
30640 7F79           83C1                   08      add cx, #0x8
30641 7F7C           81F9                 0200      cmp cx, #0x200 ;; search bus #0 and #1
30642 7F80           72           EE                jb pci_get_lfb_addr_3
30643                       00007F82             pci_get_lfb_addr_5:
30644 7F82           31D2                           xor dx, dx ;; no LFB
30645 7F84           EB           10                jmp pci_get_lfb_addr_6
30646                       00007F86             pci_get_lfb_addr_4:
30647 7F86           B2                     10      mov dl, #0x10 ;; I/O space #0
30648 7F88           E8         0013                call pci_read_reg
30649 7F8B           A9                   FFF1      test ax, #0xfff1
30650 7F8E           75           F2                jnz pci_get_lfb_addr_5
30651 7F90     66    C1E8                   10      shr eax, #16
30652 7F94           89C2                           mov dx, ax ;; LFB address
30653                       00007F96             pci_get_lfb_addr_6:
30654 7F96     66    58                           pop eax
30655 7F98           89D0                         mov ax, dx
30656 7F9A           5A                           pop dx
30657 7F9B           59                           pop cx
30658 7F9C           5B                           pop bx
30659 7F9D           C3                           ret
30660                                             ; read PCI register
30661                                             ; in - cx: device/function
30662                                             ; in - dl: register
30663                                             ; out - eax: value
30664                       00007F9E            pci_read_reg:
30665 7F9E     66    B8               00800000    mov eax, #0x00800000
30666 7FA4           89C8                         mov ax, cx
30667 7FA6     66    C1E0                   08    shl eax, #8
30668 7FAA           88D0                         mov al, dl
30669 7FAC           BA                   0CF8    mov dx, #0xcf8
30670 7FAF     66    EF                           out dx, eax
30671 7FB1           80C2                   04    add dl, #4
30672 7FB4     66    ED                           in eax, dx
30673 7FB6           C3                           ret
30674                                           ! 4501 endasm
30675                                           !BCC_ENDASM
30676                                           ! 4502 static ModeInfoListItem mode_info_list[]=
30677                                           ! Register BX used in function printf
30678                                           ! 4503 {
30679                                           
30680                       00007FB7            _mode_info_list:
30681                                           ! 4504 { 0x0100,
30682 7FB7                      0100            .word	$100
30683                                           ! 4505 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30684 7FB9                      009B            .word	$9B
30685                                           ! 4506                           0x01 | 0x02 | 0x04,
30686 7FBB                        07            .byte	7
30687                                           ! 4507                           0,
30688 7FBC                        00            .byte	0
30689                                           ! 4508                           64,
30690 7FBD                      0040            .word	$40
30691                                           ! 4509                    64,
30692 7FBF                      0040            .word	$40
30693                                           ! 4510                        0xA000,
30694 7FC1                      A000            .word	$A000
30695                                           ! 4511                        0x0000,
30696 7FC3                      0000            .word	0
30697                                           ! 4512                       0,
30698 7FC5                      0000            .word	0
30699 7FC7                      0000            .word	0
30700                                           ! 4513                             640,
30701 7FC9                      0280            .word	$280
30702                                           ! 4514                        640,
30703 7FCB                      0280            .word	$280
30704                                           ! 4515                        400,
30705 7FCD                      0190            .word	$190
30706                                           ! 4516                      8,
30707 7FCF                        08            .byte	8
30708                                           ! 4517                      16,
30709 7FD0                        10            .byte	$10
30710                                           ! 4518                           1,
30711 7FD1                        01            .byte	1
30712                                           ! 4519                         8,
30713 7FD2                        08            .byte	8
30714                                           ! 4520                          4,
30715 7FD3                        04            .byte	4
30716                                           ! 4521                        0x04,
30717 7FD4                        04            .byte	4
30718                                           ! 4522                     0,
30719 7FD5                        00            .byte	0
30720                                           ! 4523                               64,
30721 7FD6                        40            .byte	$40
30722                                           ! 4524                          0,
30723 7FD7                        00            .byte	0
30724                                           ! 4525                        0,
30725 7FD8                        00            .byte	0
30726                                           ! 4526                             0,
30727 7FD9                        00            .byte	0
30728                                           ! 4527                          0,
30729 7FDA                        00            .byte	0
30730                                           ! 4528                               0,
30731 7FDB                        00            .byte	0
30732                                           ! 4529                         0,
30733 7FDC                        00            .byte	0
30734                                           ! 4530                              0,
30735 7FDD                        00            .byte	0
30736                                           ! 4531                         0,
30737 7FDE                        00            .byte	0
30738                                           ! 4532                              0,
30739 7FDF                        00            .byte	0
30740                                           ! 4533                                0,
30741 7FE0                        00            .byte	0
30742                                           ! 4534                        0xE0000000,
30743 7FE1                      0000            .word	0
30744 7FE3                      E000            .word	$E000
30745                                           ! 4535                               0,
30746 7FE5                      0000            .word	0
30747 7FE7                      0000            .word	0
30748                                           ! 4536                             0,
30749 7FE9                      0000            .word	0
30750                                           ! 4537                                640,
30751 7FEB                      0280            .word	$280
30752                                           ! 4538                             0,
30753 7FED                        00            .byte	0
30754                                           ! 4539                             0,
30755 7FEE                        00            .byte	0
30756                                           ! 4540                           0,
30757 7FEF                        00            .byte	0
30758                                           ! 4541                                0,
30759 7FF0                        00            .byte	0
30760                                           ! 4542                             0,
30761 7FF1                        00            .byte	0
30762                                           ! 4543                
30763                                           ! 4543                   0,
30764 7FF2                        00            .byte	0
30765                                           ! 4544                            0,
30766 7FF3                        00            .byte	0
30767                                           ! 4545                                 0,
30768 7FF4                        00            .byte	0
30769                                           ! 4546                            0,
30770 7FF5                        00            .byte	0
30771                                           ! 4547                                 0,
30772 7FF6                        00            .byte	0
30773                                           ! 4548                          0,
30774 7FF7                      0000            .word	0
30775 7FF9                      0000            .word	0
30776                                           ! 4549 } },
30777                                           ! 4550 { 0x0101,
30778 7FFB                      0101            .word	$101
30779                                           ! 4551 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30780 7FFD                      009B            .word	$9B
30781                                           ! 4552                           0x01 | 0x02 | 0x04,
30782 7FFF                        07            .byte	7
30783                                           ! 4553                           0,
30784 8000                        00            .byte	0
30785                                           ! 4554                           64,
30786 8001                      0040            .word	$40
30787                                           ! 4555                    64,
30788 8003                      0040            .word	$40
30789                                           ! 4556                        0xA000,
30790 8005                      A000            .word	$A000
30791                                           ! 4557                        0x0000,
30792 8007                      0000            .word	0
30793                                           ! 4558                       0,
30794 8009                      0000            .word	0
30795 800B                      0000            .word	0
30796                                           ! 4559                             640,
30797 800D                      0280            .word	$280
30798                                           ! 4560                        640,
30799 800F                      0280            .word	$280
30800                                           ! 4561                        480,
30801 8011                      01E0            .word	$1E0
30802                                           ! 4562                      8,
30803 8013                        08            .byte	8
30804                                           ! 4563                      16,
30805 8014                        10            .byte	$10
30806                                           ! 4564                           1,
30807 8015                        01            .byte	1
30808                                           ! 4565                         8,
30809 8016                        08            .byte	8
30810                                           ! 4566                          5,
30811 8017                        05            .byte	5
30812                                           ! 4567                        0x04,
30813 8018                        04            .byte	4
30814                                           ! 4568                     0,
30815 8019                        00            .byte	0
30816                                           ! 4569                               53,
30817 801A                        35            .byte	$35
30818                                           ! 4570                          0,
30819 801B                        00            .byte	0
30820                                           ! 4571                        0,
30821 801C                        00            .byte	0
30822                                           ! 4572                             0,
30823 801D                        00            .byte	0
30824                                           ! 4573                          0,
30825 801E                        00            .byte	0
30826                                           ! 4574                               0,
30827 801F                        00            .byte	0
30828                                           ! 4575                         0,
30829 8020                        00            .byte	0
30830                                           ! 4576                              0,
30831 8021                        00            .byte	0
30832                                           ! 4577                         0,
30833 8022                        00            .byte	0
30834                                           ! 4578                              0,
30835 8023                        00            .byte	0
30836                                           ! 4579                                0,
30837 8024                        00            .byte	0
30838                                           ! 4580                        0xE0000000,
30839 8025                      0000            .word	0
30840 8027                      E000            .word	$E000
30841                                           ! 4581                               0,
30842 8029                      0000            .word	0
30843 802B                      0000            .word	0
30844                                           ! 4582                             0,
30845 802D                      0000            .word	0
30846                                           ! 4583                                640,
30847 802F                      0280            .word	$280
30848                                           ! 4584                             0,
30849 8031                        00            .byte	0
30850                                           ! 4585                             0,
30851 8032                        00            .byte	0
30852                                           ! 4586                           0,
30853 8033                        00            .byte	0
30854                                           ! 4587                                0,
30855 8034                        00            .byte	0
30856                                           ! 4588                             0,
30857 8035                        00            .byte	0
30858                                           ! 4589                                  0,
30859 8036                        00            .byte	0
30860                                           ! 4590                            0,
30861 8037                        00            .byte	0
30862                                           ! 4591                                 0,
30863 8038                        00            .byte	0
30864                                           ! 4592                            0,
30865 8039                        00            .byte	0
30866                                           ! 4593                                 0,
30867 803A                        00            .byte	0
30868                                           ! 4594                          0,
30869 803B                      0000            .word	0
30870 803D                      0000            .word	0
30871                                           ! 4595 } },
30872                                           ! 4596 { 0x0102,
30873 803F                      0102            .word	$102
30874                                           ! 4597 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
30875 8041                      001F            .word	$1F
30876                                           ! 4598                           0x01 | 0x02 | 0x04,
30877 8043                        07            .byte	7
30878                                           ! 4599                           0,
30879 8044                        00            .byte	0
30880                                           ! 4600                           64,
30881 8045                      0040            .word	$40
30882                                           ! 4601                    64,
30883 8047                      0040            .word	$40
30884                                           ! 4602                        0xA000,
30885 8049                      A000            .word	$A000
30886                                           ! 4603                        0x0000,
30887 804B                      0000            .word	0
30888                                           ! 4604                       0,
30889 804D                      0000            .word	0
30890 804F                      0000            .word	0
30891                                           ! 4605                             100,
30892 8051                      0064            .word	$64
30893                                           ! 4606                        800,
30894 8053                      0320            .word	$320
30895                                           ! 4607                        600,
30896 8055                      0258            .word	$258
30897                                           ! 4608                      8,
30898 8057                        08            .byte	8
30899                                           ! 4609                      16,
30900 8058                        10            .byte	$10
30901                                           ! 4610                           4,
30902 8059                        04            .byte	4
30903                                           ! 4611                         4,
30904 805A                        04            .byte	4
30905                                           ! 4612                          1,
30906 805B                        01            .byte	1
30907                                           ! 4613     
30908                                           ! 4613                    0x03,
30909 805C                        03            .byte	3
30910                                           ! 4614                     0,
30911 805D                        00            .byte	0
30912                                           ! 4615                               68,
30913 805E                        44            .byte	$44
30914                                           ! 4616                          0,
30915 805F                        00            .byte	0
30916                                           ! 4617                        0,
30917 8060                        00            .byte	0
30918                                           ! 4618                             0,
30919 8061                        00            .byte	0
30920                                           ! 4619                          0,
30921 8062                        00            .byte	0
30922                                           ! 4620                               0,
30923 8063                        00            .byte	0
30924                                           ! 4621                         0,
30925 8064                        00            .byte	0
30926                                           ! 4622                              0,
30927 8065                        00            .byte	0
30928                                           ! 4623                         0,
30929 8066                        00            .byte	0
30930                                           ! 4624                              0,
30931 8067                        00            .byte	0
30932                                           ! 4625                                0,
30933 8068                        00            .byte	0
30934                                           ! 4626                        0,
30935 8069                      0000            .word	0
30936 806B                      0000            .word	0
30937                                           ! 4627                               0,
30938 806D                      0000            .word	0
30939 806F                      0000            .word	0
30940                                           ! 4628                             0,
30941 8071                      0000            .word	0
30942                                           ! 4629                                100,
30943 8073                      0064            .word	$64
30944                                           ! 4630                             0,
30945 8075                        00            .byte	0
30946                                           ! 4631                             0,
30947 8076                        00            .byte	0
30948                                           ! 4632                           0,
30949 8077                        00            .byte	0
30950                                           ! 4633                                0,
30951 8078                        00            .byte	0
30952                                           ! 4634                             0,
30953 8079                        00            .byte	0
30954                                           ! 4635                                  0,
30955 807A                        00            .byte	0
30956                                           ! 4636                            0,
30957 807B                        00            .byte	0
30958                                           ! 4637                                 0,
30959 807C                        00            .byte	0
30960                                           ! 4638                            0,
30961 807D                        00            .byte	0
30962                                           ! 4639                                 0,
30963 807E                        00            .byte	0
30964                                           ! 4640                          0,
30965 807F                      0000            .word	0
30966 8081                      0000            .word	0
30967                                           ! 4641 } },
30968                                           ! 4642 { 0x0103,
30969 8083                      0103            .word	$103
30970                                           ! 4643 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
30971 8085                      009B            .word	$9B
30972                                           ! 4644                           0x01 | 0x02 | 0x04,
30973 8087                        07            .byte	7
30974                                           ! 4645                           0,
30975 8088                        00            .byte	0
30976                                           ! 4646                           64,
30977 8089                      0040            .word	$40
30978                                           ! 4647                    64,
30979 808B                      0040            .word	$40
30980                                           ! 4648                        0xA000,
30981 808D                      A000            .word	$A000
30982                                           ! 4649                        0x0000,
30983 808F                      0000            .word	0
30984                                           ! 4650                       0,
30985 8091                      0000            .word	0
30986 8093                      0000            .word	0
30987                                           ! 4651                             800,
30988 8095                      0320            .word	$320
30989                                           ! 4652                        800,
30990 8097                      0320            .word	$320
30991                                           ! 4653                        600,
30992 8099                      0258            .word	$258
30993                                           ! 4654                      8,
30994 809B                        08            .byte	8
30995                                           ! 4655                      16,
30996 809C                        10            .byte	$10
30997                                           ! 4656                           1,
30998 809D                        01            .byte	1
30999                                           ! 4657                         8,
31000 809E                        08            .byte	8
31001                                           ! 4658                          8,
31002 809F                        08            .byte	8
31003                                           ! 4659                        0x04,
31004 80A0                        04            .byte	4
31005                                           ! 4660                     0,
31006 80A1                        00            .byte	0
31007                                           ! 4661                               33,
31008 80A2                        21            .byte	$21
31009                                           ! 4662                          0,
31010 80A3                        00            .byte	0
31011                                           ! 4663                        0,
31012 80A4                        00            .byte	0
31013                                           ! 4664                             0,
31014 80A5                        00            .byte	0
31015                                           ! 4665                          0,
31016 80A6                        00            .byte	0
31017                                           ! 4666                               0,
31018 80A7                        00            .byte	0
31019                                           ! 4667                         0,
31020 80A8                        00            .byte	0
31021                                           ! 4668                              0,
31022 80A9                        00            .byte	0
31023                                           ! 4669                         0,
31024 80AA                        00            .byte	0
31025                                           ! 4670                              0,
31026 80AB                        00            .byte	0
31027                                           ! 4671                                0,
31028 80AC                        00            .byte	0
31029                                           ! 4672                        0xE0000000,
31030 80AD                      0000            .word	0
31031 80AF                      E000            .word	$E000
31032                                           ! 4673                               0,
31033 80B1                      0000            .word	0
31034 80B3                      0000            .word	0
31035                                           ! 4674                             0,
31036 80B5                      0000            .word	0
31037                                           ! 4675                                800,
31038 80B7                      0320            .word	$320
31039                                           ! 4676                             0,
31040 80B9                        00            .byte	0
31041                                           ! 4677                             0,
31042 80BA                        00            .byte	0
31043                                           ! 4678                           0,
31044 80BB                        00            .byte	0
31045                                           ! 4679                                0,
31046 80BC                        00            .byte	0
31047                                           ! 4680                             0,
31048 80BD                        00            .byte	0
31049                                           ! 4681                    
31050                                           ! 4681               0,
31051 80BE                        00            .byte	0
31052                                           ! 4682                            0,
31053 80BF                        00            .byte	0
31054                                           ! 4683                                 0,
31055 80C0                        00            .byte	0
31056                                           ! 4684                            0,
31057 80C1                        00            .byte	0
31058                                           ! 4685                                 0,
31059 80C2                        00            .byte	0
31060                                           ! 4686                          0,
31061 80C3                      0000            .word	0
31062 80C5                      0000            .word	0
31063                                           ! 4687 } },
31064                                           ! 4688 { 0x0104,
31065 80C7                      0104            .word	$104
31066                                           ! 4689 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31067 80C9                      001F            .word	$1F
31068                                           ! 4690                           0x01 | 0x02 | 0x04,
31069 80CB                        07            .byte	7
31070                                           ! 4691                           0,
31071 80CC                        00            .byte	0
31072                                           ! 4692                           64,
31073 80CD                      0040            .word	$40
31074                                           ! 4693                    64,
31075 80CF                      0040            .word	$40
31076                                           ! 4694                        0xA000,
31077 80D1                      A000            .word	$A000
31078                                           ! 4695                        0x0000,
31079 80D3                      0000            .word	0
31080                                           ! 4696                       0,
31081 80D5                      0000            .word	0
31082 80D7                      0000            .word	0
31083                                           ! 4697                             128,
31084 80D9                      0080            .word	$80
31085                                           ! 4698                        1024,
31086 80DB                      0400            .word	$400
31087                                           ! 4699                        768,
31088 80DD                      0300            .word	$300
31089                                           ! 4700                      8,
31090 80DF                        08            .byte	8
31091                                           ! 4701                      16,
31092 80E0                        10            .byte	$10
31093                                           ! 4702                           4,
31094 80E1                        04            .byte	4
31095                                           ! 4703                         4,
31096 80E2                        04            .byte	4
31097                                           ! 4704                          2,
31098 80E3                        02            .byte	2
31099                                           ! 4705                        0x03,
31100 80E4                        03            .byte	3
31101                                           ! 4706                     0,
31102 80E5                        00            .byte	0
31103                                           ! 4707                               41,
31104 80E6                        29            .byte	$29
31105                                           ! 4708                          0,
31106 80E7                        00            .byte	0
31107                                           ! 4709                        0,
31108 80E8                        00            .byte	0
31109                                           ! 4710                             0,
31110 80E9                        00            .byte	0
31111                                           ! 4711                          0,
31112 80EA                        00            .byte	0
31113                                           ! 4712                               0,
31114 80EB                        00            .byte	0
31115                                           ! 4713                         0,
31116 80EC                        00            .byte	0
31117                                           ! 4714                              0,
31118 80ED                        00            .byte	0
31119                                           ! 4715                         0,
31120 80EE                        00            .byte	0
31121                                           ! 4716                              0,
31122 80EF                        00            .byte	0
31123                                           ! 4717                                0,
31124 80F0                        00            .byte	0
31125                                           ! 4718                        0,
31126 80F1                      0000            .word	0
31127 80F3                      0000            .word	0
31128                                           ! 4719                               0,
31129 80F5                      0000            .word	0
31130 80F7                      0000            .word	0
31131                                           ! 4720                             0,
31132 80F9                      0000            .word	0
31133                                           ! 4721                                128,
31134 80FB                      0080            .word	$80
31135                                           ! 4722                             0,
31136 80FD                        00            .byte	0
31137                                           ! 4723                             0,
31138 80FE                        00            .byte	0
31139                                           ! 4724                           0,
31140 80FF                        00            .byte	0
31141                                           ! 4725                                0,
31142 8100                        00            .byte	0
31143                                           ! 4726                             0,
31144 8101                        00            .byte	0
31145                                           ! 4727                                  0,
31146 8102                        00            .byte	0
31147                                           ! 4728                            0,
31148 8103                        00            .byte	0
31149                                           ! 4729                                 0,
31150 8104                        00            .byte	0
31151                                           ! 4730                            0,
31152 8105                        00            .byte	0
31153                                           ! 4731                                 0,
31154 8106                        00            .byte	0
31155                                           ! 4732                          0,
31156 8107                      0000            .word	0
31157 8109                      0000            .word	0
31158                                           ! 4733 } },
31159                                           ! 4734 { 0x0105,
31160 810B                      0105            .word	$105
31161                                           ! 4735 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31162 810D                      009B            .word	$9B
31163                                           ! 4736                           0x01 | 0x02 | 0x04,
31164 810F                        07            .byte	7
31165                                           ! 4737                           0,
31166 8110                        00            .byte	0
31167                                           ! 4738                           64,
31168 8111                      0040            .word	$40
31169                                           ! 4739                    64,
31170 8113                      0040            .word	$40
31171                                           ! 4740                        0xA000,
31172 8115                      A000            .word	$A000
31173                                           ! 4741                        0x0000,
31174 8117                      0000            .word	0
31175                                           ! 4742                       0,
31176 8119                      0000            .word	0
31177 811B                      0000            .word	0
31178                                           ! 4743                             1024,
31179 811D                      0400            .word	$400
31180                                           ! 4744                        1024,
31181 811F                      0400            .word	$400
31182                                           ! 4745                        768,
31183 8121                      0300            .word	$300
31184                                           ! 4746                      8,
31185 8123                        08            .byte	8
31186                                           ! 4747                      16,
31187 8124                        10            .byte	$10
31188                                           ! 4748                           1,
31189 8125                        01            .byte	1
31190                                           ! 4749                         8,
31191 8126                        08            .byte	8
31192                                           ! 4750                          12,
31193 8127                        0C            .byte	$C
31194                                           ! 4751              
31195                                           ! 4751           0x04,
31196 8128                        04            .byte	4
31197                                           ! 4752                     0,
31198 8129                        00            .byte	0
31199                                           ! 4753                               20,
31200 812A                        14            .byte	$14
31201                                           ! 4754                          0,
31202 812B                        00            .byte	0
31203                                           ! 4755                        0,
31204 812C                        00            .byte	0
31205                                           ! 4756                             0,
31206 812D                        00            .byte	0
31207                                           ! 4757                          0,
31208 812E                        00            .byte	0
31209                                           ! 4758                               0,
31210 812F                        00            .byte	0
31211                                           ! 4759                         0,
31212 8130                        00            .byte	0
31213                                           ! 4760                              0,
31214 8131                        00            .byte	0
31215                                           ! 4761                         0,
31216 8132                        00            .byte	0
31217                                           ! 4762                              0,
31218 8133                        00            .byte	0
31219                                           ! 4763                                0,
31220 8134                        00            .byte	0
31221                                           ! 4764                        0xE0000000,
31222 8135                      0000            .word	0
31223 8137                      E000            .word	$E000
31224                                           ! 4765                               0,
31225 8139                      0000            .word	0
31226 813B                      0000            .word	0
31227                                           ! 4766                             0,
31228 813D                      0000            .word	0
31229                                           ! 4767                                1024,
31230 813F                      0400            .word	$400
31231                                           ! 4768                             0,
31232 8141                        00            .byte	0
31233                                           ! 4769                             0,
31234 8142                        00            .byte	0
31235                                           ! 4770                           0,
31236 8143                        00            .byte	0
31237                                           ! 4771                                0,
31238 8144                        00            .byte	0
31239                                           ! 4772                             0,
31240 8145                        00            .byte	0
31241                                           ! 4773                                  0,
31242 8146                        00            .byte	0
31243                                           ! 4774                            0,
31244 8147                        00            .byte	0
31245                                           ! 4775                                 0,
31246 8148                        00            .byte	0
31247                                           ! 4776                            0,
31248 8149                        00            .byte	0
31249                                           ! 4777                                 0,
31250 814A                        00            .byte	0
31251                                           ! 4778                          0,
31252 814B                      0000            .word	0
31253 814D                      0000            .word	0
31254                                           ! 4779 } },
31255                                           ! 4780 { 0x0106,
31256 814F                      0106            .word	$106
31257                                           ! 4781 { 0x0001 | 0x0002 | 0x0008 | 0x0004 | 0x0010,
31258 8151                      001F            .word	$1F
31259                                           ! 4782                           0x01 | 0x02 | 0x04,
31260 8153                        07            .byte	7
31261                                           ! 4783                           0,
31262 8154                        00            .byte	0
31263                                           ! 4784                           64,
31264 8155                      0040            .word	$40
31265                                           ! 4785                    64,
31266 8157                      0040            .word	$40
31267                                           ! 4786                        0xA000,
31268 8159                      A000            .word	$A000
31269                                           ! 4787                        0x0000,
31270 815B                      0000            .word	0
31271                                           ! 4788                       0,
31272 815D                      0000            .word	0
31273 815F                      0000            .word	0
31274                                           ! 4789                             160,
31275 8161                      00A0            .word	$A0
31276                                           ! 4790                        1280,
31277 8163                      0500            .word	$500
31278                                           ! 4791                        1024,
31279 8165                      0400            .word	$400
31280                                           ! 4792                      8,
31281 8167                        08            .byte	8
31282                                           ! 4793                      16,
31283 8168                        10            .byte	$10
31284                                           ! 4794                           4,
31285 8169                        04            .byte	4
31286                                           ! 4795                         4,
31287 816A                        04            .byte	4
31288                                           ! 4796                          3,
31289 816B                        03            .byte	3
31290                                           ! 4797                        0x03,
31291 816C                        03            .byte	3
31292                                           ! 4798                     0,
31293 816D                        00            .byte	0
31294                                           ! 4799                               24,
31295 816E                        18            .byte	$18
31296                                           ! 4800                          0,
31297 816F                        00            .byte	0
31298                                           ! 4801                        0,
31299 8170                        00            .byte	0
31300                                           ! 4802                             0,
31301 8171                        00            .byte	0
31302                                           ! 4803                          0,
31303 8172                        00            .byte	0
31304                                           ! 4804                               0,
31305 8173                        00            .byte	0
31306                                           ! 4805                         0,
31307 8174                        00            .byte	0
31308                                           ! 4806                              0,
31309 8175                        00            .byte	0
31310                                           ! 4807                         0,
31311 8176                        00            .byte	0
31312                                           ! 4808                              0,
31313 8177                        00            .byte	0
31314                                           ! 4809                                0,
31315 8178                        00            .byte	0
31316                                           ! 4810                        0,
31317 8179                      0000            .word	0
31318 817B                      0000            .word	0
31319                                           ! 4811                               0,
31320 817D                      0000            .word	0
31321 817F                      0000            .word	0
31322                                           ! 4812                             0,
31323 8181                      0000            .word	0
31324                                           ! 4813                                160,
31325 8183                      00A0            .word	$A0
31326                                           ! 4814                             0,
31327 8185                        00            .byte	0
31328                                           ! 4815                             0,
31329 8186                        00            .byte	0
31330                                           ! 4816                           0,
31331 8187                        00            .byte	0
31332                                           ! 4817                                0,
31333 8188                        00            .byte	0
31334                                           ! 4818                             0,
31335 8189                        00            .byte	0
31336                                           ! 4819                          
31337                                           ! 4819         0,
31338 818A                        00            .byte	0
31339                                           ! 4820                            0,
31340 818B                        00            .byte	0
31341                                           ! 4821                                 0,
31342 818C                        00            .byte	0
31343                                           ! 4822                            0,
31344 818D                        00            .byte	0
31345                                           ! 4823                                 0,
31346 818E                        00            .byte	0
31347                                           ! 4824                          0,
31348 818F                      0000            .word	0
31349 8191                      0000            .word	0
31350                                           ! 4825 } },
31351                                           ! 4826 { 0x0107,
31352 8193                      0107            .word	$107
31353                                           ! 4827 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31354 8195                      009B            .word	$9B
31355                                           ! 4828                           0x01 | 0x02 | 0x04,
31356 8197                        07            .byte	7
31357                                           ! 4829                           0,
31358 8198                        00            .byte	0
31359                                           ! 4830                           64,
31360 8199                      0040            .word	$40
31361                                           ! 4831                    64,
31362 819B                      0040            .word	$40
31363                                           ! 4832                        0xA000,
31364 819D                      A000            .word	$A000
31365                                           ! 4833                        0x0000,
31366 819F                      0000            .word	0
31367                                           ! 4834                       0,
31368 81A1                      0000            .word	0
31369 81A3                      0000            .word	0
31370                                           ! 4835                             1280,
31371 81A5                      0500            .word	$500
31372                                           ! 4836                        1280,
31373 81A7                      0500            .word	$500
31374                                           ! 4837                        1024,
31375 81A9                      0400            .word	$400
31376                                           ! 4838                      8,
31377 81AB                        08            .byte	8
31378                                           ! 4839                      16,
31379 81AC                        10            .byte	$10
31380                                           ! 4840                           1,
31381 81AD                        01            .byte	1
31382                                           ! 4841                         8,
31383 81AE                        08            .byte	8
31384                                           ! 4842                          20,
31385 81AF                        14            .byte	$14
31386                                           ! 4843                        0x04,
31387 81B0                        04            .byte	4
31388                                           ! 4844                     0,
31389 81B1                        00            .byte	0
31390                                           ! 4845                               11,
31391 81B2                        0B            .byte	$B
31392                                           ! 4846                          0,
31393 81B3                        00            .byte	0
31394                                           ! 4847                        0,
31395 81B4                        00            .byte	0
31396                                           ! 4848                             0,
31397 81B5                        00            .byte	0
31398                                           ! 4849                          0,
31399 81B6                        00            .byte	0
31400                                           ! 4850                               0,
31401 81B7                        00            .byte	0
31402                                           ! 4851                         0,
31403 81B8                        00            .byte	0
31404                                           ! 4852                              0,
31405 81B9                        00            .byte	0
31406                                           ! 4853                         0,
31407 81BA                        00            .byte	0
31408                                           ! 4854                              0,
31409 81BB                        00            .byte	0
31410                                           ! 4855                                0,
31411 81BC                        00            .byte	0
31412                                           ! 4856                        0xE0000000,
31413 81BD                      0000            .word	0
31414 81BF                      E000            .word	$E000
31415                                           ! 4857                               0,
31416 81C1                      0000            .word	0
31417 81C3                      0000            .word	0
31418                                           ! 4858                             0,
31419 81C5                      0000            .word	0
31420                                           ! 4859                                1280,
31421 81C7                      0500            .word	$500
31422                                           ! 4860                             0,
31423 81C9                        00            .byte	0
31424                                           ! 4861                             0,
31425 81CA                        00            .byte	0
31426                                           ! 4862                           0,
31427 81CB                        00            .byte	0
31428                                           ! 4863                                0,
31429 81CC                        00            .byte	0
31430                                           ! 4864                             0,
31431 81CD                        00            .byte	0
31432                                           ! 4865                                  0,
31433 81CE                        00            .byte	0
31434                                           ! 4866                            0,
31435 81CF                        00            .byte	0
31436                                           ! 4867                                 0,
31437 81D0                        00            .byte	0
31438                                           ! 4868                            0,
31439 81D1                        00            .byte	0
31440                                           ! 4869                                 0,
31441 81D2                        00            .byte	0
31442                                           ! 4870                          0,
31443 81D3                      0000            .word	0
31444 81D5                      0000            .word	0
31445                                           ! 4871 } },
31446                                           ! 4872 { 0x010d,
31447 81D7                      010D            .word	$10D
31448                                           ! 4873 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31449 81D9                      009B            .word	$9B
31450                                           ! 4874                           0x01 | 0x02 | 0x04,
31451 81DB                        07            .byte	7
31452                                           ! 4875                           0,
31453 81DC                        00            .byte	0
31454                                           ! 4876                           64,
31455 81DD                      0040            .word	$40
31456                                           ! 4877                    64,
31457 81DF                      0040            .word	$40
31458                                           ! 4878                        0xA000,
31459 81E1                      A000            .word	$A000
31460                                           ! 4879                        0x0000,
31461 81E3                      0000            .word	0
31462                                           ! 4880                       0,
31463 81E5                      0000            .word	0
31464 81E7                      0000            .word	0
31465                                           ! 4881                             640,
31466 81E9                      0280            .word	$280
31467                                           ! 4882                        320,
31468 81EB                      0140            .word	$140
31469                                           ! 4883                        200,
31470 81ED                      00C8            .word	$C8
31471                                           ! 4884                      8,
31472 81EF                        08            .byte	8
31473                                           ! 4885                      16,
31474 81F0                        10            .byte	$10
31475                                           ! 4886                           1,
31476 81F1                        01            .byte	1
31477                                           ! 4887                         15,
31478 81F2                        0F            .byte	$F
31479                                           ! 4888                          2,
31480 81F3                        02            .byte	2
31481                                           ! 4889         
31482                                           ! 4889                0x06,
31483 81F4                        06            .byte	6
31484                                           ! 4890                     0,
31485 81F5                        00            .byte	0
31486                                           ! 4891                               130,
31487 81F6                        82            .byte	$82
31488                                           ! 4892                          0,
31489 81F7                        00            .byte	0
31490                                           ! 4893                        5,
31491 81F8                        05            .byte	5
31492                                           ! 4894                             10,
31493 81F9                        0A            .byte	$A
31494                                           ! 4895                          5,
31495 81FA                        05            .byte	5
31496                                           ! 4896                               5,
31497 81FB                        05            .byte	5
31498                                           ! 4897                         5,
31499 81FC                        05            .byte	5
31500                                           ! 4898                              0,
31501 81FD                        00            .byte	0
31502                                           ! 4899                         1,
31503 81FE                        01            .byte	1
31504                                           ! 4900                              15,
31505 81FF                        0F            .byte	$F
31506                                           ! 4901                                0,
31507 8200                        00            .byte	0
31508                                           ! 4902                        0xE0000000,
31509 8201                      0000            .word	0
31510 8203                      E000            .word	$E000
31511                                           ! 4903                               0,
31512 8205                      0000            .word	0
31513 8207                      0000            .word	0
31514                                           ! 4904                             0,
31515 8209                      0000            .word	0
31516                                           ! 4905                                640,
31517 820B                      0280            .word	$280
31518                                           ! 4906                             0,
31519 820D                        00            .byte	0
31520                                           ! 4907                             0,
31521 820E                        00            .byte	0
31522                                           ! 4908                           5,
31523 820F                        05            .byte	5
31524                                           ! 4909                                10,
31525 8210                        0A            .byte	$A
31526                                           ! 4910                             5,
31527 8211                        05            .byte	5
31528                                           ! 4911                                  5,
31529 8212                        05            .byte	5
31530                                           ! 4912                            5,
31531 8213                        05            .byte	5
31532                                           ! 4913                                 0,
31533 8214                        00            .byte	0
31534                                           ! 4914                            1,
31535 8215                        01            .byte	1
31536                                           ! 4915                                 15,
31537 8216                        0F            .byte	$F
31538                                           ! 4916                          0,
31539 8217                      0000            .word	0
31540 8219                      0000            .word	0
31541                                           ! 4917 } },
31542                                           ! 4918 { 0x010e,
31543 821B                      010E            .word	$10E
31544                                           ! 4919 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31545 821D                      009B            .word	$9B
31546                                           ! 4920                           0x01 | 0x02 | 0x04,
31547 821F                        07            .byte	7
31548                                           ! 4921                           0,
31549 8220                        00            .byte	0
31550                                           ! 4922                           64,
31551 8221                      0040            .word	$40
31552                                           ! 4923                    64,
31553 8223                      0040            .word	$40
31554                                           ! 4924                        0xA000,
31555 8225                      A000            .word	$A000
31556                                           ! 4925                        0x0000,
31557 8227                      0000            .word	0
31558                                           ! 4926                       0,
31559 8229                      0000            .word	0
31560 822B                      0000            .word	0
31561                                           ! 4927                             640,
31562 822D                      0280            .word	$280
31563                                           ! 4928                        320,
31564 822F                      0140            .word	$140
31565                                           ! 4929                        200,
31566 8231                      00C8            .word	$C8
31567                                           ! 4930                      8,
31568 8233                        08            .byte	8
31569                                           ! 4931                      16,
31570 8234                        10            .byte	$10
31571                                           ! 4932                           1,
31572 8235                        01            .byte	1
31573                                           ! 4933                         16,
31574 8236                        10            .byte	$10
31575                                           ! 4934                          2,
31576 8237                        02            .byte	2
31577                                           ! 4935                        0x06,
31578 8238                        06            .byte	6
31579                                           ! 4936                     0,
31580 8239                        00            .byte	0
31581                                           ! 4937                               130,
31582 823A                        82            .byte	$82
31583                                           ! 4938                          0,
31584 823B                        00            .byte	0
31585                                           ! 4939                        5,
31586 823C                        05            .byte	5
31587                                           ! 4940                             11,
31588 823D                        0B            .byte	$B
31589                                           ! 4941                          6,
31590 823E                        06            .byte	6
31591                                           ! 4942                               5,
31592 823F                        05            .byte	5
31593                                           ! 4943                         5,
31594 8240                        05            .byte	5
31595                                           ! 4944                              0,
31596 8241                        00            .byte	0
31597                                           ! 4945                         0,
31598 8242                        00            .byte	0
31599                                           ! 4946                              0,
31600 8243                        00            .byte	0
31601                                           ! 4947                                0,
31602 8244                        00            .byte	0
31603                                           ! 4948                        0xE0000000,
31604 8245                      0000            .word	0
31605 8247                      E000            .word	$E000
31606                                           ! 4949                               0,
31607 8249                      0000            .word	0
31608 824B                      0000            .word	0
31609                                           ! 4950                             0,
31610 824D                      0000            .word	0
31611                                           ! 4951                                640,
31612 824F                      0280            .word	$280
31613                                           ! 4952                             0,
31614 8251                        00            .byte	0
31615                                           ! 4953                             0,
31616 8252                        00            .byte	0
31617                                           ! 4954                           5,
31618 8253                        05            .byte	5
31619                                           ! 4955                                11,
31620 8254                        0B            .byte	$B
31621                                           ! 4956                             6,
31622 8255                        06            .byte	6
31623                                           ! 4957      
31624                                           ! 4957                             5,
31625 8256                        05            .byte	5
31626                                           ! 4958                            5,
31627 8257                        05            .byte	5
31628                                           ! 4959                                 0,
31629 8258                        00            .byte	0
31630                                           ! 4960                            0,
31631 8259                        00            .byte	0
31632                                           ! 4961                                 0,
31633 825A                        00            .byte	0
31634                                           ! 4962                          0,
31635 825B                      0000            .word	0
31636 825D                      0000            .word	0
31637                                           ! 4963 } },
31638                                           ! 4964 { 0x010f,
31639 825F                      010F            .word	$10F
31640                                           ! 4965 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31641 8261                      009B            .word	$9B
31642                                           ! 4966                           0x01 | 0x02 | 0x04,
31643 8263                        07            .byte	7
31644                                           ! 4967                           0,
31645 8264                        00            .byte	0
31646                                           ! 4968                           64,
31647 8265                      0040            .word	$40
31648                                           ! 4969                    64,
31649 8267                      0040            .word	$40
31650                                           ! 4970                        0xA000,
31651 8269                      A000            .word	$A000
31652                                           ! 4971                        0x0000,
31653 826B                      0000            .word	0
31654                                           ! 4972                       0,
31655 826D                      0000            .word	0
31656 826F                      0000            .word	0
31657                                           ! 4973                             960,
31658 8271                      03C0            .word	$3C0
31659                                           ! 4974                        320,
31660 8273                      0140            .word	$140
31661                                           ! 4975                        200,
31662 8275                      00C8            .word	$C8
31663                                           ! 4976                      8,
31664 8277                        08            .byte	8
31665                                           ! 4977                      16,
31666 8278                        10            .byte	$10
31667                                           ! 4978                           1,
31668 8279                        01            .byte	1
31669                                           ! 4979                         24,
31670 827A                        18            .byte	$18
31671                                           ! 4980                          3,
31672 827B                        03            .byte	3
31673                                           ! 4981                        0x06,
31674 827C                        06            .byte	6
31675                                           ! 4982                     0,
31676 827D                        00            .byte	0
31677                                           ! 4983                               86,
31678 827E                        56            .byte	$56
31679                                           ! 4984                          0,
31680 827F                        00            .byte	0
31681                                           ! 4985                        8,
31682 8280                        08            .byte	8
31683                                           ! 4986                             16,
31684 8281                        10            .byte	$10
31685                                           ! 4987                          8,
31686 8282                        08            .byte	8
31687                                           ! 4988                               8,
31688 8283                        08            .byte	8
31689                                           ! 4989                         8,
31690 8284                        08            .byte	8
31691                                           ! 4990                              0,
31692 8285                        00            .byte	0
31693                                           ! 4991                         0,
31694 8286                        00            .byte	0
31695                                           ! 4992                              0,
31696 8287                        00            .byte	0
31697                                           ! 4993                                0,
31698 8288                        00            .byte	0
31699                                           ! 4994                        0xE0000000,
31700 8289                      0000            .word	0
31701 828B                      E000            .word	$E000
31702                                           ! 4995                               0,
31703 828D                      0000            .word	0
31704 828F                      0000            .word	0
31705                                           ! 4996                             0,
31706 8291                      0000            .word	0
31707                                           ! 4997                                960,
31708 8293                      03C0            .word	$3C0
31709                                           ! 4998                             0,
31710 8295                        00            .byte	0
31711                                           ! 4999                             0,
31712 8296                        00            .byte	0
31713                                           ! 5000                           8,
31714 8297                        08            .byte	8
31715                                           ! 5001                                16,
31716 8298                        10            .byte	$10
31717                                           ! 5002                             8,
31718 8299                        08            .byte	8
31719                                           ! 5003                                  8,
31720 829A                        08            .byte	8
31721                                           ! 5004                            8,
31722 829B                        08            .byte	8
31723                                           ! 5005                                 0,
31724 829C                        00            .byte	0
31725                                           ! 5006                            0,
31726 829D                        00            .byte	0
31727                                           ! 5007                                 0,
31728 829E                        00            .byte	0
31729                                           ! 5008                          0,
31730 829F                      0000            .word	0
31731 82A1                      0000            .word	0
31732                                           ! 5009 } },
31733                                           ! 5010 { 0x0110,
31734 82A3                      0110            .word	$110
31735                                           ! 5011 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31736 82A5                      009B            .word	$9B
31737                                           ! 5012                           0x01 | 0x02 | 0x04,
31738 82A7                        07            .byte	7
31739                                           ! 5013                           0,
31740 82A8                        00            .byte	0
31741                                           ! 5014                           64,
31742 82A9                      0040            .word	$40
31743                                           ! 5015                    64,
31744 82AB                      0040            .word	$40
31745                                           ! 5016                        0xA000,
31746 82AD                      A000            .word	$A000
31747                                           ! 5017                        0x0000,
31748 82AF                      0000            .word	0
31749                                           ! 5018                       0,
31750 82B1                      0000            .word	0
31751 82B3                      0000            .word	0
31752                                           ! 5019                             1280,
31753 82B5                      0500            .word	$500
31754                                           ! 5020                        640,
31755 82B7                      0280            .word	$280
31756                                           ! 5021                        480,
31757 82B9                      01E0            .word	$1E0
31758                                           ! 5022                      8,
31759 82BB                        08            .byte	8
31760                                           ! 5023                      16,
31761 82BC                        10            .byte	$10
31762                                           ! 5024                           1,
31763 82BD                        01            .byte	1
31764                                           ! 5025                         15,
31765 82BE                        0F            .byte	$F
31766                                           ! 5026                  
31767                                           ! 5026         10,
31768 82BF                        0A            .byte	$A
31769                                           ! 5027                        0x06,
31770 82C0                        06            .byte	6
31771                                           ! 5028                     0,
31772 82C1                        00            .byte	0
31773                                           ! 5029                               26,
31774 82C2                        1A            .byte	$1A
31775                                           ! 5030                          0,
31776 82C3                        00            .byte	0
31777                                           ! 5031                        5,
31778 82C4                        05            .byte	5
31779                                           ! 5032                             10,
31780 82C5                        0A            .byte	$A
31781                                           ! 5033                          5,
31782 82C6                        05            .byte	5
31783                                           ! 5034                               5,
31784 82C7                        05            .byte	5
31785                                           ! 5035                         5,
31786 82C8                        05            .byte	5
31787                                           ! 5036                              0,
31788 82C9                        00            .byte	0
31789                                           ! 5037                         1,
31790 82CA                        01            .byte	1
31791                                           ! 5038                              15,
31792 82CB                        0F            .byte	$F
31793                                           ! 5039                                0,
31794 82CC                        00            .byte	0
31795                                           ! 5040                        0xE0000000,
31796 82CD                      0000            .word	0
31797 82CF                      E000            .word	$E000
31798                                           ! 5041                               0,
31799 82D1                      0000            .word	0
31800 82D3                      0000            .word	0
31801                                           ! 5042                             0,
31802 82D5                      0000            .word	0
31803                                           ! 5043                                1280,
31804 82D7                      0500            .word	$500
31805                                           ! 5044                             0,
31806 82D9                        00            .byte	0
31807                                           ! 5045                             0,
31808 82DA                        00            .byte	0
31809                                           ! 5046                           5,
31810 82DB                        05            .byte	5
31811                                           ! 5047                                10,
31812 82DC                        0A            .byte	$A
31813                                           ! 5048                             5,
31814 82DD                        05            .byte	5
31815                                           ! 5049                                  5,
31816 82DE                        05            .byte	5
31817                                           ! 5050                            5,
31818 82DF                        05            .byte	5
31819                                           ! 5051                                 0,
31820 82E0                        00            .byte	0
31821                                           ! 5052                            1,
31822 82E1                        01            .byte	1
31823                                           ! 5053                                 15,
31824 82E2                        0F            .byte	$F
31825                                           ! 5054                          0,
31826 82E3                      0000            .word	0
31827 82E5                      0000            .word	0
31828                                           ! 5055 } },
31829                                           ! 5056 { 0x0111,
31830 82E7                      0111            .word	$111
31831                                           ! 5057 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31832 82E9                      009B            .word	$9B
31833                                           ! 5058                           0x01 | 0x02 | 0x04,
31834 82EB                        07            .byte	7
31835                                           ! 5059                           0,
31836 82EC                        00            .byte	0
31837                                           ! 5060                           64,
31838 82ED                      0040            .word	$40
31839                                           ! 5061                    64,
31840 82EF                      0040            .word	$40
31841                                           ! 5062                        0xA000,
31842 82F1                      A000            .word	$A000
31843                                           ! 5063                        0x0000,
31844 82F3                      0000            .word	0
31845                                           ! 5064                       0,
31846 82F5                      0000            .word	0
31847 82F7                      0000            .word	0
31848                                           ! 5065                             1280,
31849 82F9                      0500            .word	$500
31850                                           ! 5066                        640,
31851 82FB                      0280            .word	$280
31852                                           ! 5067                        480,
31853 82FD                      01E0            .word	$1E0
31854                                           ! 5068                      8,
31855 82FF                        08            .byte	8
31856                                           ! 5069                      16,
31857 8300                        10            .byte	$10
31858                                           ! 5070                           1,
31859 8301                        01            .byte	1
31860                                           ! 5071                         16,
31861 8302                        10            .byte	$10
31862                                           ! 5072                          10,
31863 8303                        0A            .byte	$A
31864                                           ! 5073                        0x06,
31865 8304                        06            .byte	6
31866                                           ! 5074                     0,
31867 8305                        00            .byte	0
31868                                           ! 5075                               26,
31869 8306                        1A            .byte	$1A
31870                                           ! 5076                          0,
31871 8307                        00            .byte	0
31872                                           ! 5077                        5,
31873 8308                        05            .byte	5
31874                                           ! 5078                             11,
31875 8309                        0B            .byte	$B
31876                                           ! 5079                          6,
31877 830A                        06            .byte	6
31878                                           ! 5080                               5,
31879 830B                        05            .byte	5
31880                                           ! 5081                         5,
31881 830C                        05            .byte	5
31882                                           ! 5082                              0,
31883 830D                        00            .byte	0
31884                                           ! 5083                         0,
31885 830E                        00            .byte	0
31886                                           ! 5084                              0,
31887 830F                        00            .byte	0
31888                                           ! 5085                                0,
31889 8310                        00            .byte	0
31890                                           ! 5086                        0xE0000000,
31891 8311                      0000            .word	0
31892 8313                      E000            .word	$E000
31893                                           ! 5087                               0,
31894 8315                      0000            .word	0
31895 8317                      0000            .word	0
31896                                           ! 5088                             0,
31897 8319                      0000            .word	0
31898                                           ! 5089                                1280,
31899 831B                      0500            .word	$500
31900                                           ! 5090                             0,
31901 831D                        00            .byte	0
31902                                           ! 5091                             0,
31903 831E                        00            .byte	0
31904                                           ! 5092                           5,
31905 831F                        05            .byte	5
31906                                           ! 5093                                11,
31907 8320                        0B            .byte	$B
31908                                           ! 5094               
31909                                           ! 5094               6,
31910 8321                        06            .byte	6
31911                                           ! 5095                                  5,
31912 8322                        05            .byte	5
31913                                           ! 5096                            5,
31914 8323                        05            .byte	5
31915                                           ! 5097                                 0,
31916 8324                        00            .byte	0
31917                                           ! 5098                            0,
31918 8325                        00            .byte	0
31919                                           ! 5099                                 0,
31920 8326                        00            .byte	0
31921                                           ! 5100                          0,
31922 8327                      0000            .word	0
31923 8329                      0000            .word	0
31924                                           ! 5101 } },
31925                                           ! 5102 { 0x0112,
31926 832B                      0112            .word	$112
31927                                           ! 5103 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
31928 832D                      009B            .word	$9B
31929                                           ! 5104                           0x01 | 0x02 | 0x04,
31930 832F                        07            .byte	7
31931                                           ! 5105                           0,
31932 8330                        00            .byte	0
31933                                           ! 5106                           64,
31934 8331                      0040            .word	$40
31935                                           ! 5107                    64,
31936 8333                      0040            .word	$40
31937                                           ! 5108                        0xA000,
31938 8335                      A000            .word	$A000
31939                                           ! 5109                        0x0000,
31940 8337                      0000            .word	0
31941                                           ! 5110                       0,
31942 8339                      0000            .word	0
31943 833B                      0000            .word	0
31944                                           ! 5111                             1920,
31945 833D                      0780            .word	$780
31946                                           ! 5112                        640,
31947 833F                      0280            .word	$280
31948                                           ! 5113                        480,
31949 8341                      01E0            .word	$1E0
31950                                           ! 5114                      8,
31951 8343                        08            .byte	8
31952                                           ! 5115                      16,
31953 8344                        10            .byte	$10
31954                                           ! 5116                           1,
31955 8345                        01            .byte	1
31956                                           ! 5117                         24,
31957 8346                        18            .byte	$18
31958                                           ! 5118                          15,
31959 8347                        0F            .byte	$F
31960                                           ! 5119                        0x06,
31961 8348                        06            .byte	6
31962                                           ! 5120                     0,
31963 8349                        00            .byte	0
31964                                           ! 5121                               17,
31965 834A                        11            .byte	$11
31966                                           ! 5122                          0,
31967 834B                        00            .byte	0
31968                                           ! 5123                        8,
31969 834C                        08            .byte	8
31970                                           ! 5124                             16,
31971 834D                        10            .byte	$10
31972                                           ! 5125                          8,
31973 834E                        08            .byte	8
31974                                           ! 5126                               8,
31975 834F                        08            .byte	8
31976                                           ! 5127                         8,
31977 8350                        08            .byte	8
31978                                           ! 5128                              0,
31979 8351                        00            .byte	0
31980                                           ! 5129                         0,
31981 8352                        00            .byte	0
31982                                           ! 5130                              0,
31983 8353                        00            .byte	0
31984                                           ! 5131                                0,
31985 8354                        00            .byte	0
31986                                           ! 5132                        0xE0000000,
31987 8355                      0000            .word	0
31988 8357                      E000            .word	$E000
31989                                           ! 5133                               0,
31990 8359                      0000            .word	0
31991 835B                      0000            .word	0
31992                                           ! 5134                             0,
31993 835D                      0000            .word	0
31994                                           ! 5135                                1920,
31995 835F                      0780            .word	$780
31996                                           ! 5136                             0,
31997 8361                        00            .byte	0
31998                                           ! 5137                             0,
31999 8362                        00            .byte	0
32000                                           ! 5138                           8,
32001 8363                        08            .byte	8
32002                                           ! 5139                                16,
32003 8364                        10            .byte	$10
32004                                           ! 5140                             8,
32005 8365                        08            .byte	8
32006                                           ! 5141                                  8,
32007 8366                        08            .byte	8
32008                                           ! 5142                            8,
32009 8367                        08            .byte	8
32010                                           ! 5143                                 0,
32011 8368                        00            .byte	0
32012                                           ! 5144                            0,
32013 8369                        00            .byte	0
32014                                           ! 5145                                 0,
32015 836A                        00            .byte	0
32016                                           ! 5146                          0,
32017 836B                      0000            .word	0
32018 836D                      0000            .word	0
32019                                           ! 5147 } },
32020                                           ! 5148 { 0x0113,
32021 836F                      0113            .word	$113
32022                                           ! 5149 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32023 8371                      009B            .word	$9B
32024                                           ! 5150                           0x01 | 0x02 | 0x04,
32025 8373                        07            .byte	7
32026                                           ! 5151                           0,
32027 8374                        00            .byte	0
32028                                           ! 5152                           64,
32029 8375                      0040            .word	$40
32030                                           ! 5153                    64,
32031 8377                      0040            .word	$40
32032                                           ! 5154                        0xA000,
32033 8379                      A000            .word	$A000
32034                                           ! 5155                        0x0000,
32035 837B                      0000            .word	0
32036                                           ! 5156                       0,
32037 837D                      0000            .word	0
32038 837F                      0000            .word	0
32039                                           ! 5157                             1600,
32040 8381                      0640            .word	$640
32041                                           ! 5158                        800,
32042 8383                      0320            .word	$320
32043                                           ! 5159                        600,
32044 8385                      0258            .word	$258
32045                                           ! 5160                      8,
32046 8387                        08            .byte	8
32047                                           ! 5161                      16,
32048 8388                        10            .byte	$10
32049                                           ! 5162                           1,
32050 8389                        01            .byte	1
32051                                           ! 5163                     
32052                                           ! 5163     15,
32053 838A                        0F            .byte	$F
32054                                           ! 5164                          15,
32055 838B                        0F            .byte	$F
32056                                           ! 5165                        0x06,
32057 838C                        06            .byte	6
32058                                           ! 5166                     0,
32059 838D                        00            .byte	0
32060                                           ! 5167                               16,
32061 838E                        10            .byte	$10
32062                                           ! 5168                          0,
32063 838F                        00            .byte	0
32064                                           ! 5169                        5,
32065 8390                        05            .byte	5
32066                                           ! 5170                             10,
32067 8391                        0A            .byte	$A
32068                                           ! 5171                          5,
32069 8392                        05            .byte	5
32070                                           ! 5172                               5,
32071 8393                        05            .byte	5
32072                                           ! 5173                         5,
32073 8394                        05            .byte	5
32074                                           ! 5174                              0,
32075 8395                        00            .byte	0
32076                                           ! 5175                         1,
32077 8396                        01            .byte	1
32078                                           ! 5176                              15,
32079 8397                        0F            .byte	$F
32080                                           ! 5177                                0,
32081 8398                        00            .byte	0
32082                                           ! 5178                        0xE0000000,
32083 8399                      0000            .word	0
32084 839B                      E000            .word	$E000
32085                                           ! 5179                               0,
32086 839D                      0000            .word	0
32087 839F                      0000            .word	0
32088                                           ! 5180                             0,
32089 83A1                      0000            .word	0
32090                                           ! 5181                                1600,
32091 83A3                      0640            .word	$640
32092                                           ! 5182                             0,
32093 83A5                        00            .byte	0
32094                                           ! 5183                             0,
32095 83A6                        00            .byte	0
32096                                           ! 5184                           5,
32097 83A7                        05            .byte	5
32098                                           ! 5185                                10,
32099 83A8                        0A            .byte	$A
32100                                           ! 5186                             5,
32101 83A9                        05            .byte	5
32102                                           ! 5187                                  5,
32103 83AA                        05            .byte	5
32104                                           ! 5188                            5,
32105 83AB                        05            .byte	5
32106                                           ! 5189                                 0,
32107 83AC                        00            .byte	0
32108                                           ! 5190                            1,
32109 83AD                        01            .byte	1
32110                                           ! 5191                                 15,
32111 83AE                        0F            .byte	$F
32112                                           ! 5192                          0,
32113 83AF                      0000            .word	0
32114 83B1                      0000            .word	0
32115                                           ! 5193 } },
32116                                           ! 5194 { 0x0114,
32117 83B3                      0114            .word	$114
32118                                           ! 5195 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32119 83B5                      009B            .word	$9B
32120                                           ! 5196                           0x01 | 0x02 | 0x04,
32121 83B7                        07            .byte	7
32122                                           ! 5197                           0,
32123 83B8                        00            .byte	0
32124                                           ! 5198                           64,
32125 83B9                      0040            .word	$40
32126                                           ! 5199                    64,
32127 83BB                      0040            .word	$40
32128                                           ! 5200                        0xA000,
32129 83BD                      A000            .word	$A000
32130                                           ! 5201                        0x0000,
32131 83BF                      0000            .word	0
32132                                           ! 5202                       0,
32133 83C1                      0000            .word	0
32134 83C3                      0000            .word	0
32135                                           ! 5203                             1600,
32136 83C5                      0640            .word	$640
32137                                           ! 5204                        800,
32138 83C7                      0320            .word	$320
32139                                           ! 5205                        600,
32140 83C9                      0258            .word	$258
32141                                           ! 5206                      8,
32142 83CB                        08            .byte	8
32143                                           ! 5207                      16,
32144 83CC                        10            .byte	$10
32145                                           ! 5208                           1,
32146 83CD                        01            .byte	1
32147                                           ! 5209                         16,
32148 83CE                        10            .byte	$10
32149                                           ! 5210                          15,
32150 83CF                        0F            .byte	$F
32151                                           ! 5211                        0x06,
32152 83D0                        06            .byte	6
32153                                           ! 5212                     0,
32154 83D1                        00            .byte	0
32155                                           ! 5213                               16,
32156 83D2                        10            .byte	$10
32157                                           ! 5214                          0,
32158 83D3                        00            .byte	0
32159                                           ! 5215                        5,
32160 83D4                        05            .byte	5
32161                                           ! 5216                             11,
32162 83D5                        0B            .byte	$B
32163                                           ! 5217                          6,
32164 83D6                        06            .byte	6
32165                                           ! 5218                               5,
32166 83D7                        05            .byte	5
32167                                           ! 5219                         5,
32168 83D8                        05            .byte	5
32169                                           ! 5220                              0,
32170 83D9                        00            .byte	0
32171                                           ! 5221                         0,
32172 83DA                        00            .byte	0
32173                                           ! 5222                              0,
32174 83DB                        00            .byte	0
32175                                           ! 5223                                0,
32176 83DC                        00            .byte	0
32177                                           ! 5224                        0xE0000000,
32178 83DD                      0000            .word	0
32179 83DF                      E000            .word	$E000
32180                                           ! 5225                               0,
32181 83E1                      0000            .word	0
32182 83E3                      0000            .word	0
32183                                           ! 5226                             0,
32184 83E5                      0000            .word	0
32185                                           ! 5227                                1600,
32186 83E7                      0640            .word	$640
32187                                           ! 5228                             0,
32188 83E9                        00            .byte	0
32189                                           ! 5229                             0,
32190 83EA                        00            .byte	0
32191                                           ! 5230                           5,
32192 83EB                        05            .byte	5
32193                                           ! 5231                         
32194                                           ! 5231        11,
32195 83EC                        0B            .byte	$B
32196                                           ! 5232                             6,
32197 83ED                        06            .byte	6
32198                                           ! 5233                                  5,
32199 83EE                        05            .byte	5
32200                                           ! 5234                            5,
32201 83EF                        05            .byte	5
32202                                           ! 5235                                 0,
32203 83F0                        00            .byte	0
32204                                           ! 5236                            0,
32205 83F1                        00            .byte	0
32206                                           ! 5237                                 0,
32207 83F2                        00            .byte	0
32208                                           ! 5238                          0,
32209 83F3                      0000            .word	0
32210 83F5                      0000            .word	0
32211                                           ! 5239 } },
32212                                           ! 5240 { 0x0115,
32213 83F7                      0115            .word	$115
32214                                           ! 5241 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32215 83F9                      009B            .word	$9B
32216                                           ! 5242                           0x01 | 0x02 | 0x04,
32217 83FB                        07            .byte	7
32218                                           ! 5243                           0,
32219 83FC                        00            .byte	0
32220                                           ! 5244                           64,
32221 83FD                      0040            .word	$40
32222                                           ! 5245                    64,
32223 83FF                      0040            .word	$40
32224                                           ! 5246                        0xA000,
32225 8401                      A000            .word	$A000
32226                                           ! 5247                        0x0000,
32227 8403                      0000            .word	0
32228                                           ! 5248                       0,
32229 8405                      0000            .word	0
32230 8407                      0000            .word	0
32231                                           ! 5249                             2400,
32232 8409                      0960            .word	$960
32233                                           ! 5250                        800,
32234 840B                      0320            .word	$320
32235                                           ! 5251                        600,
32236 840D                      0258            .word	$258
32237                                           ! 5252                      8,
32238 840F                        08            .byte	8
32239                                           ! 5253                      16,
32240 8410                        10            .byte	$10
32241                                           ! 5254                           1,
32242 8411                        01            .byte	1
32243                                           ! 5255                         24,
32244 8412                        18            .byte	$18
32245                                           ! 5256                          22,
32246 8413                        16            .byte	$16
32247                                           ! 5257                        0x06,
32248 8414                        06            .byte	6
32249                                           ! 5258                     0,
32250 8415                        00            .byte	0
32251                                           ! 5259                               10,
32252 8416                        0A            .byte	$A
32253                                           ! 5260                          0,
32254 8417                        00            .byte	0
32255                                           ! 5261                        8,
32256 8418                        08            .byte	8
32257                                           ! 5262                             16,
32258 8419                        10            .byte	$10
32259                                           ! 5263                          8,
32260 841A                        08            .byte	8
32261                                           ! 5264                               8,
32262 841B                        08            .byte	8
32263                                           ! 5265                         8,
32264 841C                        08            .byte	8
32265                                           ! 5266                              0,
32266 841D                        00            .byte	0
32267                                           ! 5267                         0,
32268 841E                        00            .byte	0
32269                                           ! 5268                              0,
32270 841F                        00            .byte	0
32271                                           ! 5269                                0,
32272 8420                        00            .byte	0
32273                                           ! 5270                        0xE0000000,
32274 8421                      0000            .word	0
32275 8423                      E000            .word	$E000
32276                                           ! 5271                               0,
32277 8425                      0000            .word	0
32278 8427                      0000            .word	0
32279                                           ! 5272                             0,
32280 8429                      0000            .word	0
32281                                           ! 5273                                2400,
32282 842B                      0960            .word	$960
32283                                           ! 5274                             0,
32284 842D                        00            .byte	0
32285                                           ! 5275                             0,
32286 842E                        00            .byte	0
32287                                           ! 5276                           8,
32288 842F                        08            .byte	8
32289                                           ! 5277                                16,
32290 8430                        10            .byte	$10
32291                                           ! 5278                             8,
32292 8431                        08            .byte	8
32293                                           ! 5279                                  8,
32294 8432                        08            .byte	8
32295                                           ! 5280                            8,
32296 8433                        08            .byte	8
32297                                           ! 5281                                 0,
32298 8434                        00            .byte	0
32299                                           ! 5282                            0,
32300 8435                        00            .byte	0
32301                                           ! 5283                                 0,
32302 8436                        00            .byte	0
32303                                           ! 5284                          0,
32304 8437                      0000            .word	0
32305 8439                      0000            .word	0
32306                                           ! 5285 } },
32307                                           ! 5286 { 0x0116,
32308 843B                      0116            .word	$116
32309                                           ! 5287 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32310 843D                      009B            .word	$9B
32311                                           ! 5288                           0x01 | 0x02 | 0x04,
32312 843F                        07            .byte	7
32313                                           ! 5289                           0,
32314 8440                        00            .byte	0
32315                                           ! 5290                           64,
32316 8441                      0040            .word	$40
32317                                           ! 5291                    64,
32318 8443                      0040            .word	$40
32319                                           ! 5292                        0xA000,
32320 8445                      A000            .word	$A000
32321                                           ! 5293                        0x0000,
32322 8447                      0000            .word	0
32323                                           ! 5294                       0,
32324 8449                      0000            .word	0
32325 844B                      0000            .word	0
32326                                           ! 5295                             2048,
32327 844D                      0800            .word	$800
32328                                           ! 5296                        1024,
32329 844F                      0400            .word	$400
32330                                           ! 5297                        768,
32331 8451                      0300            .word	$300
32332                                           ! 5298                      8,
32333 8453                        08            .byte	8
32334                                           ! 5299                      16,
32335 8454                        10            .byte	$10
32336                                           ! 5300                        
32337                                           ! 5300    1,
32338 8455                        01            .byte	1
32339                                           ! 5301                         15,
32340 8456                        0F            .byte	$F
32341                                           ! 5302                          24,
32342 8457                        18            .byte	$18
32343                                           ! 5303                        0x06,
32344 8458                        06            .byte	6
32345                                           ! 5304                     0,
32346 8459                        00            .byte	0
32347                                           ! 5305                               9,
32348 845A                        09            .byte	9
32349                                           ! 5306                          0,
32350 845B                        00            .byte	0
32351                                           ! 5307                        5,
32352 845C                        05            .byte	5
32353                                           ! 5308                             10,
32354 845D                        0A            .byte	$A
32355                                           ! 5309                          5,
32356 845E                        05            .byte	5
32357                                           ! 5310                               5,
32358 845F                        05            .byte	5
32359                                           ! 5311                         5,
32360 8460                        05            .byte	5
32361                                           ! 5312                              0,
32362 8461                        00            .byte	0
32363                                           ! 5313                         1,
32364 8462                        01            .byte	1
32365                                           ! 5314                              15,
32366 8463                        0F            .byte	$F
32367                                           ! 5315                                0,
32368 8464                        00            .byte	0
32369                                           ! 5316                        0xE0000000,
32370 8465                      0000            .word	0
32371 8467                      E000            .word	$E000
32372                                           ! 5317                               0,
32373 8469                      0000            .word	0
32374 846B                      0000            .word	0
32375                                           ! 5318                             0,
32376 846D                      0000            .word	0
32377                                           ! 5319                                2048,
32378 846F                      0800            .word	$800
32379                                           ! 5320                             0,
32380 8471                        00            .byte	0
32381                                           ! 5321                             0,
32382 8472                        00            .byte	0
32383                                           ! 5322                           5,
32384 8473                        05            .byte	5
32385                                           ! 5323                                10,
32386 8474                        0A            .byte	$A
32387                                           ! 5324                             5,
32388 8475                        05            .byte	5
32389                                           ! 5325                                  5,
32390 8476                        05            .byte	5
32391                                           ! 5326                            5,
32392 8477                        05            .byte	5
32393                                           ! 5327                                 0,
32394 8478                        00            .byte	0
32395                                           ! 5328                            1,
32396 8479                        01            .byte	1
32397                                           ! 5329                                 15,
32398 847A                        0F            .byte	$F
32399                                           ! 5330                          0,
32400 847B                      0000            .word	0
32401 847D                      0000            .word	0
32402                                           ! 5331 } },
32403                                           ! 5332 { 0x0117,
32404 847F                      0117            .word	$117
32405                                           ! 5333 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32406 8481                      009B            .word	$9B
32407                                           ! 5334                           0x01 | 0x02 | 0x04,
32408 8483                        07            .byte	7
32409                                           ! 5335                           0,
32410 8484                        00            .byte	0
32411                                           ! 5336                           64,
32412 8485                      0040            .word	$40
32413                                           ! 5337                    64,
32414 8487                      0040            .word	$40
32415                                           ! 5338                        0xA000,
32416 8489                      A000            .word	$A000
32417                                           ! 5339                        0x0000,
32418 848B                      0000            .word	0
32419                                           ! 5340                       0,
32420 848D                      0000            .word	0
32421 848F                      0000            .word	0
32422                                           ! 5341                             2048,
32423 8491                      0800            .word	$800
32424                                           ! 5342                        1024,
32425 8493                      0400            .word	$400
32426                                           ! 5343                        768,
32427 8495                      0300            .word	$300
32428                                           ! 5344                      8,
32429 8497                        08            .byte	8
32430                                           ! 5345                      16,
32431 8498                        10            .byte	$10
32432                                           ! 5346                           1,
32433 8499                        01            .byte	1
32434                                           ! 5347                         16,
32435 849A                        10            .byte	$10
32436                                           ! 5348                          24,
32437 849B                        18            .byte	$18
32438                                           ! 5349                        0x06,
32439 849C                        06            .byte	6
32440                                           ! 5350                     0,
32441 849D                        00            .byte	0
32442                                           ! 5351                               9,
32443 849E                        09            .byte	9
32444                                           ! 5352                          0,
32445 849F                        00            .byte	0
32446                                           ! 5353                        5,
32447 84A0                        05            .byte	5
32448                                           ! 5354                             11,
32449 84A1                        0B            .byte	$B
32450                                           ! 5355                          6,
32451 84A2                        06            .byte	6
32452                                           ! 5356                               5,
32453 84A3                        05            .byte	5
32454                                           ! 5357                         5,
32455 84A4                        05            .byte	5
32456                                           ! 5358                              0,
32457 84A5                        00            .byte	0
32458                                           ! 5359                         0,
32459 84A6                        00            .byte	0
32460                                           ! 5360                              0,
32461 84A7                        00            .byte	0
32462                                           ! 5361                                0,
32463 84A8                        00            .byte	0
32464                                           ! 5362                        0xE0000000,
32465 84A9                      0000            .word	0
32466 84AB                      E000            .word	$E000
32467                                           ! 5363                               0,
32468 84AD                      0000            .word	0
32469 84AF                      0000            .word	0
32470                                           ! 5364                             0,
32471 84B1                      0000            .word	0
32472                                           ! 5365                                2048,
32473 84B3                      0800            .word	$800
32474                                           ! 5366                             0,
32475 84B5                        00            .byte	0
32476                                           ! 5367                             0,
32477 84B6                        00            .byte	0
32478                                           ! 5368                           5,
32479                                           ! 5368 
32480 84B7                        05            .byte	5
32481                                           ! 5369                                11,
32482 84B8                        0B            .byte	$B
32483                                           ! 5370                             6,
32484 84B9                        06            .byte	6
32485                                           ! 5371                                  5,
32486 84BA                        05            .byte	5
32487                                           ! 5372                            5,
32488 84BB                        05            .byte	5
32489                                           ! 5373                                 0,
32490 84BC                        00            .byte	0
32491                                           ! 5374                            0,
32492 84BD                        00            .byte	0
32493                                           ! 5375                                 0,
32494 84BE                        00            .byte	0
32495                                           ! 5376                          0,
32496 84BF                      0000            .word	0
32497 84C1                      0000            .word	0
32498                                           ! 5377 } },
32499                                           ! 5378 { 0x0118,
32500 84C3                      0118            .word	$118
32501                                           ! 5379 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32502 84C5                      009B            .word	$9B
32503                                           ! 5380                           0x01 | 0x02 | 0x04,
32504 84C7                        07            .byte	7
32505                                           ! 5381                           0,
32506 84C8                        00            .byte	0
32507                                           ! 5382                           64,
32508 84C9                      0040            .word	$40
32509                                           ! 5383                    64,
32510 84CB                      0040            .word	$40
32511                                           ! 5384                        0xA000,
32512 84CD                      A000            .word	$A000
32513                                           ! 5385                        0x0000,
32514 84CF                      0000            .word	0
32515                                           ! 5386                       0,
32516 84D1                      0000            .word	0
32517 84D3                      0000            .word	0
32518                                           ! 5387                             3072,
32519 84D5                      0C00            .word	$C00
32520                                           ! 5388                        1024,
32521 84D7                      0400            .word	$400
32522                                           ! 5389                        768,
32523 84D9                      0300            .word	$300
32524                                           ! 5390                      8,
32525 84DB                        08            .byte	8
32526                                           ! 5391                      16,
32527 84DC                        10            .byte	$10
32528                                           ! 5392                           1,
32529 84DD                        01            .byte	1
32530                                           ! 5393                         24,
32531 84DE                        18            .byte	$18
32532                                           ! 5394                          36,
32533 84DF                        24            .byte	$24
32534                                           ! 5395                        0x06,
32535 84E0                        06            .byte	6
32536                                           ! 5396                     0,
32537 84E1                        00            .byte	0
32538                                           ! 5397                               6,
32539 84E2                        06            .byte	6
32540                                           ! 5398                          0,
32541 84E3                        00            .byte	0
32542                                           ! 5399                        8,
32543 84E4                        08            .byte	8
32544                                           ! 5400                             16,
32545 84E5                        10            .byte	$10
32546                                           ! 5401                          8,
32547 84E6                        08            .byte	8
32548                                           ! 5402                               8,
32549 84E7                        08            .byte	8
32550                                           ! 5403                         8,
32551 84E8                        08            .byte	8
32552                                           ! 5404                              0,
32553 84E9                        00            .byte	0
32554                                           ! 5405                         0,
32555 84EA                        00            .byte	0
32556                                           ! 5406                              0,
32557 84EB                        00            .byte	0
32558                                           ! 5407                                0,
32559 84EC                        00            .byte	0
32560                                           ! 5408                        0xE0000000,
32561 84ED                      0000            .word	0
32562 84EF                      E000            .word	$E000
32563                                           ! 5409                               0,
32564 84F1                      0000            .word	0
32565 84F3                      0000            .word	0
32566                                           ! 5410                             0,
32567 84F5                      0000            .word	0
32568                                           ! 5411                                3072,
32569 84F7                      0C00            .word	$C00
32570                                           ! 5412                             0,
32571 84F9                        00            .byte	0
32572                                           ! 5413                             0,
32573 84FA                        00            .byte	0
32574                                           ! 5414                           8,
32575 84FB                        08            .byte	8
32576                                           ! 5415                                16,
32577 84FC                        10            .byte	$10
32578                                           ! 5416                             8,
32579 84FD                        08            .byte	8
32580                                           ! 5417                                  8,
32581 84FE                        08            .byte	8
32582                                           ! 5418                            8,
32583 84FF                        08            .byte	8
32584                                           ! 5419                                 0,
32585 8500                        00            .byte	0
32586                                           ! 5420                            0,
32587 8501                        00            .byte	0
32588                                           ! 5421                                 0,
32589 8502                        00            .byte	0
32590                                           ! 5422                          0,
32591 8503                      0000            .word	0
32592 8505                      0000            .word	0
32593                                           ! 5423 } },
32594                                           ! 5424 { 0x0119,
32595 8507                      0119            .word	$119
32596                                           ! 5425 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32597 8509                      009B            .word	$9B
32598                                           ! 5426                           0x01 | 0x02 | 0x04,
32599 850B                        07            .byte	7
32600                                           ! 5427                           0,
32601 850C                        00            .byte	0
32602                                           ! 5428                           64,
32603 850D                      0040            .word	$40
32604                                           ! 5429                    64,
32605 850F                      0040            .word	$40
32606                                           ! 5430                        0xA000,
32607 8511                      A000            .word	$A000
32608                                           ! 5431                        0x0000,
32609 8513                      0000            .word	0
32610                                           ! 5432                       0,
32611 8515                      0000            .word	0
32612 8517                      0000            .word	0
32613                                           ! 5433                             2560,
32614 8519                      0A00            .word	$A00
32615                                           ! 5434                        1280,
32616 851B                      0500            .word	$500
32617                                           ! 5435                        1024,
32618 851D                      0400            .word	$400
32619                                           ! 5436                      8,
32620 851F                        08            .byte	8
32621                                           ! 5437                      1
32622                                           ! 5437 6,
32623 8520                        10            .byte	$10
32624                                           ! 5438                           1,
32625 8521                        01            .byte	1
32626                                           ! 5439                         15,
32627 8522                        0F            .byte	$F
32628                                           ! 5440                          40,
32629 8523                        28            .byte	$28
32630                                           ! 5441                        0x06,
32631 8524                        06            .byte	6
32632                                           ! 5442                     0,
32633 8525                        00            .byte	0
32634                                           ! 5443                               5,
32635 8526                        05            .byte	5
32636                                           ! 5444                          0,
32637 8527                        00            .byte	0
32638                                           ! 5445                        5,
32639 8528                        05            .byte	5
32640                                           ! 5446                             10,
32641 8529                        0A            .byte	$A
32642                                           ! 5447                          5,
32643 852A                        05            .byte	5
32644                                           ! 5448                               5,
32645 852B                        05            .byte	5
32646                                           ! 5449                         5,
32647 852C                        05            .byte	5
32648                                           ! 5450                              0,
32649 852D                        00            .byte	0
32650                                           ! 5451                         1,
32651 852E                        01            .byte	1
32652                                           ! 5452                              15,
32653 852F                        0F            .byte	$F
32654                                           ! 5453                                0,
32655 8530                        00            .byte	0
32656                                           ! 5454                        0xE0000000,
32657 8531                      0000            .word	0
32658 8533                      E000            .word	$E000
32659                                           ! 5455                               0,
32660 8535                      0000            .word	0
32661 8537                      0000            .word	0
32662                                           ! 5456                             0,
32663 8539                      0000            .word	0
32664                                           ! 5457                                2560,
32665 853B                      0A00            .word	$A00
32666                                           ! 5458                             0,
32667 853D                        00            .byte	0
32668                                           ! 5459                             0,
32669 853E                        00            .byte	0
32670                                           ! 5460                           5,
32671 853F                        05            .byte	5
32672                                           ! 5461                                10,
32673 8540                        0A            .byte	$A
32674                                           ! 5462                             5,
32675 8541                        05            .byte	5
32676                                           ! 5463                                  5,
32677 8542                        05            .byte	5
32678                                           ! 5464                            5,
32679 8543                        05            .byte	5
32680                                           ! 5465                                 0,
32681 8544                        00            .byte	0
32682                                           ! 5466                            1,
32683 8545                        01            .byte	1
32684                                           ! 5467                                 15,
32685 8546                        0F            .byte	$F
32686                                           ! 5468                          0,
32687 8547                      0000            .word	0
32688 8549                      0000            .word	0
32689                                           ! 5469 } },
32690                                           ! 5470 { 0x011a,
32691 854B                      011A            .word	$11A
32692                                           ! 5471 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32693 854D                      009B            .word	$9B
32694                                           ! 5472                           0x01 | 0x02 | 0x04,
32695 854F                        07            .byte	7
32696                                           ! 5473                           0,
32697 8550                        00            .byte	0
32698                                           ! 5474                           64,
32699 8551                      0040            .word	$40
32700                                           ! 5475                    64,
32701 8553                      0040            .word	$40
32702                                           ! 5476                        0xA000,
32703 8555                      A000            .word	$A000
32704                                           ! 5477                        0x0000,
32705 8557                      0000            .word	0
32706                                           ! 5478                       0,
32707 8559                      0000            .word	0
32708 855B                      0000            .word	0
32709                                           ! 5479                             2560,
32710 855D                      0A00            .word	$A00
32711                                           ! 5480                        1280,
32712 855F                      0500            .word	$500
32713                                           ! 5481                        1024,
32714 8561                      0400            .word	$400
32715                                           ! 5482                      8,
32716 8563                        08            .byte	8
32717                                           ! 5483                      16,
32718 8564                        10            .byte	$10
32719                                           ! 5484                           1,
32720 8565                        01            .byte	1
32721                                           ! 5485                         16,
32722 8566                        10            .byte	$10
32723                                           ! 5486                          40,
32724 8567                        28            .byte	$28
32725                                           ! 5487                        0x06,
32726 8568                        06            .byte	6
32727                                           ! 5488                     0,
32728 8569                        00            .byte	0
32729                                           ! 5489                               5,
32730 856A                        05            .byte	5
32731                                           ! 5490                          0,
32732 856B                        00            .byte	0
32733                                           ! 5491                        5,
32734 856C                        05            .byte	5
32735                                           ! 5492                             11,
32736 856D                        0B            .byte	$B
32737                                           ! 5493                          6,
32738 856E                        06            .byte	6
32739                                           ! 5494                               5,
32740 856F                        05            .byte	5
32741                                           ! 5495                         5,
32742 8570                        05            .byte	5
32743                                           ! 5496                              0,
32744 8571                        00            .byte	0
32745                                           ! 5497                         0,
32746 8572                        00            .byte	0
32747                                           ! 5498                              0,
32748 8573                        00            .byte	0
32749                                           ! 5499                                0,
32750 8574                        00            .byte	0
32751                                           ! 5500                        0xE0000000,
32752 8575                      0000            .word	0
32753 8577                      E000            .word	$E000
32754                                           ! 5501                               0,
32755 8579                      0000            .word	0
32756 857B                      0000            .word	0
32757                                           ! 5502                             0,
32758 857D                      0000            .word	0
32759                                           ! 5503                                2560,
32760 857F                      0A00            .word	$A00
32761                                           ! 5504                             0,
32762 8581                        00            .byte	0
32763                                           ! 5505                             0,
32764 8582                        00            .byte	0
32765                                           ! 5506  
32766                                           ! 5506                          5,
32767 8583                        05            .byte	5
32768                                           ! 5507                                11,
32769 8584                        0B            .byte	$B
32770                                           ! 5508                             6,
32771 8585                        06            .byte	6
32772                                           ! 5509                                  5,
32773 8586                        05            .byte	5
32774                                           ! 5510                            5,
32775 8587                        05            .byte	5
32776                                           ! 5511                                 0,
32777 8588                        00            .byte	0
32778                                           ! 5512                            0,
32779 8589                        00            .byte	0
32780                                           ! 5513                                 0,
32781 858A                        00            .byte	0
32782                                           ! 5514                          0,
32783 858B                      0000            .word	0
32784 858D                      0000            .word	0
32785                                           ! 5515 } },
32786                                           ! 5516 { 0x011b,
32787 858F                      011B            .word	$11B
32788                                           ! 5517 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32789 8591                      009B            .word	$9B
32790                                           ! 5518                           0x01 | 0x02 | 0x04,
32791 8593                        07            .byte	7
32792                                           ! 5519                           0,
32793 8594                        00            .byte	0
32794                                           ! 5520                           64,
32795 8595                      0040            .word	$40
32796                                           ! 5521                    64,
32797 8597                      0040            .word	$40
32798                                           ! 5522                        0xA000,
32799 8599                      A000            .word	$A000
32800                                           ! 5523                        0x0000,
32801 859B                      0000            .word	0
32802                                           ! 5524                       0,
32803 859D                      0000            .word	0
32804 859F                      0000            .word	0
32805                                           ! 5525                             3840,
32806 85A1                      0F00            .word	$F00
32807                                           ! 5526                        1280,
32808 85A3                      0500            .word	$500
32809                                           ! 5527                        1024,
32810 85A5                      0400            .word	$400
32811                                           ! 5528                      8,
32812 85A7                        08            .byte	8
32813                                           ! 5529                      16,
32814 85A8                        10            .byte	$10
32815                                           ! 5530                           1,
32816 85A9                        01            .byte	1
32817                                           ! 5531                         24,
32818 85AA                        18            .byte	$18
32819                                           ! 5532                          60,
32820 85AB                        3C            .byte	$3C
32821                                           ! 5533                        0x06,
32822 85AC                        06            .byte	6
32823                                           ! 5534                     0,
32824 85AD                        00            .byte	0
32825                                           ! 5535                               3,
32826 85AE                        03            .byte	3
32827                                           ! 5536                          0,
32828 85AF                        00            .byte	0
32829                                           ! 5537                        8,
32830 85B0                        08            .byte	8
32831                                           ! 5538                             16,
32832 85B1                        10            .byte	$10
32833                                           ! 5539                          8,
32834 85B2                        08            .byte	8
32835                                           ! 5540                               8,
32836 85B3                        08            .byte	8
32837                                           ! 5541                         8,
32838 85B4                        08            .byte	8
32839                                           ! 5542                              0,
32840 85B5                        00            .byte	0
32841                                           ! 5543                         0,
32842 85B6                        00            .byte	0
32843                                           ! 5544                              0,
32844 85B7                        00            .byte	0
32845                                           ! 5545                                0,
32846 85B8                        00            .byte	0
32847                                           ! 5546                        0xE0000000,
32848 85B9                      0000            .word	0
32849 85BB                      E000            .word	$E000
32850                                           ! 5547                               0,
32851 85BD                      0000            .word	0
32852 85BF                      0000            .word	0
32853                                           ! 5548                             0,
32854 85C1                      0000            .word	0
32855                                           ! 5549                                3840,
32856 85C3                      0F00            .word	$F00
32857                                           ! 5550                             0,
32858 85C5                        00            .byte	0
32859                                           ! 5551                             0,
32860 85C6                        00            .byte	0
32861                                           ! 5552                           8,
32862 85C7                        08            .byte	8
32863                                           ! 5553                                16,
32864 85C8                        10            .byte	$10
32865                                           ! 5554                             8,
32866 85C9                        08            .byte	8
32867                                           ! 5555                                  8,
32868 85CA                        08            .byte	8
32869                                           ! 5556                            8,
32870 85CB                        08            .byte	8
32871                                           ! 5557                                 0,
32872 85CC                        00            .byte	0
32873                                           ! 5558                            0,
32874 85CD                        00            .byte	0
32875                                           ! 5559                                 0,
32876 85CE                        00            .byte	0
32877                                           ! 5560                          0,
32878 85CF                      0000            .word	0
32879 85D1                      0000            .word	0
32880                                           ! 5561 } },
32881                                           ! 5562 { 0x011c,
32882 85D3                      011C            .word	$11C
32883                                           ! 5563 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32884 85D5                      009B            .word	$9B
32885                                           ! 5564                           0x01 | 0x02 | 0x04,
32886 85D7                        07            .byte	7
32887                                           ! 5565                           0,
32888 85D8                        00            .byte	0
32889                                           ! 5566                           64,
32890 85D9                      0040            .word	$40
32891                                           ! 5567                    64,
32892 85DB                      0040            .word	$40
32893                                           ! 5568                        0xA000,
32894 85DD                      A000            .word	$A000
32895                                           ! 5569                        0x0000,
32896 85DF                      0000            .word	0
32897                                           ! 5570                       0,
32898 85E1                      0000            .word	0
32899 85E3                      0000            .word	0
32900                                           ! 5571                             1600,
32901 85E5                      0640            .word	$640
32902                                           ! 5572                        1600,
32903 85E7                      0640            .word	$640
32904                                           ! 5573                        1200,
32905 85E9                      04B0            .word	$4B0
32906                                           ! 5574                   
32907                                           ! 5574    8,
32908 85EB                        08            .byte	8
32909                                           ! 5575                      16,
32910 85EC                        10            .byte	$10
32911                                           ! 5576                           1,
32912 85ED                        01            .byte	1
32913                                           ! 5577                         8,
32914 85EE                        08            .byte	8
32915                                           ! 5578                          30,
32916 85EF                        1E            .byte	$1E
32917                                           ! 5579                        0x04,
32918 85F0                        04            .byte	4
32919                                           ! 5580                     0,
32920 85F1                        00            .byte	0
32921                                           ! 5581                               7,
32922 85F2                        07            .byte	7
32923                                           ! 5582                          0,
32924 85F3                        00            .byte	0
32925                                           ! 5583                        0,
32926 85F4                        00            .byte	0
32927                                           ! 5584                             0,
32928 85F5                        00            .byte	0
32929                                           ! 5585                          0,
32930 85F6                        00            .byte	0
32931                                           ! 5586                               0,
32932 85F7                        00            .byte	0
32933                                           ! 5587                         0,
32934 85F8                        00            .byte	0
32935                                           ! 5588                              0,
32936 85F9                        00            .byte	0
32937                                           ! 5589                         0,
32938 85FA                        00            .byte	0
32939                                           ! 5590                              0,
32940 85FB                        00            .byte	0
32941                                           ! 5591                                0,
32942 85FC                        00            .byte	0
32943                                           ! 5592                        0xE0000000,
32944 85FD                      0000            .word	0
32945 85FF                      E000            .word	$E000
32946                                           ! 5593                               0,
32947 8601                      0000            .word	0
32948 8603                      0000            .word	0
32949                                           ! 5594                             0,
32950 8605                      0000            .word	0
32951                                           ! 5595                                1600,
32952 8607                      0640            .word	$640
32953                                           ! 5596                             0,
32954 8609                        00            .byte	0
32955                                           ! 5597                             0,
32956 860A                        00            .byte	0
32957                                           ! 5598                           0,
32958 860B                        00            .byte	0
32959                                           ! 5599                                0,
32960 860C                        00            .byte	0
32961                                           ! 5600                             0,
32962 860D                        00            .byte	0
32963                                           ! 5601                                  0,
32964 860E                        00            .byte	0
32965                                           ! 5602                            0,
32966 860F                        00            .byte	0
32967                                           ! 5603                                 0,
32968 8610                        00            .byte	0
32969                                           ! 5604                            0,
32970 8611                        00            .byte	0
32971                                           ! 5605                                 0,
32972 8612                        00            .byte	0
32973                                           ! 5606                          0,
32974 8613                      0000            .word	0
32975 8615                      0000            .word	0
32976                                           ! 5607 } },
32977                                           ! 5608 { 0x011d,
32978 8617                      011D            .word	$11D
32979                                           ! 5609 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
32980 8619                      009B            .word	$9B
32981                                           ! 5610                           0x01 | 0x02 | 0x04,
32982 861B                        07            .byte	7
32983                                           ! 5611                           0,
32984 861C                        00            .byte	0
32985                                           ! 5612                           64,
32986 861D                      0040            .word	$40
32987                                           ! 5613                    64,
32988 861F                      0040            .word	$40
32989                                           ! 5614                        0xA000,
32990 8621                      A000            .word	$A000
32991                                           ! 5615                        0x0000,
32992 8623                      0000            .word	0
32993                                           ! 5616                       0,
32994 8625                      0000            .word	0
32995 8627                      0000            .word	0
32996                                           ! 5617                             3200,
32997 8629                      0C80            .word	$C80
32998                                           ! 5618                        1600,
32999 862B                      0640            .word	$640
33000                                           ! 5619                        1200,
33001 862D                      04B0            .word	$4B0
33002                                           ! 5620                      8,
33003 862F                        08            .byte	8
33004                                           ! 5621                      16,
33005 8630                        10            .byte	$10
33006                                           ! 5622                           1,
33007 8631                        01            .byte	1
33008                                           ! 5623                         15,
33009 8632                        0F            .byte	$F
33010                                           ! 5624                          59,
33011 8633                        3B            .byte	$3B
33012                                           ! 5625                        0x06,
33013 8634                        06            .byte	6
33014                                           ! 5626                     0,
33015 8635                        00            .byte	0
33016                                           ! 5627                               3,
33017 8636                        03            .byte	3
33018                                           ! 5628                          0,
33019 8637                        00            .byte	0
33020                                           ! 5629                        5,
33021 8638                        05            .byte	5
33022                                           ! 5630                             10,
33023 8639                        0A            .byte	$A
33024                                           ! 5631                          5,
33025 863A                        05            .byte	5
33026                                           ! 5632                               5,
33027 863B                        05            .byte	5
33028                                           ! 5633                         5,
33029 863C                        05            .byte	5
33030                                           ! 5634                              0,
33031 863D                        00            .byte	0
33032                                           ! 5635                         1,
33033 863E                        01            .byte	1
33034                                           ! 5636                              15,
33035 863F                        0F            .byte	$F
33036                                           ! 5637                                0,
33037 8640                        00            .byte	0
33038                                           ! 5638                        0xE0000000,
33039 8641                      0000            .word	0
33040 8643                      E000            .word	$E000
33041                                           ! 5639                               0,
33042 8645                      0000            .word	0
33043 8647                      0000            .word	0
33044                                           ! 5640                             0,
33045 8649                      0000            .word	0
33046                                           ! 5641                                3200,
33047 864B                      0C80            .word	$C80
33048                                           ! 5642                             0,
33049 864D                        00            .byte	0
33050                                           ! 5643         
33051                                           ! 5643                     0,
33052 864E                        00            .byte	0
33053                                           ! 5644                           5,
33054 864F                        05            .byte	5
33055                                           ! 5645                                10,
33056 8650                        0A            .byte	$A
33057                                           ! 5646                             5,
33058 8651                        05            .byte	5
33059                                           ! 5647                                  5,
33060 8652                        05            .byte	5
33061                                           ! 5648                            5,
33062 8653                        05            .byte	5
33063                                           ! 5649                                 0,
33064 8654                        00            .byte	0
33065                                           ! 5650                            1,
33066 8655                        01            .byte	1
33067                                           ! 5651                                 15,
33068 8656                        0F            .byte	$F
33069                                           ! 5652                          0,
33070 8657                      0000            .word	0
33071 8659                      0000            .word	0
33072                                           ! 5653 } },
33073                                           ! 5654 { 0x011e,
33074 865B                      011E            .word	$11E
33075                                           ! 5655 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33076 865D                      009B            .word	$9B
33077                                           ! 5656                           0x01 | 0x02 | 0x04,
33078 865F                        07            .byte	7
33079                                           ! 5657                           0,
33080 8660                        00            .byte	0
33081                                           ! 5658                           64,
33082 8661                      0040            .word	$40
33083                                           ! 5659                    64,
33084 8663                      0040            .word	$40
33085                                           ! 5660                        0xA000,
33086 8665                      A000            .word	$A000
33087                                           ! 5661                        0x0000,
33088 8667                      0000            .word	0
33089                                           ! 5662                       0,
33090 8669                      0000            .word	0
33091 866B                      0000            .word	0
33092                                           ! 5663                             3200,
33093 866D                      0C80            .word	$C80
33094                                           ! 5664                        1600,
33095 866F                      0640            .word	$640
33096                                           ! 5665                        1200,
33097 8671                      04B0            .word	$4B0
33098                                           ! 5666                      8,
33099 8673                        08            .byte	8
33100                                           ! 5667                      16,
33101 8674                        10            .byte	$10
33102                                           ! 5668                           1,
33103 8675                        01            .byte	1
33104                                           ! 5669                         16,
33105 8676                        10            .byte	$10
33106                                           ! 5670                          59,
33107 8677                        3B            .byte	$3B
33108                                           ! 5671                        0x06,
33109 8678                        06            .byte	6
33110                                           ! 5672                     0,
33111 8679                        00            .byte	0
33112                                           ! 5673                               3,
33113 867A                        03            .byte	3
33114                                           ! 5674                          0,
33115 867B                        00            .byte	0
33116                                           ! 5675                        5,
33117 867C                        05            .byte	5
33118                                           ! 5676                             11,
33119 867D                        0B            .byte	$B
33120                                           ! 5677                          6,
33121 867E                        06            .byte	6
33122                                           ! 5678                               5,
33123 867F                        05            .byte	5
33124                                           ! 5679                         5,
33125 8680                        05            .byte	5
33126                                           ! 5680                              0,
33127 8681                        00            .byte	0
33128                                           ! 5681                         0,
33129 8682                        00            .byte	0
33130                                           ! 5682                              0,
33131 8683                        00            .byte	0
33132                                           ! 5683                                0,
33133 8684                        00            .byte	0
33134                                           ! 5684                        0xE0000000,
33135 8685                      0000            .word	0
33136 8687                      E000            .word	$E000
33137                                           ! 5685                               0,
33138 8689                      0000            .word	0
33139 868B                      0000            .word	0
33140                                           ! 5686                             0,
33141 868D                      0000            .word	0
33142                                           ! 5687                                3200,
33143 868F                      0C80            .word	$C80
33144                                           ! 5688                             0,
33145 8691                        00            .byte	0
33146                                           ! 5689                             0,
33147 8692                        00            .byte	0
33148                                           ! 5690                           5,
33149 8693                        05            .byte	5
33150                                           ! 5691                                11,
33151 8694                        0B            .byte	$B
33152                                           ! 5692                             6,
33153 8695                        06            .byte	6
33154                                           ! 5693                                  5,
33155 8696                        05            .byte	5
33156                                           ! 5694                            5,
33157 8697                        05            .byte	5
33158                                           ! 5695                                 0,
33159 8698                        00            .byte	0
33160                                           ! 5696                            0,
33161 8699                        00            .byte	0
33162                                           ! 5697                                 0,
33163 869A                        00            .byte	0
33164                                           ! 5698                          0,
33165 869B                      0000            .word	0
33166 869D                      0000            .word	0
33167                                           ! 5699 } },
33168                                           ! 5700 { 0x011f,
33169 869F                      011F            .word	$11F
33170                                           ! 5701 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33171 86A1                      009B            .word	$9B
33172                                           ! 5702                           0x01 | 0x02 | 0x04,
33173 86A3                        07            .byte	7
33174                                           ! 5703                           0,
33175 86A4                        00            .byte	0
33176                                           ! 5704                           64,
33177 86A5                      0040            .word	$40
33178                                           ! 5705                    64,
33179 86A7                      0040            .word	$40
33180                                           ! 5706                        0xA000,
33181 86A9                      A000            .word	$A000
33182                                           ! 5707                        0x0000,
33183 86AB                      0000            .word	0
33184                                           ! 5708                       0,
33185 86AD                      0000            .word	0
33186 86AF                      0000            .word	0
33187                                           ! 5709                             4800,
33188 86B1                      12C0            .word	$12C0
33189                                           ! 5710                        1600,
33190 86B3                      0640            .word	$640
33191                                           ! 5711                       
33192                                           ! 5711  1200,
33193 86B5                      04B0            .word	$4B0
33194                                           ! 5712                      8,
33195 86B7                        08            .byte	8
33196                                           ! 5713                      16,
33197 86B8                        10            .byte	$10
33198                                           ! 5714                           1,
33199 86B9                        01            .byte	1
33200                                           ! 5715                         24,
33201 86BA                        18            .byte	$18
33202                                           ! 5716                          88,
33203 86BB                        58            .byte	$58
33204                                           ! 5717                        0x06,
33205 86BC                        06            .byte	6
33206                                           ! 5718                     0,
33207 86BD                        00            .byte	0
33208                                           ! 5719                               1,
33209 86BE                        01            .byte	1
33210                                           ! 5720                          0,
33211 86BF                        00            .byte	0
33212                                           ! 5721                        8,
33213 86C0                        08            .byte	8
33214                                           ! 5722                             16,
33215 86C1                        10            .byte	$10
33216                                           ! 5723                          8,
33217 86C2                        08            .byte	8
33218                                           ! 5724                               8,
33219 86C3                        08            .byte	8
33220                                           ! 5725                         8,
33221 86C4                        08            .byte	8
33222                                           ! 5726                              0,
33223 86C5                        00            .byte	0
33224                                           ! 5727                         0,
33225 86C6                        00            .byte	0
33226                                           ! 5728                              0,
33227 86C7                        00            .byte	0
33228                                           ! 5729                                0,
33229 86C8                        00            .byte	0
33230                                           ! 5730                        0xE0000000,
33231 86C9                      0000            .word	0
33232 86CB                      E000            .word	$E000
33233                                           ! 5731                               0,
33234 86CD                      0000            .word	0
33235 86CF                      0000            .word	0
33236                                           ! 5732                             0,
33237 86D1                      0000            .word	0
33238                                           ! 5733                                4800,
33239 86D3                      12C0            .word	$12C0
33240                                           ! 5734                             0,
33241 86D5                        00            .byte	0
33242                                           ! 5735                             0,
33243 86D6                        00            .byte	0
33244                                           ! 5736                           8,
33245 86D7                        08            .byte	8
33246                                           ! 5737                                16,
33247 86D8                        10            .byte	$10
33248                                           ! 5738                             8,
33249 86D9                        08            .byte	8
33250                                           ! 5739                                  8,
33251 86DA                        08            .byte	8
33252                                           ! 5740                            8,
33253 86DB                        08            .byte	8
33254                                           ! 5741                                 0,
33255 86DC                        00            .byte	0
33256                                           ! 5742                            0,
33257 86DD                        00            .byte	0
33258                                           ! 5743                                 0,
33259 86DE                        00            .byte	0
33260                                           ! 5744                          0,
33261 86DF                      0000            .word	0
33262 86E1                      0000            .word	0
33263                                           ! 5745 } },
33264                                           ! 5746 { 0x0140,
33265 86E3                      0140            .word	$140
33266                                           ! 5747 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33267 86E5                      009B            .word	$9B
33268                                           ! 5748                           0x01 | 0x02 | 0x04,
33269 86E7                        07            .byte	7
33270                                           ! 5749                           0,
33271 86E8                        00            .byte	0
33272                                           ! 5750                           64,
33273 86E9                      0040            .word	$40
33274                                           ! 5751                    64,
33275 86EB                      0040            .word	$40
33276                                           ! 5752                        0xA000,
33277 86ED                      A000            .word	$A000
33278                                           ! 5753                        0x0000,
33279 86EF                      0000            .word	0
33280                                           ! 5754                       0,
33281 86F1                      0000            .word	0
33282 86F3                      0000            .word	0
33283                                           ! 5755                             1280,
33284 86F5                      0500            .word	$500
33285                                           ! 5756                        320,
33286 86F7                      0140            .word	$140
33287                                           ! 5757                        200,
33288 86F9                      00C8            .word	$C8
33289                                           ! 5758                      8,
33290 86FB                        08            .byte	8
33291                                           ! 5759                      16,
33292 86FC                        10            .byte	$10
33293                                           ! 5760                           1,
33294 86FD                        01            .byte	1
33295                                           ! 5761                         32,
33296 86FE                        20            .byte	$20
33297                                           ! 5762                          4,
33298 86FF                        04            .byte	4
33299                                           ! 5763                        0x06,
33300 8700                        06            .byte	6
33301                                           ! 5764                     0,
33302 8701                        00            .byte	0
33303                                           ! 5765                               64,
33304 8702                        40            .byte	$40
33305                                           ! 5766                          0,
33306 8703                        00            .byte	0
33307                                           ! 5767                        8,
33308 8704                        08            .byte	8
33309                                           ! 5768                             16,
33310 8705                        10            .byte	$10
33311                                           ! 5769                          8,
33312 8706                        08            .byte	8
33313                                           ! 5770                               8,
33314 8707                        08            .byte	8
33315                                           ! 5771                         8,
33316 8708                        08            .byte	8
33317                                           ! 5772                              0,
33318 8709                        00            .byte	0
33319                                           ! 5773                         8,
33320 870A                        08            .byte	8
33321                                           ! 5774                              24,
33322 870B                        18            .byte	$18
33323                                           ! 5775                                0x02,
33324 870C                        02            .byte	2
33325                                           ! 5776                        0xE0000000,
33326 870D                      0000            .word	0
33327 870F                      E000            .word	$E000
33328                                           ! 5777                               0,
33329 8711                      0000            .word	0
33330 8713                      0000            .word	0
33331                                           ! 5778                             0,
33332 8715                      0000            .word	0
33333                                           ! 5779                                1280,
33334 8717                      0500            .word	$500
33335                                           ! 5780           
33336                                           ! 5780                   0,
33337 8719                        00            .byte	0
33338                                           ! 5781                             0,
33339 871A                        00            .byte	0
33340                                           ! 5782                           8,
33341 871B                        08            .byte	8
33342                                           ! 5783                                16,
33343 871C                        10            .byte	$10
33344                                           ! 5784                             8,
33345 871D                        08            .byte	8
33346                                           ! 5785                                  8,
33347 871E                        08            .byte	8
33348                                           ! 5786                            8,
33349 871F                        08            .byte	8
33350                                           ! 5787                                 0,
33351 8720                        00            .byte	0
33352                                           ! 5788                            8,
33353 8721                        08            .byte	8
33354                                           ! 5789                                 24,
33355 8722                        18            .byte	$18
33356                                           ! 5790                          0,
33357 8723                      0000            .word	0
33358 8725                      0000            .word	0
33359                                           ! 5791 } },
33360                                           ! 5792 { 0x0141,
33361 8727                      0141            .word	$141
33362                                           ! 5793 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33363 8729                      009B            .word	$9B
33364                                           ! 5794                           0x01 | 0x02 | 0x04,
33365 872B                        07            .byte	7
33366                                           ! 5795                           0,
33367 872C                        00            .byte	0
33368                                           ! 5796                           64,
33369 872D                      0040            .word	$40
33370                                           ! 5797                    64,
33371 872F                      0040            .word	$40
33372                                           ! 5798                        0xA000,
33373 8731                      A000            .word	$A000
33374                                           ! 5799                        0x0000,
33375 8733                      0000            .word	0
33376                                           ! 5800                       0,
33377 8735                      0000            .word	0
33378 8737                      0000            .word	0
33379                                           ! 5801                             2560,
33380 8739                      0A00            .word	$A00
33381                                           ! 5802                        640,
33382 873B                      0280            .word	$280
33383                                           ! 5803                        400,
33384 873D                      0190            .word	$190
33385                                           ! 5804                      8,
33386 873F                        08            .byte	8
33387                                           ! 5805                      16,
33388 8740                        10            .byte	$10
33389                                           ! 5806                           1,
33390 8741                        01            .byte	1
33391                                           ! 5807                         32,
33392 8742                        20            .byte	$20
33393                                           ! 5808                          16,
33394 8743                        10            .byte	$10
33395                                           ! 5809                        0x06,
33396 8744                        06            .byte	6
33397                                           ! 5810                     0,
33398 8745                        00            .byte	0
33399                                           ! 5811                               15,
33400 8746                        0F            .byte	$F
33401                                           ! 5812                          0,
33402 8747                        00            .byte	0
33403                                           ! 5813                        8,
33404 8748                        08            .byte	8
33405                                           ! 5814                             16,
33406 8749                        10            .byte	$10
33407                                           ! 5815                          8,
33408 874A                        08            .byte	8
33409                                           ! 5816                               8,
33410 874B                        08            .byte	8
33411                                           ! 5817                         8,
33412 874C                        08            .byte	8
33413                                           ! 5818                              0,
33414 874D                        00            .byte	0
33415                                           ! 5819                         8,
33416 874E                        08            .byte	8
33417                                           ! 5820                              24,
33418 874F                        18            .byte	$18
33419                                           ! 5821                                0x02,
33420 8750                        02            .byte	2
33421                                           ! 5822                        0xE0000000,
33422 8751                      0000            .word	0
33423 8753                      E000            .word	$E000
33424                                           ! 5823                               0,
33425 8755                      0000            .word	0
33426 8757                      0000            .word	0
33427                                           ! 5824                             0,
33428 8759                      0000            .word	0
33429                                           ! 5825                                2560,
33430 875B                      0A00            .word	$A00
33431                                           ! 5826                             0,
33432 875D                        00            .byte	0
33433                                           ! 5827                             0,
33434 875E                        00            .byte	0
33435                                           ! 5828                           8,
33436 875F                        08            .byte	8
33437                                           ! 5829                                16,
33438 8760                        10            .byte	$10
33439                                           ! 5830                             8,
33440 8761                        08            .byte	8
33441                                           ! 5831                                  8,
33442 8762                        08            .byte	8
33443                                           ! 5832                            8,
33444 8763                        08            .byte	8
33445                                           ! 5833                                 0,
33446 8764                        00            .byte	0
33447                                           ! 5834                            8,
33448 8765                        08            .byte	8
33449                                           ! 5835                                 24,
33450 8766                        18            .byte	$18
33451                                           ! 5836                          0,
33452 8767                      0000            .word	0
33453 8769                      0000            .word	0
33454                                           ! 5837 } },
33455                                           ! 5838 { 0x0142,
33456 876B                      0142            .word	$142
33457                                           ! 5839 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33458 876D                      009B            .word	$9B
33459                                           ! 5840                           0x01 | 0x02 | 0x04,
33460 876F                        07            .byte	7
33461                                           ! 5841                           0,
33462 8770                        00            .byte	0
33463                                           ! 5842                           64,
33464 8771                      0040            .word	$40
33465                                           ! 5843                    64,
33466 8773                      0040            .word	$40
33467                                           ! 5844                        0xA000,
33468 8775                      A000            .word	$A000
33469                                           ! 5845                        0x0000,
33470 8777                      0000            .word	0
33471                                           ! 5846                       0,
33472 8779                      0000            .word	0
33473 877B                      0000            .word	0
33474                                           ! 5847                             2560,
33475 877D                      0A00            .word	$A00
33476                                           ! 5848                   
33477                                           ! 5848      640,
33478 877F                      0280            .word	$280
33479                                           ! 5849                        480,
33480 8781                      01E0            .word	$1E0
33481                                           ! 5850                      8,
33482 8783                        08            .byte	8
33483                                           ! 5851                      16,
33484 8784                        10            .byte	$10
33485                                           ! 5852                           1,
33486 8785                        01            .byte	1
33487                                           ! 5853                         32,
33488 8786                        20            .byte	$20
33489                                           ! 5854                          19,
33490 8787                        13            .byte	$13
33491                                           ! 5855                        0x06,
33492 8788                        06            .byte	6
33493                                           ! 5856                     0,
33494 8789                        00            .byte	0
33495                                           ! 5857                               12,
33496 878A                        0C            .byte	$C
33497                                           ! 5858                          0,
33498 878B                        00            .byte	0
33499                                           ! 5859                        8,
33500 878C                        08            .byte	8
33501                                           ! 5860                             16,
33502 878D                        10            .byte	$10
33503                                           ! 5861                          8,
33504 878E                        08            .byte	8
33505                                           ! 5862                               8,
33506 878F                        08            .byte	8
33507                                           ! 5863                         8,
33508 8790                        08            .byte	8
33509                                           ! 5864                              0,
33510 8791                        00            .byte	0
33511                                           ! 5865                         8,
33512 8792                        08            .byte	8
33513                                           ! 5866                              24,
33514 8793                        18            .byte	$18
33515                                           ! 5867                                0x02,
33516 8794                        02            .byte	2
33517                                           ! 5868                        0xE0000000,
33518 8795                      0000            .word	0
33519 8797                      E000            .word	$E000
33520                                           ! 5869                               0,
33521 8799                      0000            .word	0
33522 879B                      0000            .word	0
33523                                           ! 5870                             0,
33524 879D                      0000            .word	0
33525                                           ! 5871                                2560,
33526 879F                      0A00            .word	$A00
33527                                           ! 5872                             0,
33528 87A1                        00            .byte	0
33529                                           ! 5873                             0,
33530 87A2                        00            .byte	0
33531                                           ! 5874                           8,
33532 87A3                        08            .byte	8
33533                                           ! 5875                                16,
33534 87A4                        10            .byte	$10
33535                                           ! 5876                             8,
33536 87A5                        08            .byte	8
33537                                           ! 5877                                  8,
33538 87A6                        08            .byte	8
33539                                           ! 5878                            8,
33540 87A7                        08            .byte	8
33541                                           ! 5879                                 0,
33542 87A8                        00            .byte	0
33543                                           ! 5880                            8,
33544 87A9                        08            .byte	8
33545                                           ! 5881                                 24,
33546 87AA                        18            .byte	$18
33547                                           ! 5882                          0,
33548 87AB                      0000            .word	0
33549 87AD                      0000            .word	0
33550                                           ! 5883 } },
33551                                           ! 5884 { 0x0143,
33552 87AF                      0143            .word	$143
33553                                           ! 5885 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33554 87B1                      009B            .word	$9B
33555                                           ! 5886                           0x01 | 0x02 | 0x04,
33556 87B3                        07            .byte	7
33557                                           ! 5887                           0,
33558 87B4                        00            .byte	0
33559                                           ! 5888                           64,
33560 87B5                      0040            .word	$40
33561                                           ! 5889                    64,
33562 87B7                      0040            .word	$40
33563                                           ! 5890                        0xA000,
33564 87B9                      A000            .word	$A000
33565                                           ! 5891                        0x0000,
33566 87BB                      0000            .word	0
33567                                           ! 5892                       0,
33568 87BD                      0000            .word	0
33569 87BF                      0000            .word	0
33570                                           ! 5893                             3200,
33571 87C1                      0C80            .word	$C80
33572                                           ! 5894                        800,
33573 87C3                      0320            .word	$320
33574                                           ! 5895                        600,
33575 87C5                      0258            .word	$258
33576                                           ! 5896                      8,
33577 87C7                        08            .byte	8
33578                                           ! 5897                      16,
33579 87C8                        10            .byte	$10
33580                                           ! 5898                           1,
33581 87C9                        01            .byte	1
33582                                           ! 5899                         32,
33583 87CA                        20            .byte	$20
33584                                           ! 5900                          30,
33585 87CB                        1E            .byte	$1E
33586                                           ! 5901                        0x06,
33587 87CC                        06            .byte	6
33588                                           ! 5902                     0,
33589 87CD                        00            .byte	0
33590                                           ! 5903                               7,
33591 87CE                        07            .byte	7
33592                                           ! 5904                          0,
33593 87CF                        00            .byte	0
33594                                           ! 5905                        8,
33595 87D0                        08            .byte	8
33596                                           ! 5906                             16,
33597 87D1                        10            .byte	$10
33598                                           ! 5907                          8,
33599 87D2                        08            .byte	8
33600                                           ! 5908                               8,
33601 87D3                        08            .byte	8
33602                                           ! 5909                         8,
33603 87D4                        08            .byte	8
33604                                           ! 5910                              0,
33605 87D5                        00            .byte	0
33606                                           ! 5911                         8,
33607 87D6                        08            .byte	8
33608                                           ! 5912                              24,
33609 87D7                        18            .byte	$18
33610                                           ! 5913                                0x02,
33611 87D8                        02            .byte	2
33612                                           ! 5914                        0xE0000000,
33613 87D9                      0000            .word	0
33614 87DB                      E000            .word	$E000
33615                                           ! 5915                               0,
33616 87DD                      0000            .word	0
33617 87DF                      0000            .word	0
33618                                           ! 5916                             0,
33619 87E1                      0000            .word	0
33620                                           ! 5917           
33621                                           ! 5917                      3200,
33622 87E3                      0C80            .word	$C80
33623                                           ! 5918                             0,
33624 87E5                        00            .byte	0
33625                                           ! 5919                             0,
33626 87E6                        00            .byte	0
33627                                           ! 5920                           8,
33628 87E7                        08            .byte	8
33629                                           ! 5921                                16,
33630 87E8                        10            .byte	$10
33631                                           ! 5922                             8,
33632 87E9                        08            .byte	8
33633                                           ! 5923                                  8,
33634 87EA                        08            .byte	8
33635                                           ! 5924                            8,
33636 87EB                        08            .byte	8
33637                                           ! 5925                                 0,
33638 87EC                        00            .byte	0
33639                                           ! 5926                            8,
33640 87ED                        08            .byte	8
33641                                           ! 5927                                 24,
33642 87EE                        18            .byte	$18
33643                                           ! 5928                          0,
33644 87EF                      0000            .word	0
33645 87F1                      0000            .word	0
33646                                           ! 5929 } },
33647                                           ! 5930 { 0x0144,
33648 87F3                      0144            .word	$144
33649                                           ! 5931 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33650 87F5                      009B            .word	$9B
33651                                           ! 5932                           0x01 | 0x02 | 0x04,
33652 87F7                        07            .byte	7
33653                                           ! 5933                           0,
33654 87F8                        00            .byte	0
33655                                           ! 5934                           64,
33656 87F9                      0040            .word	$40
33657                                           ! 5935                    64,
33658 87FB                      0040            .word	$40
33659                                           ! 5936                        0xA000,
33660 87FD                      A000            .word	$A000
33661                                           ! 5937                        0x0000,
33662 87FF                      0000            .word	0
33663                                           ! 5938                       0,
33664 8801                      0000            .word	0
33665 8803                      0000            .word	0
33666                                           ! 5939                             4096,
33667 8805                      1000            .word	$1000
33668                                           ! 5940                        1024,
33669 8807                      0400            .word	$400
33670                                           ! 5941                        768,
33671 8809                      0300            .word	$300
33672                                           ! 5942                      8,
33673 880B                        08            .byte	8
33674                                           ! 5943                      16,
33675 880C                        10            .byte	$10
33676                                           ! 5944                           1,
33677 880D                        01            .byte	1
33678                                           ! 5945                         32,
33679 880E                        20            .byte	$20
33680                                           ! 5946                          48,
33681 880F                        30            .byte	$30
33682                                           ! 5947                        0x06,
33683 8810                        06            .byte	6
33684                                           ! 5948                     0,
33685 8811                        00            .byte	0
33686                                           ! 5949                               4,
33687 8812                        04            .byte	4
33688                                           ! 5950                          0,
33689 8813                        00            .byte	0
33690                                           ! 5951                        8,
33691 8814                        08            .byte	8
33692                                           ! 5952                             16,
33693 8815                        10            .byte	$10
33694                                           ! 5953                          8,
33695 8816                        08            .byte	8
33696                                           ! 5954                               8,
33697 8817                        08            .byte	8
33698                                           ! 5955                         8,
33699 8818                        08            .byte	8
33700                                           ! 5956                              0,
33701 8819                        00            .byte	0
33702                                           ! 5957                         8,
33703 881A                        08            .byte	8
33704                                           ! 5958                              24,
33705 881B                        18            .byte	$18
33706                                           ! 5959                                0x02,
33707 881C                        02            .byte	2
33708                                           ! 5960                        0xE0000000,
33709 881D                      0000            .word	0
33710 881F                      E000            .word	$E000
33711                                           ! 5961                               0,
33712 8821                      0000            .word	0
33713 8823                      0000            .word	0
33714                                           ! 5962                             0,
33715 8825                      0000            .word	0
33716                                           ! 5963                                4096,
33717 8827                      1000            .word	$1000
33718                                           ! 5964                             0,
33719 8829                        00            .byte	0
33720                                           ! 5965                             0,
33721 882A                        00            .byte	0
33722                                           ! 5966                           8,
33723 882B                        08            .byte	8
33724                                           ! 5967                                16,
33725 882C                        10            .byte	$10
33726                                           ! 5968                             8,
33727 882D                        08            .byte	8
33728                                           ! 5969                                  8,
33729 882E                        08            .byte	8
33730                                           ! 5970                            8,
33731 882F                        08            .byte	8
33732                                           ! 5971                                 0,
33733 8830                        00            .byte	0
33734                                           ! 5972                            8,
33735 8831                        08            .byte	8
33736                                           ! 5973                                 24,
33737 8832                        18            .byte	$18
33738                                           ! 5974                          0,
33739 8833                      0000            .word	0
33740 8835                      0000            .word	0
33741                                           ! 5975 } },
33742                                           ! 5976 { 0x0145,
33743 8837                      0145            .word	$145
33744                                           ! 5977 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33745 8839                      009B            .word	$9B
33746                                           ! 5978                           0x01 | 0x02 | 0x04,
33747 883B                        07            .byte	7
33748                                           ! 5979                           0,
33749 883C                        00            .byte	0
33750                                           ! 5980                           64,
33751 883D                      0040            .word	$40
33752                                           ! 5981                    64,
33753 883F                      0040            .word	$40
33754                                           ! 5982                        0xA000,
33755 8841                      A000            .word	$A000
33756                                           ! 5983                        0x0000,
33757 8843                      0000            .word	0
33758                                           ! 5984                       0,
33759 8845                      0000            .word	0
33760 8847                      0000            .word	0
33761                                           ! 5985                
33762                                           ! 5985              5120,
33763 8849                      1400            .word	$1400
33764                                           ! 5986                        1280,
33765 884B                      0500            .word	$500
33766                                           ! 5987                        1024,
33767 884D                      0400            .word	$400
33768                                           ! 5988                      8,
33769 884F                        08            .byte	8
33770                                           ! 5989                      16,
33771 8850                        10            .byte	$10
33772                                           ! 5990                           1,
33773 8851                        01            .byte	1
33774                                           ! 5991                         32,
33775 8852                        20            .byte	$20
33776                                           ! 5992                          80,
33777 8853                        50            .byte	$50
33778                                           ! 5993                        0x06,
33779 8854                        06            .byte	6
33780                                           ! 5994                     0,
33781 8855                        00            .byte	0
33782                                           ! 5995                               2,
33783 8856                        02            .byte	2
33784                                           ! 5996                          0,
33785 8857                        00            .byte	0
33786                                           ! 5997                        8,
33787 8858                        08            .byte	8
33788                                           ! 5998                             16,
33789 8859                        10            .byte	$10
33790                                           ! 5999                          8,
33791 885A                        08            .byte	8
33792                                           ! 6000                               8,
33793 885B                        08            .byte	8
33794                                           ! 6001                         8,
33795 885C                        08            .byte	8
33796                                           ! 6002                              0,
33797 885D                        00            .byte	0
33798                                           ! 6003                         8,
33799 885E                        08            .byte	8
33800                                           ! 6004                              24,
33801 885F                        18            .byte	$18
33802                                           ! 6005                                0x02,
33803 8860                        02            .byte	2
33804                                           ! 6006                        0xE0000000,
33805 8861                      0000            .word	0
33806 8863                      E000            .word	$E000
33807                                           ! 6007                               0,
33808 8865                      0000            .word	0
33809 8867                      0000            .word	0
33810                                           ! 6008                             0,
33811 8869                      0000            .word	0
33812                                           ! 6009                                5120,
33813 886B                      1400            .word	$1400
33814                                           ! 6010                             0,
33815 886D                        00            .byte	0
33816                                           ! 6011                             0,
33817 886E                        00            .byte	0
33818                                           ! 6012                           8,
33819 886F                        08            .byte	8
33820                                           ! 6013                                16,
33821 8870                        10            .byte	$10
33822                                           ! 6014                             8,
33823 8871                        08            .byte	8
33824                                           ! 6015                                  8,
33825 8872                        08            .byte	8
33826                                           ! 6016                            8,
33827 8873                        08            .byte	8
33828                                           ! 6017                                 0,
33829 8874                        00            .byte	0
33830                                           ! 6018                            8,
33831 8875                        08            .byte	8
33832                                           ! 6019                                 24,
33833 8876                        18            .byte	$18
33834                                           ! 6020                          0,
33835 8877                      0000            .word	0
33836 8879                      0000            .word	0
33837                                           ! 6021 } },
33838                                           ! 6022 { 0x0146,
33839 887B                      0146            .word	$146
33840                                           ! 6023 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33841 887D                      009B            .word	$9B
33842                                           ! 6024                           0x01 | 0x02 | 0x04,
33843 887F                        07            .byte	7
33844                                           ! 6025                           0,
33845 8880                        00            .byte	0
33846                                           ! 6026                           64,
33847 8881                      0040            .word	$40
33848                                           ! 6027                    64,
33849 8883                      0040            .word	$40
33850                                           ! 6028                        0xA000,
33851 8885                      A000            .word	$A000
33852                                           ! 6029                        0x0000,
33853 8887                      0000            .word	0
33854                                           ! 6030                       0,
33855 8889                      0000            .word	0
33856 888B                      0000            .word	0
33857                                           ! 6031                             320,
33858 888D                      0140            .word	$140
33859                                           ! 6032                        320,
33860 888F                      0140            .word	$140
33861                                           ! 6033                        200,
33862 8891                      00C8            .word	$C8
33863                                           ! 6034                      8,
33864 8893                        08            .byte	8
33865                                           ! 6035                      16,
33866 8894                        10            .byte	$10
33867                                           ! 6036                           1,
33868 8895                        01            .byte	1
33869                                           ! 6037                         8,
33870 8896                        08            .byte	8
33871                                           ! 6038                          1,
33872 8897                        01            .byte	1
33873                                           ! 6039                        0x04,
33874 8898                        04            .byte	4
33875                                           ! 6040                     0,
33876 8899                        00            .byte	0
33877                                           ! 6041                               261,
33878 889A                        05            .byte	5
33879                                           ! 6042                          0,
33880 889B                        00            .byte	0
33881                                           ! 6043                        0,
33882 889C                        00            .byte	0
33883                                           ! 6044                             0,
33884 889D                        00            .byte	0
33885                                           ! 6045                          0,
33886 889E                        00            .byte	0
33887                                           ! 6046                               0,
33888 889F                        00            .byte	0
33889                                           ! 6047                         0,
33890 88A0                        00            .byte	0
33891                                           ! 6048                              0,
33892 88A1                        00            .byte	0
33893                                           ! 6049                         0,
33894 88A2                        00            .byte	0
33895                                           ! 6050                              0,
33896 88A3                        00            .byte	0
33897                                           ! 6051                                0,
33898 88A4                        00            .byte	0
33899                                           ! 6052                        0xE0000000,
33900 88A5                      0000            .word	0
33901 88A7                      E000            .word	$E000
33902                                           ! 6053                               0,
33903 88A9                      0000            .word	0
33904 88AB                      0000            .word	0
33905                                           ! 6054          
33906                                           ! 6054                    0,
33907 88AD                      0000            .word	0
33908                                           ! 6055                                320,
33909 88AF                      0140            .word	$140
33910                                           ! 6056                             0,
33911 88B1                        00            .byte	0
33912                                           ! 6057                             0,
33913 88B2                        00            .byte	0
33914                                           ! 6058                           0,
33915 88B3                        00            .byte	0
33916                                           ! 6059                                0,
33917 88B4                        00            .byte	0
33918                                           ! 6060                             0,
33919 88B5                        00            .byte	0
33920                                           ! 6061                                  0,
33921 88B6                        00            .byte	0
33922                                           ! 6062                            0,
33923 88B7                        00            .byte	0
33924                                           ! 6063                                 0,
33925 88B8                        00            .byte	0
33926                                           ! 6064                            0,
33927 88B9                        00            .byte	0
33928                                           ! 6065                                 0,
33929 88BA                        00            .byte	0
33930                                           ! 6066                          0,
33931 88BB                      0000            .word	0
33932 88BD                      0000            .word	0
33933                                           ! 6067 } },
33934                                           ! 6068 { 0x0147,
33935 88BF                      0147            .word	$147
33936                                           ! 6069 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
33937 88C1                      009B            .word	$9B
33938                                           ! 6070                           0x01 | 0x02 | 0x04,
33939 88C3                        07            .byte	7
33940                                           ! 6071                           0,
33941 88C4                        00            .byte	0
33942                                           ! 6072                           64,
33943 88C5                      0040            .word	$40
33944                                           ! 6073                    64,
33945 88C7                      0040            .word	$40
33946                                           ! 6074                        0xA000,
33947 88C9                      A000            .word	$A000
33948                                           ! 6075                        0x0000,
33949 88CB                      0000            .word	0
33950                                           ! 6076                       0,
33951 88CD                      0000            .word	0
33952 88CF                      0000            .word	0
33953                                           ! 6077                             6400,
33954 88D1                      1900            .word	$1900
33955                                           ! 6078                        1600,
33956 88D3                      0640            .word	$640
33957                                           ! 6079                        1200,
33958 88D5                      04B0            .word	$4B0
33959                                           ! 6080                      8,
33960 88D7                        08            .byte	8
33961                                           ! 6081                      16,
33962 88D8                        10            .byte	$10
33963                                           ! 6082                           1,
33964 88D9                        01            .byte	1
33965                                           ! 6083                         32,
33966 88DA                        20            .byte	$20
33967                                           ! 6084                          118,
33968 88DB                        76            .byte	$76
33969                                           ! 6085                        0x06,
33970 88DC                        06            .byte	6
33971                                           ! 6086                     0,
33972 88DD                        00            .byte	0
33973                                           ! 6087                               1,
33974 88DE                        01            .byte	1
33975                                           ! 6088                          0,
33976 88DF                        00            .byte	0
33977                                           ! 6089                        8,
33978 88E0                        08            .byte	8
33979                                           ! 6090                             16,
33980 88E1                        10            .byte	$10
33981                                           ! 6091                          8,
33982 88E2                        08            .byte	8
33983                                           ! 6092                               8,
33984 88E3                        08            .byte	8
33985                                           ! 6093                         8,
33986 88E4                        08            .byte	8
33987                                           ! 6094                              0,
33988 88E5                        00            .byte	0
33989                                           ! 6095                         8,
33990 88E6                        08            .byte	8
33991                                           ! 6096                              24,
33992 88E7                        18            .byte	$18
33993                                           ! 6097                                0x02,
33994 88E8                        02            .byte	2
33995                                           ! 6098                        0xE0000000,
33996 88E9                      0000            .word	0
33997 88EB                      E000            .word	$E000
33998                                           ! 6099                               0,
33999 88ED                      0000            .word	0
34000 88EF                      0000            .word	0
34001                                           ! 6100                             0,
34002 88F1                      0000            .word	0
34003                                           ! 6101                                6400,
34004 88F3                      1900            .word	$1900
34005                                           ! 6102                             0,
34006 88F5                        00            .byte	0
34007                                           ! 6103                             0,
34008 88F6                        00            .byte	0
34009                                           ! 6104                           8,
34010 88F7                        08            .byte	8
34011                                           ! 6105                                16,
34012 88F8                        10            .byte	$10
34013                                           ! 6106                             8,
34014 88F9                        08            .byte	8
34015                                           ! 6107                                  8,
34016 88FA                        08            .byte	8
34017                                           ! 6108                            8,
34018 88FB                        08            .byte	8
34019                                           ! 6109                                 0,
34020 88FC                        00            .byte	0
34021                                           ! 6110                            8,
34022 88FD                        08            .byte	8
34023                                           ! 6111                                 24,
34024 88FE                        18            .byte	$18
34025                                           ! 6112                          0,
34026 88FF                      0000            .word	0
34027 8901                      0000            .word	0
34028                                           ! 6113 } },
34029                                           ! 6114 { 0x0148,
34030 8903                      0148            .word	$148
34031                                           ! 6115 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34032 8905                      009B            .word	$9B
34033                                           ! 6116                           0x01 | 0x02 | 0x04,
34034 8907                        07            .byte	7
34035                                           ! 6117                           0,
34036 8908                        00            .byte	0
34037                                           ! 6118                           64,
34038 8909                      0040            .word	$40
34039                                           ! 6119                    64,
34040 890B                      0040            .word	$40
34041                                           ! 6120                        0xA000,
34042 890D                      A000            .word	$A000
34043                                           ! 6121                        0x0000,
34044 890F                      0000            .word	0
34045                                           ! 6122          
34046                                           ! 6122              0,
34047 8911                      0000            .word	0
34048 8913                      0000            .word	0
34049                                           ! 6123                             1152,
34050 8915                      0480            .word	$480
34051                                           ! 6124                        1152,
34052 8917                      0480            .word	$480
34053                                           ! 6125                        864,
34054 8919                      0360            .word	$360
34055                                           ! 6126                      8,
34056 891B                        08            .byte	8
34057                                           ! 6127                      16,
34058 891C                        10            .byte	$10
34059                                           ! 6128                           1,
34060 891D                        01            .byte	1
34061                                           ! 6129                         8,
34062 891E                        08            .byte	8
34063                                           ! 6130                          16,
34064 891F                        10            .byte	$10
34065                                           ! 6131                        0x04,
34066 8920                        04            .byte	4
34067                                           ! 6132                     0,
34068 8921                        00            .byte	0
34069                                           ! 6133                               15,
34070 8922                        0F            .byte	$F
34071                                           ! 6134                          0,
34072 8923                        00            .byte	0
34073                                           ! 6135                        0,
34074 8924                        00            .byte	0
34075                                           ! 6136                             0,
34076 8925                        00            .byte	0
34077                                           ! 6137                          0,
34078 8926                        00            .byte	0
34079                                           ! 6138                               0,
34080 8927                        00            .byte	0
34081                                           ! 6139                         0,
34082 8928                        00            .byte	0
34083                                           ! 6140                              0,
34084 8929                        00            .byte	0
34085                                           ! 6141                         0,
34086 892A                        00            .byte	0
34087                                           ! 6142                              0,
34088 892B                        00            .byte	0
34089                                           ! 6143                                0,
34090 892C                        00            .byte	0
34091                                           ! 6144                        0xE0000000,
34092 892D                      0000            .word	0
34093 892F                      E000            .word	$E000
34094                                           ! 6145                               0,
34095 8931                      0000            .word	0
34096 8933                      0000            .word	0
34097                                           ! 6146                             0,
34098 8935                      0000            .word	0
34099                                           ! 6147                                1152,
34100 8937                      0480            .word	$480
34101                                           ! 6148                             0,
34102 8939                        00            .byte	0
34103                                           ! 6149                             0,
34104 893A                        00            .byte	0
34105                                           ! 6150                           0,
34106 893B                        00            .byte	0
34107                                           ! 6151                                0,
34108 893C                        00            .byte	0
34109                                           ! 6152                             0,
34110 893D                        00            .byte	0
34111                                           ! 6153                                  0,
34112 893E                        00            .byte	0
34113                                           ! 6154                            0,
34114 893F                        00            .byte	0
34115                                           ! 6155                                 0,
34116 8940                        00            .byte	0
34117                                           ! 6156                            0,
34118 8941                        00            .byte	0
34119                                           ! 6157                                 0,
34120 8942                        00            .byte	0
34121                                           ! 6158                          0,
34122 8943                      0000            .word	0
34123 8945                      0000            .word	0
34124                                           ! 6159 } },
34125                                           ! 6160 { 0x0149,
34126 8947                      0149            .word	$149
34127                                           ! 6161 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34128 8949                      009B            .word	$9B
34129                                           ! 6162                           0x01 | 0x02 | 0x04,
34130 894B                        07            .byte	7
34131                                           ! 6163                           0,
34132 894C                        00            .byte	0
34133                                           ! 6164                           64,
34134 894D                      0040            .word	$40
34135                                           ! 6165                    64,
34136 894F                      0040            .word	$40
34137                                           ! 6166                        0xA000,
34138 8951                      A000            .word	$A000
34139                                           ! 6167                        0x0000,
34140 8953                      0000            .word	0
34141                                           ! 6168                       0,
34142 8955                      0000            .word	0
34143 8957                      0000            .word	0
34144                                           ! 6169                             2304,
34145 8959                      0900            .word	$900
34146                                           ! 6170                        1152,
34147 895B                      0480            .word	$480
34148                                           ! 6171                        864,
34149 895D                      0360            .word	$360
34150                                           ! 6172                      8,
34151 895F                        08            .byte	8
34152                                           ! 6173                      16,
34153 8960                        10            .byte	$10
34154                                           ! 6174                           1,
34155 8961                        01            .byte	1
34156                                           ! 6175                         15,
34157 8962                        0F            .byte	$F
34158                                           ! 6176                          31,
34159 8963                        1F            .byte	$1F
34160                                           ! 6177                        0x06,
34161 8964                        06            .byte	6
34162                                           ! 6178                     0,
34163 8965                        00            .byte	0
34164                                           ! 6179                               7,
34165 8966                        07            .byte	7
34166                                           ! 6180                          0,
34167 8967                        00            .byte	0
34168                                           ! 6181                        5,
34169 8968                        05            .byte	5
34170                                           ! 6182                             10,
34171 8969                        0A            .byte	$A
34172                                           ! 6183                          5,
34173 896A                        05            .byte	5
34174                                           ! 6184                               5,
34175 896B                        05            .byte	5
34176                                           ! 6185                         5,
34177 896C                        05            .byte	5
34178                                           ! 6186                              0,
34179 896D                        00            .byte	0
34180                                           ! 6187                         1,
34181 896E                        01            .byte	1
34182                                           ! 6188                              15,
34183 896F                        0F            .byte	$F
34184                                           ! 6189                                0,
34185 8970                        00            .byte	0
34186                                           ! 6190                        0xE0000000,
34187 8971                      0000            .word	0
34188 8973                      E000            .word	$E000
34189                                           ! 6191                
34190                                           ! 6191                0,
34191 8975                      0000            .word	0
34192 8977                      0000            .word	0
34193                                           ! 6192                             0,
34194 8979                      0000            .word	0
34195                                           ! 6193                                2304,
34196 897B                      0900            .word	$900
34197                                           ! 6194                             0,
34198 897D                        00            .byte	0
34199                                           ! 6195                             0,
34200 897E                        00            .byte	0
34201                                           ! 6196                           5,
34202 897F                        05            .byte	5
34203                                           ! 6197                                10,
34204 8980                        0A            .byte	$A
34205                                           ! 6198                             5,
34206 8981                        05            .byte	5
34207                                           ! 6199                                  5,
34208 8982                        05            .byte	5
34209                                           ! 6200                            5,
34210 8983                        05            .byte	5
34211                                           ! 6201                                 0,
34212 8984                        00            .byte	0
34213                                           ! 6202                            1,
34214 8985                        01            .byte	1
34215                                           ! 6203                                 15,
34216 8986                        0F            .byte	$F
34217                                           ! 6204                          0,
34218 8987                      0000            .word	0
34219 8989                      0000            .word	0
34220                                           ! 6205 } },
34221                                           ! 6206 { 0x014a,
34222 898B                      014A            .word	$14A
34223                                           ! 6207 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34224 898D                      009B            .word	$9B
34225                                           ! 6208                           0x01 | 0x02 | 0x04,
34226 898F                        07            .byte	7
34227                                           ! 6209                           0,
34228 8990                        00            .byte	0
34229                                           ! 6210                           64,
34230 8991                      0040            .word	$40
34231                                           ! 6211                    64,
34232 8993                      0040            .word	$40
34233                                           ! 6212                        0xA000,
34234 8995                      A000            .word	$A000
34235                                           ! 6213                        0x0000,
34236 8997                      0000            .word	0
34237                                           ! 6214                       0,
34238 8999                      0000            .word	0
34239 899B                      0000            .word	0
34240                                           ! 6215                             2304,
34241 899D                      0900            .word	$900
34242                                           ! 6216                        1152,
34243 899F                      0480            .word	$480
34244                                           ! 6217                        864,
34245 89A1                      0360            .word	$360
34246                                           ! 6218                      8,
34247 89A3                        08            .byte	8
34248                                           ! 6219                      16,
34249 89A4                        10            .byte	$10
34250                                           ! 6220                           1,
34251 89A5                        01            .byte	1
34252                                           ! 6221                         16,
34253 89A6                        10            .byte	$10
34254                                           ! 6222                          31,
34255 89A7                        1F            .byte	$1F
34256                                           ! 6223                        0x06,
34257 89A8                        06            .byte	6
34258                                           ! 6224                     0,
34259 89A9                        00            .byte	0
34260                                           ! 6225                               7,
34261 89AA                        07            .byte	7
34262                                           ! 6226                          0,
34263 89AB                        00            .byte	0
34264                                           ! 6227                        5,
34265 89AC                        05            .byte	5
34266                                           ! 6228                             11,
34267 89AD                        0B            .byte	$B
34268                                           ! 6229                          6,
34269 89AE                        06            .byte	6
34270                                           ! 6230                               5,
34271 89AF                        05            .byte	5
34272                                           ! 6231                         5,
34273 89B0                        05            .byte	5
34274                                           ! 6232                              0,
34275 89B1                        00            .byte	0
34276                                           ! 6233                         0,
34277 89B2                        00            .byte	0
34278                                           ! 6234                              0,
34279 89B3                        00            .byte	0
34280                                           ! 6235                                0,
34281 89B4                        00            .byte	0
34282                                           ! 6236                        0xE0000000,
34283 89B5                      0000            .word	0
34284 89B7                      E000            .word	$E000
34285                                           ! 6237                               0,
34286 89B9                      0000            .word	0
34287 89BB                      0000            .word	0
34288                                           ! 6238                             0,
34289 89BD                      0000            .word	0
34290                                           ! 6239                                2304,
34291 89BF                      0900            .word	$900
34292                                           ! 6240                             0,
34293 89C1                        00            .byte	0
34294                                           ! 6241                             0,
34295 89C2                        00            .byte	0
34296                                           ! 6242                           5,
34297 89C3                        05            .byte	5
34298                                           ! 6243                                11,
34299 89C4                        0B            .byte	$B
34300                                           ! 6244                             6,
34301 89C5                        06            .byte	6
34302                                           ! 6245                                  5,
34303 89C6                        05            .byte	5
34304                                           ! 6246                            5,
34305 89C7                        05            .byte	5
34306                                           ! 6247                                 0,
34307 89C8                        00            .byte	0
34308                                           ! 6248                            0,
34309 89C9                        00            .byte	0
34310                                           ! 6249                                 0,
34311 89CA                        00            .byte	0
34312                                           ! 6250                          0,
34313 89CB                      0000            .word	0
34314 89CD                      0000            .word	0
34315                                           ! 6251 } },
34316                                           ! 6252 { 0x014b,
34317 89CF                      014B            .word	$14B
34318                                           ! 6253 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34319 89D1                      009B            .word	$9B
34320                                           ! 6254                           0x01 | 0x02 | 0x04,
34321 89D3                        07            .byte	7
34322                                           ! 6255                           0,
34323 89D4                        00            .byte	0
34324                                           ! 6256                           64,
34325 89D5                      0040            .word	$40
34326                                           ! 6257                    64,
34327 89D7                      0040            .word	$40
34328                                           ! 6258                        0xA000,
34329 89D9                      A000            .word	$A000
34330                                           ! 6259                  
34331                                           ! 6259       0x0000,
34332 89DB                      0000            .word	0
34333                                           ! 6260                       0,
34334 89DD                      0000            .word	0
34335 89DF                      0000            .word	0
34336                                           ! 6261                             3456,
34337 89E1                      0D80            .word	$D80
34338                                           ! 6262                        1152,
34339 89E3                      0480            .word	$480
34340                                           ! 6263                        864,
34341 89E5                      0360            .word	$360
34342                                           ! 6264                      8,
34343 89E7                        08            .byte	8
34344                                           ! 6265                      16,
34345 89E8                        10            .byte	$10
34346                                           ! 6266                           1,
34347 89E9                        01            .byte	1
34348                                           ! 6267                         24,
34349 89EA                        18            .byte	$18
34350                                           ! 6268                          46,
34351 89EB                        2E            .byte	$2E
34352                                           ! 6269                        0x06,
34353 89EC                        06            .byte	6
34354                                           ! 6270                     0,
34355 89ED                        00            .byte	0
34356                                           ! 6271                               4,
34357 89EE                        04            .byte	4
34358                                           ! 6272                          0,
34359 89EF                        00            .byte	0
34360                                           ! 6273                        8,
34361 89F0                        08            .byte	8
34362                                           ! 6274                             16,
34363 89F1                        10            .byte	$10
34364                                           ! 6275                          8,
34365 89F2                        08            .byte	8
34366                                           ! 6276                               8,
34367 89F3                        08            .byte	8
34368                                           ! 6277                         8,
34369 89F4                        08            .byte	8
34370                                           ! 6278                              0,
34371 89F5                        00            .byte	0
34372                                           ! 6279                         0,
34373 89F6                        00            .byte	0
34374                                           ! 6280                              0,
34375 89F7                        00            .byte	0
34376                                           ! 6281                                0,
34377 89F8                        00            .byte	0
34378                                           ! 6282                        0xE0000000,
34379 89F9                      0000            .word	0
34380 89FB                      E000            .word	$E000
34381                                           ! 6283                               0,
34382 89FD                      0000            .word	0
34383 89FF                      0000            .word	0
34384                                           ! 6284                             0,
34385 8A01                      0000            .word	0
34386                                           ! 6285                                3456,
34387 8A03                      0D80            .word	$D80
34388                                           ! 6286                             0,
34389 8A05                        00            .byte	0
34390                                           ! 6287                             0,
34391 8A06                        00            .byte	0
34392                                           ! 6288                           8,
34393 8A07                        08            .byte	8
34394                                           ! 6289                                16,
34395 8A08                        10            .byte	$10
34396                                           ! 6290                             8,
34397 8A09                        08            .byte	8
34398                                           ! 6291                                  8,
34399 8A0A                        08            .byte	8
34400                                           ! 6292                            8,
34401 8A0B                        08            .byte	8
34402                                           ! 6293                                 0,
34403 8A0C                        00            .byte	0
34404                                           ! 6294                            0,
34405 8A0D                        00            .byte	0
34406                                           ! 6295                                 0,
34407 8A0E                        00            .byte	0
34408                                           ! 6296                          0,
34409 8A0F                      0000            .word	0
34410 8A11                      0000            .word	0
34411                                           ! 6297 } },
34412                                           ! 6298 { 0x014c,
34413 8A13                      014C            .word	$14C
34414                                           ! 6299 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34415 8A15                      009B            .word	$9B
34416                                           ! 6300                           0x01 | 0x02 | 0x04,
34417 8A17                        07            .byte	7
34418                                           ! 6301                           0,
34419 8A18                        00            .byte	0
34420                                           ! 6302                           64,
34421 8A19                      0040            .word	$40
34422                                           ! 6303                    64,
34423 8A1B                      0040            .word	$40
34424                                           ! 6304                        0xA000,
34425 8A1D                      A000            .word	$A000
34426                                           ! 6305                        0x0000,
34427 8A1F                      0000            .word	0
34428                                           ! 6306                       0,
34429 8A21                      0000            .word	0
34430 8A23                      0000            .word	0
34431                                           ! 6307                             4608,
34432 8A25                      1200            .word	$1200
34433                                           ! 6308                        1152,
34434 8A27                      0480            .word	$480
34435                                           ! 6309                        864,
34436 8A29                      0360            .word	$360
34437                                           ! 6310                      8,
34438 8A2B                        08            .byte	8
34439                                           ! 6311                      16,
34440 8A2C                        10            .byte	$10
34441                                           ! 6312                           1,
34442 8A2D                        01            .byte	1
34443                                           ! 6313                         32,
34444 8A2E                        20            .byte	$20
34445                                           ! 6314                          61,
34446 8A2F                        3D            .byte	$3D
34447                                           ! 6315                        0x06,
34448 8A30                        06            .byte	6
34449                                           ! 6316                     0,
34450 8A31                        00            .byte	0
34451                                           ! 6317                               3,
34452 8A32                        03            .byte	3
34453                                           ! 6318                          0,
34454 8A33                        00            .byte	0
34455                                           ! 6319                        8,
34456 8A34                        08            .byte	8
34457                                           ! 6320                             16,
34458 8A35                        10            .byte	$10
34459                                           ! 6321                          8,
34460 8A36                        08            .byte	8
34461                                           ! 6322                               8,
34462 8A37                        08            .byte	8
34463                                           ! 6323                         8,
34464 8A38                        08            .byte	8
34465                                           ! 6324                              0,
34466 8A39                        00            .byte	0
34467                                           ! 6325                         8,
34468 8A3A                        08            .byte	8
34469                                           ! 6326                              24,
34470 8A3B                        18            .byte	$18
34471                                           ! 6327                                0x02,
34472 8A3C                        02            .byte	2
34473                                           ! 6328                       
34474                                           ! 6328  0xE0000000,
34475 8A3D                      0000            .word	0
34476 8A3F                      E000            .word	$E000
34477                                           ! 6329                               0,
34478 8A41                      0000            .word	0
34479 8A43                      0000            .word	0
34480                                           ! 6330                             0,
34481 8A45                      0000            .word	0
34482                                           ! 6331                                4608,
34483 8A47                      1200            .word	$1200
34484                                           ! 6332                             0,
34485 8A49                        00            .byte	0
34486                                           ! 6333                             0,
34487 8A4A                        00            .byte	0
34488                                           ! 6334                           8,
34489 8A4B                        08            .byte	8
34490                                           ! 6335                                16,
34491 8A4C                        10            .byte	$10
34492                                           ! 6336                             8,
34493 8A4D                        08            .byte	8
34494                                           ! 6337                                  8,
34495 8A4E                        08            .byte	8
34496                                           ! 6338                            8,
34497 8A4F                        08            .byte	8
34498                                           ! 6339                                 0,
34499 8A50                        00            .byte	0
34500                                           ! 6340                            8,
34501 8A51                        08            .byte	8
34502                                           ! 6341                                 24,
34503 8A52                        18            .byte	$18
34504                                           ! 6342                          0,
34505 8A53                      0000            .word	0
34506 8A55                      0000            .word	0
34507                                           ! 6343 } },
34508                                           ! 6344 { 0x0178,
34509 8A57                      0178            .word	$178
34510                                           ! 6345 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34511 8A59                      009B            .word	$9B
34512                                           ! 6346                           0x01 | 0x02 | 0x04,
34513 8A5B                        07            .byte	7
34514                                           ! 6347                           0,
34515 8A5C                        00            .byte	0
34516                                           ! 6348                           64,
34517 8A5D                      0040            .word	$40
34518                                           ! 6349                    64,
34519 8A5F                      0040            .word	$40
34520                                           ! 6350                        0xA000,
34521 8A61                      A000            .word	$A000
34522                                           ! 6351                        0x0000,
34523 8A63                      0000            .word	0
34524                                           ! 6352                       0,
34525 8A65                      0000            .word	0
34526 8A67                      0000            .word	0
34527                                           ! 6353                             2560,
34528 8A69                      0A00            .word	$A00
34529                                           ! 6354                        1280,
34530 8A6B                      0500            .word	$500
34531                                           ! 6355                        800,
34532 8A6D                      0320            .word	$320
34533                                           ! 6356                      8,
34534 8A6F                        08            .byte	8
34535                                           ! 6357                      16,
34536 8A70                        10            .byte	$10
34537                                           ! 6358                           1,
34538 8A71                        01            .byte	1
34539                                           ! 6359                         16,
34540 8A72                        10            .byte	$10
34541                                           ! 6360                          32,
34542 8A73                        20            .byte	$20
34543                                           ! 6361                        0x06,
34544 8A74                        06            .byte	6
34545                                           ! 6362                     0,
34546 8A75                        00            .byte	0
34547                                           ! 6363                               7,
34548 8A76                        07            .byte	7
34549                                           ! 6364                          0,
34550 8A77                        00            .byte	0
34551                                           ! 6365                        5,
34552 8A78                        05            .byte	5
34553                                           ! 6366                             11,
34554 8A79                        0B            .byte	$B
34555                                           ! 6367                          6,
34556 8A7A                        06            .byte	6
34557                                           ! 6368                               5,
34558 8A7B                        05            .byte	5
34559                                           ! 6369                         5,
34560 8A7C                        05            .byte	5
34561                                           ! 6370                              0,
34562 8A7D                        00            .byte	0
34563                                           ! 6371                         0,
34564 8A7E                        00            .byte	0
34565                                           ! 6372                              0,
34566 8A7F                        00            .byte	0
34567                                           ! 6373                                0,
34568 8A80                        00            .byte	0
34569                                           ! 6374                        0xE0000000,
34570 8A81                      0000            .word	0
34571 8A83                      E000            .word	$E000
34572                                           ! 6375                               0,
34573 8A85                      0000            .word	0
34574 8A87                      0000            .word	0
34575                                           ! 6376                             0,
34576 8A89                      0000            .word	0
34577                                           ! 6377                                2560,
34578 8A8B                      0A00            .word	$A00
34579                                           ! 6378                             0,
34580 8A8D                        00            .byte	0
34581                                           ! 6379                             0,
34582 8A8E                        00            .byte	0
34583                                           ! 6380                           5,
34584 8A8F                        05            .byte	5
34585                                           ! 6381                                11,
34586 8A90                        0B            .byte	$B
34587                                           ! 6382                             6,
34588 8A91                        06            .byte	6
34589                                           ! 6383                                  5,
34590 8A92                        05            .byte	5
34591                                           ! 6384                            5,
34592 8A93                        05            .byte	5
34593                                           ! 6385                                 0,
34594 8A94                        00            .byte	0
34595                                           ! 6386                            0,
34596 8A95                        00            .byte	0
34597                                           ! 6387                                 0,
34598 8A96                        00            .byte	0
34599                                           ! 6388                          0,
34600 8A97                      0000            .word	0
34601 8A99                      0000            .word	0
34602                                           ! 6389 } },
34603                                           ! 6390 { 0x0179,
34604 8A9B                      0179            .word	$179
34605                                           ! 6391 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34606 8A9D                      009B            .word	$9B
34607                                           ! 6392                           0x01 | 0x02 | 0x04,
34608 8A9F                        07            .byte	7
34609                                           ! 6393                           0,
34610 8AA0                        00            .byte	0
34611                                           ! 6394                           64,
34612 8AA1                      0040            .word	$40
34613                                           ! 6395                    64,
34614 8AA3                      0040            .word	$40
34615                                           ! 6396                     
34616                                           ! 6396    0xA000,
34617 8AA5                      A000            .word	$A000
34618                                           ! 6397                        0x0000,
34619 8AA7                      0000            .word	0
34620                                           ! 6398                       0,
34621 8AA9                      0000            .word	0
34622 8AAB                      0000            .word	0
34623                                           ! 6399                             3840,
34624 8AAD                      0F00            .word	$F00
34625                                           ! 6400                        1280,
34626 8AAF                      0500            .word	$500
34627                                           ! 6401                        800,
34628 8AB1                      0320            .word	$320
34629                                           ! 6402                      8,
34630 8AB3                        08            .byte	8
34631                                           ! 6403                      16,
34632 8AB4                        10            .byte	$10
34633                                           ! 6404                           1,
34634 8AB5                        01            .byte	1
34635                                           ! 6405                         24,
34636 8AB6                        18            .byte	$18
34637                                           ! 6406                          47,
34638 8AB7                        2F            .byte	$2F
34639                                           ! 6407                        0x06,
34640 8AB8                        06            .byte	6
34641                                           ! 6408                     0,
34642 8AB9                        00            .byte	0
34643                                           ! 6409                               4,
34644 8ABA                        04            .byte	4
34645                                           ! 6410                          0,
34646 8ABB                        00            .byte	0
34647                                           ! 6411                        8,
34648 8ABC                        08            .byte	8
34649                                           ! 6412                             16,
34650 8ABD                        10            .byte	$10
34651                                           ! 6413                          8,
34652 8ABE                        08            .byte	8
34653                                           ! 6414                               8,
34654 8ABF                        08            .byte	8
34655                                           ! 6415                         8,
34656 8AC0                        08            .byte	8
34657                                           ! 6416                              0,
34658 8AC1                        00            .byte	0
34659                                           ! 6417                         0,
34660 8AC2                        00            .byte	0
34661                                           ! 6418                              0,
34662 8AC3                        00            .byte	0
34663                                           ! 6419                                0,
34664 8AC4                        00            .byte	0
34665                                           ! 6420                        0xE0000000,
34666 8AC5                      0000            .word	0
34667 8AC7                      E000            .word	$E000
34668                                           ! 6421                               0,
34669 8AC9                      0000            .word	0
34670 8ACB                      0000            .word	0
34671                                           ! 6422                             0,
34672 8ACD                      0000            .word	0
34673                                           ! 6423                                3840,
34674 8ACF                      0F00            .word	$F00
34675                                           ! 6424                             0,
34676 8AD1                        00            .byte	0
34677                                           ! 6425                             0,
34678 8AD2                        00            .byte	0
34679                                           ! 6426                           8,
34680 8AD3                        08            .byte	8
34681                                           ! 6427                                16,
34682 8AD4                        10            .byte	$10
34683                                           ! 6428                             8,
34684 8AD5                        08            .byte	8
34685                                           ! 6429                                  8,
34686 8AD6                        08            .byte	8
34687                                           ! 6430                            8,
34688 8AD7                        08            .byte	8
34689                                           ! 6431                                 0,
34690 8AD8                        00            .byte	0
34691                                           ! 6432                            0,
34692 8AD9                        00            .byte	0
34693                                           ! 6433                                 0,
34694 8ADA                        00            .byte	0
34695                                           ! 6434                          0,
34696 8ADB                      0000            .word	0
34697 8ADD                      0000            .word	0
34698                                           ! 6435 } },
34699                                           ! 6436 { 0x017a,
34700 8ADF                      017A            .word	$17A
34701                                           ! 6437 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34702 8AE1                      009B            .word	$9B
34703                                           ! 6438                           0x01 | 0x02 | 0x04,
34704 8AE3                        07            .byte	7
34705                                           ! 6439                           0,
34706 8AE4                        00            .byte	0
34707                                           ! 6440                           64,
34708 8AE5                      0040            .word	$40
34709                                           ! 6441                    64,
34710 8AE7                      0040            .word	$40
34711                                           ! 6442                        0xA000,
34712 8AE9                      A000            .word	$A000
34713                                           ! 6443                        0x0000,
34714 8AEB                      0000            .word	0
34715                                           ! 6444                       0,
34716 8AED                      0000            .word	0
34717 8AEF                      0000            .word	0
34718                                           ! 6445                             5120,
34719 8AF1                      1400            .word	$1400
34720                                           ! 6446                        1280,
34721 8AF3                      0500            .word	$500
34722                                           ! 6447                        800,
34723 8AF5                      0320            .word	$320
34724                                           ! 6448                      8,
34725 8AF7                        08            .byte	8
34726                                           ! 6449                      16,
34727 8AF8                        10            .byte	$10
34728                                           ! 6450                           1,
34729 8AF9                        01            .byte	1
34730                                           ! 6451                         32,
34731 8AFA                        20            .byte	$20
34732                                           ! 6452                          63,
34733 8AFB                        3F            .byte	$3F
34734                                           ! 6453                        0x06,
34735 8AFC                        06            .byte	6
34736                                           ! 6454                     0,
34737 8AFD                        00            .byte	0
34738                                           ! 6455                               3,
34739 8AFE                        03            .byte	3
34740                                           ! 6456                          0,
34741 8AFF                        00            .byte	0
34742                                           ! 6457                        8,
34743 8B00                        08            .byte	8
34744                                           ! 6458                             16,
34745 8B01                        10            .byte	$10
34746                                           ! 6459                          8,
34747 8B02                        08            .byte	8
34748                                           ! 6460                               8,
34749 8B03                        08            .byte	8
34750                                           ! 6461                         8,
34751 8B04                        08            .byte	8
34752                                           ! 6462                              0,
34753 8B05                        00            .byte	0
34754                                           ! 6463                         8,
34755 8B06                        08            .byte	8
34756                                           ! 6464                              24,
34757 8B07                        18            .byte	$18
34758                                           ! 6465                                
34759                                           ! 6465 0x02,
34760 8B08                        02            .byte	2
34761                                           ! 6466                        0xE0000000,
34762 8B09                      0000            .word	0
34763 8B0B                      E000            .word	$E000
34764                                           ! 6467                               0,
34765 8B0D                      0000            .word	0
34766 8B0F                      0000            .word	0
34767                                           ! 6468                             0,
34768 8B11                      0000            .word	0
34769                                           ! 6469                                5120,
34770 8B13                      1400            .word	$1400
34771                                           ! 6470                             0,
34772 8B15                        00            .byte	0
34773                                           ! 6471                             0,
34774 8B16                        00            .byte	0
34775                                           ! 6472                           8,
34776 8B17                        08            .byte	8
34777                                           ! 6473                                16,
34778 8B18                        10            .byte	$10
34779                                           ! 6474                             8,
34780 8B19                        08            .byte	8
34781                                           ! 6475                                  8,
34782 8B1A                        08            .byte	8
34783                                           ! 6476                            8,
34784 8B1B                        08            .byte	8
34785                                           ! 6477                                 0,
34786 8B1C                        00            .byte	0
34787                                           ! 6478                            8,
34788 8B1D                        08            .byte	8
34789                                           ! 6479                                 24,
34790 8B1E                        18            .byte	$18
34791                                           ! 6480                          0,
34792 8B1F                      0000            .word	0
34793 8B21                      0000            .word	0
34794                                           ! 6481 } },
34795                                           ! 6482 { 0x017b,
34796 8B23                      017B            .word	$17B
34797                                           ! 6483 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34798 8B25                      009B            .word	$9B
34799                                           ! 6484                           0x01 | 0x02 | 0x04,
34800 8B27                        07            .byte	7
34801                                           ! 6485                           0,
34802 8B28                        00            .byte	0
34803                                           ! 6486                           64,
34804 8B29                      0040            .word	$40
34805                                           ! 6487                    64,
34806 8B2B                      0040            .word	$40
34807                                           ! 6488                        0xA000,
34808 8B2D                      A000            .word	$A000
34809                                           ! 6489                        0x0000,
34810 8B2F                      0000            .word	0
34811                                           ! 6490                       0,
34812 8B31                      0000            .word	0
34813 8B33                      0000            .word	0
34814                                           ! 6491                             2560,
34815 8B35                      0A00            .word	$A00
34816                                           ! 6492                        1280,
34817 8B37                      0500            .word	$500
34818                                           ! 6493                        960,
34819 8B39                      03C0            .word	$3C0
34820                                           ! 6494                      8,
34821 8B3B                        08            .byte	8
34822                                           ! 6495                      16,
34823 8B3C                        10            .byte	$10
34824                                           ! 6496                           1,
34825 8B3D                        01            .byte	1
34826                                           ! 6497                         16,
34827 8B3E                        10            .byte	$10
34828                                           ! 6498                          38,
34829 8B3F                        26            .byte	$26
34830                                           ! 6499                        0x06,
34831 8B40                        06            .byte	6
34832                                           ! 6500                     0,
34833 8B41                        00            .byte	0
34834                                           ! 6501                               5,
34835 8B42                        05            .byte	5
34836                                           ! 6502                          0,
34837 8B43                        00            .byte	0
34838                                           ! 6503                        5,
34839 8B44                        05            .byte	5
34840                                           ! 6504                             11,
34841 8B45                        0B            .byte	$B
34842                                           ! 6505                          6,
34843 8B46                        06            .byte	6
34844                                           ! 6506                               5,
34845 8B47                        05            .byte	5
34846                                           ! 6507                         5,
34847 8B48                        05            .byte	5
34848                                           ! 6508                              0,
34849 8B49                        00            .byte	0
34850                                           ! 6509                         0,
34851 8B4A                        00            .byte	0
34852                                           ! 6510                              0,
34853 8B4B                        00            .byte	0
34854                                           ! 6511                                0,
34855 8B4C                        00            .byte	0
34856                                           ! 6512                        0xE0000000,
34857 8B4D                      0000            .word	0
34858 8B4F                      E000            .word	$E000
34859                                           ! 6513                               0,
34860 8B51                      0000            .word	0
34861 8B53                      0000            .word	0
34862                                           ! 6514                             0,
34863 8B55                      0000            .word	0
34864                                           ! 6515                                2560,
34865 8B57                      0A00            .word	$A00
34866                                           ! 6516                             0,
34867 8B59                        00            .byte	0
34868                                           ! 6517                             0,
34869 8B5A                        00            .byte	0
34870                                           ! 6518                           5,
34871 8B5B                        05            .byte	5
34872                                           ! 6519                                11,
34873 8B5C                        0B            .byte	$B
34874                                           ! 6520                             6,
34875 8B5D                        06            .byte	6
34876                                           ! 6521                                  5,
34877 8B5E                        05            .byte	5
34878                                           ! 6522                            5,
34879 8B5F                        05            .byte	5
34880                                           ! 6523                                 0,
34881 8B60                        00            .byte	0
34882                                           ! 6524                            0,
34883 8B61                        00            .byte	0
34884                                           ! 6525                                 0,
34885 8B62                        00            .byte	0
34886                                           ! 6526                          0,
34887 8B63                      0000            .word	0
34888 8B65                      0000            .word	0
34889                                           ! 6527 } },
34890                                           ! 6528 { 0x017c,
34891 8B67                      017C            .word	$17C
34892                                           ! 6529 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34893 8B69                      009B            .word	$9B
34894                                           ! 6530                           0x01 | 0x02 | 0x04,
34895 8B6B                        07            .byte	7
34896                                           ! 6531                           0,
34897 8B6C                        00            .byte	0
34898                                           ! 6532                           64,
34899 8B6D                      0040            .word	$40
34900                                           ! 6533                
34901                                           ! 6533     64,
34902 8B6F                      0040            .word	$40
34903                                           ! 6534                        0xA000,
34904 8B71                      A000            .word	$A000
34905                                           ! 6535                        0x0000,
34906 8B73                      0000            .word	0
34907                                           ! 6536                       0,
34908 8B75                      0000            .word	0
34909 8B77                      0000            .word	0
34910                                           ! 6537                             3840,
34911 8B79                      0F00            .word	$F00
34912                                           ! 6538                        1280,
34913 8B7B                      0500            .word	$500
34914                                           ! 6539                        960,
34915 8B7D                      03C0            .word	$3C0
34916                                           ! 6540                      8,
34917 8B7F                        08            .byte	8
34918                                           ! 6541                      16,
34919 8B80                        10            .byte	$10
34920                                           ! 6542                           1,
34921 8B81                        01            .byte	1
34922                                           ! 6543                         24,
34923 8B82                        18            .byte	$18
34924                                           ! 6544                          57,
34925 8B83                        39            .byte	$39
34926                                           ! 6545                        0x06,
34927 8B84                        06            .byte	6
34928                                           ! 6546                     0,
34929 8B85                        00            .byte	0
34930                                           ! 6547                               3,
34931 8B86                        03            .byte	3
34932                                           ! 6548                          0,
34933 8B87                        00            .byte	0
34934                                           ! 6549                        8,
34935 8B88                        08            .byte	8
34936                                           ! 6550                             16,
34937 8B89                        10            .byte	$10
34938                                           ! 6551                          8,
34939 8B8A                        08            .byte	8
34940                                           ! 6552                               8,
34941 8B8B                        08            .byte	8
34942                                           ! 6553                         8,
34943 8B8C                        08            .byte	8
34944                                           ! 6554                              0,
34945 8B8D                        00            .byte	0
34946                                           ! 6555                         0,
34947 8B8E                        00            .byte	0
34948                                           ! 6556                              0,
34949 8B8F                        00            .byte	0
34950                                           ! 6557                                0,
34951 8B90                        00            .byte	0
34952                                           ! 6558                        0xE0000000,
34953 8B91                      0000            .word	0
34954 8B93                      E000            .word	$E000
34955                                           ! 6559                               0,
34956 8B95                      0000            .word	0
34957 8B97                      0000            .word	0
34958                                           ! 6560                             0,
34959 8B99                      0000            .word	0
34960                                           ! 6561                                3840,
34961 8B9B                      0F00            .word	$F00
34962                                           ! 6562                             0,
34963 8B9D                        00            .byte	0
34964                                           ! 6563                             0,
34965 8B9E                        00            .byte	0
34966                                           ! 6564                           8,
34967 8B9F                        08            .byte	8
34968                                           ! 6565                                16,
34969 8BA0                        10            .byte	$10
34970                                           ! 6566                             8,
34971 8BA1                        08            .byte	8
34972                                           ! 6567                                  8,
34973 8BA2                        08            .byte	8
34974                                           ! 6568                            8,
34975 8BA3                        08            .byte	8
34976                                           ! 6569                                 0,
34977 8BA4                        00            .byte	0
34978                                           ! 6570                            0,
34979 8BA5                        00            .byte	0
34980                                           ! 6571                                 0,
34981 8BA6                        00            .byte	0
34982                                           ! 6572                          0,
34983 8BA7                      0000            .word	0
34984 8BA9                      0000            .word	0
34985                                           ! 6573 } },
34986                                           ! 6574 { 0x017d,
34987 8BAB                      017D            .word	$17D
34988                                           ! 6575 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
34989 8BAD                      009B            .word	$9B
34990                                           ! 6576                           0x01 | 0x02 | 0x04,
34991 8BAF                        07            .byte	7
34992                                           ! 6577                           0,
34993 8BB0                        00            .byte	0
34994                                           ! 6578                           64,
34995 8BB1                      0040            .word	$40
34996                                           ! 6579                    64,
34997 8BB3                      0040            .word	$40
34998                                           ! 6580                        0xA000,
34999 8BB5                      A000            .word	$A000
35000                                           ! 6581                        0x0000,
35001 8BB7                      0000            .word	0
35002                                           ! 6582                       0,
35003 8BB9                      0000            .word	0
35004 8BBB                      0000            .word	0
35005                                           ! 6583                             5120,
35006 8BBD                      1400            .word	$1400
35007                                           ! 6584                        1280,
35008 8BBF                      0500            .word	$500
35009                                           ! 6585                        960,
35010 8BC1                      03C0            .word	$3C0
35011                                           ! 6586                      8,
35012 8BC3                        08            .byte	8
35013                                           ! 6587                      16,
35014 8BC4                        10            .byte	$10
35015                                           ! 6588                           1,
35016 8BC5                        01            .byte	1
35017                                           ! 6589                         32,
35018 8BC6                        20            .byte	$20
35019                                           ! 6590                          75,
35020 8BC7                        4B            .byte	$4B
35021                                           ! 6591                        0x06,
35022 8BC8                        06            .byte	6
35023                                           ! 6592                     0,
35024 8BC9                        00            .byte	0
35025                                           ! 6593                               2,
35026 8BCA                        02            .byte	2
35027                                           ! 6594                          0,
35028 8BCB                        00            .byte	0
35029                                           ! 6595                        8,
35030 8BCC                        08            .byte	8
35031                                           ! 6596                             16,
35032 8BCD                        10            .byte	$10
35033                                           ! 6597                          8,
35034 8BCE                        08            .byte	8
35035                                           ! 6598                               8,
35036 8BCF                        08            .byte	8
35037                                           ! 6599                         8,
35038 8BD0                        08            .byte	8
35039                                           ! 6600                              0,
35040 8BD1                        00            .byte	0
35041                                           ! 6601                         8,
35042 8BD2                        08            .byte	8
35043                                           ! 6602                              24,
35044 8BD3                        18            .byte	$18
35045                                           ! 6603    
35046                                           ! 6603                             0x02,
35047 8BD4                        02            .byte	2
35048                                           ! 6604                        0xE0000000,
35049 8BD5                      0000            .word	0
35050 8BD7                      E000            .word	$E000
35051                                           ! 6605                               0,
35052 8BD9                      0000            .word	0
35053 8BDB                      0000            .word	0
35054                                           ! 6606                             0,
35055 8BDD                      0000            .word	0
35056                                           ! 6607                                5120,
35057 8BDF                      1400            .word	$1400
35058                                           ! 6608                             0,
35059 8BE1                        00            .byte	0
35060                                           ! 6609                             0,
35061 8BE2                        00            .byte	0
35062                                           ! 6610                           8,
35063 8BE3                        08            .byte	8
35064                                           ! 6611                                16,
35065 8BE4                        10            .byte	$10
35066                                           ! 6612                             8,
35067 8BE5                        08            .byte	8
35068                                           ! 6613                                  8,
35069 8BE6                        08            .byte	8
35070                                           ! 6614                            8,
35071 8BE7                        08            .byte	8
35072                                           ! 6615                                 0,
35073 8BE8                        00            .byte	0
35074                                           ! 6616                            8,
35075 8BE9                        08            .byte	8
35076                                           ! 6617                                 24,
35077 8BEA                        18            .byte	$18
35078                                           ! 6618                          0,
35079 8BEB                      0000            .word	0
35080 8BED                      0000            .word	0
35081                                           ! 6619 } },
35082                                           ! 6620 { 0x017e,
35083 8BEF                      017E            .word	$17E
35084                                           ! 6621 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35085 8BF1                      009B            .word	$9B
35086                                           ! 6622                           0x01 | 0x02 | 0x04,
35087 8BF3                        07            .byte	7
35088                                           ! 6623                           0,
35089 8BF4                        00            .byte	0
35090                                           ! 6624                           64,
35091 8BF5                      0040            .word	$40
35092                                           ! 6625                    64,
35093 8BF7                      0040            .word	$40
35094                                           ! 6626                        0xA000,
35095 8BF9                      A000            .word	$A000
35096                                           ! 6627                        0x0000,
35097 8BFB                      0000            .word	0
35098                                           ! 6628                       0,
35099 8BFD                      0000            .word	0
35100 8BFF                      0000            .word	0
35101                                           ! 6629                             2880,
35102 8C01                      0B40            .word	$B40
35103                                           ! 6630                        1440,
35104 8C03                      05A0            .word	$5A0
35105                                           ! 6631                        900,
35106 8C05                      0384            .word	$384
35107                                           ! 6632                      8,
35108 8C07                        08            .byte	8
35109                                           ! 6633                      16,
35110 8C08                        10            .byte	$10
35111                                           ! 6634                           1,
35112 8C09                        01            .byte	1
35113                                           ! 6635                         16,
35114 8C0A                        10            .byte	$10
35115                                           ! 6636                          40,
35116 8C0B                        28            .byte	$28
35117                                           ! 6637                        0x06,
35118 8C0C                        06            .byte	6
35119                                           ! 6638                     0,
35120 8C0D                        00            .byte	0
35121                                           ! 6639                               5,
35122 8C0E                        05            .byte	5
35123                                           ! 6640                          0,
35124 8C0F                        00            .byte	0
35125                                           ! 6641                        5,
35126 8C10                        05            .byte	5
35127                                           ! 6642                             11,
35128 8C11                        0B            .byte	$B
35129                                           ! 6643                          6,
35130 8C12                        06            .byte	6
35131                                           ! 6644                               5,
35132 8C13                        05            .byte	5
35133                                           ! 6645                         5,
35134 8C14                        05            .byte	5
35135                                           ! 6646                              0,
35136 8C15                        00            .byte	0
35137                                           ! 6647                         0,
35138 8C16                        00            .byte	0
35139                                           ! 6648                              0,
35140 8C17                        00            .byte	0
35141                                           ! 6649                                0,
35142 8C18                        00            .byte	0
35143                                           ! 6650                        0xE0000000,
35144 8C19                      0000            .word	0
35145 8C1B                      E000            .word	$E000
35146                                           ! 6651                               0,
35147 8C1D                      0000            .word	0
35148 8C1F                      0000            .word	0
35149                                           ! 6652                             0,
35150 8C21                      0000            .word	0
35151                                           ! 6653                                2880,
35152 8C23                      0B40            .word	$B40
35153                                           ! 6654                             0,
35154 8C25                        00            .byte	0
35155                                           ! 6655                             0,
35156 8C26                        00            .byte	0
35157                                           ! 6656                           5,
35158 8C27                        05            .byte	5
35159                                           ! 6657                                11,
35160 8C28                        0B            .byte	$B
35161                                           ! 6658                             6,
35162 8C29                        06            .byte	6
35163                                           ! 6659                                  5,
35164 8C2A                        05            .byte	5
35165                                           ! 6660                            5,
35166 8C2B                        05            .byte	5
35167                                           ! 6661                                 0,
35168 8C2C                        00            .byte	0
35169                                           ! 6662                            0,
35170 8C2D                        00            .byte	0
35171                                           ! 6663                                 0,
35172 8C2E                        00            .byte	0
35173                                           ! 6664                          0,
35174 8C2F                      0000            .word	0
35175 8C31                      0000            .word	0
35176                                           ! 6665 } },
35177                                           ! 6666 { 0x017f,
35178 8C33                      017F            .word	$17F
35179                                           ! 6667 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35180 8C35                      009B            .word	$9B
35181                                           ! 6668                           0x01 | 0x02 | 0x04,
35182 8C37                        07            .byte	7
35183                                           ! 6669                           0,
35184 8C38                        00            .byte	0
35185                                           ! 6670                  
35186                                           ! 6670          64,
35187 8C39                      0040            .word	$40
35188                                           ! 6671                    64,
35189 8C3B                      0040            .word	$40
35190                                           ! 6672                        0xA000,
35191 8C3D                      A000            .word	$A000
35192                                           ! 6673                        0x0000,
35193 8C3F                      0000            .word	0
35194                                           ! 6674                       0,
35195 8C41                      0000            .word	0
35196 8C43                      0000            .word	0
35197                                           ! 6675                             4320,
35198 8C45                      10E0            .word	$10E0
35199                                           ! 6676                        1440,
35200 8C47                      05A0            .word	$5A0
35201                                           ! 6677                        900,
35202 8C49                      0384            .word	$384
35203                                           ! 6678                      8,
35204 8C4B                        08            .byte	8
35205                                           ! 6679                      16,
35206 8C4C                        10            .byte	$10
35207                                           ! 6680                           1,
35208 8C4D                        01            .byte	1
35209                                           ! 6681                         24,
35210 8C4E                        18            .byte	$18
35211                                           ! 6682                          60,
35212 8C4F                        3C            .byte	$3C
35213                                           ! 6683                        0x06,
35214 8C50                        06            .byte	6
35215                                           ! 6684                     0,
35216 8C51                        00            .byte	0
35217                                           ! 6685                               3,
35218 8C52                        03            .byte	3
35219                                           ! 6686                          0,
35220 8C53                        00            .byte	0
35221                                           ! 6687                        8,
35222 8C54                        08            .byte	8
35223                                           ! 6688                             16,
35224 8C55                        10            .byte	$10
35225                                           ! 6689                          8,
35226 8C56                        08            .byte	8
35227                                           ! 6690                               8,
35228 8C57                        08            .byte	8
35229                                           ! 6691                         8,
35230 8C58                        08            .byte	8
35231                                           ! 6692                              0,
35232 8C59                        00            .byte	0
35233                                           ! 6693                         0,
35234 8C5A                        00            .byte	0
35235                                           ! 6694                              0,
35236 8C5B                        00            .byte	0
35237                                           ! 6695                                0,
35238 8C5C                        00            .byte	0
35239                                           ! 6696                        0xE0000000,
35240 8C5D                      0000            .word	0
35241 8C5F                      E000            .word	$E000
35242                                           ! 6697                               0,
35243 8C61                      0000            .word	0
35244 8C63                      0000            .word	0
35245                                           ! 6698                             0,
35246 8C65                      0000            .word	0
35247                                           ! 6699                                4320,
35248 8C67                      10E0            .word	$10E0
35249                                           ! 6700                             0,
35250 8C69                        00            .byte	0
35251                                           ! 6701                             0,
35252 8C6A                        00            .byte	0
35253                                           ! 6702                           8,
35254 8C6B                        08            .byte	8
35255                                           ! 6703                                16,
35256 8C6C                        10            .byte	$10
35257                                           ! 6704                             8,
35258 8C6D                        08            .byte	8
35259                                           ! 6705                                  8,
35260 8C6E                        08            .byte	8
35261                                           ! 6706                            8,
35262 8C6F                        08            .byte	8
35263                                           ! 6707                                 0,
35264 8C70                        00            .byte	0
35265                                           ! 6708                            0,
35266 8C71                        00            .byte	0
35267                                           ! 6709                                 0,
35268 8C72                        00            .byte	0
35269                                           ! 6710                          0,
35270 8C73                      0000            .word	0
35271 8C75                      0000            .word	0
35272                                           ! 6711 } },
35273                                           ! 6712 { 0x0180,
35274 8C77                      0180            .word	$180
35275                                           ! 6713 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35276 8C79                      009B            .word	$9B
35277                                           ! 6714                           0x01 | 0x02 | 0x04,
35278 8C7B                        07            .byte	7
35279                                           ! 6715                           0,
35280 8C7C                        00            .byte	0
35281                                           ! 6716                           64,
35282 8C7D                      0040            .word	$40
35283                                           ! 6717                    64,
35284 8C7F                      0040            .word	$40
35285                                           ! 6718                        0xA000,
35286 8C81                      A000            .word	$A000
35287                                           ! 6719                        0x0000,
35288 8C83                      0000            .word	0
35289                                           ! 6720                       0,
35290 8C85                      0000            .word	0
35291 8C87                      0000            .word	0
35292                                           ! 6721                             5760,
35293 8C89                      1680            .word	$1680
35294                                           ! 6722                        1440,
35295 8C8B                      05A0            .word	$5A0
35296                                           ! 6723                        900,
35297 8C8D                      0384            .word	$384
35298                                           ! 6724                      8,
35299 8C8F                        08            .byte	8
35300                                           ! 6725                      16,
35301 8C90                        10            .byte	$10
35302                                           ! 6726                           1,
35303 8C91                        01            .byte	1
35304                                           ! 6727                         32,
35305 8C92                        20            .byte	$20
35306                                           ! 6728                          80,
35307 8C93                        50            .byte	$50
35308                                           ! 6729                        0x06,
35309 8C94                        06            .byte	6
35310                                           ! 6730                     0,
35311 8C95                        00            .byte	0
35312                                           ! 6731                               2,
35313 8C96                        02            .byte	2
35314                                           ! 6732                          0,
35315 8C97                        00            .byte	0
35316                                           ! 6733                        8,
35317 8C98                        08            .byte	8
35318                                           ! 6734                             16,
35319 8C99                        10            .byte	$10
35320                                           ! 6735                          8,
35321 8C9A                        08            .byte	8
35322                                           ! 6736                               8,
35323 8C9B                        08            .byte	8
35324                                           ! 6737                         8,
35325 8C9C                        08            .byte	8
35326                                           ! 6738                              0,
35327 8C9D                        00            .byte	0
35328                                           ! 6739                         8,
35329 8C9E                        08            .byte	8
35330                                           ! 6740         
35331                                           ! 6740                      24,
35332 8C9F                        18            .byte	$18
35333                                           ! 6741                                0x02,
35334 8CA0                        02            .byte	2
35335                                           ! 6742                        0xE0000000,
35336 8CA1                      0000            .word	0
35337 8CA3                      E000            .word	$E000
35338                                           ! 6743                               0,
35339 8CA5                      0000            .word	0
35340 8CA7                      0000            .word	0
35341                                           ! 6744                             0,
35342 8CA9                      0000            .word	0
35343                                           ! 6745                                5760,
35344 8CAB                      1680            .word	$1680
35345                                           ! 6746                             0,
35346 8CAD                        00            .byte	0
35347                                           ! 6747                             0,
35348 8CAE                        00            .byte	0
35349                                           ! 6748                           8,
35350 8CAF                        08            .byte	8
35351                                           ! 6749                                16,
35352 8CB0                        10            .byte	$10
35353                                           ! 6750                             8,
35354 8CB1                        08            .byte	8
35355                                           ! 6751                                  8,
35356 8CB2                        08            .byte	8
35357                                           ! 6752                            8,
35358 8CB3                        08            .byte	8
35359                                           ! 6753                                 0,
35360 8CB4                        00            .byte	0
35361                                           ! 6754                            8,
35362 8CB5                        08            .byte	8
35363                                           ! 6755                                 24,
35364 8CB6                        18            .byte	$18
35365                                           ! 6756                          0,
35366 8CB7                      0000            .word	0
35367 8CB9                      0000            .word	0
35368                                           ! 6757 } },
35369                                           ! 6758 { 0x0181,
35370 8CBB                      0181            .word	$181
35371                                           ! 6759 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35372 8CBD                      009B            .word	$9B
35373                                           ! 6760                           0x01 | 0x02 | 0x04,
35374 8CBF                        07            .byte	7
35375                                           ! 6761                           0,
35376 8CC0                        00            .byte	0
35377                                           ! 6762                           64,
35378 8CC1                      0040            .word	$40
35379                                           ! 6763                    64,
35380 8CC3                      0040            .word	$40
35381                                           ! 6764                        0xA000,
35382 8CC5                      A000            .word	$A000
35383                                           ! 6765                        0x0000,
35384 8CC7                      0000            .word	0
35385                                           ! 6766                       0,
35386 8CC9                      0000            .word	0
35387 8CCB                      0000            .word	0
35388                                           ! 6767                             2800,
35389 8CCD                      0AF0            .word	$AF0
35390                                           ! 6768                        1400,
35391 8CCF                      0578            .word	$578
35392                                           ! 6769                        1050,
35393 8CD1                      041A            .word	$41A
35394                                           ! 6770                      8,
35395 8CD3                        08            .byte	8
35396                                           ! 6771                      16,
35397 8CD4                        10            .byte	$10
35398                                           ! 6772                           1,
35399 8CD5                        01            .byte	1
35400                                           ! 6773                         16,
35401 8CD6                        10            .byte	$10
35402                                           ! 6774                          45,
35403 8CD7                        2D            .byte	$2D
35404                                           ! 6775                        0x06,
35405 8CD8                        06            .byte	6
35406                                           ! 6776                     0,
35407 8CD9                        00            .byte	0
35408                                           ! 6777                               4,
35409 8CDA                        04            .byte	4
35410                                           ! 6778                          0,
35411 8CDB                        00            .byte	0
35412                                           ! 6779                        5,
35413 8CDC                        05            .byte	5
35414                                           ! 6780                             11,
35415 8CDD                        0B            .byte	$B
35416                                           ! 6781                          6,
35417 8CDE                        06            .byte	6
35418                                           ! 6782                               5,
35419 8CDF                        05            .byte	5
35420                                           ! 6783                         5,
35421 8CE0                        05            .byte	5
35422                                           ! 6784                              0,
35423 8CE1                        00            .byte	0
35424                                           ! 6785                         0,
35425 8CE2                        00            .byte	0
35426                                           ! 6786                              0,
35427 8CE3                        00            .byte	0
35428                                           ! 6787                                0,
35429 8CE4                        00            .byte	0
35430                                           ! 6788                        0xE0000000,
35431 8CE5                      0000            .word	0
35432 8CE7                      E000            .word	$E000
35433                                           ! 6789                               0,
35434 8CE9                      0000            .word	0
35435 8CEB                      0000            .word	0
35436                                           ! 6790                             0,
35437 8CED                      0000            .word	0
35438                                           ! 6791                                2800,
35439 8CEF                      0AF0            .word	$AF0
35440                                           ! 6792                             0,
35441 8CF1                        00            .byte	0
35442                                           ! 6793                             0,
35443 8CF2                        00            .byte	0
35444                                           ! 6794                           5,
35445 8CF3                        05            .byte	5
35446                                           ! 6795                                11,
35447 8CF4                        0B            .byte	$B
35448                                           ! 6796                             6,
35449 8CF5                        06            .byte	6
35450                                           ! 6797                                  5,
35451 8CF6                        05            .byte	5
35452                                           ! 6798                            5,
35453 8CF7                        05            .byte	5
35454                                           ! 6799                                 0,
35455 8CF8                        00            .byte	0
35456                                           ! 6800                            0,
35457 8CF9                        00            .byte	0
35458                                           ! 6801                                 0,
35459 8CFA                        00            .byte	0
35460                                           ! 6802                          0,
35461 8CFB                      0000            .word	0
35462 8CFD                      0000            .word	0
35463                                           ! 6803 } },
35464                                           ! 6804 { 0x0182,
35465 8CFF                      0182            .word	$182
35466                                           ! 6805 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35467 8D01                      009B            .word	$9B
35468                                           ! 6806                           0x01 | 0x02 | 0x04,
35469 8D03                        07            .byte	7
35470                                           ! 6807                  
35471                                           ! 6807          0,
35472 8D04                        00            .byte	0
35473                                           ! 6808                           64,
35474 8D05                      0040            .word	$40
35475                                           ! 6809                    64,
35476 8D07                      0040            .word	$40
35477                                           ! 6810                        0xA000,
35478 8D09                      A000            .word	$A000
35479                                           ! 6811                        0x0000,
35480 8D0B                      0000            .word	0
35481                                           ! 6812                       0,
35482 8D0D                      0000            .word	0
35483 8D0F                      0000            .word	0
35484                                           ! 6813                             4200,
35485 8D11                      1068            .word	$1068
35486                                           ! 6814                        1400,
35487 8D13                      0578            .word	$578
35488                                           ! 6815                        1050,
35489 8D15                      041A            .word	$41A
35490                                           ! 6816                      8,
35491 8D17                        08            .byte	8
35492                                           ! 6817                      16,
35493 8D18                        10            .byte	$10
35494                                           ! 6818                           1,
35495 8D19                        01            .byte	1
35496                                           ! 6819                         24,
35497 8D1A                        18            .byte	$18
35498                                           ! 6820                          68,
35499 8D1B                        44            .byte	$44
35500                                           ! 6821                        0x06,
35501 8D1C                        06            .byte	6
35502                                           ! 6822                     0,
35503 8D1D                        00            .byte	0
35504                                           ! 6823                               2,
35505 8D1E                        02            .byte	2
35506                                           ! 6824                          0,
35507 8D1F                        00            .byte	0
35508                                           ! 6825                        8,
35509 8D20                        08            .byte	8
35510                                           ! 6826                             16,
35511 8D21                        10            .byte	$10
35512                                           ! 6827                          8,
35513 8D22                        08            .byte	8
35514                                           ! 6828                               8,
35515 8D23                        08            .byte	8
35516                                           ! 6829                         8,
35517 8D24                        08            .byte	8
35518                                           ! 6830                              0,
35519 8D25                        00            .byte	0
35520                                           ! 6831                         0,
35521 8D26                        00            .byte	0
35522                                           ! 6832                              0,
35523 8D27                        00            .byte	0
35524                                           ! 6833                                0,
35525 8D28                        00            .byte	0
35526                                           ! 6834                        0xE0000000,
35527 8D29                      0000            .word	0
35528 8D2B                      E000            .word	$E000
35529                                           ! 6835                               0,
35530 8D2D                      0000            .word	0
35531 8D2F                      0000            .word	0
35532                                           ! 6836                             0,
35533 8D31                      0000            .word	0
35534                                           ! 6837                                4200,
35535 8D33                      1068            .word	$1068
35536                                           ! 6838                             0,
35537 8D35                        00            .byte	0
35538                                           ! 6839                             0,
35539 8D36                        00            .byte	0
35540                                           ! 6840                           8,
35541 8D37                        08            .byte	8
35542                                           ! 6841                                16,
35543 8D38                        10            .byte	$10
35544                                           ! 6842                             8,
35545 8D39                        08            .byte	8
35546                                           ! 6843                                  8,
35547 8D3A                        08            .byte	8
35548                                           ! 6844                            8,
35549 8D3B                        08            .byte	8
35550                                           ! 6845                                 0,
35551 8D3C                        00            .byte	0
35552                                           ! 6846                            0,
35553 8D3D                        00            .byte	0
35554                                           ! 6847                                 0,
35555 8D3E                        00            .byte	0
35556                                           ! 6848                          0,
35557 8D3F                      0000            .word	0
35558 8D41                      0000            .word	0
35559                                           ! 6849 } },
35560                                           ! 6850 { 0x0183,
35561 8D43                      0183            .word	$183
35562                                           ! 6851 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35563 8D45                      009B            .word	$9B
35564                                           ! 6852                           0x01 | 0x02 | 0x04,
35565 8D47                        07            .byte	7
35566                                           ! 6853                           0,
35567 8D48                        00            .byte	0
35568                                           ! 6854                           64,
35569 8D49                      0040            .word	$40
35570                                           ! 6855                    64,
35571 8D4B                      0040            .word	$40
35572                                           ! 6856                        0xA000,
35573 8D4D                      A000            .word	$A000
35574                                           ! 6857                        0x0000,
35575 8D4F                      0000            .word	0
35576                                           ! 6858                       0,
35577 8D51                      0000            .word	0
35578 8D53                      0000            .word	0
35579                                           ! 6859                             5600,
35580 8D55                      15E0            .word	$15E0
35581                                           ! 6860                        1400,
35582 8D57                      0578            .word	$578
35583                                           ! 6861                        1050,
35584 8D59                      041A            .word	$41A
35585                                           ! 6862                      8,
35586 8D5B                        08            .byte	8
35587                                           ! 6863                      16,
35588 8D5C                        10            .byte	$10
35589                                           ! 6864                           1,
35590 8D5D                        01            .byte	1
35591                                           ! 6865                         32,
35592 8D5E                        20            .byte	$20
35593                                           ! 6866                          90,
35594 8D5F                        5A            .byte	$5A
35595                                           ! 6867                        0x06,
35596 8D60                        06            .byte	6
35597                                           ! 6868                     0,
35598 8D61                        00            .byte	0
35599                                           ! 6869                               1,
35600 8D62                        01            .byte	1
35601                                           ! 6870                          0,
35602 8D63                        00            .byte	0
35603                                           ! 6871                        8,
35604 8D64                        08            .byte	8
35605                                           ! 6872                             16,
35606 8D65                        10            .byte	$10
35607                                           ! 6873                          8,
35608 8D66                        08            .byte	8
35609                                           ! 6874                               8,
35610 8D67                        08            .byte	8
35611                                           ! 6875                         8,
35612 8D68                        08            .byte	8
35613                                           ! 6876                              0,
35614 8D69                        00            .byte	0
35615                                           ! 6877     
35616                                           ! 6877                     8,
35617 8D6A                        08            .byte	8
35618                                           ! 6878                              24,
35619 8D6B                        18            .byte	$18
35620                                           ! 6879                                0x02,
35621 8D6C                        02            .byte	2
35622                                           ! 6880                        0xE0000000,
35623 8D6D                      0000            .word	0
35624 8D6F                      E000            .word	$E000
35625                                           ! 6881                               0,
35626 8D71                      0000            .word	0
35627 8D73                      0000            .word	0
35628                                           ! 6882                             0,
35629 8D75                      0000            .word	0
35630                                           ! 6883                                5600,
35631 8D77                      15E0            .word	$15E0
35632                                           ! 6884                             0,
35633 8D79                        00            .byte	0
35634                                           ! 6885                             0,
35635 8D7A                        00            .byte	0
35636                                           ! 6886                           8,
35637 8D7B                        08            .byte	8
35638                                           ! 6887                                16,
35639 8D7C                        10            .byte	$10
35640                                           ! 6888                             8,
35641 8D7D                        08            .byte	8
35642                                           ! 6889                                  8,
35643 8D7E                        08            .byte	8
35644                                           ! 6890                            8,
35645 8D7F                        08            .byte	8
35646                                           ! 6891                                 0,
35647 8D80                        00            .byte	0
35648                                           ! 6892                            8,
35649 8D81                        08            .byte	8
35650                                           ! 6893                                 24,
35651 8D82                        18            .byte	$18
35652                                           ! 6894                          0,
35653 8D83                      0000            .word	0
35654 8D85                      0000            .word	0
35655                                           ! 6895 } },
35656                                           ! 6896 { 0x0184,
35657 8D87                      0184            .word	$184
35658                                           ! 6897 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35659 8D89                      009B            .word	$9B
35660                                           ! 6898                           0x01 | 0x02 | 0x04,
35661 8D8B                        07            .byte	7
35662                                           ! 6899                           0,
35663 8D8C                        00            .byte	0
35664                                           ! 6900                           64,
35665 8D8D                      0040            .word	$40
35666                                           ! 6901                    64,
35667 8D8F                      0040            .word	$40
35668                                           ! 6902                        0xA000,
35669 8D91                      A000            .word	$A000
35670                                           ! 6903                        0x0000,
35671 8D93                      0000            .word	0
35672                                           ! 6904                       0,
35673 8D95                      0000            .word	0
35674 8D97                      0000            .word	0
35675                                           ! 6905                             3360,
35676 8D99                      0D20            .word	$D20
35677                                           ! 6906                        1680,
35678 8D9B                      0690            .word	$690
35679                                           ! 6907                        1050,
35680 8D9D                      041A            .word	$41A
35681                                           ! 6908                      8,
35682 8D9F                        08            .byte	8
35683                                           ! 6909                      16,
35684 8DA0                        10            .byte	$10
35685                                           ! 6910                           1,
35686 8DA1                        01            .byte	1
35687                                           ! 6911                         16,
35688 8DA2                        10            .byte	$10
35689                                           ! 6912                          54,
35690 8DA3                        36            .byte	$36
35691                                           ! 6913                        0x06,
35692 8DA4                        06            .byte	6
35693                                           ! 6914                     0,
35694 8DA5                        00            .byte	0
35695                                           ! 6915                               3,
35696 8DA6                        03            .byte	3
35697                                           ! 6916                          0,
35698 8DA7                        00            .byte	0
35699                                           ! 6917                        5,
35700 8DA8                        05            .byte	5
35701                                           ! 6918                             11,
35702 8DA9                        0B            .byte	$B
35703                                           ! 6919                          6,
35704 8DAA                        06            .byte	6
35705                                           ! 6920                               5,
35706 8DAB                        05            .byte	5
35707                                           ! 6921                         5,
35708 8DAC                        05            .byte	5
35709                                           ! 6922                              0,
35710 8DAD                        00            .byte	0
35711                                           ! 6923                         0,
35712 8DAE                        00            .byte	0
35713                                           ! 6924                              0,
35714 8DAF                        00            .byte	0
35715                                           ! 6925                                0,
35716 8DB0                        00            .byte	0
35717                                           ! 6926                        0xE0000000,
35718 8DB1                      0000            .word	0
35719 8DB3                      E000            .word	$E000
35720                                           ! 6927                               0,
35721 8DB5                      0000            .word	0
35722 8DB7                      0000            .word	0
35723                                           ! 6928                             0,
35724 8DB9                      0000            .word	0
35725                                           ! 6929                                3360,
35726 8DBB                      0D20            .word	$D20
35727                                           ! 6930                             0,
35728 8DBD                        00            .byte	0
35729                                           ! 6931                             0,
35730 8DBE                        00            .byte	0
35731                                           ! 6932                           5,
35732 8DBF                        05            .byte	5
35733                                           ! 6933                                11,
35734 8DC0                        0B            .byte	$B
35735                                           ! 6934                             6,
35736 8DC1                        06            .byte	6
35737                                           ! 6935                                  5,
35738 8DC2                        05            .byte	5
35739                                           ! 6936                            5,
35740 8DC3                        05            .byte	5
35741                                           ! 6937                                 0,
35742 8DC4                        00            .byte	0
35743                                           ! 6938                            0,
35744 8DC5                        00            .byte	0
35745                                           ! 6939                                 0,
35746 8DC6                        00            .byte	0
35747                                           ! 6940                          0,
35748 8DC7                      0000            .word	0
35749 8DC9                      0000            .word	0
35750                                           ! 6941 } },
35751                                           ! 6942 { 0x0185,
35752 8DCB                      0185            .word	$185
35753                                           ! 6943 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35754 8DCD                      009B            .word	$9B
35755                                           ! 6944                           0x01 |
35756                                           ! 6944  0x02 | 0x04,
35757 8DCF                        07            .byte	7
35758                                           ! 6945                           0,
35759 8DD0                        00            .byte	0
35760                                           ! 6946                           64,
35761 8DD1                      0040            .word	$40
35762                                           ! 6947                    64,
35763 8DD3                      0040            .word	$40
35764                                           ! 6948                        0xA000,
35765 8DD5                      A000            .word	$A000
35766                                           ! 6949                        0x0000,
35767 8DD7                      0000            .word	0
35768                                           ! 6950                       0,
35769 8DD9                      0000            .word	0
35770 8DDB                      0000            .word	0
35771                                           ! 6951                             5040,
35772 8DDD                      13B0            .word	$13B0
35773                                           ! 6952                        1680,
35774 8DDF                      0690            .word	$690
35775                                           ! 6953                        1050,
35776 8DE1                      041A            .word	$41A
35777                                           ! 6954                      8,
35778 8DE3                        08            .byte	8
35779                                           ! 6955                      16,
35780 8DE4                        10            .byte	$10
35781                                           ! 6956                           1,
35782 8DE5                        01            .byte	1
35783                                           ! 6957                         24,
35784 8DE6                        18            .byte	$18
35785                                           ! 6958                          81,
35786 8DE7                        51            .byte	$51
35787                                           ! 6959                        0x06,
35788 8DE8                        06            .byte	6
35789                                           ! 6960                     0,
35790 8DE9                        00            .byte	0
35791                                           ! 6961                               2,
35792 8DEA                        02            .byte	2
35793                                           ! 6962                          0,
35794 8DEB                        00            .byte	0
35795                                           ! 6963                        8,
35796 8DEC                        08            .byte	8
35797                                           ! 6964                             16,
35798 8DED                        10            .byte	$10
35799                                           ! 6965                          8,
35800 8DEE                        08            .byte	8
35801                                           ! 6966                               8,
35802 8DEF                        08            .byte	8
35803                                           ! 6967                         8,
35804 8DF0                        08            .byte	8
35805                                           ! 6968                              0,
35806 8DF1                        00            .byte	0
35807                                           ! 6969                         0,
35808 8DF2                        00            .byte	0
35809                                           ! 6970                              0,
35810 8DF3                        00            .byte	0
35811                                           ! 6971                                0,
35812 8DF4                        00            .byte	0
35813                                           ! 6972                        0xE0000000,
35814 8DF5                      0000            .word	0
35815 8DF7                      E000            .word	$E000
35816                                           ! 6973                               0,
35817 8DF9                      0000            .word	0
35818 8DFB                      0000            .word	0
35819                                           ! 6974                             0,
35820 8DFD                      0000            .word	0
35821                                           ! 6975                                5040,
35822 8DFF                      13B0            .word	$13B0
35823                                           ! 6976                             0,
35824 8E01                        00            .byte	0
35825                                           ! 6977                             0,
35826 8E02                        00            .byte	0
35827                                           ! 6978                           8,
35828 8E03                        08            .byte	8
35829                                           ! 6979                                16,
35830 8E04                        10            .byte	$10
35831                                           ! 6980                             8,
35832 8E05                        08            .byte	8
35833                                           ! 6981                                  8,
35834 8E06                        08            .byte	8
35835                                           ! 6982                            8,
35836 8E07                        08            .byte	8
35837                                           ! 6983                                 0,
35838 8E08                        00            .byte	0
35839                                           ! 6984                            0,
35840 8E09                        00            .byte	0
35841                                           ! 6985                                 0,
35842 8E0A                        00            .byte	0
35843                                           ! 6986                          0,
35844 8E0B                      0000            .word	0
35845 8E0D                      0000            .word	0
35846                                           ! 6987 } },
35847                                           ! 6988 { 0x0186,
35848 8E0F                      0186            .word	$186
35849                                           ! 6989 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35850 8E11                      009B            .word	$9B
35851                                           ! 6990                           0x01 | 0x02 | 0x04,
35852 8E13                        07            .byte	7
35853                                           ! 6991                           0,
35854 8E14                        00            .byte	0
35855                                           ! 6992                           64,
35856 8E15                      0040            .word	$40
35857                                           ! 6993                    64,
35858 8E17                      0040            .word	$40
35859                                           ! 6994                        0xA000,
35860 8E19                      A000            .word	$A000
35861                                           ! 6995                        0x0000,
35862 8E1B                      0000            .word	0
35863                                           ! 6996                       0,
35864 8E1D                      0000            .word	0
35865 8E1F                      0000            .word	0
35866                                           ! 6997                             6720,
35867 8E21                      1A40            .word	$1A40
35868                                           ! 6998                        1680,
35869 8E23                      0690            .word	$690
35870                                           ! 6999                        1050,
35871 8E25                      041A            .word	$41A
35872                                           ! 7000                      8,
35873 8E27                        08            .byte	8
35874                                           ! 7001                      16,
35875 8E28                        10            .byte	$10
35876                                           ! 7002                           1,
35877 8E29                        01            .byte	1
35878                                           ! 7003                         32,
35879 8E2A                        20            .byte	$20
35880                                           ! 7004                          108,
35881 8E2B                        6C            .byte	$6C
35882                                           ! 7005                        0x06,
35883 8E2C                        06            .byte	6
35884                                           ! 7006                     0,
35885 8E2D                        00            .byte	0
35886                                           ! 7007                               1,
35887 8E2E                        01            .byte	1
35888                                           ! 7008                          0,
35889 8E2F                        00            .byte	0
35890                                           ! 7009                        8,
35891 8E30                        08            .byte	8
35892                                           ! 7010                             16,
35893 8E31                        10            .byte	$10
35894                                           ! 7011                          8,
35895 8E32                        08            .byte	8
35896                                           ! 7012                               8,
35897 8E33                        08            .byte	8
35898                                           ! 7013                         8,
35899 8E34                        08            .byte	8
35900                                           ! 7014     
35901                                           ! 7014                          0,
35902 8E35                        00            .byte	0
35903                                           ! 7015                         8,
35904 8E36                        08            .byte	8
35905                                           ! 7016                              24,
35906 8E37                        18            .byte	$18
35907                                           ! 7017                                0x02,
35908 8E38                        02            .byte	2
35909                                           ! 7018                        0xE0000000,
35910 8E39                      0000            .word	0
35911 8E3B                      E000            .word	$E000
35912                                           ! 7019                               0,
35913 8E3D                      0000            .word	0
35914 8E3F                      0000            .word	0
35915                                           ! 7020                             0,
35916 8E41                      0000            .word	0
35917                                           ! 7021                                6720,
35918 8E43                      1A40            .word	$1A40
35919                                           ! 7022                             0,
35920 8E45                        00            .byte	0
35921                                           ! 7023                             0,
35922 8E46                        00            .byte	0
35923                                           ! 7024                           8,
35924 8E47                        08            .byte	8
35925                                           ! 7025                                16,
35926 8E48                        10            .byte	$10
35927                                           ! 7026                             8,
35928 8E49                        08            .byte	8
35929                                           ! 7027                                  8,
35930 8E4A                        08            .byte	8
35931                                           ! 7028                            8,
35932 8E4B                        08            .byte	8
35933                                           ! 7029                                 0,
35934 8E4C                        00            .byte	0
35935                                           ! 7030                            8,
35936 8E4D                        08            .byte	8
35937                                           ! 7031                                 24,
35938 8E4E                        18            .byte	$18
35939                                           ! 7032                          0,
35940 8E4F                      0000            .word	0
35941 8E51                      0000            .word	0
35942                                           ! 7033 } },
35943                                           ! 7034 { 0x0187,
35944 8E53                      0187            .word	$187
35945                                           ! 7035 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
35946 8E55                      009B            .word	$9B
35947                                           ! 7036                           0x01 | 0x02 | 0x04,
35948 8E57                        07            .byte	7
35949                                           ! 7037                           0,
35950 8E58                        00            .byte	0
35951                                           ! 7038                           64,
35952 8E59                      0040            .word	$40
35953                                           ! 7039                    64,
35954 8E5B                      0040            .word	$40
35955                                           ! 7040                        0xA000,
35956 8E5D                      A000            .word	$A000
35957                                           ! 7041                        0x0000,
35958 8E5F                      0000            .word	0
35959                                           ! 7042                       0,
35960 8E61                      0000            .word	0
35961 8E63                      0000            .word	0
35962                                           ! 7043                             3840,
35963 8E65                      0F00            .word	$F00
35964                                           ! 7044                        1920,
35965 8E67                      0780            .word	$780
35966                                           ! 7045                        1200,
35967 8E69                      04B0            .word	$4B0
35968                                           ! 7046                      8,
35969 8E6B                        08            .byte	8
35970                                           ! 7047                      16,
35971 8E6C                        10            .byte	$10
35972                                           ! 7048                           1,
35973 8E6D                        01            .byte	1
35974                                           ! 7049                         16,
35975 8E6E                        10            .byte	$10
35976                                           ! 7050                          71,
35977 8E6F                        47            .byte	$47
35978                                           ! 7051                        0x06,
35979 8E70                        06            .byte	6
35980                                           ! 7052                     0,
35981 8E71                        00            .byte	0
35982                                           ! 7053                               2,
35983 8E72                        02            .byte	2
35984                                           ! 7054                          0,
35985 8E73                        00            .byte	0
35986                                           ! 7055                        5,
35987 8E74                        05            .byte	5
35988                                           ! 7056                             11,
35989 8E75                        0B            .byte	$B
35990                                           ! 7057                          6,
35991 8E76                        06            .byte	6
35992                                           ! 7058                               5,
35993 8E77                        05            .byte	5
35994                                           ! 7059                         5,
35995 8E78                        05            .byte	5
35996                                           ! 7060                              0,
35997 8E79                        00            .byte	0
35998                                           ! 7061                         0,
35999 8E7A                        00            .byte	0
36000                                           ! 7062                              0,
36001 8E7B                        00            .byte	0
36002                                           ! 7063                                0,
36003 8E7C                        00            .byte	0
36004                                           ! 7064                        0xE0000000,
36005 8E7D                      0000            .word	0
36006 8E7F                      E000            .word	$E000
36007                                           ! 7065                               0,
36008 8E81                      0000            .word	0
36009 8E83                      0000            .word	0
36010                                           ! 7066                             0,
36011 8E85                      0000            .word	0
36012                                           ! 7067                                3840,
36013 8E87                      0F00            .word	$F00
36014                                           ! 7068                             0,
36015 8E89                        00            .byte	0
36016                                           ! 7069                             0,
36017 8E8A                        00            .byte	0
36018                                           ! 7070                           5,
36019 8E8B                        05            .byte	5
36020                                           ! 7071                                11,
36021 8E8C                        0B            .byte	$B
36022                                           ! 7072                             6,
36023 8E8D                        06            .byte	6
36024                                           ! 7073                                  5,
36025 8E8E                        05            .byte	5
36026                                           ! 7074                            5,
36027 8E8F                        05            .byte	5
36028                                           ! 7075                                 0,
36029 8E90                        00            .byte	0
36030                                           ! 7076                            0,
36031 8E91                        00            .byte	0
36032                                           ! 7077                                 0,
36033 8E92                        00            .byte	0
36034                                           ! 7078                          0,
36035 8E93                      0000            .word	0
36036 8E95                      0000            .word	0
36037                                           ! 7079 } },
36038                                           ! 7080 { 0x0188,
36039 8E97                      0188            .word	$188
36040                                           ! 7081 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36041 8E99                      009B            .word	$9B
36042                                           ! 7082 
36043                                           ! 7082                           0x01 | 0x02 | 0x04,
36044 8E9B                        07            .byte	7
36045                                           ! 7083                           0,
36046 8E9C                        00            .byte	0
36047                                           ! 7084                           64,
36048 8E9D                      0040            .word	$40
36049                                           ! 7085                    64,
36050 8E9F                      0040            .word	$40
36051                                           ! 7086                        0xA000,
36052 8EA1                      A000            .word	$A000
36053                                           ! 7087                        0x0000,
36054 8EA3                      0000            .word	0
36055                                           ! 7088                       0,
36056 8EA5                      0000            .word	0
36057 8EA7                      0000            .word	0
36058                                           ! 7089                             5760,
36059 8EA9                      1680            .word	$1680
36060                                           ! 7090                        1920,
36061 8EAB                      0780            .word	$780
36062                                           ! 7091                        1200,
36063 8EAD                      04B0            .word	$4B0
36064                                           ! 7092                      8,
36065 8EAF                        08            .byte	8
36066                                           ! 7093                      16,
36067 8EB0                        10            .byte	$10
36068                                           ! 7094                           1,
36069 8EB1                        01            .byte	1
36070                                           ! 7095                         24,
36071 8EB2                        18            .byte	$18
36072                                           ! 7096                          106,
36073 8EB3                        6A            .byte	$6A
36074                                           ! 7097                        0x06,
36075 8EB4                        06            .byte	6
36076                                           ! 7098                     0,
36077 8EB5                        00            .byte	0
36078                                           ! 7099                               1,
36079 8EB6                        01            .byte	1
36080                                           ! 7100                          0,
36081 8EB7                        00            .byte	0
36082                                           ! 7101                        8,
36083 8EB8                        08            .byte	8
36084                                           ! 7102                             16,
36085 8EB9                        10            .byte	$10
36086                                           ! 7103                          8,
36087 8EBA                        08            .byte	8
36088                                           ! 7104                               8,
36089 8EBB                        08            .byte	8
36090                                           ! 7105                         8,
36091 8EBC                        08            .byte	8
36092                                           ! 7106                              0,
36093 8EBD                        00            .byte	0
36094                                           ! 7107                         0,
36095 8EBE                        00            .byte	0
36096                                           ! 7108                              0,
36097 8EBF                        00            .byte	0
36098                                           ! 7109                                0,
36099 8EC0                        00            .byte	0
36100                                           ! 7110                        0xE0000000,
36101 8EC1                      0000            .word	0
36102 8EC3                      E000            .word	$E000
36103                                           ! 7111                               0,
36104 8EC5                      0000            .word	0
36105 8EC7                      0000            .word	0
36106                                           ! 7112                             0,
36107 8EC9                      0000            .word	0
36108                                           ! 7113                                5760,
36109 8ECB                      1680            .word	$1680
36110                                           ! 7114                             0,
36111 8ECD                        00            .byte	0
36112                                           ! 7115                             0,
36113 8ECE                        00            .byte	0
36114                                           ! 7116                           8,
36115 8ECF                        08            .byte	8
36116                                           ! 7117                                16,
36117 8ED0                        10            .byte	$10
36118                                           ! 7118                             8,
36119 8ED1                        08            .byte	8
36120                                           ! 7119                                  8,
36121 8ED2                        08            .byte	8
36122                                           ! 7120                            8,
36123 8ED3                        08            .byte	8
36124                                           ! 7121                                 0,
36125 8ED4                        00            .byte	0
36126                                           ! 7122                            0,
36127 8ED5                        00            .byte	0
36128                                           ! 7123                                 0,
36129 8ED6                        00            .byte	0
36130                                           ! 7124                          0,
36131 8ED7                      0000            .word	0
36132 8ED9                      0000            .word	0
36133                                           ! 7125 } },
36134                                           ! 7126 { 0x0189,
36135 8EDB                      0189            .word	$189
36136                                           ! 7127 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36137 8EDD                      009B            .word	$9B
36138                                           ! 7128                           0x01 | 0x02 | 0x04,
36139 8EDF                        07            .byte	7
36140                                           ! 7129                           0,
36141 8EE0                        00            .byte	0
36142                                           ! 7130                           64,
36143 8EE1                      0040            .word	$40
36144                                           ! 7131                    64,
36145 8EE3                      0040            .word	$40
36146                                           ! 7132                        0xA000,
36147 8EE5                      A000            .word	$A000
36148                                           ! 7133                        0x0000,
36149 8EE7                      0000            .word	0
36150                                           ! 7134                       0,
36151 8EE9                      0000            .word	0
36152 8EEB                      0000            .word	0
36153                                           ! 7135                             7680,
36154 8EED                      1E00            .word	$1E00
36155                                           ! 7136                        1920,
36156 8EEF                      0780            .word	$780
36157                                           ! 7137                        1200,
36158 8EF1                      04B0            .word	$4B0
36159                                           ! 7138                      8,
36160 8EF3                        08            .byte	8
36161                                           ! 7139                      16,
36162 8EF4                        10            .byte	$10
36163                                           ! 7140                           1,
36164 8EF5                        01            .byte	1
36165                                           ! 7141                         32,
36166 8EF6                        20            .byte	$20
36167                                           ! 7142                          141,
36168 8EF7                        8D            .byte	$8D
36169                                           ! 7143                        0x06,
36170 8EF8                        06            .byte	6
36171                                           ! 7144                     0,
36172 8EF9                        00            .byte	0
36173                                           ! 7145                               0,
36174 8EFA                        00            .byte	0
36175                                           ! 7146                          0,
36176 8EFB                        00            .byte	0
36177                                           ! 7147                        8,
36178 8EFC                        08            .byte	8
36179                                           ! 7148                             16,
36180 8EFD                        10            .byte	$10
36181                                           ! 7149                          8,
36182 8EFE                        08            .byte	8
36183                                           ! 7150                               8
36184                                           ! 7150 ,
36185 8EFF                        08            .byte	8
36186                                           ! 7151                         8,
36187 8F00                        08            .byte	8
36188                                           ! 7152                              0,
36189 8F01                        00            .byte	0
36190                                           ! 7153                         8,
36191 8F02                        08            .byte	8
36192                                           ! 7154                              24,
36193 8F03                        18            .byte	$18
36194                                           ! 7155                                0x02,
36195 8F04                        02            .byte	2
36196                                           ! 7156                        0xE0000000,
36197 8F05                      0000            .word	0
36198 8F07                      E000            .word	$E000
36199                                           ! 7157                               0,
36200 8F09                      0000            .word	0
36201 8F0B                      0000            .word	0
36202                                           ! 7158                             0,
36203 8F0D                      0000            .word	0
36204                                           ! 7159                                7680,
36205 8F0F                      1E00            .word	$1E00
36206                                           ! 7160                             0,
36207 8F11                        00            .byte	0
36208                                           ! 7161                             0,
36209 8F12                        00            .byte	0
36210                                           ! 7162                           8,
36211 8F13                        08            .byte	8
36212                                           ! 7163                                16,
36213 8F14                        10            .byte	$10
36214                                           ! 7164                             8,
36215 8F15                        08            .byte	8
36216                                           ! 7165                                  8,
36217 8F16                        08            .byte	8
36218                                           ! 7166                            8,
36219 8F17                        08            .byte	8
36220                                           ! 7167                                 0,
36221 8F18                        00            .byte	0
36222                                           ! 7168                            8,
36223 8F19                        08            .byte	8
36224                                           ! 7169                                 24,
36225 8F1A                        18            .byte	$18
36226                                           ! 7170                          0,
36227 8F1B                      0000            .word	0
36228 8F1D                      0000            .word	0
36229                                           ! 7171 } },
36230                                           ! 7172 { 0x018a,
36231 8F1F                      018A            .word	$18A
36232                                           ! 7173 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36233 8F21                      009B            .word	$9B
36234                                           ! 7174                           0x01 | 0x02 | 0x04,
36235 8F23                        07            .byte	7
36236                                           ! 7175                           0,
36237 8F24                        00            .byte	0
36238                                           ! 7176                           64,
36239 8F25                      0040            .word	$40
36240                                           ! 7177                    64,
36241 8F27                      0040            .word	$40
36242                                           ! 7178                        0xA000,
36243 8F29                      A000            .word	$A000
36244                                           ! 7179                        0x0000,
36245 8F2B                      0000            .word	0
36246                                           ! 7180                       0,
36247 8F2D                      0000            .word	0
36248 8F2F                      0000            .word	0
36249                                           ! 7181                             5120,
36250 8F31                      1400            .word	$1400
36251                                           ! 7182                        2560,
36252 8F33                      0A00            .word	$A00
36253                                           ! 7183                        1600,
36254 8F35                      0640            .word	$640
36255                                           ! 7184                      8,
36256 8F37                        08            .byte	8
36257                                           ! 7185                      16,
36258 8F38                        10            .byte	$10
36259                                           ! 7186                           1,
36260 8F39                        01            .byte	1
36261                                           ! 7187                         16,
36262 8F3A                        10            .byte	$10
36263                                           ! 7188                          125,
36264 8F3B                        7D            .byte	$7D
36265                                           ! 7189                        0x06,
36266 8F3C                        06            .byte	6
36267                                           ! 7190                     0,
36268 8F3D                        00            .byte	0
36269                                           ! 7191                               1,
36270 8F3E                        01            .byte	1
36271                                           ! 7192                          0,
36272 8F3F                        00            .byte	0
36273                                           ! 7193                        5,
36274 8F40                        05            .byte	5
36275                                           ! 7194                             11,
36276 8F41                        0B            .byte	$B
36277                                           ! 7195                          6,
36278 8F42                        06            .byte	6
36279                                           ! 7196                               5,
36280 8F43                        05            .byte	5
36281                                           ! 7197                         5,
36282 8F44                        05            .byte	5
36283                                           ! 7198                              0,
36284 8F45                        00            .byte	0
36285                                           ! 7199                         0,
36286 8F46                        00            .byte	0
36287                                           ! 7200                              0,
36288 8F47                        00            .byte	0
36289                                           ! 7201                                0,
36290 8F48                        00            .byte	0
36291                                           ! 7202                        0xE0000000,
36292 8F49                      0000            .word	0
36293 8F4B                      E000            .word	$E000
36294                                           ! 7203                               0,
36295 8F4D                      0000            .word	0
36296 8F4F                      0000            .word	0
36297                                           ! 7204                             0,
36298 8F51                      0000            .word	0
36299                                           ! 7205                                5120,
36300 8F53                      1400            .word	$1400
36301                                           ! 7206                             0,
36302 8F55                        00            .byte	0
36303                                           ! 7207                             0,
36304 8F56                        00            .byte	0
36305                                           ! 7208                           5,
36306 8F57                        05            .byte	5
36307                                           ! 7209                                11,
36308 8F58                        0B            .byte	$B
36309                                           ! 7210                             6,
36310 8F59                        06            .byte	6
36311                                           ! 7211                                  5,
36312 8F5A                        05            .byte	5
36313                                           ! 7212                            5,
36314 8F5B                        05            .byte	5
36315                                           ! 7213                                 0,
36316 8F5C                        00            .byte	0
36317                                           ! 7214                            0,
36318 8F5D                        00            .byte	0
36319                                           ! 7215                                 0,
36320 8F5E                        00            .byte	0
36321                                           ! 7216                          0,
36322 8F5F                      0000            .word	0
36323 8F61                      0000            .word	0
36324                                           ! 7217 } },
36325                                           ! 7218 { 0x018b,
36326 8F63                      018B            .word	$18B
36327                                           ! 7219 { 0x0001 | 0
36328                                           ! 7219 x0002 | 0x0008 | 0x0080 | 0x0010,
36329 8F65                      009B            .word	$9B
36330                                           ! 7220                           0x01 | 0x02 | 0x04,
36331 8F67                        07            .byte	7
36332                                           ! 7221                           0,
36333 8F68                        00            .byte	0
36334                                           ! 7222                           64,
36335 8F69                      0040            .word	$40
36336                                           ! 7223                    64,
36337 8F6B                      0040            .word	$40
36338                                           ! 7224                        0xA000,
36339 8F6D                      A000            .word	$A000
36340                                           ! 7225                        0x0000,
36341 8F6F                      0000            .word	0
36342                                           ! 7226                       0,
36343 8F71                      0000            .word	0
36344 8F73                      0000            .word	0
36345                                           ! 7227                             7680,
36346 8F75                      1E00            .word	$1E00
36347                                           ! 7228                        2560,
36348 8F77                      0A00            .word	$A00
36349                                           ! 7229                        1600,
36350 8F79                      0640            .word	$640
36351                                           ! 7230                      8,
36352 8F7B                        08            .byte	8
36353                                           ! 7231                      16,
36354 8F7C                        10            .byte	$10
36355                                           ! 7232                           1,
36356 8F7D                        01            .byte	1
36357                                           ! 7233                         24,
36358 8F7E                        18            .byte	$18
36359                                           ! 7234                          188,
36360 8F7F                        BC            .byte	$BC
36361                                           ! 7235                        0x06,
36362 8F80                        06            .byte	6
36363                                           ! 7236                     0,
36364 8F81                        00            .byte	0
36365                                           ! 7237                               0,
36366 8F82                        00            .byte	0
36367                                           ! 7238                          0,
36368 8F83                        00            .byte	0
36369                                           ! 7239                        8,
36370 8F84                        08            .byte	8
36371                                           ! 7240                             16,
36372 8F85                        10            .byte	$10
36373                                           ! 7241                          8,
36374 8F86                        08            .byte	8
36375                                           ! 7242                               8,
36376 8F87                        08            .byte	8
36377                                           ! 7243                         8,
36378 8F88                        08            .byte	8
36379                                           ! 7244                              0,
36380 8F89                        00            .byte	0
36381                                           ! 7245                         0,
36382 8F8A                        00            .byte	0
36383                                           ! 7246                              0,
36384 8F8B                        00            .byte	0
36385                                           ! 7247                                0,
36386 8F8C                        00            .byte	0
36387                                           ! 7248                        0xE0000000,
36388 8F8D                      0000            .word	0
36389 8F8F                      E000            .word	$E000
36390                                           ! 7249                               0,
36391 8F91                      0000            .word	0
36392 8F93                      0000            .word	0
36393                                           ! 7250                             0,
36394 8F95                      0000            .word	0
36395                                           ! 7251                                7680,
36396 8F97                      1E00            .word	$1E00
36397                                           ! 7252                             0,
36398 8F99                        00            .byte	0
36399                                           ! 7253                             0,
36400 8F9A                        00            .byte	0
36401                                           ! 7254                           8,
36402 8F9B                        08            .byte	8
36403                                           ! 7255                                16,
36404 8F9C                        10            .byte	$10
36405                                           ! 7256                             8,
36406 8F9D                        08            .byte	8
36407                                           ! 7257                                  8,
36408 8F9E                        08            .byte	8
36409                                           ! 7258                            8,
36410 8F9F                        08            .byte	8
36411                                           ! 7259                                 0,
36412 8FA0                        00            .byte	0
36413                                           ! 7260                            0,
36414 8FA1                        00            .byte	0
36415                                           ! 7261                                 0,
36416 8FA2                        00            .byte	0
36417                                           ! 7262                          0,
36418 8FA3                      0000            .word	0
36419 8FA5                      0000            .word	0
36420                                           ! 7263 } },
36421                                           ! 7264 { 0x018c,
36422 8FA7                      018C            .word	$18C
36423                                           ! 7265 { 0x0001 | 0x0002 | 0x0008 | 0x0080 | 0x0010,
36424 8FA9                      009B            .word	$9B
36425                                           ! 7266                           0x01 | 0x02 | 0x04,
36426 8FAB                        07            .byte	7
36427                                           ! 7267                           0,
36428 8FAC                        00            .byte	0
36429                                           ! 7268                           64,
36430 8FAD                      0040            .word	$40
36431                                           ! 7269                    64,
36432 8FAF                      0040            .word	$40
36433                                           ! 7270                        0xA000,
36434 8FB1                      A000            .word	$A000
36435                                           ! 7271                        0x0000,
36436 8FB3                      0000            .word	0
36437                                           ! 7272                       0,
36438 8FB5                      0000            .word	0
36439 8FB7                      0000            .word	0
36440                                           ! 7273                             10240,
36441 8FB9                      2800            .word	$2800
36442                                           ! 7274                        2560,
36443 8FBB                      0A00            .word	$A00
36444                                           ! 7275                        1600,
36445 8FBD                      0640            .word	$640
36446                                           ! 7276                      8,
36447 8FBF                        08            .byte	8
36448                                           ! 7277                      16,
36449 8FC0                        10            .byte	$10
36450                                           ! 7278                           1,
36451 8FC1                        01            .byte	1
36452                                           ! 7279                         32,
36453 8FC2                        20            .byte	$20
36454                                           ! 7280                          250,
36455 8FC3                        FA            .byte	$FA
36456                                           ! 7281                        0x06,
36457 8FC4                        06            .byte	6
36458                                           ! 7282                     0,
36459 8FC5                        00            .byte	0
36460                                           ! 7283                               0,
36461 8FC6                        00            .byte	0
36462                                           ! 7284                          0,
36463 8FC7                        00            .byte	0
36464                                           ! 7285                        8,
36465 8FC8                        08            .byte	8
36466                                           ! 7286                             16,
36467 8FC9                        10            .byte	$10
36468                                           ! 7287                         
36469                                           ! 7287  8,
36470 8FCA                        08            .byte	8
36471                                           ! 7288                               8,
36472 8FCB                        08            .byte	8
36473                                           ! 7289                         8,
36474 8FCC                        08            .byte	8
36475                                           ! 7290                              0,
36476 8FCD                        00            .byte	0
36477                                           ! 7291                         8,
36478 8FCE                        08            .byte	8
36479                                           ! 7292                              24,
36480 8FCF                        18            .byte	$18
36481                                           ! 7293                                0x02,
36482 8FD0                        02            .byte	2
36483                                           ! 7294                        0xE0000000,
36484 8FD1                      0000            .word	0
36485 8FD3                      E000            .word	$E000
36486                                           ! 7295                               0,
36487 8FD5                      0000            .word	0
36488 8FD7                      0000            .word	0
36489                                           ! 7296                             0,
36490 8FD9                      0000            .word	0
36491                                           ! 7297                                10240,
36492 8FDB                      2800            .word	$2800
36493                                           ! 7298                             0,
36494 8FDD                        00            .byte	0
36495                                           ! 7299                             0,
36496 8FDE                        00            .byte	0
36497                                           ! 7300                           8,
36498 8FDF                        08            .byte	8
36499                                           ! 7301                                16,
36500 8FE0                        10            .byte	$10
36501                                           ! 7302                             8,
36502 8FE1                        08            .byte	8
36503                                           ! 7303                                  8,
36504 8FE2                        08            .byte	8
36505                                           ! 7304                            8,
36506 8FE3                        08            .byte	8
36507                                           ! 7305                                 0,
36508 8FE4                        00            .byte	0
36509                                           ! 7306                            8,
36510 8FE5                        08            .byte	8
36511                                           ! 7307                                 24,
36512 8FE6                        18            .byte	$18
36513                                           ! 7308                          0,
36514 8FE7                      0000            .word	0
36515 8FE9                      0000            .word	0
36516                                           ! 7309 } },
36517                                           ! 7310 { 0xFFFF,
36518 8FEB                      FFFF            .word	$FFFF
36519                                           ! 7311 { 0,
36520 8FED                      0000            .word	0
36521                                           ! 7312 } },
36522 8FEF                  00000040            .blkb	$40
36523                                           ! 7313 };
36524                                           !BCC_EOS
36525                                           ! 7314 extern char vbebios_copyright;
36526                                           !BCC_EOS
36527                                           ! 7315 extern char vbebios_vendor_name;
36528                                           !BCC_EOS
36529                                           ! 7316 extern char vbebios_product_name;
36530                                           !BCC_EOS
36531                                           ! 7317 extern char vbebios_product_revision;
36532                                           !BCC_EOS
36533                                           ! 7318 #asm
36534                                           !BCC_ASM
36535                       0000902F            _vbebios_copyright:
36536 902F                        42            .ascii "Bochs/Plex86 VBE(C) 2003 http://savannah.nongnu.org/projects/vgabios/"
36537 9074                        00            .byte 0x00
36538                       00009075            _vbebios_vendor_name:
36539 9075                        42            .ascii "Bochs/Plex86 Developers"
36540 908C                        00            .byte 0x00
36541                       0000908D            _vbebios_product_name:
36542 908D                        42            .ascii "Bochs/Plex86 VBE Adapter"
36543 90A5                        00            .byte 0x00
36544                       000090A6            _vbebios_product_revision:
36545 90A6                        24            .ascii "$Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36546 90DA                        00            .byte 0x00
36547                       000090DB            _vbebios_info_string:
36548 90DB                        42            .ascii "Bochs VBE Display Adapter enabled"
36549 90FC                        0A            .byte 0x0a,0x0d
36550 90FE                        0A            .byte 0x0a,0x0d
36551 9100                        00            .byte 0x00
36552                       00009101            _no_vbebios_info_string:
36553 9101                        4E            .ascii "NO Bochs VBE Support available!"
36554 9120                        0A            .byte 0x0a,0x0d
36555 9122                        0A            .byte 0x0a,0x0d
36556 9124                        00            .byte 0x00
36557                       00009125            msg_vbe_init:
36558 9125                        56            .ascii "VBE Bios $Id: vbe.c,v 1.62 2009/01/25 15:46:25 vruppert Exp $"
36559 9162                        0A            .byte 0x0a,0x0d, 0x00
36560 9165                  00000002              .align 2
36561                       00009166            vesa_pm_start:
36562 9166                      0014              dw vesa_pm_set_window - vesa_pm_start
36563 9168                      004B              dw vesa_pm_set_display_start - vesa_pm_start
36564 916A                      00FC              dw vesa_pm_unimplemented - vesa_pm_start
36565 916C                      0008              dw vesa_pm_io_ports_table - vesa_pm_start
36566                       0000916E            vesa_pm_io_ports_table:
36567 916E                      01CE              dw 0x01CE
36568 9170                      01CF              dw 0x01CE + 1
36569 9172                      01CF              dw 0x01CF
36570 9174                      01D0              dw 0x01CF + 1
36571 9176                      FFFF              dw 0xffff
36572 9178                      FFFF              dw 0xffff
36573                                             USE32
36574                       0000917A            vesa_pm_set_window:
36575 917A     66    83FB                   00    cmp bx, #0x00
36576 917E           74           05              je vesa_pm_set_display_window1
36577 9180     66    B8                   0100    mov ax, #0x0100
36578 9184           C3                           ret
36579                       00009185            vesa_pm_set_display_window1:
36580 9185     66    89D0                         mov ax, dx
36581 9188     66    52                           push dx
36582 918A     66    50                           push ax
36583 918C     66    BA                   01CE    mov dx, # 0x01CE
36584 9190     66    B8                   0005    mov ax, # 0x5
36585 9194     66    EF                           out dx, ax
36586 9196     66    58                           pop ax
36587 9198     66    BA                   01CF    mov dx, # 0x01CF
36588 919C     66    EF                           out dx, ax
36589 919E     66    ED                           in ax, dx
36590 91A0     66    5A                           pop dx
36591 91A2     66    39C2                         cmp dx, ax
36592 91A5           75           05              jne illegal_window
36593 91A7     66    B8                   004F    mov ax, #0x004f
36594 91AB           C3                           ret
36595                       000091AC            illegal_window:
36596 91AC     66    B8                   014F    mov ax, #0x014f
36597 91B0           C3                           ret
36598                       000091B1            vesa_pm_set_display_start:
36599 91B1           80FB                   80    cmp bl, #0x80
36600 91B4           74           0A              je vesa_pm_set_display_start1
36601 91B6           80FB                   00    cmp bl, #0x00
36602 91B9           74           05              je vesa_pm_set_display_start1
36603 91BB     66    B8                   0100    mov ax, #0x0100
36604 91BF           C3                           ret
36605                       000091C0            vesa_pm_set_display_start1:
36606                                           ; convert offset to (X, Y) coordinate
36607                                           ; (would be simpler to change Bochs 1 API...)
36608 91C0           50                           push eax
36609 91C1           51                           push ecx
36610 91C2           52                           push edx
36611 91C3           56                           push esi
36612 91C4           57                           push edi
36613 91C5           C1E2                   10    shl edx, #16
36614 91C8           81E1             0000FFFF    and ecx, #0xffff
36615 91CE           09D1                         or ecx, edx
36616 91D0           C1E1                   02    shl ecx, #2
36617 91D3           89C8                         mov eax, ecx
36618 91D5           50                           push eax
36619 91D6     66    BA                   01CE    mov dx, # 0x01CE
36620 91DA     66    B8                   0006    mov ax, # 0x6
36621 91DE     66    EF                           out dx, ax
36622 91E0     66    BA                   01CF    mov dx, # 0x01CF
36623 91E4     66    ED                           in ax, dx
36624 91E6         0FB7C8                         movzx ecx, ax
36625 91E9     66    BA                   01CE    mov dx, # 0x01CE
36626 91ED     66    B8                   0003    mov ax, # 0x3
36627 91F1     66    EF                           out dx, ax
36628 91F3     66    BA                   01CF    mov dx, # 0x01CF
36629 91F7     66    ED                           in ax, dx
36630 91F9         0FB7F0                         movzx esi, ax
36631 91FC           58                           pop eax
36632 91FD           83FE                   04    cmp esi, #4
36633 9200           74           17              jz bpp4_mode
36634 9202           83C6                   07    add esi, #7
36635 9205           C1EE                   03    shr esi, #3
36636 9208         0FAFCE                         imul ecx, esi
36637 920B           31D2                         xor edx, edx
36638 920D           F7F1                         div ecx
36639 920F           89C7                         mov edi, eax
36640 9211           89D0                         mov eax, edx
36641 9213           31D2                         xor edx, edx
36642 9215           F7F6                         div esi
36643 9217           EB           0C              jmp set_xy_regs
36644                       00009219            bpp4_mode:
36645 9219           D1E9                         shr ecx, #1
36646 921B           31D2                         xor edx, edx
36647 921D           F7F1                         div ecx
36648 921F           89C7                         mov edi, eax
36649 9221           89D0                         mov eax, edx
36650 9223           D1E0                         shl eax, #1
36651                       00009225            set_xy_regs:
36652 9225     66    52                           push dx
36653 9227     66    50                           push ax
36654 9229     66    BA                   01CE    mov dx, # 0x01CE
36655 922D     66    B8                   0008    mov ax, # 0x8
36656 9231     66    EF                           out dx, ax
36657 9233     66    58                           pop ax
36658 9235     66    BA                   01CF    mov dx, # 0x01CF
36659 9239     66    EF                           out dx, ax
36660 923B     66    5A                           pop dx
36661 923D     66    89F8                         mov ax, di
36662 9240     66    52                           push dx
36663 9242     66    50                           push ax
36664 9244     66    BA                   01CE    mov dx, # 0x01CE
36665 9248     66    B8                   0009    mov ax, # 0x9
36666 924C     66    EF                           out dx, ax
36667 924E     66    58                           pop ax
36668 9250     66    BA                   01CF    mov dx, # 0x01CF
36669 9254     66    EF                           out dx, ax
36670 9256     66    5A                           pop dx
36671 9258           5F                           pop edi
36672 9259           5E                           pop esi
36673 925A           5A                           pop edx
36674 925B           59                           pop ecx
36675 925C           58                           pop eax
36676 925D     66    B8                   004F    mov ax, #0x004f
36677 9261           C3                           ret
36678                       00009262            vesa_pm_unimplemented:
36679 9262     66    B8                   014F    mov ax, #0x014f
36680 9266           C3                           ret
36681                                             USE16
36682                       00009267            vesa_pm_end:
36683                                           ; DISPI ioport functions
36684                       00009267            dispi_get_id:
36685 9267           52                           push dx
36686 9268           BA                   01CE    mov dx, # 0x01CE
36687 926B           B8                   0000    mov ax, # 0x0
36688 926E           EF                           out dx, ax
36689 926F           BA                   01CF    mov dx, # 0x01CF
36690 9272           ED                           in ax, dx
36691 9273           5A                           pop dx
36692 9274           C3                           ret
36693                       00009275            dispi_set_id:
36694 9275           52                           push dx
36695 9276           50                           push ax
36696 9277           BA                   01CE    mov dx, # 0x01CE
36697 927A           B8                   0000    mov ax, # 0x0
36698 927D           EF                           out dx, ax
36699 927E           58                           pop ax
36700 927F           BA                   01CF    mov dx, # 0x01CF
36701 9282           EF                           out dx, ax
36702 9283           5A                           pop dx
36703 9284           C3                           ret
36704                                           ! 7488 endasm
36705                                           !BCC_ENDASM
36706                                           ! 7489 static void dispi_set_xres(xres)
36707                                           ! 7490   Bit16u xres;
36708                                           
36709                       00009285            _dispi_set_xres:
36710                                           !BCC_EOS
36711                                           ! 7491 {
36712                                           ! 7492 #asm
36713                                           !BCC_ASM
36714                       00000002            _dispi_set_xres.xres	set	2
36715 9285           55                           push bp
36716 9286           89E5                         mov bp, sp
36717 9288           50                           push ax
36718 9289           52                           push dx
36719 928A           BA                   01CE    mov dx, # 0x01CE
36720 928D           B8                   0001    mov ax, # 0x1
36721 9290           EF                           out dx, ax
36722 9291           BA                   01CF    mov dx, # 0x01CF
36723 9294           8B46         04              mov ax, 4[bp] ; xres
36724 9297           EF                           out dx, ax
36725 9298           5A                           pop dx
36726 9299           58                           pop ax
36727 929A           5D                           pop bp
36728                                           ! 7506 endasm
36729                                           !BCC_ENDASM
36730                                           ! 7507 }
36731 929B           C3                         ret
36732                                           ! 7508 static void dispi_set_yres(yres)
36733                                           ! 7509   Bit16u yres;
36734                       0000929C            _dispi_set_yres:
36735                                           !BCC_EOS
36736                                           ! 7510 {
36737                                           ! 7511   outw(0x01CE,0x2);
36738 929C           55                         push	bp
36739 929D           89E5                       mov	bp,sp
36740                                           ! Debug: list int = const 2 (used reg = )
36741 929F           B8                   0002  mov	ax,*2
36742 92A2           50                         push	ax
36743                                           ! Debug: list int = const $1CE (used reg = )
36744 92A3           B8                   01CE  mov	ax,#$1CE
36745 92A6           50                         push	ax
36746                                           ! Debug: func () void = outw+0 (used reg = )
36747 92A7           E8         EB47            call	_outw
36748 92AA           89EC                       mov	sp,bp
36749                                           !BCC_EOS
36750                                           ! 7512   outw(0x01CF,yres);
36751                                           ! Debug: list unsigned short yres = [S+2+2] (used reg = )
36752 92AC           FF76         04            push	4[bp]
36753                                           ! Debug: list int = const $1CF (used reg = )
36754 92AF           B8                   01CF  mov	ax,#$1CF
36755 92B2           50                         push	ax
36756                                           ! Debug: func () void = outw+0 (used reg = )
36757 92B3           E8         EB3B            call	_outw
36758 92B6           89EC                       mov	sp,bp
36759                                           !BCC_EOS
36760                                           ! 7513 }
36761 92B8           5D                         pop	bp
36762 92B9           C3                         ret
36763                                           ! 7514 static void
36764                                           ! 7514  dispi_set_bpp(bpp)
36765                                           ! 7515   Bit16u bpp;
36766                       000092BA            _dispi_set_bpp:
36767                                           !BCC_EOS
36768                                           ! 7516 {
36769                                           ! 7517   outw(0x01CE,0x3);
36770 92BA           55                         push	bp
36771 92BB           89E5                       mov	bp,sp
36772                                           ! Debug: list int = const 3 (used reg = )
36773 92BD           B8                   0003  mov	ax,*3
36774 92C0           50                         push	ax
36775                                           ! Debug: list int = const $1CE (used reg = )
36776 92C1           B8                   01CE  mov	ax,#$1CE
36777 92C4           50                         push	ax
36778                                           ! Debug: func () void = outw+0 (used reg = )
36779 92C5           E8         EB29            call	_outw
36780 92C8           89EC                       mov	sp,bp
36781                                           !BCC_EOS
36782                                           ! 7518   outw(0x01CF,bpp);
36783                                           ! Debug: list unsigned short bpp = [S+2+2] (used reg = )
36784 92CA           FF76         04            push	4[bp]
36785                                           ! Debug: list int = const $1CF (used reg = )
36786 92CD           B8                   01CF  mov	ax,#$1CF
36787 92D0           50                         push	ax
36788                                           ! Debug: func () void = outw+0 (used reg = )
36789 92D1           E8         EB1D            call	_outw
36790 92D4           89EC                       mov	sp,bp
36791                                           !BCC_EOS
36792                                           ! 7519 }
36793 92D6           5D                         pop	bp
36794 92D7           C3                         ret
36795                                           ! 7520 #asm
36796                                           !BCC_ASM
36797                       00000002            _dispi_set_bpp.bpp	set	2
36798                                           ; AL = bits per pixel / AH = bytes per pixel
36799                       000092D8            dispi_get_bpp:
36800 92D8           52                           push dx
36801 92D9           BA                   01CE    mov dx, # 0x01CE
36802 92DC           B8                   0003    mov ax, # 0x3
36803 92DF           EF                           out dx, ax
36804 92E0           BA                   01CF    mov dx, # 0x01CF
36805 92E3           ED                           in ax, dx
36806 92E4           88C4                         mov ah, al
36807 92E6           C0EC                   03    shr ah, 3
36808 92E9           A8                     07    test al, #0x07
36809 92EB           74           02              jz get_bpp_noinc
36810 92ED           FEC4                         inc ah
36811                       000092EF            get_bpp_noinc:
36812 92EF           5A                           pop dx
36813 92F0           C3                           ret
36814                                           ; get display capabilities
36815                       000092F1            _dispi_get_max_xres:
36816 92F1           52                           push dx
36817 92F2           53                           push bx
36818 92F3           E8         004F              call dispi_get_enable
36819 92F6           89C3                         mov bx, ax
36820 92F8           0D                   0002    or ax, # 0x02
36821 92FB           E8         0037              call _dispi_set_enable
36822 92FE           BA                   01CE    mov dx, # 0x01CE
36823 9301           B8                   0001    mov ax, # 0x1
36824 9304           EF                           out dx, ax
36825 9305           BA                   01CF    mov dx, # 0x01CF
36826 9308           ED                           in ax, dx
36827 9309           50                           push ax
36828 930A           89D8                         mov ax, bx
36829 930C           E8         0026              call _dispi_set_enable
36830 930F           58                           pop ax
36831 9310           5B                           pop bx
36832 9311           5A                           pop dx
36833 9312           C3                           ret
36834                       00009313            _dispi_get_max_bpp:
36835 9313           52                           push dx
36836 9314           53                           push bx
36837 9315           E8         002D              call dispi_get_enable
36838 9318           89C3                         mov bx, ax
36839 931A           0D                   0002    or ax, # 0x02
36840 931D           E8         0015              call _dispi_set_enable
36841 9320           BA                   01CE    mov dx, # 0x01CE
36842 9323           B8                   0003    mov ax, # 0x3
36843 9326           EF                           out dx, ax
36844 9327           BA                   01CF    mov dx, # 0x01CF
36845 932A           ED                           in ax, dx
36846 932B           50                           push ax
36847 932C           89D8                         mov ax, bx
36848 932E           E8         0004              call _dispi_set_enable
36849 9331           58                           pop ax
36850 9332           5B                           pop bx
36851 9333           5A                           pop dx
36852 9334           C3                           ret
36853                       00009335            _dispi_set_enable:
36854 9335           52                           push dx
36855 9336           50                           push ax
36856 9337           BA                   01CE    mov dx, # 0x01CE
36857 933A           B8                   0004    mov ax, # 0x4
36858 933D           EF                           out dx, ax
36859 933E           58                           pop ax
36860 933F           BA                   01CF    mov dx, # 0x01CF
36861 9342           EF                           out dx, ax
36862 9343           5A                           pop dx
36863 9344           C3                           ret
36864                       00009345            dispi_get_enable:
36865 9345           52                           push dx
36866 9346           BA                   01CE    mov dx, # 0x01CE
36867 9349           B8                   0004    mov ax, # 0x4
36868 934C           EF                           out dx, ax
36869 934D           BA                   01CF    mov dx, # 0x01CF
36870 9350           ED                           in ax, dx
36871 9351           5A                           pop dx
36872 9352           C3                           ret
36873                       00009353            _dispi_set_bank:
36874 9353           52                           push dx
36875 9354           50                           push ax
36876 9355           BA                   01CE    mov dx, # 0x01CE
36877 9358           B8                   0005    mov ax, # 0x5
36878 935B           EF                           out dx, ax
36879 935C           58                           pop ax
36880 935D           BA                   01CF    mov dx, # 0x01CF
36881 9360           EF                           out dx, ax
36882 9361           5A                           pop dx
36883 9362           C3                           ret
36884                       00009363            dispi_get_bank:
36885 9363           52                           push dx
36886 9364           BA                   01CE    mov dx, # 0x01CE
36887 9367           B8                   0005    mov ax, # 0x5
36888 936A           EF                           out dx, ax
36889 936B           BA                   01CF    mov dx, # 0x01CF
36890 936E           ED                           in ax, dx
36891 936F           5A                           pop dx
36892 9370           C3                           ret
36893                                           ! 7616 endasm
36894                                           !BCC_ENDASM
36895                                           ! 7617 static void dispi_set_bank_farcall()
36896                                           ! 7618 {
36897                       00009371            _dispi_set_bank_farcall:
36898                                           ! 7619 #asm
36899                                           !BCC_ASM
36900 9371           81FB                 0100    cmp bx,#0x0100
36901 9375           74           1E              je dispi_set_bank_farcall_get
36902 9377           09DB                         or bx,bx
36903 9379           75           28              jnz dispi_set_bank_farcall_error
36904 937B           89D0                         mov ax,dx
36905 937D           52                           push dx
36906 937E           50                           push ax
36907 937F           B8                   0005    mov ax,# 0x5
36908 9382           BA                   01CE    mov dx,# 0x01CE
36909 9385           EF                           out dx,ax
36910 9386           58                           pop ax
36911 9387           BA                   01CF    mov dx,# 0x01CF
36912 938A           EF                           out dx,ax
36913 938B           ED                           in ax,dx
36914 938C           5A                           pop dx
36915 938D           39C2                         cmp dx,ax
36916 938F           75           12              jne dispi_set_bank_farcall_error
36917 9391           B8                   004F    mov ax, #0x004f
36918 9394           CB                           retf
36919                       00009395            dispi_set_bank_farcall_get:
36920 9395           B8                   0005    mov ax,# 0x5
36921 9398           BA                   01CE    mov dx,# 0x01CE
36922 939B           EF                           out dx,ax
36923 939C           BA                   01CF    mov dx,# 0x01CF
36924 939F           ED                           in ax,dx
36925 93A0           89C2                         mov dx,ax
36926 93A2           CB                           retf
36927                       000093A3            dispi_set_bank_farcall_error:
36928 93A3           B8                   014F    mov ax,#0x014F
36929 93A6           CB                           retf
36930                                           ! 7650 endasm
36931                                           !BCC_ENDASM
36932                                           ! 7651 }
36933 93A7           C3                         ret
36934                                           ! 7652 #asm
36935                                           !BCC_ASM
36936                       000093A8            dispi_set_x_offset:
36937 93A8           52                           push dx
36938 93A9           50                           push ax
36939 93AA           BA                   01CE    mov dx, # 0x01CE
36940 93AD           B8                   0008    mov ax, # 0x8
36941 93B0           EF                           out dx, ax
36942 93B1           58                           pop ax
36943 93B2           BA                   01CF    mov dx, # 0x01CF
36944 93B5           EF                           out dx, ax
36945 93B6           5A                           pop dx
36946 93B7           C3                           ret
36947                       000093B8            dispi_get_x_offset:
36948 93B8           52                           push dx
36949 93B9           BA                   01CE    mov dx, # 0x01CE
36950 93BC           B8                   0008    mov ax, # 0x8
36951 93BF           EF                           out dx, ax
36952 93C0           BA                   01CF    mov dx, # 0x01CF
36953 93C3           ED                           in ax, dx
36954 93C4           5A                           pop dx
36955 93C5           C3                           ret
36956                       000093C6            dispi_set_y_offset:
36957 93C6           52                           push dx
36958 93C7           50                           push ax
36959 93C8           BA                   01CE    mov dx, # 0x01CE
36960 93CB           B8                   0009    mov ax, # 0x9
36961 93CE           EF                           out dx, ax
36962 93CF           58                           pop ax
36963 93D0           BA                   01CF    mov dx, # 0x01CF
36964 93D3           EF                           out dx, ax
36965 93D4           5A                           pop dx
36966 93D5           C3                           ret
36967                       000093D6            dispi_get_y_offset:
36968 93D6           52                           push dx
36969 93D7           BA                   01CE    mov dx, # 0x01CE
36970 93DA           B8                   0009    mov ax, # 0x9
36971 93DD           EF                           out dx, ax
36972 93DE           BA                   01CF    mov dx, # 0x01CF
36973 93E1           ED                           in ax, dx
36974 93E2           5A                           pop dx
36975 93E3           C3                           ret
36976                       000093E4            vga_set_virt_width:
36977 93E4           50                           push ax
36978 93E5           53                           push bx
36979 93E6           52                           push dx
36980 93E7           89C3                         mov bx, ax
36981 93E9           E8         FEEC              call dispi_get_bpp
36982 93EC           3C                     04    cmp al, #0x04
36983 93EE           77           02              ja set_width_svga
36984 93F0           D1EB                         shr bx, #1
36985                       000093F2            set_width_svga:
36986 93F2           C1EB                   03    shr bx, #3
36987 93F5           BA                   03D4    mov dx, # 0x3d4
36988 93F8           88DC                         mov ah, bl
36989 93FA           B0                     13    mov al, #0x13
36990 93FC           EF                           out dx, ax
36991 93FD           5A                           pop dx
36992 93FE           5B                           pop bx
36993 93FF           58                           pop ax
36994 9400           C3                           ret
36995                       00009401            dispi_set_virt_width:
36996 9401           E8         FFE0              call vga_set_virt_width
36997 9404           52                           push dx
36998 9405           50                           push ax
36999 9406           BA                   01CE    mov dx, # 0x01CE
37000 9409           B8                   0006    mov ax, # 0x6
37001 940C           EF                           out dx, ax
37002 940D           58                           pop ax
37003 940E           BA                   01CF    mov dx, # 0x01CF
37004 9411           EF                           out dx, ax
37005 9412           5A                           pop dx
37006 9413           C3                           ret
37007                       00009414            dispi_get_virt_width:
37008 9414           52                           push dx
37009 9415           BA                   01CE    mov dx, # 0x01CE
37010 9418           B8                   0006    mov ax, # 0x6
37011 941B           EF                           out dx, ax
37012 941C           BA                   01CF    mov dx, # 0x01CF
37013 941F           ED                           in ax, dx
37014 9420           5A                           pop dx
37015 9421           C3                           ret
37016                       00009422            dispi_get_virt_height:
37017 9422           52                           push dx
37018 9423           BA                   01CE    mov dx, # 0x01CE
37019 9426           B8                   0007    mov ax, # 0x7
37020 9429           EF                           out dx, ax
37021 942A           BA                   01CF    mov dx, # 0x01CF
37022 942D           ED                           in ax, dx
37023 942E           5A                           pop dx
37024 942F           C3                           ret
37025                       00009430            _vga_compat_setup:
37026 9430           50                           push ax
37027 9431           52                           push dx
37028                                             ; set CRT X resolution
37029 9432           BA                   01CE    mov dx, # 0x01CE
37030 9435           B8                   0001    mov ax, # 0x1
37031 9438           EF                           out dx, ax
37032 9439           BA                   01CF    mov dx, # 0x01CF
37033 943C           ED                           in ax, dx
37034 943D           50                           push ax
37035 943E           BA                   03D4    mov dx, # 0x3d4
37036 9441           B8                   0011    mov ax, #0x0011
37037 9444           EF                           out dx, ax
37038 9445           58                           pop ax
37039 9446           50                           push ax
37040 9447           C1E8                   03    shr ax, #3
37041 944A           48                           dec ax
37042 944B           88C4                         mov ah, al
37043 944D           B0                     01    mov al, #0x01
37044 944F           EF                           out dx, ax
37045 9450           58                           pop ax
37046 9451           E8         FF90              call vga_set_virt_width
37047                                             ; set CRT Y resolution
37048 9454           BA                   01CE    mov dx, # 0x01CE
37049 9457           B8                   0002    mov ax, # 0x2
37050 945A           EF                           out dx, ax
37051 945B           BA                   01CF    mov dx, # 0x01CF
37052 945E           ED                           in ax, dx
37053 945F           48                           dec ax
37054 9460           50                           push ax
37055 9461           BA                   03D4    mov dx, # 0x3d4
37056 9464           88C4                         mov ah, al
37057 9466           B0                     12    mov al, #0x12
37058 9468           EF                           out dx, ax
37059 9469           58                           pop ax
37060 946A           B0                     07    mov al, #0x07
37061 946C           EE                           out dx, al
37062 946D           42                           inc dx
37063 946E           EC                           in al, dx
37064 946F           24                     BD    and al, #0xbd
37065 9471           F6C4                   01    test ah, #0x01
37066 9474           74           02              jz bit8_clear
37067 9476           0C                     02    or al, #0x02
37068                       00009478            bit8_clear:
37069 9478           F6C4                   02    test ah, #0x02
37070 947B           74           02              jz bit9_clear
37071 947D           0C                     40    or al, #0x40
37072                       0000947F            bit9_clear:
37073 947F           EE                           out dx, al
37074                                             ; other settings
37075 9480           BA                   03D4    mov dx, # 0x3d4
37076 9483           B8                   0009    mov ax, #0x0009
37077 9486           EF                           out dx, ax
37078 9487           B0                     17    mov al, #0x17
37079 9489           EE                           out dx, al
37080 948A           BA                   03D5    mov dx, # 0x3d5
37081 948D           EC                           in al, dx
37082 948E           0C                     03    or al, #0x03
37083 9490           EE                           out dx, al
37084 9491           BA                   03DA    mov dx, # 0x3da
37085 9494           EC                           in al, dx
37086 9495           BA                   03C0    mov dx, # 0x3c0
37087 9498           B0                     10    mov al, #0x10
37088 949A           EE                           out dx, al
37089 949B           BA                   03C1    mov dx, # 0x3c1
37090 949E           EC                           in al, dx
37091 949F           0C                     01    or al, #0x01
37092 94A1           BA                   03C0    mov dx, # 0x3c0
37093 94A4           EE                           out dx, al
37094 94A5           B0                     20    mov al, #0x20
37095 94A7           EE                           out dx, al
37096 94A8           BA                   03CE    mov dx, # 0x3ce
37097 94AB           B8                   0506    mov ax, #0x0506
37098 94AE           EF                           out dx, ax
37099 94AF           BA                   03C4    mov dx, # 0x3c4
37100 94B2           B8                   0F02    mov ax, #0x0f02
37101 94B5           EF                           out dx, ax
37102                                             ; settings for >= 8bpp
37103 94B6           BA                   01CE    mov dx, # 0x01CE
37104 94B9           B8                   0003    mov ax, # 0x3
37105 94BC           EF                           out dx, ax
37106 94BD           BA                   01CF    mov dx, # 0x01CF
37107 94C0           ED                           in ax, dx
37108 94C1           3C                     08    cmp al, #0x08
37109 94C3           72           40              jb vga_compat_end
37110 94C5           BA                   03D4    mov dx, # 0x3d4
37111 94C8           B0                     14    mov al, #0x14
37112 94CA           EE                           out dx, al
37113 94CB           BA                   03D5    mov dx, # 0x3d5
37114 94CE           EC                           in al, dx
37115 94CF           0C                     40    or al, #0x40
37116 94D1           EE                           out dx, al
37117 94D2           BA                   03DA    mov dx, # 0x3da
37118 94D5           EC                           in al, dx
37119 94D6           BA                   03C0    mov dx, # 0x3c0
37120 94D9           B0                     10    mov al, #0x10
37121 94DB           EE                           out dx, al
37122 94DC           BA                   03C1    mov dx, # 0x3c1
37123 94DF           EC                           in al, dx
37124 94E0           0C                     40    or al, #0x40
37125 94E2           BA                   03C0    mov dx, # 0x3c0
37126 94E5           EE                           out dx, al
37127 94E6           B0                     20    mov al, #0x20
37128 94E8           EE                           out dx, al
37129 94E9           BA                   03C4    mov dx, # 0x3c4
37130 94EC           B0                     04    mov al, #0x04
37131 94EE           EE                           out dx, al
37132 94EF           BA                   03C5    mov dx, # 0x3c5
37133 94F2           EC                           in al, dx
37134 94F3           0C                     08    or al, #0x08
37135 94F5           EE                           out dx, al
37136 94F6           BA                   03CE    mov dx, # 0x3ce
37137 94F9           B0                     05    mov al, #0x05
37138 94FB           EE                           out dx, al
37139 94FC           BA                   03CF    mov dx, # 0x3cf
37140 94FF           EC                           in al, dx
37141 9500           24                     9F    and al, #0x9f
37142 9502           0C                     40    or al, #0x40
37143 9504           EE                           out dx, al
37144                       00009505            vga_compat_end:
37145 9505           5A                           pop dx
37146 9506           58                           pop ax
37147                                           ! 7864 endasm
37148                                           !BCC_ENDASM
37149                                           ! 7865 static ModeInfoListItem* mode_info_find_mode(mode, using_lfb)
37150                                           ! 7866   Bit16u mode; Boolean using_lfb;
37151                       00009507            _mode_info_find_mode:
37152                                           !BCC_EOS
37153                                           !BCC_EOS
37154                                           ! 7867 {
37155                                           ! 7868   ModeInfoListItem *cur_info=&mode_info_list;
37156 9507           55                         push	bp
37157 9508           89E5                       mov	bp,sp
37158 950A           4C                         dec	sp
37159 950B           4C                         dec	sp
37160                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37161 950C           BB                   7FB7  mov	bx,#_mode_info_list
37162 950F           895E         FE            mov	-2[bp],bx
37163                                           !BCC_EOS
37164                                           ! 7869   while (cur_info->mode != 0xFFFF)
37165                                           ! 7870   {
37166 9512           EB           43            jmp .2CC
37167                       00009514            .2CD:
37168                                           ! 7871     if (cur_info->mode == mode)
37169 9514           8B5E         FE            mov	bx,-2[bp]
37170                                           ! Debug: logeq unsigned short mode = [S+4+2] to unsigned short = [bx+0] (used reg = )
37171 9517           8B1F                       mov	bx,[bx]
37172 9519           3B5E         04            cmp	bx,4[bp]
37173 951C           75           30            jne 	.2CE
37174                       0000951E            .2CF:
37175                                           ! 7872     {
37176                                           ! 7873       if (!using_lfb)
37177 951E           8B46         06            mov	ax,6[bp]
37178 9521           85C0                       test	ax,ax
37179 9523           75           09            jne 	.2D0
37180                       00009525            .2D1:
37181                                           ! 7874       {
37182                                           ! 7875         return cur_info;
37183 9525           8B46         FE            mov	ax,-2[bp]
37184 9528           89EC                       mov	sp,bp
37185 952A           5D                         pop	bp
37186 952B           C3                         ret
37187                                           !BCC_EOS
37188                                           ! 7876       }
37189                                           ! 7877       else if (cur_info->info.ModeAttributes & 0x0080)
37190 952C           EB           1E            jmp .2D2
37191                       0000952E            .2D0:
37192 952E           8B5E         FE            mov	bx,-2[bp]
37193                                           ! Debug: and int = const $80 to unsigned short = [bx+2] (used reg = )
37194 9531           8A47         02            mov	al,2[bx]
37195 9534           24                     80  and	al,#$80
37196 9536           84C0                       test	al,al
37197 9538           74           09            je  	.2D3
37198                       0000953A            .2D4:
37199                                           ! 7878       {
37200                                           ! 7879         return cur_info;
37201 953A           8B46         FE            mov	ax,-2[bp]
37202 953D           89EC                       mov	sp,bp
37203 953F           5D                         pop	bp
37204 9540           C3                         ret
37205                                           !BCC_EOS
37206                                           ! 7880       }
37207                                           ! 7881       else
37208                                           ! 7882       {
37209 9541           EB           09            jmp .2D5
37210                       00009543            .2D3:
37211                                           ! 7883         cur_info++;
37212                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37213 9543           8B5E         FE            mov	bx,-2[bp]
37214 9546           83C3                   44  add	bx,*$44
37215 9549           895E         FE            mov	-2[bp],bx
37216                                           !BCC_EOS
37217                                           ! 7884       }
37218                                           ! 7885     }
37219                       0000954C            .2D5:
37220                       0000954C            .2D2:
37221                                           ! 7886     else
37222                                           ! 7887     {
37223 954C           EB           09            jmp .2D6
37224                       0000954E            .2CE:
37225                                           ! 7888       cur_info++;
37226                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+4-4] (used reg = )
37227 954E           8B5E         FE            mov	bx,-2[bp]
37228 9551           83C3                   44  add	bx,*$44
37229 9554           895E         FE            mov	-2[bp],bx
37230                                           !BCC_EOS
37231                                           ! 7889     }
37232                                           ! 7890   }
37233                       00009557            .2D6:
37234                                           ! 7891   return 0;
37235                       00009557            .2CC:
37236 9557           8B5E         FE            mov	bx,-2[bp]
37237                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37238 955A           8B1F                       mov	bx,[bx]
37239 955C           81FB                 FFFF  cmp	bx,#$FFFF
37240 9560           75           B2            jne	.2CD
37241                       00009562            .2D7:
37242                       00009562            .2CB:
37243 9562           31C0                       xor	ax,ax
37244 9564           89EC                       mov	sp,bp
37245 9566           5D                         pop	bp
37246 9567           C3                         ret
37247                                           !BCC_EOS
37248                                           ! 7892 }
37249                                           ! 7893 #asm
37250                                           !BCC_ASM
37251                       00000004            _mode_info_find_mode.using_lfb	set	4
37252                       00000002            _mode_info_find_mode.mode	set	2
37253                                           ; Has 1 display - Returns true if 1 display detected
37254                       00009568            _vbe_has_vbe_display:
37255 9568           1E                           push ds
37256 9569           53                           push bx
37257 956A           B8                   0040    mov ax, # 0x40
37258 956D           8ED8                         mov ds, ax
37259 956F           BB                   00B9    mov bx, # 0xB9
37260 9572           8A07                         mov al, [bx]
37261 9574           24                     01    and al, #0x01
37262 9576           30E4                         xor ah, ah
37263 9578           5B                           pop bx
37264 9579           1F                           pop ds
37265 957A           C3                           ret
37266                                           ; 1 Init - Initialise the Vesa Bios Extension Code
37267                                           ; This function does a sanity check on the host side display code interface.
37268                       0000957B            vbe_init:
37269 957B           B8                   B0C0    mov ax, # 0xB0C0
37270 957E           E8         FCF4              call dispi_set_id
37271 9581           E8         FCE3              call dispi_get_id
37272 9584           3D                   B0C0    cmp ax, # 0xB0C0
37273 9587           75           16              jne no_vbe_interface
37274 9589           1E                           push ds
37275 958A           53                           push bx
37276 958B           B8                   0040    mov ax, # 0x40
37277 958E           8ED8                         mov ds, ax
37278 9590           BB                   00B9    mov bx, # 0xB9
37279 9593           B0                     01    mov al, #0x01
37280 9595           8807                         mov [bx], al
37281 9597           5B                           pop bx
37282 9598           1F                           pop ds
37283 9599           B8                   B0C5    mov ax, # 0xB0C5
37284 959C           E8         FCD6              call dispi_set_id
37285                       0000959F            no_vbe_interface:
37286 959F           BB                   9125    mov bx, #msg_vbe_init
37287 95A2           53                           push bx
37288 95A3           E8         E87A              call _printf
37289 95A6           44                           inc sp
37290 95A7           44                           inc sp
37291 95A8           C3                           ret
37292                                           ; 1 Display Info - Display information on screen about the 1
37293                       000095A9            vbe_display_info:
37294 95A9           E8         FFBC              call _vbe_has_vbe_display
37295 95AC           85C0                         test ax, ax
37296 95AE           74           0B              jz no_vbe_flag
37297 95B0           B8                   C000    mov ax, #0xc000
37298 95B3           8ED8                         mov ds, ax
37299 95B5           BE                   90DB    mov si, #_vbebios_info_string
37300 95B8           E9         A088              jmp _display_string
37301                       000095BB            no_vbe_flag:
37302 95BB           B8                   C000    mov ax, #0xc000
37303 95BE           8ED8                         mov ds, ax
37304 95C0           BE                   9101    mov si, #_no_vbebios_info_string
37305 95C3           E9         A07D              jmp _display_string
37306                                           ; helper function for memory size calculation
37307                       000095C6            lmulul:
37308 95C6     66    25               0000FFFF    and eax, #0x0000FFFF
37309 95CC     66    C1E3                   10    shl ebx, #16
37310 95D0     66    09D8                         or eax, ebx
37311 95D3           36                           SEG SS
37312 95D4     66    F725                         mul eax, dword ptr [di]
37313 95D7     66    89C3                         mov ebx, eax
37314 95DA     66    C1EB                   10    shr ebx, #16
37315 95DE           C3                           ret
37316                                           ! 7957 endasm
37317                                           !BCC_ENDASM
37318                                           ! 7958 void vbe_biosfn_return_controller_information(AX, ES, DI)
37319                                           ! Register BX used in function mode_info_find_mode
37320                                           ! 7959 Bit16u *AX;Bit16u ES;Bit16u DI;
37321                                           export	_vbe_biosfn_return_controller_information
37322                       000095DF            _vbe_biosfn_return_controller_information:
37323                                           !BCC_EOS
37324                                           !BCC_EOS
37325                                           !BCC_EOS
37326                                           ! 7960 {
37327                                           ! 7961         Bit16u ss=get_SS();
37328 95DF           55                         push	bp
37329 95E0           89E5                       mov	bp,sp
37330 95E2           4C                         dec	sp
37331 95E3           4C                         dec	sp
37332                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37333 95E4           E8         E81A            call	_get_SS
37334                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
37335 95E7           8946         FE            mov	-2[bp],ax
37336                                           !BCC_EOS
37337                                           ! 7962         VbeInfoBlock vbe_info_block;
37338                                           !BCC_EOS
37339                                           ! 7963         Bit16u status;
37340                                           !BCC_EOS
37341                                           ! 7964         Bit16u result;
37342                                           !BCC_EOS
37343                                           ! 7965         Bit16u vbe2_info;
37344                                           !BCC_EOS
37345                                           ! 7966         Bit16u cur_mode=0;
37346 95EA           81C4                 FDF8  add	sp,#-$208
37347                                           ! Debug: eq int = const 0 to unsigned short cur_mode = [S+$20C-$20C] (used reg = )
37348 95EE           31C0                       xor	ax,ax
37349 95F0           8986       FDF6            mov	-$20A[bp],ax
37350                                           !BCC_EOS
37351                                           ! 7967         Bit16u cur_ptr=34;
37352 95F4           4C                         dec	sp
37353 95F5           4C                         dec	sp
37354                                           ! Debug: eq int = const $22 to unsigned short cur_ptr = [S+$20E-$20E] (used reg = )
37355 95F6           B8                   0022  mov	ax,*$22
37356 95F9           8986       FDF4            mov	-$20C[bp],ax
37357                                           !BCC_EOS
37358                                           ! 7968         Bit16u size_64k;
37359                                           !BCC_EOS
37360                                           ! 7969         ModeInfoListItem *cur_info=&mode_info_list;
37361 95FD           83C4                   FC  add	sp,*-4
37362                                           ! Debug: eq * [$3E] struct ModeInfoListItem = mode_info_list+0 to * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37363 9600           BB                   7FB7  mov	bx,#_mode_info_list
37364 9603           899E       FDF0            mov	-$210[bp],bx
37365                                           !BCC_EOS
37366                                           ! 7970         status = read_word(ss, AX);
37367                                           ! Debug: list * unsigned short AX = [S+$212+2] (used reg = )
37368 9607           FF76         04            push	4[bp]
37369                                           ! Debug: list unsigned short ss = [S+$214-4] (used reg = )
37370 960A           FF76         FE            push	-2[bp]
37371                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
37372 960D           E8         E778            call	_read_word
37373 9610           83C4                   04  add	sp,*4
37374                                           ! Debug: eq unsigned short = ax+0 to unsigned short status = [S+$212-$206] (used reg = )
37375 9613           8986       FDFC            mov	-$204[bp],ax
37376                                           !BCC_EOS
37377                                           ! 7971         printf("VBE vbe_biosfn_return_vbe_info ES%x DI%x AX%x\n",ES,DI,status);
37378                                           ! Debug: list unsigned short status = [S+$212-$206] (used reg = )
37379 9617           FFB6       FDFC            push	-$204[bp]
37380                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37381 961B           FF76         08            push	8[bp]
37382                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37383 961E           FF76         06            push	6[bp]
37384                                           ! Debug: list * char = .2D8+0 (used reg = )
37385 9621           BB                   A0C4  mov	bx,#.2D8
37386 9624           53                         push	bx
37387                                           ! Debug: func () void = printf+0 (used reg = )
37388 9625           E8         E7F8            call	_printf
37389 9628           83C4                   08  add	sp,*8
37390                                           !BCC_EOS
37391                                           ! 7972         vbe2_info = 0;
37392                                           ! Debug: eq int = const 0 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37393 962B           31C0                       xor	ax,ax
37394 962D           8986       FDF8            mov	-$208[bp],ax
37395                                           !BCC_EOS
37396                                           ! 7973         memcpyb(ss, &vbe_info_block, ES, DI, sizeof(vbe_info_block));
37397                                           ! Debug: list int = const $200 (used reg = )
37398 9631           B8                   0200  mov	ax,#$200
37399 9634           50                         push	ax
37400                                           ! Debug: list unsigned short DI = [S+$214+6] (used reg = )
37401 9635           FF76         08            push	8[bp]
37402                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37403 9638           FF76         06            push	6[bp]
37404                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$218-$204 (used reg = )
37405 963B           8D9E       FDFE            lea	bx,-$202[bp]
37406 963F           53                         push	bx
37407                                           ! Debug: list unsigned short ss = [S+$21A-4] (used reg = )
37408 9640           FF76         FE            push	-2[bp]
37409                                           ! Debug: func () void = memcpyb+0 (used reg = )
37410 9643           E8         E6CF            call	_memcpyb
37411 9646           83C4                   0A  add	sp,*$A
37412                                           !BCC_EOS
37413                                           ! 7974         if (((vbe_info_block.VbeSignature[0] == 'V') &&
37414                                           ! 7975              (vbe_info_block.VbeSignature[1] == 'B') &&
37415                                           ! 7976              (vbe_info_block.VbeSignature[2] == 'E') &&
37416                                           ! 7977              (vbe_info_block.VbeSignature[3] == '2')) ||
37417                                           ! 7978             ((vbe_info_block.VbeSignature[0] == 'V') &&
37418                                           ! 7979              (vbe_info_block.VbeSignature[1] == 'E') &&
37419                                           ! 7980              (vbe_info_block.VbeSignature[2] == 'S') &&
37420                                           ! 7981              (vbe_info_block.VbeSignature[3] == 'A')) )
37421                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37422 9649           8A86       FDFE            mov	al,-$202[bp]
37423 964D           3C                     56  cmp	al,*$56
37424 964F           75           18            jne 	.2DB
37425                       00009651            .2DE:
37426                                           ! Debug: logeq int = const $42 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37427 9651           8A86       FDFF            mov	al,-$201[bp]
37428 9655           3C                     42  cmp	al,*$42
37429 9657           75           10            jne 	.2DB
37430                       00009659            .2DD:
37431                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37432 9659           8A86       FE00            mov	al,-$200[bp]
37433 965D           3C                     45  cmp	al,*$45
37434 965F           75           08            jne 	.2DB
37435                       00009661            .2DC:
37436                                           ! Debug: logeq int = const $32 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37437 9661           8A86       FE01            mov	al,-$1FF[bp]
37438 9665           3C                     32  cmp	al,*$32
37439 9667           74           20            je  	.2DA
37440                       00009669            .2DB:
37441                                           ! Debug: logeq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37442 9669           8A86       FDFE            mov	al,-$202[bp]
37443 966D           3C                     56  cmp	al,*$56
37444 966F           75           28            jne 	.2D9
37445                       00009671            .2E1:
37446                                           ! Debug: logeq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37447 9671           8A86       FDFF            mov	al,-$201[bp]
37448 9675           3C                     45  cmp	al,*$45
37449 9677           75           20            jne 	.2D9
37450                       00009679            .2E0:
37451                                           ! Debug: logeq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37452 9679           8A86       FE00            mov	al,-$200[bp]
37453 967D           3C                     53  cmp	al,*$53
37454 967F           75           18            jne 	.2D9
37455                       00009681            .2DF:
37456                                           ! Debug: logeq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37457 9681           8A86       FE01            mov	al,-$1FF[bp]
37458 9685           3C                     41  cmp	al,*$41
37459 9687           75           10            jne 	.2D9
37460                       00009689            .2DA:
37461                                           ! 7982         {
37462                                           ! 7983                 vbe2_info = 1;
37463                                           ! Debug: eq int = const 1 to unsigned short vbe2_info = [S+$212-$20A] (used reg = )
37464 9689           B8                   0001  mov	ax,*1
37465 968C           8986       FDF8            mov	-$208[bp],ax
37466                                           !BCC_EOS
37467                                           ! 7984                 printf("VBE correct VESA/VBE2 signature found\n");
37468                                           ! Debug: list * char = .2E2+0 (used reg = )
37469 9690           BB                   A09D  mov	bx,#.2E2
37470 9693           53                         push	bx
37471                                           ! Debug: func () void = printf+0 (used reg = )
37472 9694           E8         E789            call	_printf
37473 9697           44                         inc	sp
37474 9698           44                         inc	sp
37475                                           !BCC_EOS
37476                                           ! 7985         }
37477                                           ! 7986         vbe_info_block.VbeSignature[0] = 'V';
37478                       00009699            .2D9:
37479                                           ! Debug: eq int = const $56 to unsigned char vbe_info_block = [S+$212-$204] (used reg = )
37480 9699           B0                     56  mov	al,*$56
37481 969B           8886       FDFE            mov	-$202[bp],al
37482                                           !BCC_EOS
37483                                           ! 7987         vbe_info_block.VbeSignature[1] = 'E';
37484                                           ! Debug: eq int = const $45 to unsigned char vbe_info_block = [S+$212-$203] (used reg = )
37485 969F           B0                     45  mov	al,*$45
37486 96A1           8886       FDFF            mov	-$201[bp],al
37487                                           !BCC_EOS
37488                                           ! 7988         vbe_info_block.VbeSignature[2] = 'S';
37489                                           ! Debug: eq int = const $53 to unsigned char vbe_info_block = [S+$212-$202] (used reg = )
37490 96A5           B0                     53  mov	al,*$53
37491 96A7           8886       FE00            mov	-$200[bp],al
37492                                           !BCC_EOS
37493                                           ! 7989         vbe_info_block.VbeSignature[3] = 'A';
37494                                           ! Debug: eq int = const $41 to unsigned char vbe_info_block = [S+$212-$201] (used reg = )
37495 96AB           B0                     41  mov	al,*$41
37496 96AD           8886       FE01            mov	-$1FF[bp],al
37497                                           !BCC_EOS
37498                                           ! 7990         vbe_info_block.VbeVersion = 0x0200;
37499                                           ! Debug: eq int = const $200 to unsigned short vbe_info_block = [S+$212-$200] (used reg = )
37500 96B1           B8                   0200  mov	ax,#$200
37501 96B4           8986       FE02            mov	-$1FE[bp],ax
37502                                           !BCC_EOS
37503                                           ! 7991         vbe_info_block.OemStringPtr_Seg = 0xc000;
37504                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1FC] (used reg = )
37505 96B8           B8                   C000  mov	ax,#$C000
37506 96BB           8986       FE06            mov	-$1FA[bp],ax
37507                                           !BCC_EOS
37508                                           ! 7992         vbe_info_block.OemStringPtr
37509                                           ! 7992 _Off = &vbebios_copyright;
37510                                           ! Debug: eq * char = vbebios_copyright+0 to unsigned short vbe_info_block = [S+$212-$1FE] (used reg = )
37511 96BF           BB                   902F  mov	bx,#_vbebios_copyright
37512 96C2           899E       FE04            mov	-$1FC[bp],bx
37513                                           !BCC_EOS
37514                                           ! 7993         vbe_info_block.Capabilities[0] = 0x0001;
37515                                           ! Debug: eq int = const 1 to unsigned char vbe_info_block = [S+$212-$1FA] (used reg = )
37516 96C6           B0                     01  mov	al,*1
37517 96C8           8886       FE08            mov	-$1F8[bp],al
37518                                           !BCC_EOS
37519                                           ! 7994         vbe_info_block.Capabilities[1] = 0;
37520                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F9] (used reg = )
37521 96CC           30C0                       xor	al,al
37522 96CE           8886       FE09            mov	-$1F7[bp],al
37523                                           !BCC_EOS
37524                                           ! 7995         vbe_info_block.Capabilities[2] = 0;
37525                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F8] (used reg = )
37526 96D2           30C0                       xor	al,al
37527 96D4           8886       FE0A            mov	-$1F6[bp],al
37528                                           !BCC_EOS
37529                                           ! 7996         vbe_info_block.Capabilities[3] = 0;
37530                                           ! Debug: eq int = const 0 to unsigned char vbe_info_block = [S+$212-$1F7] (used reg = )
37531 96D8           30C0                       xor	al,al
37532 96DA           8886       FE0B            mov	-$1F5[bp],al
37533                                           !BCC_EOS
37534                                           ! 7997         vbe_info_block.VideoModePtr_Seg= ES ;
37535                                           ! Debug: eq unsigned short ES = [S+$212+4] to unsigned short vbe_info_block = [S+$212-$1F4] (used reg = )
37536 96DE           8B46         06            mov	ax,6[bp]
37537 96E1           8986       FE0E            mov	-$1F2[bp],ax
37538                                           !BCC_EOS
37539                                           ! 7998         vbe_info_block.VideoModePtr_Off= DI + 34;
37540                                           ! Debug: add int = const $22 to unsigned short DI = [S+$212+6] (used reg = )
37541 96E5           8B46         08            mov	ax,8[bp]
37542                                           ! Debug: eq unsigned int = ax+$22 to unsigned short vbe_info_block = [S+$212-$1F6] (used reg = )
37543 96E8           05                   0022  add	ax,*$22
37544 96EB           8986       FE0C            mov	-$1F4[bp],ax
37545                                           !BCC_EOS
37546                                           ! 7999         outw(0x01CE, 0xa);
37547                                           ! Debug: list int = const $A (used reg = )
37548 96EF           B8                   000A  mov	ax,*$A
37549 96F2           50                         push	ax
37550                                           ! Debug: list int = const $1CE (used reg = )
37551 96F3           B8                   01CE  mov	ax,#$1CE
37552 96F6           50                         push	ax
37553                                           ! Debug: func () void = outw+0 (used reg = )
37554 96F7           E8         E6F7            call	_outw
37555 96FA           83C4                   04  add	sp,*4
37556                                           !BCC_EOS
37557                                           ! 8000         vbe_info_block.TotalMemory = inw(0x01CF);
37558                                           ! Debug: list int = const $1CF (used reg = )
37559 96FD           B8                   01CF  mov	ax,#$1CF
37560 9700           50                         push	ax
37561                                           ! Debug: func () unsigned short = inw+0 (used reg = )
37562 9701           E8         E6D2            call	_inw
37563 9704           44                         inc	sp
37564 9705           44                         inc	sp
37565                                           ! Debug: eq unsigned short = ax+0 to unsigned short vbe_info_block = [S+$212-$1F2] (used reg = )
37566 9706           8986       FE10            mov	-$1F0[bp],ax
37567                                           !BCC_EOS
37568                                           ! 8001         if (vbe2_info)
37569 970A           8B86       FDF8            mov	ax,-$208[bp]
37570 970E           85C0                       test	ax,ax
37571 9710           74           4B            je  	.2E3
37572                       00009712            .2E4:
37573                                           ! 8002         {
37574                                           ! 8003                 vbe_info_block.OemSoftwareRev = 0x0002;;
37575                                           ! Debug: eq int = const 2 to unsigned short vbe_info_block = [S+$212-$1F0] (used reg = )
37576 9712           B8                   0002  mov	ax,*2
37577 9715           8986       FE12            mov	-$1EE[bp],ax
37578                                           !BCC_EOS
37579                                           !BCC_EOS
37580                                           ! 8004                 vbe_info_block.OemVendorNamePtr_Seg = 0xc000;
37581                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1EC] (used reg = )
37582 9719           B8                   C000  mov	ax,#$C000
37583 971C           8986       FE16            mov	-$1EA[bp],ax
37584                                           !BCC_EOS
37585                                           ! 8005                 vbe_info_block.OemVendorNamePtr_Off = &vbebios_vendor_name;
37586                                           ! Debug: eq * char = vbebios_vendor_name+0 to unsigned short vbe_info_block = [S+$212-$1EE] (used reg = )
37587 9720           BB                   9075  mov	bx,#_vbebios_vendor_name
37588 9723           899E       FE14            mov	-$1EC[bp],bx
37589                                           !BCC_EOS
37590                                           ! 8006                 vbe_info_block.OemProductNamePtr_Seg = 0xc000;
37591                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E8] (used reg = )
37592 9727           B8                   C000  mov	ax,#$C000
37593 972A           8986       FE1A            mov	-$1E6[bp],ax
37594                                           !BCC_EOS
37595                                           ! 8007                 vbe_info_block.OemProductNamePtr_Off = &vbebios_product_name;
37596                                           ! Debug: eq * char = vbebios_product_name+0 to unsigned short vbe_info_block = [S+$212-$1EA] (used reg = )
37597 972E           BB                   908D  mov	bx,#_vbebios_product_name
37598 9731           899E       FE18            mov	-$1E8[bp],bx
37599                                           !BCC_EOS
37600                                           ! 8008                 vbe_info_block.OemProductRevPtr_Seg = 0xc000;
37601                                           ! Debug: eq unsigned int = const $C000 to unsigned short vbe_info_block = [S+$212-$1E4] (used reg = )
37602 9735           B8                   C000  mov	ax,#$C000
37603 9738           8986       FE1E            mov	-$1E2[bp],ax
37604                                           !BCC_EOS
37605                                           ! 8009                 vbe_info_block.OemProductRevPtr_Off = &vbebios_product_revision;
37606                                           ! Debug: eq * char = vbebios_product_revision+0 to unsigned short vbe_info_block = [S+$212-$1E6] (used reg = )
37607 973C           BB                   90A6  mov	bx,#_vbebios_product_revision
37608 973F           899E       FE1C            mov	-$1E4[bp],bx
37609                                           !BCC_EOS
37610                                           ! 8010                 memcpyb(ES, DI, ss, &vbe_info_block, sizeof(vbe_info_block));
37611                                           ! Debug: list int = const $200 (used reg = )
37612 9743           B8                   0200  mov	ax,#$200
37613 9746           50                         push	ax
37614                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37615 9747           8D9E       FDFE            lea	bx,-$202[bp]
37616 974B           53                         push	bx
37617                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37618 974C           FF76         FE            push	-2[bp]
37619                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37620 974F           FF76         08            push	8[bp]
37621                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37622 9752           FF76         06            push	6[bp]
37623                                           ! Debug: func () void = memcpyb+0 (used reg = )
37624 9755           E8         E5BD            call	_memcpyb
37625 9758           83C4                   0A  add	sp,*$A
37626                                           !BCC_EOS
37627                                           ! 8011         }
37628                                           ! 8012         else
37629                                           ! 8013         {
37630 975B           EB           18            jmp .2E5
37631                       0000975D            .2E3:
37632                                           ! 8014                 memcpyb(ES, DI, ss, &vbe_info_block, 256);
37633                                           ! Debug: list int = const $100 (used reg = )
37634 975D           B8                   0100  mov	ax,#$100
37635 9760           50                         push	ax
37636                                           ! Debug: list * struct VbeInfoBlock vbe_info_block = S+$214-$204 (used reg = )
37637 9761           8D9E       FDFE            lea	bx,-$202[bp]
37638 9765           53                         push	bx
37639                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37640 9766           FF76         FE            push	-2[bp]
37641                                           ! Debug: list unsigned short DI = [S+$218+6] (used reg = )
37642 9769           FF76         08            push	8[bp]
37643                                           ! Debug: list unsigned short ES = [S+$21A+4] (used reg = )
37644 976C           FF76         06            push	6[bp]
37645                                           ! Debug: func () void = memcpyb+0 (used reg = )
37646 976F           E8         E5A3            call	_memcpyb
37647 9772           83C4                   0A  add	sp,*$A
37648                                           !BCC_EOS
37649                                           ! 8015         }
37650                                           ! 8016         do
37651                       00009775            .2E5:
37652                                           ! 8017         {
37653                       00009775            .2E8:
37654                                           ! 8018                 size_64k = (Bit16u)((Bit32u)cur_info->info.XResolution * cur_info->info.XResolution * cur_info->info.BitsPerPixel) >> 19;
37655 9775           8B9E       FDF0            mov	bx,-$210[bp]
37656                                           ! Debug: cast unsigned long = const 0 to unsigned char = [bx+$1B] (used reg = )
37657 9779           8A47         1B            mov	al,$1B[bx]
37658 977C           30E4                       xor	ah,ah
37659 977E           31DB                       xor	bx,bx
37660 9780           53                         push	bx
37661 9781           50                         push	ax
37662 9782           8B9E       FDF0            mov	bx,-$210[bp]
37663                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37664 9786           8B47         14            mov	ax,$14[bx]
37665 9789           31DB                       xor	bx,bx
37666 978B           53                         push	bx
37667 978C           50                         push	ax
37668 978D           8B9E       FDF0            mov	bx,-$210[bp]
37669                                           ! Debug: cast unsigned long = const 0 to unsigned short = [bx+$14] (used reg = )
37670 9791           8B47         14            mov	ax,$14[bx]
37671 9794           31DB                       xor	bx,bx
37672                                           ! Debug: mul unsigned long (temp) = [S+$21A-$21A] to unsigned long = bx+0 (used reg = )
37673 9796           8DBE       FDE8            lea	di,-$218[bp]
37674 979A           E8         FE29            call	lmulul
37675 979D           83C4                   04  add	sp,*4
37676                                           ! Debug: mul unsigned long (temp) = [S+$216-$216] to unsigned long = bx+0 (used reg = )
37677 97A0           8DBE       FDEC            lea	di,-$214[bp]
37678 97A4           E8         FE1F            call	lmulul
37679 97A7           83C4                   04  add	sp,*4
37680                                           ! Debug: cast unsigned short = const 0 to unsigned long = bx+0 (used reg = )
37681                                           ! Debug: sr int = const $13 to unsigned short = ax+0 (used reg = )
37682 97AA           31C0                       xor	ax,ax
37683                                           ! Debug: eq unsigned int = ax+0 to unsigned short size_64k = [S+$212-$210] (used reg = )
37684 97AC           8986       FDF2            mov	-$20E[bp],ax
37685                                           !BCC_EOS
37686                                           ! 8019                 if ((cur_info->info.XResolution <= dispi_get_max_xres()) &&
37687                                           ! 8020                     (cur_info->info.BitsPerPixel <= dispi_get_max_bpp()) &&
37688                                           ! 8021                     (size_64k <= vbe_info_block.TotalMemory)) {
37689                                           ! Debug: func () int = dispi_get_max_xres+0 (used reg = )
37690 97B0           E8         FB3E            call	_dispi_get_max_xres
37691 97B3           8B9E       FDF0            mov	bx,-$210[bp]
37692                                           ! Debug: le int = ax+0 to unsigned short = [bx+$14] (used reg = )
37693 97B7           3B47         14            cmp	ax,$14[bx]
37694 97BA           72           61            jb  	.2E9
37695                       000097BC            .2EC:
37696                                           ! Debug: func () int = dispi_get_max_bpp+0 (used reg = )
37697 97BC           E8         FB54            call	_dispi_get_max_bpp
37698 97BF           8B9E       FDF0            mov	bx,-$210[bp]
37699                                           ! Debug: le int = ax+0 to unsigned char = [bx+$1B] (used reg = )
37700 97C3           50                         push	ax
37701 97C4           8A47         1B            mov	al,$1B[bx]
37702 97C7           30E4                       xor	ah,ah
37703 97C9           3B86       FDEE            cmp	ax,-$212[bp]
37704 97CD           8DA6       FDF0            lea	sp,-$210[bp]
37705 97D1           77           4A            ja  	.2E9
37706                       000097D3            .2EB:
37707                                           ! Debug: le unsigned short vbe_info_block = [S+$212-$1F2] to unsigned short size_64k = [S+$212-$210] (used reg = )
37708 97D3           8B86       FDF2            mov	ax,-$20E[bp]
37709 97D7           3B86       FE10            cmp	ax,-$1F0[bp]
37710 97DB           77           40            ja  	.2E9
37711                       000097DD            .2EA:
37712                                           ! 8022                   printf("VBE found mode %x => %x\n", cur_info->mode,cur_mode);
37713                                           ! Debug: list unsigned short cur_mode = [S+$212-$20C] (used reg = )
37714 97DD           FFB6       FDF6            push	-$20A[bp]
37715 97E1           8B9E       FDF0            mov	bx,-$210[bp]
37716                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37717 97E5           FF37                       push	[bx]
37718                                           ! Debug: list * char = .2ED+0 (used reg = )
37719 97E7           BB                   A084  mov	bx,#.2ED
37720 97EA           53                         push	bx
37721                                           ! Debug: func () void = printf+0 (used reg = )
37722 97EB           E8         E632            call	_printf
37723 97EE           83C4                   06  add	sp,*6
37724                                           !BCC_EOS
37725                                           ! 8023                   write_word(ES, DI + cur_ptr, cur_info->mode);
37726 97F1           8B9E       FDF0            mov	bx,-$210[bp]
37727                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37728 97F5           FF37                       push	[bx]
37729                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37730 97F7           8B46         08            mov	ax,8[bp]
37731 97FA           0386       FDF4            add	ax,-$20C[bp]
37732                                           ! Debug: list unsigned int = ax+0 (used reg = )
37733 97FE           50                         push	ax
37734                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37735 97FF           FF76         06            push	6[bp]
37736                                           ! Debug: func () void = write_word+0 (used reg = )
37737 9802           E8         E5AE            call	_write_word
37738 9805           83C4                   06  add	sp,*6
37739                                           !BCC_EOS
37740                                           ! 8024                   cur_mode++;
37741                                           ! Debug: postinc unsigned short cur_mode = [S+$212-$20C] (used reg = )
37742 9808           8B86       FDF6            mov	ax,-$20A[bp]
37743 980C           40                         inc	ax
37744 980D           8986       FDF6            mov	-$20A[bp],ax
37745                                           !BCC_EOS
37746                                           ! 8025                   cur_ptr+=2;
37747                                           ! Debug: addab int = const 2 to unsigned short cur_ptr = [S+$212-$20E] (used reg = )
37748 9811           8B86       FDF4            mov	ax,-$20C[bp]
37749 9815           40                         inc	ax
37750 9816           40                         inc	ax
37751 9817           8986       FDF4            mov	-$20C[bp],ax
37752                                           !BCC_EOS
37753                                           ! 8026                 } else {
37754 981B           EB           21            jmp .2EE
37755                       0000981D            .2E9:
37756                                           ! 8027                   printf("VBE mode %x (xres=%x / bpp=%02x) not supported \n", cur_info->mode,cur_info->info.XResolution,cur_info->info.BitsPerPixel);
37757 981D           8B9E       FDF0            mov	bx,-$210[bp]
37758                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
37759 9821           8A47         1B            mov	al,$1B[bx]
37760 9824           30E4                       xor	ah,ah
37761 9826           50                         push	ax
37762 9827           8B9E       FDF0            mov	bx,-$210[bp]
37763                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
37764 982B           FF77         14            push	$14[bx]
37765 982E           8B9E       FDF0            mov	bx,-$210[bp]
37766                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37767 9832           FF37                       push	[bx]
37768                                           ! Debug: list * char = .2EF+0 (used reg = )
37769 9834           BB                   A053  mov	bx,#.2EF
37770 9837           53                         push	bx
37771                                           ! Debug: func () void = printf+0 (used reg = )
37772 9838           E8         E5E5            call	_printf
37773 983B           83C4                   08  add	sp,*8
37774                                           !BCC_EOS
37775                                           ! 8028                 }
37776                                           ! 8029                 cur_info++;
37777                       0000983E            .2EE:
37778                                           ! Debug: postinc * struct ModeInfoListItem cur_info = [S+$212-$212] (used reg = )
37779 983E           8B9E       FDF0            mov	bx,-$210[bp]
37780 9842           83C3                   44  add	bx,*$44
37781 9845           899E       FDF0            mov	-$210[bp],bx
37782                                           !BCC_EOS
37783                                           ! 8030         } while (cur_info->mode != 0xFFFF);
37784                       00009849            .2E7:
37785 9849           8B9E       FDF0            mov	bx,-$210[bp]
37786                                           ! Debug: ne unsigned int = const $FFFF to unsigned short = [bx+0] (used reg = )
37787 984D           8B1F                       mov	bx,[bx]
37788 984F           81FB                 FFFF  cmp	bx,#$FFFF
37789 9853         0F85         FF1E            bne 	.2E8
37790                       00009857            .2F0:
37791                                           !BCC_EOS
37792                                           ! 8031         write_word(ES, DI + cur_ptr, cur_info->mode);
37793                       00009857            .2E6:
37794 9857           8B9E       FDF0            mov	bx,-$210[bp]
37795                                           ! Debug: list unsigned short = [bx+0] (used reg = )
37796 985B           FF37                       push	[bx]
37797                                           ! Debug: add unsigned short cur_ptr = [S+$214-$20E] to unsigned short DI = [S+$214+6] (used reg = )
37798 985D           8B46         08            mov	ax,8[bp]
37799 9860           0386       FDF4            add	ax,-$20C[bp]
37800                                           ! Debug: list unsigned int = ax+0 (used reg = )
37801 9864           50                         push	ax
37802                                           ! Debug: list unsigned short ES = [S+$216+4] (used reg = )
37803 9865           FF76         06            push	6[bp]
37804                                           ! Debug: func () void = write_word+0 (used reg = )
37805 9868           E8         E548            call	_write_word
37806 986B           83C4                   06  add	sp,*6
37807                                           !BCC_EOS
37808                                           ! 8032         result = 0x4f;
37809                                           ! Debug: eq int = const $4F to unsigned short result = [S+$212-$208] (used reg = )
37810 986E           B8                   004F  mov	ax,*$4F
37811 9871           8986       FDFA            mov	-$206[bp],ax
37812                                           !BCC_EOS
37813                                           ! 8033         write_word(ss, AX, result);
37814                                           ! Debug: list unsigned short result = [S+$212-$208] (used reg = )
37815 9875           FFB6       FDFA            push	-$206[bp]
37816                                           ! Debug: list * unsigned short AX = [S+$214+2] (used reg = )
37817 9879           FF76         04            push	4[bp]
37818                                           ! Debug: list unsigned short ss = [S+$216-4] (used reg = )
37819 987C           FF76         FE            push	-2[bp]
37820                                           ! Debug: func () void = write_word+0 (used reg = )
37821 987F           E8         E531            call	_write_word
37822 9882           83C4                   06  add	sp,*6
37823                                           !BCC_EOS
37824                                           ! 8034 }
37825 9885           89EC                       mov	sp,bp
37826 9887           5D                         pop	bp
37827 9888           C3                         ret
37828                                           ! 8035 void vbe_biosfn_
37829                                           ! Register BX used in function vbe_biosfn_return_controller_information
37830                                           ! 8035 return_mode_information(AX, CX, ES, DI)
37831                                           ! 8036 Bit16u *AX;Bit16u CX; Bit16u ES;Bit16u DI;
37832                                           export	_vbe_biosfn_return_mode_information
37833                       00009889            _vbe_biosfn_return_mode_information:
37834                                           !BCC_EOS
37835                                           !BCC_EOS
37836                                           !BCC_EOS
37837                                           !BCC_EOS
37838                                           ! 8037 {
37839                                           ! 8038         Bit16u result=0x0100;
37840 9889           55                         push	bp
37841 988A           89E5                       mov	bp,sp
37842 988C           4C                         dec	sp
37843 988D           4C                         dec	sp
37844                                           ! Debug: eq int = const $100 to unsigned short result = [S+4-4] (used reg = )
37845 988E           B8                   0100  mov	ax,#$100
37846 9891           8946         FE            mov	-2[bp],ax
37847                                           !BCC_EOS
37848                                           ! 8039         Bit16u ss=get_SS();
37849 9894           4C                         dec	sp
37850 9895           4C                         dec	sp
37851                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
37852 9896           E8         E568            call	_get_SS
37853                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+6-6] (used reg = )
37854 9899           8946         FC            mov	-4[bp],ax
37855                                           !BCC_EOS
37856                                           ! 8040         ModeInfoBlock info;
37857                                           !BCC_EOS
37858                                           ! 8041         ModeInfoListItem *cur_info;
37859                                           !BCC_EOS
37860                                           ! 8042         Boolean using_lfb;
37861                                           !BCC_EOS
37862                                           ! 8043         Bit16u lfb_addr;
37863                                           !BCC_EOS
37864                                           ! 8044         printf("VBE vbe_biosfn_return_mode_information ES%x DI%x CX%x\n",ES,DI,CX);
37865 989C           81C4                 FEFA  add	sp,#-$106
37866                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
37867 98A0           FF76         06            push	6[bp]
37868                                           ! Debug: list unsigned short DI = [S+$10E+8] (used reg = )
37869 98A3           FF76         0A            push	$A[bp]
37870                                           ! Debug: list unsigned short ES = [S+$110+6] (used reg = )
37871 98A6           FF76         08            push	8[bp]
37872                                           ! Debug: list * char = .2F1+0 (used reg = )
37873 98A9           BB                   A01C  mov	bx,#.2F1
37874 98AC           53                         push	bx
37875                                           ! Debug: func () void = printf+0 (used reg = )
37876 98AD           E8         E570            call	_printf
37877 98B0           83C4                   08  add	sp,*8
37878                                           !BCC_EOS
37879                                           ! 8045         using_lfb=((CX & 0x4000) == 0x4000);
37880                                           ! Debug: and int = const $4000 to unsigned short CX = [S+$10C+4] (used reg = )
37881 98B3           8B46         06            mov	ax,6[bp]
37882 98B6           25                   4000  and	ax,#$4000
37883                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
37884 98B9           3D                   4000  cmp	ax,#$4000
37885 98BC           75           04            jne	.2F2
37886 98BE           B0                     01  mov	al,*1
37887 98C0           EB           02            jmp	.2F3
37888                       000098C2            .2F2:
37889 98C2           30C0                       xor	al,al
37890                       000098C4            .2F3:
37891                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$10C-$10A] (used reg = )
37892 98C4           30E4                       xor	ah,ah
37893 98C6           8986       FEF8            mov	-$108[bp],ax
37894                                           !BCC_EOS
37895                                           ! 8046         CX = (CX & 0x1ff);
37896                                           ! Debug: and int = const $1FF to unsigned short CX = [S+$10C+4] (used reg = )
37897 98CA           8B46         06            mov	ax,6[bp]
37898 98CD           25                   01FF  and	ax,#$1FF
37899                                           ! Debug: eq unsigned int = ax+0 to unsigned short CX = [S+$10C+4] (used reg = )
37900 98D0           8946         06            mov	6[bp],ax
37901                                           !BCC_EOS
37902                                           ! 8047         cur_info = mode_info_find_mode(CX, using_lfb, &cur_info);
37903                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$10C-$108 (used reg = )
37904 98D3           8D9E       FEFA            lea	bx,-$106[bp]
37905 98D7           53                         push	bx
37906                                           ! Debug: list unsigned short using_lfb = [S+$10E-$10A] (used reg = )
37907 98D8           FFB6       FEF8            push	-$108[bp]
37908                                           ! Debug: list unsigned short CX = [S+$110+4] (used reg = )
37909 98DC           FF76         06            push	6[bp]
37910                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
37911 98DF           E8         FC25            call	_mode_info_find_mode
37912 98E2           83C4                   06  add	sp,*6
37913                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37914 98E5           8986       FEFA            mov	-$106[bp],ax
37915                                           !BCC_EOS
37916                                           ! 8048         if (cur_info != 0)
37917                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$10C-$108] (used reg = )
37918 98E9           8B86       FEFA            mov	ax,-$106[bp]
37919 98ED           85C0                       test	ax,ax
37920 98EF         0F84         0099            beq 	.2F4
37921                       000098F3            .2F5:
37922                                           ! 8049         {
37923                                           ! 8050                 printf("VBE found mode %x\n",CX);
37924                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
37925 98F3           FF76         06            push	6[bp]
37926                                           ! Debug: list * char = .2F6+0 (used reg = )
37927 98F6           BB                   A009  mov	bx,#.2F6
37928 98F9           53                         push	bx
37929                                           ! Debug: func () void = printf+0 (used reg = )
37930 98FA           E8         E523            call	_printf
37931 98FD           83C4                   04  add	sp,*4
37932                                           !BCC_EOS
37933                                           ! 8051                 memsetb(ss, &info, 0, sizeof(ModeInfoBlock));
37934                                           ! Debug: list int = const $100 (used reg = )
37935 9900           B8                   0100  mov	ax,#$100
37936 9903           50                         push	ax
37937                                           ! Debug: list int = const 0 (used reg = )
37938 9904           31C0                       xor	ax,ax
37939 9906           50                         push	ax
37940                                           ! Debug: list * struct ModeInfoBlock info = S+$110-$106 (used reg = )
37941 9907           8D9E       FEFC            lea	bx,-$104[bp]
37942 990B           53                         push	bx
37943                                           ! Debug: list unsigned short ss = [S+$112-6] (used reg = )
37944 990C           FF76         FC            push	-4[bp]
37945                                           ! Debug: func () void = memsetb+0 (used reg = )
37946 990F           E8         E3B9            call	_memsetb
37947 9912           83C4                   08  add	sp,*8
37948                                           !BCC_EOS
37949                                           ! 8052                 memcpyb(ss, &info, 0xc000, &(cur_info->info), sizeof(ModeInfoBlockCompact));
37950                                           ! Debug: list int = const $42 (used reg = )
37951 9915           B8                   0042  mov	ax,*$42
37952 9918           50                         push	ax
37953 9919           8B9E       FEFA            mov	bx,-$106[bp]
37954                                           ! Debug: address struct ModeInfoBlockCompact = [bx+2] (used reg = )
37955                                           ! Debug: list * struct ModeInfoBlockCompact = bx+2 (used reg = )
37956 991D           43                         inc	bx
37957 991E           43                         inc	bx
37958 991F           53                         push	bx
37959                                           ! Debug: list unsigned int = const $C000 (used reg = )
37960 9920           B8                   C000  mov	ax,#$C000
37961 9923           50                         push	ax
37962                                           ! Debug: list * struct ModeInfoBlock info = S+$112-$106 (used reg = )
37963 9924           8D9E       FEFC            lea	bx,-$104[bp]
37964 9928           53                         push	bx
37965                                           ! Debug: list unsigned short ss = [S+$114-6] (used reg = )
37966 9929           FF76         FC            push	-4[bp]
37967                                           ! Debug: func () void = memcpyb+0 (used reg = )
37968 992C           E8         E3E6            call	_memcpyb
37969 992F           83C4                   0A  add	sp,*$A
37970                                           !BCC_EOS
37971                                           ! 8053                 if (using_lfb) {
37972 9932           8B86       FEF8            mov	ax,-$108[bp]
37973 9936           85C0                       test	ax,ax
37974 9938           74           06            je  	.2F7
37975                       0000993A            .2F8:
37976                                           ! 8054                   info.NumberOfBanks = 1;
37977                                           ! Debug: eq int = const 1 to unsigned char info = [S+$10C-$EC] (used reg = )
37978 993A           B0                     01  mov	al,*1
37979 993C           8886       FF16            mov	-$EA[bp],al
37980                                           !BCC_EOS
37981                                           ! 8055                 }
37982                                           ! 8056                 lfb_addr = pci_get_lfb_addr(0x1234);
37983                       00009940            .2F7:
37984                                           ! Debug: list int = const $1234 (used reg = )
37985 9940           B8                   1234  mov	ax,#$1234
37986 9943           50                         push	ax
37987                                           ! Debug: func () int = pci_get_lfb_addr+0 (used reg = )
37988 9944           E8         E616            call	_pci_get_lfb_addr
37989 9947           44                         inc	sp
37990 9948           44                         inc	sp
37991                                           ! Debug: eq int = ax+0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37992 9949           8986       FEF6            mov	-$10A[bp],ax
37993                                           !BCC_EOS
37994                                           ! 8057                 if (lfb_addr > 0) {
37995                                           ! Debug: gt int = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
37996 994D           8B86       FEF6            mov	ax,-$10A[bp]
37997 9951           85C0                       test	ax,ax
37998 9953           74           11            je  	.2F9
37999                       00009955            .2FA:
38000                                           ! 8058                   info.PhysBasePtr = ((Bit32u)lfb_addr << 16);
38001                                           ! Debug: cast unsigned long = const 0 to unsigned short lfb_addr = [S+$10C-$10C] (used reg = )
38002 9955           8B86       FEF6            mov	ax,-$10A[bp]
38003 9959           31DB                       xor	bx,bx
38004                                           ! Debug: sl int = const $10 to unsigned long = bx+0 (used reg = )
38005 995B           93                         xchg	bx,ax
38006 995C           31C0                       xor	ax,ax
38007                                           ! Debug: eq unsigned long = bx+0 to unsigned long info = [S+$10C-$DE] (used reg = )
38008 995E           8986       FF24            mov	-$DC[bp],ax
38009 9962           899E       FF26            mov	-$DA[bp],bx
38010                                           !BCC_EOS
38011                                           ! 8059                 }
38012                                           ! 8060                 if (info.WinAAttributes & 0x01) {
38013                       00009966            .2F9:
38014                                           ! Debug: and int = const 1 to unsigned char info = [S+$10C-$104] (used reg = )
38015 9966           8A86       FEFE            mov	al,-$102[bp]
38016 996A           24                     01  and	al,*1
38017 996C           84C0                       test	al,al
38018 996E           74           14            je  	.2FB
38019                       00009970            .2FC:
38020                                           ! 8061                   info.WinFuncPtr = 0xC0000000UL;
38021                                           ! Debug: eq unsigned long = const $C0000000 to unsigned long info = [S+$10C-$FA] (used reg = )
38022 9970           31C0                       xor	ax,ax
38023 9972           BB                   C000  mov	bx,#$C000
38024 9975           8986       FF08            mov	-$F8[bp],ax
38025 9979           899E       FF0A            mov	-$F6[bp],bx
38026                                           !BCC_EOS
38027                                           ! 8062                   *(Bit16u *)&(info.WinFuncPtr) = (Bit16u)(dispi_set_bank_farcall);
38028                                           ! Debug: cast unsigned short = const 0 to () void = dispi_set_bank_farcall+0 (used reg = )
38029                                           ! Debug: eq unsigned short = dispi_set_bank_farcall+0 to unsigned short info = [S+$10C-$FA] (used reg = )
38030 997D           BB                   9371  mov	bx,#_dispi_set_bank_farcall
38031 9980           899E       FF08            mov	-$F8[bp],bx
38032                                           !BCC_EOS
38033                                           ! 8063                 }
38034                                           ! 8064                 result = 0x4f;
38035                       00009984            .2FB:
38036                                           ! Debug: eq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38037 9984           B8                   004F  mov	ax,*$4F
38038 9987           8946         FE            mov	-2[bp],ax
38039                                           !BCC_EOS
38040                                           ! 8065         }
38041                                           ! 8066         else
38042                                           ! 8067         {
38043 998A           EB           13            jmp .2FD
38044                       0000998C            .2F4:
38045                                           ! 8068                 printf("VBE *NOT* found mode %x\n",CX);
38046                                           ! Debug: list unsigned short CX = [S+$10C+4] (used reg = )
38047 998C           FF76         06            push	6[bp]
38048                                           ! Debug: list * char = .2FE+0 (used reg = )
38049 998F           BB                   9FF0  mov	bx,#.2FE
38050 9992           53                         push	bx
38051                                           ! Debug: func () void = printf+0 (used reg = )
38052 9993           E8         E48A            call	_printf
38053 9996           83C4                   04  add	sp,*4
38054                                           !BCC_EOS
38055                                           ! 8069                 result = 0x100;
38056                                           ! Debug: eq int = const $100 to unsigned short result = [S+$10C-4] (used reg = )
38057 9999           B8                   0100  mov	ax,#$100
38058 999C           8946         FE            mov	-2[bp],ax
38059                                           !BCC_EOS
38060                                           ! 8070         }
38061                                           ! 8071         if (result == 0x4f)
38062                       0000999F            .2FD:
38063                                           ! Debug: logeq int = const $4F to unsigned short result = [S+$10C-4] (used reg = )
38064 999F           8B46         FE            mov	ax,-2[bp]
38065 99A2           3D                   004F  cmp	ax,*$4F
38066 99A5           75           18            jne 	.2FF
38067                       000099A7            .300:
38068                                           ! 8072         {
38069                                           ! 8073                 memcpyb(ES, DI, ss, &info, sizeof(info));
38070                                           ! Debug: list int = const $100 (used reg = )
38071 99A7           B8                   0100  mov	ax,#$100
38072 99AA           50                         push	ax
38073                                           ! Debug: list * struct ModeInfoBlock info = S+$10E-$106 (used reg = )
38074 99AB           8D9E       FEFC            lea	bx,-$104[bp]
38075 99AF           53                         push	bx
38076                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38077 99B0           FF76         FC            push	-4[bp]
38078                                           ! Debug: list unsigned short DI = [S+$112+8] (used reg = )
38079 99B3           FF76         0A            push	$A[bp]
38080                                           ! Debug: list unsigned short ES = [S+$114+6] (used reg = )
38081 99B6           FF76         08            push	8[bp]
38082                                           ! Debug: func () void = memcpyb+0 (used reg = )
38083 99B9           E8         E359            call	_memcpyb
38084 99BC           83C4                   0A  add	sp,*$A
38085                                           !BCC_EOS
38086                                           ! 8074         }
38087                                           ! 8075         write_word(ss, AX, result);
38088                       000099BF            .2FF:
38089                                           ! Debug: list unsigned short result = [S+$10C-4] (used reg = )
38090 99BF           FF76         FE            push	-2[bp]
38091                                           ! Debug: list * unsigned short AX = [S+$10E+2] (used reg = )
38092 99C2           FF76         04            push	4[bp]
38093                                           ! Debug: list unsigned short ss = [S+$110-6] (used reg = )
38094 99C5           FF76         FC            push	-4[bp]
38095                                           ! Debug: func () void = write_word+0 (used reg = )
38096 99C8           E8         E3E8            call	_write_word
38097 99CB           83C4                   06  add	sp,*6
38098                                           !BCC_EOS
38099                                           ! 8076 }
38100 99CE           89EC                       mov	sp,bp
38101 99D0           5D                         pop	bp
38102 99D1           C3                         ret
38103                                           ! 8077 void vbe_biosfn_set_mode(AX, BX, ES, DI)
38104                                           ! Register BX used in function vbe_biosfn_return_mode_information
38105                                           ! 8078 Bit16u *AX;Bit16u BX; Bit16u ES;Bit16u DI;
38106                                           export	_vbe_biosfn_set_mode
38107                       000099D2            _vbe_biosfn_set_mode:
38108                                           !BCC_EOS
38109                                           !BCC_EOS
38110                                           !BCC_EOS
38111                                           !BCC_EOS
38112                                           ! 8079 {
38113                                           ! 8080         Bit16u ss = get_SS();
38114 99D2           55                         push	bp
38115 99D3           89E5                       mov	bp,sp
38116 99D5           4C                         dec	sp
38117 99D6           4C                         dec	sp
38118                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38119 99D7           E8         E427            call	_get_SS
38120                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38121 99DA           8946         FE            mov	-2[bp],ax
38122                                           !BCC_EOS
38123                                           ! 8081         Bit16u result;
38124                                           !BCC_EOS
38125                                           ! 8082         ModeInfoListItem *cur_info;
38126                                           !BCC_EOS
38127                                           ! 8083         Boolean using_lfb;
38128                                           !BCC_EOS
38129                                           ! 8084         Bit8u no_clear;
38130                                           !BCC_EOS
38131                                           ! 8085         Bit8u lfb_flag;
38132                                           !BCC_EOS
38133                                           ! 8086         using_lfb=((BX & 0x4000) == 0x4000);
38134 99DD           83C4                   F8  add	sp,*-8
38135                                           ! Debug: and int = const $4000 to unsigned short BX = [S+$C+4] (used reg = )
38136 99E0           8B46         06            mov	ax,6[bp]
38137 99E3           25                   4000  and	ax,#$4000
38138                                           ! Debug: logeq int = const $4000 to unsigned int = ax+0 (used reg = )
38139 99E6           3D                   4000  cmp	ax,#$4000
38140 99E9           75           04            jne	.301
38141 99EB           B0                     01  mov	al,*1
38142 99ED           EB           02            jmp	.302
38143                       000099EF            .301:
38144 99EF           30C0                       xor	al,al
38145                       000099F1            .302:
38146                                           ! Debug: eq char = al+0 to unsigned short using_lfb = [S+$C-$A] (used reg = )
38147 99F1           30E4                       xor	ah,ah
38148 99F3           8946         F8            mov	-8[bp],ax
38149                                           !BCC_EOS
38150                                           ! 8087         lfb_flag=using_lfb?0x40:0;
38151 99F6           8B46         F8            mov	ax,-8[bp]
38152 99F9           85C0                       test	ax,ax
38153 99FB           74           04            je  	.303
38154                       000099FD            .304:
38155 99FD           B0                     40  mov	al,*$40
38156 99FF           EB           02            jmp .305
38157                       00009A01            .303:
38158 9A01           30C0                       xor	al,al
38159                       00009A03            .305:
38160                                           ! Debug: eq char = al+0 to unsigned char lfb_flag = [S+$C-$C] (used reg = )
38161 9A03           8846         F6            mov	-$A[bp],al
38162                                           !BCC_EOS
38163                                           ! 8088         no_clear=((BX & 0x8000) == 0x8000)?0x80:0;
38164                                           ! Debug: and unsigned int = const $8000 to unsigned short BX = [S+$C+4] (used reg = )
38165 9A06           8B46         06            mov	ax,6[bp]
38166 9A09           25                   8000  and	ax,#$8000
38167                                           ! Debug: logeq unsigned int = const $8000 to unsigned int = ax+0 (used reg = )
38168 9A0C           3D                   8000  cmp	ax,#$8000
38169 9A0F           75           04            jne 	.306
38170                       00009A11            .307:
38171 9A11           B0                     80  mov	al,#$80
38172 9A13           EB           02            jmp .308
38173                       00009A15            .306:
38174 9A15           30C0                       xor	al,al
38175                       00009A17            .308:
38176                                           ! Debug: eq char = al+0 to unsigned char no_clear = [S+$C-$B] (used reg = )
38177 9A17           8846         F7            mov	-9[bp],al
38178                                           !BCC_EOS
38179                                           ! 8089         BX = (BX & 0x1ff);
38180                                           ! Debug: and int = const $1FF to unsigned short BX = [S+$C+4] (used reg = )
38181 9A1A           8B46         06            mov	ax,6[bp]
38182 9A1D           25                   01FF  and	ax,#$1FF
38183                                           ! Debug: eq unsigned int = ax+0 to unsigned short BX = [S+$C+4] (used reg = )
38184 9A20           8946         06            mov	6[bp],ax
38185                                           !BCC_EOS
38186                                           ! 8090         if (BX<0x0100)
38187                                           ! Debug: lt int = const $100 to unsigned short BX = [S+$C+4] (used reg = )
38188 9A23           8B46         06            mov	ax,6[bp]
38189 9A26           3D                   0100  cmp	ax,#$100
38190 9A29           73           23            jae 	.309
38191                       00009A2B            .30A:
38192                                           ! 8091         {
38193                                           ! 8092                 Bit8u mode;
38194                                           !BCC_EOS
38195                                           ! 8093                 dispi_set_enable(0x00);
38196 9A2B           4C                         dec	sp
38197 9A2C           4C                         dec	sp
38198                                           ! Debug: list int = const 0 (used reg = )
38199 9A2D           31C0                       xor	ax,ax
38200 9A2F           50                         push	ax
38201                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38202 9A30           E8         F902            call	_dispi_set_enable
38203 9A33           44                         inc	sp
38204 9A34           44                         inc	sp
38205                                           !BCC_EOS
38206                                           ! 8094                 mode=(BX & 0xff);
38207                                           ! Debug: and int = const $FF to unsigned short BX = [S+$E+4] (used reg = )
38208 9A35           8A46         06            mov	al,6[bp]
38209                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$E-$D] (used reg = )
38210 9A38           8846         F5            mov	-$B[bp],al
38211                                           !BCC_EOS
38212                                           ! 8095            
38213                                           ! 8095      biosfn_set_video_mode(mode);
38214                                           ! Debug: list unsigned char mode = [S+$E-$D] (used reg = )
38215 9A3B           8A46         F5            mov	al,-$B[bp]
38216 9A3E           30E4                       xor	ah,ah
38217 9A40           50                         push	ax
38218                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38219 9A41           E8         A1B2            call	_biosfn_set_video_mode
38220 9A44           44                         inc	sp
38221 9A45           44                         inc	sp
38222                                           !BCC_EOS
38223                                           ! 8096                 result = 0x4f;
38224                                           ! Debug: eq int = const $4F to unsigned short result = [S+$E-6] (used reg = )
38225 9A46           B8                   004F  mov	ax,*$4F
38226 9A49           8946         FC            mov	-4[bp],ax
38227                                           !BCC_EOS
38228                                           ! 8097         }
38229 9A4C           44                         inc	sp
38230 9A4D           44                         inc	sp
38231                                           ! 8098         cur_info = mode_info_find_mode(BX, using_lfb, &cur_info);
38232                       00009A4E            .309:
38233                                           ! Debug: list * * struct ModeInfoListItem cur_info = S+$C-8 (used reg = )
38234 9A4E           8D5E         FA            lea	bx,-6[bp]
38235 9A51           53                         push	bx
38236                                           ! Debug: list unsigned short using_lfb = [S+$E-$A] (used reg = )
38237 9A52           FF76         F8            push	-8[bp]
38238                                           ! Debug: list unsigned short BX = [S+$10+4] (used reg = )
38239 9A55           FF76         06            push	6[bp]
38240                                           ! Debug: func () * struct ModeInfoListItem = mode_info_find_mode+0 (used reg = )
38241 9A58           E8         FAAC            call	_mode_info_find_mode
38242 9A5B           83C4                   06  add	sp,*6
38243                                           ! Debug: eq * struct ModeInfoListItem = ax+0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38244 9A5E           8946         FA            mov	-6[bp],ax
38245                                           !BCC_EOS
38246                                           ! 8099         if (cur_info != 0)
38247                                           ! Debug: ne int = const 0 to * struct ModeInfoListItem cur_info = [S+$C-8] (used reg = )
38248 9A61           8B46         FA            mov	ax,-6[bp]
38249 9A64           85C0                       test	ax,ax
38250 9A66         0F84         00B5            beq 	.30B
38251                       00009A6A            .30C:
38252                                           ! 8100         {
38253                                           ! 8101                 printf("VBE found mode %x, setting:\n", BX);
38254                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38255 9A6A           FF76         06            push	6[bp]
38256                                           ! Debug: list * char = .30D+0 (used reg = )
38257 9A6D           BB                   9FD3  mov	bx,#.30D
38258 9A70           53                         push	bx
38259                                           ! Debug: func () void = printf+0 (used reg = )
38260 9A71           E8         E3AC            call	_printf
38261 9A74           83C4                   04  add	sp,*4
38262                                           !BCC_EOS
38263                                           ! 8102                 printf("\txres%x yres%x bpp%x\n",
38264                                           ! 8103                         cur_info->info.XResolution,
38265                                           ! 8104                         cur_info->info.YResolution,
38266                                           ! 8105                         cur_info->info.BitsPerPixel);
38267 9A77           8B5E         FA            mov	bx,-6[bp]
38268                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38269 9A7A           8A47         1B            mov	al,$1B[bx]
38270 9A7D           30E4                       xor	ah,ah
38271 9A7F           50                         push	ax
38272 9A80           8B5E         FA            mov	bx,-6[bp]
38273                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38274 9A83           FF77         16            push	$16[bx]
38275 9A86           8B5E         FA            mov	bx,-6[bp]
38276                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38277 9A89           FF77         14            push	$14[bx]
38278                                           ! Debug: list * char = .30E+0 (used reg = )
38279 9A8C           BB                   9FBD  mov	bx,#.30E
38280 9A8F           53                         push	bx
38281                                           ! Debug: func () void = printf+0 (used reg = )
38282 9A90           E8         E38D            call	_printf
38283 9A93           83C4                   08  add	sp,*8
38284                                           !BCC_EOS
38285                                           ! 8106                 dispi_set_enable(0x00);
38286                                           ! Debug: list int = const 0 (used reg = )
38287 9A96           31C0                       xor	ax,ax
38288 9A98           50                         push	ax
38289                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38290 9A99           E8         F899            call	_dispi_set_enable
38291 9A9C           44                         inc	sp
38292 9A9D           44                         inc	sp
38293                                           !BCC_EOS
38294                                           ! 8107                 if (cur_info->info.BitsPerPixel == 4)
38295 9A9E           8B5E         FA            mov	bx,-6[bp]
38296                                           ! Debug: logeq int = const 4 to unsigned char = [bx+$1B] (used reg = )
38297 9AA1           8A47         1B            mov	al,$1B[bx]
38298 9AA4           3C                     04  cmp	al,*4
38299 9AA6           75           09            jne 	.30F
38300                       00009AA8            .310:
38301                                           ! 8108                 {
38302                                           ! 8109                   biosfn_set_video_mode(0x6a);
38303                                           ! Debug: list int = const $6A (used reg = )
38304 9AA8           B8                   006A  mov	ax,*$6A
38305 9AAB           50                         push	ax
38306                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
38307 9AAC           E8         A147            call	_biosfn_set_video_mode
38308 9AAF           44                         inc	sp
38309 9AB0           44                         inc	sp
38310                                           !BCC_EOS
38311                                           ! 8110                 }
38312                                           ! 8111                 dispi_set_bpp(cur_info->info.BitsPerPixel);
38313                       00009AB1            .30F:
38314 9AB1           8B5E         FA            mov	bx,-6[bp]
38315                                           ! Debug: list unsigned char = [bx+$1B] (used reg = )
38316 9AB4           8A47         1B            mov	al,$1B[bx]
38317 9AB7           30E4                       xor	ah,ah
38318 9AB9           50                         push	ax
38319                                           ! Debug: func () void = dispi_set_bpp+0 (used reg = )
38320 9ABA           E8         F7FD            call	_dispi_set_bpp
38321 9ABD           44                         inc	sp
38322 9ABE           44                         inc	sp
38323                                           !BCC_EOS
38324                                           ! 8112                 dispi_set_xres(cur_info->info.XResolution);
38325 9ABF           8B5E         FA            mov	bx,-6[bp]
38326                                           ! Debug: list unsigned short = [bx+$14] (used reg = )
38327 9AC2           FF77         14            push	$14[bx]
38328                                           ! Debug: func () void = dispi_set_xres+0 (used reg = )
38329 9AC5           E8         F7BD            call	_dispi_set_xres
38330 9AC8           44                         inc	sp
38331 9AC9           44                         inc	sp
38332                                           !BCC_EOS
38333                                           ! 8113                 dispi_set_yres(cur_info->info.YResolution);
38334 9ACA           8B5E         FA            mov	bx,-6[bp]
38335                                           ! Debug: list unsigned short = [bx+$16] (used reg = )
38336 9ACD           FF77         16            push	$16[bx]
38337                                           ! Debug: func () void = dispi_set_yres+0 (used reg = )
38338 9AD0           E8         F7C9            call	_dispi_set_yres
38339 9AD3           44                         inc	sp
38340 9AD4           44                         inc	sp
38341                                           !BCC_EOS
38342                                           ! 8114                 dispi_set_bank(0);
38343                                           ! Debug: list int = const 0 (used reg = )
38344 9AD5           31C0                       xor	ax,ax
38345 9AD7           50                         push	ax
38346                                           ! Debug: func () int = dispi_set_bank+0 (used reg = )
38347 9AD8           E8         F878            call	_dispi_set_bank
38348 9ADB           44                         inc	sp
38349 9ADC           44                         inc	sp
38350                                           !BCC_EOS
38351                                           ! 8115                 dispi_set_enable(0x01 | no_clear | lfb_flag);
38352                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const 1 (used reg = )
38353                                           ! Debug: expression subtree swapping
38354 9ADD           8A46         F7            mov	al,-9[bp]
38355 9AE0           0C                     01  or	al,*1
38356                                           ! Debug: or unsigned char lfb_flag = [S+$C-$C] to unsigned char = al+0 (used reg = )
38357 9AE2           0A46         F6            or	al,-$A[bp]
38358                                           ! Debug: list unsigned char = al+0 (used reg = )
38359 9AE5           30E4                       xor	ah,ah
38360 9AE7           50                         push	ax
38361                                           ! Debug: func () void = dispi_set_enable+0 (used reg = )
38362 9AE8           E8         F84A            call	_dispi_set_enable
38363 9AEB           44                         inc	sp
38364 9AEC           44                         inc	sp
38365                                           !BCC_EOS
38366                                           ! 8116                 vga_compat_setup();
38367                                           ! Debug: func () int = vga_compat_setup+0 (used reg = )
38368 9AED           E8         F940            call	_vga_compat_setup
38369                                           !BCC_EOS
38370                                           ! 8117                 write_word(0x40,0xBA,BX);
38371                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38372 9AF0           FF76         06            push	6[bp]
38373                                           ! Debug: list int = const $BA (used reg = )
38374 9AF3           B8                   00BA  mov	ax,#$BA
38375 9AF6           50                         push	ax
38376                                           ! Debug: list int = const $40 (used reg = )
38377 9AF7           B8                   0040  mov	ax,*$40
38378 9AFA           50                         push	ax
38379                                           ! Debug: func () void = write_word+0 (used reg = )
38380 9AFB           E8         E2B5            call	_write_word
38381 9AFE           83C4                   06  add	sp,*6
38382                                           !BCC_EOS
38383                                           ! 8118                 write_byte(0x40,0x87,(0x60 | no_clear));
38384                                           ! Debug: or unsigned char no_clear = [S+$C-$B] to int = const $60 (used reg = )
38385                                           ! Debug: expression subtree swapping
38386 9B01           8A46         F7            mov	al,-9[bp]
38387 9B04           0C                     60  or	al,*$60
38388                                           ! Debug: list unsigned char = al+0 (used reg = )
38389 9B06           30E4                       xor	ah,ah
38390 9B08           50                         push	ax
38391                                           ! Debug: list int = const $87 (used reg = )
38392 9B09           B8                   0087  mov	ax,#$87
38393 9B0C           50                         push	ax
38394                                           ! Debug: list int = const $40 (used reg = )
38395 9B0D           B8                   0040  mov	ax,*$40
38396 9B10           50                         push	ax
38397                                           ! Debug: func () void = write_byte+0 (used reg = )
38398 9B11           E8         E287            call	_write_byte
38399 9B14           83C4                   06  add	sp,*6
38400                                           !BCC_EOS
38401                                           ! 8119                 result = 0x4f;
38402                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38403 9B17           B8                   004F  mov	ax,*$4F
38404 9B1A           8946         FC            mov	-4[bp],ax
38405                                           !BCC_EOS
38406                                           ! 8120         }
38407                                           ! 8121         else
38408                                           ! 8122         {
38409 9B1D           EB           21            jmp .311
38410                       00009B1F            .30B:
38411                                           ! 8123                 printf("VBE *NOT* found mode %x\n" , BX);
38412                                           ! Debug: list unsigned short BX = [S+$C+4] (used reg = )
38413 9B1F           FF76         06            push	6[bp]
38414                                           ! Debug: list * char = .312+0 (used reg = )
38415 9B22           BB                   9FA4  mov	bx,#.312
38416 9B25           53                         push	bx
38417                                           ! Debug: func () void = printf+0 (used reg = )
38418 9B26           E8         E2F7            call	_printf
38419 9B29           83C4                   04  add	sp,*4
38420                                           !BCC_EOS
38421                                           ! 8124                 result = 0x100;
38422                                           ! Debug: eq int = const $100 to unsigned short result = [S+$C-6] (used reg = )
38423 9B2C           B8                   0100  mov	ax,#$100
38424 9B2F           8946         FC            mov	-4[bp],ax
38425                                           !BCC_EOS
38426                                           ! 8125                 if (BX == 3)
38427                                           ! Debug: logeq int = const 3 to unsigned short BX = [S+$C+4] (used reg = )
38428 9B32           8B46         06            mov	ax,6[bp]
38429 9B35           3D                   0003  cmp	ax,*3
38430 9B38           75           06            jne 	.313
38431                       00009B3A            .314:
38432                                           ! 8126                         result = 0x4f;
38433                                           ! Debug: eq int = const $4F to unsigned short result = [S+$C-6] (used reg = )
38434 9B3A           B8                   004F  mov	ax,*$4F
38435 9B3D           8946         FC            mov	-4[bp],ax
38436                                           !BCC_EOS
38437                                           ! 8127         }
38438                       00009B40            .313:
38439                                           ! 8128         write_word(ss, AX, result);
38440                       00009B40            .311:
38441                                           ! Debug: list unsigned short result = [S+$C-6] (used reg = )
38442 9B40           FF76         FC            push	-4[bp]
38443                                           ! Debug: list * unsigned short AX = [S+$E+2] (used reg = )
38444 9B43           FF76         04            push	4[bp]
38445                                           ! Debug: list unsigned short ss = [S+$10-4] (used reg = )
38446 9B46           FF76         FE            push	-2[bp]
38447                                           ! Debug: func () void = write_word+0 (used reg = )
38448 9B49           E8         E267            call	_write_word
38449 9B4C           83C4                   06  add	sp,*6
38450                                           !BCC_EOS
38451                                           ! 8129 }
38452 9B4F           89EC                       mov	sp,bp
38453 9B51           5D                         pop	bp
38454 9B52           C3                         ret
38455                                           ! 8130 #asm
38456                                           !BCC_ASM
38457                       00000008            _vbe_biosfn_set_mode.DI	set	8
38458                       00000006            _vbe_biosfn_set_mode.ES	set	6
38459                       00000002            _vbe_biosfn_set_mode.AX	set	2
38460                       00000004            _vbe_biosfn_set_mode.BX	set	4
38461                       00009B53            vbe_biosfn_return_current_mode:
38462 9B53           1E                           push ds
38463 9B54           B8                   0040    mov ax, # 0x40
38464 9B57           8ED8                         mov ds, ax
38465 9B59           E8         F7E9              call dispi_get_enable
38466 9B5C           25                   0001    and ax, # 0x01
38467 9B5F           74           09              jz no_vbe_mode
38468 9B61           BB                   00BA    mov bx, # 0xBA
38469 9B64           8B07                         mov ax, [bx]
38470 9B66           89C3                         mov bx, ax
38471 9B68           75           09              jnz vbe_03_ok
38472                       00009B6A            no_vbe_mode:
38473 9B6A           BB                   0049    mov bx, # 0x49
38474 9B6D           8A07                         mov al, [bx]
38475 9B6F           88C3                         mov bl, al
38476 9B71           30FF                         xor bh, bh
38477                       00009B73            vbe_03_ok:
38478 9B73           B8                   004F    mov ax, #0x004f
38479 9B76           1F                           pop ds
38480 9B77           C3                           ret
38481                                           ! 8151 endasm
38482                                           !BCC_ENDASM
38483                                           ! 8152 Bit16u vbe_biosfn_read_video_state_size()
38484                                           ! Register BX used in function vbe_biosfn_set_mode
38485                                           ! 8153 {
38486                                           export	_vbe_biosfn_read_video_state_size
38487                       00009B78            _vbe_biosfn_read_video_state_size:
38488                                           ! 8154     return 9 * 2;
38489 9B78           55                         push	bp
38490 9B79           89E5                       mov	bp,sp
38491 9B7B           B8                   0012  mov	ax,*$12
38492 9B7E           5D                         pop	bp
38493 9B7F           C3                         ret
38494                                           !BCC_EOS
38495                                           ! 8155 }
38496                                           ! 8156 void vbe_biosfn_save_video_state(ES, BX)
38497                                           ! 8157      Bit16u ES; Bit16u BX;
38498                                           export	_vbe_biosfn_save_video_state
38499                       00009B80            _vbe_biosfn_save_video_state:
38500                                           !BCC_EOS
38501                                           !BCC_EOS
38502                                           ! 8158 {
38503                                           ! 8159     Bit16u enable, i;
38504                                           !BCC_EOS
38505                                           ! 8160     outw(0x01CE,0x4);
38506 9B80           55                         push	bp
38507 9B81           89E5                       mov	bp,sp
38508 9B83           83C4                   FC  add	sp,*-4
38509                                           ! Debug: list int = const 4 (used reg = )
38510 9B86           B8                   0004  mov	ax,*4
38511 9B89           50                         push	ax
38512                                           ! Debug: list int = const $1CE (used reg = )
38513 9B8A           B8                   01CE  mov	ax,#$1CE
38514 9B8D           50                         push	ax
38515                                           ! Debug: func () void = outw+0 (used reg = )
38516 9B8E           E8         E260            call	_outw
38517 9B91           83C4                   04  add	sp,*4
38518                                           !BCC_EOS
38519                                           ! 8161     enable = inw(0x01CF);
38520                                           ! Debug: list int = const $1CF (used reg = )
38521 9B94           B8                   01CF  mov	ax,#$1CF
38522 9B97           50                         push	ax
38523                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38524 9B98           E8         E23B            call	_inw
38525 9B9B           44                         inc	sp
38526 9B9C           44                         inc	sp
38527                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38528 9B9D           8946         FE            mov	-2[bp],ax
38529                                           !BCC_EOS
38530                                           ! 8162     write_word(ES, BX, enable);
38531                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38532 9BA0           FF76         FE            push	-2[bp]
38533                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38534 9BA3           FF76         06            push	6[bp]
38535                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38536 9BA6           FF76         04            push	4[bp]
38537                                           ! Debug: func () void = write_word+0 (used reg = )
38538 9BA9           E8         E207            call	_write_word
38539 9BAC           83C4                   06  add	sp,*6
38540                                           !BCC_EOS
38541                                           ! 8163     BX += 2;
38542                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38543 9BAF           8B46         06            mov	ax,6[bp]
38544 9BB2           40                         inc	ax
38545 9BB3           40                         inc	ax
38546 9BB4           8946         06            mov	6[bp],ax
38547                                           !BCC_EOS
38548                                           ! 8164     if (!(enable & 0x01))
38549                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38550 9BB7           8A46         FE            mov	al,-2[bp]
38551 9BBA           24                     01  and	al,*1
38552 9BBC           84C0                       test	al,al
38553 9BBE           75           04            jne 	.315
38554                       00009BC0            .316:
38555                                           ! 8165         return;
38556 9BC0           89EC                       mov	sp,bp
38557 9BC2           5D                         pop	bp
38558 9BC3           C3                         ret
38559                                           !BCC_EOS
38560                                           ! 8166     for(i = 0x1; i <= 0x9; i++) {
38561                       00009BC4            .315:
38562                                           ! Debug: eq int = const 1 to unsigned short i = [S+6-6] (used reg = )
38563 9BC4           B8                   0001  mov	ax,*1
38564 9BC7           8946         FC            mov	-4[bp],ax
38565                                           !BCC_EOS
38566                                           !BCC_EOS
38567 9BCA           EB           3A            jmp .319
38568                       00009BCC            .31A:
38569                                           ! 8167         if (i != 0x4) {
38570                                           ! Debug: ne int = const 4 to unsigned short i = [S+6-6] (used reg = )
38571 9BCC           8B46         FC            mov	ax,-4[bp]
38572 9BCF           3D                   0004  cmp	ax,*4
38573 9BD2           74           2B            je  	.31B
38574                       00009BD4            .31C:
38575                                           ! 8168             outw(0x01CE, i);
38576                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38577 9BD4           FF76         FC            push	-4[bp]
38578                                           ! Debug: list int = const $1CE (used reg = )
38579 9BD7           B8                   01CE  mov	ax,#$1CE
38580 9BDA           50                         push	ax
38581                                           ! Debug: func () void = outw+0 (used reg = )
38582 9BDB           E8         E213            call	_outw
38583 9BDE           83C4                   04  add	sp,*4
38584                                           !BCC_EOS
38585                                           ! 8169             write_word(ES, BX, inw(0x01CF));
38586                                           ! Debug: list int = const $1CF (used reg = )
38587 9BE1           B8                   01CF  mov	ax,#$1CF
38588 9BE4           50                         push	ax
38589                                           ! Debug: func () unsigned short = inw+0 (used reg = )
38590 9BE5           E8         E1EE            call	_inw
38591 9BE8           44                         inc	sp
38592 9BE9           44                         inc	sp
38593                                           ! Debug: list unsigned short = ax+0 (used reg = )
38594 9BEA           50                         push	ax
38595                                           ! Debug: list unsigned short BX = [S+8+4] (used reg = )
38596 9BEB           FF76         06            push	6[bp]
38597                                           ! Debug: list unsigned short ES = [S+$A+2] (used reg = )
38598 9BEE           FF76         04            push	4[bp]
38599                                           ! Debug: func () void = write_word+0 (used reg = )
38600 9BF1           E8         E1BF            call	_write_word
38601 9BF4           83C4                   06  add	sp,*6
38602                                           !BCC_EOS
38603                                           ! 8170 
38604                                           ! 8170             BX += 2;
38605                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38606 9BF7           8B46         06            mov	ax,6[bp]
38607 9BFA           40                         inc	ax
38608 9BFB           40                         inc	ax
38609 9BFC           8946         06            mov	6[bp],ax
38610                                           !BCC_EOS
38611                                           ! 8171         }
38612                                           ! 8172     }
38613                       00009BFF            .31B:
38614                                           ! 8173 }
38615                       00009BFF            .318:
38616                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38617 9BFF           8B46         FC            mov	ax,-4[bp]
38618 9C02           40                         inc	ax
38619 9C03           8946         FC            mov	-4[bp],ax
38620                       00009C06            .319:
38621                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38622 9C06           8B46         FC            mov	ax,-4[bp]
38623 9C09           3D                   0009  cmp	ax,*9
38624 9C0C           76           BE            jbe	.31A
38625                       00009C0E            .31D:
38626                       00009C0E            .317:
38627 9C0E           89EC                       mov	sp,bp
38628 9C10           5D                         pop	bp
38629 9C11           C3                         ret
38630                                           ! 8174 void vbe_biosfn_restore_video_state(ES, BX)
38631                                           ! 8175      Bit16u ES; Bit16u BX;
38632                                           export	_vbe_biosfn_restore_video_state
38633                       00009C12            _vbe_biosfn_restore_video_state:
38634                                           !BCC_EOS
38635                                           !BCC_EOS
38636                                           ! 8176 {
38637                                           ! 8177     Bit16u enable, i;
38638                                           !BCC_EOS
38639                                           ! 8178     enable = read_word(ES, BX);
38640 9C12           55                         push	bp
38641 9C13           89E5                       mov	bp,sp
38642 9C15           83C4                   FC  add	sp,*-4
38643                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38644 9C18           FF76         06            push	6[bp]
38645                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38646 9C1B           FF76         04            push	4[bp]
38647                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38648 9C1E           E8         E167            call	_read_word
38649 9C21           83C4                   04  add	sp,*4
38650                                           ! Debug: eq unsigned short = ax+0 to unsigned short enable = [S+6-4] (used reg = )
38651 9C24           8946         FE            mov	-2[bp],ax
38652                                           !BCC_EOS
38653                                           ! 8179     BX += 2;
38654                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38655 9C27           8B46         06            mov	ax,6[bp]
38656 9C2A           40                         inc	ax
38657 9C2B           40                         inc	ax
38658 9C2C           8946         06            mov	6[bp],ax
38659                                           !BCC_EOS
38660                                           ! 8180     if (!(enable & 0x01)) {
38661                                           ! Debug: and int = const 1 to unsigned short enable = [S+6-4] (used reg = )
38662 9C2F           8A46         FE            mov	al,-2[bp]
38663 9C32           24                     01  and	al,*1
38664 9C34           84C0                       test	al,al
38665 9C36           75           1E            jne 	.31E
38666                       00009C38            .31F:
38667                                           ! 8181         outw(0x01CE,0x4);
38668                                           ! Debug: list int = const 4 (used reg = )
38669 9C38           B8                   0004  mov	ax,*4
38670 9C3B           50                         push	ax
38671                                           ! Debug: list int = const $1CE (used reg = )
38672 9C3C           B8                   01CE  mov	ax,#$1CE
38673 9C3F           50                         push	ax
38674                                           ! Debug: func () void = outw+0 (used reg = )
38675 9C40           E8         E1AE            call	_outw
38676 9C43           83C4                   04  add	sp,*4
38677                                           !BCC_EOS
38678                                           ! 8182         outw(0x01CF, enable);
38679                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38680 9C46           FF76         FE            push	-2[bp]
38681                                           ! Debug: list int = const $1CF (used reg = )
38682 9C49           B8                   01CF  mov	ax,#$1CF
38683 9C4C           50                         push	ax
38684                                           ! Debug: func () void = outw+0 (used reg = )
38685 9C4D           E8         E1A1            call	_outw
38686 9C50           83C4                   04  add	sp,*4
38687                                           !BCC_EOS
38688                                           ! 8183     } else {
38689 9C53           E9         00E5            br 	.320
38690                       00009C56            .31E:
38691                                           ! 8184         outw(0x01CE, 0x1);
38692                                           ! Debug: list int = const 1 (used reg = )
38693 9C56           B8                   0001  mov	ax,*1
38694 9C59           50                         push	ax
38695                                           ! Debug: list int = const $1CE (used reg = )
38696 9C5A           B8                   01CE  mov	ax,#$1CE
38697 9C5D           50                         push	ax
38698                                           ! Debug: func () void = outw+0 (used reg = )
38699 9C5E           E8         E190            call	_outw
38700 9C61           83C4                   04  add	sp,*4
38701                                           !BCC_EOS
38702                                           ! 8185         outw(0x01CF, read_word(ES, BX));
38703                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38704 9C64           FF76         06            push	6[bp]
38705                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38706 9C67           FF76         04            push	4[bp]
38707                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38708 9C6A           E8         E11B            call	_read_word
38709 9C6D           83C4                   04  add	sp,*4
38710                                           ! Debug: list unsigned short = ax+0 (used reg = )
38711 9C70           50                         push	ax
38712                                           ! Debug: list int = const $1CF (used reg = )
38713 9C71           B8                   01CF  mov	ax,#$1CF
38714 9C74           50                         push	ax
38715                                           ! Debug: func () void = outw+0 (used reg = )
38716 9C75           E8         E179            call	_outw
38717 9C78           83C4                   04  add	sp,*4
38718                                           !BCC_EOS
38719                                           ! 8186         BX += 2;
38720                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38721 9C7B           8B46         06            mov	ax,6[bp]
38722 9C7E           40                         inc	ax
38723 9C7F           40                         inc	ax
38724 9C80           8946         06            mov	6[bp],ax
38725                                           !BCC_EOS
38726                                           ! 8187         outw(0x01CE, 0x2);
38727                                           ! Debug: list int = const 2 (used reg = )
38728 9C83           B8                   0002  mov	ax,*2
38729 9C86           50                         push	ax
38730                                           ! Debug: list int = const $1CE (used reg = )
38731 9C87           B8                   01CE  mov	ax,#$1CE
38732 9C8A           50                         push	ax
38733                                           ! Debug: func () void = outw+0 (used reg = )
38734 9C8B           E8         E163            call	_outw
38735 9C8E           83C4                   04  add	sp,*4
38736                                           !BCC_EOS
38737                                           ! 8188         outw(0x01CF, read_word(ES, BX));
38738                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38739 9C91           FF76         06            push	6[bp]
38740                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38741 9C94           FF76         04            push	4[bp]
38742                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38743 9C97           E8         E0EE            call	_read_word
38744 9C9A           83C4                   04  add	sp,*4
38745                                           ! Debug: list unsigned short = ax+0 (used reg = )
38746 9C9D           50                         push	ax
38747                                           ! Debug: list int = const $1CF (used reg = )
38748 9C9E           B8                   01CF  mov	ax,#$1CF
38749 9CA1           50                         push	ax
38750                                           ! Debug: func () void = outw+0 (used reg = )
38751 9CA2           E8         E14C            call	_outw
38752 9CA5           83C4                   04  add	sp,*4
38753                                           !BCC_EOS
38754                                           ! 8189         BX += 2;
38755                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38756 9CA8           8B46         06            mov	ax,6[bp]
38757 9CAB           40                         inc	ax
38758 9CAC           40                         inc	ax
38759 9CAD           8946         06            mov	6[bp],ax
38760                                           !BCC_EOS
38761                                           ! 8190         outw(0x01CE, 0x3);
38762                                           ! Debug: list int = const 3 (used reg = )
38763 9CB0           B8                   0003  mov	ax,*3
38764 9CB3           50                         push	ax
38765                                           ! Debug: list int = const $1CE (used reg = )
38766 9CB4           B8                   01CE  mov	ax,#$1CE
38767 9CB7           50                         push	ax
38768                                           ! Debug: func () void = outw+0 (used reg = )
38769 9CB8           E8         E136            call	_outw
38770 9CBB           83C4                   04  add	sp,*4
38771                                           !BCC_EOS
38772                                           ! 8191         outw(0x01CF, read_word(ES, BX));
38773                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38774 9CBE           FF76         06            push	6[bp]
38775                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38776 9CC1           FF76         04            push	4[bp]
38777                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38778 9CC4           E8         E0C1            call	_read_word
38779 9CC7           83C4                   04  add	sp,*4
38780                                           ! Debug: list unsigned short = ax+0 (used reg = )
38781 9CCA           50                         push	ax
38782                                           ! Debug: list int = const $1CF (used reg = )
38783 9CCB           B8                   01CF  mov	ax,#$1CF
38784 9CCE           50                         push	ax
38785                                           ! Debug: func () void = outw+0 (used reg = )
38786 9CCF           E8         E11F            call	_outw
38787 9CD2           83C4                   04  add	sp,*4
38788                                           !BCC_EOS
38789                                           ! 8192         BX += 2;
38790                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38791 9CD5           8B46         06            mov	ax,6[bp]
38792 9CD8           40                         inc	ax
38793 9CD9           40                         inc	ax
38794 9CDA           8946         06            mov	6[bp],ax
38795                                           !BCC_EOS
38796                                           ! 8193         outw(0x01CE,0x4);
38797                                           ! Debug: list int = const 4 (used reg = )
38798 9CDD           B8                   0004  mov	ax,*4
38799 9CE0           50                         push	ax
38800                                           ! Debug: list int = const $1CE (used reg = )
38801 9CE1           B8                   01CE  mov	ax,#$1CE
38802 9CE4           50                         push	ax
38803                                           ! Debug: func () void = outw+0 (used reg = )
38804 9CE5           E8         E109            call	_outw
38805 9CE8           83C4                   04  add	sp,*4
38806                                           !BCC_EOS
38807                                           ! 8194         outw(0x01CF, enable);
38808                                           ! Debug: list unsigned short enable = [S+6-4] (used reg = )
38809 9CEB           FF76         FE            push	-2[bp]
38810                                           ! Debug: list int = const $1CF (used reg = )
38811 9CEE           B8                   01CF  mov	ax,#$1CF
38812 9CF1           50                         push	ax
38813                                           ! Debug: func () void = outw+0 (used reg = )
38814 9CF2           E8         E0FC            call	_outw
38815 9CF5           83C4                   04  add	sp,*4
38816                                           !BCC_EOS
38817                                           ! 8195         for(i = 0x5; i <= 0x9; i++) {
38818                                           ! Debug: eq int = const 5 to unsigned short i = [S+6-6] (used reg = )
38819 9CF8           B8                   0005  mov	ax,*5
38820 9CFB           8946         FC            mov	-4[bp],ax
38821                                           !BCC_EOS
38822                                           !BCC_EOS
38823 9CFE           EB           33            jmp .323
38824                       00009D00            .324:
38825                                           ! 8196             outw(0x01CE, i);
38826                                           ! Debug: list unsigned short i = [S+6-6] (used reg = )
38827 9D00           FF76         FC            push	-4[bp]
38828                                           ! Debug: list int = const $1CE (used reg = )
38829 9D03           B8                   01CE  mov	ax,#$1CE
38830 9D06           50                         push	ax
38831                                           ! Debug: func () void = outw+0 (used reg = )
38832 9D07           E8         E0E7            call	_outw
38833 9D0A           83C4                   04  add	sp,*4
38834                                           !BCC_EOS
38835                                           ! 8197             outw(0x01CF, read_word(ES, BX));
38836                                           ! Debug: list unsigned short BX = [S+6+4] (used reg = )
38837 9D0D           FF76         06            push	6[bp]
38838                                           ! Debug: list unsigned short ES = [S+8+2] (used reg = )
38839 9D10           FF76         04            push	4[bp]
38840                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38841 9D13           E8         E072            call	_read_word
38842 9D16           83C4                   04  add	sp,*4
38843                                           ! Debug: list unsigned short = ax+0 (used reg = )
38844 9D19           50                         push	ax
38845                                           ! Debug: list int = const $1CF (used reg = )
38846 9D1A           B8                   01CF  mov	ax,#$1CF
38847 9D1D           50                         push	ax
38848                                           ! Debug: func () void = outw+0 (used reg = )
38849 9D1E           E8         E0D0            call	_outw
38850 9D21           83C4                   04  add	sp,*4
38851                                           !BCC_EOS
38852                                           ! 8198             BX += 2;
38853                                           ! Debug: addab int = const 2 to unsigned short BX = [S+6+4] (used reg = )
38854 9D24           8B46         06            mov	ax,6[bp]
38855 9D27           40                         inc	ax
38856 9D28           40                         inc	ax
38857 9D29           8946         06            mov	6[bp],ax
38858                                           !BCC_EOS
38859                                           ! 8199         }
38860                                           ! 8200     }
38861                       00009D2C            .322:
38862                                           ! Debug: postinc unsigned short i = [S+6-6] (used reg = )
38863 9D2C           8B46         FC            mov	ax,-4[bp]
38864 9D2F           40                         inc	ax
38865 9D30           8946         FC            mov	-4[bp],ax
38866                       00009D33            .323:
38867                                           ! Debug: le int = const 9 to unsigned short i = [S+6-6] (used reg = )
38868 9D33           8B46         FC            mov	ax,-4[bp]
38869 9D36           3D                   0009  cmp	ax,*9
38870 9D39           76           C5            jbe	.324
38871                       00009D3B            .325:
38872                       00009D3B            .321:
38873                                           ! 8201 }
38874                       00009D3B            .320:
38875 9D3B           89EC                       mov	sp,bp
38876 9D3D           5D                         pop	bp
38877 9D3E           C3                         ret
38878                                           ! 8202 void vbe_biosfn_save_restore_state(AX, CX, DX, ES, BX)
38879                                           ! 8203 Bit16u *AX; Bit16u CX; Bit16u DX; Bit16u ES; Bit16u *BX;
38880                                           export	_vbe_biosfn_save_restore_state
38881                       00009D3F            _vbe_biosfn_save_restore_state:
38882                                           !BCC_EOS
38883                                           !BCC_EOS
38884                                           !BCC_EOS
38885                                           !BCC_EOS
38886                                           !BCC_EOS
38887                                           ! 8204 {
38888                                           ! 8205     Bit16u ss=get_SS();
38889 9D3F           55                         push	bp
38890 9D40           89E5                       mov	bp,sp
38891 9D42           4C                         dec	sp
38892 9D43           4C                         dec	sp
38893                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
38894 9D44           E8         E0BA            call	_get_SS
38895                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
38896 9D47           8946         FE            mov	-2[bp],ax
38897                                           !BCC_EOS
38898                                           ! 8206     Bit16u result, val;
38899                                           !BCC_EOS
38900                                           ! 8207     result = 0x4f;
38901 9D4A           83C4                   FC  add	sp,*-4
38902                                           ! Debug: eq int = const $4F to unsigned short result = [S+8-6] (used reg = )
38903 9D4D           B8                   004F  mov	ax,*$4F
38904 9D50           8946         FC            mov	-4[bp],ax
38905                                           !BCC_EOS
38906                                           ! 8208     switch(( DX & 0x00ff )) {
38907                                           ! Debug: and int = const $FF to unsigned short DX = [S+8+6] (used reg = )
38908 9D53           8A46         08            mov	al,8[bp]
38909 9D56           E9         00D0            br 	.328
38910                                           ! 8209     case 0x00:
38911                                           ! 8210         val = biosfn_read_video_state_size2(CX);
38912                       00009D59            .329:
38913                                           ! Debug: list unsigned short CX = [S+8+4] (used reg = )
38914 9D59           FF76         06            push	6[bp]
38915                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
38916 9D5C           E8         D317            call	_biosfn_read_video_state_size2
38917 9D5F           44                         inc	sp
38918 9D60           44                         inc	sp
38919                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38920 9D61           8946         FA            mov	-6[bp],ax
38921                                           !BCC_EOS
38922                                           ! 8211         printf("VGA state size=%x\n", val);
38923                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38924 9D64           FF76         FA            push	-6[bp]
38925                                           ! Debug: list * char = .32A+0 (used reg = )
38926 9D67           BB                   9F91  mov	bx,#.32A
38927 9D6A           53                         push	bx
38928                                           ! Debug: func () void = printf+0 (used reg = )
38929 9D6B           E8         E0B2            call	_printf
38930 9D6E           83C4                   04  add	sp,*4
38931                                           !BCC_EOS
38932                                           ! 8212         if (CX & 8)
38933                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38934 9D71           8A46         06            mov	al,6[bp]
38935 9D74           24                     08  and	al,*8
38936 9D76           84C0                       test	al,al
38937 9D78           74           09            je  	.32B
38938                       00009D7A            .32C:
38939                                           ! 8213             val += vbe_biosfn_read_video_state_size();
38940                                           ! Debug: func () unsigned short = vbe_biosfn_read_video_state_size+0 (used reg = )
38941 9D7A           E8         FDFB            call	_vbe_biosfn_read_video_state_size
38942                                           ! Debug: addab unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38943 9D7D           0346         FA            add	ax,-6[bp]
38944 9D80           8946         FA            mov	-6[bp],ax
38945                                           !BCC_EOS
38946                                           ! 8214         write_word(ss, BX, val);
38947                       00009D83            .32B:
38948                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38949 9D83           FF76         FA            push	-6[bp]
38950                                           ! Debug: list * unsigned short BX = [S+$A+$A] (used reg = )
38951 9D86           FF76         0C            push	$C[bp]
38952                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
38953 9D89           FF76         FE            push	-2[bp]
38954                                           ! Debug: func () void = write_word+0 (used reg = )
38955 9D8C           E8         E024            call	_write_word
38956 9D8F           83C4                   06  add	sp,*6
38957                                           !BCC_EOS
38958                                           ! 8215         break;
38959 9D92           E9         00A6            br 	.326
38960                                           !BCC_EOS
38961                                           ! 8216     case 0x01:
38962                                           ! 8217         val = read_word(ss, BX);
38963                       00009D95            .32D:
38964                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
38965 9D95           FF76         0C            push	$C[bp]
38966                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
38967 9D98           FF76         FE            push	-2[bp]
38968                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
38969 9D9B           E8         DFEA            call	_read_word
38970 9D9E           83C4                   04  add	sp,*4
38971                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38972 9DA1           8946         FA            mov	-6[bp],ax
38973                                           !BCC_EOS
38974                                           ! 8218         val = biosfn_save_video_state(CX, ES, val);
38975                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38976 9DA4           FF76         FA            push	-6[bp]
38977                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
38978 9DA7           FF76         0A            push	$A[bp]
38979                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
38980 9DAA           FF76         06            push	6[bp]
38981                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
38982 9DAD           E8         D331            call	_biosfn_save_video_state
38983 9DB0           83C4                   06  add	sp,*6
38984                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
38985 9DB3           8946         FA            mov	-6[bp],ax
38986                                           !BCC_EOS
38987                                           ! 8219         printf("VGA save_state offset=%x\n", val);
38988                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
38989 9DB6           FF76         FA            push	-6[bp]
38990                                           ! Debug: list * char = .32E+0 (used reg = )
38991 9DB9           BB                   9F77  mov	bx,#.32E
38992 9DBC           53                         push	bx
38993                                           ! Debug: func () void = printf+0 (used reg = )
38994 9DBD           E8         E060            call	_printf
38995 9DC0           83C4                   04  add	sp,*4
38996                                           !BCC_EOS
38997                                           ! 8220         if (CX & 8)
38998                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
38999 9DC3           8A46         06            mov	al,6[bp]
39000 9DC6           24                     08  and	al,*8
39001 9DC8           84C0                       test	al,al
39002 9DCA           74           0C            je  	.32F
39003                       00009DCC            .330:
39004                                           ! 8221             vbe_biosfn_save_video_state(ES, val);
39005                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39006 9DCC           FF76         FA            push	-6[bp]
39007                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39008 9DCF           FF76         0A            push	$A[bp]
39009                                           ! Debug: func () void = vbe_biosfn_save_video_state+0 (used reg = )
39010 9DD2           E8         FDAB            call	_vbe_biosfn_save_video_state
39011 9DD5           83C4                   04  add	sp,*4
39012                                           !BCC_EOS
39013                                           ! 8222         break;
39014                       00009DD8            .32F:
39015 9DD8           EB           61            jmp .326
39016                                           !BCC_EOS
39017                                           ! 8223     case 0x02:
39018                                           ! 8224         val = read_word(ss, BX);
39019                       00009DDA            .331:
39020                                           ! Debug: list * unsigned short BX = [S+8+$A] (used reg = )
39021 9DDA           FF76         0C            push	$C[bp]
39022                                           ! Debug: list unsigned short ss = [S+$A-4] (used reg = )
39023 9DDD           FF76         FE            push	-2[bp]
39024                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
39025 9DE0           E8         DFA5            call	_read_word
39026 9DE3           83C4                   04  add	sp,*4
39027                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39028 9DE6           8946         FA            mov	-6[bp],ax
39029                                           !BCC_EOS
39030                                           ! 8225         val = biosfn_restore_video_state(CX, ES, val);
39031                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39032 9DE9           FF76         FA            push	-6[bp]
39033                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39034 9DEC           FF76         0A            push	$A[bp]
39035                                           ! Debug: list unsigned short CX = [S+$C+4] (used reg = )
39036 9DEF           FF76         06            push	6[bp]
39037                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
39038 9DF2           E8         D8B6            call	_biosfn_restore_video_state
39039 9DF5           83C4                   06  add	sp,*6
39040                                           ! Debug: eq unsigned short = ax+0 to unsigned short val = [S+8-8] (used reg = )
39041 9DF8           8946         FA            mov	-6[bp],ax
39042                                           !BCC_EOS
39043                                           ! 8226         printf("VGA restore_state offset=%x\n", val);
39044                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39045 9DFB           FF76         FA            push	-6[bp]
39046                                           ! Debug: list * char = .332+0 (used reg = )
39047 9DFE           BB                   9F5A  mov	bx,#.332
39048 9E01           53                         push	bx
39049                                           ! Debug: func () void = printf+0 (used reg = )
39050 9E02           E8         E01B            call	_printf
39051 9E05           83C4                   04  add	sp,*4
39052                                           !BCC_EOS
39053                                           ! 8227         if (CX & 8)
39054                                           ! Debug: and int = const 8 to unsigned short CX = [S+8+4] (used reg = )
39055 9E08           8A46         06            mov	al,6[bp]
39056 9E0B           24                     08  and	al,*8
39057 9E0D           84C0                       test	al,al
39058 9E0F           74           0C            je  	.333
39059                       00009E11            .334:
39060                                           ! 8228             vbe_biosfn_restore_video_state(ES, val);
39061                                           ! Debug: list unsigned short val = [S+8-8] (used reg = )
39062 9E11           FF76         FA            push	-6[bp]
39063                                           ! Debug: list unsigned short ES = [S+$A+8] (used reg = )
39064 9E14           FF76         0A            push	$A[bp]
39065                                           ! Debug: func () void = vbe_biosfn_restore_video_state+0 (used reg = )
39066 9E17           E8         FDF8            call	_vbe_biosfn_restore_video_state
39067 9E1A           83C4                   04  add	sp,*4
39068                                           !BCC_EOS
39069                                           ! 8229         break;
39070                       00009E1D            .333:
39071 9E1D           EB           1C            jmp .326
39072                                           !BCC_EOS
39073                                           ! 8230     default:
39074                                           ! 8231         result = 0x100;
39075                       00009E1F            .335:
39076                                           ! Debug: eq int = const $100 to unsigned short result = [S+8-6] (used reg = )
39077 9E1F           B8                   0100  mov	ax,#$100
39078 9E22           8946         FC            mov	-4[bp],ax
39079                                           !BCC_EOS
39080                                           ! 8232         break;
39081 9E25           EB           14            jmp .326
39082                                           !BCC_EOS
39083                                           ! 8233     }
39084                                           ! 8234     write_word(ss, AX, result);
39085 9E27           EB           12            jmp .326
39086                       00009E29            .328:
39087 9E29           2C                     00  sub	al,*0
39088 9E2B         0F84         FF2A            beq 	.329
39089 9E2F           2C                     01  sub	al,*1
39090 9E31         0F84         FF60            beq 	.32D
39091 9E35           2C                     01  sub	al,*1
39092 9E37           74           A1            je 	.331
39093 9E39           EB           E4            jmp	.335
39094                       00009E3B            .326:
39095                       FFFFFFF8            ..FFF4	=	-8
39096                                           ! Debug: list unsigned short result = [S+8-6] (used reg = )
39097 9E3B           FF76         FC            push	-4[bp]
39098                                           ! Debug: list * unsigned short AX = [S+$A+2] (used reg = )
39099 9E3E           FF76         04            push	4[bp]
39100                                           ! Debug: list unsigned short ss = [S+$C-4] (used reg = )
39101 9E41           FF76         FE            push	-2[bp]
39102                                           ! Debug: func () void = write_word+0 (used reg = )
39103 9E44           E8         DF6C            call	_write_word
39104 9E47           83C4                   06  add	sp,*6
39105                                           !BCC_EOS
39106                                           ! 8235 }
39107 9E4A           89EC                       mov	sp,bp
39108 9E4C           5D                         pop	bp
39109 9E4D           C3                         ret
39110                                           ! 8236 #asm
39111                                           !BCC_ASM
39112                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39113                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39114                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39115                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39116                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39117                       00009E4E            vbe_biosfn_display_window_control:
39118 9E4E           80FB                   00    cmp bl, #0x00
39119 9E51           75           24              jne vbe_05_failed
39120 9E53           80FF                   01    cmp bh, #0x01
39121 9E56           74           16              je get_display_window
39122 9E58           72           04              jb set_display_window
39123 9E5A           B8                   0100    mov ax, #0x0100
39124 9E5D           C3                           ret
39125                       00009E5E            set_display_window:
39126 9E5E           89D0                         mov ax, dx
39127 9E60           E8         F4F0              call _dispi_set_bank
39128 9E63           E8         F4FD              call dispi_get_bank
39129 9E66           39D0                         cmp ax, dx
39130 9E68           75           0D              jne vbe_05_failed
39131 9E6A           B8                   004F    mov ax, #0x004f
39132 9E6D           C3                           ret
39133                       00009E6E            get_display_window:
39134 9E6E           E8         F4F2              call dispi_get_bank
39135 9E71           89C2                         mov dx, ax
39136 9E73           B8                   004F    mov ax, #0x004f
39137 9E76           C3                           ret
39138                       00009E77            vbe_05_failed:
39139 9E77           B8                   014F    mov ax, #0x014f
39140 9E7A           C3                           ret
39141                                           ! 8261 endasm
39142                                           !BCC_ENDASM
39143                                           ! 8262 #asm
39144                                           !BCC_ASM
39145                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39146                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39147                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39148                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39149                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39150                       00009E7B            vbe_biosfn_set_get_logical_scan_line_length:
39151 9E7B           89C8                         mov ax, cx
39152 9E7D           80FB                   01    cmp bl, #0x01
39153 9E80           74           24              je get_logical_scan_line_length
39154 9E82           80FB                   02    cmp bl, #0x02
39155 9E85           74           06              je set_logical_scan_line_bytes
39156 9E87           72           1A              jb set_logical_scan_line_pixels
39157 9E89           B8                   0100    mov ax, #0x0100
39158 9E8C           C3                           ret
39159                       00009E8D            set_logical_scan_line_bytes:
39160 9E8D           50                           push ax
39161 9E8E           E8         F447              call dispi_get_bpp
39162 9E91           30FF                         xor bh, bh
39163 9E93           88E3                         mov bl, ah
39164 9E95           08DB                         or bl, bl
39165 9E97           75           05              jnz no_4bpp_1
39166 9E99           C1E0                   03    shl ax, #3
39167 9E9C           B3                     01    mov bl, #1
39168                       00009E9E            no_4bpp_1:
39169 9E9E           31D2                         xor dx, dx
39170 9EA0           58                           pop ax
39171 9EA1           F7F3                         div bx
39172                       00009EA3            set_logical_scan_line_pixels:
39173 9EA3           E8         F55B              call dispi_set_virt_width
39174                       00009EA6            get_logical_scan_line_length:
39175 9EA6           E8         F42F              call dispi_get_bpp
39176 9EA9           30FF                         xor bh, bh
39177 9EAB           88E3                         mov bl, ah
39178 9EAD           E8         F564              call dispi_get_virt_width
39179 9EB0           89C1                         mov cx, ax
39180 9EB2           08DB                         or bl, bl
39181 9EB4           75           05              jnz no_4bpp_2
39182 9EB6           C1E8                   03    shr ax, #3
39183 9EB9           B3                     01    mov bl, #1
39184                       00009EBB            no_4bpp_2:
39185 9EBB           F7E3                         mul bx
39186 9EBD           89C3                         mov bx, ax
39187 9EBF           E8         F560              call dispi_get_virt_height
39188 9EC2           89C2                         mov dx, ax
39189 9EC4           B8                   004F    mov ax, #0x004f
39190 9EC7           C3                           ret
39191                                           ! 8304 endasm
39192                                           !BCC_ENDASM
39193                                           ! 8305 #asm
39194                                           !BCC_ASM
39195                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39196                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39197                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39198                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39199                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39200                       00009EC8            vbe_biosfn_set_get_display_start:
39201 9EC8           80FB                   80    cmp bl, #0x80
39202 9ECB           74           0B              je set_display_start
39203 9ECD           80FB                   01    cmp bl, #0x01
39204 9ED0           74           14              je get_display_start
39205 9ED2           72           04              jb set_display_start
39206 9ED4           B8                   0100    mov ax, #0x0100
39207 9ED7           C3                           ret
39208                       00009ED8            set_display_start:
39209 9ED8           89C8                         mov ax, cx
39210 9EDA           E8         F4CB              call dispi_set_x_offset
39211 9EDD           89D0                         mov ax, dx
39212 9EDF           E8         F4E4              call dispi_set_y_offset
39213 9EE2           B8                   004F    mov ax, #0x004f
39214 9EE5           C3                           ret
39215                       00009EE6            get_display_start:
39216 9EE6           E8         F4CF              call dispi_get_x_offset
39217 9EE9           89C1                         mov cx, ax
39218 9EEB           E8         F4E8              call dispi_get_y_offset
39219 9EEE           89C2                         mov dx, ax
39220 9EF0           30FF                         xor bh, bh
39221 9EF2           B8                   004F    mov ax, #0x004f
39222 9EF5           C3                           ret
39223                                           ! 8329 endasm
39224                                           !BCC_ENDASM
39225                                           ! 8330 #asm
39226                                           !BCC_ASM
39227                       00000004            _vbe_biosfn_save_restore_state.CX	set	4
39228                       00000006            _vbe_biosfn_save_restore_state.DX	set	6
39229                       00000008            _vbe_biosfn_save_restore_state.ES	set	8
39230                       00000002            _vbe_biosfn_save_restore_state.AX	set	2
39231                       0000000A            _vbe_biosfn_save_restore_state.BX	set	$A
39232                       00009EF6            vbe_biosfn_set_get_dac_palette_format:
39233 9EF6           80FB                   01    cmp bl, #0x01
39234 9EF9           74           1E              je get_dac_palette_format
39235 9EFB           72           04              jb set_dac_palette_format
39236 9EFD           B8                   0100    mov ax, #0x0100
39237 9F00           C3                           ret
39238                       00009F01            set_dac_palette_format:
39239 9F01           E8         F441              call dispi_get_enable
39240 9F04           80FF                   06    cmp bh, #0x06
39241 9F07           74           0A              je set_normal_dac
39242 9F09           80FF                   08    cmp bh, #0x08
39243 9F0C           75           1B              jne vbe_08_unsupported
39244 9F0E           0D                   0020    or ax, # 0x20
39245 9F11           75           03              jnz set_dac_mode
39246                       00009F13            set_normal_dac:
39247 9F13           25                   FFDF    and ax, #~ 0x20
39248                       00009F16            set_dac_mode:
39249 9F16           E8         F41C              call _dispi_set_enable
39250                       00009F19            get_dac_palette_format:
39251 9F19           B7                     06    mov bh, #0x06
39252 9F1B           E8         F427              call dispi_get_enable
39253 9F1E           25                   0020    and ax, # 0x20
39254 9F21           74           02              jz vbe_08_ok
39255 9F23           B7                     08    mov bh, #0x08
39256                       00009F25            vbe_08_ok:
39257 9F25           B8                   004F    mov ax, #0x004f
39258 9F28           C3                           ret
39259                       00009F29            vbe_08_unsupported:
39260 9F29           B8                   014F    mov ax, #0x014f
39261 9F2C           C3                           ret
39262                                           ! 8361 endasm
39263                                           !BCC_ENDASM
39264                                           ! 8362 void vbe_biosfn_set_get_palette_data(AX)
39265                                           ! Register BX used in function vbe_biosfn_save_restore_state
39266                                           ! 8363 {
39267                                           export	_vbe_biosfn_set_get_palette_data
39268                       00009F2D            _vbe_biosfn_set_get_palette_data:
39269                                           ! 8364 }
39270 9F2D           C3                         ret
39271                                           ! 8365 #asm
39272                                           !BCC_ASM
39273                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39274                       00009F2E            vbe_biosfn_return_protected_mode_interface:
39275 9F2E           84DB                         test bl, bl
39276 9F30           75           11              jnz _fail
39277 9F32           BF                   C000    mov di, #0xc000
39278 9F35           8EC7                         mov es, di
39279 9F37           BF                   9166    mov di, # vesa_pm_start
39280 9F3A           B9                   9267    mov cx, # vesa_pm_end
39281 9F3D           29F9                         sub cx, di
39282 9F3F           B8                   004F    mov ax, #0x004f
39283 9F42           C3                           ret
39284                       00009F43            _fail:
39285 9F43           B8                   014F    mov ax, #0x014f
39286 9F46           C3                           ret
39287                                           ! 8379 endasm
39288                                           !BCC_ENDASM
39289                                           ! 8380 #asm
39290                                           !BCC_ASM
39291                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39292                                           ;; DATA_SEG_DEFS_HERE
39293                                           ! 8382 endasm
39294                                           !BCC_ENDASM
39295                                           ! 8383 #asm
39296                                           !BCC_ASM
39297                       00000002            _vbe_biosfn_set_get_palette_data.AX	set	2
39298 9F47                        76            .ascii "vgabios ends here"
39299 9F58                        00            .byte 0x00
39300                       00009F59            vgabios_end:
39301 9F59                        CB            .byte 0xCB
39302                                           ;; BLOCK_STRINGS_BEGIN
39303                                           ! 8389 endasm
39304                                           !BCC_ENDASM
39305                                           ! 8390 
39306                                           
39307                       00009F5A            .332:
39308                       00009F5A            .336:
39309 9F5A                        56            .ascii	"VGA restore_state offset=%x"
39310 9F75                        0A            .byte	$A
39311 9F76                        00            .byte	0
39312                       00009F77            .32E:
39313                       00009F77            .337:
39314 9F77                        56            .ascii	"VGA save_state offset=%x"
39315 9F8F                        0A            .byte	$A
39316 9F90                        00            .byte	0
39317                       00009F91            .32A:
39318                       00009F91            .338:
39319 9F91                        56            .ascii	"VGA state size=%x"
39320 9FA2                        0A            .byte	$A
39321 9FA3                        00            .byte	0
39322                       00009FA4            .312:
39323                       00009FA4            .339:
39324 9FA4                        56            .ascii	"VBE *NOT* found mode %x"
39325 9FBB                        0A            .byte	$A
39326 9FBC                        00            .byte	0
39327                       00009FBD            .30E:
39328                       00009FBD            .33A:
39329 9FBD                        09            .byte	9
39330 9FBE                        78            .ascii	"xres%x yres%x bpp%x"
39331 9FD1                        0A            .byte	$A
39332 9FD2                        00            .byte	0
39333                       00009FD3            .30D:
39334                       00009FD3            .33B:
39335 9FD3                        56            .ascii	"VBE found mode %x, setting:"
39336 9FEE                        0A            .byte	$A
39337 9FEF                        00            .byte	0
39338                       00009FF0            .2FE:
39339                       00009FF0            .33C:
39340 9FF0                        56            .ascii	"VBE *NOT* found mode %x"
39341 A007                        0A            .byte	$A
39342 A008                        00            .byte	0
39343                       0000A009            .2F6:
39344                       0000A009            .33D:
39345 A009                        56            .ascii	"VBE found mode %x"
39346 A01A                        0A            .byte	$A
39347 A01B                        00            .byte	0
39348                       0000A01C            .2F1:
39349                       0000A01C            .33E:
39350 A01C                        56            .ascii	"VBE vbe_biosfn_return_mode_information E"
39351 A044                        53            .ascii	"S%x DI%x CX%x"
39352 A051                        0A            .byte	$A
39353 A052                        00            .byte	0
39354                       0000A053            .2EF:
39355                       0000A053            .33F:
39356 A053                        56            .ascii	"VBE mode %x (xres=%x / bpp=%02x) not sup"
39357 A07B                        70            .ascii	"ported "
39358 A082                        0A            .byte	$A
39359 A083                        00            .byte	0
39360                       0000A084            .2ED:
39361                       0000A084            .340:
39362 A084                        56            .ascii	"VBE found mode %x => %x"
39363 A09B                        0A            .byte	$A
39364 A09C                        00            .byte	0
39365                       0000A09D            .2E2:
39366                       0000A09D            .341:
39367 A09D                        56            .ascii	"VBE correct VESA/VBE2 signature found"
39368 A0C2                        0A            .byte	$A
39369 A0C3                        00            .byte	0
39370                       0000A0C4            .2D8:
39371                       0000A0C4            .342:
39372 A0C4                        56            .ascii	"VBE vbe_biosfn_return_vbe_info ES%x DI%x"
39373 A0EC                        20            .ascii	" AX%x"
39374 A0F1                        0A            .byte	$A
39375 A0F2                        00            .byte	0
39376                       0000A0F3            .2B0:
39377                       0000A0F3            .343:
39378 A0F3                        2D            .ascii	"--> Unknown int10"
39379 A104                        0A            .byte	$A
39380 A105                        00            .byte	0
39381                       0000A106            .2AF:
39382                       0000A106            .344:
39383 A106                        2D            .ascii	"--> Unimplemented"
39384 A117                        0A            .byte	$A
39385 A118                        00            .byte	0
39386                       0000A119            .249:
39387                       0000A119            .345:
39388 A119                        47            .ascii	"Get font info BH(%02x) was discarded"
39389 A13D                        0A            .byte	$A
39390 A13E                        00            .byte	0
39391                       0000A13F            .147:
39392                       0000A13F            .346:
39393 A13F                        53            .ascii	"Scroll in graphics mode "
39394 A157                        00            .byte	0
39395                       0000A158            .E2:
39396                       0000A158            .347:
39397 A158                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
39398 A17D                        0A            .byte	$A
39399 A17E                        00            .byte	0
39400                       0000A17F            .B7:
39401                       0000A17F            .348:
39402 A17F                        53            .ascii	"Set active page %02x address %04x"
39403 A1A0                        0A            .byte	$A
39404 A1A1                        00            .byte	0
39405                       0000A1A2            .5E:
39406                       0000A1A2            .349:
39407 A1A2                        6D            .ascii	"mode search %02x found line %02x"
39408 A1C2                        0A            .byte	$A
39409 A1C3                        00            .byte	0
39410                       0000A1C4            .3:
39411                       0000A1C4            .34A:
39412 A1C4                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
39413 A1EC                        20            .ascii	" dx%04x"
39414 A1F3                        0A            .byte	$A
39415 A1F4                        00            .byte	0
39416 A1F5                                      .bss
39417                                           
39418                                           ! 0 errors detected

Symbols:
..FFF4                      0 FFF8 A   ..FFF5                      0 FFFC A   
..FFF6                      0 FFEE A   ..FFF7                      0 FFF4 A   
..FFF8                      0 FFF6 A   ..FFF9                      0 FFEE A   
..FFFA                      0 FFEE A   ..FFFB                      0 FFF2 A   
..FFFC                      0 FFF0 A   ..FFFD                      0 FFE8 A   
..FFFE                      0 FFE8 A   ..FFFF                      0 FFFE A   
.1                          0 3699 A   .10                         0 36C6 A   
.100                        0 4D0C A   .101                        0 50F2 A   
.102                        0 50F2 A   .104                        0 50DE A   
.105                        0 4D41 A   .106                        0 4D41 A   
.107                        0 4DD3 A   .108                        0 4D7E A   
.109                        0 4D6C A   .10A                        0 4D5A A   
.10B                        0 4D53 A   .10C                        0 4D4A A   
.10D                        0 4EF4 A   .10E                        0 4E66 A   
.10F                        0 4DDC A   .11                         0 36C6 A   
.110                        0 4E63 A   .111                        0 4E52 A   
.112                        0 4E59 A   .113                        0 4DE6 A   
.114                        0 4E2A A   .115                        0 4E04 A   
.116                        0 4DFD A   .117                        0 4E52 A   
.118                        0 4E63 A   .119                        0 4EF4 A   
.11A                        0 4EF4 A   .11B                        0 4EE1 A   
.11C                        0 4EE8 A   .11D                        0 4E70 A   
.11E                        0 4EAD A   .11F                        0 4E87 A   
.12                         0 36C6 A   .120                        0 4E80 A   
.121                        0 4ED5 A   .122                        0 4EE1 A   
.123                        0 4EDF A   .124                        0 4EF4 A   
.125                        0 4EF7 A   .126                        0 4F8A A   
.127                        0 4F45 A   .128                        0 4F33 A   
.129                        0 4F21 A   .12A                        0 4F1A A   
.12B                        0 4F13 A   .12C                        0 50CE A   
.12D                        0 4FAD A   .12E                        0 4F91 A   
.12F                        0 5040 A   .13                         0 36D2 A   
.130                        0 4FB6 A   .131                        0 503D A   
.132                        0 502C A   .133                        0 5033 A   
.134                        0 4FC0 A   .135                        0 5004 A   
.136                        0 4FDE A   .137                        0 4FD7 A   
.138                        0 502C A   .139                        0 503D A   
.13A                        0 50CE A   .13B                        0 50CE A   
.13C                        0 50BB A   .13D                        0 50C2 A   
.13E                        0 504A A   .13F                        0 5087 A   
.14                         0 3701 A   .140                        0 5061 A   
.141                        0 505A A   .142                        0 50AF A   
.143                        0 50BB A   .144                        0 50B9 A   
.145                        0 50CE A   .146                        0 50D0 A   
.147                        0 A13F A   .148                        0 512E A   
.149                        0 512A A   .14A                        0 51ED A   
.14B                        0 518F A   .14C                        0 51F0 A   
.14D                        0 5221 A   .14F                        0 5217 A   
.15                         0 36F1 A   .150                        0 51FF A   
.151                        0 5207 A   .152                        0 520F A   
.153                        0 528E A   .154                        0 527E A   
.155                        0 529C A   .156                        0 5354 A   
.157                        0 5343 A   .158                        0 534A A   
.159                        0 52A4 A   .15A                        0 5343 A   
.15B                        0 5333 A   .15C                        0 533A A   
.15D                        0 52C1 A   .15E                        0 5323 A   
.15F                        0 530C A   .16                         0 3706 A   
.160                        0 5333 A   .161                        0 5343 A   
.162                        0 5354 A   .163                        0 5566 A   
.164                        0 5556 A   .165                        0 555D A   
.166                        0 53AA A   .167                        0 53CE A   
.168                        0 53C5 A   .169                        0 548F A   
.16A                        0 53DC A   .16B                        0 53F7 A   
.16C                        0 53E5 A   .16D                        0 53FC A   
.16E                        0 5479 A   .16F                        0 546B A   
.17                         0 371D A   .170                        0 5472 A   
.171                        0 5403 A   .172                        0 5461 A   
.173                        0 541A A   .174                        0 5443 A   
.175                        0 5423 A   .176                        0 5461 A   
.177                        0 5479 A   .178                        0 5556 A   
.179                        0 5556 A   .17A                        0 554D A   
.17B                        0 5492 A   .17C                        0 54AD A   
.17D                        0 549B A   .17E                        0 54B2 A   
.17F                        0 5533 A   .18                         0 3731 A   
.180                        0 5525 A   .181                        0 552C A   
.182                        0 54B9 A   .183                        0 551B A   
.184                        0 54D0 A   .185                        0 54FB A   
.186                        0 54D9 A   .187                        0 551B A   
.188                        0 5533 A   .189                        0 5556 A   
.18A                        0 5566 A   .18B                        0 563A A   
.18C                        0 562A A   .18D                        0 5631 A   
.18E                        0 55B0 A   .18F                        0 562A A   
.19                         0 374A A   .190                        0 561C A   
.191                        0 5623 A   .192                        0 55D6 A   
.193                        0 55F8 A   .194                        0 55F2 A   
.195                        0 562A A   .196                        0 563A A   
.197                        0 566E A   .198                        0 566A A   
.199                        0 573B A   .19A                        0 56D1 A   
.19B                        0 5833 A   .19C                        0 5833 A   
.19D                        0 581B A   .19E                        0 5770 A   
.19F                        0 5814 A   .1A                         0 3764 A   
.1A1                        0 57FE A   .1A2                        0 5784 A   
.1A3                        0 5784 A   .1A4                        0 57AD A   
.1A5                        0 57D6 A   .1A6                        0 57F9 A   
.1A7                        0 5833 A   .1A8                        0 5827 A   
.1A9                        0 5867 A   .1AA                        0 5863 A   
.1AB                        0 5936 A   .1AC                        0 58C8 A   
.1AD                        0 5933 A   .1AE                        0 5927 A   
.1AF                        0 58FE A   .1B                         0 3772 A   
.1B0                        0 5933 A   .1B1                        0 5A2E A   
.1B2                        0 5A2E A   .1B3                        0 5A16 A   
.1B4                        0 596B A   .1B5                        0 5A0F A   
.1B7                        0 59F9 A   .1B8                        0 597F A   
.1B9                        0 597F A   .1BA                        0 59A8 A   
.1BB                        0 59D1 A   .1BC                        0 59F4 A   
.1BD                        0 5A2E A   .1BE                        0 5A22 A   
.1BF                        0 5ADD A   .1C                         0 37AD A   
.1C0                        0 5AD9 A   .1C1                        0 5AF7 A   
.1C2                        0 5AF3 A   .1C3                        0 5D4A A   
.1C5                        0 5D32 A   .1C6                        0 5B0C A   
.1C7                        0 5B0C A   .1C8                        0 5B8D A   
.1C9                        0 5B7F A   .1CA                        0 5BB2 A   
.1CB                        0 5BE4 A   .1CC                        0 5BC8 A   
.1CD                        0 5BFE A   .1CE                        0 5C10 A   
.1CF                        0 5C07 A   .1D                         0 37E7 A   
.1D0                        0 5C7C A   .1D1                        0 5C36 A   
.1D2                        0 5CBC A   .1D3                        0 5CD0 A   
.1D4                        0 5CC5 A   .1D5                        0 5CE6 A   
.1D6                        0 5CFB A   .1D7                        0 5D2D A   
.1D8                        0 5D84 A   .1D9                        0 5D80 A   
.1DA                        0 5D9E A   .1DB                        0 5D9A A   
.1DC                        0 5F35 A   .1DE                        0 5F1D A   
.1DF                        0 5DB3 A   .1E                         0 37FC A   
.1E0                        0 5DB3 A   .1E1                        0 5E47 A   
.1E2                        0 5E39 A   .1E3                        0 5E40 A   
.1E4                        0 5DF5 A   .1E5                        0 5E39 A   
.1E6                        0 5E25 A   .1E7                        0 5E47 A   
.1E8                        0 5E4A A   .1E9                        0 5E76 A   
.1EA                        0 5E6D A   .1EB                        0 5EC1 A   
.1EC                        0 5E9C A   .1ED                        0 5EE2 A   
.1EE                        0 5EE4 A   .1EF                        0 5F13 A   
.1F                         0 381C A   .1F0                        0 5F75 A   
.1F1                        0 5F64 A   .1F2                        0 5F9F A   
.1F3                        0 5F9B A   .1F4                        0 6200 A   
.1F6                        0 61DF A   .1F7                        0 5FF0 A   
.1F8                        0 5FF3 A   .1F9                        0 6001 A   
.1FA                        0 5FFA A   .1FB                        0 6004 A   
.1FC                        0 600C A   .1FD                        0 6016 A   
.1FE                        0 6063 A   .1FF                        0 6058 A   
.2                          0 3679 A   .20                         0 383C A   
.200                        0 6016 A   .201                        0 6063 A   
.202                        0 6066 A   .203                        0 6100 A   
.204                        0 607E A   .205                        0 60FD A   
.206                        0 60DA A   .207                        0 61D6 A   
.208                        0 61D6 A   .20A                        0 61C0 A   
.20B                        0 6146 A   .20C                        0 6146 A   
.20D                        0 616F A   .20E                        0 6198 A   
.20F                        0 61BB A   .21                         0 3859 A   
.210                        0 6216 A   .211                        0 620A A   
.212                        0 62EB A   .213                        0 6222 A   
.214                        0 62BB A   .215                        0 623A A   
.216                        0 62E2 A   .217                        0 669B A   
.218                        0 668A A   .219                        0 6691 A   
.21A                        0 65D3 A   .21B                        0 6646 A   
.21C                        0 6640 A   .21D                        0 669B A   
.21E                        0 677C A   .21F                        0 676C A   
.22                         0 3874 A   .220                        0 6794 A   
.221                        0 68D9 A   .222                        0 68CA A   
.223                        0 68D1 A   .224                        0 688D A   
.225                        0 68D9 A   .226                        0 68EE A   
.227                        0 68E3 A   .228                        0 6972 A   
.229                        0 6963 A   .22A                        0 696A A   
.22B                        0 6929 A   .22C                        0 6972 A   
.22D                        0 6985 A   .22E                        0 697C A   
.22F                        0 6A03 A   .23                         0 3891 A   
.230                        0 69F4 A   .231                        0 69FB A   
.232                        0 69C0 A   .233                        0 6A03 A   
.234                        0 6A16 A   .235                        0 6A0D A   
.236                        0 6AA1 A   .237                        0 6A92 A   
.238                        0 6A99 A   .239                        0 6A5E A   
.23A                        0 6AA1 A   .23B                        0 6AB4 A   
.23C                        0 6AAB A   .23D                        0 6C6A A   
.23F                        0 6C45 A   .24                         0 38A0 A   
.240                        0 6AF1 A   .241                        0 6B28 A   
.242                        0 6B5F A   .243                        0 6B82 A   
.244                        0 6BA5 A   .245                        0 6BC8 A   
.246                        0 6BEB A   .247                        0 6C0D A   
.248                        0 6C2F A   .249                        0 A119 A   
.24A                        0 6C68 A   .24B                        0 6C58 A   
.24C                        0 6E25 A   .24D                        0 6E13 A   
.24E                        0 6EAF A   .24F                        0 6EA3 A   
.25                         0 39E0 A   .250                        0 6E54 A   
.251                        0 6E87 A   .252                        0 6E72 A   
.253                        0 6EAF A   .254                        0 6EC7 A   
.255                        0 6EB8 A   .256                        0 7092 A   
.257                        0 7089 A   .258                        0 70A4 A   
.259                        0 709B A   .25A                        0 70B6 A   
.25B                        0 70AD A   .25C                        0 7369 A   
.25D                        0 7103 A   .25E                        0 71EE A   
.25F                        0 71DF A   .260                        0 71E6 A   
.261                        0 71B3 A   .262                        0 71EE A   
.263                        0 725C A   .264                        0 724D A   
.265                        0 7254 A   .266                        0 7221 A   
.267                        0 725C A   .268                        0 72AF A   
.269                        0 72A0 A   .26A                        0 72A7 A   
.26B                        0 7263 A   .26C                        0 72AF A   
.26D                        0 72FA A   .26E                        0 72EB A   
.26F                        0 72F2 A   .27                         0 398A A   
.270                        0 72BF A   .271                        0 72FA A   
.272                        0 75E4 A   .273                        0 7374 A   
.274                        0 7515 A   .275                        0 7506 A   
.276                        0 750D A   .277                        0 74DE A   
.278                        0 7515 A   .279                        0 76A4 A   
.27A                        0 75EF A   .27B                        0 768E A   
.27C                        0 767F A   .27D                        0 7686 A   
.27E                        0 7660 A   .27F                        0 768E A   
.28                         0 38A6 A   .280                        0 7966 A   
.281                        0 76BC A   .282                        0 772B A   
.283                        0 771C A   .284                        0 7723 A   
.285                        0 76EF A   .286                        0 772B A   
.287                        0 77B0 A   .288                        0 77A1 A   
.289                        0 77A8 A   .28A                        0 776C A   
.28B                        0 779A A   .28C                        0 7774 A   
.28D                        0 77B0 A   .28E                        0 77D2 A   
.28F                        0 77CA A   .29                         0 38A6 A   
.290                        0 7873 A   .291                        0 7864 A   
.292                        0 786B A   .293                        0 782F A   
.294                        0 7873 A   .295                        0 78CC A   
.296                        0 78BD A   .297                        0 78C4 A   
.298                        0 7890 A   .299                        0 78CC A   
.29A                        0 7BE1 A   .29B                        0 7971 A   
.29C                        0 7B12 A   .29D                        0 7B03 A   
.29E                        0 7B0A A   .29F                        0 7ADB A   
.2A                         0 38CF A   .2A0                        0 7B12 A   
.2A1                        0 7C82 A   .2A2                        0 7BEC A   
.2A3                        0 7C6E A   .2A4                        0 7C5F A   
.2A5                        0 7C66 A   .2A6                        0 7C3F A   
.2A7                        0 7C6E A   .2A8                        0 7CC4 A   
.2A9                        0 7CB6 A   .2AA                        0 7CBD A   
.2AB                        0 7C9A A   .2AC                        0 7CB6 A   
.2AD                        0 7CAE A   .2AE                        0 7CC4 A   
.2AF                        0 A106 A   .2B                         0 38CF A   
.2B0                        0 A0F3 A   .2B1                        0 7F59 A   
.2B2                        0 7F43 A   .2B3                        0 7E3F A   
.2B4                        0 7E54 A   .2B5                        0 7E46 A   
.2B6                        0 7F3C A   .2B7                        0 7F2C A   
.2B8                        0 7E5D A   .2B9                        0 7E8C A   
.2BA                        0 7E6B A   .2BB                        0 7E64 A   
.2BC                        0 7F2A A   .2BD                        0 7F2A A   
.2BE                        0 7E95 A   .2BF                        0 7EB9 A   
.2C                         0 38E4 A   .2C0                        0 7EB3 A   
.2C1                        0 7F25 A   .2C2                        0 7F16 A   
.2C3                        0 7F1D A   .2C4                        0 7ECC A   
.2C5                        0 7EFE A   .2C6                        0 7EEB A   
.2C7                        0 7F0F A   .2C8                        0 7F25 A   
.2C9                        0 7F3C A   .2CA                        0 7F59 A   
.2CB                        0 9562 A   .2CC                        0 9557 A   
.2CD                        0 9514 A   .2CE                        0 954E A   
.2CF                        0 951E A   .2D                         0 38E4 A   
.2D0                        0 952E A   .2D1                        0 9525 A   
.2D2                        0 954C A   .2D3                        0 9543 A   
.2D4                        0 953A A   .2D5                        0 954C A   
.2D6                        0 9557 A   .2D7                        0 9562 A   
.2D8                        0 A0C4 A   .2D9                        0 9699 A   
.2DA                        0 9689 A   .2DB                        0 9669 A   
.2DC                        0 9661 A   .2DD                        0 9659 A   
.2DE                        0 9651 A   .2DF                        0 9681 A   
.2E                         0 38F9 A   .2E0                        0 9679 A   
.2E1                        0 9671 A   .2E2                        0 A09D A   
.2E3                        0 975D A   .2E4                        0 9712 A   
.2E5                        0 9775 A   .2E6                        0 9857 A   
.2E7                        0 9849 A   .2E8                        0 9775 A   
.2E9                        0 981D A   .2EA                        0 97DD A   
.2EB                        0 97D3 A   .2EC                        0 97BC A   
.2ED                        0 A084 A   .2EE                        0 983E A   
.2EF                        0 A053 A   .2F                         0 38F9 A   
.2F0                        0 9857 A   .2F1                        0 A01C A   
.2F2                        0 98C2 A   .2F3                        0 98C4 A   
.2F4                        0 998C A   .2F5                        0 98F3 A   
.2F6                        0 A009 A   .2F7                        0 9940 A   
.2F8                        0 993A A   .2F9                        0 9966 A   
.2FA                        0 9955 A   .2FB                        0 9984 A   
.2FC                        0 9970 A   .2FD                        0 999F A   
.2FE                        0 9FF0 A   .2FF                        0 99BF A   
.3                          0 A1C4 A   .30                         0 390E A   
.300                        0 99A7 A   .301                        0 99EF A   
.302                        0 99F1 A   .303                        0 9A01 A   
.304                        0 99FD A   .305                        0 9A03 A   
.306                        0 9A15 A   .307                        0 9A11 A   
.308                        0 9A17 A   .309                        0 9A4E A   
.30A                        0 9A2B A   .30B                        0 9B1F A   
.30C                        0 9A6A A   .30D                        0 9FD3 A   
.30E                        0 9FBD A   .30F                        0 9AB1 A   
.31                         0 391D A   .310                        0 9AA8 A   
.311                        0 9B40 A   .312                        0 9FA4 A   
.313                        0 9B40 A   .314                        0 9B3A A   
.315                        0 9BC4 A   .316                        0 9BC0 A   
.317                        0 9C0E A   .318                        0 9BFF A   
.319                        0 9C06 A   .31A                        0 9BCC A   
.31B                        0 9BFF A   .31C                        0 9BD4 A   
.31D                        0 9C0E A   .31E                        0 9C56 A   
.31F                        0 9C38 A   .32                         0 393B A   
.320                        0 9D3B A   .321                        0 9D3B A   
.322                        0 9D2C A   .323                        0 9D33 A   
.324                        0 9D00 A   .325                        0 9D3B A   
.326                        0 9E3B A   .328                        0 9E29 A   
.329                        0 9D59 A   .32A                        0 9F91 A   
.32B                        0 9D83 A   .32C                        0 9D7A A   
.32D                        0 9D95 A   .32E                        0 9F77 A   
.32F                        0 9DD8 A   .33                         0 3949 A   
.330                        0 9DCC A   .331                        0 9DDA A   
.332                        0 9F5A A   .333                        0 9E1D A   
.334                        0 9E11 A   .335                        0 9E1F A   
.336                        0 9F5A A   .337                        0 9F77 A   
.338                        0 9F91 A   .339                        0 9FA4 A   
.33A                        0 9FBD A   .33B                        0 9FD3 A   
.33C                        0 9FF0 A   .33D                        0 A009 A   
.33E                        0 A01C A   .33F                        0 A053 A   
.34                         0 3957 A   .340                        0 A084 A   
.341                        0 A09D A   .342                        0 A0C4 A   
.343                        0 A0F3 A   .344                        0 A106 A   
.345                        0 A119 A   .346                        0 A13F A   
.347                        0 A158 A   .348                        0 A17F A   
.349                        0 A1A2 A   .34A                        0 A1C4 A   
.35                         0 3965 A   .36                         0 3985 A   
.37                         0 39E3 A   .38                         0 3A35 A   
.3A                         0 3A27 A   .3B                         0 39E8 A   
.3C                         0 39ED A   .3D                         0 3A0B A   
.3E                         0 3A22 A   .3F                         0 3A38 A   
.4                          0 3BF4 A   .40                         0 3A6C A   
.41                         0 3A88 A   .42                         0 3AD1 A   
.44                         0 3AC3 A   .45                         0 3A8D A   
.46                         0 3A9C A   .47                         0 3AAD A   
.48                         0 3ABE A   .49                         0 3ADE A   
.4A                         0 3B91 A   .4B                         0 3AE7 A   
.4C                         0 3B8F A   .4E                         0 3B64 A   
.4F                         0 3AED A   .50                         0 3B00 A   
.51                         0 3B15 A   .52                         0 3B2A A   
.53                         0 3B43 A   .54                         0 3B4E A   
.55                         0 3B59 A   .56                         0 3B8D A   
.57                         0 3B77 A   .58                         0 3B97 A   
.59                         0 3B99 A   .5A                         0 3BEB A   
.5B                         0 3BB1 A   .5C                         0 3C14 A   
.5D                         0 3C0C A   .5E                         0 A1A2 A   
.5F                         0 3C4B A   .6                          0 3B9E A   
.60                         0 3C47 A   .61                         0 3E1E A   
.62                         0 3CD9 A   .63                         0 3D4B A   
.65                         0 3D3B A   .66                         0 3D19 A   
.67                         0 3D21 A   .68                         0 3D29 A   
.69                         0 3D31 A   .6A                         0 3E08 A   
.6B                         0 3DF7 A   .6C                         0 3DFE A   
.6D                         0 3D53 A   .6E                         0 3DD0 A   
.6F                         0 3D74 A   .7                          0 36A8 A   
.70                         0 3DF7 A   .71                         0 3E08 A   
.72                         0 3E1E A   .73                         0 3E11 A   
.74                         0 3E6E A   .75                         0 3E5F A   
.76                         0 3E66 A   .77                         0 3E2E A   
.78                         0 3E6E A   .79                         0 3EF3 A   
.7A                         0 3EE4 A   .7B                         0 3EEB A   
.7C                         0 3EAC A   .7D                         0 3EF3 A   
.7E                         0 3F3A A   .7F                         0 3F2B A   
.8                          0 3703 A   .80                         0 3F32 A   
.81                         0 3EFA A   .82                         0 3F3A A   
.83                         0 3F55 A   .84                         0 3F50 A   
.85                         0 3F58 A   .86                         0 3FAF A   
.87                         0 3FA0 A   .88                         0 3FA7 A   
.89                         0 3F6F A   .8A                         0 3FAF A   
.8B                         0 40AF A   .8C                         0 3FEE A   
.8D                         0 402A A   .8E                         0 4004 A   
.8F                         0 40AF A   .90                         0 4055 A   
.91                         0 4031 A   .92                         0 40AF A   
.93                         0 41EC A   .94                         0 41DE A   
.95                         0 420E A   .96                         0 41FF A   
.97                         0 4206 A   .98                         0 41F3 A   
.99                         0 420E A   .9A                         0 423A A   
.9B                         0 422C A   .9C                         0 429F A   
.9E                         0 4290 A   .9F                         0 4252 A   
.A                          0 36DE A   .A0                         0 4266 A   
.A1                         0 427A A   .A2                         0 436D A   
.A3                         0 431D A   .A4                         0 4316 A   
.A5                         0 430F A   .A6                         0 4307 A   
.A7                         0 4346 A   .A8                         0 4331 A   
.A9                         0 435A A   .AA                         0 43CF A   
.AB                         0 43CB A   .AC                         0 44BA A   
.AD                         0 4402 A   .AE                         0 44F2 A   
.AF                         0 44EE A   .B                          0 36BA A   
.B0                         0 4544 A   .B1                         0 4540 A   
.B2                         0 456E A   .B3                         0 456A A   
.B4                         0 4606 A   .B5                         0 4598 A   
.B6                         0 462A A   .B7                         0 A17F A   
.B8                         0 4765 A   .B9                         0 4756 A   
.BA                         0 475D A   .BB                         0 471A A   
.BC                         0 4765 A   .BD                         0 47F0 A   
.BE                         0 47E1 A   .BF                         0 47E8 A   
.C                          0 36C6 A   .C0                         0 47B7 A   
.C1                         0 47F0 A   .C2                         0 4910 A   
.C3                         0 48FF A   .C4                         0 4906 A   
.C5                         0 485E A   .C6                         0 48BD A   
.C7                         0 4867 A   .C8                         0 48FF A   
.C9                         0 4910 A   .CA                         0 49C5 A   
.CB                         0 49B6 A   .CC                         0 49BD A   
.CD                         0 4948 A   .CE                         0 4989 A   
.CF                         0 4951 A   .D                          0 36C6 A   
.D0                         0 49B6 A   .D1                         0 49C5 A   
.D2                         0 49DB A   .D3                         0 49D7 A   
.D4                         0 49E7 A   .D5                         0 49E3 A   
.D6                         0 4A11 A   .D7                         0 4A0D A   
.D8                         0 4A4E A   .D9                         0 4A3D A   
.DA                         0 4A5F A   .DB                         0 4A58 A   
.DC                         0 4A70 A   .DD                         0 4A69 A   
.DE                         0 4A7F A   .DF                         0 4A7A A   
.E                          0 36C6 A   .E0                         0 4D0F A   
.E1                         0 4AA6 A   .E2                         0 A158 A   
.E3                         0 4B49 A   .E4                         0 4B14 A   
.E5                         0 4B02 A   .E6                         0 4AF0 A   
.E7                         0 4AE9 A   .E8                         0 4AE2 A   
.E9                         0 4D0C A   .EA                         0 4C2E A   
.EB                         0 4B52 A   .EC                         0 4C2B A   
.ED                         0 4C18 A   .EE                         0 4C1F A   
.EF                         0 4B5D A   .F                          0 36C6 A   
.F0                         0 4BBD A   .F1                         0 4B7B A   
.F2                         0 4B74 A   .F3                         0 4C18 A   
.F4                         0 4C2B A   .F5                         0 4D0C A   
.F6                         0 4D0C A   .F7                         0 4CF9 A   
.F8                         0 4D00 A   .F9                         0 4C39 A   
.FA                         0 4C92 A   .FB                         0 4C50 A   
.FC                         0 4C49 A   .FD                         0 4CED A   
.FE                         0 4CF9 A   .FF                         0 4CF7 A   
_biosfn_alternate_prtsc     0 6CCB A   _biosfn_enable_video_refre+ 0 6DEA A   
_biosfn_get_cursor_pos      0 44BE A   _biosfn_get_font_info       0 6AE0 A   
_biosfn_load_gfx_8_14_char+ 0 6AC8 A   _biosfn_load_gfx_8_16_char+ 0 6AD8 A   
_biosfn_load_gfx_8_8_chars  0 6AB8 A   _biosfn_load_gfx_8_8_dd_ch+ 0 6AD0 A   
_biosfn_load_gfx_user_char+ 0 6AC0 A   _biosfn_load_text_8_14_pat  0 68F2 A   
_biosfn_load_text_8_16_pat  0 6A27 A   _biosfn_load_text_8_8_pat   0 6989 A   
_biosfn_load_text_user_pat  0 6856 A   _biosfn_perform_gray_scale+ 0 65AF A   
_biosfn_read_char_attr      0 50F6 A   _biosfn_read_pixel          0 5D4E A   
_biosfn_read_state_info     0 6F3E A   _biosfn_read_video_state_s+ 0 70BD A   
_biosfn_read_video_state_s+ 0 7076 A   _biosfn_restore_video_stat+ 0 76AB A   
_biosfn_save_video_state    0 70E1 A   _biosfn_scroll              0 49C9 A   
_biosfn_set_active_page     0 4533 A   _biosfn_set_cursor_pos      0 43BE A   
_biosfn_set_cursor_shape    0 42A3 A   _biosfn_set_video_mode      0 3BF6 A   
_biosfn_switch_video_inter+ 0 6DE2 A   _biosfn_write_char_attr     0 563E A   
_biosfn_write_char_only     0 5837 A   _biosfn_write_pixel         0 5AAD A   
_biosfn_write_string        0 6DF2 A   _biosfn_write_teletype      0 5F57 A   
_dac_regs                   0 029B A   _dispi_get_max_bpp          0 9313 A   
_dispi_get_max_xres         0 92F1 A   _dispi_set_bank             0 9353 A   
_dispi_set_bank_farcall     0 9371 A   _dispi_set_bpp              0 92BA A   
_dispi_set_enable           0 9335 A   _dispi_set_xres             0 9285 A   
_dispi_set_yres             0 929C A   _display_info               0 3625 A   
_display_splash_screen      0 3624 A   _display_string             0 3643 A   
_fail                       0 9F43 A   _find_vga_entry             0 7C89 A   
_get_SS                     0 7E01 A E _get_font_access            0 66B6 A   
_inb                        0 7DCB A E _int10_debugmsg             0 366A A   
_int10_func                 0 369B A   _inw                        0 7DD6 A E 
_line_to_vpti               0 028B A   _memcpyb                    0 7D15 A   
_memcpyw                    0 7D45 A   _memsetb                    0 7CCB A   
_memsetw                    0 7CF0 A   _mode_info_find_mode        0 9507 A   
_mode_info_list             0 7FB7 A   _no_vbebios_info_string     0 9101 A   
_outb                       0 7DE1 A E _outw                       0 7DF1 A E 
_palette0                   0 0A1F A   _palette1                   0 0ADF A   
_palette2                   0 0B9F A   _palette3                   0 0C5F A   
_pci_get_lfb_addr           0 7F5D A   _printf                     0 7E20 A E 
_read_byte                  0 7D75 A   _read_word                  0 7D88 A   
_release_font_access        0 66D9 A   _set_scan_lines             0 670D A   
_static_functionality       0 0F5F A   _unimplemented              0 7E04 A E 
_unknown                    0 7E12 A E _vbe_biosfn_read_video_sta+ 0 9B78 A E 
_vbe_biosfn_restore_video_+ 0 9C12 A E _vbe_biosfn_return_control+ 0 95DF A E 
_vbe_biosfn_return_mode_in+ 0 9889 A E _vbe_biosfn_save_restore_s+ 0 9D3F A E 
_vbe_biosfn_save_video_sta+ 0 9B80 A E _vbe_biosfn_set_get_palett+ 0 9F2D A E 
_vbe_biosfn_set_mode        0 99D2 A E _vbe_has_vbe_display        0 9568 A   
_vbebios_copyright          0 902F A   _vbebios_info_string        0 90DB A   
_vbebios_product_name       0 908D A   _vbebios_product_revision   0 90A6 A   
_vbebios_vendor_name        0 9075 A   _vga_compat_setup           0 9430 A   
_vga_modes                  0 020B A   _vgafont14                  0 176F A   
_vgafont14alt               0 356F A   _vgafont16                  0 256F A   
_vgafont16alt               0 3570 A   _vgafont8                   0 0F6F A   
_vgamem_copy_cga            0 4802 A   _vgamem_copy_pl4            0 46B5 A   
_vgamem_fill_cga            0 4914 A   _vgamem_fill_pl4            0 4777 A   
_video_param_table          0 029F A   _video_save_pointer_table   0 3608 A   
_write_byte                 0 7D9B A   _write_gfx_char_cga         0 5367 A   
_write_gfx_char_lin         0 556A A   _write_gfx_char_pl4         0 51F4 A   
_write_word                 0 7DB3 A   biosfn_enable_cursor_emula+ 0 6DC0 A   
biosfn_enable_default_pale+ 0 6D5C A   biosfn_enable_grayscale_su+ 0 6D9C A   
biosfn_enable_video_addres+ 0 6D7E A   biosfn_get_all_palette_reg  0 6454 A   
biosfn_get_ega_info         0 6CA8 A   biosfn_get_single_palette_+ 0 6422 A   
biosfn_get_video_mode       0 631C A   biosfn_group_0B             0 5A32 A   
biosfn_group_10             0 6343 A   biosfn_group_1A             0 6ECB A   
biosfn_read_all_dac_reg     0 6534 A   biosfn_read_display_code    0 6ED7 A   
biosfn_read_overscan_borde+ 0 6446 A   biosfn_read_pel_mask        0 6567 A   
biosfn_read_single_dac_reg  0 6519 A   biosfn_read_video_dac_stat+ 0 6572 A   
biosfn_select_vert_res      0 6CD3 A   biosfn_select_video_dac_co+ 0 64D6 A   
biosfn_set_all_dac_reg      0 64AE A   biosfn_set_all_palette_reg  0 63CF A   
biosfn_set_border_color     0 5A40 A   biosfn_set_display_code     0 6EEC A   
biosfn_set_overscan_border+ 0 63C7 A   biosfn_set_palette          0 5A7F A   
biosfn_set_pel_mask         0 655C A   biosfn_set_single_dac_reg   0 6495 A   
biosfn_set_single_palette_+ 0 63AD A   biosfn_set_text_block_spec+ 0 6A1A A   
biosfn_toggle_intensity     0 63FC A   bit8_clear                  0 9478 A   
bit9_clear                  0 947F A   bpp4_mode                   0 9219 A   
dispi_get_bank              0 9363 A   dispi_get_bpp               0 92D8 A   
dispi_get_enable            0 9345 A   dispi_get_id                0 9267 A   
dispi_get_virt_height       0 9422 A   dispi_get_virt_width        0 9414 A   
dispi_get_x_offset          0 93B8 A   dispi_get_y_offset          0 93D6 A   
dispi_set_bank_farcall_err+ 0 93A3 A   dispi_set_bank_farcall_get  0 9395 A   
dispi_set_id                0 9275 A   dispi_set_virt_width        0 9401 A   
dispi_set_x_offset          0 93A8 A   dispi_set_y_offset          0 93C6 A   
get_bpp_noinc               0 92EF A   get_dac_16_page             0 65A2 A   
get_dac_palette_format      0 9F19 A   get_display_start           0 9EE6 A   
get_display_window          0 9E6E A   get_logical_scan_line_leng+ 0 9EA6 A   
get_palette_loop            0 645C A   idiv_u                      0 6708 A   
illegal_window              0 91AC A   init_bios_area              0 35D0 A   
init_vga_card               0 3571 A   int10_end                   0 0209 A   
int10_group_10_unknown      0 63A9 A   int10_normal                0 01FB A   
int10_test_0B               0 0158 A   int10_test_1001             0 6349 A   
int10_test_1002             0 634F A   int10_test_1003             0 6355 A   
int10_test_1007             0 635C A   int10_test_1008             0 6363 A   
int10_test_1009             0 636A A   int10_test_1010             0 6371 A   
int10_test_1012             0 6378 A   int10_test_1013             0 637F A   
int10_test_1015             0 6386 A   int10_test_1017             0 638D A   
int10_test_1018             0 6394 A   int10_test_1019             0 639B A   
int10_test_101A             0 63A2 A   int10_test_101B             0 01B1 A   
int10_test_1103             0 0163 A   int10_test_12               0 016E A   
int10_test_1A               0 014D A   int10_test_4F               0 01C0 A   
int10_test_BL30             0 017E A   int10_test_BL31             0 0189 A   
int10_test_BL32             0 0193 A   int10_test_BL33             0 019D A   
int10_test_BL34             0 01A7 A   int10_test_vbe_05           0 01CE A   
int10_test_vbe_06           0 01D7 A   int10_test_vbe_07           0 01E0 A   
int10_test_vbe_08           0 01E9 A   int10_test_vbe_0A           0 01F2 A   
lmulul                      0 95C6 A   memcpyb_end                 0 7D3D A   
memcpyw_end                 0 7D6D A   memsetb_end                 0 7CEA A   
memsetw_end                 0 7D0F A   mode_ega_color              0 6CC8 A   
msg_alt_dcc                 0 6F10 A   msg_vbe_init                0 9125 A   
msg_vert_res                0 6D35 A   msg_vga_init                0 358D A   
no_4bpp_1                   0 9E9E A   no_4bpp_2                   0 9EBB A   
no_actl_reg1                0 63C6 A   no_actl_reg2                0 6445 A   
no_vbe_flag                 0 95BB A   no_vbe_interface            0 959F A   
no_vbe_mode                 0 9B6A A   pci_get_lfb_addr_3          0 7F70 A   
pci_get_lfb_addr_4          0 7F86 A   pci_get_lfb_addr_5          0 7F82 A   
pci_get_lfb_addr_6          0 7F96 A   pci_read_reg                0 7F9E A   
read_dac_loop               0 6545 A   set_actl_normal             0 6512 A   
set_cga_palette_loop        0 5A8C A   set_dac_16_page             0 650C A   
set_dac_loop                0 64BF A   set_dac_mode                0 9F16 A   
set_dac_page                0 64F9 A   set_dac_palette_format      0 9F01 A   
set_display_start           0 9ED8 A   set_display_window          0 9E5E A   
set_intensity_loop          0 5A5E A   set_logical_scan_line_byte+ 0 9E8D A   
set_logical_scan_line_pixe+ 0 9EA3 A   set_low_border              0 5A58 A   
set_normal_dac              0 9F13 A   set_palette_loop            0 63DE A   
set_retcode                 0 6D2E A   set_vert_res                0 6D24 A   
set_width_svga              0 93F2 A   set_xy_regs                 0 9225 A   
vbe_03_ok                   0 9B73 A   vbe_05_failed               0 9E77 A   
vbe_08_ok                   0 9F25 A   vbe_08_unsupported          0 9F29 A   
vbe_biosfn_display_window_+ 0 9E4E A   vbe_biosfn_return_current_+ 0 9B53 A   
vbe_biosfn_return_protecte+ 0 9F2E A   vbe_biosfn_set_get_dac_pal+ 0 9EF6 A   
vbe_biosfn_set_get_display+ 0 9EC8 A   vbe_biosfn_set_get_logical+ 0 9E7B A   
vbe_display_info            0 95A9 A   vbe_init                    0 957B A   
vert_res_200                0 6D1A A   vert_res_350                0 6D10 A   
vert_res_400                0 6D04 A   vesa_pm_end                 0 9267 A   
vesa_pm_io_ports_table      0 916E A   vesa_pm_set_display_start   0 91B1 A   
vesa_pm_set_display_start1  0 91C0 A   vesa_pm_set_display_window+ 0 9185 A   
vesa_pm_set_window          0 917A A   vesa_pm_start               0 9166 A   
vesa_pm_unimplemented       0 9262 A   vga_compat_end              0 9505 A   
vga_set_virt_width          0 93E4 A   vgabios_copyright           0 0052 A   
vgabios_date                0 0044 A   vgabios_end                 0 9F59 A   
vgabios_entry_point         0 0003 A   vgabios_init_func           0 0109 A   
vgabios_int10_handler       0 0133 A   vgabios_license             0 007E A   
vgabios_name                0 0022 A   vgabios_start               0 0000 A   
vgabios_version             0 0038 A   vgabios_website             0 00B3 A   

00000 errors
00000 warnings
