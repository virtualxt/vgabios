00001                                           ! 1 
00002                                           ! 1 # 1 "_vgabios-debug_.c"
00003                                           ! 1 typedef unsigned char Bit8u;
00004                                           !BCC_EOS
00005                                           ! 2 typedef unsigned short Bit16u;
00006                                           !BCC_EOS
00007                                           ! 3 typedef unsigned long Bit32u;
00008                                           !BCC_EOS
00009                                           ! 4 typedef unsigned short Boolean;
00010                                           !BCC_EOS
00011                                           ! 5 static Bit8u read_byte();
00012                                           !BCC_EOS
00013                                           ! 6 static Bit16u read_word();
00014                                           !BCC_EOS
00015                                           ! 7 static void write_byte();
00016                                           !BCC_EOS
00017                                           ! 8 static void write_word();
00018                                           !BCC_EOS
00019                                           ! 9 static Bit8u inb();
00020                                           !BCC_EOS
00021                                           ! 10 static Bit16u inw();
00022                                           !BCC_EOS
00023                                           ! 11 static void outb();
00024                                           !BCC_EOS
00025                                           ! 12 static void outw();
00026                                           !BCC_EOS
00027                                           ! 13 static Bit16u get_SS();
00028                                           !BCC_EOS
00029                                           ! 14 static void printf();
00030                                           !BCC_EOS
00031                                           ! 15 static void unimplemented();
00032                                           !BCC_EOS
00033                                           ! 16 static void unknown();
00034                                           !BCC_EOS
00035                                           ! 17 static Bit8u find_vga_entry();
00036                                           !BCC_EOS
00037                                           ! 18 static void memsetb();
00038                                           !BCC_EOS
00039                                           ! 19 static void memsetw();
00040                                           !BCC_EOS
00041                                           ! 20 static void memcpyb();
00042                                           !BCC_EOS
00043                                           ! 21 static void memcpyw();
00044                                           !BCC_EOS
00045                                           ! 22 static void biosfn_set_video_mode();
00046                                           !BCC_EOS
00047                                           ! 23 static void biosfn_set_cursor_shape();
00048                                           !BCC_EOS
00049                                           ! 24 static void biosfn_set_cursor_pos();
00050                                           !BCC_EOS
00051                                           ! 25 static void biosfn_get_cursor_pos();
00052                                           !BCC_EOS
00053                                           ! 26 static void biosfn_set_active_page();
00054                                           !BCC_EOS
00055                                           ! 27 static void biosfn_scroll();
00056                                           !BCC_EOS
00057                                           ! 28 static void biosfn_read_char_attr();
00058                                           !BCC_EOS
00059                                           ! 29 static void biosfn_write_char_attr();
00060                                           !BCC_EOS
00061                                           ! 30 static void biosfn_write_char_only();
00062                                           !BCC_EOS
00063                                           ! 31 static void biosfn_write_pixel();
00064                                           !BCC_EOS
00065                                           ! 32 static void biosfn_read_pixel();
00066                                           !BCC_EOS
00067                                           ! 33 static void biosfn_write_teletype();
00068                                           !BCC_EOS
00069                                           ! 34 static void biosfn_perform_gray_scale_summing();
00070                                           !BCC_EOS
00071                                           ! 35 static void biosfn_load_text_user_pat();
00072                                           !BCC_EOS
00073                                           ! 36 static void biosfn_load_text_8_14_pat();
00074                                           !BCC_EOS
00075                                           ! 37 static void biosfn_load_text_8_8_pat();
00076                                           !BCC_EOS
00077                                           ! 38 static void biosfn_load_text_8_16_pat();
00078                                           !BCC_EOS
00079                                           ! 39 static void biosfn_load_gfx_8_8_chars();
00080                                           !BCC_EOS
00081                                           ! 40 static void biosfn_load_gfx_user_chars();
00082                                           !BCC_EOS
00083                                           ! 41 static void biosfn_load_gfx_8_14_chars();
00084                                           !BCC_EOS
00085                                           ! 42 static void biosfn_load_gfx_8_8_dd_chars();
00086                                           !BCC_EOS
00087                                           ! 43 static void biosfn_load_gfx_8_16_chars();
00088                                           !BCC_EOS
00089                                           ! 44 static void biosfn_get_font_info();
00090                                           !BCC_EOS
00091                                           ! 45 static void biosfn_alternate_prtsc();
00092                                           !BCC_EOS
00093                                           ! 46 static void biosfn_switch_video_interface();
00094                                           !BCC_EOS
00095                                           ! 47 static void biosfn_enable_video_refresh_control();
00096                                           !BCC_EOS
00097                                           ! 48 static void biosfn_write_string();
00098                                           !BCC_EOS
00099                                           ! 49 static void biosfn_read_state_info();
00100                                           !BCC_EOS
00101                                           ! 50 static void biosfn_read_video_state_size();
00102                                           !BCC_EOS
00103                                           ! 51 static Bit16u biosfn_save_video_state();
00104                                           !BCC_EOS
00105                                           ! 52 static Bit16u biosfn_restore_video_state();
00106                                           !BCC_EOS
00107                                           ! 53 extern Bit8u video_save_pointer_table[];
00108                                           !BCC_EOS
00109                                           ! 54 #asm
00110                                           !BCC_ASM
00111                                           MACRO SET_INT_VECTOR
00112                                             push ds
00113                                             xor ax, ax
00114                                             mov ds, ax
00115                                             mov ax, ?3
00116                                             mov ?1*4, ax
00117                                             mov ax, ?2
00118                                             mov ?1*4+2, ax
00119                                             pop ds
00120                                           MEND
00121                                           ! 65 endasm
00122                                           !BCC_ENDASM
00123                                           ! 66 #asm
00124                                           !BCC_ASM
00125                                           
00126 0000                                      .rom
00127 0000                                      .org 0
00128                                           use16 8086
00129                       00000000            vgabios_start:
00130 0000                        55            .byte 0x55, 0xaa
00131 0002                        40            .byte 0x40
00132                       00000003            vgabios_entry_point:
00133 0003           E9         0103              jmp vgabios_init_func
00134 001E                                      .org 0x1e
00135 001E                        49            .ascii "IBM"
00136 0021                        00            .byte 0x00
00137                       00000022            vgabios_name:
00138 0022                        50            .ascii "Plex86/Bochs VGABios"
00139 0036                        20            .ascii " "
00140 0037                        00            .byte 0x00
00141                       00000038            vgabios_version:
00142 0038                        63            .ascii "current-cvs"
00143 0043                        20            .ascii " "
00144                       00000044            vgabios_date:
00145 0044                        31            .ascii "15 Jun 2023"
00146 004F                        0A            .byte 0x0a,0x0d
00147 0051                        00            .byte 0x00
00148                       00000052            vgabios_copyright:
00149 0052                        28            .ascii "(C) 2008 the LGPL VGABios developers Team"
00150 007B                        0A            .byte 0x0a,0x0d
00151 007D                        00            .byte 0x00
00152                       0000007E            vgabios_license:
00153 007E                        54            .ascii "This VGA/VBE Bios is released under the GNU LGPL"
00154 00AE                        0A            .byte 0x0a,0x0d
00155 00B0                        0A            .byte 0x0a,0x0d
00156 00B2                        00            .byte 0x00
00157                       000000B3            vgabios_website:
00158 00B3                        50            .ascii "Please visit :"
00159 00C1                        0A            .byte 0x0a,0x0d
00160                                           ;;.ascii " . http://www.plex86.org"
00161                                           ;;.byte 0x0a,0x0d
00162 00C3                        20            .ascii " . http://bochs.sourceforge.net"
00163 00E2                        0A            .byte 0x0a,0x0d
00164 00E4                        20            .ascii " . http://www.nongnu.org/vgabios"
00165 0104                        0A            .byte 0x0a,0x0d
00166 0106                        0A            .byte 0x0a,0x0d
00167 0108                        00            .byte 0x00
00168                                           ;; ============================================================================================
00169                                           ;;
00170                                           ;; Init Entry point
00171                                           ;;
00172                                           ;; ============================================================================================
00173                       00000109            vgabios_init_func:
00174                                           ;; init vga card
00175 0109           E8         343C              call init_vga_card
00176                                           ;; init basic bios vars
00177 010C           E8         3498              call init_bios_area
00178                                           ;; set int10 vect
00179                                             SET_INT_VECTOR(0x10, #0xC000, #vgabios_int10_handler)
 +a   010F           1E                           push ds
 +a   0110           31C0                         xor ax, ax
 +a   0112           8ED8                         mov ds, ax
 +a   0114           B8                   012D    mov ax,  #vgabios_int10_handler
 +a   0117           A3         0040              mov 0x10*4, ax
 +a   011A           B8                   C000    mov ax,  #0xC000
 +a   011D           A3         0042              mov 0x10*4+2, ax
 +a   0120           1F                           pop ds
00180                                           ;; display splash screen
00181 0121           E8         34D7              call _display_splash_screen
00182                                           ;; init video mode and clear the screen
00183 0124           B8                   0003    mov ax,#0x0003
00184 0127           CD                     10    int #0x10
00185                                           ;; show info
00186 0129           E8         34D0              call _display_info
00187 012C           CB                           retf
00188                                           ! 130 endasm
00189                                           !BCC_ENDASM
00190                                           ! 131 #asm
00191                                           !BCC_ASM
00192                       0000012D            vgabios_int10_handler:
00193 012D           9C                           pushf
00194 012E           06                           push es
00195 012F           1E                           push ds
00196                                             ;pusha
00197 0130           50                           push ax
00198 0131           51                           push cx
00199 0132           52                           push dx
00200 0133           53                           push bx
00201 0134           54                           push sp ; Should be old SP. But think we are okey.
00202 0135           55                           push bp
00203 0136           56                           push si
00204 0137           57                           push di
00205 0138           BB                   C000    mov bx, #0xc000
00206 013B           8EDB                         mov ds, bx
00207 013D           E8         3501              call _int10_debugmsg
00208                                             ;popa
00209 0140           5F                           pop di
00210 0141           5E                           pop si
00211 0142           5D                           pop bp
00212 0143           5B                           pop bx ; Should be old SP. Just discard it.
00213 0144           5B                           pop bx
00214 0145           5A                           pop dx
00215 0146           59                           pop cx
00216 0147           58                           pop ax
00217 0148           1F                           pop ds
00218 0149           07                           pop es
00219 014A           80FC                   0F    cmp ah, #0x0f
00220 014D           75           06              jne int10_test_1A
00221 014F           E8         610A              call biosfn_get_video_mode
00222 0152           E9         008B              jmp int10_end
00223                       00000155            int10_test_1A:
00224 0155           80FC                   1A    cmp ah, #0x1a
00225 0158           75           06              jne int10_test_0B
00226 015A           E8         6CCE              call biosfn_group_1A
00227 015D           E9         0080              jmp int10_end
00228                       00000160            int10_test_0B:
00229 0160           80FC                   0B    cmp ah, #0x0b
00230 0163           75           05              jne int10_test_1103
00231 0165           E8         57FA              call biosfn_group_0B
00232 0168           EB           76              jmp int10_end
00233                       0000016A            int10_test_1103:
00234 016A           3D                   1103    cmp ax, #0x1103
00235 016D           75           05              jne int10_test_12
00236 016F           E8         6805              call biosfn_set_text_block_specifier
00237 0172           EB           6C              jmp int10_end
00238                       00000174            int10_test_12:
00239 0174           80FC                   12    cmp ah, #0x12
00240 0177           75           3C              jne int10_test_101B
00241 0179           80FB                   10    cmp bl, #0x10
00242 017C           75           05              jne int10_test_BL30
00243 017E           E8         6A84              call biosfn_get_ega_info
00244 0181           EB           5D              jmp int10_end
00245                       00000183            int10_test_BL30:
00246 0183           80FB                   30    cmp bl, #0x30
00247 0186           75           05              jne int10_test_BL31
00248 0188           E8         6AA5              call biosfn_select_vert_res
00249 018B           EB           53              jmp int10_end
00250                       0000018D            int10_test_BL31:
00251 018D           80FB                   31    cmp bl, #0x31
00252 0190           75           05              jne int10_test_BL32
00253 0192           E8         6B24              call biosfn_enable_default_palette_loading
00254 0195           EB           49              jmp int10_end
00255                       00000197            int10_test_BL32:
00256 0197           80FB                   32    cmp bl, #0x32
00257 019A           75           05              jne int10_test_BL33
00258 019C           E8         6B3F              call biosfn_enable_video_addressing
00259 019F           EB           3F              jmp int10_end
00260                       000001A1            int10_test_BL33:
00261 01A1           80FB                   33    cmp bl, #0x33
00262 01A4           75           05              jne int10_test_BL34
00263 01A6           E8         6B53              call biosfn_enable_grayscale_summing
00264 01A9           EB           35              jmp int10_end
00265                       000001AB            int10_test_BL34:
00266 01AB           80FB                   34    cmp bl, #0x34
00267 01AE           75           14              jne int10_normal
00268 01B0           E8         6B6D              call biosfn_enable_cursor_emulation
00269 01B3           EB           2B              jmp int10_end
00270                       000001B5            int10_test_101B:
00271 01B5           3D                   101B    cmp ax, #0x101b
00272 01B8           74           0A              je int10_normal
00273 01BA           80FC                   10    cmp ah, #0x10
00274 01BD           75           05              jne int10_normal
00275 01BF           E8         60C1              call biosfn_group_10
00276 01C2           EB           1C              jmp int10_end
00277                       000001C4            int10_normal:
00278 01C4           06                           push es
00279 01C5           1E                           push ds
00280                                             ;pusha
00281 01C6           50                           push ax
00282 01C7           51                           push cx
00283 01C8           52                           push dx
00284 01C9           53                           push bx
00285 01CA           54                           push sp ; Should be old SP. But think we are okey.
00286 01CB           55                           push bp
00287 01CC           56                           push si
00288 01CD           57                           push di
00289                                           ;; We have to set ds to access the right data segment
00290 01CE           BB                   C000    mov bx, #0xc000
00291 01D1           8EDB                         mov ds, bx
00292 01D3           E8         349C              call _int10_func
00293                                             ;popa
00294 01D6           5F                           pop di
00295 01D7           5E                           pop si
00296 01D8           5D                           pop bp
00297 01D9           5B                           pop bx ; Should be old SP. Just discard it.
00298 01DA           5B                           pop bx
00299 01DB           5A                           pop dx
00300 01DC           59                           pop cx
00301 01DD           58                           pop ax
00302 01DE           1F                           pop ds
00303 01DF           07                           pop es
00304                       000001E0            int10_end:
00305 01E0           9D                           popf
00306 01E1           CF                           iret
00307                                           ! 247 endasm
00308                                           !BCC_ENDASM
00309                                           ! 248 typedef struct
00310                                           ! 249 {Bit8u svgamode;
00311                                           !BCC_EOS
00312                                           ! 250  Bit8u class;
00313                                           !BCC_EOS
00314                                           ! 251  Bit8u memmodel;
00315                                           !BCC_EOS
00316                                           ! 252  Bit8u pixbits;
00317                                           !BCC_EOS
00318                                           ! 253  Bit16u sstart;
00319                                           !BCC_EOS
00320                                           ! 254  Bit8u pelmask;
00321                                           !BCC_EOS
00322                                           ! 255  Bit8u dacmodel;
00323                                           !BCC_EOS
00324                                           ! 256 } VGAMODES;
00325                                           !BCC_EOS
00326                                           ! 257 static VGAMODES vga_modes[15 +1]=
00327                                           ! 258 {
00328                                           
00329                       000001E2            _vga_modes:
00330                                           ! 259  {0x00, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00331 01E2                        00            .byte	0
00332 01E3                        00            .byte	0
00333 01E4                        00            .byte	0
00334 01E5                        04            .byte	4
00335 01E6                      B800            .word	$B800
00336 01E8                        FF            .byte	$FF
00337 01E9                        02            .byte	2
00338                                           ! 260  {0x01, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00339 01EA                        01            .byte	1
00340 01EB                        00            .byte	0
00341 01EC                        00            .byte	0
00342 01ED                        04            .byte	4
00343 01EE                      B800            .word	$B800
00344 01F0                        FF            .byte	$FF
00345 01F1                        02            .byte	2
00346                                           ! 261  {0x02, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00347 01F2                        02            .byte	2
00348 01F3                        00            .byte	0
00349 01F4                        00            .byte	0
00350 01F5                        04            .byte	4
00351 01F6                      B800            .word	$B800
00352 01F8                        FF            .byte	$FF
00353 01F9                        02            .byte	2
00354                                           ! 262  {0x03, 0x00, 0x00, 4, 0xB800, 0xFF, 0x02},
00355 01FA                        03            .byte	3
00356 01FB                        00            .byte	0
00357 01FC                        00            .byte	0
00358 01FD                        04            .byte	4
00359 01FE                      B800            .word	$B800
00360 0200                        FF            .byte	$FF
00361 0201                        02            .byte	2
00362                                           ! 263  {0x04, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00363 0202                        04            .byte	4
00364 0203                        01            .byte	1
00365 0204                        02            .byte	2
00366 0205                        02            .byte	2
00367 0206                      B800            .word	$B800
00368 0208                        FF            .byte	$FF
00369 0209                        01            .byte	1
00370                                           ! 264  {0x05, 0x01, 0x02, 2, 0xB800, 0xFF, 0x01},
00371 020A                        05            .byte	5
00372 020B                        01            .byte	1
00373 020C                        02            .byte	2
00374 020D                        02            .byte	2
00375 020E                      B800            .word	$B800
00376 0210                        FF            .byte	$FF
00377 0211                        01            .byte	1
00378                                           ! 265  {0x06, 0x01, 0x02, 1, 0xB800, 0xFF, 0x01},
00379 0212                        06            .byte	6
00380 0213                        01            .byte	1
00381 0214                        02            .byte	2
00382 0215                        01            .byte	1
00383 0216                      B800            .word	$B800
00384 0218                        FF            .byte	$FF
00385 0219                        01            .byte	1
00386                                           ! 266  {0x07, 0x00, 0x01, 4, 0xB000, 0xFF, 0x00},
00387 021A                        07            .byte	7
00388 021B                        00            .byte	0
00389 021C                        01            .byte	1
00390 021D                        04            .byte	4
00391 021E                      B000            .word	$B000
00392 0220                        FF            .byte	$FF
00393 0221                        00            .byte	0
00394                                           ! 267  {0x0D, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00395 0222                        0D            .byte	$D
00396 0223                        01            .byte	1
00397 0224                        04            .byte	4
00398 0225                        04            .byte	4
00399 0226                      A000            .word	$A000
00400 0228                        FF            .byte	$FF
00401 0229                        01            .byte	1
00402                                           ! 268  {0x0E, 0x01, 0x04, 4, 0xA000, 0xFF, 0x01},
00403 022A                        0E            .byte	$E
00404 022B                        01            .byte	1
00405 022C                        04            .byte	4
00406 022D                        04            .byte	4
00407 022E                      A000            .word	$A000
00408 0230                        FF            .byte	$FF
00409 0231                        01            .byte	1
00410                                           ! 269  {0x0F, 0x01, 0x03, 1, 0xA000, 0xFF, 0x00},
00411 0232                        0F            .byte	$F
00412 0233                        01            .byte	1
00413 0234                        03            .byte	3
00414 0235                        01            .byte	1
00415 0236                      A000            .word	$A000
00416 0238                        FF            .byte	$FF
00417 0239                        00            .byte	0
00418                                           ! 270  {0x10, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00419 023A                        10            .byte	$10
00420 023B                        01            .byte	1
00421 023C                        04            .byte	4
00422 023D                        04            .byte	4
00423 023E                      A000            .word	$A000
00424 0240                        FF            .byte	$FF
00425 0241                        02            .byte	2
00426                                           ! 271  {0x11, 0x01, 0x03, 1, 0xA000, 0xFF, 0x02},
00427 0242                        11            .byte	$11
00428 0243                        01            .byte	1
00429 0244                        03            .byte	3
00430 0245                        01            .byte	1
00431 0246                      A000            .word	$A000
00432 0248                        FF            .byte	$FF
00433 0249                        02            .byte	2
00434                                           ! 272  {0x12, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02},
00435 024A                        12            .byte	$12
00436 024B                        01            .byte	1
00437 024C                        04            .byte	4
00438 024D                        04            .byte	4
00439 024E                      A000            .word	$A000
00440 0250                        FF            .byte	$FF
00441 0251                        02            .byte	2
00442                                           ! 273  {0x13, 0x01, 0x05, 8, 0xA0
00443 0252                        13            .byte	$13
00444 0253                        01            .byte	1
00445 0254                        05            .byte	5
00446 0255                        08            .byte	8
00447                                           ! 273 00, 0xFF, 0x03},
00448 0256                      A000            .word	$A000
00449 0258                        FF            .byte	$FF
00450 0259                        03            .byte	3
00451                                           ! 274  {0x6A, 0x01, 0x04, 4, 0xA000, 0xFF, 0x02}
00452 025A                        6A            .byte	$6A
00453 025B                        01            .byte	1
00454 025C                        04            .byte	4
00455 025D                        04            .byte	4
00456 025E                      A000            .word	$A000
00457 0260                        FF            .byte	$FF
00458 0261                        02            .byte	2
00459                                           ! 275 };
00460                                           !BCC_EOS
00461                                           ! 276 static Bit8u line_to_vpti[15 +1]={
00462                       00000262            _line_to_vpti:
00463                                           ! 277     0x17, 0x17, 0x18, 0x18, 0x04, 0x05, 0x06, 0x07,
00464 0262                        17            .byte	$17
00465 0263                        17            .byte	$17
00466 0264                        18            .byte	$18
00467 0265                        18            .byte	$18
00468 0266                        04            .byte	4
00469 0267                        05            .byte	5
00470 0268                        06            .byte	6
00471 0269                        07            .byte	7
00472                                           ! 278     0x0d, 0x0e, 0x11, 0x12, 0x1a, 0x1b, 0x1c, 0x1d,
00473 026A                        0D            .byte	$D
00474 026B                        0E            .byte	$E
00475 026C                        11            .byte	$11
00476 026D                        12            .byte	$12
00477 026E                        1A            .byte	$1A
00478 026F                        1B            .byte	$1B
00479 0270                        1C            .byte	$1C
00480 0271                        1D            .byte	$1D
00481                                           ! 279 };
00482                                           !BCC_EOS
00483                                           ! 280 static Bit8u dac_regs[3 +1]=
00484                                           ! 281 {0x3f,0x3f,0x3f,0xff};
00485                       00000272            _dac_regs:
00486 0272                        3F            .byte	$3F
00487 0273                        3F            .byte	$3F
00488 0274                        3F            .byte	$3F
00489 0275                        FF            .byte	$FF
00490                                           !BCC_EOS
00491                                           ! 282 typedef struct {
00492                                           ! 283     Bit8u twidth;
00493                                           !BCC_EOS
00494                                           ! 284     Bit8u theightm1;
00495                                           !BCC_EOS
00496                                           ! 285     Bit8u cheight;
00497                                           !BCC_EOS
00498                                           ! 286     Bit8u slength_l;
00499                                           !BCC_EOS
00500                                           ! 287     Bit8u slength_h;
00501                                           !BCC_EOS
00502                                           ! 288     Bit8u sequ_regs[4];
00503                                           !BCC_EOS
00504                                           ! 289     Bit8u miscreg;
00505                                           !BCC_EOS
00506                                           ! 290     Bit8u crtc_regs[25];
00507                                           !BCC_EOS
00508                                           ! 291     Bit8u actl_regs[20];
00509                                           !BCC_EOS
00510                                           ! 292     Bit8u grdc_regs[9];
00511                                           !BCC_EOS
00512                                           ! 293 } VideoParamTableEntry;
00513                                           !BCC_EOS
00514                                           ! 294 static VideoParamTableEntry video_param_table[30] = {
00515                       00000276            _video_param_table:
00516                                           ! 295 {
00517                                           ! 296  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00518 0276                        00            .byte	0
00519 0277                        00            .byte	0
00520 0278                        00            .byte	0
00521 0279                        00            .byte	0
00522 027A                        00            .byte	0
00523 027B                        00            .byte	0
00524 027C                        00            .byte	0
00525 027D                        00            .byte	0
00526                                           ! 297  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00527 027E                        00            .byte	0
00528 027F                        00            .byte	0
00529 0280                        00            .byte	0
00530 0281                        00            .byte	0
00531 0282                        00            .byte	0
00532 0283                        00            .byte	0
00533 0284                        00            .byte	0
00534 0285                        00            .byte	0
00535                                           ! 298  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00536 0286                        00            .byte	0
00537 0287                        00            .byte	0
00538 0288                        00            .byte	0
00539 0289                        00            .byte	0
00540 028A                        00            .byte	0
00541 028B                        00            .byte	0
00542 028C                        00            .byte	0
00543 028D                        00            .byte	0
00544                                           ! 299  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00545 028E                        00            .byte	0
00546 028F                        00            .byte	0
00547 0290                        00            .byte	0
00548 0291                        00            .byte	0
00549 0292                        00            .byte	0
00550 0293                        00            .byte	0
00551 0294                        00            .byte	0
00552 0295                        00            .byte	0
00553                                           ! 300  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00554 0296                        00            .byte	0
00555 0297                        00            .byte	0
00556 0298                        00            .byte	0
00557 0299                        00            .byte	0
00558 029A                        00            .byte	0
00559 029B                        00            .byte	0
00560 029C                        00            .byte	0
00561 029D                        00            .byte	0
00562                                           ! 301  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00563 029E                        00            .byte	0
00564 029F                        00            .byte	0
00565 02A0                        00            .byte	0
00566 02A1                        00            .byte	0
00567 02A2                        00            .byte	0
00568 02A3                        00            .byte	0
00569 02A4                        00            .byte	0
00570 02A5                        00            .byte	0
00571                                           ! 302  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00572 02A6                        00            .byte	0
00573 02A7                        00            .byte	0
00574 02A8                        00            .byte	0
00575 02A9                        00            .byte	0
00576 02AA                        00            .byte	0
00577 02AB                        00            .byte	0
00578 02AC                        00            .byte	0
00579 02AD                        00            .byte	0
00580                                           ! 303  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00581 02AE                        00            .byte	0
00582 02AF                        00            .byte	0
00583 02B0                        00            .byte	0
00584 02B1                        00            .byte	0
00585 02B2                        00            .byte	0
00586 02B3                        00            .byte	0
00587 02B4                        00            .byte	0
00588 02B5                        00            .byte	0
00589                                           ! 304 },
00590                                           ! 305 {
00591                                           ! 306  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00592 02B6                        00            .byte	0
00593 02B7                        00            .byte	0
00594 02B8                        00            .byte	0
00595 02B9                        00            .byte	0
00596 02BA                        00            .byte	0
00597 02BB                        00            .byte	0
00598 02BC                        00            .byte	0
00599 02BD                        00            .byte	0
00600                                           ! 307  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00601 02BE                        00            .byte	0
00602 02BF                        00            .byte	0
00603 02C0                        00            .byte	0
00604 02C1                        00            .byte	0
00605 02C2                        00            .byte	0
00606 02C3                        00            .byte	0
00607 02C4                        00            .byte	0
00608 02C5                        00            .byte	0
00609                                           ! 308  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00610 02C6                        00            .byte	0
00611 02C7                        00            .byte	0
00612 02C8                        00            .byte	0
00613 02C9                        00            .byte	0
00614 02CA                        00            .byte	0
00615 02CB                        00            .byte	0
00616 02CC                        00            .byte	0
00617 02CD                        00            .byte	0
00618                                           ! 309  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00619 02CE                        00            .byte	0
00620 02CF                        00            .byte	0
00621 02D0                        00            .byte	0
00622 02D1                        00            .byte	0
00623 02D2                        00            .byte	0
00624 02D3                        00            .byte	0
00625 02D4                        00            .byte	0
00626 02D5                        00            .byte	0
00627                                           ! 310  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00628 02D6                        00            .byte	0
00629 02D7                        00            .byte	0
00630 02D8                        00            .byte	0
00631 02D9                        00            .byte	0
00632 02DA                        00            .byte	0
00633 02DB                        00            .byte	0
00634 02DC                        00            .byte	0
00635 02DD                        00            .byte	0
00636                                           ! 311  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00637 02DE                        00            .byte	0
00638 02DF                        00            .byte	0
00639 02E0                        00            .byte	0
00640 02E1                        00            .byte	0
00641 02E2                        00            .byte	0
00642 02E3                        00            .byte	0
00643 02E4                        00            .byte	0
00644 02E5                        00            .byte	0
00645                                           ! 312  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00646 02E6                        00            .byte	0
00647 02E7                        00            .byte	0
00648 02E8                        00            .byte	0
00649 02E9                        00            .byte	0
00650 02EA                        00            .byte	0
00651 02EB                        00            .byte	0
00652 02EC                        00            .byte	0
00653 02ED                        00            .byte	0
00654                                           ! 313  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00655 02EE                        00            .byte	0
00656 02EF                        00            .byte	0
00657 02F0                        00            .byte	0
00658 02F1                        00            .byte	0
00659 02F2                        00            .byte	0
00660 02F3                        00            .byte	0
00661 02F4                        00            .byte	0
00662 02F5                        00            .byte	0
00663                                           ! 314 },
00664                                           ! 315 {
00665                                           ! 316  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00666 02F6                        00            .byte	0
00667 02F7                        00            .byte	0
00668 02F8                        00            .byte	0
00669 02F9                        00            .byte	0
00670 02FA                        00            .byte	0
00671 02FB                        00            .byte	0
00672 02FC                        00            .byte	0
00673 02FD                        00            .byte	0
00674                                           ! 317  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00675 02FE                        00            .byte	0
00676 02FF                        00            .byte	0
00677 0300                        00            .byte	0
00678 0301                        00            .byte	0
00679 0302                        00            .byte	0
00680 0303                        00            .byte	0
00681 0304                        00            .byte	0
00682 0305                        00            .byte	0
00683                                           ! 318  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00684 0306                        00            .byte	0
00685 0307                        00            .byte	0
00686 0308                        00            .byte	0
00687 0309                        00            .byte	0
00688 030A                        00            .byte	0
00689 030B                        00            .byte	0
00690 030C                        00            .byte	0
00691 030D                        00            .byte	0
00692                                           ! 319  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00693 030E                        00            .byte	0
00694 030F                        00            .byte	0
00695 0310                        00            .byte	0
00696 0311                        00            .byte	0
00697 0312                        00            .byte	0
00698 0313                        00            .byte	0
00699 0314                        00            .byte	0
00700 0315                        00            .byte	0
00701                                           ! 320  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00702 0316                        00            .byte	0
00703 0317                        00            .byte	0
00704 0318                        00            .byte	0
00705 0319                        00            .byte	0
00706 031A                        00            .byte	0
00707 031B                        00            .byte	0
00708 031C                        00            .byte	0
00709 031D                        00            .byte	0
00710                                           ! 321  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00711 031E                        00            .byte	0
00712 031F                        00            .byte	0
00713 0320                        00            .byte	0
00714 0321                        00            .byte	0
00715 0322                        00            .byte	0
00716 0323                        00            .byte	0
00717 0324                        00            .byte	0
00718 0325                        00            .byte	0
00719                                           ! 322  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00720 0326                        00            .byte	0
00721 0327                        00            .byte	0
00722 0328                        00            .byte	0
00723 0329                        00            .byte	0
00724 032A                        00            .byte	0
00725 032B                        00            .byte	0
00726 032C                        00            .byte	0
00727 032D                        00            .byte	0
00728                                           ! 323  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00729 032E                        00            .byte	0
00730 032F                        00            .byte	0
00731 0330                        00            .byte	0
00732 0331                        00            .byte	0
00733 0332                        00            .byte	0
00734 0333                        00            .byte	0
00735 0334                        00            .byte	0
00736 0335                        00            .byte	0
00737                                           ! 324 },
00738                                           ! 325 {
00739                                           ! 326  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00740 0336                        00            .byte	0
00741 0337                        00            .byte	0
00742 0338                        00            .byte	0
00743 0339                        00            .byte	0
00744 033A                        00            .byte	0
00745 033B                        00            .byte	0
00746 033C                        00            .byte	0
00747 033D                        00            .byte	0
00748                                           ! 327  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00749 033E                        00            .byte	0
00750 033F                        00            .byte	0
00751 0340                        00            .byte	0
00752 0341                        00            .byte	0
00753 0342                        00            .byte	0
00754 0343                        00            .byte	0
00755 0344                        00            .byte	0
00756 0345                        00            .byte	0
00757                                           ! 328  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00758 0346                        00            .byte	0
00759 0347                        00            .byte	0
00760 0348                        00            .byte	0
00761 0349                        00            .byte	0
00762 034A                        00            .byte	0
00763 034B                        00            .byte	0
00764 034C                        00            .byte	0
00765 034D                        00            .byte	0
00766                                           ! 329  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00767 034E                        00            .byte	0
00768 034F                        00            .byte	0
00769 0350                        00            .byte	0
00770 0351                        00            .byte	0
00771 0352                        00            .byte	0
00772 0353                        00            .byte	0
00773 0354                        00            .byte	0
00774 0355                        00            .byte	0
00775                                           ! 330  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00776 0356                        00            .byte	0
00777 0357                        00            .byte	0
00778 0358                        00            .byte	0
00779 0359                        00            .byte	0
00780 035A                        00            .byte	0
00781 035B                        00            .byte	0
00782 035C                        00            .byte	0
00783 035D                        00            .byte	0
00784                                           ! 331  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00785 035E                        00            .byte	0
00786 035F                        00            .byte	0
00787 0360                        00            .byte	0
00788 0361                        00            .byte	0
00789 0362                        00            .byte	0
00790 0363                        00            .byte	0
00791                                           ! 331 , 0x00,
00792 0364                        00            .byte	0
00793 0365                        00            .byte	0
00794                                           ! 332  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00795 0366                        00            .byte	0
00796 0367                        00            .byte	0
00797 0368                        00            .byte	0
00798 0369                        00            .byte	0
00799 036A                        00            .byte	0
00800 036B                        00            .byte	0
00801 036C                        00            .byte	0
00802 036D                        00            .byte	0
00803                                           ! 333  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00804 036E                        00            .byte	0
00805 036F                        00            .byte	0
00806 0370                        00            .byte	0
00807 0371                        00            .byte	0
00808 0372                        00            .byte	0
00809 0373                        00            .byte	0
00810 0374                        00            .byte	0
00811 0375                        00            .byte	0
00812                                           ! 334 },
00813                                           ! 335 {
00814                                           ! 336  40, 24, 8, 0x00, 0x08,
00815 0376                        28            .byte	$28
00816 0377                        18            .byte	$18
00817 0378                        08            .byte	8
00818 0379                        00            .byte	0
00819 037A                        08            .byte	8
00820                                           ! 337  0x09, 0x03, 0x00, 0x02,
00821 037B                        09            .byte	9
00822 037C                        03            .byte	3
00823 037D                        00            .byte	0
00824 037E                        02            .byte	2
00825                                           ! 338  0x63,
00826 037F                        63            .byte	$63
00827                                           ! 339  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00828 0380                        2D            .byte	$2D
00829 0381                        27            .byte	$27
00830 0382                        28            .byte	$28
00831 0383                        90            .byte	$90
00832 0384                        2B            .byte	$2B
00833 0385                        80            .byte	$80
00834 0386                        BF            .byte	$BF
00835 0387                        1F            .byte	$1F
00836                                           ! 340  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00837 0388                        00            .byte	0
00838 0389                        C1            .byte	$C1
00839 038A                        00            .byte	0
00840 038B                        00            .byte	0
00841 038C                        00            .byte	0
00842 038D                        00            .byte	0
00843 038E                        00            .byte	0
00844 038F                        00            .byte	0
00845                                           ! 341  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00846 0390                        9C            .byte	$9C
00847 0391                        8E            .byte	$8E
00848 0392                        8F            .byte	$8F
00849 0393                        14            .byte	$14
00850 0394                        00            .byte	0
00851 0395                        96            .byte	$96
00852 0396                        B9            .byte	$B9
00853 0397                        A2            .byte	$A2
00854                                           ! 342  0xff,
00855 0398                        FF            .byte	$FF
00856                                           ! 343  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00857 0399                        00            .byte	0
00858 039A                        13            .byte	$13
00859 039B                        15            .byte	$15
00860 039C                        17            .byte	$17
00861 039D                        02            .byte	2
00862 039E                        04            .byte	4
00863 039F                        06            .byte	6
00864 03A0                        07            .byte	7
00865                                           ! 344  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00866 03A1                        10            .byte	$10
00867 03A2                        11            .byte	$11
00868 03A3                        12            .byte	$12
00869 03A4                        13            .byte	$13
00870 03A5                        14            .byte	$14
00871 03A6                        15            .byte	$15
00872 03A7                        16            .byte	$16
00873 03A8                        17            .byte	$17
00874                                           ! 345  0x01, 0x00, 0x03, 0x00,
00875 03A9                        01            .byte	1
00876 03AA                        00            .byte	0
00877 03AB                        03            .byte	3
00878 03AC                        00            .byte	0
00879                                           ! 346  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00880 03AD                        00            .byte	0
00881 03AE                        00            .byte	0
00882 03AF                        00            .byte	0
00883 03B0                        00            .byte	0
00884 03B1                        00            .byte	0
00885 03B2                        30            .byte	$30
00886 03B3                        0F            .byte	$F
00887 03B4                        0F            .byte	$F
00888 03B5                        FF            .byte	$FF
00889                                           ! 347 },
00890                                           ! 348 {
00891                                           ! 349  40, 24, 8, 0x00, 0x08,
00892 03B6                        28            .byte	$28
00893 03B7                        18            .byte	$18
00894 03B8                        08            .byte	8
00895 03B9                        00            .byte	0
00896 03BA                        08            .byte	8
00897                                           ! 350  0x09, 0x03, 0x00, 0x02,
00898 03BB                        09            .byte	9
00899 03BC                        03            .byte	3
00900 03BD                        00            .byte	0
00901 03BE                        02            .byte	2
00902                                           ! 351  0x63,
00903 03BF                        63            .byte	$63
00904                                           ! 352  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
00905 03C0                        2D            .byte	$2D
00906 03C1                        27            .byte	$27
00907 03C2                        28            .byte	$28
00908 03C3                        90            .byte	$90
00909 03C4                        2B            .byte	$2B
00910 03C5                        80            .byte	$80
00911 03C6                        BF            .byte	$BF
00912 03C7                        1F            .byte	$1F
00913                                           ! 353  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00914 03C8                        00            .byte	0
00915 03C9                        C1            .byte	$C1
00916 03CA                        00            .byte	0
00917 03CB                        00            .byte	0
00918 03CC                        00            .byte	0
00919 03CD                        00            .byte	0
00920 03CE                        00            .byte	0
00921 03CF                        00            .byte	0
00922                                           ! 354  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xa2,
00923 03D0                        9C            .byte	$9C
00924 03D1                        8E            .byte	$8E
00925 03D2                        8F            .byte	$8F
00926 03D3                        14            .byte	$14
00927 03D4                        00            .byte	0
00928 03D5                        96            .byte	$96
00929 03D6                        B9            .byte	$B9
00930 03D7                        A2            .byte	$A2
00931                                           ! 355  0xff,
00932 03D8                        FF            .byte	$FF
00933                                           ! 356  0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
00934 03D9                        00            .byte	0
00935 03DA                        13            .byte	$13
00936 03DB                        15            .byte	$15
00937 03DC                        17            .byte	$17
00938 03DD                        02            .byte	2
00939 03DE                        04            .byte	4
00940 03DF                        06            .byte	6
00941 03E0                        07            .byte	7
00942                                           ! 357  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
00943 03E1                        10            .byte	$10
00944 03E2                        11            .byte	$11
00945 03E3                        12            .byte	$12
00946 03E4                        13            .byte	$13
00947 03E5                        14            .byte	$14
00948 03E6                        15            .byte	$15
00949 03E7                        16            .byte	$16
00950 03E8                        17            .byte	$17
00951                                           ! 358  0x01, 0x00, 0x03, 0x00,
00952 03E9                        01            .byte	1
00953 03EA                        00            .byte	0
00954 03EB                        03            .byte	3
00955 03EC                        00            .byte	0
00956                                           ! 359  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0f, 0x0f, 0xff,
00957 03ED                        00            .byte	0
00958 03EE                        00            .byte	0
00959 03EF                        00            .byte	0
00960 03F0                        00            .byte	0
00961 03F1                        00            .byte	0
00962 03F2                        30            .byte	$30
00963 03F3                        0F            .byte	$F
00964 03F4                        0F            .byte	$F
00965 03F5                        FF            .byte	$FF
00966                                           ! 360 },
00967                                           ! 361 {
00968                                           ! 362  80, 24, 8, 0x00, 0x10,
00969 03F6                        50            .byte	$50
00970 03F7                        18            .byte	$18
00971 03F8                        08            .byte	8
00972 03F9                        00            .byte	0
00973 03FA                        10            .byte	$10
00974                                           ! 363  0x01, 0x01, 0x00, 0x06,
00975 03FB                        01            .byte	1
00976 03FC                        01            .byte	1
00977 03FD                        00            .byte	0
00978 03FE                        06            .byte	6
00979                                           ! 364  0x63,
00980 03FF                        63            .byte	$63
00981                                           ! 365  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
00982 0400                        5F            .byte	$5F
00983 0401                        4F            .byte	$4F
00984 0402                        50            .byte	$50
00985 0403                        82            .byte	$82
00986 0404                        54            .byte	$54
00987 0405                        80            .byte	$80
00988 0406                        BF            .byte	$BF
00989 0407                        1F            .byte	$1F
00990                                           ! 366  0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
00991 0408                        00            .byte	0
00992 0409                        C1            .byte	$C1
00993 040A                        00            .byte	0
00994 040B                        00            .byte	0
00995 040C                        00            .byte	0
00996 040D                        00            .byte	0
00997 040E                        00            .byte	0
00998 040F                        00            .byte	0
00999                                           ! 367  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xc2,
01000 0410                        9C            .byte	$9C
01001 0411                        8E            .byte	$8E
01002 0412                        8F            .byte	$8F
01003 0413                        28            .byte	$28
01004 0414                        00            .byte	0
01005 0415                        96            .byte	$96
01006 0416                        B9            .byte	$B9
01007 0417                        C2            .byte	$C2
01008                                           ! 368  0xff,
01009 0418                        FF            .byte	$FF
01010                                           ! 369  0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01011 0419                        00            .byte	0
01012 041A                        17            .byte	$17
01013 041B                        17            .byte	$17
01014 041C                        17            .byte	$17
01015 041D                        17            .byte	$17
01016 041E                        17            .byte	$17
01017 041F                        17            .byte	$17
01018 0420                        17            .byte	$17
01019                                           ! 370  0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
01020 0421                        17            .byte	$17
01021 0422                        17            .byte	$17
01022 0423                        17            .byte	$17
01023 0424                        17            .byte	$17
01024 0425                        17            .byte	$17
01025 0426                        17            .byte	$17
01026 0427                        17            .byte	$17
01027 0428                        17            .byte	$17
01028                                           ! 371  0x01, 0x00, 0x01, 0x00,
01029 0429                        01            .byte	1
01030 042A                        00            .byte	0
01031 042B                        01            .byte	1
01032 042C                        00            .byte	0
01033                                           ! 372  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x0f, 0xff,
01034 042D                        00            .byte	0
01035 042E                        00            .byte	0
01036 042F                        00            .byte	0
01037 0430                        00            .byte	0
01038 0431                        00            .byte	0
01039 0432                        00            .byte	0
01040 0433                        0D            .byte	$D
01041 0434                        0F            .byte	$F
01042 0435                        FF            .byte	$FF
01043                                           ! 373 },
01044                                           ! 374 {
01045                                           ! 375  80, 24, 16, 0x00, 0x10,
01046 0436                        50            .byte	$50
01047 0437                        18            .byte	$18
01048 0438                        10            .byte	$10
01049 0439                        00            .byte	0
01050 043A                        10            .byte	$10
01051                                           ! 376  0x00, 0x03, 0x00, 0x02,
01052 043B                        00            .byte	0
01053 043C                        03            .byte	3
01054 043D                        00            .byte	0
01055 043E                        02            .byte	2
01056                                           ! 377  0x66,
01057 043F                        66            .byte	$66
01058                                           ! 378  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
01059 0440                        5F            .byte	$5F
01060 0441                        4F            .byte	$4F
01061 0442                        50            .byte	$50
01062 0443                        82            .byte	$82
01063 0444                        55            .byte	$55
01064 0445                        81            .byte	$81
01065 0446                        BF            .byte	$BF
01066 0447                        1F            .byte	$1F
01067                                           ! 379  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
01068 0448                        00            .byte	0
01069 0449                        4F            .byte	$4F
01070 044A                        0D            .byte	$D
01071 044B                        0E            .byte	$E
01072 044C                        00            .byte	0
01073 044D                        00            .byte	0
01074 044E                        00            .byte	0
01075 044F                        00            .byte	0
01076                                           ! 380  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
01077 0450                        9C            .byte	$9C
01078 0451                        8E            .byte	$8E
01079 0452                        8F            .byte	$8F
01080 0453                        28            .byte	$28
01081 0454                        0F            .byte	$F
01082 0455                        96            .byte	$96
01083 0456                        B9            .byte	$B9
01084 0457                        A3            .byte	$A3
01085                                           ! 381  0xff,
01086 0458                        FF            .byte	$FF
01087                                           ! 382  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
01088 0459                        00            .byte	0
01089 045A                        08            .byte	8
01090 045B                        08            .byte	8
01091 045C                        08            .byte	8
01092 045D                        08            .byte	8
01093 045E                        08            .byte	8
01094 045F                        08            .byte	8
01095 0460                        08            .byte	8
01096                                           ! 383  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
01097 0461                        10            .byte	$10
01098 0462                        18            .byte	$18
01099 0463                        18            .byte	$18
01100 0464                        18            .byte	$18
01101 0465                        18            .byte	$18
01102 0466                        18            .byte	$18
01103 0467                        18            .byte	$18
01104 0468                        18            .byte	$18
01105                                           ! 384  0x0e, 0x00, 0x0f, 0x08,
01106 0469                        0E            .byte	$E
01107 046A                        00            .byte	0
01108 046B                        0F            .byte	$F
01109 046C                        08            .byte	8
01110                                           ! 385  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
01111 046D                        00            .byte	0
01112 046E                        00            .byte	0
01113 046F                        00            .byte	0
01114 0470                        00            .byte	0
01115 0471                        00            .byte	0
01116 0472                        10            .byte	$10
01117 0473                        0A            .byte	$A
01118 0474                        0F            .byte	$F
01119 0475                        FF            .byte	$FF
01120                                           ! 386 },
01121                                           ! 387 {
01122                                           ! 388  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01123 0476                        00            .byte	0
01124 0477                        00            .byte	0
01125 0478                        00            .byte	0
01126 0479                        00            .byte	0
01127 047A                        00            .byte	0
01128 047B                        00            .byte	0
01129 047C                        00            .byte	0
01130 047D                        00            .byte	0
01131                                           ! 389  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01132 047E                        00            .byte	0
01133 047F                        00            .byte	0
01134 0480                        00            .byte	0
01135 0481                        00            .byte	0
01136 0482                        00            .byte	0
01137 0483                        00            .byte	0
01138 0484                        00            .byte	0
01139 0485                        00            .byte	0
01140                                           ! 390  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01141 0486                        00            .byte	0
01142 0487                        00            .byte	0
01143 0488                        00            .byte	0
01144 0489                        00            .byte	0
01145 048A                        00            .byte	0
01146 048B                        00            .byte	0
01147 048C                        00            .byte	0
01148 048D                        00            .byte	0
01149                                           ! 391  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01150 048E                        00            .byte	0
01151 048F                        00            .byte	0
01152 0490                        00            .byte	0
01153 0491                        00            .byte	0
01154 0492                        00            .byte	0
01155 0493                        00            .byte	0
01156 0494                        00            .byte	0
01157 0495                        00            .byte	0
01158                                           ! 392  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01159 0496                        00            .byte	0
01160 0497                        00            .byte	0
01161 0498                        00            .byte	0
01162 0499                        00            .byte	0
01163 049A                        00            .byte	0
01164 049B                        00            .byte	0
01165 049C                        00            .byte	0
01166 049D                        00            .byte	0
01167                                           ! 393  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01168 049E                        00            .byte	0
01169 049F                        00            .byte	0
01170 04A0                        00            .byte	0
01171 04A1                        00            .byte	0
01172 04A2                        00            .byte	0
01173 04A3                        00            .byte	0
01174 04A4                        00            .byte	0
01175 04A5                        00            .byte	0
01176                                           ! 394  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01177 04A6                        00            .byte	0
01178 04A7                        00            .byte	0
01179 04A8                        00            .byte	0
01180 04A9                        00            .byte	0
01181 04AA                        00            .byte	0
01182 04AB                        00            .byte	0
01183 04AC                        00            .byte	0
01184 04AD                        00            .byte	0
01185                                           ! 395  0x00, 0x00, 0x00, 0x
01186 04AE                        00            .byte	0
01187 04AF                        00            .byte	0
01188 04B0                        00            .byte	0
01189                                           ! 395 00, 0x00, 0x00, 0x00, 0x00,
01190 04B1                        00            .byte	0
01191 04B2                        00            .byte	0
01192 04B3                        00            .byte	0
01193 04B4                        00            .byte	0
01194 04B5                        00            .byte	0
01195                                           ! 396 },
01196                                           ! 397 {
01197                                           ! 398  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01198 04B6                        00            .byte	0
01199 04B7                        00            .byte	0
01200 04B8                        00            .byte	0
01201 04B9                        00            .byte	0
01202 04BA                        00            .byte	0
01203 04BB                        00            .byte	0
01204 04BC                        00            .byte	0
01205 04BD                        00            .byte	0
01206                                           ! 399  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01207 04BE                        00            .byte	0
01208 04BF                        00            .byte	0
01209 04C0                        00            .byte	0
01210 04C1                        00            .byte	0
01211 04C2                        00            .byte	0
01212 04C3                        00            .byte	0
01213 04C4                        00            .byte	0
01214 04C5                        00            .byte	0
01215                                           ! 400  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01216 04C6                        00            .byte	0
01217 04C7                        00            .byte	0
01218 04C8                        00            .byte	0
01219 04C9                        00            .byte	0
01220 04CA                        00            .byte	0
01221 04CB                        00            .byte	0
01222 04CC                        00            .byte	0
01223 04CD                        00            .byte	0
01224                                           ! 401  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01225 04CE                        00            .byte	0
01226 04CF                        00            .byte	0
01227 04D0                        00            .byte	0
01228 04D1                        00            .byte	0
01229 04D2                        00            .byte	0
01230 04D3                        00            .byte	0
01231 04D4                        00            .byte	0
01232 04D5                        00            .byte	0
01233                                           ! 402  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01234 04D6                        00            .byte	0
01235 04D7                        00            .byte	0
01236 04D8                        00            .byte	0
01237 04D9                        00            .byte	0
01238 04DA                        00            .byte	0
01239 04DB                        00            .byte	0
01240 04DC                        00            .byte	0
01241 04DD                        00            .byte	0
01242                                           ! 403  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01243 04DE                        00            .byte	0
01244 04DF                        00            .byte	0
01245 04E0                        00            .byte	0
01246 04E1                        00            .byte	0
01247 04E2                        00            .byte	0
01248 04E3                        00            .byte	0
01249 04E4                        00            .byte	0
01250 04E5                        00            .byte	0
01251                                           ! 404  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01252 04E6                        00            .byte	0
01253 04E7                        00            .byte	0
01254 04E8                        00            .byte	0
01255 04E9                        00            .byte	0
01256 04EA                        00            .byte	0
01257 04EB                        00            .byte	0
01258 04EC                        00            .byte	0
01259 04ED                        00            .byte	0
01260                                           ! 405  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01261 04EE                        00            .byte	0
01262 04EF                        00            .byte	0
01263 04F0                        00            .byte	0
01264 04F1                        00            .byte	0
01265 04F2                        00            .byte	0
01266 04F3                        00            .byte	0
01267 04F4                        00            .byte	0
01268 04F5                        00            .byte	0
01269                                           ! 406 },
01270                                           ! 407 {
01271                                           ! 408  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01272 04F6                        00            .byte	0
01273 04F7                        00            .byte	0
01274 04F8                        00            .byte	0
01275 04F9                        00            .byte	0
01276 04FA                        00            .byte	0
01277 04FB                        00            .byte	0
01278 04FC                        00            .byte	0
01279 04FD                        00            .byte	0
01280                                           ! 409  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01281 04FE                        00            .byte	0
01282 04FF                        00            .byte	0
01283 0500                        00            .byte	0
01284 0501                        00            .byte	0
01285 0502                        00            .byte	0
01286 0503                        00            .byte	0
01287 0504                        00            .byte	0
01288 0505                        00            .byte	0
01289                                           ! 410  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01290 0506                        00            .byte	0
01291 0507                        00            .byte	0
01292 0508                        00            .byte	0
01293 0509                        00            .byte	0
01294 050A                        00            .byte	0
01295 050B                        00            .byte	0
01296 050C                        00            .byte	0
01297 050D                        00            .byte	0
01298                                           ! 411  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01299 050E                        00            .byte	0
01300 050F                        00            .byte	0
01301 0510                        00            .byte	0
01302 0511                        00            .byte	0
01303 0512                        00            .byte	0
01304 0513                        00            .byte	0
01305 0514                        00            .byte	0
01306 0515                        00            .byte	0
01307                                           ! 412  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01308 0516                        00            .byte	0
01309 0517                        00            .byte	0
01310 0518                        00            .byte	0
01311 0519                        00            .byte	0
01312 051A                        00            .byte	0
01313 051B                        00            .byte	0
01314 051C                        00            .byte	0
01315 051D                        00            .byte	0
01316                                           ! 413  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01317 051E                        00            .byte	0
01318 051F                        00            .byte	0
01319 0520                        00            .byte	0
01320 0521                        00            .byte	0
01321 0522                        00            .byte	0
01322 0523                        00            .byte	0
01323 0524                        00            .byte	0
01324 0525                        00            .byte	0
01325                                           ! 414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01326 0526                        00            .byte	0
01327 0527                        00            .byte	0
01328 0528                        00            .byte	0
01329 0529                        00            .byte	0
01330 052A                        00            .byte	0
01331 052B                        00            .byte	0
01332 052C                        00            .byte	0
01333 052D                        00            .byte	0
01334                                           ! 415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01335 052E                        00            .byte	0
01336 052F                        00            .byte	0
01337 0530                        00            .byte	0
01338 0531                        00            .byte	0
01339 0532                        00            .byte	0
01340 0533                        00            .byte	0
01341 0534                        00            .byte	0
01342 0535                        00            .byte	0
01343                                           ! 416 },
01344                                           ! 417 {
01345                                           ! 418  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01346 0536                        00            .byte	0
01347 0537                        00            .byte	0
01348 0538                        00            .byte	0
01349 0539                        00            .byte	0
01350 053A                        00            .byte	0
01351 053B                        00            .byte	0
01352 053C                        00            .byte	0
01353 053D                        00            .byte	0
01354                                           ! 419  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01355 053E                        00            .byte	0
01356 053F                        00            .byte	0
01357 0540                        00            .byte	0
01358 0541                        00            .byte	0
01359 0542                        00            .byte	0
01360 0543                        00            .byte	0
01361 0544                        00            .byte	0
01362 0545                        00            .byte	0
01363                                           ! 420  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01364 0546                        00            .byte	0
01365 0547                        00            .byte	0
01366 0548                        00            .byte	0
01367 0549                        00            .byte	0
01368 054A                        00            .byte	0
01369 054B                        00            .byte	0
01370 054C                        00            .byte	0
01371 054D                        00            .byte	0
01372                                           ! 421  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01373 054E                        00            .byte	0
01374 054F                        00            .byte	0
01375 0550                        00            .byte	0
01376 0551                        00            .byte	0
01377 0552                        00            .byte	0
01378 0553                        00            .byte	0
01379 0554                        00            .byte	0
01380 0555                        00            .byte	0
01381                                           ! 422  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01382 0556                        00            .byte	0
01383 0557                        00            .byte	0
01384 0558                        00            .byte	0
01385 0559                        00            .byte	0
01386 055A                        00            .byte	0
01387 055B                        00            .byte	0
01388 055C                        00            .byte	0
01389 055D                        00            .byte	0
01390                                           ! 423  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01391 055E                        00            .byte	0
01392 055F                        00            .byte	0
01393 0560                        00            .byte	0
01394 0561                        00            .byte	0
01395 0562                        00            .byte	0
01396 0563                        00            .byte	0
01397 0564                        00            .byte	0
01398 0565                        00            .byte	0
01399                                           ! 424  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01400 0566                        00            .byte	0
01401 0567                        00            .byte	0
01402 0568                        00            .byte	0
01403 0569                        00            .byte	0
01404 056A                        00            .byte	0
01405 056B                        00            .byte	0
01406 056C                        00            .byte	0
01407 056D                        00            .byte	0
01408                                           ! 425  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01409 056E                        00            .byte	0
01410 056F                        00            .byte	0
01411 0570                        00            .byte	0
01412 0571                        00            .byte	0
01413 0572                        00            .byte	0
01414 0573                        00            .byte	0
01415 0574                        00            .byte	0
01416 0575                        00            .byte	0
01417                                           ! 426 },
01418                                           ! 427 {
01419                                           ! 428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01420 0576                        00            .byte	0
01421 0577                        00            .byte	0
01422 0578                        00            .byte	0
01423 0579                        00            .byte	0
01424 057A                        00            .byte	0
01425 057B                        00            .byte	0
01426 057C                        00            .byte	0
01427 057D                        00            .byte	0
01428                                           ! 429  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01429 057E                        00            .byte	0
01430 057F                        00            .byte	0
01431 0580                        00            .byte	0
01432 0581                        00            .byte	0
01433 0582                        00            .byte	0
01434 0583                        00            .byte	0
01435 0584                        00            .byte	0
01436 0585                        00            .byte	0
01437                                           ! 430  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01438 0586                        00            .byte	0
01439 0587                        00            .byte	0
01440 0588                        00            .byte	0
01441 0589                        00            .byte	0
01442 058A                        00            .byte	0
01443 058B                        00            .byte	0
01444 058C                        00            .byte	0
01445 058D                        00            .byte	0
01446                                           ! 431  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01447 058E                        00            .byte	0
01448 058F                        00            .byte	0
01449 0590                        00            .byte	0
01450 0591                        00            .byte	0
01451 0592                        00            .byte	0
01452 0593                        00            .byte	0
01453 0594                        00            .byte	0
01454 0595                        00            .byte	0
01455                                           ! 432  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01456 0596                        00            .byte	0
01457 0597                        00            .byte	0
01458 0598                        00            .byte	0
01459 0599                        00            .byte	0
01460 059A                        00            .byte	0
01461 059B                        00            .byte	0
01462 059C                        00            .byte	0
01463 059D                        00            .byte	0
01464                                           ! 433  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01465 059E                        00            .byte	0
01466 059F                        00            .byte	0
01467 05A0                        00            .byte	0
01468 05A1                        00            .byte	0
01469 05A2                        00            .byte	0
01470 05A3                        00            .byte	0
01471 05A4                        00            .byte	0
01472 05A5                        00            .byte	0
01473                                           ! 434  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01474 05A6                        00            .byte	0
01475 05A7                        00            .byte	0
01476 05A8                        00            .byte	0
01477 05A9                        00            .byte	0
01478 05AA                        00            .byte	0
01479 05AB                        00            .byte	0
01480 05AC                        00            .byte	0
01481 05AD                        00            .byte	0
01482                                           ! 435  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01483 05AE                        00            .byte	0
01484 05AF                        00            .byte	0
01485 05B0                        00            .byte	0
01486 05B1                        00            .byte	0
01487 05B2                        00            .byte	0
01488 05B3                        00            .byte	0
01489 05B4                        00            .byte	0
01490 05B5                        00            .byte	0
01491                                           ! 436 },
01492                                           ! 437 {
01493                                           ! 438  40, 24, 8, 0x00, 0x20,
01494 05B6                        28            .byte	$28
01495 05B7                        18            .byte	$18
01496 05B8                        08            .byte	8
01497 05B9                        00            .byte	0
01498 05BA                        20            .byte	$20
01499                                           ! 439  0x09, 0x0f, 0x00, 0x06,
01500 05BB                        09            .byte	9
01501 05BC                        0F            .byte	$F
01502 05BD                        00            .byte	0
01503 05BE                        06            .byte	6
01504                                           ! 440  0x63,
01505 05BF                        63            .byte	$63
01506                                           ! 441  0x2d, 0x27, 0x28, 0x90, 0x2b, 0x80, 0xbf, 0x1f,
01507 05C0                        2D            .byte	$2D
01508 05C1                        27            .byte	$27
01509 05C2                        28            .byte	$28
01510 05C3                        90            .byte	$90
01511 05C4                        2B            .byte	$2B
01512 05C5                        80            .byte	$80
01513 05C6                        BF            .byte	$BF
01514 05C7                        1F            .byte	$1F
01515                                           ! 442  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01516 05C8                        00            .byte	0
01517 05C9                        C0            .byte	$C0
01518 05CA                        00            .byte	0
01519 05CB                        00            .byte	0
01520 05CC                        00            .byte	0
01521 05CD                        00            .byte	0
01522 05CE                        00            .byte	0
01523 05CF                        00            .byte	0
01524                                           ! 443  0x9c, 0x8e, 0x8f, 0x14, 0x00, 0x96, 0xb9, 0xe3,
01525 05D0                        9C            .byte	$9C
01526 05D1                        8E            .byte	$8E
01527 05D2                        8F            .byte	$8F
01528 05D3                        14            .byte	$14
01529 05D4                        00            .byte	0
01530 05D5                        96            .byte	$96
01531 05D6                        B9            .byte	$B9
01532 05D7                        E3            .byte	$E3
01533                                           ! 444  0xff,
01534 05D8                        FF            .byte	$FF
01535                                           ! 445  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01536 05D9                        00            .byte	0
01537 05DA                        01            .byte	1
01538 05DB                        02            .byte	2
01539 05DC                        03            .byte	3
01540 05DD                        04            .byte	4
01541 05DE                        05            .byte	5
01542 05DF                        06            .byte	6
01543 05E0                        07            .byte	7
01544                                           ! 446  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01545 05E1                        10            .byte	$10
01546 05E2                        11            .byte	$11
01547 05E3                        12            .byte	$12
01548 05E4                        13            .byte	$13
01549 05E5                        14            .byte	$14
01550 05E6                        15            .byte	$15
01551 05E7                        16            .byte	$16
01552 05E8                        17            .byte	$17
01553                                           ! 447  0x01, 0x00, 0x0f, 0x00,
01554 05E9                        01            .byte	1
01555 05EA                        00            .byte	0
01556 05EB                        0F            .byte	$F
01557 05EC                        00            .byte	0
01558                                           ! 448  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01559 05ED                        00            .byte	0
01560 05EE                        00            .byte	0
01561 05EF                        00            .byte	0
01562 05F0                        00            .byte	0
01563 05F1                        00            .byte	0
01564 05F2                        00            .byte	0
01565 05F3                        05            .byte	5
01566 05F4                        0F            .byte	$F
01567 05F5                        FF            .byte	$FF
01568                                           ! 449 },
01569                                           ! 450 {
01570                                           ! 451  80, 24, 8, 0x00, 0x40,
01571 05F6                        50            .byte	$50
01572 05F7                        18            .byte	$18
01573 05F8                        08            .byte	8
01574 05F9                        00            .byte	0
01575 05FA                        40            .byte	$40
01576                                           ! 452  0x01, 0x0
01577 05FB                        01            .byte	1
01578                                           ! 452 f, 0x00, 0x06,
01579 05FC                        0F            .byte	$F
01580 05FD                        00            .byte	0
01581 05FE                        06            .byte	6
01582                                           ! 453  0x63,
01583 05FF                        63            .byte	$63
01584                                           ! 454  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01585 0600                        5F            .byte	$5F
01586 0601                        4F            .byte	$4F
01587 0602                        50            .byte	$50
01588 0603                        82            .byte	$82
01589 0604                        54            .byte	$54
01590 0605                        80            .byte	$80
01591 0606                        BF            .byte	$BF
01592 0607                        1F            .byte	$1F
01593                                           ! 455  0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01594 0608                        00            .byte	0
01595 0609                        C0            .byte	$C0
01596 060A                        00            .byte	0
01597 060B                        00            .byte	0
01598 060C                        00            .byte	0
01599 060D                        00            .byte	0
01600 060E                        00            .byte	0
01601 060F                        00            .byte	0
01602                                           ! 456  0x9c, 0x8e, 0x8f, 0x28, 0x00, 0x96, 0xb9, 0xe3,
01603 0610                        9C            .byte	$9C
01604 0611                        8E            .byte	$8E
01605 0612                        8F            .byte	$8F
01606 0613                        28            .byte	$28
01607 0614                        00            .byte	0
01608 0615                        96            .byte	$96
01609 0616                        B9            .byte	$B9
01610 0617                        E3            .byte	$E3
01611                                           ! 457  0xff,
01612 0618                        FF            .byte	$FF
01613                                           ! 458  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
01614 0619                        00            .byte	0
01615 061A                        01            .byte	1
01616 061B                        02            .byte	2
01617 061C                        03            .byte	3
01618 061D                        04            .byte	4
01619 061E                        05            .byte	5
01620 061F                        06            .byte	6
01621 0620                        07            .byte	7
01622                                           ! 459  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
01623 0621                        10            .byte	$10
01624 0622                        11            .byte	$11
01625 0623                        12            .byte	$12
01626 0624                        13            .byte	$13
01627 0625                        14            .byte	$14
01628 0626                        15            .byte	$15
01629 0627                        16            .byte	$16
01630 0628                        17            .byte	$17
01631                                           ! 460  0x01, 0x00, 0x0f, 0x00,
01632 0629                        01            .byte	1
01633 062A                        00            .byte	0
01634 062B                        0F            .byte	$F
01635 062C                        00            .byte	0
01636                                           ! 461  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01637 062D                        00            .byte	0
01638 062E                        00            .byte	0
01639 062F                        00            .byte	0
01640 0630                        00            .byte	0
01641 0631                        00            .byte	0
01642 0632                        00            .byte	0
01643 0633                        05            .byte	5
01644 0634                        0F            .byte	$F
01645 0635                        FF            .byte	$FF
01646                                           ! 462 },
01647                                           ! 463 {
01648                                           ! 464  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01649 0636                        00            .byte	0
01650 0637                        00            .byte	0
01651 0638                        00            .byte	0
01652 0639                        00            .byte	0
01653 063A                        00            .byte	0
01654 063B                        00            .byte	0
01655 063C                        00            .byte	0
01656 063D                        00            .byte	0
01657                                           ! 465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01658 063E                        00            .byte	0
01659 063F                        00            .byte	0
01660 0640                        00            .byte	0
01661 0641                        00            .byte	0
01662 0642                        00            .byte	0
01663 0643                        00            .byte	0
01664 0644                        00            .byte	0
01665 0645                        00            .byte	0
01666                                           ! 466  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01667 0646                        00            .byte	0
01668 0647                        00            .byte	0
01669 0648                        00            .byte	0
01670 0649                        00            .byte	0
01671 064A                        00            .byte	0
01672 064B                        00            .byte	0
01673 064C                        00            .byte	0
01674 064D                        00            .byte	0
01675                                           ! 467  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01676 064E                        00            .byte	0
01677 064F                        00            .byte	0
01678 0650                        00            .byte	0
01679 0651                        00            .byte	0
01680 0652                        00            .byte	0
01681 0653                        00            .byte	0
01682 0654                        00            .byte	0
01683 0655                        00            .byte	0
01684                                           ! 468  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01685 0656                        00            .byte	0
01686 0657                        00            .byte	0
01687 0658                        00            .byte	0
01688 0659                        00            .byte	0
01689 065A                        00            .byte	0
01690 065B                        00            .byte	0
01691 065C                        00            .byte	0
01692 065D                        00            .byte	0
01693                                           ! 469  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01694 065E                        00            .byte	0
01695 065F                        00            .byte	0
01696 0660                        00            .byte	0
01697 0661                        00            .byte	0
01698 0662                        00            .byte	0
01699 0663                        00            .byte	0
01700 0664                        00            .byte	0
01701 0665                        00            .byte	0
01702                                           ! 470  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01703 0666                        00            .byte	0
01704 0667                        00            .byte	0
01705 0668                        00            .byte	0
01706 0669                        00            .byte	0
01707 066A                        00            .byte	0
01708 066B                        00            .byte	0
01709 066C                        00            .byte	0
01710 066D                        00            .byte	0
01711                                           ! 471  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01712 066E                        00            .byte	0
01713 066F                        00            .byte	0
01714 0670                        00            .byte	0
01715 0671                        00            .byte	0
01716 0672                        00            .byte	0
01717 0673                        00            .byte	0
01718 0674                        00            .byte	0
01719 0675                        00            .byte	0
01720                                           ! 472 },
01721                                           ! 473 {
01722                                           ! 474  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01723 0676                        00            .byte	0
01724 0677                        00            .byte	0
01725 0678                        00            .byte	0
01726 0679                        00            .byte	0
01727 067A                        00            .byte	0
01728 067B                        00            .byte	0
01729 067C                        00            .byte	0
01730 067D                        00            .byte	0
01731                                           ! 475  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01732 067E                        00            .byte	0
01733 067F                        00            .byte	0
01734 0680                        00            .byte	0
01735 0681                        00            .byte	0
01736 0682                        00            .byte	0
01737 0683                        00            .byte	0
01738 0684                        00            .byte	0
01739 0685                        00            .byte	0
01740                                           ! 476  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01741 0686                        00            .byte	0
01742 0687                        00            .byte	0
01743 0688                        00            .byte	0
01744 0689                        00            .byte	0
01745 068A                        00            .byte	0
01746 068B                        00            .byte	0
01747 068C                        00            .byte	0
01748 068D                        00            .byte	0
01749                                           ! 477  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01750 068E                        00            .byte	0
01751 068F                        00            .byte	0
01752 0690                        00            .byte	0
01753 0691                        00            .byte	0
01754 0692                        00            .byte	0
01755 0693                        00            .byte	0
01756 0694                        00            .byte	0
01757 0695                        00            .byte	0
01758                                           ! 478  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01759 0696                        00            .byte	0
01760 0697                        00            .byte	0
01761 0698                        00            .byte	0
01762 0699                        00            .byte	0
01763 069A                        00            .byte	0
01764 069B                        00            .byte	0
01765 069C                        00            .byte	0
01766 069D                        00            .byte	0
01767                                           ! 479  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01768 069E                        00            .byte	0
01769 069F                        00            .byte	0
01770 06A0                        00            .byte	0
01771 06A1                        00            .byte	0
01772 06A2                        00            .byte	0
01773 06A3                        00            .byte	0
01774 06A4                        00            .byte	0
01775 06A5                        00            .byte	0
01776                                           ! 480  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01777 06A6                        00            .byte	0
01778 06A7                        00            .byte	0
01779 06A8                        00            .byte	0
01780 06A9                        00            .byte	0
01781 06AA                        00            .byte	0
01782 06AB                        00            .byte	0
01783 06AC                        00            .byte	0
01784 06AD                        00            .byte	0
01785                                           ! 481  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01786 06AE                        00            .byte	0
01787 06AF                        00            .byte	0
01788 06B0                        00            .byte	0
01789 06B1                        00            .byte	0
01790 06B2                        00            .byte	0
01791 06B3                        00            .byte	0
01792 06B4                        00            .byte	0
01793 06B5                        00            .byte	0
01794                                           ! 482 },
01795                                           ! 483 {
01796                                           ! 484  80, 24, 14, 0x00, 0x80,
01797 06B6                        50            .byte	$50
01798 06B7                        18            .byte	$18
01799 06B8                        0E            .byte	$E
01800 06B9                        00            .byte	0
01801 06BA                        80            .byte	$80
01802                                           ! 485  0x01, 0x0f, 0x00, 0x06,
01803 06BB                        01            .byte	1
01804 06BC                        0F            .byte	$F
01805 06BD                        00            .byte	0
01806 06BE                        06            .byte	6
01807                                           ! 486  0xa3,
01808 06BF                        A3            .byte	$A3
01809                                           ! 487  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01810 06C0                        5F            .byte	$5F
01811 06C1                        4F            .byte	$4F
01812 06C2                        50            .byte	$50
01813 06C3                        82            .byte	$82
01814 06C4                        54            .byte	$54
01815 06C5                        80            .byte	$80
01816 06C6                        BF            .byte	$BF
01817 06C7                        1F            .byte	$1F
01818                                           ! 488  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01819 06C8                        00            .byte	0
01820 06C9                        40            .byte	$40
01821 06CA                        00            .byte	0
01822 06CB                        00            .byte	0
01823 06CC                        00            .byte	0
01824 06CD                        00            .byte	0
01825 06CE                        00            .byte	0
01826 06CF                        00            .byte	0
01827                                           ! 489  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01828 06D0                        83            .byte	$83
01829 06D1                        85            .byte	$85
01830 06D2                        5D            .byte	$5D
01831 06D3                        28            .byte	$28
01832 06D4                        0F            .byte	$F
01833 06D5                        63            .byte	$63
01834 06D6                        BA            .byte	$BA
01835 06D7                        E3            .byte	$E3
01836                                           ! 490  0xff,
01837 06D8                        FF            .byte	$FF
01838                                           ! 491  0x00, 0x08, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
01839 06D9                        00            .byte	0
01840 06DA                        08            .byte	8
01841 06DB                        00            .byte	0
01842 06DC                        00            .byte	0
01843 06DD                        18            .byte	$18
01844 06DE                        18            .byte	$18
01845 06DF                        00            .byte	0
01846 06E0                        00            .byte	0
01847                                           ! 492  0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
01848 06E1                        00            .byte	0
01849 06E2                        08            .byte	8
01850 06E3                        00            .byte	0
01851 06E4                        00            .byte	0
01852 06E5                        00            .byte	0
01853 06E6                        18            .byte	$18
01854 06E7                        00            .byte	0
01855 06E8                        00            .byte	0
01856                                           ! 493  0x01, 0x00, 0x01, 0x00,
01857 06E9                        01            .byte	1
01858 06EA                        00            .byte	0
01859 06EB                        01            .byte	1
01860 06EC                        00            .byte	0
01861                                           ! 494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01862 06ED                        00            .byte	0
01863 06EE                        00            .byte	0
01864 06EF                        00            .byte	0
01865 06F0                        00            .byte	0
01866 06F1                        00            .byte	0
01867 06F2                        00            .byte	0
01868 06F3                        05            .byte	5
01869 06F4                        0F            .byte	$F
01870 06F5                        FF            .byte	$FF
01871                                           ! 495 },
01872                                           ! 496 {
01873                                           ! 497  80, 24, 14, 0x00, 0x80,
01874 06F6                        50            .byte	$50
01875 06F7                        18            .byte	$18
01876 06F8                        0E            .byte	$E
01877 06F9                        00            .byte	0
01878 06FA                        80            .byte	$80
01879                                           ! 498  0x01, 0x0f, 0x00, 0x06,
01880 06FB                        01            .byte	1
01881 06FC                        0F            .byte	$F
01882 06FD                        00            .byte	0
01883 06FE                        06            .byte	6
01884                                           ! 499  0xa3,
01885 06FF                        A3            .byte	$A3
01886                                           ! 500  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
01887 0700                        5F            .byte	$5F
01888 0701                        4F            .byte	$4F
01889 0702                        50            .byte	$50
01890 0703                        82            .byte	$82
01891 0704                        54            .byte	$54
01892 0705                        80            .byte	$80
01893 0706                        BF            .byte	$BF
01894 0707                        1F            .byte	$1F
01895                                           ! 501  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01896 0708                        00            .byte	0
01897 0709                        40            .byte	$40
01898 070A                        00            .byte	0
01899 070B                        00            .byte	0
01900 070C                        00            .byte	0
01901 070D                        00            .byte	0
01902 070E                        00            .byte	0
01903 070F                        00            .byte	0
01904                                           ! 502  0x83, 0x85, 0x5d, 0x28, 0x0f, 0x63, 0xba, 0xe3,
01905 0710                        83            .byte	$83
01906 0711                        85            .byte	$85
01907 0712                        5D            .byte	$5D
01908 0713                        28            .byte	$28
01909 0714                        0F            .byte	$F
01910 0715                        63            .byte	$63
01911 0716                        BA            .byte	$BA
01912 0717                        E3            .byte	$E3
01913                                           ! 503  0xff,
01914 0718                        FF            .byte	$FF
01915                                           ! 504  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
01916 0719                        00            .byte	0
01917 071A                        01            .byte	1
01918 071B                        02            .byte	2
01919 071C                        03            .byte	3
01920 071D                        04            .byte	4
01921 071E                        05            .byte	5
01922 071F                        14            .byte	$14
01923 0720                        07            .byte	7
01924                                           ! 505  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
01925 0721                        38            .byte	$38
01926 0722                        39            .byte	$39
01927 0723                        3A            .byte	$3A
01928 0724                        3B            .byte	$3B
01929 0725                        3C            .byte	$3C
01930 0726                        3D            .byte	$3D
01931 0727                        3E            .byte	$3E
01932 0728                        3F            .byte	$3F
01933                                           ! 506  0x01, 0x00, 0x0f, 0x00,
01934 0729                        01            .byte	1
01935 072A                        00            .byte	0
01936 072B                        0F            .byte	$F
01937 072C                        00            .byte	0
01938                                           ! 507  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
01939 072D                        00            .byte	0
01940 072E                        00            .byte	0
01941 072F                        00            .byte	0
01942 0730                        00            .byte	0
01943 0731                        00            .byte	0
01944 0732                        00            .byte	0
01945 0733                        05            .byte	5
01946 0734                        0F            .byte	$F
01947 0735                        FF            .byte	$FF
01948                                           ! 508 },
01949                                           ! 509 {
01950                                           ! 510  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01951 0736                        00            .byte	0
01952 0737                        00            .byte	0
01953 0738                        00            .byte	0
01954 0739                        00            .byte	0
01955 073A                        00            .byte	0
01956 073B                        00            .byte	0
01957 073C                        00            .byte	0
01958 073D                        00            .byte	0
01959                                           ! 511  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01960 073E                        00            .byte	0
01961 073F                        00            .byte	0
01962 0740                        00            .byte	0
01963 0741                        00            .byte	0
01964 0742                        00            .byte	0
01965 0743                        00            .byte	0
01966 0744                        00            .byte	0
01967 0745                        00            .byte	0
01968                                           ! 512  0x00, 0x
01969 0746                        00            .byte	0
01970                                           ! 512 00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01971 0747                        00            .byte	0
01972 0748                        00            .byte	0
01973 0749                        00            .byte	0
01974 074A                        00            .byte	0
01975 074B                        00            .byte	0
01976 074C                        00            .byte	0
01977 074D                        00            .byte	0
01978                                           ! 513  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01979 074E                        00            .byte	0
01980 074F                        00            .byte	0
01981 0750                        00            .byte	0
01982 0751                        00            .byte	0
01983 0752                        00            .byte	0
01984 0753                        00            .byte	0
01985 0754                        00            .byte	0
01986 0755                        00            .byte	0
01987                                           ! 514  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01988 0756                        00            .byte	0
01989 0757                        00            .byte	0
01990 0758                        00            .byte	0
01991 0759                        00            .byte	0
01992 075A                        00            .byte	0
01993 075B                        00            .byte	0
01994 075C                        00            .byte	0
01995 075D                        00            .byte	0
01996                                           ! 515  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
01997 075E                        00            .byte	0
01998 075F                        00            .byte	0
01999 0760                        00            .byte	0
02000 0761                        00            .byte	0
02001 0762                        00            .byte	0
02002 0763                        00            .byte	0
02003 0764                        00            .byte	0
02004 0765                        00            .byte	0
02005                                           ! 516  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02006 0766                        00            .byte	0
02007 0767                        00            .byte	0
02008 0768                        00            .byte	0
02009 0769                        00            .byte	0
02010 076A                        00            .byte	0
02011 076B                        00            .byte	0
02012 076C                        00            .byte	0
02013 076D                        00            .byte	0
02014                                           ! 517  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02015 076E                        00            .byte	0
02016 076F                        00            .byte	0
02017 0770                        00            .byte	0
02018 0771                        00            .byte	0
02019 0772                        00            .byte	0
02020 0773                        00            .byte	0
02021 0774                        00            .byte	0
02022 0775                        00            .byte	0
02023                                           ! 518 },
02024                                           ! 519 {
02025                                           ! 520  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02026 0776                        00            .byte	0
02027 0777                        00            .byte	0
02028 0778                        00            .byte	0
02029 0779                        00            .byte	0
02030 077A                        00            .byte	0
02031 077B                        00            .byte	0
02032 077C                        00            .byte	0
02033 077D                        00            .byte	0
02034                                           ! 521  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02035 077E                        00            .byte	0
02036 077F                        00            .byte	0
02037 0780                        00            .byte	0
02038 0781                        00            .byte	0
02039 0782                        00            .byte	0
02040 0783                        00            .byte	0
02041 0784                        00            .byte	0
02042 0785                        00            .byte	0
02043                                           ! 522  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02044 0786                        00            .byte	0
02045 0787                        00            .byte	0
02046 0788                        00            .byte	0
02047 0789                        00            .byte	0
02048 078A                        00            .byte	0
02049 078B                        00            .byte	0
02050 078C                        00            .byte	0
02051 078D                        00            .byte	0
02052                                           ! 523  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02053 078E                        00            .byte	0
02054 078F                        00            .byte	0
02055 0790                        00            .byte	0
02056 0791                        00            .byte	0
02057 0792                        00            .byte	0
02058 0793                        00            .byte	0
02059 0794                        00            .byte	0
02060 0795                        00            .byte	0
02061                                           ! 524  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02062 0796                        00            .byte	0
02063 0797                        00            .byte	0
02064 0798                        00            .byte	0
02065 0799                        00            .byte	0
02066 079A                        00            .byte	0
02067 079B                        00            .byte	0
02068 079C                        00            .byte	0
02069 079D                        00            .byte	0
02070                                           ! 525  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02071 079E                        00            .byte	0
02072 079F                        00            .byte	0
02073 07A0                        00            .byte	0
02074 07A1                        00            .byte	0
02075 07A2                        00            .byte	0
02076 07A3                        00            .byte	0
02077 07A4                        00            .byte	0
02078 07A5                        00            .byte	0
02079                                           ! 526  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02080 07A6                        00            .byte	0
02081 07A7                        00            .byte	0
02082 07A8                        00            .byte	0
02083 07A9                        00            .byte	0
02084 07AA                        00            .byte	0
02085 07AB                        00            .byte	0
02086 07AC                        00            .byte	0
02087 07AD                        00            .byte	0
02088                                           ! 527  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02089 07AE                        00            .byte	0
02090 07AF                        00            .byte	0
02091 07B0                        00            .byte	0
02092 07B1                        00            .byte	0
02093 07B2                        00            .byte	0
02094 07B3                        00            .byte	0
02095 07B4                        00            .byte	0
02096 07B5                        00            .byte	0
02097                                           ! 528 },
02098                                           ! 529 {
02099                                           ! 530  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02100 07B6                        00            .byte	0
02101 07B7                        00            .byte	0
02102 07B8                        00            .byte	0
02103 07B9                        00            .byte	0
02104 07BA                        00            .byte	0
02105 07BB                        00            .byte	0
02106 07BC                        00            .byte	0
02107 07BD                        00            .byte	0
02108                                           ! 531  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02109 07BE                        00            .byte	0
02110 07BF                        00            .byte	0
02111 07C0                        00            .byte	0
02112 07C1                        00            .byte	0
02113 07C2                        00            .byte	0
02114 07C3                        00            .byte	0
02115 07C4                        00            .byte	0
02116 07C5                        00            .byte	0
02117                                           ! 532  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02118 07C6                        00            .byte	0
02119 07C7                        00            .byte	0
02120 07C8                        00            .byte	0
02121 07C9                        00            .byte	0
02122 07CA                        00            .byte	0
02123 07CB                        00            .byte	0
02124 07CC                        00            .byte	0
02125 07CD                        00            .byte	0
02126                                           ! 533  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02127 07CE                        00            .byte	0
02128 07CF                        00            .byte	0
02129 07D0                        00            .byte	0
02130 07D1                        00            .byte	0
02131 07D2                        00            .byte	0
02132 07D3                        00            .byte	0
02133 07D4                        00            .byte	0
02134 07D5                        00            .byte	0
02135                                           ! 534  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02136 07D6                        00            .byte	0
02137 07D7                        00            .byte	0
02138 07D8                        00            .byte	0
02139 07D9                        00            .byte	0
02140 07DA                        00            .byte	0
02141 07DB                        00            .byte	0
02142 07DC                        00            .byte	0
02143 07DD                        00            .byte	0
02144                                           ! 535  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02145 07DE                        00            .byte	0
02146 07DF                        00            .byte	0
02147 07E0                        00            .byte	0
02148 07E1                        00            .byte	0
02149 07E2                        00            .byte	0
02150 07E3                        00            .byte	0
02151 07E4                        00            .byte	0
02152 07E5                        00            .byte	0
02153                                           ! 536  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02154 07E6                        00            .byte	0
02155 07E7                        00            .byte	0
02156 07E8                        00            .byte	0
02157 07E9                        00            .byte	0
02158 07EA                        00            .byte	0
02159 07EB                        00            .byte	0
02160 07EC                        00            .byte	0
02161 07ED                        00            .byte	0
02162                                           ! 537  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02163 07EE                        00            .byte	0
02164 07EF                        00            .byte	0
02165 07F0                        00            .byte	0
02166 07F1                        00            .byte	0
02167 07F2                        00            .byte	0
02168 07F3                        00            .byte	0
02169 07F4                        00            .byte	0
02170 07F5                        00            .byte	0
02171                                           ! 538 },
02172                                           ! 539 {
02173                                           ! 540  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02174 07F6                        00            .byte	0
02175 07F7                        00            .byte	0
02176 07F8                        00            .byte	0
02177 07F9                        00            .byte	0
02178 07FA                        00            .byte	0
02179 07FB                        00            .byte	0
02180 07FC                        00            .byte	0
02181 07FD                        00            .byte	0
02182                                           ! 541  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02183 07FE                        00            .byte	0
02184 07FF                        00            .byte	0
02185 0800                        00            .byte	0
02186 0801                        00            .byte	0
02187 0802                        00            .byte	0
02188 0803                        00            .byte	0
02189 0804                        00            .byte	0
02190 0805                        00            .byte	0
02191                                           ! 542  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02192 0806                        00            .byte	0
02193 0807                        00            .byte	0
02194 0808                        00            .byte	0
02195 0809                        00            .byte	0
02196 080A                        00            .byte	0
02197 080B                        00            .byte	0
02198 080C                        00            .byte	0
02199 080D                        00            .byte	0
02200                                           ! 543  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02201 080E                        00            .byte	0
02202 080F                        00            .byte	0
02203 0810                        00            .byte	0
02204 0811                        00            .byte	0
02205 0812                        00            .byte	0
02206 0813                        00            .byte	0
02207 0814                        00            .byte	0
02208 0815                        00            .byte	0
02209                                           ! 544  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02210 0816                        00            .byte	0
02211 0817                        00            .byte	0
02212 0818                        00            .byte	0
02213 0819                        00            .byte	0
02214 081A                        00            .byte	0
02215 081B                        00            .byte	0
02216 081C                        00            .byte	0
02217 081D                        00            .byte	0
02218                                           ! 545  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02219 081E                        00            .byte	0
02220 081F                        00            .byte	0
02221 0820                        00            .byte	0
02222 0821                        00            .byte	0
02223 0822                        00            .byte	0
02224 0823                        00            .byte	0
02225 0824                        00            .byte	0
02226 0825                        00            .byte	0
02227                                           ! 546  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02228 0826                        00            .byte	0
02229 0827                        00            .byte	0
02230 0828                        00            .byte	0
02231 0829                        00            .byte	0
02232 082A                        00            .byte	0
02233 082B                        00            .byte	0
02234 082C                        00            .byte	0
02235 082D                        00            .byte	0
02236                                           ! 547  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02237 082E                        00            .byte	0
02238 082F                        00            .byte	0
02239 0830                        00            .byte	0
02240 0831                        00            .byte	0
02241 0832                        00            .byte	0
02242 0833                        00            .byte	0
02243 0834                        00            .byte	0
02244 0835                        00            .byte	0
02245                                           ! 548 },
02246                                           ! 549 {
02247                                           ! 550  40, 24, 16, 0x00, 0x08,
02248 0836                        28            .byte	$28
02249 0837                        18            .byte	$18
02250 0838                        10            .byte	$10
02251 0839                        00            .byte	0
02252 083A                        08            .byte	8
02253                                           ! 551  0x08, 0x03, 0x00, 0x02,
02254 083B                        08            .byte	8
02255 083C                        03            .byte	3
02256 083D                        00            .byte	0
02257 083E                        02            .byte	2
02258                                           ! 552  0x67,
02259 083F                        67            .byte	$67
02260                                           ! 553  0x2d, 0x27, 0x28, 0x90, 0x2b, 0xa0, 0xbf, 0x1f,
02261 0840                        2D            .byte	$2D
02262 0841                        27            .byte	$27
02263 0842                        28            .byte	$28
02264 0843                        90            .byte	$90
02265 0844                        2B            .byte	$2B
02266 0845                        A0            .byte	$A0
02267 0846                        BF            .byte	$BF
02268 0847                        1F            .byte	$1F
02269                                           ! 554  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02270 0848                        00            .byte	0
02271 0849                        4F            .byte	$4F
02272 084A                        0D            .byte	$D
02273 084B                        0E            .byte	$E
02274 084C                        00            .byte	0
02275 084D                        00            .byte	0
02276 084E                        00            .byte	0
02277 084F                        00            .byte	0
02278                                           ! 555  0x9c, 0x8e, 0x8f, 0x14, 0x1f, 0x96, 0xb9, 0xa3,
02279 0850                        9C            .byte	$9C
02280 0851                        8E            .byte	$8E
02281 0852                        8F            .byte	$8F
02282 0853                        14            .byte	$14
02283 0854                        1F            .byte	$1F
02284 0855                        96            .byte	$96
02285 0856                        B9            .byte	$B9
02286 0857                        A3            .byte	$A3
02287                                           ! 556  0xff,
02288 0858                        FF            .byte	$FF
02289                                           ! 557  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02290 0859                        00            .byte	0
02291 085A                        01            .byte	1
02292 085B                        02            .byte	2
02293 085C                        03            .byte	3
02294 085D                        04            .byte	4
02295 085E                        05            .byte	5
02296 085F                        14            .byte	$14
02297 0860                        07            .byte	7
02298                                           ! 558  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02299 0861                        38            .byte	$38
02300 0862                        39            .byte	$39
02301 0863                        3A            .byte	$3A
02302 0864                        3B            .byte	$3B
02303 0865                        3C            .byte	$3C
02304 0866                        3D            .byte	$3D
02305 0867                        3E            .byte	$3E
02306 0868                        3F            .byte	$3F
02307                                           ! 559  0x0c, 0x00, 0x0f, 0x08,
02308 0869                        0C            .byte	$C
02309 086A                        00            .byte	0
02310 086B                        0F            .byte	$F
02311 086C                        08            .byte	8
02312                                           ! 560  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02313 086D                        00            .byte	0
02314 086E                        00            .byte	0
02315 086F                        00            .byte	0
02316 0870                        00            .byte	0
02317 0871                        00            .byte	0
02318 0872                        10            .byte	$10
02319 0873                        0E            .byte	$E
02320 0874                        0F            .byte	$F
02321 0875                        FF            .byte	$FF
02322                                           ! 561 },
02323                                           ! 562 {
02324                                           ! 563  80, 24, 16, 0x00, 0x10,
02325 0876                        50            .byte	$50
02326 0877                        18            .byte	$18
02327 0878                        10            .byte	$10
02328 0879                        00            .byte	0
02329 087A                        10            .byte	$10
02330                                           ! 564  0x00, 0x03, 0x00, 0x02,
02331 087B                        00            .byte	0
02332 087C                        03            .byte	3
02333 087D                        00            .byte	0
02334 087E                        02            .byte	2
02335                                           ! 565  0x67,
02336 087F                        67            .byte	$67
02337                                           ! 566  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02338 0880                        5F            .byte	$5F
02339 0881                        4F            .byte	$4F
02340 0882                        50            .byte	$50
02341 0883                        82            .byte	$82
02342 0884                        55            .byte	$55
02343 0885                        81            .byte	$81
02344 0886                        BF            .byte	$BF
02345 0887                        1F            .byte	$1F
02346                                           ! 567  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02347 0888                        00            .byte	0
02348 0889                        4F            .byte	$4F
02349 088A                        0D            .byte	$D
02350 088B                        0E            .byte	$E
02351 088C                        00            .byte	0
02352 088D                        00            .byte	0
02353 088E                        00            .byte	0
02354 088F                        00            .byte	0
02355                                           ! 568  0x9c, 0x8e, 0x8f,
02356 0890                        9C            .byte	$9C
02357 0891                        8E            .byte	$8E
02358                                           ! 568  0x28, 0x1f, 0x96, 0xb9, 0xa3,
02359 0892                        8F            .byte	$8F
02360 0893                        28            .byte	$28
02361 0894                        1F            .byte	$1F
02362 0895                        96            .byte	$96
02363 0896                        B9            .byte	$B9
02364 0897                        A3            .byte	$A3
02365                                           ! 569  0xff,
02366 0898                        FF            .byte	$FF
02367                                           ! 570  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02368 0899                        00            .byte	0
02369 089A                        01            .byte	1
02370 089B                        02            .byte	2
02371 089C                        03            .byte	3
02372 089D                        04            .byte	4
02373 089E                        05            .byte	5
02374 089F                        14            .byte	$14
02375 08A0                        07            .byte	7
02376                                           ! 571  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02377 08A1                        38            .byte	$38
02378 08A2                        39            .byte	$39
02379 08A3                        3A            .byte	$3A
02380 08A4                        3B            .byte	$3B
02381 08A5                        3C            .byte	$3C
02382 08A6                        3D            .byte	$3D
02383 08A7                        3E            .byte	$3E
02384 08A8                        3F            .byte	$3F
02385                                           ! 572  0x0c, 0x00, 0x0f, 0x08,
02386 08A9                        0C            .byte	$C
02387 08AA                        00            .byte	0
02388 08AB                        0F            .byte	$F
02389 08AC                        08            .byte	8
02390                                           ! 573  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0e, 0x0f, 0xff,
02391 08AD                        00            .byte	0
02392 08AE                        00            .byte	0
02393 08AF                        00            .byte	0
02394 08B0                        00            .byte	0
02395 08B1                        00            .byte	0
02396 08B2                        10            .byte	$10
02397 08B3                        0E            .byte	$E
02398 08B4                        0F            .byte	$F
02399 08B5                        FF            .byte	$FF
02400                                           ! 574 },
02401                                           ! 575 {
02402                                           ! 576  80, 24, 16, 0x00, 0x10,
02403 08B6                        50            .byte	$50
02404 08B7                        18            .byte	$18
02405 08B8                        10            .byte	$10
02406 08B9                        00            .byte	0
02407 08BA                        10            .byte	$10
02408                                           ! 577  0x00, 0x03, 0x00, 0x02,
02409 08BB                        00            .byte	0
02410 08BC                        03            .byte	3
02411 08BD                        00            .byte	0
02412 08BE                        02            .byte	2
02413                                           ! 578  0x66,
02414 08BF                        66            .byte	$66
02415                                           ! 579  0x5f, 0x4f, 0x50, 0x82, 0x55, 0x81, 0xbf, 0x1f,
02416 08C0                        5F            .byte	$5F
02417 08C1                        4F            .byte	$4F
02418 08C2                        50            .byte	$50
02419 08C3                        82            .byte	$82
02420 08C4                        55            .byte	$55
02421 08C5                        81            .byte	$81
02422 08C6                        BF            .byte	$BF
02423 08C7                        1F            .byte	$1F
02424                                           ! 580  0x00, 0x4f, 0x0d, 0x0e, 0x00, 0x00, 0x00, 0x00,
02425 08C8                        00            .byte	0
02426 08C9                        4F            .byte	$4F
02427 08CA                        0D            .byte	$D
02428 08CB                        0E            .byte	$E
02429 08CC                        00            .byte	0
02430 08CD                        00            .byte	0
02431 08CE                        00            .byte	0
02432 08CF                        00            .byte	0
02433                                           ! 581  0x9c, 0x8e, 0x8f, 0x28, 0x0f, 0x96, 0xb9, 0xa3,
02434 08D0                        9C            .byte	$9C
02435 08D1                        8E            .byte	$8E
02436 08D2                        8F            .byte	$8F
02437 08D3                        28            .byte	$28
02438 08D4                        0F            .byte	$F
02439 08D5                        96            .byte	$96
02440 08D6                        B9            .byte	$B9
02441 08D7                        A3            .byte	$A3
02442                                           ! 582  0xff,
02443 08D8                        FF            .byte	$FF
02444                                           ! 583  0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
02445 08D9                        00            .byte	0
02446 08DA                        08            .byte	8
02447 08DB                        08            .byte	8
02448 08DC                        08            .byte	8
02449 08DD                        08            .byte	8
02450 08DE                        08            .byte	8
02451 08DF                        08            .byte	8
02452 08E0                        08            .byte	8
02453                                           ! 584  0x10, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
02454 08E1                        10            .byte	$10
02455 08E2                        18            .byte	$18
02456 08E3                        18            .byte	$18
02457 08E4                        18            .byte	$18
02458 08E5                        18            .byte	$18
02459 08E6                        18            .byte	$18
02460 08E7                        18            .byte	$18
02461 08E8                        18            .byte	$18
02462                                           ! 585  0x0e, 0x00, 0x0f, 0x08,
02463 08E9                        0E            .byte	$E
02464 08EA                        00            .byte	0
02465 08EB                        0F            .byte	$F
02466 08EC                        08            .byte	8
02467                                           ! 586  0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x0f, 0xff,
02468 08ED                        00            .byte	0
02469 08EE                        00            .byte	0
02470 08EF                        00            .byte	0
02471 08F0                        00            .byte	0
02472 08F1                        00            .byte	0
02473 08F2                        10            .byte	$10
02474 08F3                        0A            .byte	$A
02475 08F4                        0F            .byte	$F
02476 08F5                        FF            .byte	$FF
02477                                           ! 587 },
02478                                           ! 588 {
02479                                           ! 589  80, 29, 16, 0x00, 0x00,
02480 08F6                        50            .byte	$50
02481 08F7                        1D            .byte	$1D
02482 08F8                        10            .byte	$10
02483 08F9                        00            .byte	0
02484 08FA                        00            .byte	0
02485                                           ! 590  0x01, 0x0f, 0x00, 0x06,
02486 08FB                        01            .byte	1
02487 08FC                        0F            .byte	$F
02488 08FD                        00            .byte	0
02489 08FE                        06            .byte	6
02490                                           ! 591  0xe3,
02491 08FF                        E3            .byte	$E3
02492                                           ! 592  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02493 0900                        5F            .byte	$5F
02494 0901                        4F            .byte	$4F
02495 0902                        50            .byte	$50
02496 0903                        82            .byte	$82
02497 0904                        54            .byte	$54
02498 0905                        80            .byte	$80
02499 0906                        0B            .byte	$B
02500 0907                        3E            .byte	$3E
02501                                           ! 593  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02502 0908                        00            .byte	0
02503 0909                        40            .byte	$40
02504 090A                        00            .byte	0
02505 090B                        00            .byte	0
02506 090C                        00            .byte	0
02507 090D                        00            .byte	0
02508 090E                        00            .byte	0
02509 090F                        00            .byte	0
02510                                           ! 594  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02511 0910                        EA            .byte	$EA
02512 0911                        8C            .byte	$8C
02513 0912                        DF            .byte	$DF
02514 0913                        28            .byte	$28
02515 0914                        00            .byte	0
02516 0915                        E7            .byte	$E7
02517 0916                        04            .byte	4
02518 0917                        E3            .byte	$E3
02519                                           ! 595  0xff,
02520 0918                        FF            .byte	$FF
02521                                           ! 596  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02522 0919                        00            .byte	0
02523 091A                        3F            .byte	$3F
02524 091B                        00            .byte	0
02525 091C                        3F            .byte	$3F
02526 091D                        00            .byte	0
02527 091E                        3F            .byte	$3F
02528 091F                        00            .byte	0
02529 0920                        3F            .byte	$3F
02530                                           ! 597  0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x3f,
02531 0921                        00            .byte	0
02532 0922                        3F            .byte	$3F
02533 0923                        00            .byte	0
02534 0924                        3F            .byte	$3F
02535 0925                        00            .byte	0
02536 0926                        3F            .byte	$3F
02537 0927                        00            .byte	0
02538 0928                        3F            .byte	$3F
02539                                           ! 598  0x01, 0x00, 0x0f, 0x00,
02540 0929                        01            .byte	1
02541 092A                        00            .byte	0
02542 092B                        0F            .byte	$F
02543 092C                        00            .byte	0
02544                                           ! 599  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02545 092D                        00            .byte	0
02546 092E                        00            .byte	0
02547 092F                        00            .byte	0
02548 0930                        00            .byte	0
02549 0931                        00            .byte	0
02550 0932                        00            .byte	0
02551 0933                        05            .byte	5
02552 0934                        0F            .byte	$F
02553 0935                        FF            .byte	$FF
02554                                           ! 600 },
02555                                           ! 601 {
02556                                           ! 602  80, 29, 16, 0x00, 0x00,
02557 0936                        50            .byte	$50
02558 0937                        1D            .byte	$1D
02559 0938                        10            .byte	$10
02560 0939                        00            .byte	0
02561 093A                        00            .byte	0
02562                                           ! 603  0x01, 0x0f, 0x00, 0x06,
02563 093B                        01            .byte	1
02564 093C                        0F            .byte	$F
02565 093D                        00            .byte	0
02566 093E                        06            .byte	6
02567                                           ! 604  0xe3,
02568 093F                        E3            .byte	$E3
02569                                           ! 605  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0x0b, 0x3e,
02570 0940                        5F            .byte	$5F
02571 0941                        4F            .byte	$4F
02572 0942                        50            .byte	$50
02573 0943                        82            .byte	$82
02574 0944                        54            .byte	$54
02575 0945                        80            .byte	$80
02576 0946                        0B            .byte	$B
02577 0947                        3E            .byte	$3E
02578                                           ! 606  0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02579 0948                        00            .byte	0
02580 0949                        40            .byte	$40
02581 094A                        00            .byte	0
02582 094B                        00            .byte	0
02583 094C                        00            .byte	0
02584 094D                        00            .byte	0
02585 094E                        00            .byte	0
02586 094F                        00            .byte	0
02587                                           ! 607  0xea, 0x8c, 0xdf, 0x28, 0x00, 0xe7, 0x04, 0xe3,
02588 0950                        EA            .byte	$EA
02589 0951                        8C            .byte	$8C
02590 0952                        DF            .byte	$DF
02591 0953                        28            .byte	$28
02592 0954                        00            .byte	0
02593 0955                        E7            .byte	$E7
02594 0956                        04            .byte	4
02595 0957                        E3            .byte	$E3
02596                                           ! 608  0xff,
02597 0958                        FF            .byte	$FF
02598                                           ! 609  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
02599 0959                        00            .byte	0
02600 095A                        01            .byte	1
02601 095B                        02            .byte	2
02602 095C                        03            .byte	3
02603 095D                        04            .byte	4
02604 095E                        05            .byte	5
02605 095F                        14            .byte	$14
02606 0960                        07            .byte	7
02607                                           ! 610  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02608 0961                        38            .byte	$38
02609 0962                        39            .byte	$39
02610 0963                        3A            .byte	$3A
02611 0964                        3B            .byte	$3B
02612 0965                        3C            .byte	$3C
02613 0966                        3D            .byte	$3D
02614 0967                        3E            .byte	$3E
02615 0968                        3F            .byte	$3F
02616                                           ! 611  0x01, 0x00, 0x0f, 0x00,
02617 0969                        01            .byte	1
02618 096A                        00            .byte	0
02619 096B                        0F            .byte	$F
02620 096C                        00            .byte	0
02621                                           ! 612  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02622 096D                        00            .byte	0
02623 096E                        00            .byte	0
02624 096F                        00            .byte	0
02625 0970                        00            .byte	0
02626 0971                        00            .byte	0
02627 0972                        00            .byte	0
02628 0973                        05            .byte	5
02629 0974                        0F            .byte	$F
02630 0975                        FF            .byte	$FF
02631                                           ! 613 },
02632                                           ! 614 {
02633                                           ! 615  40, 24, 8, 0x00, 0x00,
02634 0976                        28            .byte	$28
02635 0977                        18            .byte	$18
02636 0978                        08            .byte	8
02637 0979                        00            .byte	0
02638 097A                        00            .byte	0
02639                                           ! 616  0x01, 0x0f, 0x00, 0x0e,
02640 097B                        01            .byte	1
02641 097C                        0F            .byte	$F
02642 097D                        00            .byte	0
02643 097E                        0E            .byte	$E
02644                                           ! 617  0x63,
02645 097F                        63            .byte	$63
02646                                           ! 618  0x5f, 0x4f, 0x50, 0x82, 0x54, 0x80, 0xbf, 0x1f,
02647 0980                        5F            .byte	$5F
02648 0981                        4F            .byte	$4F
02649 0982                        50            .byte	$50
02650 0983                        82            .byte	$82
02651 0984                        54            .byte	$54
02652 0985                        80            .byte	$80
02653 0986                        BF            .byte	$BF
02654 0987                        1F            .byte	$1F
02655                                           ! 619  0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02656 0988                        00            .byte	0
02657 0989                        41            .byte	$41
02658 098A                        00            .byte	0
02659 098B                        00            .byte	0
02660 098C                        00            .byte	0
02661 098D                        00            .byte	0
02662 098E                        00            .byte	0
02663 098F                        00            .byte	0
02664                                           ! 620  0x9c, 0x8e, 0x8f, 0x28, 0x40, 0x96, 0xb9, 0xa3,
02665 0990                        9C            .byte	$9C
02666 0991                        8E            .byte	$8E
02667 0992                        8F            .byte	$8F
02668 0993                        28            .byte	$28
02669 0994                        40            .byte	$40
02670 0995                        96            .byte	$96
02671 0996                        B9            .byte	$B9
02672 0997                        A3            .byte	$A3
02673                                           ! 621  0xff,
02674 0998                        FF            .byte	$FF
02675                                           ! 622  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
02676 0999                        00            .byte	0
02677 099A                        01            .byte	1
02678 099B                        02            .byte	2
02679 099C                        03            .byte	3
02680 099D                        04            .byte	4
02681 099E                        05            .byte	5
02682 099F                        06            .byte	6
02683 09A0                        07            .byte	7
02684                                           ! 623  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
02685 09A1                        08            .byte	8
02686 09A2                        09            .byte	9
02687 09A3                        0A            .byte	$A
02688 09A4                        0B            .byte	$B
02689 09A5                        0C            .byte	$C
02690 09A6                        0D            .byte	$D
02691 09A7                        0E            .byte	$E
02692 09A8                        0F            .byte	$F
02693                                           ! 624  0x41, 0x00, 0x0f, 0x00,
02694 09A9                        41            .byte	$41
02695 09AA                        00            .byte	0
02696 09AB                        0F            .byte	$F
02697 09AC                        00            .byte	0
02698                                           ! 625  0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0f, 0xff,
02699 09AD                        00            .byte	0
02700 09AE                        00            .byte	0
02701 09AF                        00            .byte	0
02702 09B0                        00            .byte	0
02703 09B1                        00            .byte	0
02704 09B2                        40            .byte	$40
02705 09B3                        05            .byte	5
02706 09B4                        0F            .byte	$F
02707 09B5                        FF            .byte	$FF
02708                                           ! 626 },
02709                                           ! 627 {
02710                                           ! 628  100, 36, 16, 0x00, 0x00,
02711 09B6                        64            .byte	$64
02712 09B7                        24            .byte	$24
02713 09B8                        10            .byte	$10
02714 09B9                        00            .byte	0
02715 09BA                        00            .byte	0
02716                                           ! 629  0x01, 0x0f, 0x00, 0x06,
02717 09BB                        01            .byte	1
02718 09BC                        0F            .byte	$F
02719 09BD                        00            .byte	0
02720 09BE                        06            .byte	6
02721                                           ! 630  0xe3,
02722 09BF                        E3            .byte	$E3
02723                                           ! 631  0x7f, 0x63, 0x63, 0x83, 0x6b, 0x1b, 0x72, 0xf0,
02724 09C0                        7F            .byte	$7F
02725 09C1                        63            .byte	$63
02726 09C2                        63            .byte	$63
02727 09C3                        83            .byte	$83
02728 09C4                        6B            .byte	$6B
02729 09C5                        1B            .byte	$1B
02730 09C6                        72            .byte	$72
02731 09C7                        F0            .byte	$F0
02732                                           ! 632  0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
02733 09C8                        00            .byte	0
02734 09C9                        60            .byte	$60
02735 09CA                        00            .byte	0
02736 09CB                        00            .byte	0
02737 09CC                        00            .byte	0
02738 09CD                        00            .byte	0
02739 09CE                        00            .byte	0
02740 09CF                        00            .byte	0
02741                                           ! 633  0x59, 0x8d, 0x57, 0x32, 0x00, 0x57, 0x73, 0xe3,
02742 09D0                        59            .byte	$59
02743 09D1                        8D            .byte	$8D
02744 09D2                        57            .byte	$57
02745 09D3                        32            .byte	$32
02746 09D4                        00            .byte	0
02747 09D5                        57            .byte	$57
02748 09D6                        73            .byte	$73
02749 09D7                        E3            .byte	$E3
02750                                           ! 634  0xff,
02751 09D8                        FF            .byte	$FF
02752                                           ! 635  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x1
02753 09D9                        00            .byte	0
02754 09DA                        01            .byte	1
02755 09DB                        02            .byte	2
02756 09DC                        03            .byte	3
02757 09DD                        04            .byte	4
02758 09DE                        05            .byte	5
02759                                           ! 635 4, 0x07,
02760 09DF                        14            .byte	$14
02761 09E0                        07            .byte	7
02762                                           ! 636  0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
02763 09E1                        38            .byte	$38
02764 09E2                        39            .byte	$39
02765 09E3                        3A            .byte	$3A
02766 09E4                        3B            .byte	$3B
02767 09E5                        3C            .byte	$3C
02768 09E6                        3D            .byte	$3D
02769 09E7                        3E            .byte	$3E
02770 09E8                        3F            .byte	$3F
02771                                           ! 637  0x01, 0x00, 0x0f, 0x00,
02772 09E9                        01            .byte	1
02773 09EA                        00            .byte	0
02774 09EB                        0F            .byte	$F
02775 09EC                        00            .byte	0
02776                                           ! 638  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0f, 0xff,
02777 09ED                        00            .byte	0
02778 09EE                        00            .byte	0
02779 09EF                        00            .byte	0
02780 09F0                        00            .byte	0
02781 09F1                        00            .byte	0
02782 09F2                        00            .byte	0
02783 09F3                        05            .byte	5
02784 09F4                        0F            .byte	$F
02785 09F5                        FF            .byte	$FF
02786                                           ! 639 },
02787                                           ! 640 };
02788                                           !BCC_EOS
02789                                           ! 641 static Bit8u palette0[63+1][3]=
02790                                           ! 642 {
02791                       000009F6            _palette0:
02792                                           ! 643   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02793 09F6                        00            .byte	0
02794 09F7                        00            .byte	0
02795 09F8                        00            .byte	0
02796 09F9                        00            .byte	0
02797 09FA                        00            .byte	0
02798 09FB                        00            .byte	0
02799 09FC                        00            .byte	0
02800 09FD                        00            .byte	0
02801 09FE                        00            .byte	0
02802 09FF                        00            .byte	0
02803 0A00                        00            .byte	0
02804 0A01                        00            .byte	0
02805 0A02                        00            .byte	0
02806 0A03                        00            .byte	0
02807 0A04                        00            .byte	0
02808 0A05                        00            .byte	0
02809 0A06                        00            .byte	0
02810 0A07                        00            .byte	0
02811 0A08                        00            .byte	0
02812 0A09                        00            .byte	0
02813 0A0A                        00            .byte	0
02814 0A0B                        00            .byte	0
02815 0A0C                        00            .byte	0
02816 0A0D                        00            .byte	0
02817                                           ! 644   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02818 0A0E                        2A            .byte	$2A
02819 0A0F                        2A            .byte	$2A
02820 0A10                        2A            .byte	$2A
02821 0A11                        2A            .byte	$2A
02822 0A12                        2A            .byte	$2A
02823 0A13                        2A            .byte	$2A
02824 0A14                        2A            .byte	$2A
02825 0A15                        2A            .byte	$2A
02826 0A16                        2A            .byte	$2A
02827 0A17                        2A            .byte	$2A
02828 0A18                        2A            .byte	$2A
02829 0A19                        2A            .byte	$2A
02830 0A1A                        2A            .byte	$2A
02831 0A1B                        2A            .byte	$2A
02832 0A1C                        2A            .byte	$2A
02833 0A1D                        2A            .byte	$2A
02834 0A1E                        2A            .byte	$2A
02835 0A1F                        2A            .byte	$2A
02836 0A20                        2A            .byte	$2A
02837 0A21                        2A            .byte	$2A
02838 0A22                        2A            .byte	$2A
02839 0A23                        2A            .byte	$2A
02840 0A24                        2A            .byte	$2A
02841 0A25                        2A            .byte	$2A
02842                                           ! 645   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02843 0A26                        2A            .byte	$2A
02844 0A27                        2A            .byte	$2A
02845 0A28                        2A            .byte	$2A
02846 0A29                        2A            .byte	$2A
02847 0A2A                        2A            .byte	$2A
02848 0A2B                        2A            .byte	$2A
02849 0A2C                        2A            .byte	$2A
02850 0A2D                        2A            .byte	$2A
02851 0A2E                        2A            .byte	$2A
02852 0A2F                        2A            .byte	$2A
02853 0A30                        2A            .byte	$2A
02854 0A31                        2A            .byte	$2A
02855 0A32                        2A            .byte	$2A
02856 0A33                        2A            .byte	$2A
02857 0A34                        2A            .byte	$2A
02858 0A35                        2A            .byte	$2A
02859 0A36                        2A            .byte	$2A
02860 0A37                        2A            .byte	$2A
02861 0A38                        2A            .byte	$2A
02862 0A39                        2A            .byte	$2A
02863 0A3A                        2A            .byte	$2A
02864 0A3B                        2A            .byte	$2A
02865 0A3C                        2A            .byte	$2A
02866 0A3D                        2A            .byte	$2A
02867                                           ! 646   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f,
02868 0A3E                        3F            .byte	$3F
02869 0A3F                        3F            .byte	$3F
02870 0A40                        3F            .byte	$3F
02871 0A41                        3F            .byte	$3F
02872 0A42                        3F            .byte	$3F
02873 0A43                        3F            .byte	$3F
02874 0A44                        3F            .byte	$3F
02875 0A45                        3F            .byte	$3F
02876 0A46                        3F            .byte	$3F
02877 0A47                        3F            .byte	$3F
02878 0A48                        3F            .byte	$3F
02879 0A49                        3F            .byte	$3F
02880 0A4A                        3F            .byte	$3F
02881 0A4B                        3F            .byte	$3F
02882 0A4C                        3F            .byte	$3F
02883 0A4D                        3F            .byte	$3F
02884 0A4E                        3F            .byte	$3F
02885 0A4F                        3F            .byte	$3F
02886 0A50                        3F            .byte	$3F
02887 0A51                        3F            .byte	$3F
02888 0A52                        3F            .byte	$3F
02889 0A53                        3F            .byte	$3F
02890 0A54                        3F            .byte	$3F
02891 0A55                        3F            .byte	$3F
02892                                           ! 647   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00,
02893 0A56                        00            .byte	0
02894 0A57                        00            .byte	0
02895 0A58                        00            .byte	0
02896 0A59                        00            .byte	0
02897 0A5A                        00            .byte	0
02898 0A5B                        00            .byte	0
02899 0A5C                        00            .byte	0
02900 0A5D                        00            .byte	0
02901 0A5E                        00            .byte	0
02902 0A5F                        00            .byte	0
02903 0A60                        00            .byte	0
02904 0A61                        00            .byte	0
02905 0A62                        00            .byte	0
02906 0A63                        00            .byte	0
02907 0A64                        00            .byte	0
02908 0A65                        00            .byte	0
02909 0A66                        00            .byte	0
02910 0A67                        00            .byte	0
02911 0A68                        00            .byte	0
02912 0A69                        00            .byte	0
02913 0A6A                        00            .byte	0
02914 0A6B                        00            .byte	0
02915 0A6C                        00            .byte	0
02916 0A6D                        00            .byte	0
02917                                           ! 648   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02918 0A6E                        2A            .byte	$2A
02919 0A6F                        2A            .byte	$2A
02920 0A70                        2A            .byte	$2A
02921 0A71                        2A            .byte	$2A
02922 0A72                        2A            .byte	$2A
02923 0A73                        2A            .byte	$2A
02924 0A74                        2A            .byte	$2A
02925 0A75                        2A            .byte	$2A
02926 0A76                        2A            .byte	$2A
02927 0A77                        2A            .byte	$2A
02928 0A78                        2A            .byte	$2A
02929 0A79                        2A            .byte	$2A
02930 0A7A                        2A            .byte	$2A
02931 0A7B                        2A            .byte	$2A
02932 0A7C                        2A            .byte	$2A
02933 0A7D                        2A            .byte	$2A
02934 0A7E                        2A            .byte	$2A
02935 0A7F                        2A            .byte	$2A
02936 0A80                        2A            .byte	$2A
02937 0A81                        2A            .byte	$2A
02938 0A82                        2A            .byte	$2A
02939 0A83                        2A            .byte	$2A
02940 0A84                        2A            .byte	$2A
02941 0A85                        2A            .byte	$2A
02942                                           ! 649   0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a, 0x2a,0x2a,0x2a,
02943 0A86                        2A            .byte	$2A
02944 0A87                        2A            .byte	$2A
02945 0A88                        2A            .byte	$2A
02946 0A89                        2A            .byte	$2A
02947 0A8A                        2A            .byte	$2A
02948 0A8B                        2A            .byte	$2A
02949 0A8C                        2A            .byte	$2A
02950 0A8D                        2A            .byte	$2A
02951 0A8E                        2A            .byte	$2A
02952 0A8F                        2A            .byte	$2A
02953 0A90                        2A            .byte	$2A
02954 0A91                        2A            .byte	$2A
02955 0A92                        2A            .byte	$2A
02956 0A93                        2A            .byte	$2A
02957 0A94                        2A            .byte	$2A
02958 0A95                        2A            .byte	$2A
02959 0A96                        2A            .byte	$2A
02960 0A97                        2A            .byte	$2A
02961 0A98                        2A            .byte	$2A
02962 0A99                        2A            .byte	$2A
02963 0A9A                        2A            .byte	$2A
02964 0A9B                        2A            .byte	$2A
02965 0A9C                        2A            .byte	$2A
02966 0A9D                        2A            .byte	$2A
02967                                           ! 650   0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f, 0x3f,0x3f,0x3f
02968 0A9E                        3F            .byte	$3F
02969 0A9F                        3F            .byte	$3F
02970 0AA0                        3F            .byte	$3F
02971 0AA1                        3F            .byte	$3F
02972 0AA2                        3F            .byte	$3F
02973 0AA3                        3F            .byte	$3F
02974 0AA4                        3F            .byte	$3F
02975 0AA5                        3F            .byte	$3F
02976 0AA6                        3F            .byte	$3F
02977 0AA7                        3F            .byte	$3F
02978 0AA8                        3F            .byte	$3F
02979 0AA9                        3F            .byte	$3F
02980 0AAA                        3F            .byte	$3F
02981 0AAB                        3F            .byte	$3F
02982 0AAC                        3F            .byte	$3F
02983 0AAD                        3F            .byte	$3F
02984 0AAE                        3F            .byte	$3F
02985 0AAF                        3F            .byte	$3F
02986 0AB0                        3F            .byte	$3F
02987 0AB1                        3F            .byte	$3F
02988 0AB2                        3F            .byte	$3F
02989 0AB3                        3F            .byte	$3F
02990 0AB4                        3F            .byte	$3F
02991                                           ! 651 };
02992 0AB5                        3F            .byte	$3F
02993                                           !BCC_EOS
02994                                           ! 652 static Bit8u palette1[63+1][3]=
02995                                           ! 653 {
02996                       00000AB6            _palette1:
02997                                           ! 654   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
02998 0AB6                        00            .byte	0
02999 0AB7                        00            .byte	0
03000 0AB8                        00            .byte	0
03001 0AB9                        00            .byte	0
03002 0ABA                        00            .byte	0
03003 0ABB                        2A            .byte	$2A
03004 0ABC                        00            .byte	0
03005 0ABD                        2A            .byte	$2A
03006 0ABE                        00            .byte	0
03007 0ABF                        00            .byte	0
03008 0AC0                        2A            .byte	$2A
03009 0AC1                        2A            .byte	$2A
03010 0AC2                        2A            .byte	$2A
03011 0AC3                        00            .byte	0
03012 0AC4                        00            .byte	0
03013 0AC5                        2A            .byte	$2A
03014 0AC6                        00            .byte	0
03015 0AC7                        2A            .byte	$2A
03016 0AC8                        2A            .byte	$2A
03017 0AC9                        15            .byte	$15
03018 0ACA                        00            .byte	0
03019 0ACB                        2A            .byte	$2A
03020 0ACC                        2A            .byte	$2A
03021 0ACD                        2A            .byte	$2A
03022                                           ! 655   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03023 0ACE                        00            .byte	0
03024 0ACF                        00            .byte	0
03025 0AD0                        00            .byte	0
03026 0AD1                        00            .byte	0
03027 0AD2                        00            .byte	0
03028 0AD3                        2A            .byte	$2A
03029 0AD4                        00            .byte	0
03030 0AD5                        2A            .byte	$2A
03031 0AD6                        00            .byte	0
03032 0AD7                        00            .byte	0
03033 0AD8                        2A            .byte	$2A
03034 0AD9                        2A            .byte	$2A
03035 0ADA                        2A            .byte	$2A
03036 0ADB                        00            .byte	0
03037 0ADC                        00            .byte	0
03038 0ADD                        2A            .byte	$2A
03039 0ADE                        00            .byte	0
03040 0ADF                        2A            .byte	$2A
03041 0AE0                        2A            .byte	$2A
03042 0AE1                        15            .byte	$15
03043 0AE2                        00            .byte	0
03044 0AE3                        2A            .byte	$2A
03045 0AE4                        2A            .byte	$2A
03046 0AE5                        2A            .byte	$2A
03047                                           ! 656   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03048 0AE6                        15            .byte	$15
03049 0AE7                        15            .byte	$15
03050 0AE8                        15            .byte	$15
03051 0AE9                        15            .byte	$15
03052 0AEA                        15            .byte	$15
03053 0AEB                        3F            .byte	$3F
03054 0AEC                        15            .byte	$15
03055 0AED                        3F            .byte	$3F
03056 0AEE                        15            .byte	$15
03057 0AEF                        15            .byte	$15
03058 0AF0                        3F            .byte	$3F
03059 0AF1                        3F            .byte	$3F
03060 0AF2                        3F            .byte	$3F
03061 0AF3                        15            .byte	$15
03062 0AF4                        15            .byte	$15
03063 0AF5                        3F            .byte	$3F
03064 0AF6                        15            .byte	$15
03065 0AF7                        3F            .byte	$3F
03066 0AF8                        3F            .byte	$3F
03067 0AF9                        3F            .byte	$3F
03068 0AFA                        15            .byte	$15
03069 0AFB                        3F            .byte	$3F
03070 0AFC                        3F            .byte	$3F
03071 0AFD                        3F            .byte	$3F
03072                                           ! 657   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03073 0AFE                        15            .byte	$15
03074 0AFF                        15            .byte	$15
03075 0B00                        15            .byte	$15
03076 0B01                        15            .byte	$15
03077 0B02                        15            .byte	$15
03078 0B03                        3F            .byte	$3F
03079 0B04                        15            .byte	$15
03080 0B05                        3F            .byte	$3F
03081 0B06                        15            .byte	$15
03082 0B07                        15            .byte	$15
03083 0B08                        3F            .byte	$3F
03084 0B09                        3F            .byte	$3F
03085 0B0A                        3F            .byte	$3F
03086 0B0B                        15            .byte	$15
03087 0B0C                        15            .byte	$15
03088 0B0D                        3F            .byte	$3F
03089 0B0E                        15            .byte	$15
03090 0B0F                        3F            .byte	$3F
03091 0B10                        3F            .byte	$3F
03092 0B11                        3F            .byte	$3F
03093 0B12                        15            .byte	$15
03094 0B13                        3F            .byte	$3F
03095 0B14                        3F            .byte	$3F
03096 0B15                        3F            .byte	$3F
03097                                           ! 658   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03098 0B16                        00            .byte	0
03099 0B17                        00            .byte	0
03100 0B18                        00            .byte	0
03101 0B19                        00            .byte	0
03102 0B1A                        00            .byte	0
03103 0B1B                        2A            .byte	$2A
03104 0B1C                        00            .byte	0
03105 0B1D                        2A            .byte	$2A
03106 0B1E                        00            .byte	0
03107 0B1F                        00            .byte	0
03108 0B20                        2A            .byte	$2A
03109 0B21                        2A            .byte	$2A
03110 0B22                        2A            .byte	$2A
03111 0B23                        00            .byte	0
03112 0B24                        00            .byte	0
03113 0B25                        2A            .byte	$2A
03114 0B26                        00            .byte	0
03115 0B27                        2A            .byte	$2A
03116 0B28                        2A            .byte	$2A
03117 0B29                        15            .byte	$15
03118 0B2A                        00            .byte	0
03119 0B2B                        2A            .byte	$2A
03120 0B2C                        2A            .byte	$2A
03121 0B2D                        2A            .byte	$2A
03122                                           ! 659   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03123 0B2E                        00            .byte	0
03124 0B2F                        00            .byte	0
03125 0B30                        00            .byte	0
03126 0B31                        00            .byte	0
03127 0B32                        00            .byte	0
03128 0B33                        2A            .byte	$2A
03129 0B34                        00            .byte	0
03130 0B35                        2A            .byte	$2A
03131 0B36                        00            .byte	0
03132 0B37                        00            .byte	0
03133 0B38                        2A            .byte	$2A
03134 0B39                        2A            .byte	$2A
03135 0B3A                        2A            .byte	$2A
03136 0B3B                        00            .byte	0
03137 0B3C                        00            .byte	0
03138 0B3D                        2A            .byte	$2A
03139 0B3E                        00            .byte	0
03140 0B3F                        2A            .byte	$2A
03141 0B40                        2A            .byte	$2A
03142 0B41                        15            .byte	$15
03143 0B42                        00            .byte	0
03144 0B43                        2A            .byte	$2A
03145 0B44                        2A            .byte	$2A
03146 0B45                        2A            .byte	$2A
03147                                           ! 660   0x15,0x15,0x
03148 0B46                        15            .byte	$15
03149 0B47                        15            .byte	$15
03150                                           ! 660 15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03151 0B48                        15            .byte	$15
03152 0B49                        15            .byte	$15
03153 0B4A                        15            .byte	$15
03154 0B4B                        3F            .byte	$3F
03155 0B4C                        15            .byte	$15
03156 0B4D                        3F            .byte	$3F
03157 0B4E                        15            .byte	$15
03158 0B4F                        15            .byte	$15
03159 0B50                        3F            .byte	$3F
03160 0B51                        3F            .byte	$3F
03161 0B52                        3F            .byte	$3F
03162 0B53                        15            .byte	$15
03163 0B54                        15            .byte	$15
03164 0B55                        3F            .byte	$3F
03165 0B56                        15            .byte	$15
03166 0B57                        3F            .byte	$3F
03167 0B58                        3F            .byte	$3F
03168 0B59                        3F            .byte	$3F
03169 0B5A                        15            .byte	$15
03170 0B5B                        3F            .byte	$3F
03171 0B5C                        3F            .byte	$3F
03172 0B5D                        3F            .byte	$3F
03173                                           ! 661   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03174 0B5E                        15            .byte	$15
03175 0B5F                        15            .byte	$15
03176 0B60                        15            .byte	$15
03177 0B61                        15            .byte	$15
03178 0B62                        15            .byte	$15
03179 0B63                        3F            .byte	$3F
03180 0B64                        15            .byte	$15
03181 0B65                        3F            .byte	$3F
03182 0B66                        15            .byte	$15
03183 0B67                        15            .byte	$15
03184 0B68                        3F            .byte	$3F
03185 0B69                        3F            .byte	$3F
03186 0B6A                        3F            .byte	$3F
03187 0B6B                        15            .byte	$15
03188 0B6C                        15            .byte	$15
03189 0B6D                        3F            .byte	$3F
03190 0B6E                        15            .byte	$15
03191 0B6F                        3F            .byte	$3F
03192 0B70                        3F            .byte	$3F
03193 0B71                        3F            .byte	$3F
03194 0B72                        15            .byte	$15
03195 0B73                        3F            .byte	$3F
03196 0B74                        3F            .byte	$3F
03197                                           ! 662 };
03198 0B75                        3F            .byte	$3F
03199                                           !BCC_EOS
03200                                           ! 663 static Bit8u palette2[63+1][3]=
03201                                           ! 664 {
03202                       00000B76            _palette2:
03203                                           ! 665   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x2a,0x00, 0x2a,0x2a,0x2a,
03204 0B76                        00            .byte	0
03205 0B77                        00            .byte	0
03206 0B78                        00            .byte	0
03207 0B79                        00            .byte	0
03208 0B7A                        00            .byte	0
03209 0B7B                        2A            .byte	$2A
03210 0B7C                        00            .byte	0
03211 0B7D                        2A            .byte	$2A
03212 0B7E                        00            .byte	0
03213 0B7F                        00            .byte	0
03214 0B80                        2A            .byte	$2A
03215 0B81                        2A            .byte	$2A
03216 0B82                        2A            .byte	$2A
03217 0B83                        00            .byte	0
03218 0B84                        00            .byte	0
03219 0B85                        2A            .byte	$2A
03220 0B86                        00            .byte	0
03221 0B87                        2A            .byte	$2A
03222 0B88                        2A            .byte	$2A
03223 0B89                        2A            .byte	$2A
03224 0B8A                        00            .byte	0
03225 0B8B                        2A            .byte	$2A
03226 0B8C                        2A            .byte	$2A
03227 0B8D                        2A            .byte	$2A
03228                                           ! 666   0x00,0x00,0x15, 0x00,0x00,0x3f, 0x00,0x2a,0x15, 0x00,0x2a,0x3f, 0x2a,0x00,0x15, 0x2a,0x00,0x3f, 0x2a,0x2a,0x15, 0x2a,0x2a,0x3f,
03229 0B8E                        00            .byte	0
03230 0B8F                        00            .byte	0
03231 0B90                        15            .byte	$15
03232 0B91                        00            .byte	0
03233 0B92                        00            .byte	0
03234 0B93                        3F            .byte	$3F
03235 0B94                        00            .byte	0
03236 0B95                        2A            .byte	$2A
03237 0B96                        15            .byte	$15
03238 0B97                        00            .byte	0
03239 0B98                        2A            .byte	$2A
03240 0B99                        3F            .byte	$3F
03241 0B9A                        2A            .byte	$2A
03242 0B9B                        00            .byte	0
03243 0B9C                        15            .byte	$15
03244 0B9D                        2A            .byte	$2A
03245 0B9E                        00            .byte	0
03246 0B9F                        3F            .byte	$3F
03247 0BA0                        2A            .byte	$2A
03248 0BA1                        2A            .byte	$2A
03249 0BA2                        15            .byte	$15
03250 0BA3                        2A            .byte	$2A
03251 0BA4                        2A            .byte	$2A
03252 0BA5                        3F            .byte	$3F
03253                                           ! 667   0x00,0x15,0x00, 0x00,0x15,0x2a, 0x00,0x3f,0x00, 0x00,0x3f,0x2a, 0x2a,0x15,0x00, 0x2a,0x15,0x2a, 0x2a,0x3f,0x00, 0x2a,0x3f,0x2a,
03254 0BA6                        00            .byte	0
03255 0BA7                        15            .byte	$15
03256 0BA8                        00            .byte	0
03257 0BA9                        00            .byte	0
03258 0BAA                        15            .byte	$15
03259 0BAB                        2A            .byte	$2A
03260 0BAC                        00            .byte	0
03261 0BAD                        3F            .byte	$3F
03262 0BAE                        00            .byte	0
03263 0BAF                        00            .byte	0
03264 0BB0                        3F            .byte	$3F
03265 0BB1                        2A            .byte	$2A
03266 0BB2                        2A            .byte	$2A
03267 0BB3                        15            .byte	$15
03268 0BB4                        00            .byte	0
03269 0BB5                        2A            .byte	$2A
03270 0BB6                        15            .byte	$15
03271 0BB7                        2A            .byte	$2A
03272 0BB8                        2A            .byte	$2A
03273 0BB9                        3F            .byte	$3F
03274 0BBA                        00            .byte	0
03275 0BBB                        2A            .byte	$2A
03276 0BBC                        3F            .byte	$3F
03277 0BBD                        2A            .byte	$2A
03278                                           ! 668   0x00,0x15,0x15, 0x00,0x15,0x3f, 0x00,0x3f,0x15, 0x00,0x3f,0x3f, 0x2a,0x15,0x15, 0x2a,0x15,0x3f, 0x2a,0x3f,0x15, 0x2a,0x3f,0x3f,
03279 0BBE                        00            .byte	0
03280 0BBF                        15            .byte	$15
03281 0BC0                        15            .byte	$15
03282 0BC1                        00            .byte	0
03283 0BC2                        15            .byte	$15
03284 0BC3                        3F            .byte	$3F
03285 0BC4                        00            .byte	0
03286 0BC5                        3F            .byte	$3F
03287 0BC6                        15            .byte	$15
03288 0BC7                        00            .byte	0
03289 0BC8                        3F            .byte	$3F
03290 0BC9                        3F            .byte	$3F
03291 0BCA                        2A            .byte	$2A
03292 0BCB                        15            .byte	$15
03293 0BCC                        15            .byte	$15
03294 0BCD                        2A            .byte	$2A
03295 0BCE                        15            .byte	$15
03296 0BCF                        3F            .byte	$3F
03297 0BD0                        2A            .byte	$2A
03298 0BD1                        3F            .byte	$3F
03299 0BD2                        15            .byte	$15
03300 0BD3                        2A            .byte	$2A
03301 0BD4                        3F            .byte	$3F
03302 0BD5                        3F            .byte	$3F
03303                                           ! 669   0x15,0x00,0x00, 0x15,0x00,0x2a, 0x15,0x2a,0x00, 0x15,0x2a,0x2a, 0x3f,0x00,0x00, 0x3f,0x00,0x2a, 0x3f,0x2a,0x00, 0x3f,0x2a,0x2a,
03304 0BD6                        15            .byte	$15
03305 0BD7                        00            .byte	0
03306 0BD8                        00            .byte	0
03307 0BD9                        15            .byte	$15
03308 0BDA                        00            .byte	0
03309 0BDB                        2A            .byte	$2A
03310 0BDC                        15            .byte	$15
03311 0BDD                        2A            .byte	$2A
03312 0BDE                        00            .byte	0
03313 0BDF                        15            .byte	$15
03314 0BE0                        2A            .byte	$2A
03315 0BE1                        2A            .byte	$2A
03316 0BE2                        3F            .byte	$3F
03317 0BE3                        00            .byte	0
03318 0BE4                        00            .byte	0
03319 0BE5                        3F            .byte	$3F
03320 0BE6                        00            .byte	0
03321 0BE7                        2A            .byte	$2A
03322 0BE8                        3F            .byte	$3F
03323 0BE9                        2A            .byte	$2A
03324 0BEA                        00            .byte	0
03325 0BEB                        3F            .byte	$3F
03326 0BEC                        2A            .byte	$2A
03327 0BED                        2A            .byte	$2A
03328                                           ! 670   0x15,0x00,0x15, 0x15,0x00,0x3f, 0x15,0x2a,0x15, 0x15,0x2a,0x3f, 0x3f,0x00,0x15, 0x3f,0x00,0x3f, 0x3f,0x2a,0x15, 0x3f,0x2a,0x3f,
03329 0BEE                        15            .byte	$15
03330 0BEF                        00            .byte	0
03331 0BF0                        15            .byte	$15
03332 0BF1                        15            .byte	$15
03333 0BF2                        00            .byte	0
03334 0BF3                        3F            .byte	$3F
03335 0BF4                        15            .byte	$15
03336 0BF5                        2A            .byte	$2A
03337 0BF6                        15            .byte	$15
03338 0BF7                        15            .byte	$15
03339 0BF8                        2A            .byte	$2A
03340 0BF9                        3F            .byte	$3F
03341 0BFA                        3F            .byte	$3F
03342 0BFB                        00            .byte	0
03343 0BFC                        15            .byte	$15
03344 0BFD                        3F            .byte	$3F
03345 0BFE                        00            .byte	0
03346 0BFF                        3F            .byte	$3F
03347 0C00                        3F            .byte	$3F
03348 0C01                        2A            .byte	$2A
03349 0C02                        15            .byte	$15
03350 0C03                        3F            .byte	$3F
03351 0C04                        2A            .byte	$2A
03352 0C05                        3F            .byte	$3F
03353                                           ! 671   0x15,0x15,0x00, 0x15,0x15,0x2a, 0x15,0x3f,0x00, 0x15,0x3f,0x2a, 0x3f,0x15,0x00, 0x3f,0x15,0x2a, 0x3f,0x3f,0x00, 0x3f,0x3f,0x2a,
03354 0C06                        15            .byte	$15
03355 0C07                        15            .byte	$15
03356 0C08                        00            .byte	0
03357 0C09                        15            .byte	$15
03358 0C0A                        15            .byte	$15
03359 0C0B                        2A            .byte	$2A
03360 0C0C                        15            .byte	$15
03361 0C0D                        3F            .byte	$3F
03362 0C0E                        00            .byte	0
03363 0C0F                        15            .byte	$15
03364 0C10                        3F            .byte	$3F
03365 0C11                        2A            .byte	$2A
03366 0C12                        3F            .byte	$3F
03367 0C13                        15            .byte	$15
03368 0C14                        00            .byte	0
03369 0C15                        3F            .byte	$3F
03370 0C16                        15            .byte	$15
03371 0C17                        2A            .byte	$2A
03372 0C18                        3F            .byte	$3F
03373 0C19                        3F            .byte	$3F
03374 0C1A                        00            .byte	0
03375 0C1B                        3F            .byte	$3F
03376 0C1C                        3F            .byte	$3F
03377 0C1D                        2A            .byte	$2A
03378                                           ! 672   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f
03379 0C1E                        15            .byte	$15
03380 0C1F                        15            .byte	$15
03381 0C20                        15            .byte	$15
03382 0C21                        15            .byte	$15
03383 0C22                        15            .byte	$15
03384 0C23                        3F            .byte	$3F
03385 0C24                        15            .byte	$15
03386 0C25                        3F            .byte	$3F
03387 0C26                        15            .byte	$15
03388 0C27                        15            .byte	$15
03389 0C28                        3F            .byte	$3F
03390 0C29                        3F            .byte	$3F
03391 0C2A                        3F            .byte	$3F
03392 0C2B                        15            .byte	$15
03393 0C2C                        15            .byte	$15
03394 0C2D                        3F            .byte	$3F
03395 0C2E                        15            .byte	$15
03396 0C2F                        3F            .byte	$3F
03397 0C30                        3F            .byte	$3F
03398 0C31                        3F            .byte	$3F
03399 0C32                        15            .byte	$15
03400 0C33                        3F            .byte	$3F
03401 0C34                        3F            .byte	$3F
03402                                           ! 673 };
03403 0C35                        3F            .byte	$3F
03404                                           !BCC_EOS
03405                                           ! 674 static Bit8u palette3[256][3]=
03406                                           ! 675 {
03407                       00000C36            _palette3:
03408                                           ! 676   0x00,0x00,0x00, 0x00,0x00,0x2a, 0x00,0x2a,0x00, 0x00,0x2a,0x2a, 0x2a,0x00,0x00, 0x2a,0x00,0x2a, 0x2a,0x15,0x00, 0x2a,0x2a,0x2a,
03409 0C36                        00            .byte	0
03410 0C37                        00            .byte	0
03411 0C38                        00            .byte	0
03412 0C39                        00            .byte	0
03413 0C3A                        00            .byte	0
03414 0C3B                        2A            .byte	$2A
03415 0C3C                        00            .byte	0
03416 0C3D                        2A            .byte	$2A
03417 0C3E                        00            .byte	0
03418 0C3F                        00            .byte	0
03419 0C40                        2A            .byte	$2A
03420 0C41                        2A            .byte	$2A
03421 0C42                        2A            .byte	$2A
03422 0C43                        00            .byte	0
03423 0C44                        00            .byte	0
03424 0C45                        2A            .byte	$2A
03425 0C46                        00            .byte	0
03426 0C47                        2A            .byte	$2A
03427 0C48                        2A            .byte	$2A
03428 0C49                        15            .byte	$15
03429 0C4A                        00            .byte	0
03430 0C4B                        2A            .byte	$2A
03431 0C4C                        2A            .byte	$2A
03432 0C4D                        2A            .byte	$2A
03433                                           ! 677   0x15,0x15,0x15, 0x15,0x15,0x3f, 0x15,0x3f,0x15, 0x15,0x3f,0x3f, 0x3f,0x15,0x15, 0x3f,0x15,0x3f, 0x3f,0x3f,0x15, 0x3f,0x3f,0x3f,
03434 0C4E                        15            .byte	$15
03435 0C4F                        15            .byte	$15
03436 0C50                        15            .byte	$15
03437 0C51                        15            .byte	$15
03438 0C52                        15            .byte	$15
03439 0C53                        3F            .byte	$3F
03440 0C54                        15            .byte	$15
03441 0C55                        3F            .byte	$3F
03442 0C56                        15            .byte	$15
03443 0C57                        15            .byte	$15
03444 0C58                        3F            .byte	$3F
03445 0C59                        3F            .byte	$3F
03446 0C5A                        3F            .byte	$3F
03447 0C5B                        15            .byte	$15
03448 0C5C                        15            .byte	$15
03449 0C5D                        3F            .byte	$3F
03450 0C5E                        15            .byte	$15
03451 0C5F                        3F            .byte	$3F
03452 0C60                        3F            .byte	$3F
03453 0C61                        3F            .byte	$3F
03454 0C62                        15            .byte	$15
03455 0C63                        3F            .byte	$3F
03456 0C64                        3F            .byte	$3F
03457 0C65                        3F            .byte	$3F
03458                                           ! 678   0x00,0x00,0x00, 0x05,0x05,0x05, 0x08,0x08,0x08, 0x0b,0x0b,0x0b, 0x0e,0x0e,0x0e, 0x11,0x11,0x11, 0x14,0x14,0x14, 0x18,0x18,0x18,
03459 0C66                        00            .byte	0
03460 0C67                        00            .byte	0
03461 0C68                        00            .byte	0
03462 0C69                        05            .byte	5
03463 0C6A                        05            .byte	5
03464 0C6B                        05            .byte	5
03465 0C6C                        08            .byte	8
03466 0C6D                        08            .byte	8
03467 0C6E                        08            .byte	8
03468 0C6F                        0B            .byte	$B
03469 0C70                        0B            .byte	$B
03470 0C71                        0B            .byte	$B
03471 0C72                        0E            .byte	$E
03472 0C73                        0E            .byte	$E
03473 0C74                        0E            .byte	$E
03474 0C75                        11            .byte	$11
03475 0C76                        11            .byte	$11
03476 0C77                        11            .byte	$11
03477 0C78                        14            .byte	$14
03478 0C79                        14            .byte	$14
03479 0C7A                        14            .byte	$14
03480 0C7B                        18            .byte	$18
03481 0C7C                        18            .byte	$18
03482 0C7D                        18            .byte	$18
03483                                           ! 679   0x1c,0x1c,0x1c, 0x20,0x20,0x20, 0x24,0x24,0x24, 0x28,0x28,0x28, 0x2d,0x2d,0x2d, 0x32,0x32,0x32, 0x38,0x38,0x38, 0x3f,0x3f,0x3f,
03484 0C7E                        1C            .byte	$1C
03485 0C7F                        1C            .byte	$1C
03486 0C80                        1C            .byte	$1C
03487 0C81                        20            .byte	$20
03488 0C82                        20            .byte	$20
03489 0C83                        20            .byte	$20
03490 0C84                        24            .byte	$24
03491 0C85                        24            .byte	$24
03492 0C86                        24            .byte	$24
03493 0C87                        28            .byte	$28
03494 0C88                        28            .byte	$28
03495 0C89                        28            .byte	$28
03496 0C8A                        2D            .byte	$2D
03497 0C8B                        2D            .byte	$2D
03498 0C8C                        2D            .byte	$2D
03499 0C8D                        32            .byte	$32
03500 0C8E                        32            .byte	$32
03501 0C8F                        32            .byte	$32
03502 0C90                        38            .byte	$38
03503 0C91                        38            .byte	$38
03504 0C92                        38            .byte	$38
03505 0C93                        3F            .byte	$3F
03506 0C94                        3F            .byte	$3F
03507 0C95                        3F            .byte	$3F
03508                                           ! 680   0x00,0x00,0x3f, 0x10,0x00,0x3f, 0x1f,0x00,0x3f, 0x2f,0x00,0x3f, 0x3f,0x00,0x3f, 0x3f,0x00,0x2f, 0x3f,0x00,0x1f, 0x3f,0x00,0x10,
03509 0C96                        00            .byte	0
03510 0C97                        00            .byte	0
03511 0C98                        3F            .byte	$3F
03512 0C99                        10            .byte	$10
03513 0C9A                        00            .byte	0
03514 0C9B                        3F            .byte	$3F
03515 0C9C                        1F            .byte	$1F
03516 0C9D                        00            .byte	0
03517 0C9E                        3F            .byte	$3F
03518 0C9F                        2F            .byte	$2F
03519 0CA0                        00            .byte	0
03520 0CA1                        3F            .byte	$3F
03521 0CA2                        3F            .byte	$3F
03522 0CA3                        00            .byte	0
03523 0CA4                        3F            .byte	$3F
03524 0CA5                        3F            .byte	$3F
03525 0CA6                        00            .byte	0
03526 0CA7                        2F            .byte	$2F
03527 0CA8                        3F            .byte	$3F
03528 0CA9                        00            .byte	0
03529 0CAA                        1F            .byte	$1F
03530 0CAB                        3F            .byte	$3F
03531 0CAC                        00            .byte	0
03532 0CAD                        10            .byte	$10
03533                                           ! 681   0x3f,0x00,0x00, 0x3f,0x10,0x00, 0x3f,0x
03534 0CAE                        3F            .byte	$3F
03535 0CAF                        00            .byte	0
03536 0CB0                        00            .byte	0
03537 0CB1                        3F            .byte	$3F
03538 0CB2                        10            .byte	$10
03539 0CB3                        00            .byte	0
03540 0CB4                        3F            .byte	$3F
03541                                           ! 681 1f,0x00, 0x3f,0x2f,0x00, 0x3f,0x3f,0x00, 0x2f,0x3f,0x00, 0x1f,0x3f,0x00, 0x10,0x3f,0x00,
03542 0CB5                        1F            .byte	$1F
03543 0CB6                        00            .byte	0
03544 0CB7                        3F            .byte	$3F
03545 0CB8                        2F            .byte	$2F
03546 0CB9                        00            .byte	0
03547 0CBA                        3F            .byte	$3F
03548 0CBB                        3F            .byte	$3F
03549 0CBC                        00            .byte	0
03550 0CBD                        2F            .byte	$2F
03551 0CBE                        3F            .byte	$3F
03552 0CBF                        00            .byte	0
03553 0CC0                        1F            .byte	$1F
03554 0CC1                        3F            .byte	$3F
03555 0CC2                        00            .byte	0
03556 0CC3                        10            .byte	$10
03557 0CC4                        3F            .byte	$3F
03558 0CC5                        00            .byte	0
03559                                           ! 682   0x00,0x3f,0x00, 0x00,0x3f,0x10, 0x00,0x3f,0x1f, 0x00,0x3f,0x2f, 0x00,0x3f,0x3f, 0x00,0x2f,0x3f, 0x00,0x1f,0x3f, 0x00,0x10,0x3f,
03560 0CC6                        00            .byte	0
03561 0CC7                        3F            .byte	$3F
03562 0CC8                        00            .byte	0
03563 0CC9                        00            .byte	0
03564 0CCA                        3F            .byte	$3F
03565 0CCB                        10            .byte	$10
03566 0CCC                        00            .byte	0
03567 0CCD                        3F            .byte	$3F
03568 0CCE                        1F            .byte	$1F
03569 0CCF                        00            .byte	0
03570 0CD0                        3F            .byte	$3F
03571 0CD1                        2F            .byte	$2F
03572 0CD2                        00            .byte	0
03573 0CD3                        3F            .byte	$3F
03574 0CD4                        3F            .byte	$3F
03575 0CD5                        00            .byte	0
03576 0CD6                        2F            .byte	$2F
03577 0CD7                        3F            .byte	$3F
03578 0CD8                        00            .byte	0
03579 0CD9                        1F            .byte	$1F
03580 0CDA                        3F            .byte	$3F
03581 0CDB                        00            .byte	0
03582 0CDC                        10            .byte	$10
03583 0CDD                        3F            .byte	$3F
03584                                           ! 683   0x1f,0x1f,0x3f, 0x27,0x1f,0x3f, 0x2f,0x1f,0x3f, 0x37,0x1f,0x3f, 0x3f,0x1f,0x3f, 0x3f,0x1f,0x37, 0x3f,0x1f,0x2f, 0x3f,0x1f,0x27,
03585 0CDE                        1F            .byte	$1F
03586 0CDF                        1F            .byte	$1F
03587 0CE0                        3F            .byte	$3F
03588 0CE1                        27            .byte	$27
03589 0CE2                        1F            .byte	$1F
03590 0CE3                        3F            .byte	$3F
03591 0CE4                        2F            .byte	$2F
03592 0CE5                        1F            .byte	$1F
03593 0CE6                        3F            .byte	$3F
03594 0CE7                        37            .byte	$37
03595 0CE8                        1F            .byte	$1F
03596 0CE9                        3F            .byte	$3F
03597 0CEA                        3F            .byte	$3F
03598 0CEB                        1F            .byte	$1F
03599 0CEC                        3F            .byte	$3F
03600 0CED                        3F            .byte	$3F
03601 0CEE                        1F            .byte	$1F
03602 0CEF                        37            .byte	$37
03603 0CF0                        3F            .byte	$3F
03604 0CF1                        1F            .byte	$1F
03605 0CF2                        2F            .byte	$2F
03606 0CF3                        3F            .byte	$3F
03607 0CF4                        1F            .byte	$1F
03608 0CF5                        27            .byte	$27
03609                                           ! 684   0x3f,0x1f,0x1f, 0x3f,0x27,0x1f, 0x3f,0x2f,0x1f, 0x3f,0x37,0x1f, 0x3f,0x3f,0x1f, 0x37,0x3f,0x1f, 0x2f,0x3f,0x1f, 0x27,0x3f,0x1f,
03610 0CF6                        3F            .byte	$3F
03611 0CF7                        1F            .byte	$1F
03612 0CF8                        1F            .byte	$1F
03613 0CF9                        3F            .byte	$3F
03614 0CFA                        27            .byte	$27
03615 0CFB                        1F            .byte	$1F
03616 0CFC                        3F            .byte	$3F
03617 0CFD                        2F            .byte	$2F
03618 0CFE                        1F            .byte	$1F
03619 0CFF                        3F            .byte	$3F
03620 0D00                        37            .byte	$37
03621 0D01                        1F            .byte	$1F
03622 0D02                        3F            .byte	$3F
03623 0D03                        3F            .byte	$3F
03624 0D04                        1F            .byte	$1F
03625 0D05                        37            .byte	$37
03626 0D06                        3F            .byte	$3F
03627 0D07                        1F            .byte	$1F
03628 0D08                        2F            .byte	$2F
03629 0D09                        3F            .byte	$3F
03630 0D0A                        1F            .byte	$1F
03631 0D0B                        27            .byte	$27
03632 0D0C                        3F            .byte	$3F
03633 0D0D                        1F            .byte	$1F
03634                                           ! 685   0x1f,0x3f,0x1f, 0x1f,0x3f,0x27, 0x1f,0x3f,0x2f, 0x1f,0x3f,0x37, 0x1f,0x3f,0x3f, 0x1f,0x37,0x3f, 0x1f,0x2f,0x3f, 0x1f,0x27,0x3f,
03635 0D0E                        1F            .byte	$1F
03636 0D0F                        3F            .byte	$3F
03637 0D10                        1F            .byte	$1F
03638 0D11                        1F            .byte	$1F
03639 0D12                        3F            .byte	$3F
03640 0D13                        27            .byte	$27
03641 0D14                        1F            .byte	$1F
03642 0D15                        3F            .byte	$3F
03643 0D16                        2F            .byte	$2F
03644 0D17                        1F            .byte	$1F
03645 0D18                        3F            .byte	$3F
03646 0D19                        37            .byte	$37
03647 0D1A                        1F            .byte	$1F
03648 0D1B                        3F            .byte	$3F
03649 0D1C                        3F            .byte	$3F
03650 0D1D                        1F            .byte	$1F
03651 0D1E                        37            .byte	$37
03652 0D1F                        3F            .byte	$3F
03653 0D20                        1F            .byte	$1F
03654 0D21                        2F            .byte	$2F
03655 0D22                        3F            .byte	$3F
03656 0D23                        1F            .byte	$1F
03657 0D24                        27            .byte	$27
03658 0D25                        3F            .byte	$3F
03659                                           ! 686   0x2d,0x2d,0x3f, 0x31,0x2d,0x3f, 0x36,0x2d,0x3f, 0x3a,0x2d,0x3f, 0x3f,0x2d,0x3f, 0x3f,0x2d,0x3a, 0x3f,0x2d,0x36, 0x3f,0x2d,0x31,
03660 0D26                        2D            .byte	$2D
03661 0D27                        2D            .byte	$2D
03662 0D28                        3F            .byte	$3F
03663 0D29                        31            .byte	$31
03664 0D2A                        2D            .byte	$2D
03665 0D2B                        3F            .byte	$3F
03666 0D2C                        36            .byte	$36
03667 0D2D                        2D            .byte	$2D
03668 0D2E                        3F            .byte	$3F
03669 0D2F                        3A            .byte	$3A
03670 0D30                        2D            .byte	$2D
03671 0D31                        3F            .byte	$3F
03672 0D32                        3F            .byte	$3F
03673 0D33                        2D            .byte	$2D
03674 0D34                        3F            .byte	$3F
03675 0D35                        3F            .byte	$3F
03676 0D36                        2D            .byte	$2D
03677 0D37                        3A            .byte	$3A
03678 0D38                        3F            .byte	$3F
03679 0D39                        2D            .byte	$2D
03680 0D3A                        36            .byte	$36
03681 0D3B                        3F            .byte	$3F
03682 0D3C                        2D            .byte	$2D
03683 0D3D                        31            .byte	$31
03684                                           ! 687   0x3f,0x2d,0x2d, 0x3f,0x31,0x2d, 0x3f,0x36,0x2d, 0x3f,0x3a,0x2d, 0x3f,0x3f,0x2d, 0x3a,0x3f,0x2d, 0x36,0x3f,0x2d, 0x31,0x3f,0x2d,
03685 0D3E                        3F            .byte	$3F
03686 0D3F                        2D            .byte	$2D
03687 0D40                        2D            .byte	$2D
03688 0D41                        3F            .byte	$3F
03689 0D42                        31            .byte	$31
03690 0D43                        2D            .byte	$2D
03691 0D44                        3F            .byte	$3F
03692 0D45                        36            .byte	$36
03693 0D46                        2D            .byte	$2D
03694 0D47                        3F            .byte	$3F
03695 0D48                        3A            .byte	$3A
03696 0D49                        2D            .byte	$2D
03697 0D4A                        3F            .byte	$3F
03698 0D4B                        3F            .byte	$3F
03699 0D4C                        2D            .byte	$2D
03700 0D4D                        3A            .byte	$3A
03701 0D4E                        3F            .byte	$3F
03702 0D4F                        2D            .byte	$2D
03703 0D50                        36            .byte	$36
03704 0D51                        3F            .byte	$3F
03705 0D52                        2D            .byte	$2D
03706 0D53                        31            .byte	$31
03707 0D54                        3F            .byte	$3F
03708 0D55                        2D            .byte	$2D
03709                                           ! 688   0x2d,0x3f,0x2d, 0x2d,0x3f,0x31, 0x2d,0x3f,0x36, 0x2d,0x3f,0x3a, 0x2d,0x3f,0x3f, 0x2d,0x3a,0x3f, 0x2d,0x36,0x3f, 0x2d,0x31,0x3f,
03710 0D56                        2D            .byte	$2D
03711 0D57                        3F            .byte	$3F
03712 0D58                        2D            .byte	$2D
03713 0D59                        2D            .byte	$2D
03714 0D5A                        3F            .byte	$3F
03715 0D5B                        31            .byte	$31
03716 0D5C                        2D            .byte	$2D
03717 0D5D                        3F            .byte	$3F
03718 0D5E                        36            .byte	$36
03719 0D5F                        2D            .byte	$2D
03720 0D60                        3F            .byte	$3F
03721 0D61                        3A            .byte	$3A
03722 0D62                        2D            .byte	$2D
03723 0D63                        3F            .byte	$3F
03724 0D64                        3F            .byte	$3F
03725 0D65                        2D            .byte	$2D
03726 0D66                        3A            .byte	$3A
03727 0D67                        3F            .byte	$3F
03728 0D68                        2D            .byte	$2D
03729 0D69                        36            .byte	$36
03730 0D6A                        3F            .byte	$3F
03731 0D6B                        2D            .byte	$2D
03732 0D6C                        31            .byte	$31
03733 0D6D                        3F            .byte	$3F
03734                                           ! 689   0x00,0x00,0x1c, 0x07,0x00,0x1c, 0x0e,0x00,0x1c, 0x15,0x00,0x1c, 0x1c,0x00,0x1c, 0x1c,0x00,0x15, 0x1c,0x00,0x0e, 0x1c,0x00,0x07,
03735 0D6E                        00            .byte	0
03736 0D6F                        00            .byte	0
03737 0D70                        1C            .byte	$1C
03738 0D71                        07            .byte	7
03739 0D72                        00            .byte	0
03740 0D73                        1C            .byte	$1C
03741 0D74                        0E            .byte	$E
03742 0D75                        00            .byte	0
03743 0D76                        1C            .byte	$1C
03744 0D77                        15            .byte	$15
03745 0D78                        00            .byte	0
03746 0D79                        1C            .byte	$1C
03747 0D7A                        1C            .byte	$1C
03748 0D7B                        00            .byte	0
03749 0D7C                        1C            .byte	$1C
03750 0D7D                        1C            .byte	$1C
03751 0D7E                        00            .byte	0
03752 0D7F                        15            .byte	$15
03753 0D80                        1C            .byte	$1C
03754 0D81                        00            .byte	0
03755 0D82                        0E            .byte	$E
03756 0D83                        1C            .byte	$1C
03757 0D84                        00            .byte	0
03758 0D85                        07            .byte	7
03759                                           ! 690   0x1c,0x00,0x00, 0x1c,0x07,0x00, 0x1c,0x0e,0x00, 0x1c,0x15,0x00, 0x1c,0x1c,0x00, 0x15,0x1c,0x00, 0x0e,0x1c,0x00, 0x07,0x1c,0x00,
03760 0D86                        1C            .byte	$1C
03761 0D87                        00            .byte	0
03762 0D88                        00            .byte	0
03763 0D89                        1C            .byte	$1C
03764 0D8A                        07            .byte	7
03765 0D8B                        00            .byte	0
03766 0D8C                        1C            .byte	$1C
03767 0D8D                        0E            .byte	$E
03768 0D8E                        00            .byte	0
03769 0D8F                        1C            .byte	$1C
03770 0D90                        15            .byte	$15
03771 0D91                        00            .byte	0
03772 0D92                        1C            .byte	$1C
03773 0D93                        1C            .byte	$1C
03774 0D94                        00            .byte	0
03775 0D95                        15            .byte	$15
03776 0D96                        1C            .byte	$1C
03777 0D97                        00            .byte	0
03778 0D98                        0E            .byte	$E
03779 0D99                        1C            .byte	$1C
03780 0D9A                        00            .byte	0
03781 0D9B                        07            .byte	7
03782 0D9C                        1C            .byte	$1C
03783 0D9D                        00            .byte	0
03784                                           ! 691   0x00,0x1c,0x00, 0x00,0x1c,0x07, 0x00,0x1c,0x0e, 0x00,0x1c,0x15, 0x00,0x1c,0x1c, 0x00,0x15,0x1c, 0x00,0x0e,0x1c, 0x00,0x07,0x1c,
03785 0D9E                        00            .byte	0
03786 0D9F                        1C            .byte	$1C
03787 0DA0                        00            .byte	0
03788 0DA1                        00            .byte	0
03789 0DA2                        1C            .byte	$1C
03790 0DA3                        07            .byte	7
03791 0DA4                        00            .byte	0
03792 0DA5                        1C            .byte	$1C
03793 0DA6                        0E            .byte	$E
03794 0DA7                        00            .byte	0
03795 0DA8                        1C            .byte	$1C
03796 0DA9                        15            .byte	$15
03797 0DAA                        00            .byte	0
03798 0DAB                        1C            .byte	$1C
03799 0DAC                        1C            .byte	$1C
03800 0DAD                        00            .byte	0
03801 0DAE                        15            .byte	$15
03802 0DAF                        1C            .byte	$1C
03803 0DB0                        00            .byte	0
03804 0DB1                        0E            .byte	$E
03805 0DB2                        1C            .byte	$1C
03806 0DB3                        00            .byte	0
03807 0DB4                        07            .byte	7
03808 0DB5                        1C            .byte	$1C
03809                                           ! 692   0x0e,0x0e,0x1c, 0x11,0x0e,0x1c, 0x15,0x0e,0x1c, 0x18,0x0e,0x1c, 0x1c,0x0e,0x1c, 0x1c,0x0e,0x18, 0x1c,0x0e,0x15, 0x1c,0x0e,0x11,
03810 0DB6                        0E            .byte	$E
03811 0DB7                        0E            .byte	$E
03812 0DB8                        1C            .byte	$1C
03813 0DB9                        11            .byte	$11
03814 0DBA                        0E            .byte	$E
03815 0DBB                        1C            .byte	$1C
03816 0DBC                        15            .byte	$15
03817 0DBD                        0E            .byte	$E
03818 0DBE                        1C            .byte	$1C
03819 0DBF                        18            .byte	$18
03820 0DC0                        0E            .byte	$E
03821 0DC1                        1C            .byte	$1C
03822 0DC2                        1C            .byte	$1C
03823 0DC3                        0E            .byte	$E
03824 0DC4                        1C            .byte	$1C
03825 0DC5                        1C            .byte	$1C
03826 0DC6                        0E            .byte	$E
03827 0DC7                        18            .byte	$18
03828 0DC8                        1C            .byte	$1C
03829 0DC9                        0E            .byte	$E
03830 0DCA                        15            .byte	$15
03831 0DCB                        1C            .byte	$1C
03832 0DCC                        0E            .byte	$E
03833 0DCD                        11            .byte	$11
03834                                           ! 693   0x1c,0x0e,0x0e, 0x1c,0x11,0x0e, 0x1c,0x15,0x0e, 0x1c,0x18,0x0e, 0x1c,0x1c,0x0e, 0x18,0x1c,0x0e, 0x15,0x1c,0x0e, 0x11,0x1c,0x0e,
03835 0DCE                        1C            .byte	$1C
03836 0DCF                        0E            .byte	$E
03837 0DD0                        0E            .byte	$E
03838 0DD1                        1C            .byte	$1C
03839 0DD2                        11            .byte	$11
03840 0DD3                        0E            .byte	$E
03841 0DD4                        1C            .byte	$1C
03842 0DD5                        15            .byte	$15
03843 0DD6                        0E            .byte	$E
03844 0DD7                        1C            .byte	$1C
03845 0DD8                        18            .byte	$18
03846 0DD9                        0E            .byte	$E
03847 0DDA                        1C            .byte	$1C
03848 0DDB                        1C            .byte	$1C
03849 0DDC                        0E            .byte	$E
03850 0DDD                        18            .byte	$18
03851 0DDE                        1C            .byte	$1C
03852 0DDF                        0E            .byte	$E
03853 0DE0                        15            .byte	$15
03854 0DE1                        1C            .byte	$1C
03855 0DE2                        0E            .byte	$E
03856 0DE3                        11            .byte	$11
03857 0DE4                        1C            .byte	$1C
03858 0DE5                        0E            .byte	$E
03859                                           ! 694   0x0e,0x1c,0x0e, 0x0e,0x1c,0x11, 0x0e,0x1c,0x15, 0x0e,0x1c,0x18, 0x0e,0x1c,0x1c, 0x0e,0x18,0x1c, 0x0e,0x15,0x1c, 0x0e,0x11,0x1c,
03860 0DE6                        0E            .byte	$E
03861 0DE7                        1C            .byte	$1C
03862 0DE8                        0E            .byte	$E
03863 0DE9                        0E            .byte	$E
03864 0DEA                        1C            .byte	$1C
03865 0DEB                        11            .byte	$11
03866 0DEC                        0E            .byte	$E
03867 0DED                        1C            .byte	$1C
03868 0DEE                        15            .byte	$15
03869 0DEF                        0E            .byte	$E
03870 0DF0                        1C            .byte	$1C
03871 0DF1                        18            .byte	$18
03872 0DF2                        0E            .byte	$E
03873 0DF3                        1C            .byte	$1C
03874 0DF4                        1C            .byte	$1C
03875 0DF5                        0E            .byte	$E
03876 0DF6                        18            .byte	$18
03877 0DF7                        1C            .byte	$1C
03878 0DF8                        0E            .byte	$E
03879 0DF9                        15            .byte	$15
03880 0DFA                        1C            .byte	$1C
03881 0DFB                        0E            .byte	$E
03882 0DFC                        11            .byte	$11
03883 0DFD                        1C            .byte	$1C
03884                                           ! 695   0x14,0x14,0x1c, 0x16,0x14,0x1c, 0x18,0x14,0x1c, 0x1a,0x14,0x1c, 0x1c,0x14,0x1c, 0x1c,0x14,0x1a, 0x1c,0x14,0x18, 0x1c,0x14,0x16,
03885 0DFE                        14            .byte	$14
03886 0DFF                        14            .byte	$14
03887 0E00                        1C            .byte	$1C
03888 0E01                        16            .byte	$16
03889 0E02                        14            .byte	$14
03890 0E03                        1C            .byte	$1C
03891 0E04                        18            .byte	$18
03892 0E05                        14            .byte	$14
03893 0E06                        1C            .byte	$1C
03894 0E07                        1A            .byte	$1A
03895 0E08                        14            .byte	$14
03896 0E09                        1C            .byte	$1C
03897 0E0A                        1C            .byte	$1C
03898 0E0B                        14            .byte	$14
03899 0E0C                        1C            .byte	$1C
03900 0E0D                        1C            .byte	$1C
03901 0E0E                        14            .byte	$14
03902 0E0F                        1A            .byte	$1A
03903 0E10                        1C            .byte	$1C
03904 0E11                        14            .byte	$14
03905 0E12                        18            .byte	$18
03906 0E13                        1C            .byte	$1C
03907 0E14                        14            .byte	$14
03908 0E15                        16            .byte	$16
03909                                           ! 696   0x1c,0x14,0x14, 0x1c,0x16,0x14, 0x1c,0x18,0x14, 0x1c,0x1a,0x14, 0x1c,0x1c,0x14, 0x1a,0x1c,0x14, 0x18,0x1c,0x14, 0x16,0x1c,0x14,
03910 0E16                        1C            .byte	$1C
03911 0E17                        14            .byte	$14
03912 0E18                        14            .byte	$14
03913 0E19                        1C            .byte	$1C
03914 0E1A                        16            .byte	$16
03915 0E1B                        14            .byte	$14
03916 0E1C                        1C            .byte	$1C
03917 0E1D                        18            .byte	$18
03918 0E1E                        14            .byte	$14
03919 0E1F                        1C            .byte	$1C
03920 0E20                        1A            .byte	$1A
03921 0E21                        14            .byte	$14
03922 0E22                        1C            .byte	$1C
03923 0E23                        1C            .byte	$1C
03924 0E24                        14            .byte	$14
03925 0E25                        1A            .byte	$1A
03926 0E26                        1C            .byte	$1C
03927 0E27                        14            .byte	$14
03928 0E28                        18            .byte	$18
03929 0E29                        1C            .byte	$1C
03930 0E2A                        14            .byte	$14
03931 0E2B                        16            .byte	$16
03932 0E2C                        1C            .byte	$1C
03933 0E2D                        14            .byte	$14
03934                                           ! 697   0x14,0x
03935 0E2E                        14            .byte	$14
03936                                           ! 697 1c,0x14, 0x14,0x1c,0x16, 0x14,0x1c,0x18, 0x14,0x1c,0x1a, 0x14,0x1c,0x1c, 0x14,0x1a,0x1c, 0x14,0x18,0x1c, 0x14,0x16,0x1c,
03937 0E2F                        1C            .byte	$1C
03938 0E30                        14            .byte	$14
03939 0E31                        14            .byte	$14
03940 0E32                        1C            .byte	$1C
03941 0E33                        16            .byte	$16
03942 0E34                        14            .byte	$14
03943 0E35                        1C            .byte	$1C
03944 0E36                        18            .byte	$18
03945 0E37                        14            .byte	$14
03946 0E38                        1C            .byte	$1C
03947 0E39                        1A            .byte	$1A
03948 0E3A                        14            .byte	$14
03949 0E3B                        1C            .byte	$1C
03950 0E3C                        1C            .byte	$1C
03951 0E3D                        14            .byte	$14
03952 0E3E                        1A            .byte	$1A
03953 0E3F                        1C            .byte	$1C
03954 0E40                        14            .byte	$14
03955 0E41                        18            .byte	$18
03956 0E42                        1C            .byte	$1C
03957 0E43                        14            .byte	$14
03958 0E44                        16            .byte	$16
03959 0E45                        1C            .byte	$1C
03960                                           ! 698   0x00,0x00,0x10, 0x04,0x00,0x10, 0x08,0x00,0x10, 0x0c,0x00,0x10, 0x10,0x00,0x10, 0x10,0x00,0x0c, 0x10,0x00,0x08, 0x10,0x00,0x04,
03961 0E46                        00            .byte	0
03962 0E47                        00            .byte	0
03963 0E48                        10            .byte	$10
03964 0E49                        04            .byte	4
03965 0E4A                        00            .byte	0
03966 0E4B                        10            .byte	$10
03967 0E4C                        08            .byte	8
03968 0E4D                        00            .byte	0
03969 0E4E                        10            .byte	$10
03970 0E4F                        0C            .byte	$C
03971 0E50                        00            .byte	0
03972 0E51                        10            .byte	$10
03973 0E52                        10            .byte	$10
03974 0E53                        00            .byte	0
03975 0E54                        10            .byte	$10
03976 0E55                        10            .byte	$10
03977 0E56                        00            .byte	0
03978 0E57                        0C            .byte	$C
03979 0E58                        10            .byte	$10
03980 0E59                        00            .byte	0
03981 0E5A                        08            .byte	8
03982 0E5B                        10            .byte	$10
03983 0E5C                        00            .byte	0
03984 0E5D                        04            .byte	4
03985                                           ! 699   0x10,0x00,0x00, 0x10,0x04,0x00, 0x10,0x08,0x00, 0x10,0x0c,0x00, 0x10,0x10,0x00, 0x0c,0x10,0x00, 0x08,0x10,0x00, 0x04,0x10,0x00,
03986 0E5E                        10            .byte	$10
03987 0E5F                        00            .byte	0
03988 0E60                        00            .byte	0
03989 0E61                        10            .byte	$10
03990 0E62                        04            .byte	4
03991 0E63                        00            .byte	0
03992 0E64                        10            .byte	$10
03993 0E65                        08            .byte	8
03994 0E66                        00            .byte	0
03995 0E67                        10            .byte	$10
03996 0E68                        0C            .byte	$C
03997 0E69                        00            .byte	0
03998 0E6A                        10            .byte	$10
03999 0E6B                        10            .byte	$10
04000 0E6C                        00            .byte	0
04001 0E6D                        0C            .byte	$C
04002 0E6E                        10            .byte	$10
04003 0E6F                        00            .byte	0
04004 0E70                        08            .byte	8
04005 0E71                        10            .byte	$10
04006 0E72                        00            .byte	0
04007 0E73                        04            .byte	4
04008 0E74                        10            .byte	$10
04009 0E75                        00            .byte	0
04010                                           ! 700   0x00,0x10,0x00, 0x00,0x10,0x04, 0x00,0x10,0x08, 0x00,0x10,0x0c, 0x00,0x10,0x10, 0x00,0x0c,0x10, 0x00,0x08,0x10, 0x00,0x04,0x10,
04011 0E76                        00            .byte	0
04012 0E77                        10            .byte	$10
04013 0E78                        00            .byte	0
04014 0E79                        00            .byte	0
04015 0E7A                        10            .byte	$10
04016 0E7B                        04            .byte	4
04017 0E7C                        00            .byte	0
04018 0E7D                        10            .byte	$10
04019 0E7E                        08            .byte	8
04020 0E7F                        00            .byte	0
04021 0E80                        10            .byte	$10
04022 0E81                        0C            .byte	$C
04023 0E82                        00            .byte	0
04024 0E83                        10            .byte	$10
04025 0E84                        10            .byte	$10
04026 0E85                        00            .byte	0
04027 0E86                        0C            .byte	$C
04028 0E87                        10            .byte	$10
04029 0E88                        00            .byte	0
04030 0E89                        08            .byte	8
04031 0E8A                        10            .byte	$10
04032 0E8B                        00            .byte	0
04033 0E8C                        04            .byte	4
04034 0E8D                        10            .byte	$10
04035                                           ! 701   0x08,0x08,0x10, 0x0a,0x08,0x10, 0x0c,0x08,0x10, 0x0e,0x08,0x10, 0x10,0x08,0x10, 0x10,0x08,0x0e, 0x10,0x08,0x0c, 0x10,0x08,0x0a,
04036 0E8E                        08            .byte	8
04037 0E8F                        08            .byte	8
04038 0E90                        10            .byte	$10
04039 0E91                        0A            .byte	$A
04040 0E92                        08            .byte	8
04041 0E93                        10            .byte	$10
04042 0E94                        0C            .byte	$C
04043 0E95                        08            .byte	8
04044 0E96                        10            .byte	$10
04045 0E97                        0E            .byte	$E
04046 0E98                        08            .byte	8
04047 0E99                        10            .byte	$10
04048 0E9A                        10            .byte	$10
04049 0E9B                        08            .byte	8
04050 0E9C                        10            .byte	$10
04051 0E9D                        10            .byte	$10
04052 0E9E                        08            .byte	8
04053 0E9F                        0E            .byte	$E
04054 0EA0                        10            .byte	$10
04055 0EA1                        08            .byte	8
04056 0EA2                        0C            .byte	$C
04057 0EA3                        10            .byte	$10
04058 0EA4                        08            .byte	8
04059 0EA5                        0A            .byte	$A
04060                                           ! 702   0x10,0x08,0x08, 0x10,0x0a,0x08, 0x10,0x0c,0x08, 0x10,0x0e,0x08, 0x10,0x10,0x08, 0x0e,0x10,0x08, 0x0c,0x10,0x08, 0x0a,0x10,0x08,
04061 0EA6                        10            .byte	$10
04062 0EA7                        08            .byte	8
04063 0EA8                        08            .byte	8
04064 0EA9                        10            .byte	$10
04065 0EAA                        0A            .byte	$A
04066 0EAB                        08            .byte	8
04067 0EAC                        10            .byte	$10
04068 0EAD                        0C            .byte	$C
04069 0EAE                        08            .byte	8
04070 0EAF                        10            .byte	$10
04071 0EB0                        0E            .byte	$E
04072 0EB1                        08            .byte	8
04073 0EB2                        10            .byte	$10
04074 0EB3                        10            .byte	$10
04075 0EB4                        08            .byte	8
04076 0EB5                        0E            .byte	$E
04077 0EB6                        10            .byte	$10
04078 0EB7                        08            .byte	8
04079 0EB8                        0C            .byte	$C
04080 0EB9                        10            .byte	$10
04081 0EBA                        08            .byte	8
04082 0EBB                        0A            .byte	$A
04083 0EBC                        10            .byte	$10
04084 0EBD                        08            .byte	8
04085                                           ! 703   0x08,0x10,0x08, 0x08,0x10,0x0a, 0x08,0x10,0x0c, 0x08,0x10,0x0e, 0x08,0x10,0x10, 0x08,0x0e,0x10, 0x08,0x0c,0x10, 0x08,0x0a,0x10,
04086 0EBE                        08            .byte	8
04087 0EBF                        10            .byte	$10
04088 0EC0                        08            .byte	8
04089 0EC1                        08            .byte	8
04090 0EC2                        10            .byte	$10
04091 0EC3                        0A            .byte	$A
04092 0EC4                        08            .byte	8
04093 0EC5                        10            .byte	$10
04094 0EC6                        0C            .byte	$C
04095 0EC7                        08            .byte	8
04096 0EC8                        10            .byte	$10
04097 0EC9                        0E            .byte	$E
04098 0ECA                        08            .byte	8
04099 0ECB                        10            .byte	$10
04100 0ECC                        10            .byte	$10
04101 0ECD                        08            .byte	8
04102 0ECE                        0E            .byte	$E
04103 0ECF                        10            .byte	$10
04104 0ED0                        08            .byte	8
04105 0ED1                        0C            .byte	$C
04106 0ED2                        10            .byte	$10
04107 0ED3                        08            .byte	8
04108 0ED4                        0A            .byte	$A
04109 0ED5                        10            .byte	$10
04110                                           ! 704   0x0b,0x0b,0x10, 0x0c,0x0b,0x10, 0x0d,0x0b,0x10, 0x0f,0x0b,0x10, 0x10,0x0b,0x10, 0x10,0x0b,0x0f, 0x10,0x0b,0x0d, 0x10,0x0b,0x0c,
04111 0ED6                        0B            .byte	$B
04112 0ED7                        0B            .byte	$B
04113 0ED8                        10            .byte	$10
04114 0ED9                        0C            .byte	$C
04115 0EDA                        0B            .byte	$B
04116 0EDB                        10            .byte	$10
04117 0EDC                        0D            .byte	$D
04118 0EDD                        0B            .byte	$B
04119 0EDE                        10            .byte	$10
04120 0EDF                        0F            .byte	$F
04121 0EE0                        0B            .byte	$B
04122 0EE1                        10            .byte	$10
04123 0EE2                        10            .byte	$10
04124 0EE3                        0B            .byte	$B
04125 0EE4                        10            .byte	$10
04126 0EE5                        10            .byte	$10
04127 0EE6                        0B            .byte	$B
04128 0EE7                        0F            .byte	$F
04129 0EE8                        10            .byte	$10
04130 0EE9                        0B            .byte	$B
04131 0EEA                        0D            .byte	$D
04132 0EEB                        10            .byte	$10
04133 0EEC                        0B            .byte	$B
04134 0EED                        0C            .byte	$C
04135                                           ! 705   0x10,0x0b,0x0b, 0x10,0x0c,0x0b, 0x10,0x0d,0x0b, 0x10,0x0f,0x0b, 0x10,0x10,0x0b, 0x0f,0x10,0x0b, 0x0d,0x10,0x0b, 0x0c,0x10,0x0b,
04136 0EEE                        10            .byte	$10
04137 0EEF                        0B            .byte	$B
04138 0EF0                        0B            .byte	$B
04139 0EF1                        10            .byte	$10
04140 0EF2                        0C            .byte	$C
04141 0EF3                        0B            .byte	$B
04142 0EF4                        10            .byte	$10
04143 0EF5                        0D            .byte	$D
04144 0EF6                        0B            .byte	$B
04145 0EF7                        10            .byte	$10
04146 0EF8                        0F            .byte	$F
04147 0EF9                        0B            .byte	$B
04148 0EFA                        10            .byte	$10
04149 0EFB                        10            .byte	$10
04150 0EFC                        0B            .byte	$B
04151 0EFD                        0F            .byte	$F
04152 0EFE                        10            .byte	$10
04153 0EFF                        0B            .byte	$B
04154 0F00                        0D            .byte	$D
04155 0F01                        10            .byte	$10
04156 0F02                        0B            .byte	$B
04157 0F03                        0C            .byte	$C
04158 0F04                        10            .byte	$10
04159 0F05                        0B            .byte	$B
04160                                           ! 706   0x0b,0x10,0x0b, 0x0b,0x10,0x0c, 0x0b,0x10,0x0d, 0x0b,0x10,0x0f, 0x0b,0x10,0x10, 0x0b,0x0f,0x10, 0x0b,0x0d,0x10, 0x0b,0x0c,0x10,
04161 0F06                        0B            .byte	$B
04162 0F07                        10            .byte	$10
04163 0F08                        0B            .byte	$B
04164 0F09                        0B            .byte	$B
04165 0F0A                        10            .byte	$10
04166 0F0B                        0C            .byte	$C
04167 0F0C                        0B            .byte	$B
04168 0F0D                        10            .byte	$10
04169 0F0E                        0D            .byte	$D
04170 0F0F                        0B            .byte	$B
04171 0F10                        10            .byte	$10
04172 0F11                        0F            .byte	$F
04173 0F12                        0B            .byte	$B
04174 0F13                        10            .byte	$10
04175 0F14                        10            .byte	$10
04176 0F15                        0B            .byte	$B
04177 0F16                        0F            .byte	$F
04178 0F17                        10            .byte	$10
04179 0F18                        0B            .byte	$B
04180 0F19                        0D            .byte	$D
04181 0F1A                        10            .byte	$10
04182 0F1B                        0B            .byte	$B
04183 0F1C                        0C            .byte	$C
04184 0F1D                        10            .byte	$10
04185                                           ! 707   0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00, 0x00,0x00,0x00
04186 0F1E                        00            .byte	0
04187 0F1F                        00            .byte	0
04188 0F20                        00            .byte	0
04189 0F21                        00            .byte	0
04190 0F22                        00            .byte	0
04191 0F23                        00            .byte	0
04192 0F24                        00            .byte	0
04193 0F25                        00            .byte	0
04194 0F26                        00            .byte	0
04195 0F27                        00            .byte	0
04196 0F28                        00            .byte	0
04197 0F29                        00            .byte	0
04198 0F2A                        00            .byte	0
04199 0F2B                        00            .byte	0
04200 0F2C                        00            .byte	0
04201 0F2D                        00            .byte	0
04202 0F2E                        00            .byte	0
04203 0F2F                        00            .byte	0
04204 0F30                        00            .byte	0
04205 0F31                        00            .byte	0
04206 0F32                        00            .byte	0
04207 0F33                        00            .byte	0
04208 0F34                        00            .byte	0
04209                                           ! 708 };
04210 0F35                        00            .byte	0
04211                                           !BCC_EOS
04212                                           ! 709 static Bit8u static_functionality[0x10]=
04213                                           ! 710 {
04214                       00000F36            _static_functionality:
04215                                           ! 711          0xff,
04216 0F36                        FF            .byte	$FF
04217                                           ! 712          0xe0,
04218 0F37                        E0            .byte	$E0
04219                                           ! 713          0x0f,
04220 0F38                        0F            .byte	$F
04221                                           ! 714          0x00, 0x00, 0x00, 0x00,
04222 0F39                        00            .byte	0
04223 0F3A                        00            .byte	0
04224 0F3B                        00            .byte	0
04225 0F3C                        00            .byte	0
04226                                           ! 715          0x07,
04227 0F3D                        07            .byte	7
04228                                           ! 716          0x02,
04229 0F3E                        02            .byte	2
04230                                           ! 717          0x08,
04231 0F3F                        08            .byte	8
04232                                           ! 718          0xe7,
04233 0F40                        E7            .byte	$E7
04234                                           ! 719          0x0c,
04235 0F41                        0C            .byte	$C
04236                                           ! 720          0x00,
04237 0F42                        00            .byte	0
04238                                           ! 721          0x00,
04239 0F43                        00            .byte	0
04240                                           ! 722          0x00,
04241 0F44                        00            .byte	0
04242                                           ! 723          0x00
04243                                           ! 724 };
04244 0F45                        00            .byte	0
04245                                           !BCC_EOS
04246                                           ! 725 static Bit8u vgafont8[256*8]=
04247                                           ! 726 {
04248                       00000F46            _vgafont8:
04249                                           ! 727  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04250 0F46                        00            .byte	0
04251 0F47                        00            .byte	0
04252 0F48                        00            .byte	0
04253 0F49                        00            .byte	0
04254 0F4A                        00            .byte	0
04255 0F4B                        00            .byte	0
04256 0F4C                        00            .byte	0
04257 0F4D                        00            .byte	0
04258                                           ! 728  0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e,
04259 0F4E                        7E            .byte	$7E
04260 0F4F                        81            .byte	$81
04261 0F50                        A5            .byte	$A5
04262 0F51                        81            .byte	$81
04263 0F52                        BD            .byte	$BD
04264 0F53                        99            .byte	$99
04265 0F54                        81            .byte	$81
04266 0F55                        7E            .byte	$7E
04267                                           ! 729  0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e,
04268 0F56                        7E            .byte	$7E
04269 0F57                        FF            .byte	$FF
04270 0F58                        DB            .byte	$DB
04271 0F59                        FF            .byte	$FF
04272 0F5A                        C3            .byte	$C3
04273 0F5B                        E7            .byte	$E7
04274 0F5C                        FF            .byte	$FF
04275 0F5D                        7E            .byte	$7E
04276                                           ! 730  0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04277 0F5E                        6C            .byte	$6C
04278 0F5F                        FE            .byte	$FE
04279 0F60                        FE            .byte	$FE
04280 0F61                        FE            .byte	$FE
04281 0F62                        7C            .byte	$7C
04282 0F63                        38            .byte	$38
04283 0F64                        10            .byte	$10
04284 0F65                        00            .byte	0
04285                                           ! 731  0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00,
04286 0F66                        10            .byte	$10
04287 0F67                        38            .byte	$38
04288 0F68                        7C            .byte	$7C
04289 0F69                        FE            .byte	$FE
04290 0F6A                        7C            .byte	$7C
04291 0F6B                        38            .byte	$38
04292 0F6C                        10            .byte	$10
04293 0F6D                        00            .byte	0
04294                                           ! 732  0x38, 0x7c, 0x38, 0xfe, 0xfe, 0x7c, 0x38, 0x7c,
04295 0F6E                        38            .byte	$38
04296 0F6F                        7C            .byte	$7C
04297 0F70                        38            .byte	$38
04298 0F71                        FE            .byte	$FE
04299 0F72                        FE            .byte	$FE
04300 0F73                        7C            .byte	$7C
04301 0F74                        38            .byte	$38
04302 0F75                        7C            .byte	$7C
04303                                           ! 733  0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38
04304 0F76                        10            .byte	$10
04305 0F77                        10            .byte	$10
04306 0F78                        38            .byte	$38
04307 0F79                        7C            .byte	$7C
04308 0F7A                        FE            .byte	$FE
04309 0F7B                        7C            .byte	$7C
04310                                           ! 733 , 0x7c,
04311 0F7C                        38            .byte	$38
04312 0F7D                        7C            .byte	$7C
04313                                           ! 734  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00,
04314 0F7E                        00            .byte	0
04315 0F7F                        00            .byte	0
04316 0F80                        18            .byte	$18
04317 0F81                        3C            .byte	$3C
04318 0F82                        3C            .byte	$3C
04319 0F83                        18            .byte	$18
04320 0F84                        00            .byte	0
04321 0F85                        00            .byte	0
04322                                           ! 735  0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff,
04323 0F86                        FF            .byte	$FF
04324 0F87                        FF            .byte	$FF
04325 0F88                        E7            .byte	$E7
04326 0F89                        C3            .byte	$C3
04327 0F8A                        C3            .byte	$C3
04328 0F8B                        E7            .byte	$E7
04329 0F8C                        FF            .byte	$FF
04330 0F8D                        FF            .byte	$FF
04331                                           ! 736  0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00,
04332 0F8E                        00            .byte	0
04333 0F8F                        3C            .byte	$3C
04334 0F90                        66            .byte	$66
04335 0F91                        42            .byte	$42
04336 0F92                        42            .byte	$42
04337 0F93                        66            .byte	$66
04338 0F94                        3C            .byte	$3C
04339 0F95                        00            .byte	0
04340                                           ! 737  0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff,
04341 0F96                        FF            .byte	$FF
04342 0F97                        C3            .byte	$C3
04343 0F98                        99            .byte	$99
04344 0F99                        BD            .byte	$BD
04345 0F9A                        BD            .byte	$BD
04346 0F9B                        99            .byte	$99
04347 0F9C                        C3            .byte	$C3
04348 0F9D                        FF            .byte	$FF
04349                                           ! 738  0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78,
04350 0F9E                        0F            .byte	$F
04351 0F9F                        07            .byte	7
04352 0FA0                        0F            .byte	$F
04353 0FA1                        7D            .byte	$7D
04354 0FA2                        CC            .byte	$CC
04355 0FA3                        CC            .byte	$CC
04356 0FA4                        CC            .byte	$CC
04357 0FA5                        78            .byte	$78
04358                                           ! 739  0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18,
04359 0FA6                        3C            .byte	$3C
04360 0FA7                        66            .byte	$66
04361 0FA8                        66            .byte	$66
04362 0FA9                        66            .byte	$66
04363 0FAA                        3C            .byte	$3C
04364 0FAB                        18            .byte	$18
04365 0FAC                        7E            .byte	$7E
04366 0FAD                        18            .byte	$18
04367                                           ! 740  0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0,
04368 0FAE                        3F            .byte	$3F
04369 0FAF                        33            .byte	$33
04370 0FB0                        3F            .byte	$3F
04371 0FB1                        30            .byte	$30
04372 0FB2                        30            .byte	$30
04373 0FB3                        70            .byte	$70
04374 0FB4                        F0            .byte	$F0
04375 0FB5                        E0            .byte	$E0
04376                                           ! 741  0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0,
04377 0FB6                        7F            .byte	$7F
04378 0FB7                        63            .byte	$63
04379 0FB8                        7F            .byte	$7F
04380 0FB9                        63            .byte	$63
04381 0FBA                        63            .byte	$63
04382 0FBB                        67            .byte	$67
04383 0FBC                        E6            .byte	$E6
04384 0FBD                        C0            .byte	$C0
04385                                           ! 742  0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99,
04386 0FBE                        99            .byte	$99
04387 0FBF                        5A            .byte	$5A
04388 0FC0                        3C            .byte	$3C
04389 0FC1                        E7            .byte	$E7
04390 0FC2                        E7            .byte	$E7
04391 0FC3                        3C            .byte	$3C
04392 0FC4                        5A            .byte	$5A
04393 0FC5                        99            .byte	$99
04394                                           ! 743  0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00,
04395 0FC6                        80            .byte	$80
04396 0FC7                        E0            .byte	$E0
04397 0FC8                        F8            .byte	$F8
04398 0FC9                        FE            .byte	$FE
04399 0FCA                        F8            .byte	$F8
04400 0FCB                        E0            .byte	$E0
04401 0FCC                        80            .byte	$80
04402 0FCD                        00            .byte	0
04403                                           ! 744  0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00,
04404 0FCE                        02            .byte	2
04405 0FCF                        0E            .byte	$E
04406 0FD0                        3E            .byte	$3E
04407 0FD1                        FE            .byte	$FE
04408 0FD2                        3E            .byte	$3E
04409 0FD3                        0E            .byte	$E
04410 0FD4                        02            .byte	2
04411 0FD5                        00            .byte	0
04412                                           ! 745  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18,
04413 0FD6                        18            .byte	$18
04414 0FD7                        3C            .byte	$3C
04415 0FD8                        7E            .byte	$7E
04416 0FD9                        18            .byte	$18
04417 0FDA                        18            .byte	$18
04418 0FDB                        7E            .byte	$7E
04419 0FDC                        3C            .byte	$3C
04420 0FDD                        18            .byte	$18
04421                                           ! 746  0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
04422 0FDE                        66            .byte	$66
04423 0FDF                        66            .byte	$66
04424 0FE0                        66            .byte	$66
04425 0FE1                        66            .byte	$66
04426 0FE2                        66            .byte	$66
04427 0FE3                        00            .byte	0
04428 0FE4                        66            .byte	$66
04429 0FE5                        00            .byte	0
04430                                           ! 747  0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00,
04431 0FE6                        7F            .byte	$7F
04432 0FE7                        DB            .byte	$DB
04433 0FE8                        DB            .byte	$DB
04434 0FE9                        7B            .byte	$7B
04435 0FEA                        1B            .byte	$1B
04436 0FEB                        1B            .byte	$1B
04437 0FEC                        1B            .byte	$1B
04438 0FED                        00            .byte	0
04439                                           ! 748  0x3e, 0x63, 0x38, 0x6c, 0x6c, 0x38, 0xcc, 0x78,
04440 0FEE                        3E            .byte	$3E
04441 0FEF                        63            .byte	$63
04442 0FF0                        38            .byte	$38
04443 0FF1                        6C            .byte	$6C
04444 0FF2                        6C            .byte	$6C
04445 0FF3                        38            .byte	$38
04446 0FF4                        CC            .byte	$CC
04447 0FF5                        78            .byte	$78
04448                                           ! 749  0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00,
04449 0FF6                        00            .byte	0
04450 0FF7                        00            .byte	0
04451 0FF8                        00            .byte	0
04452 0FF9                        00            .byte	0
04453 0FFA                        7E            .byte	$7E
04454 0FFB                        7E            .byte	$7E
04455 0FFC                        7E            .byte	$7E
04456 0FFD                        00            .byte	0
04457                                           ! 750  0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff,
04458 0FFE                        18            .byte	$18
04459 0FFF                        3C            .byte	$3C
04460 1000                        7E            .byte	$7E
04461 1001                        18            .byte	$18
04462 1002                        7E            .byte	$7E
04463 1003                        3C            .byte	$3C
04464 1004                        18            .byte	$18
04465 1005                        FF            .byte	$FF
04466                                           ! 751  0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00,
04467 1006                        18            .byte	$18
04468 1007                        3C            .byte	$3C
04469 1008                        7E            .byte	$7E
04470 1009                        18            .byte	$18
04471 100A                        18            .byte	$18
04472 100B                        18            .byte	$18
04473 100C                        18            .byte	$18
04474 100D                        00            .byte	0
04475                                           ! 752  0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00,
04476 100E                        18            .byte	$18
04477 100F                        18            .byte	$18
04478 1010                        18            .byte	$18
04479 1011                        18            .byte	$18
04480 1012                        7E            .byte	$7E
04481 1013                        3C            .byte	$3C
04482 1014                        18            .byte	$18
04483 1015                        00            .byte	0
04484                                           ! 753  0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00,
04485 1016                        00            .byte	0
04486 1017                        18            .byte	$18
04487 1018                        0C            .byte	$C
04488 1019                        FE            .byte	$FE
04489 101A                        0C            .byte	$C
04490 101B                        18            .byte	$18
04491 101C                        00            .byte	0
04492 101D                        00            .byte	0
04493                                           ! 754  0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00,
04494 101E                        00            .byte	0
04495 101F                        30            .byte	$30
04496 1020                        60            .byte	$60
04497 1021                        FE            .byte	$FE
04498 1022                        60            .byte	$60
04499 1023                        30            .byte	$30
04500 1024                        00            .byte	0
04501 1025                        00            .byte	0
04502                                           ! 755  0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00,
04503 1026                        00            .byte	0
04504 1027                        00            .byte	0
04505 1028                        C0            .byte	$C0
04506 1029                        C0            .byte	$C0
04507 102A                        C0            .byte	$C0
04508 102B                        FE            .byte	$FE
04509 102C                        00            .byte	0
04510 102D                        00            .byte	0
04511                                           ! 756  0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00,
04512 102E                        00            .byte	0
04513 102F                        24            .byte	$24
04514 1030                        66            .byte	$66
04515 1031                        FF            .byte	$FF
04516 1032                        66            .byte	$66
04517 1033                        24            .byte	$24
04518 1034                        00            .byte	0
04519 1035                        00            .byte	0
04520                                           ! 757  0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00,
04521 1036                        00            .byte	0
04522 1037                        18            .byte	$18
04523 1038                        3C            .byte	$3C
04524 1039                        7E            .byte	$7E
04525 103A                        FF            .byte	$FF
04526 103B                        FF            .byte	$FF
04527 103C                        00            .byte	0
04528 103D                        00            .byte	0
04529                                           ! 758  0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00,
04530 103E                        00            .byte	0
04531 103F                        FF            .byte	$FF
04532 1040                        FF            .byte	$FF
04533 1041                        7E            .byte	$7E
04534 1042                        3C            .byte	$3C
04535 1043                        18            .byte	$18
04536 1044                        00            .byte	0
04537 1045                        00            .byte	0
04538                                           ! 759  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
04539 1046                        00            .byte	0
04540 1047                        00            .byte	0
04541 1048                        00            .byte	0
04542 1049                        00            .byte	0
04543 104A                        00            .byte	0
04544 104B                        00            .byte	0
04545 104C                        00            .byte	0
04546 104D                        00            .byte	0
04547                                           ! 760  0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
04548 104E                        30            .byte	$30
04549 104F                        78            .byte	$78
04550 1050                        78            .byte	$78
04551 1051                        30            .byte	$30
04552 1052                        30            .byte	$30
04553 1053                        00            .byte	0
04554 1054                        30            .byte	$30
04555 1055                        00            .byte	0
04556                                           ! 761  0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00,
04557 1056                        6C            .byte	$6C
04558 1057                        6C            .byte	$6C
04559 1058                        6C            .byte	$6C
04560 1059                        00            .byte	0
04561 105A                        00            .byte	0
04562 105B                        00            .byte	0
04563 105C                        00            .byte	0
04564 105D                        00            .byte	0
04565                                           ! 762  0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00,
04566 105E                        6C            .byte	$6C
04567 105F                        6C            .byte	$6C
04568 1060                        FE            .byte	$FE
04569 1061                        6C            .byte	$6C
04570 1062                        FE            .byte	$FE
04571 1063                        6C            .byte	$6C
04572 1064                        6C            .byte	$6C
04573 1065                        00            .byte	0
04574                                           ! 763  0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00,
04575 1066                        30            .byte	$30
04576 1067                        7C            .byte	$7C
04577 1068                        C0            .byte	$C0
04578 1069                        78            .byte	$78
04579 106A                        0C            .byte	$C
04580 106B                        F8            .byte	$F8
04581 106C                        30            .byte	$30
04582 106D                        00            .byte	0
04583                                           ! 764  0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
04584 106E                        00            .byte	0
04585 106F                        C6            .byte	$C6
04586 1070                        CC            .byte	$CC
04587 1071                        18            .byte	$18
04588 1072                        30            .byte	$30
04589 1073                        66            .byte	$66
04590 1074                        C6            .byte	$C6
04591 1075                        00            .byte	0
04592                                           ! 765  0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00,
04593 1076                        38            .byte	$38
04594 1077                        6C            .byte	$6C
04595 1078                        38            .byte	$38
04596 1079                        76            .byte	$76
04597 107A                        DC            .byte	$DC
04598 107B                        CC            .byte	$CC
04599 107C                        76            .byte	$76
04600 107D                        00            .byte	0
04601                                           ! 766  0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
04602 107E                        60            .byte	$60
04603 107F                        60            .byte	$60
04604 1080                        C0            .byte	$C0
04605 1081                        00            .byte	0
04606 1082                        00            .byte	0
04607 1083                        00            .byte	0
04608 1084                        00            .byte	0
04609 1085                        00            .byte	0
04610                                           ! 767  0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00,
04611 1086                        18            .byte	$18
04612 1087                        30            .byte	$30
04613 1088                        60            .byte	$60
04614 1089                        60            .byte	$60
04615 108A                        60            .byte	$60
04616 108B                        30            .byte	$30
04617 108C                        18            .byte	$18
04618 108D                        00            .byte	0
04619                                           ! 768  0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
04620 108E                        60            .byte	$60
04621 108F                        30            .byte	$30
04622 1090                        18            .byte	$18
04623 1091                        18            .byte	$18
04624 1092                        18            .byte	$18
04625 1093                        30            .byte	$30
04626 1094                        60            .byte	$60
04627 1095                        00            .byte	0
04628                                           ! 769  0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00,
04629 1096                        00            .byte	0
04630 1097                        66            .byte	$66
04631 1098                        3C            .byte	$3C
04632 1099                        FF            .byte	$FF
04633 109A                        3C            .byte	$3C
04634 109B                        66            .byte	$66
04635 109C                        00            .byte	0
04636 109D                        00            .byte	0
04637                                           ! 770  0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00,
04638 109E                        00            .byte	0
04639 109F                        30            .byte	$30
04640 10A0                        30            .byte	$30
04641 10A1                        FC            .byte	$FC
04642 10A2                        30            .byte	$30
04643 10A3                        30            .byte	$30
04644 10A4                        00            .byte	0
04645 10A5                        00            .byte	0
04646                                           ! 771  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60,
04647 10A6                        00            .byte	0
04648 10A7                        00            .byte	0
04649 10A8                        00            .byte	0
04650 10A9                        00            .byte	0
04651 10AA                        00            .byte	0
04652 10AB                        30            .byte	$30
04653 10AC                        30            .byte	$30
04654 10AD                        60            .byte	$60
04655                                           ! 772  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
04656 10AE                        00            .byte	0
04657 10AF                        00            .byte	0
04658 10B0                        00            .byte	0
04659 10B1                        FC            .byte	$FC
04660 10B2                        00            .byte	0
04661 10B3                        00            .byte	0
04662 10B4                        00            .byte	0
04663 10B5                        00            .byte	0
04664                                           ! 773  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00,
04665 10B6                        00            .byte	0
04666 10B7                        00            .byte	0
04667 10B8                        00            .byte	0
04668 10B9                        00            .byte	0
04669 10BA                        00            .byte	0
04670 10BB                        30            .byte	$30
04671 10BC                        30            .byte	$30
04672 10BD                        00            .byte	0
04673                                           ! 774  0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00,
04674 10BE                        06            .byte	6
04675 10BF                        0C            .byte	$C
04676 10C0                        18            .byte	$18
04677 10C1                        30            .byte	$30
04678 10C2                        60            .byte	$60
04679 10C3                        C0            .byte	$C0
04680 10C4                        80            .byte	$80
04681 10C5                        00            .byte	0
04682                                           ! 775  0x7c, 0xc6, 0xce, 0xde, 0xf6, 
04683 10C6                        7C            .byte	$7C
04684 10C7                        C6            .byte	$C6
04685 10C8                        CE            .byte	$CE
04686 10C9                        DE            .byte	$DE
04687 10CA                        F6            .byte	$F6
04688                                           ! 775 0xe6, 0x7c, 0x00,
04689 10CB                        E6            .byte	$E6
04690 10CC                        7C            .byte	$7C
04691 10CD                        00            .byte	0
04692                                           ! 776  0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00,
04693 10CE                        30            .byte	$30
04694 10CF                        70            .byte	$70
04695 10D0                        30            .byte	$30
04696 10D1                        30            .byte	$30
04697 10D2                        30            .byte	$30
04698 10D3                        30            .byte	$30
04699 10D4                        FC            .byte	$FC
04700 10D5                        00            .byte	0
04701                                           ! 777  0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00,
04702 10D6                        78            .byte	$78
04703 10D7                        CC            .byte	$CC
04704 10D8                        0C            .byte	$C
04705 10D9                        38            .byte	$38
04706 10DA                        60            .byte	$60
04707 10DB                        CC            .byte	$CC
04708 10DC                        FC            .byte	$FC
04709 10DD                        00            .byte	0
04710                                           ! 778  0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00,
04711 10DE                        78            .byte	$78
04712 10DF                        CC            .byte	$CC
04713 10E0                        0C            .byte	$C
04714 10E1                        38            .byte	$38
04715 10E2                        0C            .byte	$C
04716 10E3                        CC            .byte	$CC
04717 10E4                        78            .byte	$78
04718 10E5                        00            .byte	0
04719                                           ! 779  0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
04720 10E6                        1C            .byte	$1C
04721 10E7                        3C            .byte	$3C
04722 10E8                        6C            .byte	$6C
04723 10E9                        CC            .byte	$CC
04724 10EA                        FE            .byte	$FE
04725 10EB                        0C            .byte	$C
04726 10EC                        1E            .byte	$1E
04727 10ED                        00            .byte	0
04728                                           ! 780  0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00,
04729 10EE                        FC            .byte	$FC
04730 10EF                        C0            .byte	$C0
04731 10F0                        F8            .byte	$F8
04732 10F1                        0C            .byte	$C
04733 10F2                        0C            .byte	$C
04734 10F3                        CC            .byte	$CC
04735 10F4                        78            .byte	$78
04736 10F5                        00            .byte	0
04737                                           ! 781  0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00,
04738 10F6                        38            .byte	$38
04739 10F7                        60            .byte	$60
04740 10F8                        C0            .byte	$C0
04741 10F9                        F8            .byte	$F8
04742 10FA                        CC            .byte	$CC
04743 10FB                        CC            .byte	$CC
04744 10FC                        78            .byte	$78
04745 10FD                        00            .byte	0
04746                                           ! 782  0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
04747 10FE                        FC            .byte	$FC
04748 10FF                        CC            .byte	$CC
04749 1100                        0C            .byte	$C
04750 1101                        18            .byte	$18
04751 1102                        30            .byte	$30
04752 1103                        30            .byte	$30
04753 1104                        30            .byte	$30
04754 1105                        00            .byte	0
04755                                           ! 783  0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00,
04756 1106                        78            .byte	$78
04757 1107                        CC            .byte	$CC
04758 1108                        CC            .byte	$CC
04759 1109                        78            .byte	$78
04760 110A                        CC            .byte	$CC
04761 110B                        CC            .byte	$CC
04762 110C                        78            .byte	$78
04763 110D                        00            .byte	0
04764                                           ! 784  0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00,
04765 110E                        78            .byte	$78
04766 110F                        CC            .byte	$CC
04767 1110                        CC            .byte	$CC
04768 1111                        7C            .byte	$7C
04769 1112                        0C            .byte	$C
04770 1113                        18            .byte	$18
04771 1114                        70            .byte	$70
04772 1115                        00            .byte	0
04773                                           ! 785  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00,
04774 1116                        00            .byte	0
04775 1117                        30            .byte	$30
04776 1118                        30            .byte	$30
04777 1119                        00            .byte	0
04778 111A                        00            .byte	0
04779 111B                        30            .byte	$30
04780 111C                        30            .byte	$30
04781 111D                        00            .byte	0
04782                                           ! 786  0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
04783 111E                        00            .byte	0
04784 111F                        30            .byte	$30
04785 1120                        30            .byte	$30
04786 1121                        00            .byte	0
04787 1122                        00            .byte	0
04788 1123                        30            .byte	$30
04789 1124                        30            .byte	$30
04790 1125                        60            .byte	$60
04791                                           ! 787  0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00,
04792 1126                        18            .byte	$18
04793 1127                        30            .byte	$30
04794 1128                        60            .byte	$60
04795 1129                        C0            .byte	$C0
04796 112A                        60            .byte	$60
04797 112B                        30            .byte	$30
04798 112C                        18            .byte	$18
04799 112D                        00            .byte	0
04800                                           ! 788  0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00,
04801 112E                        00            .byte	0
04802 112F                        00            .byte	0
04803 1130                        FC            .byte	$FC
04804 1131                        00            .byte	0
04805 1132                        00            .byte	0
04806 1133                        FC            .byte	$FC
04807 1134                        00            .byte	0
04808 1135                        00            .byte	0
04809                                           ! 789  0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00,
04810 1136                        60            .byte	$60
04811 1137                        30            .byte	$30
04812 1138                        18            .byte	$18
04813 1139                        0C            .byte	$C
04814 113A                        18            .byte	$18
04815 113B                        30            .byte	$30
04816 113C                        60            .byte	$60
04817 113D                        00            .byte	0
04818                                           ! 790  0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00,
04819 113E                        78            .byte	$78
04820 113F                        CC            .byte	$CC
04821 1140                        0C            .byte	$C
04822 1141                        18            .byte	$18
04823 1142                        30            .byte	$30
04824 1143                        00            .byte	0
04825 1144                        30            .byte	$30
04826 1145                        00            .byte	0
04827                                           ! 791  0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
04828 1146                        7C            .byte	$7C
04829 1147                        C6            .byte	$C6
04830 1148                        DE            .byte	$DE
04831 1149                        DE            .byte	$DE
04832 114A                        DE            .byte	$DE
04833 114B                        C0            .byte	$C0
04834 114C                        78            .byte	$78
04835 114D                        00            .byte	0
04836                                           ! 792  0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00,
04837 114E                        30            .byte	$30
04838 114F                        78            .byte	$78
04839 1150                        CC            .byte	$CC
04840 1151                        CC            .byte	$CC
04841 1152                        FC            .byte	$FC
04842 1153                        CC            .byte	$CC
04843 1154                        CC            .byte	$CC
04844 1155                        00            .byte	0
04845                                           ! 793  0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00,
04846 1156                        FC            .byte	$FC
04847 1157                        66            .byte	$66
04848 1158                        66            .byte	$66
04849 1159                        7C            .byte	$7C
04850 115A                        66            .byte	$66
04851 115B                        66            .byte	$66
04852 115C                        FC            .byte	$FC
04853 115D                        00            .byte	0
04854                                           ! 794  0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
04855 115E                        3C            .byte	$3C
04856 115F                        66            .byte	$66
04857 1160                        C0            .byte	$C0
04858 1161                        C0            .byte	$C0
04859 1162                        C0            .byte	$C0
04860 1163                        66            .byte	$66
04861 1164                        3C            .byte	$3C
04862 1165                        00            .byte	0
04863                                           ! 795  0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00,
04864 1166                        F8            .byte	$F8
04865 1167                        6C            .byte	$6C
04866 1168                        66            .byte	$66
04867 1169                        66            .byte	$66
04868 116A                        66            .byte	$66
04869 116B                        6C            .byte	$6C
04870 116C                        F8            .byte	$F8
04871 116D                        00            .byte	0
04872                                           ! 796  0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00,
04873 116E                        FE            .byte	$FE
04874 116F                        62            .byte	$62
04875 1170                        68            .byte	$68
04876 1171                        78            .byte	$78
04877 1172                        68            .byte	$68
04878 1173                        62            .byte	$62
04879 1174                        FE            .byte	$FE
04880 1175                        00            .byte	0
04881                                           ! 797  0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
04882 1176                        FE            .byte	$FE
04883 1177                        62            .byte	$62
04884 1178                        68            .byte	$68
04885 1179                        78            .byte	$78
04886 117A                        68            .byte	$68
04887 117B                        60            .byte	$60
04888 117C                        F0            .byte	$F0
04889 117D                        00            .byte	0
04890                                           ! 798  0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00,
04891 117E                        3C            .byte	$3C
04892 117F                        66            .byte	$66
04893 1180                        C0            .byte	$C0
04894 1181                        C0            .byte	$C0
04895 1182                        CE            .byte	$CE
04896 1183                        66            .byte	$66
04897 1184                        3E            .byte	$3E
04898 1185                        00            .byte	0
04899                                           ! 799  0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00,
04900 1186                        CC            .byte	$CC
04901 1187                        CC            .byte	$CC
04902 1188                        CC            .byte	$CC
04903 1189                        FC            .byte	$FC
04904 118A                        CC            .byte	$CC
04905 118B                        CC            .byte	$CC
04906 118C                        CC            .byte	$CC
04907 118D                        00            .byte	0
04908                                           ! 800  0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
04909 118E                        78            .byte	$78
04910 118F                        30            .byte	$30
04911 1190                        30            .byte	$30
04912 1191                        30            .byte	$30
04913 1192                        30            .byte	$30
04914 1193                        30            .byte	$30
04915 1194                        78            .byte	$78
04916 1195                        00            .byte	0
04917                                           ! 801  0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00,
04918 1196                        1E            .byte	$1E
04919 1197                        0C            .byte	$C
04920 1198                        0C            .byte	$C
04921 1199                        0C            .byte	$C
04922 119A                        CC            .byte	$CC
04923 119B                        CC            .byte	$CC
04924 119C                        78            .byte	$78
04925 119D                        00            .byte	0
04926                                           ! 802  0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00,
04927 119E                        E6            .byte	$E6
04928 119F                        66            .byte	$66
04929 11A0                        6C            .byte	$6C
04930 11A1                        78            .byte	$78
04931 11A2                        6C            .byte	$6C
04932 11A3                        66            .byte	$66
04933 11A4                        E6            .byte	$E6
04934 11A5                        00            .byte	0
04935                                           ! 803  0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
04936 11A6                        F0            .byte	$F0
04937 11A7                        60            .byte	$60
04938 11A8                        60            .byte	$60
04939 11A9                        60            .byte	$60
04940 11AA                        62            .byte	$62
04941 11AB                        66            .byte	$66
04942 11AC                        FE            .byte	$FE
04943 11AD                        00            .byte	0
04944                                           ! 804  0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00,
04945 11AE                        C6            .byte	$C6
04946 11AF                        EE            .byte	$EE
04947 11B0                        FE            .byte	$FE
04948 11B1                        FE            .byte	$FE
04949 11B2                        D6            .byte	$D6
04950 11B3                        C6            .byte	$C6
04951 11B4                        C6            .byte	$C6
04952 11B5                        00            .byte	0
04953                                           ! 805  0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00,
04954 11B6                        C6            .byte	$C6
04955 11B7                        E6            .byte	$E6
04956 11B8                        F6            .byte	$F6
04957 11B9                        DE            .byte	$DE
04958 11BA                        CE            .byte	$CE
04959 11BB                        C6            .byte	$C6
04960 11BC                        C6            .byte	$C6
04961 11BD                        00            .byte	0
04962                                           ! 806  0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
04963 11BE                        38            .byte	$38
04964 11BF                        6C            .byte	$6C
04965 11C0                        C6            .byte	$C6
04966 11C1                        C6            .byte	$C6
04967 11C2                        C6            .byte	$C6
04968 11C3                        6C            .byte	$6C
04969 11C4                        38            .byte	$38
04970 11C5                        00            .byte	0
04971                                           ! 807  0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
04972 11C6                        FC            .byte	$FC
04973 11C7                        66            .byte	$66
04974 11C8                        66            .byte	$66
04975 11C9                        7C            .byte	$7C
04976 11CA                        60            .byte	$60
04977 11CB                        60            .byte	$60
04978 11CC                        F0            .byte	$F0
04979 11CD                        00            .byte	0
04980                                           ! 808  0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00,
04981 11CE                        78            .byte	$78
04982 11CF                        CC            .byte	$CC
04983 11D0                        CC            .byte	$CC
04984 11D1                        CC            .byte	$CC
04985 11D2                        DC            .byte	$DC
04986 11D3                        78            .byte	$78
04987 11D4                        1C            .byte	$1C
04988 11D5                        00            .byte	0
04989                                           ! 809  0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
04990 11D6                        FC            .byte	$FC
04991 11D7                        66            .byte	$66
04992 11D8                        66            .byte	$66
04993 11D9                        7C            .byte	$7C
04994 11DA                        6C            .byte	$6C
04995 11DB                        66            .byte	$66
04996 11DC                        E6            .byte	$E6
04997 11DD                        00            .byte	0
04998                                           ! 810  0x78, 0xcc, 0xe0, 0x70, 0x1c, 0xcc, 0x78, 0x00,
04999 11DE                        78            .byte	$78
05000 11DF                        CC            .byte	$CC
05001 11E0                        E0            .byte	$E0
05002 11E1                        70            .byte	$70
05003 11E2                        1C            .byte	$1C
05004 11E3                        CC            .byte	$CC
05005 11E4                        78            .byte	$78
05006 11E5                        00            .byte	0
05007                                           ! 811  0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05008 11E6                        FC            .byte	$FC
05009 11E7                        B4            .byte	$B4
05010 11E8                        30            .byte	$30
05011 11E9                        30            .byte	$30
05012 11EA                        30            .byte	$30
05013 11EB                        30            .byte	$30
05014 11EC                        78            .byte	$78
05015 11ED                        00            .byte	0
05016                                           ! 812  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00,
05017 11EE                        CC            .byte	$CC
05018 11EF                        CC            .byte	$CC
05019 11F0                        CC            .byte	$CC
05020 11F1                        CC            .byte	$CC
05021 11F2                        CC            .byte	$CC
05022 11F3                        CC            .byte	$CC
05023 11F4                        FC            .byte	$FC
05024 11F5                        00            .byte	0
05025                                           ! 813  0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05026 11F6                        CC            .byte	$CC
05027 11F7                        CC            .byte	$CC
05028 11F8                        CC            .byte	$CC
05029 11F9                        CC            .byte	$CC
05030 11FA                        CC            .byte	$CC
05031 11FB                        78            .byte	$78
05032 11FC                        30            .byte	$30
05033 11FD                        00            .byte	0
05034                                           ! 814  0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00,
05035 11FE                        C6            .byte	$C6
05036 11FF                        C6            .byte	$C6
05037 1200                        C6            .byte	$C6
05038 1201                        D6            .byte	$D6
05039 1202                        FE            .byte	$FE
05040 1203                        EE            .byte	$EE
05041 1204                        C6            .byte	$C6
05042 1205                        00            .byte	0
05043                                           ! 815  0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00,
05044 1206                        C6            .byte	$C6
05045 1207                        C6            .byte	$C6
05046 1208                        6C            .byte	$6C
05047 1209                        38            .byte	$38
05048 120A                        38            .byte	$38
05049 120B                        6C            .byte	$6C
05050 120C                        C6            .byte	$C6
05051 120D                        00            .byte	0
05052                                           ! 816  0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00,
05053 120E                        CC            .byte	$CC
05054 120F                        CC            .byte	$CC
05055 1210                        CC            .byte	$CC
05056 1211                        78            .byte	$78
05057 1212                        30            .byte	$30
05058 1213                        30            .byte	$30
05059 1214                        78            .byte	$78
05060 1215                        00            .byte	0
05061                                           ! 817  0xfe, 0xc6, 0x8c, 0x
05062 1216                        FE            .byte	$FE
05063 1217                        C6            .byte	$C6
05064 1218                        8C            .byte	$8C
05065                                           ! 817 18, 0x32, 0x66, 0xfe, 0x00,
05066 1219                        18            .byte	$18
05067 121A                        32            .byte	$32
05068 121B                        66            .byte	$66
05069 121C                        FE            .byte	$FE
05070 121D                        00            .byte	0
05071                                           ! 818  0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
05072 121E                        78            .byte	$78
05073 121F                        60            .byte	$60
05074 1220                        60            .byte	$60
05075 1221                        60            .byte	$60
05076 1222                        60            .byte	$60
05077 1223                        60            .byte	$60
05078 1224                        78            .byte	$78
05079 1225                        00            .byte	0
05080                                           ! 819  0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00,
05081 1226                        C0            .byte	$C0
05082 1227                        60            .byte	$60
05083 1228                        30            .byte	$30
05084 1229                        18            .byte	$18
05085 122A                        0C            .byte	$C
05086 122B                        06            .byte	6
05087 122C                        02            .byte	2
05088 122D                        00            .byte	0
05089                                           ! 820  0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
05090 122E                        78            .byte	$78
05091 122F                        18            .byte	$18
05092 1230                        18            .byte	$18
05093 1231                        18            .byte	$18
05094 1232                        18            .byte	$18
05095 1233                        18            .byte	$18
05096 1234                        78            .byte	$78
05097 1235                        00            .byte	0
05098                                           ! 821  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
05099 1236                        10            .byte	$10
05100 1237                        38            .byte	$38
05101 1238                        6C            .byte	$6C
05102 1239                        C6            .byte	$C6
05103 123A                        00            .byte	0
05104 123B                        00            .byte	0
05105 123C                        00            .byte	0
05106 123D                        00            .byte	0
05107                                           ! 822  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
05108 123E                        00            .byte	0
05109 123F                        00            .byte	0
05110 1240                        00            .byte	0
05111 1241                        00            .byte	0
05112 1242                        00            .byte	0
05113 1243                        00            .byte	0
05114 1244                        00            .byte	0
05115 1245                        FF            .byte	$FF
05116                                           ! 823  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
05117 1246                        30            .byte	$30
05118 1247                        30            .byte	$30
05119 1248                        18            .byte	$18
05120 1249                        00            .byte	0
05121 124A                        00            .byte	0
05122 124B                        00            .byte	0
05123 124C                        00            .byte	0
05124 124D                        00            .byte	0
05125                                           ! 824  0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
05126 124E                        00            .byte	0
05127 124F                        00            .byte	0
05128 1250                        78            .byte	$78
05129 1251                        0C            .byte	$C
05130 1252                        7C            .byte	$7C
05131 1253                        CC            .byte	$CC
05132 1254                        76            .byte	$76
05133 1255                        00            .byte	0
05134                                           ! 825  0xe0, 0x60, 0x60, 0x7c, 0x66, 0x66, 0xdc, 0x00,
05135 1256                        E0            .byte	$E0
05136 1257                        60            .byte	$60
05137 1258                        60            .byte	$60
05138 1259                        7C            .byte	$7C
05139 125A                        66            .byte	$66
05140 125B                        66            .byte	$66
05141 125C                        DC            .byte	$DC
05142 125D                        00            .byte	0
05143                                           ! 826  0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00,
05144 125E                        00            .byte	0
05145 125F                        00            .byte	0
05146 1260                        78            .byte	$78
05147 1261                        CC            .byte	$CC
05148 1262                        C0            .byte	$C0
05149 1263                        CC            .byte	$CC
05150 1264                        78            .byte	$78
05151 1265                        00            .byte	0
05152                                           ! 827  0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00,
05153 1266                        1C            .byte	$1C
05154 1267                        0C            .byte	$C
05155 1268                        0C            .byte	$C
05156 1269                        7C            .byte	$7C
05157 126A                        CC            .byte	$CC
05158 126B                        CC            .byte	$CC
05159 126C                        76            .byte	$76
05160 126D                        00            .byte	0
05161                                           ! 828  0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05162 126E                        00            .byte	0
05163 126F                        00            .byte	0
05164 1270                        78            .byte	$78
05165 1271                        CC            .byte	$CC
05166 1272                        FC            .byte	$FC
05167 1273                        C0            .byte	$C0
05168 1274                        78            .byte	$78
05169 1275                        00            .byte	0
05170                                           ! 829  0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00,
05171 1276                        38            .byte	$38
05172 1277                        6C            .byte	$6C
05173 1278                        60            .byte	$60
05174 1279                        F0            .byte	$F0
05175 127A                        60            .byte	$60
05176 127B                        60            .byte	$60
05177 127C                        F0            .byte	$F0
05178 127D                        00            .byte	0
05179                                           ! 830  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05180 127E                        00            .byte	0
05181 127F                        00            .byte	0
05182 1280                        76            .byte	$76
05183 1281                        CC            .byte	$CC
05184 1282                        CC            .byte	$CC
05185 1283                        7C            .byte	$7C
05186 1284                        0C            .byte	$C
05187 1285                        F8            .byte	$F8
05188                                           ! 831  0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00,
05189 1286                        E0            .byte	$E0
05190 1287                        60            .byte	$60
05191 1288                        6C            .byte	$6C
05192 1289                        76            .byte	$76
05193 128A                        66            .byte	$66
05194 128B                        66            .byte	$66
05195 128C                        E6            .byte	$E6
05196 128D                        00            .byte	0
05197                                           ! 832  0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05198 128E                        30            .byte	$30
05199 128F                        00            .byte	0
05200 1290                        70            .byte	$70
05201 1291                        30            .byte	$30
05202 1292                        30            .byte	$30
05203 1293                        30            .byte	$30
05204 1294                        78            .byte	$78
05205 1295                        00            .byte	0
05206                                           ! 833  0x0c, 0x00, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78,
05207 1296                        0C            .byte	$C
05208 1297                        00            .byte	0
05209 1298                        0C            .byte	$C
05210 1299                        0C            .byte	$C
05211 129A                        0C            .byte	$C
05212 129B                        CC            .byte	$CC
05213 129C                        CC            .byte	$CC
05214 129D                        78            .byte	$78
05215                                           ! 834  0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00,
05216 129E                        E0            .byte	$E0
05217 129F                        60            .byte	$60
05218 12A0                        66            .byte	$66
05219 12A1                        6C            .byte	$6C
05220 12A2                        78            .byte	$78
05221 12A3                        6C            .byte	$6C
05222 12A4                        E6            .byte	$E6
05223 12A5                        00            .byte	0
05224                                           ! 835  0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
05225 12A6                        70            .byte	$70
05226 12A7                        30            .byte	$30
05227 12A8                        30            .byte	$30
05228 12A9                        30            .byte	$30
05229 12AA                        30            .byte	$30
05230 12AB                        30            .byte	$30
05231 12AC                        78            .byte	$78
05232 12AD                        00            .byte	0
05233                                           ! 836  0x00, 0x00, 0xcc, 0xfe, 0xfe, 0xd6, 0xc6, 0x00,
05234 12AE                        00            .byte	0
05235 12AF                        00            .byte	0
05236 12B0                        CC            .byte	$CC
05237 12B1                        FE            .byte	$FE
05238 12B2                        FE            .byte	$FE
05239 12B3                        D6            .byte	$D6
05240 12B4                        C6            .byte	$C6
05241 12B5                        00            .byte	0
05242                                           ! 837  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
05243 12B6                        00            .byte	0
05244 12B7                        00            .byte	0
05245 12B8                        F8            .byte	$F8
05246 12B9                        CC            .byte	$CC
05247 12BA                        CC            .byte	$CC
05248 12BB                        CC            .byte	$CC
05249 12BC                        CC            .byte	$CC
05250 12BD                        00            .byte	0
05251                                           ! 838  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05252 12BE                        00            .byte	0
05253 12BF                        00            .byte	0
05254 12C0                        78            .byte	$78
05255 12C1                        CC            .byte	$CC
05256 12C2                        CC            .byte	$CC
05257 12C3                        CC            .byte	$CC
05258 12C4                        78            .byte	$78
05259 12C5                        00            .byte	0
05260                                           ! 839  0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
05261 12C6                        00            .byte	0
05262 12C7                        00            .byte	0
05263 12C8                        DC            .byte	$DC
05264 12C9                        66            .byte	$66
05265 12CA                        66            .byte	$66
05266 12CB                        7C            .byte	$7C
05267 12CC                        60            .byte	$60
05268 12CD                        F0            .byte	$F0
05269                                           ! 840  0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e,
05270 12CE                        00            .byte	0
05271 12CF                        00            .byte	0
05272 12D0                        76            .byte	$76
05273 12D1                        CC            .byte	$CC
05274 12D2                        CC            .byte	$CC
05275 12D3                        7C            .byte	$7C
05276 12D4                        0C            .byte	$C
05277 12D5                        1E            .byte	$1E
05278                                           ! 841  0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0xf0, 0x00,
05279 12D6                        00            .byte	0
05280 12D7                        00            .byte	0
05281 12D8                        DC            .byte	$DC
05282 12D9                        76            .byte	$76
05283 12DA                        66            .byte	$66
05284 12DB                        60            .byte	$60
05285 12DC                        F0            .byte	$F0
05286 12DD                        00            .byte	0
05287                                           ! 842  0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00,
05288 12DE                        00            .byte	0
05289 12DF                        00            .byte	0
05290 12E0                        7C            .byte	$7C
05291 12E1                        C0            .byte	$C0
05292 12E2                        78            .byte	$78
05293 12E3                        0C            .byte	$C
05294 12E4                        F8            .byte	$F8
05295 12E5                        00            .byte	0
05296                                           ! 843  0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00,
05297 12E6                        10            .byte	$10
05298 12E7                        30            .byte	$30
05299 12E8                        7C            .byte	$7C
05300 12E9                        30            .byte	$30
05301 12EA                        30            .byte	$30
05302 12EB                        34            .byte	$34
05303 12EC                        18            .byte	$18
05304 12ED                        00            .byte	0
05305                                           ! 844  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
05306 12EE                        00            .byte	0
05307 12EF                        00            .byte	0
05308 12F0                        CC            .byte	$CC
05309 12F1                        CC            .byte	$CC
05310 12F2                        CC            .byte	$CC
05311 12F3                        CC            .byte	$CC
05312 12F4                        76            .byte	$76
05313 12F5                        00            .byte	0
05314                                           ! 845  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00,
05315 12F6                        00            .byte	0
05316 12F7                        00            .byte	0
05317 12F8                        CC            .byte	$CC
05318 12F9                        CC            .byte	$CC
05319 12FA                        CC            .byte	$CC
05320 12FB                        78            .byte	$78
05321 12FC                        30            .byte	$30
05322 12FD                        00            .byte	0
05323                                           ! 846  0x00, 0x00, 0xc6, 0xd6, 0xfe, 0xfe, 0x6c, 0x00,
05324 12FE                        00            .byte	0
05325 12FF                        00            .byte	0
05326 1300                        C6            .byte	$C6
05327 1301                        D6            .byte	$D6
05328 1302                        FE            .byte	$FE
05329 1303                        FE            .byte	$FE
05330 1304                        6C            .byte	$6C
05331 1305                        00            .byte	0
05332                                           ! 847  0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00,
05333 1306                        00            .byte	0
05334 1307                        00            .byte	0
05335 1308                        C6            .byte	$C6
05336 1309                        6C            .byte	$6C
05337 130A                        38            .byte	$38
05338 130B                        6C            .byte	$6C
05339 130C                        C6            .byte	$C6
05340 130D                        00            .byte	0
05341                                           ! 848  0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05342 130E                        00            .byte	0
05343 130F                        00            .byte	0
05344 1310                        CC            .byte	$CC
05345 1311                        CC            .byte	$CC
05346 1312                        CC            .byte	$CC
05347 1313                        7C            .byte	$7C
05348 1314                        0C            .byte	$C
05349 1315                        F8            .byte	$F8
05350                                           ! 849  0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00,
05351 1316                        00            .byte	0
05352 1317                        00            .byte	0
05353 1318                        FC            .byte	$FC
05354 1319                        98            .byte	$98
05355 131A                        30            .byte	$30
05356 131B                        64            .byte	$64
05357 131C                        FC            .byte	$FC
05358 131D                        00            .byte	0
05359                                           ! 850  0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00,
05360 131E                        1C            .byte	$1C
05361 131F                        30            .byte	$30
05362 1320                        30            .byte	$30
05363 1321                        E0            .byte	$E0
05364 1322                        30            .byte	$30
05365 1323                        30            .byte	$30
05366 1324                        1C            .byte	$1C
05367 1325                        00            .byte	0
05368                                           ! 851  0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00,
05369 1326                        18            .byte	$18
05370 1327                        18            .byte	$18
05371 1328                        18            .byte	$18
05372 1329                        00            .byte	0
05373 132A                        18            .byte	$18
05374 132B                        18            .byte	$18
05375 132C                        18            .byte	$18
05376 132D                        00            .byte	0
05377                                           ! 852  0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00,
05378 132E                        E0            .byte	$E0
05379 132F                        30            .byte	$30
05380 1330                        30            .byte	$30
05381 1331                        1C            .byte	$1C
05382 1332                        30            .byte	$30
05383 1333                        30            .byte	$30
05384 1334                        E0            .byte	$E0
05385 1335                        00            .byte	0
05386                                           ! 853  0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
05387 1336                        76            .byte	$76
05388 1337                        DC            .byte	$DC
05389 1338                        00            .byte	0
05390 1339                        00            .byte	0
05391 133A                        00            .byte	0
05392 133B                        00            .byte	0
05393 133C                        00            .byte	0
05394 133D                        00            .byte	0
05395                                           ! 854  0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00,
05396 133E                        00            .byte	0
05397 133F                        10            .byte	$10
05398 1340                        38            .byte	$38
05399 1341                        6C            .byte	$6C
05400 1342                        C6            .byte	$C6
05401 1343                        C6            .byte	$C6
05402 1344                        FE            .byte	$FE
05403 1345                        00            .byte	0
05404                                           ! 855  0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78,
05405 1346                        78            .byte	$78
05406 1347                        CC            .byte	$CC
05407 1348                        C0            .byte	$C0
05408 1349                        CC            .byte	$CC
05409 134A                        78            .byte	$78
05410 134B                        18            .byte	$18
05411 134C                        0C            .byte	$C
05412 134D                        78            .byte	$78
05413                                           ! 856  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05414 134E                        00            .byte	0
05415 134F                        CC            .byte	$CC
05416 1350                        00            .byte	0
05417 1351                        CC            .byte	$CC
05418 1352                        CC            .byte	$CC
05419 1353                        CC            .byte	$CC
05420 1354                        7E            .byte	$7E
05421 1355                        00            .byte	0
05422                                           ! 857  0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05423 1356                        1C            .byte	$1C
05424 1357                        00            .byte	0
05425 1358                        78            .byte	$78
05426 1359                        CC            .byte	$CC
05427 135A                        FC            .byte	$FC
05428 135B                        C0            .byte	$C0
05429 135C                        78            .byte	$78
05430 135D                        00            .byte	0
05431                                           ! 858  0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00,
05432 135E                        7E            .byte	$7E
05433 135F                        C3            .byte	$C3
05434 1360                        3C            .byte	$3C
05435 1361                        06            .byte	6
05436 1362                        3E            .byte	$3E
05437 1363                        66            .byte	$66
05438 1364                        3F            .byte	$3F
05439 1365                        00            .byte	0
05440                                           ! 859  0xcc, 0x00
05441 1366                        CC            .byte	$CC
05442                                           ! 859 , 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05443 1367                        00            .byte	0
05444 1368                        78            .byte	$78
05445 1369                        0C            .byte	$C
05446 136A                        7C            .byte	$7C
05447 136B                        CC            .byte	$CC
05448 136C                        7E            .byte	$7E
05449 136D                        00            .byte	0
05450                                           ! 860  0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05451 136E                        E0            .byte	$E0
05452 136F                        00            .byte	0
05453 1370                        78            .byte	$78
05454 1371                        0C            .byte	$C
05455 1372                        7C            .byte	$7C
05456 1373                        CC            .byte	$CC
05457 1374                        7E            .byte	$7E
05458 1375                        00            .byte	0
05459                                           ! 861  0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05460 1376                        30            .byte	$30
05461 1377                        30            .byte	$30
05462 1378                        78            .byte	$78
05463 1379                        0C            .byte	$C
05464 137A                        7C            .byte	$7C
05465 137B                        CC            .byte	$CC
05466 137C                        7E            .byte	$7E
05467 137D                        00            .byte	0
05468                                           ! 862  0x00, 0x00, 0x78, 0xc0, 0xc0, 0x78, 0x0c, 0x38,
05469 137E                        00            .byte	0
05470 137F                        00            .byte	0
05471 1380                        78            .byte	$78
05472 1381                        C0            .byte	$C0
05473 1382                        C0            .byte	$C0
05474 1383                        78            .byte	$78
05475 1384                        0C            .byte	$C
05476 1385                        38            .byte	$38
05477                                           ! 863  0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00,
05478 1386                        7E            .byte	$7E
05479 1387                        C3            .byte	$C3
05480 1388                        3C            .byte	$3C
05481 1389                        66            .byte	$66
05482 138A                        7E            .byte	$7E
05483 138B                        60            .byte	$60
05484 138C                        3C            .byte	$3C
05485 138D                        00            .byte	0
05486                                           ! 864  0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05487 138E                        CC            .byte	$CC
05488 138F                        00            .byte	0
05489 1390                        78            .byte	$78
05490 1391                        CC            .byte	$CC
05491 1392                        FC            .byte	$FC
05492 1393                        C0            .byte	$C0
05493 1394                        78            .byte	$78
05494 1395                        00            .byte	0
05495                                           ! 865  0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00,
05496 1396                        E0            .byte	$E0
05497 1397                        00            .byte	0
05498 1398                        78            .byte	$78
05499 1399                        CC            .byte	$CC
05500 139A                        FC            .byte	$FC
05501 139B                        C0            .byte	$C0
05502 139C                        78            .byte	$78
05503 139D                        00            .byte	0
05504                                           ! 866  0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05505 139E                        CC            .byte	$CC
05506 139F                        00            .byte	0
05507 13A0                        70            .byte	$70
05508 13A1                        30            .byte	$30
05509 13A2                        30            .byte	$30
05510 13A3                        30            .byte	$30
05511 13A4                        78            .byte	$78
05512 13A5                        00            .byte	0
05513                                           ! 867  0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00,
05514 13A6                        7C            .byte	$7C
05515 13A7                        C6            .byte	$C6
05516 13A8                        38            .byte	$38
05517 13A9                        18            .byte	$18
05518 13AA                        18            .byte	$18
05519 13AB                        18            .byte	$18
05520 13AC                        3C            .byte	$3C
05521 13AD                        00            .byte	0
05522                                           ! 868  0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05523 13AE                        E0            .byte	$E0
05524 13AF                        00            .byte	0
05525 13B0                        70            .byte	$70
05526 13B1                        30            .byte	$30
05527 13B2                        30            .byte	$30
05528 13B3                        30            .byte	$30
05529 13B4                        78            .byte	$78
05530 13B5                        00            .byte	0
05531                                           ! 869  0xc6, 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0x00,
05532 13B6                        C6            .byte	$C6
05533 13B7                        38            .byte	$38
05534 13B8                        6C            .byte	$6C
05535 13B9                        C6            .byte	$C6
05536 13BA                        FE            .byte	$FE
05537 13BB                        C6            .byte	$C6
05538 13BC                        C6            .byte	$C6
05539 13BD                        00            .byte	0
05540                                           ! 870  0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00,
05541 13BE                        30            .byte	$30
05542 13BF                        30            .byte	$30
05543 13C0                        00            .byte	0
05544 13C1                        78            .byte	$78
05545 13C2                        CC            .byte	$CC
05546 13C3                        FC            .byte	$FC
05547 13C4                        CC            .byte	$CC
05548 13C5                        00            .byte	0
05549                                           ! 871  0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00,
05550 13C6                        1C            .byte	$1C
05551 13C7                        00            .byte	0
05552 13C8                        FC            .byte	$FC
05553 13C9                        60            .byte	$60
05554 13CA                        78            .byte	$78
05555 13CB                        60            .byte	$60
05556 13CC                        FC            .byte	$FC
05557 13CD                        00            .byte	0
05558                                           ! 872  0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00,
05559 13CE                        00            .byte	0
05560 13CF                        00            .byte	0
05561 13D0                        7F            .byte	$7F
05562 13D1                        0C            .byte	$C
05563 13D2                        7F            .byte	$7F
05564 13D3                        CC            .byte	$CC
05565 13D4                        7F            .byte	$7F
05566 13D5                        00            .byte	0
05567                                           ! 873  0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00,
05568 13D6                        3E            .byte	$3E
05569 13D7                        6C            .byte	$6C
05570 13D8                        CC            .byte	$CC
05571 13D9                        FE            .byte	$FE
05572 13DA                        CC            .byte	$CC
05573 13DB                        CC            .byte	$CC
05574 13DC                        CE            .byte	$CE
05575 13DD                        00            .byte	0
05576                                           ! 874  0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05577 13DE                        78            .byte	$78
05578 13DF                        CC            .byte	$CC
05579 13E0                        00            .byte	0
05580 13E1                        78            .byte	$78
05581 13E2                        CC            .byte	$CC
05582 13E3                        CC            .byte	$CC
05583 13E4                        78            .byte	$78
05584 13E5                        00            .byte	0
05585                                           ! 875  0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05586 13E6                        00            .byte	0
05587 13E7                        CC            .byte	$CC
05588 13E8                        00            .byte	0
05589 13E9                        78            .byte	$78
05590 13EA                        CC            .byte	$CC
05591 13EB                        CC            .byte	$CC
05592 13EC                        78            .byte	$78
05593 13ED                        00            .byte	0
05594                                           ! 876  0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05595 13EE                        00            .byte	0
05596 13EF                        E0            .byte	$E0
05597 13F0                        00            .byte	0
05598 13F1                        78            .byte	$78
05599 13F2                        CC            .byte	$CC
05600 13F3                        CC            .byte	$CC
05601 13F4                        78            .byte	$78
05602 13F5                        00            .byte	0
05603                                           ! 877  0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05604 13F6                        78            .byte	$78
05605 13F7                        CC            .byte	$CC
05606 13F8                        00            .byte	0
05607 13F9                        CC            .byte	$CC
05608 13FA                        CC            .byte	$CC
05609 13FB                        CC            .byte	$CC
05610 13FC                        7E            .byte	$7E
05611 13FD                        00            .byte	0
05612                                           ! 878  0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05613 13FE                        00            .byte	0
05614 13FF                        E0            .byte	$E0
05615 1400                        00            .byte	0
05616 1401                        CC            .byte	$CC
05617 1402                        CC            .byte	$CC
05618 1403                        CC            .byte	$CC
05619 1404                        7E            .byte	$7E
05620 1405                        00            .byte	0
05621                                           ! 879  0x00, 0xcc, 0x00, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
05622 1406                        00            .byte	0
05623 1407                        CC            .byte	$CC
05624 1408                        00            .byte	0
05625 1409                        CC            .byte	$CC
05626 140A                        CC            .byte	$CC
05627 140B                        7C            .byte	$7C
05628 140C                        0C            .byte	$C
05629 140D                        F8            .byte	$F8
05630                                           ! 880  0xc3, 0x18, 0x3c, 0x66, 0x66, 0x3c, 0x18, 0x00,
05631 140E                        C3            .byte	$C3
05632 140F                        18            .byte	$18
05633 1410                        3C            .byte	$3C
05634 1411                        66            .byte	$66
05635 1412                        66            .byte	$66
05636 1413                        3C            .byte	$3C
05637 1414                        18            .byte	$18
05638 1415                        00            .byte	0
05639                                           ! 881  0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00,
05640 1416                        CC            .byte	$CC
05641 1417                        00            .byte	0
05642 1418                        CC            .byte	$CC
05643 1419                        CC            .byte	$CC
05644 141A                        CC            .byte	$CC
05645 141B                        CC            .byte	$CC
05646 141C                        78            .byte	$78
05647 141D                        00            .byte	0
05648                                           ! 882  0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18,
05649 141E                        18            .byte	$18
05650 141F                        18            .byte	$18
05651 1420                        7E            .byte	$7E
05652 1421                        C0            .byte	$C0
05653 1422                        C0            .byte	$C0
05654 1423                        7E            .byte	$7E
05655 1424                        18            .byte	$18
05656 1425                        18            .byte	$18
05657                                           ! 883  0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00,
05658 1426                        38            .byte	$38
05659 1427                        6C            .byte	$6C
05660 1428                        64            .byte	$64
05661 1429                        F0            .byte	$F0
05662 142A                        60            .byte	$60
05663 142B                        E6            .byte	$E6
05664 142C                        FC            .byte	$FC
05665 142D                        00            .byte	0
05666                                           ! 884  0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x30,
05667 142E                        CC            .byte	$CC
05668 142F                        CC            .byte	$CC
05669 1430                        78            .byte	$78
05670 1431                        FC            .byte	$FC
05671 1432                        30            .byte	$30
05672 1433                        FC            .byte	$FC
05673 1434                        30            .byte	$30
05674 1435                        30            .byte	$30
05675                                           ! 885  0xf8, 0xcc, 0xcc, 0xfa, 0xc6, 0xcf, 0xc6, 0xc7,
05676 1436                        F8            .byte	$F8
05677 1437                        CC            .byte	$CC
05678 1438                        CC            .byte	$CC
05679 1439                        FA            .byte	$FA
05680 143A                        C6            .byte	$C6
05681 143B                        CF            .byte	$CF
05682 143C                        C6            .byte	$C6
05683 143D                        C7            .byte	$C7
05684                                           ! 886  0x0e, 0x1b, 0x18, 0x3c, 0x18, 0x18, 0xd8, 0x70,
05685 143E                        0E            .byte	$E
05686 143F                        1B            .byte	$1B
05687 1440                        18            .byte	$18
05688 1441                        3C            .byte	$3C
05689 1442                        18            .byte	$18
05690 1443                        18            .byte	$18
05691 1444                        D8            .byte	$D8
05692 1445                        70            .byte	$70
05693                                           ! 887  0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00,
05694 1446                        1C            .byte	$1C
05695 1447                        00            .byte	0
05696 1448                        78            .byte	$78
05697 1449                        0C            .byte	$C
05698 144A                        7C            .byte	$7C
05699 144B                        CC            .byte	$CC
05700 144C                        7E            .byte	$7E
05701 144D                        00            .byte	0
05702                                           ! 888  0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
05703 144E                        38            .byte	$38
05704 144F                        00            .byte	0
05705 1450                        70            .byte	$70
05706 1451                        30            .byte	$30
05707 1452                        30            .byte	$30
05708 1453                        30            .byte	$30
05709 1454                        78            .byte	$78
05710 1455                        00            .byte	0
05711                                           ! 889  0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00,
05712 1456                        00            .byte	0
05713 1457                        1C            .byte	$1C
05714 1458                        00            .byte	0
05715 1459                        78            .byte	$78
05716 145A                        CC            .byte	$CC
05717 145B                        CC            .byte	$CC
05718 145C                        78            .byte	$78
05719 145D                        00            .byte	0
05720                                           ! 890  0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00,
05721 145E                        00            .byte	0
05722 145F                        1C            .byte	$1C
05723 1460                        00            .byte	0
05724 1461                        CC            .byte	$CC
05725 1462                        CC            .byte	$CC
05726 1463                        CC            .byte	$CC
05727 1464                        7E            .byte	$7E
05728 1465                        00            .byte	0
05729                                           ! 891  0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00,
05730 1466                        00            .byte	0
05731 1467                        F8            .byte	$F8
05732 1468                        00            .byte	0
05733 1469                        F8            .byte	$F8
05734 146A                        CC            .byte	$CC
05735 146B                        CC            .byte	$CC
05736 146C                        CC            .byte	$CC
05737 146D                        00            .byte	0
05738                                           ! 892  0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00,
05739 146E                        FC            .byte	$FC
05740 146F                        00            .byte	0
05741 1470                        CC            .byte	$CC
05742 1471                        EC            .byte	$EC
05743 1472                        FC            .byte	$FC
05744 1473                        DC            .byte	$DC
05745 1474                        CC            .byte	$CC
05746 1475                        00            .byte	0
05747                                           ! 893  0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00,
05748 1476                        3C            .byte	$3C
05749 1477                        6C            .byte	$6C
05750 1478                        6C            .byte	$6C
05751 1479                        3E            .byte	$3E
05752 147A                        00            .byte	0
05753 147B                        7E            .byte	$7E
05754 147C                        00            .byte	0
05755 147D                        00            .byte	0
05756                                           ! 894  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00,
05757 147E                        38            .byte	$38
05758 147F                        6C            .byte	$6C
05759 1480                        6C            .byte	$6C
05760 1481                        38            .byte	$38
05761 1482                        00            .byte	0
05762 1483                        7C            .byte	$7C
05763 1484                        00            .byte	0
05764 1485                        00            .byte	0
05765                                           ! 895  0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00,
05766 1486                        30            .byte	$30
05767 1487                        00            .byte	0
05768 1488                        30            .byte	$30
05769 1489                        60            .byte	$60
05770 148A                        C0            .byte	$C0
05771 148B                        CC            .byte	$CC
05772 148C                        78            .byte	$78
05773 148D                        00            .byte	0
05774                                           ! 896  0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00,
05775 148E                        00            .byte	0
05776 148F                        00            .byte	0
05777 1490                        00            .byte	0
05778 1491                        FC            .byte	$FC
05779 1492                        C0            .byte	$C0
05780 1493                        C0            .byte	$C0
05781 1494                        00            .byte	0
05782 1495                        00            .byte	0
05783                                           ! 897  0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00,
05784 1496                        00            .byte	0
05785 1497                        00            .byte	0
05786 1498                        00            .byte	0
05787 1499                        FC            .byte	$FC
05788 149A                        0C            .byte	$C
05789 149B                        0C            .byte	$C
05790 149C                        00            .byte	0
05791 149D                        00            .byte	0
05792                                           ! 898  0xc3, 0xc6, 0xcc, 0xde, 0x33, 0x66, 0xcc, 0x0f,
05793 149E                        C3            .byte	$C3
05794 149F                        C6            .byte	$C6
05795 14A0                        CC            .byte	$CC
05796 14A1                        DE            .byte	$DE
05797 14A2                        33            .byte	$33
05798 14A3                        66            .byte	$66
05799 14A4                        CC            .byte	$CC
05800 14A5                        0F            .byte	$F
05801                                           ! 899  0xc3, 0xc6, 0xcc, 0xdb, 0x37, 0x6f, 0xcf, 0x03,
05802 14A6                        C3            .byte	$C3
05803 14A7                        C6            .byte	$C6
05804 14A8                        CC            .byte	$CC
05805 14A9                        DB            .byte	$DB
05806 14AA                        37            .byte	$37
05807 14AB                        6F            .byte	$6F
05808 14AC                        CF            .byte	$CF
05809 14AD                        03            .byte	3
05810                                           ! 900  0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
05811 14AE                        18            .byte	$18
05812 14AF                        18            .byte	$18
05813 14B0                        00            .byte	0
05814 14B1                        18            .byte	$18
05815 14B2                        18            .byte	$18
05816 14B3                        18            .byte	$18
05817 14B4                        18            .byte	$18
05818 14B5                        00            .byte	0
05819                                           ! 901  
05820                                           ! 901 0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00,
05821 14B6                        00            .byte	0
05822 14B7                        33            .byte	$33
05823 14B8                        66            .byte	$66
05824 14B9                        CC            .byte	$CC
05825 14BA                        66            .byte	$66
05826 14BB                        33            .byte	$33
05827 14BC                        00            .byte	0
05828 14BD                        00            .byte	0
05829                                           ! 902  0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00,
05830 14BE                        00            .byte	0
05831 14BF                        CC            .byte	$CC
05832 14C0                        66            .byte	$66
05833 14C1                        33            .byte	$33
05834 14C2                        66            .byte	$66
05835 14C3                        CC            .byte	$CC
05836 14C4                        00            .byte	0
05837 14C5                        00            .byte	0
05838                                           ! 903  0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88,
05839 14C6                        22            .byte	$22
05840 14C7                        88            .byte	$88
05841 14C8                        22            .byte	$22
05842 14C9                        88            .byte	$88
05843 14CA                        22            .byte	$22
05844 14CB                        88            .byte	$88
05845 14CC                        22            .byte	$22
05846 14CD                        88            .byte	$88
05847                                           ! 904  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
05848 14CE                        55            .byte	$55
05849 14CF                        AA            .byte	$AA
05850 14D0                        55            .byte	$55
05851 14D1                        AA            .byte	$AA
05852 14D2                        55            .byte	$55
05853 14D3                        AA            .byte	$AA
05854 14D4                        55            .byte	$55
05855 14D5                        AA            .byte	$AA
05856                                           ! 905  0xdb, 0x77, 0xdb, 0xee, 0xdb, 0x77, 0xdb, 0xee,
05857 14D6                        DB            .byte	$DB
05858 14D7                        77            .byte	$77
05859 14D8                        DB            .byte	$DB
05860 14D9                        EE            .byte	$EE
05861 14DA                        DB            .byte	$DB
05862 14DB                        77            .byte	$77
05863 14DC                        DB            .byte	$DB
05864 14DD                        EE            .byte	$EE
05865                                           ! 906  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
05866 14DE                        18            .byte	$18
05867 14DF                        18            .byte	$18
05868 14E0                        18            .byte	$18
05869 14E1                        18            .byte	$18
05870 14E2                        18            .byte	$18
05871 14E3                        18            .byte	$18
05872 14E4                        18            .byte	$18
05873 14E5                        18            .byte	$18
05874                                           ! 907  0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18,
05875 14E6                        18            .byte	$18
05876 14E7                        18            .byte	$18
05877 14E8                        18            .byte	$18
05878 14E9                        18            .byte	$18
05879 14EA                        F8            .byte	$F8
05880 14EB                        18            .byte	$18
05881 14EC                        18            .byte	$18
05882 14ED                        18            .byte	$18
05883                                           ! 908  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05884 14EE                        18            .byte	$18
05885 14EF                        18            .byte	$18
05886 14F0                        F8            .byte	$F8
05887 14F1                        18            .byte	$18
05888 14F2                        F8            .byte	$F8
05889 14F3                        18            .byte	$18
05890 14F4                        18            .byte	$18
05891 14F5                        18            .byte	$18
05892                                           ! 909  0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36,
05893 14F6                        36            .byte	$36
05894 14F7                        36            .byte	$36
05895 14F8                        36            .byte	$36
05896 14F9                        36            .byte	$36
05897 14FA                        F6            .byte	$F6
05898 14FB                        36            .byte	$36
05899 14FC                        36            .byte	$36
05900 14FD                        36            .byte	$36
05901                                           ! 910  0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36,
05902 14FE                        00            .byte	0
05903 14FF                        00            .byte	0
05904 1500                        00            .byte	0
05905 1501                        00            .byte	0
05906 1502                        FE            .byte	$FE
05907 1503                        36            .byte	$36
05908 1504                        36            .byte	$36
05909 1505                        36            .byte	$36
05910                                           ! 911  0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18,
05911 1506                        00            .byte	0
05912 1507                        00            .byte	0
05913 1508                        F8            .byte	$F8
05914 1509                        18            .byte	$18
05915 150A                        F8            .byte	$F8
05916 150B                        18            .byte	$18
05917 150C                        18            .byte	$18
05918 150D                        18            .byte	$18
05919                                           ! 912  0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36,
05920 150E                        36            .byte	$36
05921 150F                        36            .byte	$36
05922 1510                        F6            .byte	$F6
05923 1511                        06            .byte	6
05924 1512                        F6            .byte	$F6
05925 1513                        36            .byte	$36
05926 1514                        36            .byte	$36
05927 1515                        36            .byte	$36
05928                                           ! 913  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
05929 1516                        36            .byte	$36
05930 1517                        36            .byte	$36
05931 1518                        36            .byte	$36
05932 1519                        36            .byte	$36
05933 151A                        36            .byte	$36
05934 151B                        36            .byte	$36
05935 151C                        36            .byte	$36
05936 151D                        36            .byte	$36
05937                                           ! 914  0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36,
05938 151E                        00            .byte	0
05939 151F                        00            .byte	0
05940 1520                        FE            .byte	$FE
05941 1521                        06            .byte	6
05942 1522                        F6            .byte	$F6
05943 1523                        36            .byte	$36
05944 1524                        36            .byte	$36
05945 1525                        36            .byte	$36
05946                                           ! 915  0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00,
05947 1526                        36            .byte	$36
05948 1527                        36            .byte	$36
05949 1528                        F6            .byte	$F6
05950 1529                        06            .byte	6
05951 152A                        FE            .byte	$FE
05952 152B                        00            .byte	0
05953 152C                        00            .byte	0
05954 152D                        00            .byte	0
05955                                           ! 916  0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00,
05956 152E                        36            .byte	$36
05957 152F                        36            .byte	$36
05958 1530                        36            .byte	$36
05959 1531                        36            .byte	$36
05960 1532                        FE            .byte	$FE
05961 1533                        00            .byte	0
05962 1534                        00            .byte	0
05963 1535                        00            .byte	0
05964                                           ! 917  0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00,
05965 1536                        18            .byte	$18
05966 1537                        18            .byte	$18
05967 1538                        F8            .byte	$F8
05968 1539                        18            .byte	$18
05969 153A                        F8            .byte	$F8
05970 153B                        00            .byte	0
05971 153C                        00            .byte	0
05972 153D                        00            .byte	0
05973                                           ! 918  0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18,
05974 153E                        00            .byte	0
05975 153F                        00            .byte	0
05976 1540                        00            .byte	0
05977 1541                        00            .byte	0
05978 1542                        F8            .byte	$F8
05979 1543                        18            .byte	$18
05980 1544                        18            .byte	$18
05981 1545                        18            .byte	$18
05982                                           ! 919  0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00,
05983 1546                        18            .byte	$18
05984 1547                        18            .byte	$18
05985 1548                        18            .byte	$18
05986 1549                        18            .byte	$18
05987 154A                        1F            .byte	$1F
05988 154B                        00            .byte	0
05989 154C                        00            .byte	0
05990 154D                        00            .byte	0
05991                                           ! 920  0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00,
05992 154E                        18            .byte	$18
05993 154F                        18            .byte	$18
05994 1550                        18            .byte	$18
05995 1551                        18            .byte	$18
05996 1552                        FF            .byte	$FF
05997 1553                        00            .byte	0
05998 1554                        00            .byte	0
05999 1555                        00            .byte	0
06000                                           ! 921  0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18,
06001 1556                        00            .byte	0
06002 1557                        00            .byte	0
06003 1558                        00            .byte	0
06004 1559                        00            .byte	0
06005 155A                        FF            .byte	$FF
06006 155B                        18            .byte	$18
06007 155C                        18            .byte	$18
06008 155D                        18            .byte	$18
06009                                           ! 922  0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18,
06010 155E                        18            .byte	$18
06011 155F                        18            .byte	$18
06012 1560                        18            .byte	$18
06013 1561                        18            .byte	$18
06014 1562                        1F            .byte	$1F
06015 1563                        18            .byte	$18
06016 1564                        18            .byte	$18
06017 1565                        18            .byte	$18
06018                                           ! 923  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
06019 1566                        00            .byte	0
06020 1567                        00            .byte	0
06021 1568                        00            .byte	0
06022 1569                        00            .byte	0
06023 156A                        FF            .byte	$FF
06024 156B                        00            .byte	0
06025 156C                        00            .byte	0
06026 156D                        00            .byte	0
06027                                           ! 924  0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18,
06028 156E                        18            .byte	$18
06029 156F                        18            .byte	$18
06030 1570                        18            .byte	$18
06031 1571                        18            .byte	$18
06032 1572                        FF            .byte	$FF
06033 1573                        18            .byte	$18
06034 1574                        18            .byte	$18
06035 1575                        18            .byte	$18
06036                                           ! 925  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06037 1576                        18            .byte	$18
06038 1577                        18            .byte	$18
06039 1578                        1F            .byte	$1F
06040 1579                        18            .byte	$18
06041 157A                        1F            .byte	$1F
06042 157B                        18            .byte	$18
06043 157C                        18            .byte	$18
06044 157D                        18            .byte	$18
06045                                           ! 926  0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
06046 157E                        36            .byte	$36
06047 157F                        36            .byte	$36
06048 1580                        36            .byte	$36
06049 1581                        36            .byte	$36
06050 1582                        37            .byte	$37
06051 1583                        36            .byte	$36
06052 1584                        36            .byte	$36
06053 1585                        36            .byte	$36
06054                                           ! 927  0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00,
06055 1586                        36            .byte	$36
06056 1587                        36            .byte	$36
06057 1588                        37            .byte	$37
06058 1589                        30            .byte	$30
06059 158A                        3F            .byte	$3F
06060 158B                        00            .byte	0
06061 158C                        00            .byte	0
06062 158D                        00            .byte	0
06063                                           ! 928  0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36,
06064 158E                        00            .byte	0
06065 158F                        00            .byte	0
06066 1590                        3F            .byte	$3F
06067 1591                        30            .byte	$30
06068 1592                        37            .byte	$37
06069 1593                        36            .byte	$36
06070 1594                        36            .byte	$36
06071 1595                        36            .byte	$36
06072                                           ! 929  0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00,
06073 1596                        36            .byte	$36
06074 1597                        36            .byte	$36
06075 1598                        F7            .byte	$F7
06076 1599                        00            .byte	0
06077 159A                        FF            .byte	$FF
06078 159B                        00            .byte	0
06079 159C                        00            .byte	0
06080 159D                        00            .byte	0
06081                                           ! 930  0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36,
06082 159E                        00            .byte	0
06083 159F                        00            .byte	0
06084 15A0                        FF            .byte	$FF
06085 15A1                        00            .byte	0
06086 15A2                        F7            .byte	$F7
06087 15A3                        36            .byte	$36
06088 15A4                        36            .byte	$36
06089 15A5                        36            .byte	$36
06090                                           ! 931  0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36,
06091 15A6                        36            .byte	$36
06092 15A7                        36            .byte	$36
06093 15A8                        37            .byte	$37
06094 15A9                        30            .byte	$30
06095 15AA                        37            .byte	$37
06096 15AB                        36            .byte	$36
06097 15AC                        36            .byte	$36
06098 15AD                        36            .byte	$36
06099                                           ! 932  0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06100 15AE                        00            .byte	0
06101 15AF                        00            .byte	0
06102 15B0                        FF            .byte	$FF
06103 15B1                        00            .byte	0
06104 15B2                        FF            .byte	$FF
06105 15B3                        00            .byte	0
06106 15B4                        00            .byte	0
06107 15B5                        00            .byte	0
06108                                           ! 933  0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36,
06109 15B6                        36            .byte	$36
06110 15B7                        36            .byte	$36
06111 15B8                        F7            .byte	$F7
06112 15B9                        00            .byte	0
06113 15BA                        F7            .byte	$F7
06114 15BB                        36            .byte	$36
06115 15BC                        36            .byte	$36
06116 15BD                        36            .byte	$36
06117                                           ! 934  0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00,
06118 15BE                        18            .byte	$18
06119 15BF                        18            .byte	$18
06120 15C0                        FF            .byte	$FF
06121 15C1                        00            .byte	0
06122 15C2                        FF            .byte	$FF
06123 15C3                        00            .byte	0
06124 15C4                        00            .byte	0
06125 15C5                        00            .byte	0
06126                                           ! 935  0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00,
06127 15C6                        36            .byte	$36
06128 15C7                        36            .byte	$36
06129 15C8                        36            .byte	$36
06130 15C9                        36            .byte	$36
06131 15CA                        FF            .byte	$FF
06132 15CB                        00            .byte	0
06133 15CC                        00            .byte	0
06134 15CD                        00            .byte	0
06135                                           ! 936  0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18,
06136 15CE                        00            .byte	0
06137 15CF                        00            .byte	0
06138 15D0                        FF            .byte	$FF
06139 15D1                        00            .byte	0
06140 15D2                        FF            .byte	$FF
06141 15D3                        18            .byte	$18
06142 15D4                        18            .byte	$18
06143 15D5                        18            .byte	$18
06144                                           ! 937  0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36,
06145 15D6                        00            .byte	0
06146 15D7                        00            .byte	0
06147 15D8                        00            .byte	0
06148 15D9                        00            .byte	0
06149 15DA                        FF            .byte	$FF
06150 15DB                        36            .byte	$36
06151 15DC                        36            .byte	$36
06152 15DD                        36            .byte	$36
06153                                           ! 938  0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00,
06154 15DE                        36            .byte	$36
06155 15DF                        36            .byte	$36
06156 15E0                        36            .byte	$36
06157 15E1                        36            .byte	$36
06158 15E2                        3F            .byte	$3F
06159 15E3                        00            .byte	0
06160 15E4                        00            .byte	0
06161 15E5                        00            .byte	0
06162                                           ! 939  0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00,
06163 15E6                        18            .byte	$18
06164 15E7                        18            .byte	$18
06165 15E8                        1F            .byte	$1F
06166 15E9                        18            .byte	$18
06167 15EA                        1F            .byte	$1F
06168 15EB                        00            .byte	0
06169 15EC                        00            .byte	0
06170 15ED                        00            .byte	0
06171                                           ! 940  0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18,
06172 15EE                        00            .byte	0
06173 15EF                        00            .byte	0
06174 15F0                        1F            .byte	$1F
06175 15F1                        18            .byte	$18
06176 15F2                        1F            .byte	$1F
06177 15F3                        18            .byte	$18
06178 15F4                        18            .byte	$18
06179 15F5                        18            .byte	$18
06180                                           ! 941  0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36,
06181 15F6                        00            .byte	0
06182 15F7                        00            .byte	0
06183 15F8                        00            .byte	0
06184 15F9                        00            .byte	0
06185 15FA                        3F            .byte	$3F
06186 15FB                        36            .byte	$36
06187 15FC                        36            .byte	$36
06188 15FD                        36            .byte	$36
06189                                           ! 942  0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x3
06190 15FE                        36            .byte	$36
06191 15FF                        36            .byte	$36
06192 1600                        36            .byte	$36
06193 1601                        36            .byte	$36
06194 1602                        FF            .byte	$FF
06195 1603                        36            .byte	$36
06196                                           ! 942 6, 0x36,
06197 1604                        36            .byte	$36
06198 1605                        36            .byte	$36
06199                                           ! 943  0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18,
06200 1606                        18            .byte	$18
06201 1607                        18            .byte	$18
06202 1608                        FF            .byte	$FF
06203 1609                        18            .byte	$18
06204 160A                        FF            .byte	$FF
06205 160B                        18            .byte	$18
06206 160C                        18            .byte	$18
06207 160D                        18            .byte	$18
06208                                           ! 944  0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00,
06209 160E                        18            .byte	$18
06210 160F                        18            .byte	$18
06211 1610                        18            .byte	$18
06212 1611                        18            .byte	$18
06213 1612                        F8            .byte	$F8
06214 1613                        00            .byte	0
06215 1614                        00            .byte	0
06216 1615                        00            .byte	0
06217                                           ! 945  0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18,
06218 1616                        00            .byte	0
06219 1617                        00            .byte	0
06220 1618                        00            .byte	0
06221 1619                        00            .byte	0
06222 161A                        1F            .byte	$1F
06223 161B                        18            .byte	$18
06224 161C                        18            .byte	$18
06225 161D                        18            .byte	$18
06226                                           ! 946  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
06227 161E                        FF            .byte	$FF
06228 161F                        FF            .byte	$FF
06229 1620                        FF            .byte	$FF
06230 1621                        FF            .byte	$FF
06231 1622                        FF            .byte	$FF
06232 1623                        FF            .byte	$FF
06233 1624                        FF            .byte	$FF
06234 1625                        FF            .byte	$FF
06235                                           ! 947  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
06236 1626                        00            .byte	0
06237 1627                        00            .byte	0
06238 1628                        00            .byte	0
06239 1629                        00            .byte	0
06240 162A                        FF            .byte	$FF
06241 162B                        FF            .byte	$FF
06242 162C                        FF            .byte	$FF
06243 162D                        FF            .byte	$FF
06244                                           ! 948  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
06245 162E                        F0            .byte	$F0
06246 162F                        F0            .byte	$F0
06247 1630                        F0            .byte	$F0
06248 1631                        F0            .byte	$F0
06249 1632                        F0            .byte	$F0
06250 1633                        F0            .byte	$F0
06251 1634                        F0            .byte	$F0
06252 1635                        F0            .byte	$F0
06253                                           ! 949  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
06254 1636                        0F            .byte	$F
06255 1637                        0F            .byte	$F
06256 1638                        0F            .byte	$F
06257 1639                        0F            .byte	$F
06258 163A                        0F            .byte	$F
06259 163B                        0F            .byte	$F
06260 163C                        0F            .byte	$F
06261 163D                        0F            .byte	$F
06262                                           ! 950  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
06263 163E                        FF            .byte	$FF
06264 163F                        FF            .byte	$FF
06265 1640                        FF            .byte	$FF
06266 1641                        FF            .byte	$FF
06267 1642                        00            .byte	0
06268 1643                        00            .byte	0
06269 1644                        00            .byte	0
06270 1645                        00            .byte	0
06271                                           ! 951  0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00,
06272 1646                        00            .byte	0
06273 1647                        00            .byte	0
06274 1648                        76            .byte	$76
06275 1649                        DC            .byte	$DC
06276 164A                        C8            .byte	$C8
06277 164B                        DC            .byte	$DC
06278 164C                        76            .byte	$76
06279 164D                        00            .byte	0
06280                                           ! 952  0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0,
06281 164E                        00            .byte	0
06282 164F                        78            .byte	$78
06283 1650                        CC            .byte	$CC
06284 1651                        F8            .byte	$F8
06285 1652                        CC            .byte	$CC
06286 1653                        F8            .byte	$F8
06287 1654                        C0            .byte	$C0
06288 1655                        C0            .byte	$C0
06289                                           ! 953  0x00, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0x00,
06290 1656                        00            .byte	0
06291 1657                        FC            .byte	$FC
06292 1658                        CC            .byte	$CC
06293 1659                        C0            .byte	$C0
06294 165A                        C0            .byte	$C0
06295 165B                        C0            .byte	$C0
06296 165C                        C0            .byte	$C0
06297 165D                        00            .byte	0
06298                                           ! 954  0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00,
06299 165E                        00            .byte	0
06300 165F                        FE            .byte	$FE
06301 1660                        6C            .byte	$6C
06302 1661                        6C            .byte	$6C
06303 1662                        6C            .byte	$6C
06304 1663                        6C            .byte	$6C
06305 1664                        6C            .byte	$6C
06306 1665                        00            .byte	0
06307                                           ! 955  0xfc, 0xcc, 0x60, 0x30, 0x60, 0xcc, 0xfc, 0x00,
06308 1666                        FC            .byte	$FC
06309 1667                        CC            .byte	$CC
06310 1668                        60            .byte	$60
06311 1669                        30            .byte	$30
06312 166A                        60            .byte	$60
06313 166B                        CC            .byte	$CC
06314 166C                        FC            .byte	$FC
06315 166D                        00            .byte	0
06316                                           ! 956  0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0x70, 0x00,
06317 166E                        00            .byte	0
06318 166F                        00            .byte	0
06319 1670                        7E            .byte	$7E
06320 1671                        D8            .byte	$D8
06321 1672                        D8            .byte	$D8
06322 1673                        D8            .byte	$D8
06323 1674                        70            .byte	$70
06324 1675                        00            .byte	0
06325                                           ! 957  0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0,
06326 1676                        00            .byte	0
06327 1677                        66            .byte	$66
06328 1678                        66            .byte	$66
06329 1679                        66            .byte	$66
06330 167A                        66            .byte	$66
06331 167B                        7C            .byte	$7C
06332 167C                        60            .byte	$60
06333 167D                        C0            .byte	$C0
06334                                           ! 958  0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00,
06335 167E                        00            .byte	0
06336 167F                        76            .byte	$76
06337 1680                        DC            .byte	$DC
06338 1681                        18            .byte	$18
06339 1682                        18            .byte	$18
06340 1683                        18            .byte	$18
06341 1684                        18            .byte	$18
06342 1685                        00            .byte	0
06343                                           ! 959  0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc,
06344 1686                        FC            .byte	$FC
06345 1687                        30            .byte	$30
06346 1688                        78            .byte	$78
06347 1689                        CC            .byte	$CC
06348 168A                        CC            .byte	$CC
06349 168B                        78            .byte	$78
06350 168C                        30            .byte	$30
06351 168D                        FC            .byte	$FC
06352                                           ! 960  0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00,
06353 168E                        38            .byte	$38
06354 168F                        6C            .byte	$6C
06355 1690                        C6            .byte	$C6
06356 1691                        FE            .byte	$FE
06357 1692                        C6            .byte	$C6
06358 1693                        6C            .byte	$6C
06359 1694                        38            .byte	$38
06360 1695                        00            .byte	0
06361                                           ! 961  0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00,
06362 1696                        38            .byte	$38
06363 1697                        6C            .byte	$6C
06364 1698                        C6            .byte	$C6
06365 1699                        C6            .byte	$C6
06366 169A                        6C            .byte	$6C
06367 169B                        6C            .byte	$6C
06368 169C                        EE            .byte	$EE
06369 169D                        00            .byte	0
06370                                           ! 962  0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00,
06371 169E                        1C            .byte	$1C
06372 169F                        30            .byte	$30
06373 16A0                        18            .byte	$18
06374 16A1                        7C            .byte	$7C
06375 16A2                        CC            .byte	$CC
06376 16A3                        CC            .byte	$CC
06377 16A4                        78            .byte	$78
06378 16A5                        00            .byte	0
06379                                           ! 963  0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00,
06380 16A6                        00            .byte	0
06381 16A7                        00            .byte	0
06382 16A8                        7E            .byte	$7E
06383 16A9                        DB            .byte	$DB
06384 16AA                        DB            .byte	$DB
06385 16AB                        7E            .byte	$7E
06386 16AC                        00            .byte	0
06387 16AD                        00            .byte	0
06388                                           ! 964  0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0,
06389 16AE                        06            .byte	6
06390 16AF                        0C            .byte	$C
06391 16B0                        7E            .byte	$7E
06392 16B1                        DB            .byte	$DB
06393 16B2                        DB            .byte	$DB
06394 16B3                        7E            .byte	$7E
06395 16B4                        60            .byte	$60
06396 16B5                        C0            .byte	$C0
06397                                           ! 965  0x38, 0x60, 0xc0, 0xf8, 0xc0, 0x60, 0x38, 0x00,
06398 16B6                        38            .byte	$38
06399 16B7                        60            .byte	$60
06400 16B8                        C0            .byte	$C0
06401 16B9                        F8            .byte	$F8
06402 16BA                        C0            .byte	$C0
06403 16BB                        60            .byte	$60
06404 16BC                        38            .byte	$38
06405 16BD                        00            .byte	0
06406                                           ! 966  0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00,
06407 16BE                        78            .byte	$78
06408 16BF                        CC            .byte	$CC
06409 16C0                        CC            .byte	$CC
06410 16C1                        CC            .byte	$CC
06411 16C2                        CC            .byte	$CC
06412 16C3                        CC            .byte	$CC
06413 16C4                        CC            .byte	$CC
06414 16C5                        00            .byte	0
06415                                           ! 967  0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00,
06416 16C6                        00            .byte	0
06417 16C7                        FC            .byte	$FC
06418 16C8                        00            .byte	0
06419 16C9                        FC            .byte	$FC
06420 16CA                        00            .byte	0
06421 16CB                        FC            .byte	$FC
06422 16CC                        00            .byte	0
06423 16CD                        00            .byte	0
06424                                           ! 968  0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00,
06425 16CE                        30            .byte	$30
06426 16CF                        30            .byte	$30
06427 16D0                        FC            .byte	$FC
06428 16D1                        30            .byte	$30
06429 16D2                        30            .byte	$30
06430 16D3                        00            .byte	0
06431 16D4                        FC            .byte	$FC
06432 16D5                        00            .byte	0
06433                                           ! 969  0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00,
06434 16D6                        60            .byte	$60
06435 16D7                        30            .byte	$30
06436 16D8                        18            .byte	$18
06437 16D9                        30            .byte	$30
06438 16DA                        60            .byte	$60
06439 16DB                        00            .byte	0
06440 16DC                        FC            .byte	$FC
06441 16DD                        00            .byte	0
06442                                           ! 970  0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00,
06443 16DE                        18            .byte	$18
06444 16DF                        30            .byte	$30
06445 16E0                        60            .byte	$60
06446 16E1                        30            .byte	$30
06447 16E2                        18            .byte	$18
06448 16E3                        00            .byte	0
06449 16E4                        FC            .byte	$FC
06450 16E5                        00            .byte	0
06451                                           ! 971  0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18,
06452 16E6                        0E            .byte	$E
06453 16E7                        1B            .byte	$1B
06454 16E8                        1B            .byte	$1B
06455 16E9                        18            .byte	$18
06456 16EA                        18            .byte	$18
06457 16EB                        18            .byte	$18
06458 16EC                        18            .byte	$18
06459 16ED                        18            .byte	$18
06460                                           ! 972  0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70,
06461 16EE                        18            .byte	$18
06462 16EF                        18            .byte	$18
06463 16F0                        18            .byte	$18
06464 16F1                        18            .byte	$18
06465 16F2                        18            .byte	$18
06466 16F3                        D8            .byte	$D8
06467 16F4                        D8            .byte	$D8
06468 16F5                        70            .byte	$70
06469                                           ! 973  0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00,
06470 16F6                        30            .byte	$30
06471 16F7                        30            .byte	$30
06472 16F8                        00            .byte	0
06473 16F9                        FC            .byte	$FC
06474 16FA                        00            .byte	0
06475 16FB                        30            .byte	$30
06476 16FC                        30            .byte	$30
06477 16FD                        00            .byte	0
06478                                           ! 974  0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00,
06479 16FE                        00            .byte	0
06480 16FF                        76            .byte	$76
06481 1700                        DC            .byte	$DC
06482 1701                        00            .byte	0
06483 1702                        76            .byte	$76
06484 1703                        DC            .byte	$DC
06485 1704                        00            .byte	0
06486 1705                        00            .byte	0
06487                                           ! 975  0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
06488 1706                        38            .byte	$38
06489 1707                        6C            .byte	$6C
06490 1708                        6C            .byte	$6C
06491 1709                        38            .byte	$38
06492 170A                        00            .byte	0
06493 170B                        00            .byte	0
06494 170C                        00            .byte	0
06495 170D                        00            .byte	0
06496                                           ! 976  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
06497 170E                        00            .byte	0
06498 170F                        00            .byte	0
06499 1710                        00            .byte	0
06500 1711                        18            .byte	$18
06501 1712                        18            .byte	$18
06502 1713                        00            .byte	0
06503 1714                        00            .byte	0
06504 1715                        00            .byte	0
06505                                           ! 977  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
06506 1716                        00            .byte	0
06507 1717                        00            .byte	0
06508 1718                        00            .byte	0
06509 1719                        00            .byte	0
06510 171A                        18            .byte	$18
06511 171B                        00            .byte	0
06512 171C                        00            .byte	0
06513 171D                        00            .byte	0
06514                                           ! 978  0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c,
06515 171E                        0F            .byte	$F
06516 171F                        0C            .byte	$C
06517 1720                        0C            .byte	$C
06518 1721                        0C            .byte	$C
06519 1722                        EC            .byte	$EC
06520 1723                        6C            .byte	$6C
06521 1724                        3C            .byte	$3C
06522 1725                        1C            .byte	$1C
06523                                           ! 979  0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
06524 1726                        78            .byte	$78
06525 1727                        6C            .byte	$6C
06526 1728                        6C            .byte	$6C
06527 1729                        6C            .byte	$6C
06528 172A                        6C            .byte	$6C
06529 172B                        00            .byte	0
06530 172C                        00            .byte	0
06531 172D                        00            .byte	0
06532                                           ! 980  0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
06533 172E                        70            .byte	$70
06534 172F                        18            .byte	$18
06535 1730                        30            .byte	$30
06536 1731                        60            .byte	$60
06537 1732                        78            .byte	$78
06538 1733                        00            .byte	0
06539 1734                        00            .byte	0
06540 1735                        00            .byte	0
06541                                           ! 981  0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00,
06542 1736                        00            .byte	0
06543 1737                        00            .byte	0
06544 1738                        3C            .byte	$3C
06545 1739                        3C            .byte	$3C
06546 173A                        3C            .byte	$3C
06547 173B                        3C            .byte	$3C
06548 173C                        00            .byte	0
06549 173D                        00            .byte	0
06550                                           ! 982  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
06551 173E                        00            .byte	0
06552 173F                        00            .byte	0
06553 1740                        00            .byte	0
06554 1741                        00            .byte	0
06555 1742                        00            .byte	0
06556 1743                        00            .byte	0
06557 1744                        00            .byte	0
06558                                           ! 983 };
06559 1745                        00            .byte	0
06560                                           !BCC_EOS
06561                                           ! 984 static Bit8u vgafont14[256*14]=
06562                                           ! 985 {
06563                       00001746            _vgafont14:
06564                                           ! 986  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
06565 1746                        00            .byte	0
06566 1747                        00            .byte	0
06567 1748                        00            .byte	0
06568 1749                        00            .byte	0
06569 174A                        00            .byte	0
06570 174B                        00            .byte	0
06571 174C                        00            .byte	0
06572                                           ! 986 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
06573 174D                        00            .byte	0
06574 174E                        00            .byte	0
06575 174F                        00            .byte	0
06576 1750                        00            .byte	0
06577 1751                        00            .byte	0
06578 1752                        00            .byte	0
06579 1753                        00            .byte	0
06580                                           ! 987  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x7e, 0x00, 0x00, 0x00,
06581 1754                        00            .byte	0
06582 1755                        00            .byte	0
06583 1756                        7E            .byte	$7E
06584 1757                        81            .byte	$81
06585 1758                        A5            .byte	$A5
06586 1759                        81            .byte	$81
06587 175A                        81            .byte	$81
06588 175B                        BD            .byte	$BD
06589 175C                        99            .byte	$99
06590 175D                        81            .byte	$81
06591 175E                        7E            .byte	$7E
06592 175F                        00            .byte	0
06593 1760                        00            .byte	0
06594 1761                        00            .byte	0
06595                                           ! 988  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0x7e, 0x00, 0x00, 0x00,
06596 1762                        00            .byte	0
06597 1763                        00            .byte	0
06598 1764                        7E            .byte	$7E
06599 1765                        FF            .byte	$FF
06600 1766                        DB            .byte	$DB
06601 1767                        FF            .byte	$FF
06602 1768                        FF            .byte	$FF
06603 1769                        C3            .byte	$C3
06604 176A                        E7            .byte	$E7
06605 176B                        FF            .byte	$FF
06606 176C                        7E            .byte	$7E
06607 176D                        00            .byte	0
06608 176E                        00            .byte	0
06609 176F                        00            .byte	0
06610                                           ! 989  0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00,
06611 1770                        00            .byte	0
06612 1771                        00            .byte	0
06613 1772                        00            .byte	0
06614 1773                        6C            .byte	$6C
06615 1774                        FE            .byte	$FE
06616 1775                        FE            .byte	$FE
06617 1776                        FE            .byte	$FE
06618 1777                        FE            .byte	$FE
06619 1778                        7C            .byte	$7C
06620 1779                        38            .byte	$38
06621 177A                        10            .byte	$10
06622 177B                        00            .byte	0
06623 177C                        00            .byte	0
06624 177D                        00            .byte	0
06625                                           ! 990  0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
06626 177E                        00            .byte	0
06627 177F                        00            .byte	0
06628 1780                        00            .byte	0
06629 1781                        10            .byte	$10
06630 1782                        38            .byte	$38
06631 1783                        7C            .byte	$7C
06632 1784                        FE            .byte	$FE
06633 1785                        7C            .byte	$7C
06634 1786                        38            .byte	$38
06635 1787                        10            .byte	$10
06636 1788                        00            .byte	0
06637 1789                        00            .byte	0
06638 178A                        00            .byte	0
06639 178B                        00            .byte	0
06640                                           ! 991  0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06641 178C                        00            .byte	0
06642 178D                        00            .byte	0
06643 178E                        18            .byte	$18
06644 178F                        3C            .byte	$3C
06645 1790                        3C            .byte	$3C
06646 1791                        E7            .byte	$E7
06647 1792                        E7            .byte	$E7
06648 1793                        E7            .byte	$E7
06649 1794                        18            .byte	$18
06650 1795                        18            .byte	$18
06651 1796                        3C            .byte	$3C
06652 1797                        00            .byte	0
06653 1798                        00            .byte	0
06654 1799                        00            .byte	0
06655                                           ! 992  0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
06656 179A                        00            .byte	0
06657 179B                        00            .byte	0
06658 179C                        18            .byte	$18
06659 179D                        3C            .byte	$3C
06660 179E                        7E            .byte	$7E
06661 179F                        FF            .byte	$FF
06662 17A0                        FF            .byte	$FF
06663 17A1                        7E            .byte	$7E
06664 17A2                        18            .byte	$18
06665 17A3                        18            .byte	$18
06666 17A4                        3C            .byte	$3C
06667 17A5                        00            .byte	0
06668 17A6                        00            .byte	0
06669 17A7                        00            .byte	0
06670                                           ! 993  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06671 17A8                        00            .byte	0
06672 17A9                        00            .byte	0
06673 17AA                        00            .byte	0
06674 17AB                        00            .byte	0
06675 17AC                        00            .byte	0
06676 17AD                        18            .byte	$18
06677 17AE                        3C            .byte	$3C
06678 17AF                        3C            .byte	$3C
06679 17B0                        18            .byte	$18
06680 17B1                        00            .byte	0
06681 17B2                        00            .byte	0
06682 17B3                        00            .byte	0
06683 17B4                        00            .byte	0
06684 17B5                        00            .byte	0
06685                                           ! 994  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff,
06686 17B6                        FF            .byte	$FF
06687 17B7                        FF            .byte	$FF
06688 17B8                        FF            .byte	$FF
06689 17B9                        FF            .byte	$FF
06690 17BA                        FF            .byte	$FF
06691 17BB                        E7            .byte	$E7
06692 17BC                        C3            .byte	$C3
06693 17BD                        C3            .byte	$C3
06694 17BE                        E7            .byte	$E7
06695 17BF                        FF            .byte	$FF
06696 17C0                        FF            .byte	$FF
06697 17C1                        FF            .byte	$FF
06698 17C2                        FF            .byte	$FF
06699 17C3                        FF            .byte	$FF
06700                                           ! 995  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
06701 17C4                        00            .byte	0
06702 17C5                        00            .byte	0
06703 17C6                        00            .byte	0
06704 17C7                        00            .byte	0
06705 17C8                        3C            .byte	$3C
06706 17C9                        66            .byte	$66
06707 17CA                        42            .byte	$42
06708 17CB                        42            .byte	$42
06709 17CC                        66            .byte	$66
06710 17CD                        3C            .byte	$3C
06711 17CE                        00            .byte	0
06712 17CF                        00            .byte	0
06713 17D0                        00            .byte	0
06714 17D1                        00            .byte	0
06715                                           ! 996  0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff,
06716 17D2                        FF            .byte	$FF
06717 17D3                        FF            .byte	$FF
06718 17D4                        FF            .byte	$FF
06719 17D5                        FF            .byte	$FF
06720 17D6                        C3            .byte	$C3
06721 17D7                        99            .byte	$99
06722 17D8                        BD            .byte	$BD
06723 17D9                        BD            .byte	$BD
06724 17DA                        99            .byte	$99
06725 17DB                        C3            .byte	$C3
06726 17DC                        FF            .byte	$FF
06727 17DD                        FF            .byte	$FF
06728 17DE                        FF            .byte	$FF
06729 17DF                        FF            .byte	$FF
06730                                           ! 997  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
06731 17E0                        00            .byte	0
06732 17E1                        00            .byte	0
06733 17E2                        1E            .byte	$1E
06734 17E3                        0E            .byte	$E
06735 17E4                        1A            .byte	$1A
06736 17E5                        32            .byte	$32
06737 17E6                        78            .byte	$78
06738 17E7                        CC            .byte	$CC
06739 17E8                        CC            .byte	$CC
06740 17E9                        CC            .byte	$CC
06741 17EA                        78            .byte	$78
06742 17EB                        00            .byte	0
06743 17EC                        00            .byte	0
06744 17ED                        00            .byte	0
06745                                           ! 998  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
06746 17EE                        00            .byte	0
06747 17EF                        00            .byte	0
06748 17F0                        3C            .byte	$3C
06749 17F1                        66            .byte	$66
06750 17F2                        66            .byte	$66
06751 17F3                        66            .byte	$66
06752 17F4                        3C            .byte	$3C
06753 17F5                        18            .byte	$18
06754 17F6                        7E            .byte	$7E
06755 17F7                        18            .byte	$18
06756 17F8                        18            .byte	$18
06757 17F9                        00            .byte	0
06758 17FA                        00            .byte	0
06759 17FB                        00            .byte	0
06760                                           ! 999  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00,
06761 17FC                        00            .byte	0
06762 17FD                        00            .byte	0
06763 17FE                        3F            .byte	$3F
06764 17FF                        33            .byte	$33
06765 1800                        3F            .byte	$3F
06766 1801                        30            .byte	$30
06767 1802                        30            .byte	$30
06768 1803                        30            .byte	$30
06769 1804                        70            .byte	$70
06770 1805                        F0            .byte	$F0
06771 1806                        E0            .byte	$E0
06772 1807                        00            .byte	0
06773 1808                        00            .byte	0
06774 1809                        00            .byte	0
06775                                           ! 1000  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00,
06776 180A                        00            .byte	0
06777 180B                        00            .byte	0
06778 180C                        7F            .byte	$7F
06779 180D                        63            .byte	$63
06780 180E                        7F            .byte	$7F
06781 180F                        63            .byte	$63
06782 1810                        63            .byte	$63
06783 1811                        63            .byte	$63
06784 1812                        67            .byte	$67
06785 1813                        E7            .byte	$E7
06786 1814                        E6            .byte	$E6
06787 1815                        C0            .byte	$C0
06788 1816                        00            .byte	0
06789 1817                        00            .byte	0
06790                                           ! 1001  0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00,
06791 1818                        00            .byte	0
06792 1819                        00            .byte	0
06793 181A                        18            .byte	$18
06794 181B                        18            .byte	$18
06795 181C                        DB            .byte	$DB
06796 181D                        3C            .byte	$3C
06797 181E                        E7            .byte	$E7
06798 181F                        3C            .byte	$3C
06799 1820                        DB            .byte	$DB
06800 1821                        18            .byte	$18
06801 1822                        18            .byte	$18
06802 1823                        00            .byte	0
06803 1824                        00            .byte	0
06804 1825                        00            .byte	0
06805                                           ! 1002  0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00,
06806 1826                        00            .byte	0
06807 1827                        00            .byte	0
06808 1828                        80            .byte	$80
06809 1829                        C0            .byte	$C0
06810 182A                        E0            .byte	$E0
06811 182B                        F8            .byte	$F8
06812 182C                        FE            .byte	$FE
06813 182D                        F8            .byte	$F8
06814 182E                        E0            .byte	$E0
06815 182F                        C0            .byte	$C0
06816 1830                        80            .byte	$80
06817 1831                        00            .byte	0
06818 1832                        00            .byte	0
06819 1833                        00            .byte	0
06820                                           ! 1003  0x00, 0x00, 0x02, 0x06, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
06821 1834                        00            .byte	0
06822 1835                        00            .byte	0
06823 1836                        02            .byte	2
06824 1837                        06            .byte	6
06825 1838                        0E            .byte	$E
06826 1839                        3E            .byte	$3E
06827 183A                        FE            .byte	$FE
06828 183B                        3E            .byte	$3E
06829 183C                        0E            .byte	$E
06830 183D                        06            .byte	6
06831 183E                        02            .byte	2
06832 183F                        00            .byte	0
06833 1840                        00            .byte	0
06834 1841                        00            .byte	0
06835                                           ! 1004  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06836 1842                        00            .byte	0
06837 1843                        00            .byte	0
06838 1844                        18            .byte	$18
06839 1845                        3C            .byte	$3C
06840 1846                        7E            .byte	$7E
06841 1847                        18            .byte	$18
06842 1848                        18            .byte	$18
06843 1849                        18            .byte	$18
06844 184A                        7E            .byte	$7E
06845 184B                        3C            .byte	$3C
06846 184C                        18            .byte	$18
06847 184D                        00            .byte	0
06848 184E                        00            .byte	0
06849 184F                        00            .byte	0
06850                                           ! 1005  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00,
06851 1850                        00            .byte	0
06852 1851                        00            .byte	0
06853 1852                        66            .byte	$66
06854 1853                        66            .byte	$66
06855 1854                        66            .byte	$66
06856 1855                        66            .byte	$66
06857 1856                        66            .byte	$66
06858 1857                        66            .byte	$66
06859 1858                        00            .byte	0
06860 1859                        66            .byte	$66
06861 185A                        66            .byte	$66
06862 185B                        00            .byte	0
06863 185C                        00            .byte	0
06864 185D                        00            .byte	0
06865                                           ! 1006  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00,
06866 185E                        00            .byte	0
06867 185F                        00            .byte	0
06868 1860                        7F            .byte	$7F
06869 1861                        DB            .byte	$DB
06870 1862                        DB            .byte	$DB
06871 1863                        DB            .byte	$DB
06872 1864                        7B            .byte	$7B
06873 1865                        1B            .byte	$1B
06874 1866                        1B            .byte	$1B
06875 1867                        1B            .byte	$1B
06876 1868                        1B            .byte	$1B
06877 1869                        00            .byte	0
06878 186A                        00            .byte	0
06879 186B                        00            .byte	0
06880                                           ! 1007  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00,
06881 186C                        00            .byte	0
06882 186D                        7C            .byte	$7C
06883 186E                        C6            .byte	$C6
06884 186F                        60            .byte	$60
06885 1870                        38            .byte	$38
06886 1871                        6C            .byte	$6C
06887 1872                        C6            .byte	$C6
06888 1873                        C6            .byte	$C6
06889 1874                        6C            .byte	$6C
06890 1875                        38            .byte	$38
06891 1876                        0C            .byte	$C
06892 1877                        C6            .byte	$C6
06893 1878                        7C            .byte	$7C
06894 1879                        00            .byte	0
06895                                           ! 1008  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00,
06896 187A                        00            .byte	0
06897 187B                        00            .byte	0
06898 187C                        00            .byte	0
06899 187D                        00            .byte	0
06900 187E                        00            .byte	0
06901 187F                        00            .byte	0
06902 1880                        00            .byte	0
06903 1881                        00            .byte	0
06904 1882                        FE            .byte	$FE
06905 1883                        FE            .byte	$FE
06906 1884                        FE            .byte	$FE
06907 1885                        00            .byte	0
06908 1886                        00            .byte	0
06909 1887                        00            .byte	0
06910                                           ! 1009  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00,
06911 1888                        00            .byte	0
06912 1889                        00            .byte	0
06913 188A                        18            .byte	$18
06914 188B                        3C            .byte	$3C
06915 188C                        7E            .byte	$7E
06916 188D                        18            .byte	$18
06917 188E                        18            .byte	$18
06918 188F                        18            .byte	$18
06919 1890                        7E            .byte	$7E
06920 1891                        3C            .byte	$3C
06921 1892                        18            .byte	$18
06922 1893                        7E            .byte	$7E
06923 1894                        00            .byte	0
06924 1895                        00            .byte	0
06925                                           ! 1010  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x
06926 1896                        00            .byte	0
06927 1897                        00            .byte	0
06928 1898                        18            .byte	$18
06929 1899                        3C            .byte	$3C
06930 189A                        7E            .byte	$7E
06931 189B                        18            .byte	$18
06932 189C                        18            .byte	$18
06933 189D                        18            .byte	$18
06934                                           ! 1010 18, 0x18, 0x18, 0x00, 0x00, 0x00,
06935 189E                        18            .byte	$18
06936 189F                        18            .byte	$18
06937 18A0                        18            .byte	$18
06938 18A1                        00            .byte	0
06939 18A2                        00            .byte	0
06940 18A3                        00            .byte	0
06941                                           ! 1011  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00,
06942 18A4                        00            .byte	0
06943 18A5                        00            .byte	0
06944 18A6                        18            .byte	$18
06945 18A7                        18            .byte	$18
06946 18A8                        18            .byte	$18
06947 18A9                        18            .byte	$18
06948 18AA                        18            .byte	$18
06949 18AB                        18            .byte	$18
06950 18AC                        7E            .byte	$7E
06951 18AD                        3C            .byte	$3C
06952 18AE                        18            .byte	$18
06953 18AF                        00            .byte	0
06954 18B0                        00            .byte	0
06955 18B1                        00            .byte	0
06956                                           ! 1012  0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
06957 18B2                        00            .byte	0
06958 18B3                        00            .byte	0
06959 18B4                        00            .byte	0
06960 18B5                        00            .byte	0
06961 18B6                        18            .byte	$18
06962 18B7                        0C            .byte	$C
06963 18B8                        FE            .byte	$FE
06964 18B9                        0C            .byte	$C
06965 18BA                        18            .byte	$18
06966 18BB                        00            .byte	0
06967 18BC                        00            .byte	0
06968 18BD                        00            .byte	0
06969 18BE                        00            .byte	0
06970 18BF                        00            .byte	0
06971                                           ! 1013  0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
06972 18C0                        00            .byte	0
06973 18C1                        00            .byte	0
06974 18C2                        00            .byte	0
06975 18C3                        00            .byte	0
06976 18C4                        30            .byte	$30
06977 18C5                        60            .byte	$60
06978 18C6                        FE            .byte	$FE
06979 18C7                        60            .byte	$60
06980 18C8                        30            .byte	$30
06981 18C9                        00            .byte	0
06982 18CA                        00            .byte	0
06983 18CB                        00            .byte	0
06984 18CC                        00            .byte	0
06985 18CD                        00            .byte	0
06986                                           ! 1014  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
06987 18CE                        00            .byte	0
06988 18CF                        00            .byte	0
06989 18D0                        00            .byte	0
06990 18D1                        00            .byte	0
06991 18D2                        00            .byte	0
06992 18D3                        C0            .byte	$C0
06993 18D4                        C0            .byte	$C0
06994 18D5                        C0            .byte	$C0
06995 18D6                        FE            .byte	$FE
06996 18D7                        00            .byte	0
06997 18D8                        00            .byte	0
06998 18D9                        00            .byte	0
06999 18DA                        00            .byte	0
07000 18DB                        00            .byte	0
07001                                           ! 1015  0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0xfe, 0x6c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00,
07002 18DC                        00            .byte	0
07003 18DD                        00            .byte	0
07004 18DE                        00            .byte	0
07005 18DF                        00            .byte	0
07006 18E0                        28            .byte	$28
07007 18E1                        6C            .byte	$6C
07008 18E2                        FE            .byte	$FE
07009 18E3                        6C            .byte	$6C
07010 18E4                        28            .byte	$28
07011 18E5                        00            .byte	0
07012 18E6                        00            .byte	0
07013 18E7                        00            .byte	0
07014 18E8                        00            .byte	0
07015 18E9                        00            .byte	0
07016                                           ! 1016  0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
07017 18EA                        00            .byte	0
07018 18EB                        00            .byte	0
07019 18EC                        00            .byte	0
07020 18ED                        10            .byte	$10
07021 18EE                        38            .byte	$38
07022 18EF                        38            .byte	$38
07023 18F0                        7C            .byte	$7C
07024 18F1                        7C            .byte	$7C
07025 18F2                        FE            .byte	$FE
07026 18F3                        FE            .byte	$FE
07027 18F4                        00            .byte	0
07028 18F5                        00            .byte	0
07029 18F6                        00            .byte	0
07030 18F7                        00            .byte	0
07031                                           ! 1017  0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
07032 18F8                        00            .byte	0
07033 18F9                        00            .byte	0
07034 18FA                        00            .byte	0
07035 18FB                        FE            .byte	$FE
07036 18FC                        FE            .byte	$FE
07037 18FD                        7C            .byte	$7C
07038 18FE                        7C            .byte	$7C
07039 18FF                        38            .byte	$38
07040 1900                        38            .byte	$38
07041 1901                        10            .byte	$10
07042 1902                        00            .byte	0
07043 1903                        00            .byte	0
07044 1904                        00            .byte	0
07045 1905                        00            .byte	0
07046                                           ! 1018  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07047 1906                        00            .byte	0
07048 1907                        00            .byte	0
07049 1908                        00            .byte	0
07050 1909                        00            .byte	0
07051 190A                        00            .byte	0
07052 190B                        00            .byte	0
07053 190C                        00            .byte	0
07054 190D                        00            .byte	0
07055 190E                        00            .byte	0
07056 190F                        00            .byte	0
07057 1910                        00            .byte	0
07058 1911                        00            .byte	0
07059 1912                        00            .byte	0
07060 1913                        00            .byte	0
07061                                           ! 1019  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07062 1914                        00            .byte	0
07063 1915                        00            .byte	0
07064 1916                        18            .byte	$18
07065 1917                        3C            .byte	$3C
07066 1918                        3C            .byte	$3C
07067 1919                        3C            .byte	$3C
07068 191A                        18            .byte	$18
07069 191B                        18            .byte	$18
07070 191C                        00            .byte	0
07071 191D                        18            .byte	$18
07072 191E                        18            .byte	$18
07073 191F                        00            .byte	0
07074 1920                        00            .byte	0
07075 1921                        00            .byte	0
07076                                           ! 1020  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07077 1922                        00            .byte	0
07078 1923                        66            .byte	$66
07079 1924                        66            .byte	$66
07080 1925                        66            .byte	$66
07081 1926                        24            .byte	$24
07082 1927                        00            .byte	0
07083 1928                        00            .byte	0
07084 1929                        00            .byte	0
07085 192A                        00            .byte	0
07086 192B                        00            .byte	0
07087 192C                        00            .byte	0
07088 192D                        00            .byte	0
07089 192E                        00            .byte	0
07090 192F                        00            .byte	0
07091                                           ! 1021  0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00,
07092 1930                        00            .byte	0
07093 1931                        00            .byte	0
07094 1932                        6C            .byte	$6C
07095 1933                        6C            .byte	$6C
07096 1934                        FE            .byte	$FE
07097 1935                        6C            .byte	$6C
07098 1936                        6C            .byte	$6C
07099 1937                        6C            .byte	$6C
07100 1938                        FE            .byte	$FE
07101 1939                        6C            .byte	$6C
07102 193A                        6C            .byte	$6C
07103 193B                        00            .byte	0
07104 193C                        00            .byte	0
07105 193D                        00            .byte	0
07106                                           ! 1022  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00,
07107 193E                        18            .byte	$18
07108 193F                        18            .byte	$18
07109 1940                        7C            .byte	$7C
07110 1941                        C6            .byte	$C6
07111 1942                        C2            .byte	$C2
07112 1943                        C0            .byte	$C0
07113 1944                        7C            .byte	$7C
07114 1945                        06            .byte	6
07115 1946                        86            .byte	$86
07116 1947                        C6            .byte	$C6
07117 1948                        7C            .byte	$7C
07118 1949                        18            .byte	$18
07119 194A                        18            .byte	$18
07120 194B                        00            .byte	0
07121                                           ! 1023  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x66, 0xc6, 0x00, 0x00, 0x00,
07122 194C                        00            .byte	0
07123 194D                        00            .byte	0
07124 194E                        00            .byte	0
07125 194F                        00            .byte	0
07126 1950                        C2            .byte	$C2
07127 1951                        C6            .byte	$C6
07128 1952                        0C            .byte	$C
07129 1953                        18            .byte	$18
07130 1954                        30            .byte	$30
07131 1955                        66            .byte	$66
07132 1956                        C6            .byte	$C6
07133 1957                        00            .byte	0
07134 1958                        00            .byte	0
07135 1959                        00            .byte	0
07136                                           ! 1024  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
07137 195A                        00            .byte	0
07138 195B                        00            .byte	0
07139 195C                        38            .byte	$38
07140 195D                        6C            .byte	$6C
07141 195E                        6C            .byte	$6C
07142 195F                        38            .byte	$38
07143 1960                        76            .byte	$76
07144 1961                        DC            .byte	$DC
07145 1962                        CC            .byte	$CC
07146 1963                        CC            .byte	$CC
07147 1964                        76            .byte	$76
07148 1965                        00            .byte	0
07149 1966                        00            .byte	0
07150 1967                        00            .byte	0
07151                                           ! 1025  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07152 1968                        00            .byte	0
07153 1969                        30            .byte	$30
07154 196A                        30            .byte	$30
07155 196B                        30            .byte	$30
07156 196C                        60            .byte	$60
07157 196D                        00            .byte	0
07158 196E                        00            .byte	0
07159 196F                        00            .byte	0
07160 1970                        00            .byte	0
07161 1971                        00            .byte	0
07162 1972                        00            .byte	0
07163 1973                        00            .byte	0
07164 1974                        00            .byte	0
07165 1975                        00            .byte	0
07166                                           ! 1026  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00,
07167 1976                        00            .byte	0
07168 1977                        00            .byte	0
07169 1978                        0C            .byte	$C
07170 1979                        18            .byte	$18
07171 197A                        30            .byte	$30
07172 197B                        30            .byte	$30
07173 197C                        30            .byte	$30
07174 197D                        30            .byte	$30
07175 197E                        30            .byte	$30
07176 197F                        18            .byte	$18
07177 1980                        0C            .byte	$C
07178 1981                        00            .byte	0
07179 1982                        00            .byte	0
07180 1983                        00            .byte	0
07181                                           ! 1027  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00,
07182 1984                        00            .byte	0
07183 1985                        00            .byte	0
07184 1986                        30            .byte	$30
07185 1987                        18            .byte	$18
07186 1988                        0C            .byte	$C
07187 1989                        0C            .byte	$C
07188 198A                        0C            .byte	$C
07189 198B                        0C            .byte	$C
07190 198C                        0C            .byte	$C
07191 198D                        18            .byte	$18
07192 198E                        30            .byte	$30
07193 198F                        00            .byte	0
07194 1990                        00            .byte	0
07195 1991                        00            .byte	0
07196                                           ! 1028  0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00,
07197 1992                        00            .byte	0
07198 1993                        00            .byte	0
07199 1994                        00            .byte	0
07200 1995                        00            .byte	0
07201 1996                        66            .byte	$66
07202 1997                        3C            .byte	$3C
07203 1998                        FF            .byte	$FF
07204 1999                        3C            .byte	$3C
07205 199A                        66            .byte	$66
07206 199B                        00            .byte	0
07207 199C                        00            .byte	0
07208 199D                        00            .byte	0
07209 199E                        00            .byte	0
07210 199F                        00            .byte	0
07211                                           ! 1029  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
07212 19A0                        00            .byte	0
07213 19A1                        00            .byte	0
07214 19A2                        00            .byte	0
07215 19A3                        00            .byte	0
07216 19A4                        18            .byte	$18
07217 19A5                        18            .byte	$18
07218 19A6                        7E            .byte	$7E
07219 19A7                        18            .byte	$18
07220 19A8                        18            .byte	$18
07221 19A9                        00            .byte	0
07222 19AA                        00            .byte	0
07223 19AB                        00            .byte	0
07224 19AC                        00            .byte	0
07225 19AD                        00            .byte	0
07226                                           ! 1030  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00,
07227 19AE                        00            .byte	0
07228 19AF                        00            .byte	0
07229 19B0                        00            .byte	0
07230 19B1                        00            .byte	0
07231 19B2                        00            .byte	0
07232 19B3                        00            .byte	0
07233 19B4                        00            .byte	0
07234 19B5                        00            .byte	0
07235 19B6                        18            .byte	$18
07236 19B7                        18            .byte	$18
07237 19B8                        18            .byte	$18
07238 19B9                        30            .byte	$30
07239 19BA                        00            .byte	0
07240 19BB                        00            .byte	0
07241                                           ! 1031  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07242 19BC                        00            .byte	0
07243 19BD                        00            .byte	0
07244 19BE                        00            .byte	0
07245 19BF                        00            .byte	0
07246 19C0                        00            .byte	0
07247 19C1                        00            .byte	0
07248 19C2                        FE            .byte	$FE
07249 19C3                        00            .byte	0
07250 19C4                        00            .byte	0
07251 19C5                        00            .byte	0
07252 19C6                        00            .byte	0
07253 19C7                        00            .byte	0
07254 19C8                        00            .byte	0
07255 19C9                        00            .byte	0
07256                                           ! 1032  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07257 19CA                        00            .byte	0
07258 19CB                        00            .byte	0
07259 19CC                        00            .byte	0
07260 19CD                        00            .byte	0
07261 19CE                        00            .byte	0
07262 19CF                        00            .byte	0
07263 19D0                        00            .byte	0
07264 19D1                        00            .byte	0
07265 19D2                        00            .byte	0
07266 19D3                        18            .byte	$18
07267 19D4                        18            .byte	$18
07268 19D5                        00            .byte	0
07269 19D6                        00            .byte	0
07270 19D7                        00            .byte	0
07271                                           ! 1033  0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
07272 19D8                        00            .byte	0
07273 19D9                        00            .byte	0
07274 19DA                        02            .byte	2
07275 19DB                        06            .byte	6
07276 19DC                        0C            .byte	$C
07277 19DD                        18            .byte	$18
07278 19DE                        30            .byte	$30
07279 19DF                        60            .byte	$60
07280 19E0                        C0            .byte	$C0
07281 19E1                        80            .byte	$80
07282 19E2                        00            .byte	0
07283 19E3                        00            .byte	0
07284 19E4                        00            .byte	0
07285 19E5                        00            .byte	0
07286                                           ! 1034  0x00, 0x00, 0x7c, 0xc6, 0xce, 0xde, 0xf6, 0xe6, 0xc6, 0xc6
07287 19E6                        00            .byte	0
07288 19E7                        00            .byte	0
07289 19E8                        7C            .byte	$7C
07290 19E9                        C6            .byte	$C6
07291 19EA                        CE            .byte	$CE
07292 19EB                        DE            .byte	$DE
07293 19EC                        F6            .byte	$F6
07294 19ED                        E6            .byte	$E6
07295 19EE                        C6            .byte	$C6
07296                                           ! 1034 , 0x7c, 0x00, 0x00, 0x00,
07297 19EF                        C6            .byte	$C6
07298 19F0                        7C            .byte	$7C
07299 19F1                        00            .byte	0
07300 19F2                        00            .byte	0
07301 19F3                        00            .byte	0
07302                                           ! 1035  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00,
07303 19F4                        00            .byte	0
07304 19F5                        00            .byte	0
07305 19F6                        18            .byte	$18
07306 19F7                        38            .byte	$38
07307 19F8                        78            .byte	$78
07308 19F9                        18            .byte	$18
07309 19FA                        18            .byte	$18
07310 19FB                        18            .byte	$18
07311 19FC                        18            .byte	$18
07312 19FD                        18            .byte	$18
07313 19FE                        7E            .byte	$7E
07314 19FF                        00            .byte	0
07315 1A00                        00            .byte	0
07316 1A01                        00            .byte	0
07317                                           ! 1036  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07318 1A02                        00            .byte	0
07319 1A03                        00            .byte	0
07320 1A04                        7C            .byte	$7C
07321 1A05                        C6            .byte	$C6
07322 1A06                        06            .byte	6
07323 1A07                        0C            .byte	$C
07324 1A08                        18            .byte	$18
07325 1A09                        30            .byte	$30
07326 1A0A                        60            .byte	$60
07327 1A0B                        C6            .byte	$C6
07328 1A0C                        FE            .byte	$FE
07329 1A0D                        00            .byte	0
07330 1A0E                        00            .byte	0
07331 1A0F                        00            .byte	0
07332                                           ! 1037  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07333 1A10                        00            .byte	0
07334 1A11                        00            .byte	0
07335 1A12                        7C            .byte	$7C
07336 1A13                        C6            .byte	$C6
07337 1A14                        06            .byte	6
07338 1A15                        06            .byte	6
07339 1A16                        3C            .byte	$3C
07340 1A17                        06            .byte	6
07341 1A18                        06            .byte	6
07342 1A19                        C6            .byte	$C6
07343 1A1A                        7C            .byte	$7C
07344 1A1B                        00            .byte	0
07345 1A1C                        00            .byte	0
07346 1A1D                        00            .byte	0
07347                                           ! 1038  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00,
07348 1A1E                        00            .byte	0
07349 1A1F                        00            .byte	0
07350 1A20                        0C            .byte	$C
07351 1A21                        1C            .byte	$1C
07352 1A22                        3C            .byte	$3C
07353 1A23                        6C            .byte	$6C
07354 1A24                        CC            .byte	$CC
07355 1A25                        FE            .byte	$FE
07356 1A26                        0C            .byte	$C
07357 1A27                        0C            .byte	$C
07358 1A28                        1E            .byte	$1E
07359 1A29                        00            .byte	0
07360 1A2A                        00            .byte	0
07361 1A2B                        00            .byte	0
07362                                           ! 1039  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07363 1A2C                        00            .byte	0
07364 1A2D                        00            .byte	0
07365 1A2E                        FE            .byte	$FE
07366 1A2F                        C0            .byte	$C0
07367 1A30                        C0            .byte	$C0
07368 1A31                        C0            .byte	$C0
07369 1A32                        FC            .byte	$FC
07370 1A33                        06            .byte	6
07371 1A34                        06            .byte	6
07372 1A35                        C6            .byte	$C6
07373 1A36                        7C            .byte	$7C
07374 1A37                        00            .byte	0
07375 1A38                        00            .byte	0
07376 1A39                        00            .byte	0
07377                                           ! 1040  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07378 1A3A                        00            .byte	0
07379 1A3B                        00            .byte	0
07380 1A3C                        38            .byte	$38
07381 1A3D                        60            .byte	$60
07382 1A3E                        C0            .byte	$C0
07383 1A3F                        C0            .byte	$C0
07384 1A40                        FC            .byte	$FC
07385 1A41                        C6            .byte	$C6
07386 1A42                        C6            .byte	$C6
07387 1A43                        C6            .byte	$C6
07388 1A44                        7C            .byte	$7C
07389 1A45                        00            .byte	0
07390 1A46                        00            .byte	0
07391 1A47                        00            .byte	0
07392                                           ! 1041  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00,
07393 1A48                        00            .byte	0
07394 1A49                        00            .byte	0
07395 1A4A                        FE            .byte	$FE
07396 1A4B                        C6            .byte	$C6
07397 1A4C                        06            .byte	6
07398 1A4D                        0C            .byte	$C
07399 1A4E                        18            .byte	$18
07400 1A4F                        30            .byte	$30
07401 1A50                        30            .byte	$30
07402 1A51                        30            .byte	$30
07403 1A52                        30            .byte	$30
07404 1A53                        00            .byte	0
07405 1A54                        00            .byte	0
07406 1A55                        00            .byte	0
07407                                           ! 1042  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07408 1A56                        00            .byte	0
07409 1A57                        00            .byte	0
07410 1A58                        7C            .byte	$7C
07411 1A59                        C6            .byte	$C6
07412 1A5A                        C6            .byte	$C6
07413 1A5B                        C6            .byte	$C6
07414 1A5C                        7C            .byte	$7C
07415 1A5D                        C6            .byte	$C6
07416 1A5E                        C6            .byte	$C6
07417 1A5F                        C6            .byte	$C6
07418 1A60                        7C            .byte	$7C
07419 1A61                        00            .byte	0
07420 1A62                        00            .byte	0
07421 1A63                        00            .byte	0
07422                                           ! 1043  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00,
07423 1A64                        00            .byte	0
07424 1A65                        00            .byte	0
07425 1A66                        7C            .byte	$7C
07426 1A67                        C6            .byte	$C6
07427 1A68                        C6            .byte	$C6
07428 1A69                        C6            .byte	$C6
07429 1A6A                        7E            .byte	$7E
07430 1A6B                        06            .byte	6
07431 1A6C                        06            .byte	6
07432 1A6D                        0C            .byte	$C
07433 1A6E                        78            .byte	$78
07434 1A6F                        00            .byte	0
07435 1A70                        00            .byte	0
07436 1A71                        00            .byte	0
07437                                           ! 1044  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
07438 1A72                        00            .byte	0
07439 1A73                        00            .byte	0
07440 1A74                        00            .byte	0
07441 1A75                        18            .byte	$18
07442 1A76                        18            .byte	$18
07443 1A77                        00            .byte	0
07444 1A78                        00            .byte	0
07445 1A79                        00            .byte	0
07446 1A7A                        18            .byte	$18
07447 1A7B                        18            .byte	$18
07448 1A7C                        00            .byte	0
07449 1A7D                        00            .byte	0
07450 1A7E                        00            .byte	0
07451 1A7F                        00            .byte	0
07452                                           ! 1045  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
07453 1A80                        00            .byte	0
07454 1A81                        00            .byte	0
07455 1A82                        00            .byte	0
07456 1A83                        18            .byte	$18
07457 1A84                        18            .byte	$18
07458 1A85                        00            .byte	0
07459 1A86                        00            .byte	0
07460 1A87                        00            .byte	0
07461 1A88                        18            .byte	$18
07462 1A89                        18            .byte	$18
07463 1A8A                        30            .byte	$30
07464 1A8B                        00            .byte	0
07465 1A8C                        00            .byte	0
07466 1A8D                        00            .byte	0
07467                                           ! 1046  0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00,
07468 1A8E                        00            .byte	0
07469 1A8F                        00            .byte	0
07470 1A90                        06            .byte	6
07471 1A91                        0C            .byte	$C
07472 1A92                        18            .byte	$18
07473 1A93                        30            .byte	$30
07474 1A94                        60            .byte	$60
07475 1A95                        30            .byte	$30
07476 1A96                        18            .byte	$18
07477 1A97                        0C            .byte	$C
07478 1A98                        06            .byte	6
07479 1A99                        00            .byte	0
07480 1A9A                        00            .byte	0
07481 1A9B                        00            .byte	0
07482                                           ! 1047  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
07483 1A9C                        00            .byte	0
07484 1A9D                        00            .byte	0
07485 1A9E                        00            .byte	0
07486 1A9F                        00            .byte	0
07487 1AA0                        00            .byte	0
07488 1AA1                        7E            .byte	$7E
07489 1AA2                        00            .byte	0
07490 1AA3                        00            .byte	0
07491 1AA4                        7E            .byte	$7E
07492 1AA5                        00            .byte	0
07493 1AA6                        00            .byte	0
07494 1AA7                        00            .byte	0
07495 1AA8                        00            .byte	0
07496 1AA9                        00            .byte	0
07497                                           ! 1048  0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00,
07498 1AAA                        00            .byte	0
07499 1AAB                        00            .byte	0
07500 1AAC                        60            .byte	$60
07501 1AAD                        30            .byte	$30
07502 1AAE                        18            .byte	$18
07503 1AAF                        0C            .byte	$C
07504 1AB0                        06            .byte	6
07505 1AB1                        0C            .byte	$C
07506 1AB2                        18            .byte	$18
07507 1AB3                        30            .byte	$30
07508 1AB4                        60            .byte	$60
07509 1AB5                        00            .byte	0
07510 1AB6                        00            .byte	0
07511 1AB7                        00            .byte	0
07512                                           ! 1049  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
07513 1AB8                        00            .byte	0
07514 1AB9                        00            .byte	0
07515 1ABA                        7C            .byte	$7C
07516 1ABB                        C6            .byte	$C6
07517 1ABC                        C6            .byte	$C6
07518 1ABD                        0C            .byte	$C
07519 1ABE                        18            .byte	$18
07520 1ABF                        18            .byte	$18
07521 1AC0                        00            .byte	0
07522 1AC1                        18            .byte	$18
07523 1AC2                        18            .byte	$18
07524 1AC3                        00            .byte	0
07525 1AC4                        00            .byte	0
07526 1AC5                        00            .byte	0
07527                                           ! 1050  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00,
07528 1AC6                        00            .byte	0
07529 1AC7                        00            .byte	0
07530 1AC8                        7C            .byte	$7C
07531 1AC9                        C6            .byte	$C6
07532 1ACA                        C6            .byte	$C6
07533 1ACB                        DE            .byte	$DE
07534 1ACC                        DE            .byte	$DE
07535 1ACD                        DE            .byte	$DE
07536 1ACE                        DC            .byte	$DC
07537 1ACF                        C0            .byte	$C0
07538 1AD0                        7C            .byte	$7C
07539 1AD1                        00            .byte	0
07540 1AD2                        00            .byte	0
07541 1AD3                        00            .byte	0
07542                                           ! 1051  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07543 1AD4                        00            .byte	0
07544 1AD5                        00            .byte	0
07545 1AD6                        10            .byte	$10
07546 1AD7                        38            .byte	$38
07547 1AD8                        6C            .byte	$6C
07548 1AD9                        C6            .byte	$C6
07549 1ADA                        C6            .byte	$C6
07550 1ADB                        FE            .byte	$FE
07551 1ADC                        C6            .byte	$C6
07552 1ADD                        C6            .byte	$C6
07553 1ADE                        C6            .byte	$C6
07554 1ADF                        00            .byte	0
07555 1AE0                        00            .byte	0
07556 1AE1                        00            .byte	0
07557                                           ! 1052  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00,
07558 1AE2                        00            .byte	0
07559 1AE3                        00            .byte	0
07560 1AE4                        FC            .byte	$FC
07561 1AE5                        66            .byte	$66
07562 1AE6                        66            .byte	$66
07563 1AE7                        66            .byte	$66
07564 1AE8                        7C            .byte	$7C
07565 1AE9                        66            .byte	$66
07566 1AEA                        66            .byte	$66
07567 1AEB                        66            .byte	$66
07568 1AEC                        FC            .byte	$FC
07569 1AED                        00            .byte	0
07570 1AEE                        00            .byte	0
07571 1AEF                        00            .byte	0
07572                                           ! 1053  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00,
07573 1AF0                        00            .byte	0
07574 1AF1                        00            .byte	0
07575 1AF2                        3C            .byte	$3C
07576 1AF3                        66            .byte	$66
07577 1AF4                        C2            .byte	$C2
07578 1AF5                        C0            .byte	$C0
07579 1AF6                        C0            .byte	$C0
07580 1AF7                        C0            .byte	$C0
07581 1AF8                        C2            .byte	$C2
07582 1AF9                        66            .byte	$66
07583 1AFA                        3C            .byte	$3C
07584 1AFB                        00            .byte	0
07585 1AFC                        00            .byte	0
07586 1AFD                        00            .byte	0
07587                                           ! 1054  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00,
07588 1AFE                        00            .byte	0
07589 1AFF                        00            .byte	0
07590 1B00                        F8            .byte	$F8
07591 1B01                        6C            .byte	$6C
07592 1B02                        66            .byte	$66
07593 1B03                        66            .byte	$66
07594 1B04                        66            .byte	$66
07595 1B05                        66            .byte	$66
07596 1B06                        66            .byte	$66
07597 1B07                        6C            .byte	$6C
07598 1B08                        F8            .byte	$F8
07599 1B09                        00            .byte	0
07600 1B0A                        00            .byte	0
07601 1B0B                        00            .byte	0
07602                                           ! 1055  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07603 1B0C                        00            .byte	0
07604 1B0D                        00            .byte	0
07605 1B0E                        FE            .byte	$FE
07606 1B0F                        66            .byte	$66
07607 1B10                        62            .byte	$62
07608 1B11                        68            .byte	$68
07609 1B12                        78            .byte	$78
07610 1B13                        68            .byte	$68
07611 1B14                        62            .byte	$62
07612 1B15                        66            .byte	$66
07613 1B16                        FE            .byte	$FE
07614 1B17                        00            .byte	0
07615 1B18                        00            .byte	0
07616 1B19                        00            .byte	0
07617                                           ! 1056  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07618 1B1A                        00            .byte	0
07619 1B1B                        00            .byte	0
07620 1B1C                        FE            .byte	$FE
07621 1B1D                        66            .byte	$66
07622 1B1E                        62            .byte	$62
07623 1B1F                        68            .byte	$68
07624 1B20                        78            .byte	$78
07625 1B21                        68            .byte	$68
07626 1B22                        60            .byte	$60
07627 1B23                        60            .byte	$60
07628 1B24                        F0            .byte	$F0
07629 1B25                        00            .byte	0
07630 1B26                        00            .byte	0
07631 1B27                        00            .byte	0
07632                                           ! 1057  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xde, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00,
07633 1B28                        00            .byte	0
07634 1B29                        00            .byte	0
07635 1B2A                        3C            .byte	$3C
07636 1B2B                        66            .byte	$66
07637 1B2C                        C2            .byte	$C2
07638 1B2D                        C0            .byte	$C0
07639 1B2E                        C0            .byte	$C0
07640 1B2F                        DE            .byte	$DE
07641 1B30                        C6            .byte	$C6
07642 1B31                        66            .byte	$66
07643 1B32                        3A            .byte	$3A
07644 1B33                        00            .byte	0
07645 1B34                        00            .byte	0
07646 1B35                        00            .byte	0
07647                                           ! 1058  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 
07648 1B36                        00            .byte	0
07649 1B37                        00            .byte	0
07650 1B38                        C6            .byte	$C6
07651 1B39                        C6            .byte	$C6
07652 1B3A                        C6            .byte	$C6
07653 1B3B                        C6            .byte	$C6
07654 1B3C                        FE            .byte	$FE
07655 1B3D                        C6            .byte	$C6
07656 1B3E                        C6            .byte	$C6
07657 1B3F                        C6            .byte	$C6
07658 1B40                        C6            .byte	$C6
07659                                           ! 1058 0x00, 0x00, 0x00,
07660 1B41                        00            .byte	0
07661 1B42                        00            .byte	0
07662 1B43                        00            .byte	0
07663                                           ! 1059  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07664 1B44                        00            .byte	0
07665 1B45                        00            .byte	0
07666 1B46                        3C            .byte	$3C
07667 1B47                        18            .byte	$18
07668 1B48                        18            .byte	$18
07669 1B49                        18            .byte	$18
07670 1B4A                        18            .byte	$18
07671 1B4B                        18            .byte	$18
07672 1B4C                        18            .byte	$18
07673 1B4D                        18            .byte	$18
07674 1B4E                        3C            .byte	$3C
07675 1B4F                        00            .byte	0
07676 1B50                        00            .byte	0
07677 1B51                        00            .byte	0
07678                                           ! 1060  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00,
07679 1B52                        00            .byte	0
07680 1B53                        00            .byte	0
07681 1B54                        1E            .byte	$1E
07682 1B55                        0C            .byte	$C
07683 1B56                        0C            .byte	$C
07684 1B57                        0C            .byte	$C
07685 1B58                        0C            .byte	$C
07686 1B59                        0C            .byte	$C
07687 1B5A                        CC            .byte	$CC
07688 1B5B                        CC            .byte	$CC
07689 1B5C                        78            .byte	$78
07690 1B5D                        00            .byte	0
07691 1B5E                        00            .byte	0
07692 1B5F                        00            .byte	0
07693                                           ! 1061  0x00, 0x00, 0xe6, 0x66, 0x6c, 0x6c, 0x78, 0x6c, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
07694 1B60                        00            .byte	0
07695 1B61                        00            .byte	0
07696 1B62                        E6            .byte	$E6
07697 1B63                        66            .byte	$66
07698 1B64                        6C            .byte	$6C
07699 1B65                        6C            .byte	$6C
07700 1B66                        78            .byte	$78
07701 1B67                        6C            .byte	$6C
07702 1B68                        6C            .byte	$6C
07703 1B69                        66            .byte	$66
07704 1B6A                        E6            .byte	$E6
07705 1B6B                        00            .byte	0
07706 1B6C                        00            .byte	0
07707 1B6D                        00            .byte	0
07708                                           ! 1062  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00,
07709 1B6E                        00            .byte	0
07710 1B6F                        00            .byte	0
07711 1B70                        F0            .byte	$F0
07712 1B71                        60            .byte	$60
07713 1B72                        60            .byte	$60
07714 1B73                        60            .byte	$60
07715 1B74                        60            .byte	$60
07716 1B75                        60            .byte	$60
07717 1B76                        62            .byte	$62
07718 1B77                        66            .byte	$66
07719 1B78                        FE            .byte	$FE
07720 1B79                        00            .byte	0
07721 1B7A                        00            .byte	0
07722 1B7B                        00            .byte	0
07723                                           ! 1063  0x00, 0x00, 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07724 1B7C                        00            .byte	0
07725 1B7D                        00            .byte	0
07726 1B7E                        C6            .byte	$C6
07727 1B7F                        EE            .byte	$EE
07728 1B80                        FE            .byte	$FE
07729 1B81                        FE            .byte	$FE
07730 1B82                        D6            .byte	$D6
07731 1B83                        C6            .byte	$C6
07732 1B84                        C6            .byte	$C6
07733 1B85                        C6            .byte	$C6
07734 1B86                        C6            .byte	$C6
07735 1B87                        00            .byte	0
07736 1B88                        00            .byte	0
07737 1B89                        00            .byte	0
07738                                           ! 1064  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07739 1B8A                        00            .byte	0
07740 1B8B                        00            .byte	0
07741 1B8C                        C6            .byte	$C6
07742 1B8D                        E6            .byte	$E6
07743 1B8E                        F6            .byte	$F6
07744 1B8F                        FE            .byte	$FE
07745 1B90                        DE            .byte	$DE
07746 1B91                        CE            .byte	$CE
07747 1B92                        C6            .byte	$C6
07748 1B93                        C6            .byte	$C6
07749 1B94                        C6            .byte	$C6
07750 1B95                        00            .byte	0
07751 1B96                        00            .byte	0
07752 1B97                        00            .byte	0
07753                                           ! 1065  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
07754 1B98                        00            .byte	0
07755 1B99                        00            .byte	0
07756 1B9A                        38            .byte	$38
07757 1B9B                        6C            .byte	$6C
07758 1B9C                        C6            .byte	$C6
07759 1B9D                        C6            .byte	$C6
07760 1B9E                        C6            .byte	$C6
07761 1B9F                        C6            .byte	$C6
07762 1BA0                        C6            .byte	$C6
07763 1BA1                        6C            .byte	$6C
07764 1BA2                        38            .byte	$38
07765 1BA3                        00            .byte	0
07766 1BA4                        00            .byte	0
07767 1BA5                        00            .byte	0
07768                                           ! 1066  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
07769 1BA6                        00            .byte	0
07770 1BA7                        00            .byte	0
07771 1BA8                        FC            .byte	$FC
07772 1BA9                        66            .byte	$66
07773 1BAA                        66            .byte	$66
07774 1BAB                        66            .byte	$66
07775 1BAC                        7C            .byte	$7C
07776 1BAD                        60            .byte	$60
07777 1BAE                        60            .byte	$60
07778 1BAF                        60            .byte	$60
07779 1BB0                        F0            .byte	$F0
07780 1BB1                        00            .byte	0
07781 1BB2                        00            .byte	0
07782 1BB3                        00            .byte	0
07783                                           ! 1067  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
07784 1BB4                        00            .byte	0
07785 1BB5                        00            .byte	0
07786 1BB6                        7C            .byte	$7C
07787 1BB7                        C6            .byte	$C6
07788 1BB8                        C6            .byte	$C6
07789 1BB9                        C6            .byte	$C6
07790 1BBA                        C6            .byte	$C6
07791 1BBB                        D6            .byte	$D6
07792 1BBC                        DE            .byte	$DE
07793 1BBD                        7C            .byte	$7C
07794 1BBE                        0C            .byte	$C
07795 1BBF                        0E            .byte	$E
07796 1BC0                        00            .byte	0
07797 1BC1                        00            .byte	0
07798                                           ! 1068  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
07799 1BC2                        00            .byte	0
07800 1BC3                        00            .byte	0
07801 1BC4                        FC            .byte	$FC
07802 1BC5                        66            .byte	$66
07803 1BC6                        66            .byte	$66
07804 1BC7                        66            .byte	$66
07805 1BC8                        7C            .byte	$7C
07806 1BC9                        6C            .byte	$6C
07807 1BCA                        66            .byte	$66
07808 1BCB                        66            .byte	$66
07809 1BCC                        E6            .byte	$E6
07810 1BCD                        00            .byte	0
07811 1BCE                        00            .byte	0
07812 1BCF                        00            .byte	0
07813                                           ! 1069  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07814 1BD0                        00            .byte	0
07815 1BD1                        00            .byte	0
07816 1BD2                        7C            .byte	$7C
07817 1BD3                        C6            .byte	$C6
07818 1BD4                        C6            .byte	$C6
07819 1BD5                        60            .byte	$60
07820 1BD6                        38            .byte	$38
07821 1BD7                        0C            .byte	$C
07822 1BD8                        C6            .byte	$C6
07823 1BD9                        C6            .byte	$C6
07824 1BDA                        7C            .byte	$7C
07825 1BDB                        00            .byte	0
07826 1BDC                        00            .byte	0
07827 1BDD                        00            .byte	0
07828                                           ! 1070  0x00, 0x00, 0x7e, 0x7e, 0x5a, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07829 1BDE                        00            .byte	0
07830 1BDF                        00            .byte	0
07831 1BE0                        7E            .byte	$7E
07832 1BE1                        7E            .byte	$7E
07833 1BE2                        5A            .byte	$5A
07834 1BE3                        18            .byte	$18
07835 1BE4                        18            .byte	$18
07836 1BE5                        18            .byte	$18
07837 1BE6                        18            .byte	$18
07838 1BE7                        18            .byte	$18
07839 1BE8                        3C            .byte	$3C
07840 1BE9                        00            .byte	0
07841 1BEA                        00            .byte	0
07842 1BEB                        00            .byte	0
07843                                           ! 1071  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
07844 1BEC                        00            .byte	0
07845 1BED                        00            .byte	0
07846 1BEE                        C6            .byte	$C6
07847 1BEF                        C6            .byte	$C6
07848 1BF0                        C6            .byte	$C6
07849 1BF1                        C6            .byte	$C6
07850 1BF2                        C6            .byte	$C6
07851 1BF3                        C6            .byte	$C6
07852 1BF4                        C6            .byte	$C6
07853 1BF5                        C6            .byte	$C6
07854 1BF6                        7C            .byte	$7C
07855 1BF7                        00            .byte	0
07856 1BF8                        00            .byte	0
07857 1BF9                        00            .byte	0
07858                                           ! 1072  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00, 0x00,
07859 1BFA                        00            .byte	0
07860 1BFB                        00            .byte	0
07861 1BFC                        C6            .byte	$C6
07862 1BFD                        C6            .byte	$C6
07863 1BFE                        C6            .byte	$C6
07864 1BFF                        C6            .byte	$C6
07865 1C00                        C6            .byte	$C6
07866 1C01                        C6            .byte	$C6
07867 1C02                        6C            .byte	$6C
07868 1C03                        38            .byte	$38
07869 1C04                        10            .byte	$10
07870 1C05                        00            .byte	0
07871 1C06                        00            .byte	0
07872 1C07                        00            .byte	0
07873                                           ! 1073  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x7c, 0x6c, 0x00, 0x00, 0x00,
07874 1C08                        00            .byte	0
07875 1C09                        00            .byte	0
07876 1C0A                        C6            .byte	$C6
07877 1C0B                        C6            .byte	$C6
07878 1C0C                        C6            .byte	$C6
07879 1C0D                        C6            .byte	$C6
07880 1C0E                        D6            .byte	$D6
07881 1C0F                        D6            .byte	$D6
07882 1C10                        FE            .byte	$FE
07883 1C11                        7C            .byte	$7C
07884 1C12                        6C            .byte	$6C
07885 1C13                        00            .byte	0
07886 1C14                        00            .byte	0
07887 1C15                        00            .byte	0
07888                                           ! 1074  0x00, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x38, 0x38, 0x6c, 0xc6, 0xc6, 0x00, 0x00, 0x00,
07889 1C16                        00            .byte	0
07890 1C17                        00            .byte	0
07891 1C18                        C6            .byte	$C6
07892 1C19                        C6            .byte	$C6
07893 1C1A                        6C            .byte	$6C
07894 1C1B                        38            .byte	$38
07895 1C1C                        38            .byte	$38
07896 1C1D                        38            .byte	$38
07897 1C1E                        6C            .byte	$6C
07898 1C1F                        C6            .byte	$C6
07899 1C20                        C6            .byte	$C6
07900 1C21                        00            .byte	0
07901 1C22                        00            .byte	0
07902 1C23                        00            .byte	0
07903                                           ! 1075  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
07904 1C24                        00            .byte	0
07905 1C25                        00            .byte	0
07906 1C26                        66            .byte	$66
07907 1C27                        66            .byte	$66
07908 1C28                        66            .byte	$66
07909 1C29                        66            .byte	$66
07910 1C2A                        3C            .byte	$3C
07911 1C2B                        18            .byte	$18
07912 1C2C                        18            .byte	$18
07913 1C2D                        18            .byte	$18
07914 1C2E                        3C            .byte	$3C
07915 1C2F                        00            .byte	0
07916 1C30                        00            .byte	0
07917 1C31                        00            .byte	0
07918                                           ! 1076  0x00, 0x00, 0xfe, 0xc6, 0x8c, 0x18, 0x30, 0x60, 0xc2, 0xc6, 0xfe, 0x00, 0x00, 0x00,
07919 1C32                        00            .byte	0
07920 1C33                        00            .byte	0
07921 1C34                        FE            .byte	$FE
07922 1C35                        C6            .byte	$C6
07923 1C36                        8C            .byte	$8C
07924 1C37                        18            .byte	$18
07925 1C38                        30            .byte	$30
07926 1C39                        60            .byte	$60
07927 1C3A                        C2            .byte	$C2
07928 1C3B                        C6            .byte	$C6
07929 1C3C                        FE            .byte	$FE
07930 1C3D                        00            .byte	0
07931 1C3E                        00            .byte	0
07932 1C3F                        00            .byte	0
07933                                           ! 1077  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00,
07934 1C40                        00            .byte	0
07935 1C41                        00            .byte	0
07936 1C42                        3C            .byte	$3C
07937 1C43                        30            .byte	$30
07938 1C44                        30            .byte	$30
07939 1C45                        30            .byte	$30
07940 1C46                        30            .byte	$30
07941 1C47                        30            .byte	$30
07942 1C48                        30            .byte	$30
07943 1C49                        30            .byte	$30
07944 1C4A                        3C            .byte	$3C
07945 1C4B                        00            .byte	0
07946 1C4C                        00            .byte	0
07947 1C4D                        00            .byte	0
07948                                           ! 1078  0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00,
07949 1C4E                        00            .byte	0
07950 1C4F                        00            .byte	0
07951 1C50                        80            .byte	$80
07952 1C51                        C0            .byte	$C0
07953 1C52                        E0            .byte	$E0
07954 1C53                        70            .byte	$70
07955 1C54                        38            .byte	$38
07956 1C55                        1C            .byte	$1C
07957 1C56                        0E            .byte	$E
07958 1C57                        06            .byte	6
07959 1C58                        02            .byte	2
07960 1C59                        00            .byte	0
07961 1C5A                        00            .byte	0
07962 1C5B                        00            .byte	0
07963                                           ! 1079  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00,
07964 1C5C                        00            .byte	0
07965 1C5D                        00            .byte	0
07966 1C5E                        3C            .byte	$3C
07967 1C5F                        0C            .byte	$C
07968 1C60                        0C            .byte	$C
07969 1C61                        0C            .byte	$C
07970 1C62                        0C            .byte	$C
07971 1C63                        0C            .byte	$C
07972 1C64                        0C            .byte	$C
07973 1C65                        0C            .byte	$C
07974 1C66                        3C            .byte	$3C
07975 1C67                        00            .byte	0
07976 1C68                        00            .byte	0
07977 1C69                        00            .byte	0
07978                                           ! 1080  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
07979 1C6A                        10            .byte	$10
07980 1C6B                        38            .byte	$38
07981 1C6C                        6C            .byte	$6C
07982 1C6D                        C6            .byte	$C6
07983 1C6E                        00            .byte	0
07984 1C6F                        00            .byte	0
07985 1C70                        00            .byte	0
07986 1C71                        00            .byte	0
07987 1C72                        00            .byte	0
07988 1C73                        00            .byte	0
07989 1C74                        00            .byte	0
07990 1C75                        00            .byte	0
07991 1C76                        00            .byte	0
07992 1C77                        00            .byte	0
07993                                           ! 1081  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00,
07994 1C78                        00            .byte	0
07995 1C79                        00            .byte	0
07996 1C7A                        00            .byte	0
07997 1C7B                        00            .byte	0
07998 1C7C                        00            .byte	0
07999 1C7D                        00            .byte	0
08000 1C7E                        00            .byte	0
08001 1C7F                        00            .byte	0
08002 1C80                        00            .byte	0
08003 1C81                        00            .byte	0
08004 1C82                        00            .byte	0
08005 1C83                        00            .byte	0
08006 1C84                        FF            .byte	$FF
08007 1C85                        00            .byte	0
08008                                           ! 1082  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
08009 1C86                        30            .byte	$30
08010 1C87                        30            .byte	$30
08011 1C88                        18            .byte	$18
08012 1C89                        00            .byte	0
08013 1C8A                        00            .byte	0
08014 1C8B                        00            .byte	0
08015 1C8C                        00            .byte	0
08016 1C8D                        00            .byte	0
08017 1C8E                        00            .byte	0
08018 1C8F                        00            .byte	0
08019 1C90                        00            .byte	0
08020 1C91                        00            .byte	0
08021                                           ! 1082 00, 0x00,
08022 1C92                        00            .byte	0
08023 1C93                        00            .byte	0
08024                                           ! 1083  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08025 1C94                        00            .byte	0
08026 1C95                        00            .byte	0
08027 1C96                        00            .byte	0
08028 1C97                        00            .byte	0
08029 1C98                        00            .byte	0
08030 1C99                        78            .byte	$78
08031 1C9A                        0C            .byte	$C
08032 1C9B                        7C            .byte	$7C
08033 1C9C                        CC            .byte	$CC
08034 1C9D                        CC            .byte	$CC
08035 1C9E                        76            .byte	$76
08036 1C9F                        00            .byte	0
08037 1CA0                        00            .byte	0
08038 1CA1                        00            .byte	0
08039                                           ! 1084  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00,
08040 1CA2                        00            .byte	0
08041 1CA3                        00            .byte	0
08042 1CA4                        E0            .byte	$E0
08043 1CA5                        60            .byte	$60
08044 1CA6                        60            .byte	$60
08045 1CA7                        78            .byte	$78
08046 1CA8                        6C            .byte	$6C
08047 1CA9                        66            .byte	$66
08048 1CAA                        66            .byte	$66
08049 1CAB                        66            .byte	$66
08050 1CAC                        7C            .byte	$7C
08051 1CAD                        00            .byte	0
08052 1CAE                        00            .byte	0
08053 1CAF                        00            .byte	0
08054                                           ! 1085  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08055 1CB0                        00            .byte	0
08056 1CB1                        00            .byte	0
08057 1CB2                        00            .byte	0
08058 1CB3                        00            .byte	0
08059 1CB4                        00            .byte	0
08060 1CB5                        7C            .byte	$7C
08061 1CB6                        C6            .byte	$C6
08062 1CB7                        C0            .byte	$C0
08063 1CB8                        C0            .byte	$C0
08064 1CB9                        C6            .byte	$C6
08065 1CBA                        7C            .byte	$7C
08066 1CBB                        00            .byte	0
08067 1CBC                        00            .byte	0
08068 1CBD                        00            .byte	0
08069                                           ! 1086  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08070 1CBE                        00            .byte	0
08071 1CBF                        00            .byte	0
08072 1CC0                        1C            .byte	$1C
08073 1CC1                        0C            .byte	$C
08074 1CC2                        0C            .byte	$C
08075 1CC3                        3C            .byte	$3C
08076 1CC4                        6C            .byte	$6C
08077 1CC5                        CC            .byte	$CC
08078 1CC6                        CC            .byte	$CC
08079 1CC7                        CC            .byte	$CC
08080 1CC8                        76            .byte	$76
08081 1CC9                        00            .byte	0
08082 1CCA                        00            .byte	0
08083 1CCB                        00            .byte	0
08084                                           ! 1087  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08085 1CCC                        00            .byte	0
08086 1CCD                        00            .byte	0
08087 1CCE                        00            .byte	0
08088 1CCF                        00            .byte	0
08089 1CD0                        00            .byte	0
08090 1CD1                        7C            .byte	$7C
08091 1CD2                        C6            .byte	$C6
08092 1CD3                        FE            .byte	$FE
08093 1CD4                        C0            .byte	$C0
08094 1CD5                        C6            .byte	$C6
08095 1CD6                        7C            .byte	$7C
08096 1CD7                        00            .byte	0
08097 1CD8                        00            .byte	0
08098 1CD9                        00            .byte	0
08099                                           ! 1088  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08100 1CDA                        00            .byte	0
08101 1CDB                        00            .byte	0
08102 1CDC                        38            .byte	$38
08103 1CDD                        6C            .byte	$6C
08104 1CDE                        64            .byte	$64
08105 1CDF                        60            .byte	$60
08106 1CE0                        F0            .byte	$F0
08107 1CE1                        60            .byte	$60
08108 1CE2                        60            .byte	$60
08109 1CE3                        60            .byte	$60
08110 1CE4                        F0            .byte	$F0
08111 1CE5                        00            .byte	0
08112 1CE6                        00            .byte	0
08113 1CE7                        00            .byte	0
08114                                           ! 1089  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
08115 1CE8                        00            .byte	0
08116 1CE9                        00            .byte	0
08117 1CEA                        00            .byte	0
08118 1CEB                        00            .byte	0
08119 1CEC                        00            .byte	0
08120 1CED                        76            .byte	$76
08121 1CEE                        CC            .byte	$CC
08122 1CEF                        CC            .byte	$CC
08123 1CF0                        CC            .byte	$CC
08124 1CF1                        7C            .byte	$7C
08125 1CF2                        0C            .byte	$C
08126 1CF3                        CC            .byte	$CC
08127 1CF4                        78            .byte	$78
08128 1CF5                        00            .byte	0
08129                                           ! 1090  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00,
08130 1CF6                        00            .byte	0
08131 1CF7                        00            .byte	0
08132 1CF8                        E0            .byte	$E0
08133 1CF9                        60            .byte	$60
08134 1CFA                        60            .byte	$60
08135 1CFB                        6C            .byte	$6C
08136 1CFC                        76            .byte	$76
08137 1CFD                        66            .byte	$66
08138 1CFE                        66            .byte	$66
08139 1CFF                        66            .byte	$66
08140 1D00                        E6            .byte	$E6
08141 1D01                        00            .byte	0
08142 1D02                        00            .byte	0
08143 1D03                        00            .byte	0
08144                                           ! 1091  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08145 1D04                        00            .byte	0
08146 1D05                        00            .byte	0
08147 1D06                        18            .byte	$18
08148 1D07                        18            .byte	$18
08149 1D08                        00            .byte	0
08150 1D09                        38            .byte	$38
08151 1D0A                        18            .byte	$18
08152 1D0B                        18            .byte	$18
08153 1D0C                        18            .byte	$18
08154 1D0D                        18            .byte	$18
08155 1D0E                        3C            .byte	$3C
08156 1D0F                        00            .byte	0
08157 1D10                        00            .byte	0
08158 1D11                        00            .byte	0
08159                                           ! 1092  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
08160 1D12                        00            .byte	0
08161 1D13                        00            .byte	0
08162 1D14                        06            .byte	6
08163 1D15                        06            .byte	6
08164 1D16                        00            .byte	0
08165 1D17                        0E            .byte	$E
08166 1D18                        06            .byte	6
08167 1D19                        06            .byte	6
08168 1D1A                        06            .byte	6
08169 1D1B                        06            .byte	6
08170 1D1C                        66            .byte	$66
08171 1D1D                        66            .byte	$66
08172 1D1E                        3C            .byte	$3C
08173 1D1F                        00            .byte	0
08174                                           ! 1093  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00,
08175 1D20                        00            .byte	0
08176 1D21                        00            .byte	0
08177 1D22                        E0            .byte	$E0
08178 1D23                        60            .byte	$60
08179 1D24                        60            .byte	$60
08180 1D25                        66            .byte	$66
08181 1D26                        6C            .byte	$6C
08182 1D27                        78            .byte	$78
08183 1D28                        6C            .byte	$6C
08184 1D29                        66            .byte	$66
08185 1D2A                        E6            .byte	$E6
08186 1D2B                        00            .byte	0
08187 1D2C                        00            .byte	0
08188 1D2D                        00            .byte	0
08189                                           ! 1094  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08190 1D2E                        00            .byte	0
08191 1D2F                        00            .byte	0
08192 1D30                        38            .byte	$38
08193 1D31                        18            .byte	$18
08194 1D32                        18            .byte	$18
08195 1D33                        18            .byte	$18
08196 1D34                        18            .byte	$18
08197 1D35                        18            .byte	$18
08198 1D36                        18            .byte	$18
08199 1D37                        18            .byte	$18
08200 1D38                        3C            .byte	$3C
08201 1D39                        00            .byte	0
08202 1D3A                        00            .byte	0
08203 1D3B                        00            .byte	0
08204                                           ! 1095  0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0xc6, 0x00, 0x00, 0x00,
08205 1D3C                        00            .byte	0
08206 1D3D                        00            .byte	0
08207 1D3E                        00            .byte	0
08208 1D3F                        00            .byte	0
08209 1D40                        00            .byte	0
08210 1D41                        EC            .byte	$EC
08211 1D42                        FE            .byte	$FE
08212 1D43                        D6            .byte	$D6
08213 1D44                        D6            .byte	$D6
08214 1D45                        D6            .byte	$D6
08215 1D46                        C6            .byte	$C6
08216 1D47                        00            .byte	0
08217 1D48                        00            .byte	0
08218 1D49                        00            .byte	0
08219                                           ! 1096  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
08220 1D4A                        00            .byte	0
08221 1D4B                        00            .byte	0
08222 1D4C                        00            .byte	0
08223 1D4D                        00            .byte	0
08224 1D4E                        00            .byte	0
08225 1D4F                        DC            .byte	$DC
08226 1D50                        66            .byte	$66
08227 1D51                        66            .byte	$66
08228 1D52                        66            .byte	$66
08229 1D53                        66            .byte	$66
08230 1D54                        66            .byte	$66
08231 1D55                        00            .byte	0
08232 1D56                        00            .byte	0
08233 1D57                        00            .byte	0
08234                                           ! 1097  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08235 1D58                        00            .byte	0
08236 1D59                        00            .byte	0
08237 1D5A                        00            .byte	0
08238 1D5B                        00            .byte	0
08239 1D5C                        00            .byte	0
08240 1D5D                        7C            .byte	$7C
08241 1D5E                        C6            .byte	$C6
08242 1D5F                        C6            .byte	$C6
08243 1D60                        C6            .byte	$C6
08244 1D61                        C6            .byte	$C6
08245 1D62                        7C            .byte	$7C
08246 1D63                        00            .byte	0
08247 1D64                        00            .byte	0
08248 1D65                        00            .byte	0
08249                                           ! 1098  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
08250 1D66                        00            .byte	0
08251 1D67                        00            .byte	0
08252 1D68                        00            .byte	0
08253 1D69                        00            .byte	0
08254 1D6A                        00            .byte	0
08255 1D6B                        DC            .byte	$DC
08256 1D6C                        66            .byte	$66
08257 1D6D                        66            .byte	$66
08258 1D6E                        66            .byte	$66
08259 1D6F                        7C            .byte	$7C
08260 1D70                        60            .byte	$60
08261 1D71                        60            .byte	$60
08262 1D72                        F0            .byte	$F0
08263 1D73                        00            .byte	0
08264                                           ! 1099  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
08265 1D74                        00            .byte	0
08266 1D75                        00            .byte	0
08267 1D76                        00            .byte	0
08268 1D77                        00            .byte	0
08269 1D78                        00            .byte	0
08270 1D79                        76            .byte	$76
08271 1D7A                        CC            .byte	$CC
08272 1D7B                        CC            .byte	$CC
08273 1D7C                        CC            .byte	$CC
08274 1D7D                        7C            .byte	$7C
08275 1D7E                        0C            .byte	$C
08276 1D7F                        0C            .byte	$C
08277 1D80                        1E            .byte	$1E
08278 1D81                        00            .byte	0
08279                                           ! 1100  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00,
08280 1D82                        00            .byte	0
08281 1D83                        00            .byte	0
08282 1D84                        00            .byte	0
08283 1D85                        00            .byte	0
08284 1D86                        00            .byte	0
08285 1D87                        DC            .byte	$DC
08286 1D88                        76            .byte	$76
08287 1D89                        66            .byte	$66
08288 1D8A                        60            .byte	$60
08289 1D8B                        60            .byte	$60
08290 1D8C                        F0            .byte	$F0
08291 1D8D                        00            .byte	0
08292 1D8E                        00            .byte	0
08293 1D8F                        00            .byte	0
08294                                           ! 1101  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x70, 0x1c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08295 1D90                        00            .byte	0
08296 1D91                        00            .byte	0
08297 1D92                        00            .byte	0
08298 1D93                        00            .byte	0
08299 1D94                        00            .byte	0
08300 1D95                        7C            .byte	$7C
08301 1D96                        C6            .byte	$C6
08302 1D97                        70            .byte	$70
08303 1D98                        1C            .byte	$1C
08304 1D99                        C6            .byte	$C6
08305 1D9A                        7C            .byte	$7C
08306 1D9B                        00            .byte	0
08307 1D9C                        00            .byte	0
08308 1D9D                        00            .byte	0
08309                                           ! 1102  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00,
08310 1D9E                        00            .byte	0
08311 1D9F                        00            .byte	0
08312 1DA0                        10            .byte	$10
08313 1DA1                        30            .byte	$30
08314 1DA2                        30            .byte	$30
08315 1DA3                        FC            .byte	$FC
08316 1DA4                        30            .byte	$30
08317 1DA5                        30            .byte	$30
08318 1DA6                        30            .byte	$30
08319 1DA7                        36            .byte	$36
08320 1DA8                        1C            .byte	$1C
08321 1DA9                        00            .byte	0
08322 1DAA                        00            .byte	0
08323 1DAB                        00            .byte	0
08324                                           ! 1103  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08325 1DAC                        00            .byte	0
08326 1DAD                        00            .byte	0
08327 1DAE                        00            .byte	0
08328 1DAF                        00            .byte	0
08329 1DB0                        00            .byte	0
08330 1DB1                        CC            .byte	$CC
08331 1DB2                        CC            .byte	$CC
08332 1DB3                        CC            .byte	$CC
08333 1DB4                        CC            .byte	$CC
08334 1DB5                        CC            .byte	$CC
08335 1DB6                        76            .byte	$76
08336 1DB7                        00            .byte	0
08337 1DB8                        00            .byte	0
08338 1DB9                        00            .byte	0
08339                                           ! 1104  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00,
08340 1DBA                        00            .byte	0
08341 1DBB                        00            .byte	0
08342 1DBC                        00            .byte	0
08343 1DBD                        00            .byte	0
08344 1DBE                        00            .byte	0
08345 1DBF                        66            .byte	$66
08346 1DC0                        66            .byte	$66
08347 1DC1                        66            .byte	$66
08348 1DC2                        66            .byte	$66
08349 1DC3                        3C            .byte	$3C
08350 1DC4                        18            .byte	$18
08351 1DC5                        00            .byte	0
08352 1DC6                        00            .byte	0
08353 1DC7                        00            .byte	0
08354                                           ! 1105  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00,
08355 1DC8                        00            .byte	0
08356 1DC9                        00            .byte	0
08357 1DCA                        00            .byte	0
08358 1DCB                        00            .byte	0
08359 1DCC                        00            .byte	0
08360 1DCD                        C6            .byte	$C6
08361 1DCE                        C6            .byte	$C6
08362 1DCF                        D6            .byte	$D6
08363 1DD0                        D6            .byte	$D6
08364 1DD1                        FE            .byte	$FE
08365 1DD2                        6C            .byte	$6C
08366 1DD3                        00            .byte	0
08367 1DD4                        00            .byte	0
08368 1DD5                        00            .byte	0
08369                                           ! 1106  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00
08370 1DD6                        00            .byte	0
08371 1DD7                        00            .byte	0
08372 1DD8                        00            .byte	0
08373 1DD9                        00            .byte	0
08374 1DDA                        00            .byte	0
08375 1DDB                        C6            .byte	$C6
08376 1DDC                        6C            .byte	$6C
08377 1DDD                        38            .byte	$38
08378 1DDE                        38            .byte	$38
08379 1DDF                        6C            .byte	$6C
08380 1DE0                        C6            .byte	$C6
08381 1DE1                        00            .byte	0
08382 1DE2                        00            .byte	0
08383                                           ! 1106 ,
08384 1DE3                        00            .byte	0
08385                                           ! 1107  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
08386 1DE4                        00            .byte	0
08387 1DE5                        00            .byte	0
08388 1DE6                        00            .byte	0
08389 1DE7                        00            .byte	0
08390 1DE8                        00            .byte	0
08391 1DE9                        C6            .byte	$C6
08392 1DEA                        C6            .byte	$C6
08393 1DEB                        C6            .byte	$C6
08394 1DEC                        C6            .byte	$C6
08395 1DED                        7E            .byte	$7E
08396 1DEE                        06            .byte	6
08397 1DEF                        0C            .byte	$C
08398 1DF0                        F8            .byte	$F8
08399 1DF1                        00            .byte	0
08400                                           ! 1108  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x66, 0xfe, 0x00, 0x00, 0x00,
08401 1DF2                        00            .byte	0
08402 1DF3                        00            .byte	0
08403 1DF4                        00            .byte	0
08404 1DF5                        00            .byte	0
08405 1DF6                        00            .byte	0
08406 1DF7                        FE            .byte	$FE
08407 1DF8                        CC            .byte	$CC
08408 1DF9                        18            .byte	$18
08409 1DFA                        30            .byte	$30
08410 1DFB                        66            .byte	$66
08411 1DFC                        FE            .byte	$FE
08412 1DFD                        00            .byte	0
08413 1DFE                        00            .byte	0
08414 1DFF                        00            .byte	0
08415                                           ! 1109  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00,
08416 1E00                        00            .byte	0
08417 1E01                        00            .byte	0
08418 1E02                        0E            .byte	$E
08419 1E03                        18            .byte	$18
08420 1E04                        18            .byte	$18
08421 1E05                        18            .byte	$18
08422 1E06                        70            .byte	$70
08423 1E07                        18            .byte	$18
08424 1E08                        18            .byte	$18
08425 1E09                        18            .byte	$18
08426 1E0A                        0E            .byte	$E
08427 1E0B                        00            .byte	0
08428 1E0C                        00            .byte	0
08429 1E0D                        00            .byte	0
08430                                           ! 1110  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
08431 1E0E                        00            .byte	0
08432 1E0F                        00            .byte	0
08433 1E10                        18            .byte	$18
08434 1E11                        18            .byte	$18
08435 1E12                        18            .byte	$18
08436 1E13                        18            .byte	$18
08437 1E14                        00            .byte	0
08438 1E15                        18            .byte	$18
08439 1E16                        18            .byte	$18
08440 1E17                        18            .byte	$18
08441 1E18                        18            .byte	$18
08442 1E19                        00            .byte	0
08443 1E1A                        00            .byte	0
08444 1E1B                        00            .byte	0
08445                                           ! 1111  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00,
08446 1E1C                        00            .byte	0
08447 1E1D                        00            .byte	0
08448 1E1E                        70            .byte	$70
08449 1E1F                        18            .byte	$18
08450 1E20                        18            .byte	$18
08451 1E21                        18            .byte	$18
08452 1E22                        0E            .byte	$E
08453 1E23                        18            .byte	$18
08454 1E24                        18            .byte	$18
08455 1E25                        18            .byte	$18
08456 1E26                        70            .byte	$70
08457 1E27                        00            .byte	0
08458 1E28                        00            .byte	0
08459 1E29                        00            .byte	0
08460                                           ! 1112  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
08461 1E2A                        00            .byte	0
08462 1E2B                        00            .byte	0
08463 1E2C                        76            .byte	$76
08464 1E2D                        DC            .byte	$DC
08465 1E2E                        00            .byte	0
08466 1E2F                        00            .byte	0
08467 1E30                        00            .byte	0
08468 1E31                        00            .byte	0
08469 1E32                        00            .byte	0
08470 1E33                        00            .byte	0
08471 1E34                        00            .byte	0
08472 1E35                        00            .byte	0
08473 1E36                        00            .byte	0
08474 1E37                        00            .byte	0
08475                                           ! 1113  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
08476 1E38                        00            .byte	0
08477 1E39                        00            .byte	0
08478 1E3A                        00            .byte	0
08479 1E3B                        00            .byte	0
08480 1E3C                        10            .byte	$10
08481 1E3D                        38            .byte	$38
08482 1E3E                        6C            .byte	$6C
08483 1E3F                        C6            .byte	$C6
08484 1E40                        C6            .byte	$C6
08485 1E41                        FE            .byte	$FE
08486 1E42                        00            .byte	0
08487 1E43                        00            .byte	0
08488 1E44                        00            .byte	0
08489 1E45                        00            .byte	0
08490                                           ! 1114  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00,
08491 1E46                        00            .byte	0
08492 1E47                        00            .byte	0
08493 1E48                        3C            .byte	$3C
08494 1E49                        66            .byte	$66
08495 1E4A                        C2            .byte	$C2
08496 1E4B                        C0            .byte	$C0
08497 1E4C                        C0            .byte	$C0
08498 1E4D                        C2            .byte	$C2
08499 1E4E                        66            .byte	$66
08500 1E4F                        3C            .byte	$3C
08501 1E50                        0C            .byte	$C
08502 1E51                        06            .byte	6
08503 1E52                        7C            .byte	$7C
08504 1E53                        00            .byte	0
08505                                           ! 1115  0x00, 0x00, 0xcc, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08506 1E54                        00            .byte	0
08507 1E55                        00            .byte	0
08508 1E56                        CC            .byte	$CC
08509 1E57                        CC            .byte	$CC
08510 1E58                        00            .byte	0
08511 1E59                        CC            .byte	$CC
08512 1E5A                        CC            .byte	$CC
08513 1E5B                        CC            .byte	$CC
08514 1E5C                        CC            .byte	$CC
08515 1E5D                        CC            .byte	$CC
08516 1E5E                        76            .byte	$76
08517 1E5F                        00            .byte	0
08518 1E60                        00            .byte	0
08519 1E61                        00            .byte	0
08520                                           ! 1116  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08521 1E62                        00            .byte	0
08522 1E63                        0C            .byte	$C
08523 1E64                        18            .byte	$18
08524 1E65                        30            .byte	$30
08525 1E66                        00            .byte	0
08526 1E67                        7C            .byte	$7C
08527 1E68                        C6            .byte	$C6
08528 1E69                        FE            .byte	$FE
08529 1E6A                        C0            .byte	$C0
08530 1E6B                        C6            .byte	$C6
08531 1E6C                        7C            .byte	$7C
08532 1E6D                        00            .byte	0
08533 1E6E                        00            .byte	0
08534 1E6F                        00            .byte	0
08535                                           ! 1117  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08536 1E70                        00            .byte	0
08537 1E71                        10            .byte	$10
08538 1E72                        38            .byte	$38
08539 1E73                        6C            .byte	$6C
08540 1E74                        00            .byte	0
08541 1E75                        78            .byte	$78
08542 1E76                        0C            .byte	$C
08543 1E77                        7C            .byte	$7C
08544 1E78                        CC            .byte	$CC
08545 1E79                        CC            .byte	$CC
08546 1E7A                        76            .byte	$76
08547 1E7B                        00            .byte	0
08548 1E7C                        00            .byte	0
08549 1E7D                        00            .byte	0
08550                                           ! 1118  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08551 1E7E                        00            .byte	0
08552 1E7F                        00            .byte	0
08553 1E80                        CC            .byte	$CC
08554 1E81                        CC            .byte	$CC
08555 1E82                        00            .byte	0
08556 1E83                        78            .byte	$78
08557 1E84                        0C            .byte	$C
08558 1E85                        7C            .byte	$7C
08559 1E86                        CC            .byte	$CC
08560 1E87                        CC            .byte	$CC
08561 1E88                        76            .byte	$76
08562 1E89                        00            .byte	0
08563 1E8A                        00            .byte	0
08564 1E8B                        00            .byte	0
08565                                           ! 1119  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08566 1E8C                        00            .byte	0
08567 1E8D                        60            .byte	$60
08568 1E8E                        30            .byte	$30
08569 1E8F                        18            .byte	$18
08570 1E90                        00            .byte	0
08571 1E91                        78            .byte	$78
08572 1E92                        0C            .byte	$C
08573 1E93                        7C            .byte	$7C
08574 1E94                        CC            .byte	$CC
08575 1E95                        CC            .byte	$CC
08576 1E96                        76            .byte	$76
08577 1E97                        00            .byte	0
08578 1E98                        00            .byte	0
08579 1E99                        00            .byte	0
08580                                           ! 1120  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08581 1E9A                        00            .byte	0
08582 1E9B                        38            .byte	$38
08583 1E9C                        6C            .byte	$6C
08584 1E9D                        38            .byte	$38
08585 1E9E                        00            .byte	0
08586 1E9F                        78            .byte	$78
08587 1EA0                        0C            .byte	$C
08588 1EA1                        7C            .byte	$7C
08589 1EA2                        CC            .byte	$CC
08590 1EA3                        CC            .byte	$CC
08591 1EA4                        76            .byte	$76
08592 1EA5                        00            .byte	0
08593 1EA6                        00            .byte	0
08594 1EA7                        00            .byte	0
08595                                           ! 1121  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00,
08596 1EA8                        00            .byte	0
08597 1EA9                        00            .byte	0
08598 1EAA                        00            .byte	0
08599 1EAB                        00            .byte	0
08600 1EAC                        3C            .byte	$3C
08601 1EAD                        66            .byte	$66
08602 1EAE                        60            .byte	$60
08603 1EAF                        66            .byte	$66
08604 1EB0                        3C            .byte	$3C
08605 1EB1                        0C            .byte	$C
08606 1EB2                        06            .byte	6
08607 1EB3                        3C            .byte	$3C
08608 1EB4                        00            .byte	0
08609 1EB5                        00            .byte	0
08610                                           ! 1122  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08611 1EB6                        00            .byte	0
08612 1EB7                        10            .byte	$10
08613 1EB8                        38            .byte	$38
08614 1EB9                        6C            .byte	$6C
08615 1EBA                        00            .byte	0
08616 1EBB                        7C            .byte	$7C
08617 1EBC                        C6            .byte	$C6
08618 1EBD                        FE            .byte	$FE
08619 1EBE                        C0            .byte	$C0
08620 1EBF                        C6            .byte	$C6
08621 1EC0                        7C            .byte	$7C
08622 1EC1                        00            .byte	0
08623 1EC2                        00            .byte	0
08624 1EC3                        00            .byte	0
08625                                           ! 1123  0x00, 0x00, 0xcc, 0xcc, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08626 1EC4                        00            .byte	0
08627 1EC5                        00            .byte	0
08628 1EC6                        CC            .byte	$CC
08629 1EC7                        CC            .byte	$CC
08630 1EC8                        00            .byte	0
08631 1EC9                        7C            .byte	$7C
08632 1ECA                        C6            .byte	$C6
08633 1ECB                        FE            .byte	$FE
08634 1ECC                        C0            .byte	$C0
08635 1ECD                        C6            .byte	$C6
08636 1ECE                        7C            .byte	$7C
08637 1ECF                        00            .byte	0
08638 1ED0                        00            .byte	0
08639 1ED1                        00            .byte	0
08640                                           ! 1124  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08641 1ED2                        00            .byte	0
08642 1ED3                        60            .byte	$60
08643 1ED4                        30            .byte	$30
08644 1ED5                        18            .byte	$18
08645 1ED6                        00            .byte	0
08646 1ED7                        7C            .byte	$7C
08647 1ED8                        C6            .byte	$C6
08648 1ED9                        FE            .byte	$FE
08649 1EDA                        C0            .byte	$C0
08650 1EDB                        C6            .byte	$C6
08651 1EDC                        7C            .byte	$7C
08652 1EDD                        00            .byte	0
08653 1EDE                        00            .byte	0
08654 1EDF                        00            .byte	0
08655                                           ! 1125  0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08656 1EE0                        00            .byte	0
08657 1EE1                        00            .byte	0
08658 1EE2                        66            .byte	$66
08659 1EE3                        66            .byte	$66
08660 1EE4                        00            .byte	0
08661 1EE5                        38            .byte	$38
08662 1EE6                        18            .byte	$18
08663 1EE7                        18            .byte	$18
08664 1EE8                        18            .byte	$18
08665 1EE9                        18            .byte	$18
08666 1EEA                        3C            .byte	$3C
08667 1EEB                        00            .byte	0
08668 1EEC                        00            .byte	0
08669 1EED                        00            .byte	0
08670                                           ! 1126  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08671 1EEE                        00            .byte	0
08672 1EEF                        18            .byte	$18
08673 1EF0                        3C            .byte	$3C
08674 1EF1                        66            .byte	$66
08675 1EF2                        00            .byte	0
08676 1EF3                        38            .byte	$38
08677 1EF4                        18            .byte	$18
08678 1EF5                        18            .byte	$18
08679 1EF6                        18            .byte	$18
08680 1EF7                        18            .byte	$18
08681 1EF8                        3C            .byte	$3C
08682 1EF9                        00            .byte	0
08683 1EFA                        00            .byte	0
08684 1EFB                        00            .byte	0
08685                                           ! 1127  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08686 1EFC                        00            .byte	0
08687 1EFD                        60            .byte	$60
08688 1EFE                        30            .byte	$30
08689 1EFF                        18            .byte	$18
08690 1F00                        00            .byte	0
08691 1F01                        38            .byte	$38
08692 1F02                        18            .byte	$18
08693 1F03                        18            .byte	$18
08694 1F04                        18            .byte	$18
08695 1F05                        18            .byte	$18
08696 1F06                        3C            .byte	$3C
08697 1F07                        00            .byte	0
08698 1F08                        00            .byte	0
08699 1F09                        00            .byte	0
08700                                           ! 1128  0x00, 0xc6, 0xc6, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08701 1F0A                        00            .byte	0
08702 1F0B                        C6            .byte	$C6
08703 1F0C                        C6            .byte	$C6
08704 1F0D                        10            .byte	$10
08705 1F0E                        38            .byte	$38
08706 1F0F                        6C            .byte	$6C
08707 1F10                        C6            .byte	$C6
08708 1F11                        C6            .byte	$C6
08709 1F12                        FE            .byte	$FE
08710 1F13                        C6            .byte	$C6
08711 1F14                        C6            .byte	$C6
08712 1F15                        00            .byte	0
08713 1F16                        00            .byte	0
08714 1F17                        00            .byte	0
08715                                           ! 1129  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00, 0x00, 0x00,
08716 1F18                        38            .byte	$38
08717 1F19                        6C            .byte	$6C
08718 1F1A                        38            .byte	$38
08719 1F1B                        00            .byte	0
08720 1F1C                        38            .byte	$38
08721 1F1D                        6C            .byte	$6C
08722 1F1E                        C6            .byte	$C6
08723 1F1F                        C6            .byte	$C6
08724 1F20                        FE            .byte	$FE
08725 1F21                        C6            .byte	$C6
08726 1F22                        C6            .byte	$C6
08727 1F23                        00            .byte	0
08728 1F24                        00            .byte	0
08729 1F25                        00            .byte	0
08730                                           ! 1130  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00,
08731 1F26                        18            .byte	$18
08732 1F27                        30            .byte	$30
08733 1F28                        60            .byte	$60
08734 1F29                        00            .byte	0
08735 1F2A                        FE            .byte	$FE
08736 1F2B                        66            .byte	$66
08737 1F2C                        60            .byte	$60
08738 1F2D                        7C            .byte	$7C
08739 1F2E                        60            .byte	$60
08740 1F2F                        66            .byte	$66
08741 1F30                        FE            .byte	$FE
08742 1F31                        00            .byte	0
08743 1F32                        00            .byte	0
08744 1F33                        00            .byte	0
08745                                           ! 1131  0x00,
08746                                           ! 1131  0x00, 0x00, 0x00, 0xcc, 0x76, 0x36, 0x7e, 0xd8, 0xd8, 0x6e, 0x00, 0x00, 0x00,
08747 1F34                        00            .byte	0
08748 1F35                        00            .byte	0
08749 1F36                        00            .byte	0
08750 1F37                        00            .byte	0
08751 1F38                        CC            .byte	$CC
08752 1F39                        76            .byte	$76
08753 1F3A                        36            .byte	$36
08754 1F3B                        7E            .byte	$7E
08755 1F3C                        D8            .byte	$D8
08756 1F3D                        D8            .byte	$D8
08757 1F3E                        6E            .byte	$6E
08758 1F3F                        00            .byte	0
08759 1F40                        00            .byte	0
08760 1F41                        00            .byte	0
08761                                           ! 1132  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00,
08762 1F42                        00            .byte	0
08763 1F43                        00            .byte	0
08764 1F44                        3E            .byte	$3E
08765 1F45                        6C            .byte	$6C
08766 1F46                        CC            .byte	$CC
08767 1F47                        CC            .byte	$CC
08768 1F48                        FE            .byte	$FE
08769 1F49                        CC            .byte	$CC
08770 1F4A                        CC            .byte	$CC
08771 1F4B                        CC            .byte	$CC
08772 1F4C                        CE            .byte	$CE
08773 1F4D                        00            .byte	0
08774 1F4E                        00            .byte	0
08775 1F4F                        00            .byte	0
08776                                           ! 1133  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08777 1F50                        00            .byte	0
08778 1F51                        10            .byte	$10
08779 1F52                        38            .byte	$38
08780 1F53                        6C            .byte	$6C
08781 1F54                        00            .byte	0
08782 1F55                        7C            .byte	$7C
08783 1F56                        C6            .byte	$C6
08784 1F57                        C6            .byte	$C6
08785 1F58                        C6            .byte	$C6
08786 1F59                        C6            .byte	$C6
08787 1F5A                        7C            .byte	$7C
08788 1F5B                        00            .byte	0
08789 1F5C                        00            .byte	0
08790 1F5D                        00            .byte	0
08791                                           ! 1134  0x00, 0x00, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08792 1F5E                        00            .byte	0
08793 1F5F                        00            .byte	0
08794 1F60                        C6            .byte	$C6
08795 1F61                        C6            .byte	$C6
08796 1F62                        00            .byte	0
08797 1F63                        7C            .byte	$7C
08798 1F64                        C6            .byte	$C6
08799 1F65                        C6            .byte	$C6
08800 1F66                        C6            .byte	$C6
08801 1F67                        C6            .byte	$C6
08802 1F68                        7C            .byte	$7C
08803 1F69                        00            .byte	0
08804 1F6A                        00            .byte	0
08805 1F6B                        00            .byte	0
08806                                           ! 1135  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08807 1F6C                        00            .byte	0
08808 1F6D                        60            .byte	$60
08809 1F6E                        30            .byte	$30
08810 1F6F                        18            .byte	$18
08811 1F70                        00            .byte	0
08812 1F71                        7C            .byte	$7C
08813 1F72                        C6            .byte	$C6
08814 1F73                        C6            .byte	$C6
08815 1F74                        C6            .byte	$C6
08816 1F75                        C6            .byte	$C6
08817 1F76                        7C            .byte	$7C
08818 1F77                        00            .byte	0
08819 1F78                        00            .byte	0
08820 1F79                        00            .byte	0
08821                                           ! 1136  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08822 1F7A                        00            .byte	0
08823 1F7B                        30            .byte	$30
08824 1F7C                        78            .byte	$78
08825 1F7D                        CC            .byte	$CC
08826 1F7E                        00            .byte	0
08827 1F7F                        CC            .byte	$CC
08828 1F80                        CC            .byte	$CC
08829 1F81                        CC            .byte	$CC
08830 1F82                        CC            .byte	$CC
08831 1F83                        CC            .byte	$CC
08832 1F84                        76            .byte	$76
08833 1F85                        00            .byte	0
08834 1F86                        00            .byte	0
08835 1F87                        00            .byte	0
08836                                           ! 1137  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08837 1F88                        00            .byte	0
08838 1F89                        60            .byte	$60
08839 1F8A                        30            .byte	$30
08840 1F8B                        18            .byte	$18
08841 1F8C                        00            .byte	0
08842 1F8D                        CC            .byte	$CC
08843 1F8E                        CC            .byte	$CC
08844 1F8F                        CC            .byte	$CC
08845 1F90                        CC            .byte	$CC
08846 1F91                        CC            .byte	$CC
08847 1F92                        76            .byte	$76
08848 1F93                        00            .byte	0
08849 1F94                        00            .byte	0
08850 1F95                        00            .byte	0
08851                                           ! 1138  0x00, 0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
08852 1F96                        00            .byte	0
08853 1F97                        00            .byte	0
08854 1F98                        C6            .byte	$C6
08855 1F99                        C6            .byte	$C6
08856 1F9A                        00            .byte	0
08857 1F9B                        C6            .byte	$C6
08858 1F9C                        C6            .byte	$C6
08859 1F9D                        C6            .byte	$C6
08860 1F9E                        C6            .byte	$C6
08861 1F9F                        7E            .byte	$7E
08862 1FA0                        06            .byte	6
08863 1FA1                        0C            .byte	$C
08864 1FA2                        78            .byte	$78
08865 1FA3                        00            .byte	0
08866                                           ! 1139  0x00, 0xc6, 0xc6, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
08867 1FA4                        00            .byte	0
08868 1FA5                        C6            .byte	$C6
08869 1FA6                        C6            .byte	$C6
08870 1FA7                        38            .byte	$38
08871 1FA8                        6C            .byte	$6C
08872 1FA9                        C6            .byte	$C6
08873 1FAA                        C6            .byte	$C6
08874 1FAB                        C6            .byte	$C6
08875 1FAC                        C6            .byte	$C6
08876 1FAD                        6C            .byte	$6C
08877 1FAE                        38            .byte	$38
08878 1FAF                        00            .byte	0
08879 1FB0                        00            .byte	0
08880 1FB1                        00            .byte	0
08881                                           ! 1140  0x00, 0xc6, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
08882 1FB2                        00            .byte	0
08883 1FB3                        C6            .byte	$C6
08884 1FB4                        C6            .byte	$C6
08885 1FB5                        00            .byte	0
08886 1FB6                        C6            .byte	$C6
08887 1FB7                        C6            .byte	$C6
08888 1FB8                        C6            .byte	$C6
08889 1FB9                        C6            .byte	$C6
08890 1FBA                        C6            .byte	$C6
08891 1FBB                        C6            .byte	$C6
08892 1FBC                        7C            .byte	$7C
08893 1FBD                        00            .byte	0
08894 1FBE                        00            .byte	0
08895 1FBF                        00            .byte	0
08896                                           ! 1141  0x00, 0x18, 0x18, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00,
08897 1FC0                        00            .byte	0
08898 1FC1                        18            .byte	$18
08899 1FC2                        18            .byte	$18
08900 1FC3                        3C            .byte	$3C
08901 1FC4                        66            .byte	$66
08902 1FC5                        60            .byte	$60
08903 1FC6                        60            .byte	$60
08904 1FC7                        66            .byte	$66
08905 1FC8                        3C            .byte	$3C
08906 1FC9                        18            .byte	$18
08907 1FCA                        18            .byte	$18
08908 1FCB                        00            .byte	0
08909 1FCC                        00            .byte	0
08910 1FCD                        00            .byte	0
08911                                           ! 1142  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00,
08912 1FCE                        00            .byte	0
08913 1FCF                        38            .byte	$38
08914 1FD0                        6C            .byte	$6C
08915 1FD1                        64            .byte	$64
08916 1FD2                        60            .byte	$60
08917 1FD3                        F0            .byte	$F0
08918 1FD4                        60            .byte	$60
08919 1FD5                        60            .byte	$60
08920 1FD6                        60            .byte	$60
08921 1FD7                        E6            .byte	$E6
08922 1FD8                        FC            .byte	$FC
08923 1FD9                        00            .byte	0
08924 1FDA                        00            .byte	0
08925 1FDB                        00            .byte	0
08926                                           ! 1143  0x00, 0x00, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00,
08927 1FDC                        00            .byte	0
08928 1FDD                        00            .byte	0
08929 1FDE                        66            .byte	$66
08930 1FDF                        66            .byte	$66
08931 1FE0                        3C            .byte	$3C
08932 1FE1                        18            .byte	$18
08933 1FE2                        7E            .byte	$7E
08934 1FE3                        18            .byte	$18
08935 1FE4                        7E            .byte	$7E
08936 1FE5                        18            .byte	$18
08937 1FE6                        18            .byte	$18
08938 1FE7                        00            .byte	0
08939 1FE8                        00            .byte	0
08940 1FE9                        00            .byte	0
08941                                           ! 1144  0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc4, 0xcc, 0xde, 0xcc, 0xcc, 0xc6, 0x00, 0x00, 0x00,
08942 1FEA                        00            .byte	0
08943 1FEB                        F8            .byte	$F8
08944 1FEC                        CC            .byte	$CC
08945 1FED                        CC            .byte	$CC
08946 1FEE                        F8            .byte	$F8
08947 1FEF                        C4            .byte	$C4
08948 1FF0                        CC            .byte	$CC
08949 1FF1                        DE            .byte	$DE
08950 1FF2                        CC            .byte	$CC
08951 1FF3                        CC            .byte	$CC
08952 1FF4                        C6            .byte	$C6
08953 1FF5                        00            .byte	0
08954 1FF6                        00            .byte	0
08955 1FF7                        00            .byte	0
08956                                           ! 1145  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00,
08957 1FF8                        00            .byte	0
08958 1FF9                        0E            .byte	$E
08959 1FFA                        1B            .byte	$1B
08960 1FFB                        18            .byte	$18
08961 1FFC                        18            .byte	$18
08962 1FFD                        18            .byte	$18
08963 1FFE                        7E            .byte	$7E
08964 1FFF                        18            .byte	$18
08965 2000                        18            .byte	$18
08966 2001                        18            .byte	$18
08967 2002                        18            .byte	$18
08968 2003                        D8            .byte	$D8
08969 2004                        70            .byte	$70
08970 2005                        00            .byte	0
08971                                           ! 1146  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
08972 2006                        00            .byte	0
08973 2007                        18            .byte	$18
08974 2008                        30            .byte	$30
08975 2009                        60            .byte	$60
08976 200A                        00            .byte	0
08977 200B                        78            .byte	$78
08978 200C                        0C            .byte	$C
08979 200D                        7C            .byte	$7C
08980 200E                        CC            .byte	$CC
08981 200F                        CC            .byte	$CC
08982 2010                        76            .byte	$76
08983 2011                        00            .byte	0
08984 2012                        00            .byte	0
08985 2013                        00            .byte	0
08986                                           ! 1147  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00,
08987 2014                        00            .byte	0
08988 2015                        0C            .byte	$C
08989 2016                        18            .byte	$18
08990 2017                        30            .byte	$30
08991 2018                        00            .byte	0
08992 2019                        38            .byte	$38
08993 201A                        18            .byte	$18
08994 201B                        18            .byte	$18
08995 201C                        18            .byte	$18
08996 201D                        18            .byte	$18
08997 201E                        3C            .byte	$3C
08998 201F                        00            .byte	0
08999 2020                        00            .byte	0
09000 2021                        00            .byte	0
09001                                           ! 1148  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09002 2022                        00            .byte	0
09003 2023                        18            .byte	$18
09004 2024                        30            .byte	$30
09005 2025                        60            .byte	$60
09006 2026                        00            .byte	0
09007 2027                        7C            .byte	$7C
09008 2028                        C6            .byte	$C6
09009 2029                        C6            .byte	$C6
09010 202A                        C6            .byte	$C6
09011 202B                        C6            .byte	$C6
09012 202C                        7C            .byte	$7C
09013 202D                        00            .byte	0
09014 202E                        00            .byte	0
09015 202F                        00            .byte	0
09016                                           ! 1149  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00,
09017 2030                        00            .byte	0
09018 2031                        18            .byte	$18
09019 2032                        30            .byte	$30
09020 2033                        60            .byte	$60
09021 2034                        00            .byte	0
09022 2035                        CC            .byte	$CC
09023 2036                        CC            .byte	$CC
09024 2037                        CC            .byte	$CC
09025 2038                        CC            .byte	$CC
09026 2039                        CC            .byte	$CC
09027 203A                        76            .byte	$76
09028 203B                        00            .byte	0
09029 203C                        00            .byte	0
09030 203D                        00            .byte	0
09031                                           ! 1150  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00,
09032 203E                        00            .byte	0
09033 203F                        00            .byte	0
09034 2040                        76            .byte	$76
09035 2041                        DC            .byte	$DC
09036 2042                        00            .byte	0
09037 2043                        DC            .byte	$DC
09038 2044                        66            .byte	$66
09039 2045                        66            .byte	$66
09040 2046                        66            .byte	$66
09041 2047                        66            .byte	$66
09042 2048                        66            .byte	$66
09043 2049                        00            .byte	0
09044 204A                        00            .byte	0
09045 204B                        00            .byte	0
09046                                           ! 1151  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0x00, 0x00, 0x00,
09047 204C                        76            .byte	$76
09048 204D                        DC            .byte	$DC
09049 204E                        00            .byte	0
09050 204F                        C6            .byte	$C6
09051 2050                        E6            .byte	$E6
09052 2051                        F6            .byte	$F6
09053 2052                        FE            .byte	$FE
09054 2053                        DE            .byte	$DE
09055 2054                        CE            .byte	$CE
09056 2055                        C6            .byte	$C6
09057 2056                        C6            .byte	$C6
09058 2057                        00            .byte	0
09059 2058                        00            .byte	0
09060 2059                        00            .byte	0
09061                                           ! 1152  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09062 205A                        00            .byte	0
09063 205B                        3C            .byte	$3C
09064 205C                        6C            .byte	$6C
09065 205D                        6C            .byte	$6C
09066 205E                        3E            .byte	$3E
09067 205F                        00            .byte	0
09068 2060                        7E            .byte	$7E
09069 2061                        00            .byte	0
09070 2062                        00            .byte	0
09071 2063                        00            .byte	0
09072 2064                        00            .byte	0
09073 2065                        00            .byte	0
09074 2066                        00            .byte	0
09075 2067                        00            .byte	0
09076                                           ! 1153  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09077 2068                        00            .byte	0
09078 2069                        38            .byte	$38
09079 206A                        6C            .byte	$6C
09080 206B                        6C            .byte	$6C
09081 206C                        38            .byte	$38
09082 206D                        00            .byte	0
09083 206E                        7C            .byte	$7C
09084 206F                        00            .byte	0
09085 2070                        00            .byte	0
09086 2071                        00            .byte	0
09087 2072                        00            .byte	0
09088 2073                        00            .byte	0
09089 2074                        00            .byte	0
09090 2075                        00            .byte	0
09091                                           ! 1154  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00,
09092 2076                        00            .byte	0
09093 2077                        00            .byte	0
09094 2078                        30            .byte	$30
09095 2079                        30            .byte	$30
09096 207A                        00            .byte	0
09097 207B                        30            .byte	$30
09098 207C                        30            .byte	$30
09099 207D                        60            .byte	$60
09100 207E                        C6            .byte	$C6
09101 207F                        C6            .byte	$C6
09102 2080                        7C            .byte	$7C
09103 2081                        00            .byte	0
09104 2082                        00            .byte	0
09105 2083                        00            .byte	0
09106                                           ! 1155  0x00, 0x00, 0
09107 2084                        00            .byte	0
09108 2085                        00            .byte	0
09109                                           ! 1155 x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
09110 2086                        00            .byte	0
09111 2087                        00            .byte	0
09112 2088                        00            .byte	0
09113 2089                        00            .byte	0
09114 208A                        FE            .byte	$FE
09115 208B                        C0            .byte	$C0
09116 208C                        C0            .byte	$C0
09117 208D                        C0            .byte	$C0
09118 208E                        00            .byte	0
09119 208F                        00            .byte	0
09120 2090                        00            .byte	0
09121 2091                        00            .byte	0
09122                                           ! 1156  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
09123 2092                        00            .byte	0
09124 2093                        00            .byte	0
09125 2094                        00            .byte	0
09126 2095                        00            .byte	0
09127 2096                        00            .byte	0
09128 2097                        00            .byte	0
09129 2098                        FE            .byte	$FE
09130 2099                        06            .byte	6
09131 209A                        06            .byte	6
09132 209B                        06            .byte	6
09133 209C                        00            .byte	0
09134 209D                        00            .byte	0
09135 209E                        00            .byte	0
09136 209F                        00            .byte	0
09137                                           ! 1157  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x60, 0xdc, 0x86, 0x0c, 0x18, 0x3e, 0x00,
09138 20A0                        00            .byte	0
09139 20A1                        C0            .byte	$C0
09140 20A2                        C0            .byte	$C0
09141 20A3                        C6            .byte	$C6
09142 20A4                        CC            .byte	$CC
09143 20A5                        D8            .byte	$D8
09144 20A6                        30            .byte	$30
09145 20A7                        60            .byte	$60
09146 20A8                        DC            .byte	$DC
09147 20A9                        86            .byte	$86
09148 20AA                        0C            .byte	$C
09149 20AB                        18            .byte	$18
09150 20AC                        3E            .byte	$3E
09151 20AD                        00            .byte	0
09152                                           ! 1158  0x00, 0xc0, 0xc0, 0xc6, 0xcc, 0xd8, 0x30, 0x66, 0xce, 0x9e, 0x3e, 0x06, 0x06, 0x00,
09153 20AE                        00            .byte	0
09154 20AF                        C0            .byte	$C0
09155 20B0                        C0            .byte	$C0
09156 20B1                        C6            .byte	$C6
09157 20B2                        CC            .byte	$CC
09158 20B3                        D8            .byte	$D8
09159 20B4                        30            .byte	$30
09160 20B5                        66            .byte	$66
09161 20B6                        CE            .byte	$CE
09162 20B7                        9E            .byte	$9E
09163 20B8                        3E            .byte	$3E
09164 20B9                        06            .byte	6
09165 20BA                        06            .byte	6
09166 20BB                        00            .byte	0
09167                                           ! 1159  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00,
09168 20BC                        00            .byte	0
09169 20BD                        00            .byte	0
09170 20BE                        18            .byte	$18
09171 20BF                        18            .byte	$18
09172 20C0                        00            .byte	0
09173 20C1                        18            .byte	$18
09174 20C2                        18            .byte	$18
09175 20C3                        3C            .byte	$3C
09176 20C4                        3C            .byte	$3C
09177 20C5                        3C            .byte	$3C
09178 20C6                        18            .byte	$18
09179 20C7                        00            .byte	0
09180 20C8                        00            .byte	0
09181 20C9                        00            .byte	0
09182                                           ! 1160  0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
09183 20CA                        00            .byte	0
09184 20CB                        00            .byte	0
09185 20CC                        00            .byte	0
09186 20CD                        00            .byte	0
09187 20CE                        36            .byte	$36
09188 20CF                        6C            .byte	$6C
09189 20D0                        D8            .byte	$D8
09190 20D1                        6C            .byte	$6C
09191 20D2                        36            .byte	$36
09192 20D3                        00            .byte	0
09193 20D4                        00            .byte	0
09194 20D5                        00            .byte	0
09195 20D6                        00            .byte	0
09196 20D7                        00            .byte	0
09197                                           ! 1161  0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00,
09198 20D8                        00            .byte	0
09199 20D9                        00            .byte	0
09200 20DA                        00            .byte	0
09201 20DB                        00            .byte	0
09202 20DC                        D8            .byte	$D8
09203 20DD                        6C            .byte	$6C
09204 20DE                        36            .byte	$36
09205 20DF                        6C            .byte	$6C
09206 20E0                        D8            .byte	$D8
09207 20E1                        00            .byte	0
09208 20E2                        00            .byte	0
09209 20E3                        00            .byte	0
09210 20E4                        00            .byte	0
09211 20E5                        00            .byte	0
09212                                           ! 1162  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44,
09213 20E6                        11            .byte	$11
09214 20E7                        44            .byte	$44
09215 20E8                        11            .byte	$11
09216 20E9                        44            .byte	$44
09217 20EA                        11            .byte	$11
09218 20EB                        44            .byte	$44
09219 20EC                        11            .byte	$11
09220 20ED                        44            .byte	$44
09221 20EE                        11            .byte	$11
09222 20EF                        44            .byte	$44
09223 20F0                        11            .byte	$11
09224 20F1                        44            .byte	$44
09225 20F2                        11            .byte	$11
09226 20F3                        44            .byte	$44
09227                                           ! 1163  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
09228 20F4                        55            .byte	$55
09229 20F5                        AA            .byte	$AA
09230 20F6                        55            .byte	$55
09231 20F7                        AA            .byte	$AA
09232 20F8                        55            .byte	$55
09233 20F9                        AA            .byte	$AA
09234 20FA                        55            .byte	$55
09235 20FB                        AA            .byte	$AA
09236 20FC                        55            .byte	$55
09237 20FD                        AA            .byte	$AA
09238 20FE                        55            .byte	$55
09239 20FF                        AA            .byte	$AA
09240 2100                        55            .byte	$55
09241 2101                        AA            .byte	$AA
09242                                           ! 1164  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
09243 2102                        DD            .byte	$DD
09244 2103                        77            .byte	$77
09245 2104                        DD            .byte	$DD
09246 2105                        77            .byte	$77
09247 2106                        DD            .byte	$DD
09248 2107                        77            .byte	$77
09249 2108                        DD            .byte	$DD
09250 2109                        77            .byte	$77
09251 210A                        DD            .byte	$DD
09252 210B                        77            .byte	$77
09253 210C                        DD            .byte	$DD
09254 210D                        77            .byte	$77
09255 210E                        DD            .byte	$DD
09256 210F                        77            .byte	$77
09257                                           ! 1165  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09258 2110                        18            .byte	$18
09259 2111                        18            .byte	$18
09260 2112                        18            .byte	$18
09261 2113                        18            .byte	$18
09262 2114                        18            .byte	$18
09263 2115                        18            .byte	$18
09264 2116                        18            .byte	$18
09265 2117                        18            .byte	$18
09266 2118                        18            .byte	$18
09267 2119                        18            .byte	$18
09268 211A                        18            .byte	$18
09269 211B                        18            .byte	$18
09270 211C                        18            .byte	$18
09271 211D                        18            .byte	$18
09272                                           ! 1166  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09273 211E                        18            .byte	$18
09274 211F                        18            .byte	$18
09275 2120                        18            .byte	$18
09276 2121                        18            .byte	$18
09277 2122                        18            .byte	$18
09278 2123                        18            .byte	$18
09279 2124                        18            .byte	$18
09280 2125                        F8            .byte	$F8
09281 2126                        18            .byte	$18
09282 2127                        18            .byte	$18
09283 2128                        18            .byte	$18
09284 2129                        18            .byte	$18
09285 212A                        18            .byte	$18
09286 212B                        18            .byte	$18
09287                                           ! 1167  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09288 212C                        18            .byte	$18
09289 212D                        18            .byte	$18
09290 212E                        18            .byte	$18
09291 212F                        18            .byte	$18
09292 2130                        18            .byte	$18
09293 2131                        F8            .byte	$F8
09294 2132                        18            .byte	$18
09295 2133                        F8            .byte	$F8
09296 2134                        18            .byte	$18
09297 2135                        18            .byte	$18
09298 2136                        18            .byte	$18
09299 2137                        18            .byte	$18
09300 2138                        18            .byte	$18
09301 2139                        18            .byte	$18
09302                                           ! 1168  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09303 213A                        36            .byte	$36
09304 213B                        36            .byte	$36
09305 213C                        36            .byte	$36
09306 213D                        36            .byte	$36
09307 213E                        36            .byte	$36
09308 213F                        36            .byte	$36
09309 2140                        36            .byte	$36
09310 2141                        F6            .byte	$F6
09311 2142                        36            .byte	$36
09312 2143                        36            .byte	$36
09313 2144                        36            .byte	$36
09314 2145                        36            .byte	$36
09315 2146                        36            .byte	$36
09316 2147                        36            .byte	$36
09317                                           ! 1169  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09318 2148                        00            .byte	0
09319 2149                        00            .byte	0
09320 214A                        00            .byte	0
09321 214B                        00            .byte	0
09322 214C                        00            .byte	0
09323 214D                        00            .byte	0
09324 214E                        00            .byte	0
09325 214F                        FE            .byte	$FE
09326 2150                        36            .byte	$36
09327 2151                        36            .byte	$36
09328 2152                        36            .byte	$36
09329 2153                        36            .byte	$36
09330 2154                        36            .byte	$36
09331 2155                        36            .byte	$36
09332                                           ! 1170  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09333 2156                        00            .byte	0
09334 2157                        00            .byte	0
09335 2158                        00            .byte	0
09336 2159                        00            .byte	0
09337 215A                        00            .byte	0
09338 215B                        F8            .byte	$F8
09339 215C                        18            .byte	$18
09340 215D                        F8            .byte	$F8
09341 215E                        18            .byte	$18
09342 215F                        18            .byte	$18
09343 2160                        18            .byte	$18
09344 2161                        18            .byte	$18
09345 2162                        18            .byte	$18
09346 2163                        18            .byte	$18
09347                                           ! 1171  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09348 2164                        36            .byte	$36
09349 2165                        36            .byte	$36
09350 2166                        36            .byte	$36
09351 2167                        36            .byte	$36
09352 2168                        36            .byte	$36
09353 2169                        F6            .byte	$F6
09354 216A                        06            .byte	6
09355 216B                        F6            .byte	$F6
09356 216C                        36            .byte	$36
09357 216D                        36            .byte	$36
09358 216E                        36            .byte	$36
09359 216F                        36            .byte	$36
09360 2170                        36            .byte	$36
09361 2171                        36            .byte	$36
09362                                           ! 1172  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09363 2172                        36            .byte	$36
09364 2173                        36            .byte	$36
09365 2174                        36            .byte	$36
09366 2175                        36            .byte	$36
09367 2176                        36            .byte	$36
09368 2177                        36            .byte	$36
09369 2178                        36            .byte	$36
09370 2179                        36            .byte	$36
09371 217A                        36            .byte	$36
09372 217B                        36            .byte	$36
09373 217C                        36            .byte	$36
09374 217D                        36            .byte	$36
09375 217E                        36            .byte	$36
09376 217F                        36            .byte	$36
09377                                           ! 1173  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09378 2180                        00            .byte	0
09379 2181                        00            .byte	0
09380 2182                        00            .byte	0
09381 2183                        00            .byte	0
09382 2184                        00            .byte	0
09383 2185                        FE            .byte	$FE
09384 2186                        06            .byte	6
09385 2187                        F6            .byte	$F6
09386 2188                        36            .byte	$36
09387 2189                        36            .byte	$36
09388 218A                        36            .byte	$36
09389 218B                        36            .byte	$36
09390 218C                        36            .byte	$36
09391 218D                        36            .byte	$36
09392                                           ! 1174  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09393 218E                        36            .byte	$36
09394 218F                        36            .byte	$36
09395 2190                        36            .byte	$36
09396 2191                        36            .byte	$36
09397 2192                        36            .byte	$36
09398 2193                        F6            .byte	$F6
09399 2194                        06            .byte	6
09400 2195                        FE            .byte	$FE
09401 2196                        00            .byte	0
09402 2197                        00            .byte	0
09403 2198                        00            .byte	0
09404 2199                        00            .byte	0
09405 219A                        00            .byte	0
09406 219B                        00            .byte	0
09407                                           ! 1175  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09408 219C                        36            .byte	$36
09409 219D                        36            .byte	$36
09410 219E                        36            .byte	$36
09411 219F                        36            .byte	$36
09412 21A0                        36            .byte	$36
09413 21A1                        36            .byte	$36
09414 21A2                        36            .byte	$36
09415 21A3                        FE            .byte	$FE
09416 21A4                        00            .byte	0
09417 21A5                        00            .byte	0
09418 21A6                        00            .byte	0
09419 21A7                        00            .byte	0
09420 21A8                        00            .byte	0
09421 21A9                        00            .byte	0
09422                                           ! 1176  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09423 21AA                        18            .byte	$18
09424 21AB                        18            .byte	$18
09425 21AC                        18            .byte	$18
09426 21AD                        18            .byte	$18
09427 21AE                        18            .byte	$18
09428 21AF                        F8            .byte	$F8
09429 21B0                        18            .byte	$18
09430 21B1                        F8            .byte	$F8
09431 21B2                        00            .byte	0
09432 21B3                        00            .byte	0
09433 21B4                        00            .byte	0
09434 21B5                        00            .byte	0
09435 21B6                        00            .byte	0
09436 21B7                        00            .byte	0
09437                                           ! 1177  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09438 21B8                        00            .byte	0
09439 21B9                        00            .byte	0
09440 21BA                        00            .byte	0
09441 21BB                        00            .byte	0
09442 21BC                        00            .byte	0
09443 21BD                        00            .byte	0
09444 21BE                        00            .byte	0
09445 21BF                        F8            .byte	$F8
09446 21C0                        18            .byte	$18
09447 21C1                        18            .byte	$18
09448 21C2                        18            .byte	$18
09449 21C3                        18            .byte	$18
09450 21C4                        18            .byte	$18
09451 21C5                        18            .byte	$18
09452                                           ! 1178  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09453 21C6                        18            .byte	$18
09454 21C7                        18            .byte	$18
09455 21C8                        18            .byte	$18
09456 21C9                        18            .byte	$18
09457 21CA                        18            .byte	$18
09458 21CB                        18            .byte	$18
09459 21CC                        18            .byte	$18
09460 21CD                        1F            .byte	$1F
09461 21CE                        00            .byte	0
09462 21CF                        00            .byte	0
09463 21D0                        00            .byte	0
09464 21D1                        00            .byte	0
09465 21D2                        00            .byte	0
09466 21D3                        00            .byte	0
09467                                           ! 1179  0x18, 0x18, 0x18, 0x1
09468 21D4                        18            .byte	$18
09469 21D5                        18            .byte	$18
09470 21D6                        18            .byte	$18
09471                                           ! 1179 8, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09472 21D7                        18            .byte	$18
09473 21D8                        18            .byte	$18
09474 21D9                        18            .byte	$18
09475 21DA                        18            .byte	$18
09476 21DB                        FF            .byte	$FF
09477 21DC                        00            .byte	0
09478 21DD                        00            .byte	0
09479 21DE                        00            .byte	0
09480 21DF                        00            .byte	0
09481 21E0                        00            .byte	0
09482 21E1                        00            .byte	0
09483                                           ! 1180  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09484 21E2                        00            .byte	0
09485 21E3                        00            .byte	0
09486 21E4                        00            .byte	0
09487 21E5                        00            .byte	0
09488 21E6                        00            .byte	0
09489 21E7                        00            .byte	0
09490 21E8                        00            .byte	0
09491 21E9                        FF            .byte	$FF
09492 21EA                        18            .byte	$18
09493 21EB                        18            .byte	$18
09494 21EC                        18            .byte	$18
09495 21ED                        18            .byte	$18
09496 21EE                        18            .byte	$18
09497 21EF                        18            .byte	$18
09498                                           ! 1181  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09499 21F0                        18            .byte	$18
09500 21F1                        18            .byte	$18
09501 21F2                        18            .byte	$18
09502 21F3                        18            .byte	$18
09503 21F4                        18            .byte	$18
09504 21F5                        18            .byte	$18
09505 21F6                        18            .byte	$18
09506 21F7                        1F            .byte	$1F
09507 21F8                        18            .byte	$18
09508 21F9                        18            .byte	$18
09509 21FA                        18            .byte	$18
09510 21FB                        18            .byte	$18
09511 21FC                        18            .byte	$18
09512 21FD                        18            .byte	$18
09513                                           ! 1182  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09514 21FE                        00            .byte	0
09515 21FF                        00            .byte	0
09516 2200                        00            .byte	0
09517 2201                        00            .byte	0
09518 2202                        00            .byte	0
09519 2203                        00            .byte	0
09520 2204                        00            .byte	0
09521 2205                        FF            .byte	$FF
09522 2206                        00            .byte	0
09523 2207                        00            .byte	0
09524 2208                        00            .byte	0
09525 2209                        00            .byte	0
09526 220A                        00            .byte	0
09527 220B                        00            .byte	0
09528                                           ! 1183  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09529 220C                        18            .byte	$18
09530 220D                        18            .byte	$18
09531 220E                        18            .byte	$18
09532 220F                        18            .byte	$18
09533 2210                        18            .byte	$18
09534 2211                        18            .byte	$18
09535 2212                        18            .byte	$18
09536 2213                        FF            .byte	$FF
09537 2214                        18            .byte	$18
09538 2215                        18            .byte	$18
09539 2216                        18            .byte	$18
09540 2217                        18            .byte	$18
09541 2218                        18            .byte	$18
09542 2219                        18            .byte	$18
09543                                           ! 1184  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09544 221A                        18            .byte	$18
09545 221B                        18            .byte	$18
09546 221C                        18            .byte	$18
09547 221D                        18            .byte	$18
09548 221E                        18            .byte	$18
09549 221F                        1F            .byte	$1F
09550 2220                        18            .byte	$18
09551 2221                        1F            .byte	$1F
09552 2222                        18            .byte	$18
09553 2223                        18            .byte	$18
09554 2224                        18            .byte	$18
09555 2225                        18            .byte	$18
09556 2226                        18            .byte	$18
09557 2227                        18            .byte	$18
09558                                           ! 1185  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09559 2228                        36            .byte	$36
09560 2229                        36            .byte	$36
09561 222A                        36            .byte	$36
09562 222B                        36            .byte	$36
09563 222C                        36            .byte	$36
09564 222D                        36            .byte	$36
09565 222E                        36            .byte	$36
09566 222F                        37            .byte	$37
09567 2230                        36            .byte	$36
09568 2231                        36            .byte	$36
09569 2232                        36            .byte	$36
09570 2233                        36            .byte	$36
09571 2234                        36            .byte	$36
09572 2235                        36            .byte	$36
09573                                           ! 1186  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09574 2236                        36            .byte	$36
09575 2237                        36            .byte	$36
09576 2238                        36            .byte	$36
09577 2239                        36            .byte	$36
09578 223A                        36            .byte	$36
09579 223B                        37            .byte	$37
09580 223C                        30            .byte	$30
09581 223D                        3F            .byte	$3F
09582 223E                        00            .byte	0
09583 223F                        00            .byte	0
09584 2240                        00            .byte	0
09585 2241                        00            .byte	0
09586 2242                        00            .byte	0
09587 2243                        00            .byte	0
09588                                           ! 1187  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09589 2244                        00            .byte	0
09590 2245                        00            .byte	0
09591 2246                        00            .byte	0
09592 2247                        00            .byte	0
09593 2248                        00            .byte	0
09594 2249                        3F            .byte	$3F
09595 224A                        30            .byte	$30
09596 224B                        37            .byte	$37
09597 224C                        36            .byte	$36
09598 224D                        36            .byte	$36
09599 224E                        36            .byte	$36
09600 224F                        36            .byte	$36
09601 2250                        36            .byte	$36
09602 2251                        36            .byte	$36
09603                                           ! 1188  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09604 2252                        36            .byte	$36
09605 2253                        36            .byte	$36
09606 2254                        36            .byte	$36
09607 2255                        36            .byte	$36
09608 2256                        36            .byte	$36
09609 2257                        F7            .byte	$F7
09610 2258                        00            .byte	0
09611 2259                        FF            .byte	$FF
09612 225A                        00            .byte	0
09613 225B                        00            .byte	0
09614 225C                        00            .byte	0
09615 225D                        00            .byte	0
09616 225E                        00            .byte	0
09617 225F                        00            .byte	0
09618                                           ! 1189  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09619 2260                        00            .byte	0
09620 2261                        00            .byte	0
09621 2262                        00            .byte	0
09622 2263                        00            .byte	0
09623 2264                        00            .byte	0
09624 2265                        FF            .byte	$FF
09625 2266                        00            .byte	0
09626 2267                        F7            .byte	$F7
09627 2268                        36            .byte	$36
09628 2269                        36            .byte	$36
09629 226A                        36            .byte	$36
09630 226B                        36            .byte	$36
09631 226C                        36            .byte	$36
09632 226D                        36            .byte	$36
09633                                           ! 1190  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09634 226E                        36            .byte	$36
09635 226F                        36            .byte	$36
09636 2270                        36            .byte	$36
09637 2271                        36            .byte	$36
09638 2272                        36            .byte	$36
09639 2273                        37            .byte	$37
09640 2274                        30            .byte	$30
09641 2275                        37            .byte	$37
09642 2276                        36            .byte	$36
09643 2277                        36            .byte	$36
09644 2278                        36            .byte	$36
09645 2279                        36            .byte	$36
09646 227A                        36            .byte	$36
09647 227B                        36            .byte	$36
09648                                           ! 1191  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09649 227C                        00            .byte	0
09650 227D                        00            .byte	0
09651 227E                        00            .byte	0
09652 227F                        00            .byte	0
09653 2280                        00            .byte	0
09654 2281                        FF            .byte	$FF
09655 2282                        00            .byte	0
09656 2283                        FF            .byte	$FF
09657 2284                        00            .byte	0
09658 2285                        00            .byte	0
09659 2286                        00            .byte	0
09660 2287                        00            .byte	0
09661 2288                        00            .byte	0
09662 2289                        00            .byte	0
09663                                           ! 1192  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09664 228A                        36            .byte	$36
09665 228B                        36            .byte	$36
09666 228C                        36            .byte	$36
09667 228D                        36            .byte	$36
09668 228E                        36            .byte	$36
09669 228F                        F7            .byte	$F7
09670 2290                        00            .byte	0
09671 2291                        F7            .byte	$F7
09672 2292                        36            .byte	$36
09673 2293                        36            .byte	$36
09674 2294                        36            .byte	$36
09675 2295                        36            .byte	$36
09676 2296                        36            .byte	$36
09677 2297                        36            .byte	$36
09678                                           ! 1193  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09679 2298                        18            .byte	$18
09680 2299                        18            .byte	$18
09681 229A                        18            .byte	$18
09682 229B                        18            .byte	$18
09683 229C                        18            .byte	$18
09684 229D                        FF            .byte	$FF
09685 229E                        00            .byte	0
09686 229F                        FF            .byte	$FF
09687 22A0                        00            .byte	0
09688 22A1                        00            .byte	0
09689 22A2                        00            .byte	0
09690 22A3                        00            .byte	0
09691 22A4                        00            .byte	0
09692 22A5                        00            .byte	0
09693                                           ! 1194  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09694 22A6                        36            .byte	$36
09695 22A7                        36            .byte	$36
09696 22A8                        36            .byte	$36
09697 22A9                        36            .byte	$36
09698 22AA                        36            .byte	$36
09699 22AB                        36            .byte	$36
09700 22AC                        36            .byte	$36
09701 22AD                        FF            .byte	$FF
09702 22AE                        00            .byte	0
09703 22AF                        00            .byte	0
09704 22B0                        00            .byte	0
09705 22B1                        00            .byte	0
09706 22B2                        00            .byte	0
09707 22B3                        00            .byte	0
09708                                           ! 1195  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09709 22B4                        00            .byte	0
09710 22B5                        00            .byte	0
09711 22B6                        00            .byte	0
09712 22B7                        00            .byte	0
09713 22B8                        00            .byte	0
09714 22B9                        FF            .byte	$FF
09715 22BA                        00            .byte	0
09716 22BB                        FF            .byte	$FF
09717 22BC                        18            .byte	$18
09718 22BD                        18            .byte	$18
09719 22BE                        18            .byte	$18
09720 22BF                        18            .byte	$18
09721 22C0                        18            .byte	$18
09722 22C1                        18            .byte	$18
09723                                           ! 1196  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09724 22C2                        00            .byte	0
09725 22C3                        00            .byte	0
09726 22C4                        00            .byte	0
09727 22C5                        00            .byte	0
09728 22C6                        00            .byte	0
09729 22C7                        00            .byte	0
09730 22C8                        00            .byte	0
09731 22C9                        FF            .byte	$FF
09732 22CA                        36            .byte	$36
09733 22CB                        36            .byte	$36
09734 22CC                        36            .byte	$36
09735 22CD                        36            .byte	$36
09736 22CE                        36            .byte	$36
09737 22CF                        36            .byte	$36
09738                                           ! 1197  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09739 22D0                        36            .byte	$36
09740 22D1                        36            .byte	$36
09741 22D2                        36            .byte	$36
09742 22D3                        36            .byte	$36
09743 22D4                        36            .byte	$36
09744 22D5                        36            .byte	$36
09745 22D6                        36            .byte	$36
09746 22D7                        3F            .byte	$3F
09747 22D8                        00            .byte	0
09748 22D9                        00            .byte	0
09749 22DA                        00            .byte	0
09750 22DB                        00            .byte	0
09751 22DC                        00            .byte	0
09752 22DD                        00            .byte	0
09753                                           ! 1198  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09754 22DE                        18            .byte	$18
09755 22DF                        18            .byte	$18
09756 22E0                        18            .byte	$18
09757 22E1                        18            .byte	$18
09758 22E2                        18            .byte	$18
09759 22E3                        1F            .byte	$1F
09760 22E4                        18            .byte	$18
09761 22E5                        1F            .byte	$1F
09762 22E6                        00            .byte	0
09763 22E7                        00            .byte	0
09764 22E8                        00            .byte	0
09765 22E9                        00            .byte	0
09766 22EA                        00            .byte	0
09767 22EB                        00            .byte	0
09768                                           ! 1199  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09769 22EC                        00            .byte	0
09770 22ED                        00            .byte	0
09771 22EE                        00            .byte	0
09772 22EF                        00            .byte	0
09773 22F0                        00            .byte	0
09774 22F1                        1F            .byte	$1F
09775 22F2                        18            .byte	$18
09776 22F3                        1F            .byte	$1F
09777 22F4                        18            .byte	$18
09778 22F5                        18            .byte	$18
09779 22F6                        18            .byte	$18
09780 22F7                        18            .byte	$18
09781 22F8                        18            .byte	$18
09782 22F9                        18            .byte	$18
09783                                           ! 1200  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09784 22FA                        00            .byte	0
09785 22FB                        00            .byte	0
09786 22FC                        00            .byte	0
09787 22FD                        00            .byte	0
09788 22FE                        00            .byte	0
09789 22FF                        00            .byte	0
09790 2300                        00            .byte	0
09791 2301                        3F            .byte	$3F
09792 2302                        36            .byte	$36
09793 2303                        36            .byte	$36
09794 2304                        36            .byte	$36
09795 2305                        36            .byte	$36
09796 2306                        36            .byte	$36
09797 2307                        36            .byte	$36
09798                                           ! 1201  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
09799 2308                        36            .byte	$36
09800 2309                        36            .byte	$36
09801 230A                        36            .byte	$36
09802 230B                        36            .byte	$36
09803 230C                        36            .byte	$36
09804 230D                        36            .byte	$36
09805 230E                        36            .byte	$36
09806 230F                        FF            .byte	$FF
09807 2310                        36            .byte	$36
09808 2311                        36            .byte	$36
09809 2312                        36            .byte	$36
09810 2313                        36            .byte	$36
09811 2314                        36            .byte	$36
09812 2315                        36            .byte	$36
09813                                           ! 1202  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09814 2316                        18            .byte	$18
09815 2317                        18            .byte	$18
09816 2318                        18            .byte	$18
09817 2319                        18            .byte	$18
09818 231A                        18            .byte	$18
09819 231B                        FF            .byte	$FF
09820 231C                        18            .byte	$18
09821 231D                        FF            .byte	$FF
09822 231E                        18            .byte	$18
09823 231F                        18            .byte	$18
09824 2320                        18            .byte	$18
09825 2321                        18            .byte	$18
09826 2322                        18            .byte	$18
09827 2323                        18            .byte	$18
09828                                           ! 1203  0x18, 0x18, 0x18, 0x18, 0x18,
09829 2324                        18            .byte	$18
09830 2325                        18            .byte	$18
09831 2326                        18            .byte	$18
09832 2327                        18            .byte	$18
09833                                           ! 1203  0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09834 2328                        18            .byte	$18
09835 2329                        18            .byte	$18
09836 232A                        18            .byte	$18
09837 232B                        F8            .byte	$F8
09838 232C                        00            .byte	0
09839 232D                        00            .byte	0
09840 232E                        00            .byte	0
09841 232F                        00            .byte	0
09842 2330                        00            .byte	0
09843 2331                        00            .byte	0
09844                                           ! 1204  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
09845 2332                        00            .byte	0
09846 2333                        00            .byte	0
09847 2334                        00            .byte	0
09848 2335                        00            .byte	0
09849 2336                        00            .byte	0
09850 2337                        00            .byte	0
09851 2338                        00            .byte	0
09852 2339                        1F            .byte	$1F
09853 233A                        18            .byte	$18
09854 233B                        18            .byte	$18
09855 233C                        18            .byte	$18
09856 233D                        18            .byte	$18
09857 233E                        18            .byte	$18
09858 233F                        18            .byte	$18
09859                                           ! 1205  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09860 2340                        FF            .byte	$FF
09861 2341                        FF            .byte	$FF
09862 2342                        FF            .byte	$FF
09863 2343                        FF            .byte	$FF
09864 2344                        FF            .byte	$FF
09865 2345                        FF            .byte	$FF
09866 2346                        FF            .byte	$FF
09867 2347                        FF            .byte	$FF
09868 2348                        FF            .byte	$FF
09869 2349                        FF            .byte	$FF
09870 234A                        FF            .byte	$FF
09871 234B                        FF            .byte	$FF
09872 234C                        FF            .byte	$FF
09873 234D                        FF            .byte	$FF
09874                                           ! 1206  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
09875 234E                        00            .byte	0
09876 234F                        00            .byte	0
09877 2350                        00            .byte	0
09878 2351                        00            .byte	0
09879 2352                        00            .byte	0
09880 2353                        00            .byte	0
09881 2354                        00            .byte	0
09882 2355                        FF            .byte	$FF
09883 2356                        FF            .byte	$FF
09884 2357                        FF            .byte	$FF
09885 2358                        FF            .byte	$FF
09886 2359                        FF            .byte	$FF
09887 235A                        FF            .byte	$FF
09888 235B                        FF            .byte	$FF
09889                                           ! 1207  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
09890 235C                        F0            .byte	$F0
09891 235D                        F0            .byte	$F0
09892 235E                        F0            .byte	$F0
09893 235F                        F0            .byte	$F0
09894 2360                        F0            .byte	$F0
09895 2361                        F0            .byte	$F0
09896 2362                        F0            .byte	$F0
09897 2363                        F0            .byte	$F0
09898 2364                        F0            .byte	$F0
09899 2365                        F0            .byte	$F0
09900 2366                        F0            .byte	$F0
09901 2367                        F0            .byte	$F0
09902 2368                        F0            .byte	$F0
09903 2369                        F0            .byte	$F0
09904                                           ! 1208  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
09905 236A                        0F            .byte	$F
09906 236B                        0F            .byte	$F
09907 236C                        0F            .byte	$F
09908 236D                        0F            .byte	$F
09909 236E                        0F            .byte	$F
09910 236F                        0F            .byte	$F
09911 2370                        0F            .byte	$F
09912 2371                        0F            .byte	$F
09913 2372                        0F            .byte	$F
09914 2373                        0F            .byte	$F
09915 2374                        0F            .byte	$F
09916 2375                        0F            .byte	$F
09917 2376                        0F            .byte	$F
09918 2377                        0F            .byte	$F
09919                                           ! 1209  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
09920 2378                        FF            .byte	$FF
09921 2379                        FF            .byte	$FF
09922 237A                        FF            .byte	$FF
09923 237B                        FF            .byte	$FF
09924 237C                        FF            .byte	$FF
09925 237D                        FF            .byte	$FF
09926 237E                        FF            .byte	$FF
09927 237F                        00            .byte	0
09928 2380                        00            .byte	0
09929 2381                        00            .byte	0
09930 2382                        00            .byte	0
09931 2383                        00            .byte	0
09932 2384                        00            .byte	0
09933 2385                        00            .byte	0
09934                                           ! 1210  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00,
09935 2386                        00            .byte	0
09936 2387                        00            .byte	0
09937 2388                        00            .byte	0
09938 2389                        00            .byte	0
09939 238A                        00            .byte	0
09940 238B                        76            .byte	$76
09941 238C                        DC            .byte	$DC
09942 238D                        D8            .byte	$D8
09943 238E                        D8            .byte	$D8
09944 238F                        DC            .byte	$DC
09945 2390                        76            .byte	$76
09946 2391                        00            .byte	0
09947 2392                        00            .byte	0
09948 2393                        00            .byte	0
09949                                           ! 1211  0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x40, 0x00,
09950 2394                        00            .byte	0
09951 2395                        00            .byte	0
09952 2396                        00            .byte	0
09953 2397                        00            .byte	0
09954 2398                        7C            .byte	$7C
09955 2399                        C6            .byte	$C6
09956 239A                        FC            .byte	$FC
09957 239B                        C6            .byte	$C6
09958 239C                        C6            .byte	$C6
09959 239D                        FC            .byte	$FC
09960 239E                        C0            .byte	$C0
09961 239F                        C0            .byte	$C0
09962 23A0                        40            .byte	$40
09963 23A1                        00            .byte	0
09964                                           ! 1212  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
09965 23A2                        00            .byte	0
09966 23A3                        00            .byte	0
09967 23A4                        FE            .byte	$FE
09968 23A5                        C6            .byte	$C6
09969 23A6                        C6            .byte	$C6
09970 23A7                        C0            .byte	$C0
09971 23A8                        C0            .byte	$C0
09972 23A9                        C0            .byte	$C0
09973 23AA                        C0            .byte	$C0
09974 23AB                        C0            .byte	$C0
09975 23AC                        C0            .byte	$C0
09976 23AD                        00            .byte	0
09977 23AE                        00            .byte	0
09978 23AF                        00            .byte	0
09979                                           ! 1213  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00,
09980 23B0                        00            .byte	0
09981 23B1                        00            .byte	0
09982 23B2                        00            .byte	0
09983 23B3                        00            .byte	0
09984 23B4                        FE            .byte	$FE
09985 23B5                        6C            .byte	$6C
09986 23B6                        6C            .byte	$6C
09987 23B7                        6C            .byte	$6C
09988 23B8                        6C            .byte	$6C
09989 23B9                        6C            .byte	$6C
09990 23BA                        6C            .byte	$6C
09991 23BB                        00            .byte	0
09992 23BC                        00            .byte	0
09993 23BD                        00            .byte	0
09994                                           ! 1214  0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00,
09995 23BE                        00            .byte	0
09996 23BF                        00            .byte	0
09997 23C0                        FE            .byte	$FE
09998 23C1                        C6            .byte	$C6
09999 23C2                        60            .byte	$60
10000 23C3                        30            .byte	$30
10001 23C4                        18            .byte	$18
10002 23C5                        30            .byte	$30
10003 23C6                        60            .byte	$60
10004 23C7                        C6            .byte	$C6
10005 23C8                        FE            .byte	$FE
10006 23C9                        00            .byte	0
10007 23CA                        00            .byte	0
10008 23CB                        00            .byte	0
10009                                           ! 1215  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10010 23CC                        00            .byte	0
10011 23CD                        00            .byte	0
10012 23CE                        00            .byte	0
10013 23CF                        00            .byte	0
10014 23D0                        00            .byte	0
10015 23D1                        7E            .byte	$7E
10016 23D2                        D8            .byte	$D8
10017 23D3                        D8            .byte	$D8
10018 23D4                        D8            .byte	$D8
10019 23D5                        D8            .byte	$D8
10020 23D6                        70            .byte	$70
10021 23D7                        00            .byte	0
10022 23D8                        00            .byte	0
10023 23D9                        00            .byte	0
10024                                           ! 1216  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00,
10025 23DA                        00            .byte	0
10026 23DB                        00            .byte	0
10027 23DC                        00            .byte	0
10028 23DD                        00            .byte	0
10029 23DE                        66            .byte	$66
10030 23DF                        66            .byte	$66
10031 23E0                        66            .byte	$66
10032 23E1                        66            .byte	$66
10033 23E2                        7C            .byte	$7C
10034 23E3                        60            .byte	$60
10035 23E4                        60            .byte	$60
10036 23E5                        C0            .byte	$C0
10037 23E6                        00            .byte	0
10038 23E7                        00            .byte	0
10039                                           ! 1217  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00,
10040 23E8                        00            .byte	0
10041 23E9                        00            .byte	0
10042 23EA                        00            .byte	0
10043 23EB                        00            .byte	0
10044 23EC                        76            .byte	$76
10045 23ED                        DC            .byte	$DC
10046 23EE                        18            .byte	$18
10047 23EF                        18            .byte	$18
10048 23F0                        18            .byte	$18
10049 23F1                        18            .byte	$18
10050 23F2                        18            .byte	$18
10051 23F3                        00            .byte	0
10052 23F4                        00            .byte	0
10053 23F5                        00            .byte	0
10054                                           ! 1218  0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00,
10055 23F6                        00            .byte	0
10056 23F7                        00            .byte	0
10057 23F8                        7E            .byte	$7E
10058 23F9                        18            .byte	$18
10059 23FA                        3C            .byte	$3C
10060 23FB                        66            .byte	$66
10061 23FC                        66            .byte	$66
10062 23FD                        66            .byte	$66
10063 23FE                        3C            .byte	$3C
10064 23FF                        18            .byte	$18
10065 2400                        7E            .byte	$7E
10066 2401                        00            .byte	0
10067 2402                        00            .byte	0
10068 2403                        00            .byte	0
10069                                           ! 1219  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00,
10070 2404                        00            .byte	0
10071 2405                        00            .byte	0
10072 2406                        38            .byte	$38
10073 2407                        6C            .byte	$6C
10074 2408                        C6            .byte	$C6
10075 2409                        C6            .byte	$C6
10076 240A                        FE            .byte	$FE
10077 240B                        C6            .byte	$C6
10078 240C                        C6            .byte	$C6
10079 240D                        6C            .byte	$6C
10080 240E                        38            .byte	$38
10081 240F                        00            .byte	0
10082 2410                        00            .byte	0
10083 2411                        00            .byte	0
10084                                           ! 1220  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00,
10085 2412                        00            .byte	0
10086 2413                        00            .byte	0
10087 2414                        38            .byte	$38
10088 2415                        6C            .byte	$6C
10089 2416                        C6            .byte	$C6
10090 2417                        C6            .byte	$C6
10091 2418                        C6            .byte	$C6
10092 2419                        6C            .byte	$6C
10093 241A                        6C            .byte	$6C
10094 241B                        6C            .byte	$6C
10095 241C                        EE            .byte	$EE
10096 241D                        00            .byte	0
10097 241E                        00            .byte	0
10098 241F                        00            .byte	0
10099                                           ! 1221  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00,
10100 2420                        00            .byte	0
10101 2421                        00            .byte	0
10102 2422                        1E            .byte	$1E
10103 2423                        30            .byte	$30
10104 2424                        18            .byte	$18
10105 2425                        0C            .byte	$C
10106 2426                        3E            .byte	$3E
10107 2427                        66            .byte	$66
10108 2428                        66            .byte	$66
10109 2429                        66            .byte	$66
10110 242A                        3C            .byte	$3C
10111 242B                        00            .byte	0
10112 242C                        00            .byte	0
10113 242D                        00            .byte	0
10114                                           ! 1222  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00,
10115 242E                        00            .byte	0
10116 242F                        00            .byte	0
10117 2430                        00            .byte	0
10118 2431                        00            .byte	0
10119 2432                        00            .byte	0
10120 2433                        7E            .byte	$7E
10121 2434                        DB            .byte	$DB
10122 2435                        DB            .byte	$DB
10123 2436                        7E            .byte	$7E
10124 2437                        00            .byte	0
10125 2438                        00            .byte	0
10126 2439                        00            .byte	0
10127 243A                        00            .byte	0
10128 243B                        00            .byte	0
10129                                           ! 1223  0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00,
10130 243C                        00            .byte	0
10131 243D                        00            .byte	0
10132 243E                        03            .byte	3
10133 243F                        06            .byte	6
10134 2440                        7E            .byte	$7E
10135 2441                        DB            .byte	$DB
10136 2442                        DB            .byte	$DB
10137 2443                        F3            .byte	$F3
10138 2444                        7E            .byte	$7E
10139 2445                        60            .byte	$60
10140 2446                        C0            .byte	$C0
10141 2447                        00            .byte	0
10142 2448                        00            .byte	0
10143 2449                        00            .byte	0
10144                                           ! 1224  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00,
10145 244A                        00            .byte	0
10146 244B                        00            .byte	0
10147 244C                        1C            .byte	$1C
10148 244D                        30            .byte	$30
10149 244E                        60            .byte	$60
10150 244F                        60            .byte	$60
10151 2450                        7C            .byte	$7C
10152 2451                        60            .byte	$60
10153 2452                        60            .byte	$60
10154 2453                        30            .byte	$30
10155 2454                        1C            .byte	$1C
10156 2455                        00            .byte	0
10157 2456                        00            .byte	0
10158 2457                        00            .byte	0
10159                                           ! 1225  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00,
10160 2458                        00            .byte	0
10161 2459                        00            .byte	0
10162 245A                        00            .byte	0
10163 245B                        7C            .byte	$7C
10164 245C                        C6            .byte	$C6
10165 245D                        C6            .byte	$C6
10166 245E                        C6            .byte	$C6
10167 245F                        C6            .byte	$C6
10168 2460                        C6            .byte	$C6
10169 2461                        C6            .byte	$C6
10170 2462                        C6            .byte	$C6
10171 2463                        00            .byte	0
10172 2464                        00            .byte	0
10173 2465                        00            .byte	0
10174                                           ! 1226  0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
10175 2466                        00            .byte	0
10176 2467                        00            .byte	0
10177 2468                        00            .byte	0
10178 2469                        FE            .byte	$FE
10179 246A                        00            .byte	0
10180 246B                        00            .byte	0
10181 246C                        FE            .byte	$FE
10182 246D                        00            .byte	0
10183 246E                        00            .byte	0
10184 246F                        FE            .byte	$FE
10185 2470                        00            .byte	0
10186 2471                        00            .byte	0
10187 2472                        00            .byte	0
10188 2473                        00            .byte	0
10189                                           ! 1227  0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0
10190 2474                        00            .byte	0
10191 2475                        00            .byte	0
10192 2476                        00            .byte	0
10193 2477                        18            .byte	$18
10194 2478                        18            .byte	$18
10195 2479                        7E            .byte	$7E
10196                                           ! 1227 x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
10197 247A                        18            .byte	$18
10198 247B                        18            .byte	$18
10199 247C                        00            .byte	0
10200 247D                        00            .byte	0
10201 247E                        FF            .byte	$FF
10202 247F                        00            .byte	0
10203 2480                        00            .byte	0
10204 2481                        00            .byte	0
10205                                           ! 1228  0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00,
10206 2482                        00            .byte	0
10207 2483                        00            .byte	0
10208 2484                        30            .byte	$30
10209 2485                        18            .byte	$18
10210 2486                        0C            .byte	$C
10211 2487                        06            .byte	6
10212 2488                        0C            .byte	$C
10213 2489                        18            .byte	$18
10214 248A                        30            .byte	$30
10215 248B                        00            .byte	0
10216 248C                        7E            .byte	$7E
10217 248D                        00            .byte	0
10218 248E                        00            .byte	0
10219 248F                        00            .byte	0
10220                                           ! 1229  0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00,
10221 2490                        00            .byte	0
10222 2491                        00            .byte	0
10223 2492                        0C            .byte	$C
10224 2493                        18            .byte	$18
10225 2494                        30            .byte	$30
10226 2495                        60            .byte	$60
10227 2496                        30            .byte	$30
10228 2497                        18            .byte	$18
10229 2498                        0C            .byte	$C
10230 2499                        00            .byte	0
10231 249A                        7E            .byte	$7E
10232 249B                        00            .byte	0
10233 249C                        00            .byte	0
10234 249D                        00            .byte	0
10235                                           ! 1230  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
10236 249E                        00            .byte	0
10237 249F                        00            .byte	0
10238 24A0                        0E            .byte	$E
10239 24A1                        1B            .byte	$1B
10240 24A2                        1B            .byte	$1B
10241 24A3                        18            .byte	$18
10242 24A4                        18            .byte	$18
10243 24A5                        18            .byte	$18
10244 24A6                        18            .byte	$18
10245 24A7                        18            .byte	$18
10246 24A8                        18            .byte	$18
10247 24A9                        18            .byte	$18
10248 24AA                        18            .byte	$18
10249 24AB                        18            .byte	$18
10250                                           ! 1231  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00,
10251 24AC                        18            .byte	$18
10252 24AD                        18            .byte	$18
10253 24AE                        18            .byte	$18
10254 24AF                        18            .byte	$18
10255 24B0                        18            .byte	$18
10256 24B1                        18            .byte	$18
10257 24B2                        18            .byte	$18
10258 24B3                        18            .byte	$18
10259 24B4                        D8            .byte	$D8
10260 24B5                        D8            .byte	$D8
10261 24B6                        70            .byte	$70
10262 24B7                        00            .byte	0
10263 24B8                        00            .byte	0
10264 24B9                        00            .byte	0
10265                                           ! 1232  0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10266 24BA                        00            .byte	0
10267 24BB                        00            .byte	0
10268 24BC                        00            .byte	0
10269 24BD                        18            .byte	$18
10270 24BE                        18            .byte	$18
10271 24BF                        00            .byte	0
10272 24C0                        7E            .byte	$7E
10273 24C1                        00            .byte	0
10274 24C2                        18            .byte	$18
10275 24C3                        18            .byte	$18
10276 24C4                        00            .byte	0
10277 24C5                        00            .byte	0
10278 24C6                        00            .byte	0
10279 24C7                        00            .byte	0
10280                                           ! 1233  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00,
10281 24C8                        00            .byte	0
10282 24C9                        00            .byte	0
10283 24CA                        00            .byte	0
10284 24CB                        00            .byte	0
10285 24CC                        76            .byte	$76
10286 24CD                        DC            .byte	$DC
10287 24CE                        00            .byte	0
10288 24CF                        76            .byte	$76
10289 24D0                        DC            .byte	$DC
10290 24D1                        00            .byte	0
10291 24D2                        00            .byte	0
10292 24D3                        00            .byte	0
10293 24D4                        00            .byte	0
10294 24D5                        00            .byte	0
10295                                           ! 1234  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10296 24D6                        00            .byte	0
10297 24D7                        38            .byte	$38
10298 24D8                        6C            .byte	$6C
10299 24D9                        6C            .byte	$6C
10300 24DA                        38            .byte	$38
10301 24DB                        00            .byte	0
10302 24DC                        00            .byte	0
10303 24DD                        00            .byte	0
10304 24DE                        00            .byte	0
10305 24DF                        00            .byte	0
10306 24E0                        00            .byte	0
10307 24E1                        00            .byte	0
10308 24E2                        00            .byte	0
10309 24E3                        00            .byte	0
10310                                           ! 1235  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10311 24E4                        00            .byte	0
10312 24E5                        00            .byte	0
10313 24E6                        00            .byte	0
10314 24E7                        00            .byte	0
10315 24E8                        00            .byte	0
10316 24E9                        00            .byte	0
10317 24EA                        18            .byte	$18
10318 24EB                        18            .byte	$18
10319 24EC                        00            .byte	0
10320 24ED                        00            .byte	0
10321 24EE                        00            .byte	0
10322 24EF                        00            .byte	0
10323 24F0                        00            .byte	0
10324 24F1                        00            .byte	0
10325                                           ! 1236  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10326 24F2                        00            .byte	0
10327 24F3                        00            .byte	0
10328 24F4                        00            .byte	0
10329 24F5                        00            .byte	0
10330 24F6                        00            .byte	0
10331 24F7                        00            .byte	0
10332 24F8                        00            .byte	0
10333 24F9                        18            .byte	$18
10334 24FA                        00            .byte	0
10335 24FB                        00            .byte	0
10336 24FC                        00            .byte	0
10337 24FD                        00            .byte	0
10338 24FE                        00            .byte	0
10339 24FF                        00            .byte	0
10340                                           ! 1237  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00,
10341 2500                        00            .byte	0
10342 2501                        0F            .byte	$F
10343 2502                        0C            .byte	$C
10344 2503                        0C            .byte	$C
10345 2504                        0C            .byte	$C
10346 2505                        0C            .byte	$C
10347 2506                        0C            .byte	$C
10348 2507                        EC            .byte	$EC
10349 2508                        6C            .byte	$6C
10350 2509                        3C            .byte	$3C
10351 250A                        1C            .byte	$1C
10352 250B                        00            .byte	0
10353 250C                        00            .byte	0
10354 250D                        00            .byte	0
10355                                           ! 1238  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10356 250E                        00            .byte	0
10357 250F                        D8            .byte	$D8
10358 2510                        6C            .byte	$6C
10359 2511                        6C            .byte	$6C
10360 2512                        6C            .byte	$6C
10361 2513                        6C            .byte	$6C
10362 2514                        6C            .byte	$6C
10363 2515                        00            .byte	0
10364 2516                        00            .byte	0
10365 2517                        00            .byte	0
10366 2518                        00            .byte	0
10367 2519                        00            .byte	0
10368 251A                        00            .byte	0
10369 251B                        00            .byte	0
10370                                           ! 1239  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10371 251C                        00            .byte	0
10372 251D                        70            .byte	$70
10373 251E                        D8            .byte	$D8
10374 251F                        30            .byte	$30
10375 2520                        60            .byte	$60
10376 2521                        C8            .byte	$C8
10377 2522                        F8            .byte	$F8
10378 2523                        00            .byte	0
10379 2524                        00            .byte	0
10380 2525                        00            .byte	0
10381 2526                        00            .byte	0
10382 2527                        00            .byte	0
10383 2528                        00            .byte	0
10384 2529                        00            .byte	0
10385                                           ! 1240  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00,
10386 252A                        00            .byte	0
10387 252B                        00            .byte	0
10388 252C                        00            .byte	0
10389 252D                        00            .byte	0
10390 252E                        7C            .byte	$7C
10391 252F                        7C            .byte	$7C
10392 2530                        7C            .byte	$7C
10393 2531                        7C            .byte	$7C
10394 2532                        7C            .byte	$7C
10395 2533                        7C            .byte	$7C
10396 2534                        00            .byte	0
10397 2535                        00            .byte	0
10398 2536                        00            .byte	0
10399 2537                        00            .byte	0
10400                                           ! 1241  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
10401 2538                        00            .byte	0
10402 2539                        00            .byte	0
10403 253A                        00            .byte	0
10404 253B                        00            .byte	0
10405 253C                        00            .byte	0
10406 253D                        00            .byte	0
10407 253E                        00            .byte	0
10408 253F                        00            .byte	0
10409 2540                        00            .byte	0
10410 2541                        00            .byte	0
10411 2542                        00            .byte	0
10412 2543                        00            .byte	0
10413 2544                        00            .byte	0
10414                                           ! 1242 };
10415 2545                        00            .byte	0
10416                                           !BCC_EOS
10417                                           ! 1243 static Bit8u vgafont16[256*16]=
10418                                           ! 1244 {
10419                       00002546            _vgafont16:
10420                                           ! 1245  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10421 2546                        00            .byte	0
10422 2547                        00            .byte	0
10423 2548                        00            .byte	0
10424 2549                        00            .byte	0
10425 254A                        00            .byte	0
10426 254B                        00            .byte	0
10427 254C                        00            .byte	0
10428 254D                        00            .byte	0
10429 254E                        00            .byte	0
10430 254F                        00            .byte	0
10431 2550                        00            .byte	0
10432 2551                        00            .byte	0
10433 2552                        00            .byte	0
10434 2553                        00            .byte	0
10435 2554                        00            .byte	0
10436 2555                        00            .byte	0
10437                                           ! 1246  0x00, 0x00, 0x7e, 0x81, 0xa5, 0x81, 0x81, 0xbd, 0x99, 0x81, 0x81, 0x7e, 0x00, 0x00, 0x00, 0x00,
10438 2556                        00            .byte	0
10439 2557                        00            .byte	0
10440 2558                        7E            .byte	$7E
10441 2559                        81            .byte	$81
10442 255A                        A5            .byte	$A5
10443 255B                        81            .byte	$81
10444 255C                        81            .byte	$81
10445 255D                        BD            .byte	$BD
10446 255E                        99            .byte	$99
10447 255F                        81            .byte	$81
10448 2560                        81            .byte	$81
10449 2561                        7E            .byte	$7E
10450 2562                        00            .byte	0
10451 2563                        00            .byte	0
10452 2564                        00            .byte	0
10453 2565                        00            .byte	0
10454                                           ! 1247  0x00, 0x00, 0x7e, 0xff, 0xdb, 0xff, 0xff, 0xc3, 0xe7, 0xff, 0xff, 0x7e, 0x00, 0x00, 0x00, 0x00,
10455 2566                        00            .byte	0
10456 2567                        00            .byte	0
10457 2568                        7E            .byte	$7E
10458 2569                        FF            .byte	$FF
10459 256A                        DB            .byte	$DB
10460 256B                        FF            .byte	$FF
10461 256C                        FF            .byte	$FF
10462 256D                        C3            .byte	$C3
10463 256E                        E7            .byte	$E7
10464 256F                        FF            .byte	$FF
10465 2570                        FF            .byte	$FF
10466 2571                        7E            .byte	$7E
10467 2572                        00            .byte	0
10468 2573                        00            .byte	0
10469 2574                        00            .byte	0
10470 2575                        00            .byte	0
10471                                           ! 1248  0x00, 0x00, 0x00, 0x00, 0x6c, 0xfe, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00,
10472 2576                        00            .byte	0
10473 2577                        00            .byte	0
10474 2578                        00            .byte	0
10475 2579                        00            .byte	0
10476 257A                        6C            .byte	$6C
10477 257B                        FE            .byte	$FE
10478 257C                        FE            .byte	$FE
10479 257D                        FE            .byte	$FE
10480 257E                        FE            .byte	$FE
10481 257F                        7C            .byte	$7C
10482 2580                        38            .byte	$38
10483 2581                        10            .byte	$10
10484 2582                        00            .byte	0
10485 2583                        00            .byte	0
10486 2584                        00            .byte	0
10487 2585                        00            .byte	0
10488                                           ! 1249  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10489 2586                        00            .byte	0
10490 2587                        00            .byte	0
10491 2588                        00            .byte	0
10492 2589                        00            .byte	0
10493 258A                        10            .byte	$10
10494 258B                        38            .byte	$38
10495 258C                        7C            .byte	$7C
10496 258D                        FE            .byte	$FE
10497 258E                        7C            .byte	$7C
10498 258F                        38            .byte	$38
10499 2590                        10            .byte	$10
10500 2591                        00            .byte	0
10501 2592                        00            .byte	0
10502 2593                        00            .byte	0
10503 2594                        00            .byte	0
10504 2595                        00            .byte	0
10505                                           ! 1250  0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0xe7, 0xe7, 0xe7, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10506 2596                        00            .byte	0
10507 2597                        00            .byte	0
10508 2598                        00            .byte	0
10509 2599                        18            .byte	$18
10510 259A                        3C            .byte	$3C
10511 259B                        3C            .byte	$3C
10512 259C                        E7            .byte	$E7
10513 259D                        E7            .byte	$E7
10514 259E                        E7            .byte	$E7
10515 259F                        18            .byte	$18
10516 25A0                        18            .byte	$18
10517 25A1                        3C            .byte	$3C
10518 25A2                        00            .byte	0
10519 25A3                        00            .byte	0
10520 25A4                        00            .byte	0
10521 25A5                        00            .byte	0
10522                                           ! 1251  0x00, 0x00, 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x7e, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
10523 25A6                        00            .byte	0
10524 25A7                        00            .byte	0
10525 25A8                        00            .byte	0
10526 25A9                        18            .byte	$18
10527 25AA                        3C            .byte	$3C
10528 25AB                        7E            .byte	$7E
10529 25AC                        FF            .byte	$FF
10530 25AD                        FF            .byte	$FF
10531 25AE                        7E            .byte	$7E
10532 25AF                        18            .byte	$18
10533 25B0                        18            .byte	$18
10534 25B1                        3C            .byte	$3C
10535 25B2                        00            .byte	0
10536 25B3                        00            .byte	0
10537 25B4                        00            .byte	0
10538 25B5                        00            .byte	0
10539                                           ! 1252  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10540 25B6                        00            .byte	0
10541 25B7                        00            .byte	0
10542 25B8                        00            .byte	0
10543 25B9                        00            .byte	0
10544 25BA                        00            .byte	0
10545 25BB                        00            .byte	0
10546 25BC                        18            .byte	$18
10547 25BD                        3C            .byte	$3C
10548 25BE                        3C            .byte	$3C
10549 25BF                        18            .byte	$18
10550 25C0                        00            .byte	0
10551 25C1                        00            .byte	0
10552 25C2                        00            .byte	0
10553 25C3                        00            .byte	0
10554 25C4                        00            .byte	0
10555                                           ! 1252 
10556 25C5                        00            .byte	0
10557                                           ! 1253  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
10558 25C6                        FF            .byte	$FF
10559 25C7                        FF            .byte	$FF
10560 25C8                        FF            .byte	$FF
10561 25C9                        FF            .byte	$FF
10562 25CA                        FF            .byte	$FF
10563 25CB                        FF            .byte	$FF
10564 25CC                        E7            .byte	$E7
10565 25CD                        C3            .byte	$C3
10566 25CE                        C3            .byte	$C3
10567 25CF                        E7            .byte	$E7
10568 25D0                        FF            .byte	$FF
10569 25D1                        FF            .byte	$FF
10570 25D2                        FF            .byte	$FF
10571 25D3                        FF            .byte	$FF
10572 25D4                        FF            .byte	$FF
10573 25D5                        FF            .byte	$FF
10574                                           ! 1254  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
10575 25D6                        00            .byte	0
10576 25D7                        00            .byte	0
10577 25D8                        00            .byte	0
10578 25D9                        00            .byte	0
10579 25DA                        00            .byte	0
10580 25DB                        3C            .byte	$3C
10581 25DC                        66            .byte	$66
10582 25DD                        42            .byte	$42
10583 25DE                        42            .byte	$42
10584 25DF                        66            .byte	$66
10585 25E0                        3C            .byte	$3C
10586 25E1                        00            .byte	0
10587 25E2                        00            .byte	0
10588 25E3                        00            .byte	0
10589 25E4                        00            .byte	0
10590 25E5                        00            .byte	0
10591                                           ! 1255  0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff,
10592 25E6                        FF            .byte	$FF
10593 25E7                        FF            .byte	$FF
10594 25E8                        FF            .byte	$FF
10595 25E9                        FF            .byte	$FF
10596 25EA                        FF            .byte	$FF
10597 25EB                        C3            .byte	$C3
10598 25EC                        99            .byte	$99
10599 25ED                        BD            .byte	$BD
10600 25EE                        BD            .byte	$BD
10601 25EF                        99            .byte	$99
10602 25F0                        C3            .byte	$C3
10603 25F1                        FF            .byte	$FF
10604 25F2                        FF            .byte	$FF
10605 25F3                        FF            .byte	$FF
10606 25F4                        FF            .byte	$FF
10607 25F5                        FF            .byte	$FF
10608                                           ! 1256  0x00, 0x00, 0x1e, 0x0e, 0x1a, 0x32, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
10609 25F6                        00            .byte	0
10610 25F7                        00            .byte	0
10611 25F8                        1E            .byte	$1E
10612 25F9                        0E            .byte	$E
10613 25FA                        1A            .byte	$1A
10614 25FB                        32            .byte	$32
10615 25FC                        78            .byte	$78
10616 25FD                        CC            .byte	$CC
10617 25FE                        CC            .byte	$CC
10618 25FF                        CC            .byte	$CC
10619 2600                        CC            .byte	$CC
10620 2601                        78            .byte	$78
10621 2602                        00            .byte	0
10622 2603                        00            .byte	0
10623 2604                        00            .byte	0
10624 2605                        00            .byte	0
10625                                           ! 1257  0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10626 2606                        00            .byte	0
10627 2607                        00            .byte	0
10628 2608                        3C            .byte	$3C
10629 2609                        66            .byte	$66
10630 260A                        66            .byte	$66
10631 260B                        66            .byte	$66
10632 260C                        66            .byte	$66
10633 260D                        3C            .byte	$3C
10634 260E                        18            .byte	$18
10635 260F                        7E            .byte	$7E
10636 2610                        18            .byte	$18
10637 2611                        18            .byte	$18
10638 2612                        00            .byte	0
10639 2613                        00            .byte	0
10640 2614                        00            .byte	0
10641 2615                        00            .byte	0
10642                                           ! 1258  0x00, 0x00, 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00,
10643 2616                        00            .byte	0
10644 2617                        00            .byte	0
10645 2618                        3F            .byte	$3F
10646 2619                        33            .byte	$33
10647 261A                        3F            .byte	$3F
10648 261B                        30            .byte	$30
10649 261C                        30            .byte	$30
10650 261D                        30            .byte	$30
10651 261E                        30            .byte	$30
10652 261F                        70            .byte	$70
10653 2620                        F0            .byte	$F0
10654 2621                        E0            .byte	$E0
10655 2622                        00            .byte	0
10656 2623                        00            .byte	0
10657 2624                        00            .byte	0
10658 2625                        00            .byte	0
10659                                           ! 1259  0x00, 0x00, 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x63, 0x63, 0x67, 0xe7, 0xe6, 0xc0, 0x00, 0x00, 0x00,
10660 2626                        00            .byte	0
10661 2627                        00            .byte	0
10662 2628                        7F            .byte	$7F
10663 2629                        63            .byte	$63
10664 262A                        7F            .byte	$7F
10665 262B                        63            .byte	$63
10666 262C                        63            .byte	$63
10667 262D                        63            .byte	$63
10668 262E                        63            .byte	$63
10669 262F                        67            .byte	$67
10670 2630                        E7            .byte	$E7
10671 2631                        E6            .byte	$E6
10672 2632                        C0            .byte	$C0
10673 2633                        00            .byte	0
10674 2634                        00            .byte	0
10675 2635                        00            .byte	0
10676                                           ! 1260  0x00, 0x00, 0x00, 0x18, 0x18, 0xdb, 0x3c, 0xe7, 0x3c, 0xdb, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10677 2636                        00            .byte	0
10678 2637                        00            .byte	0
10679 2638                        00            .byte	0
10680 2639                        18            .byte	$18
10681 263A                        18            .byte	$18
10682 263B                        DB            .byte	$DB
10683 263C                        3C            .byte	$3C
10684 263D                        E7            .byte	$E7
10685 263E                        3C            .byte	$3C
10686 263F                        DB            .byte	$DB
10687 2640                        18            .byte	$18
10688 2641                        18            .byte	$18
10689 2642                        00            .byte	0
10690 2643                        00            .byte	0
10691 2644                        00            .byte	0
10692 2645                        00            .byte	0
10693                                           ! 1261  0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
10694 2646                        00            .byte	0
10695 2647                        80            .byte	$80
10696 2648                        C0            .byte	$C0
10697 2649                        E0            .byte	$E0
10698 264A                        F0            .byte	$F0
10699 264B                        F8            .byte	$F8
10700 264C                        FE            .byte	$FE
10701 264D                        F8            .byte	$F8
10702 264E                        F0            .byte	$F0
10703 264F                        E0            .byte	$E0
10704 2650                        C0            .byte	$C0
10705 2651                        80            .byte	$80
10706 2652                        00            .byte	0
10707 2653                        00            .byte	0
10708 2654                        00            .byte	0
10709 2655                        00            .byte	0
10710                                           ! 1262  0x00, 0x02, 0x06, 0x0e, 0x1e, 0x3e, 0xfe, 0x3e, 0x1e, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
10711 2656                        00            .byte	0
10712 2657                        02            .byte	2
10713 2658                        06            .byte	6
10714 2659                        0E            .byte	$E
10715 265A                        1E            .byte	$1E
10716 265B                        3E            .byte	$3E
10717 265C                        FE            .byte	$FE
10718 265D                        3E            .byte	$3E
10719 265E                        1E            .byte	$1E
10720 265F                        0E            .byte	$E
10721 2660                        06            .byte	6
10722 2661                        02            .byte	2
10723 2662                        00            .byte	0
10724 2663                        00            .byte	0
10725 2664                        00            .byte	0
10726 2665                        00            .byte	0
10727                                           ! 1263  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
10728 2666                        00            .byte	0
10729 2667                        00            .byte	0
10730 2668                        18            .byte	$18
10731 2669                        3C            .byte	$3C
10732 266A                        7E            .byte	$7E
10733 266B                        18            .byte	$18
10734 266C                        18            .byte	$18
10735 266D                        18            .byte	$18
10736 266E                        7E            .byte	$7E
10737 266F                        3C            .byte	$3C
10738 2670                        18            .byte	$18
10739 2671                        00            .byte	0
10740 2672                        00            .byte	0
10741 2673                        00            .byte	0
10742 2674                        00            .byte	0
10743 2675                        00            .byte	0
10744                                           ! 1264  0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
10745 2676                        00            .byte	0
10746 2677                        00            .byte	0
10747 2678                        66            .byte	$66
10748 2679                        66            .byte	$66
10749 267A                        66            .byte	$66
10750 267B                        66            .byte	$66
10751 267C                        66            .byte	$66
10752 267D                        66            .byte	$66
10753 267E                        66            .byte	$66
10754 267F                        00            .byte	0
10755 2680                        66            .byte	$66
10756 2681                        66            .byte	$66
10757 2682                        00            .byte	0
10758 2683                        00            .byte	0
10759 2684                        00            .byte	0
10760 2685                        00            .byte	0
10761                                           ! 1265  0x00, 0x00, 0x7f, 0xdb, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x00, 0x00, 0x00, 0x00,
10762 2686                        00            .byte	0
10763 2687                        00            .byte	0
10764 2688                        7F            .byte	$7F
10765 2689                        DB            .byte	$DB
10766 268A                        DB            .byte	$DB
10767 268B                        DB            .byte	$DB
10768 268C                        7B            .byte	$7B
10769 268D                        1B            .byte	$1B
10770 268E                        1B            .byte	$1B
10771 268F                        1B            .byte	$1B
10772 2690                        1B            .byte	$1B
10773 2691                        1B            .byte	$1B
10774 2692                        00            .byte	0
10775 2693                        00            .byte	0
10776 2694                        00            .byte	0
10777 2695                        00            .byte	0
10778                                           ! 1266  0x00, 0x7c, 0xc6, 0x60, 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00,
10779 2696                        00            .byte	0
10780 2697                        7C            .byte	$7C
10781 2698                        C6            .byte	$C6
10782 2699                        60            .byte	$60
10783 269A                        38            .byte	$38
10784 269B                        6C            .byte	$6C
10785 269C                        C6            .byte	$C6
10786 269D                        C6            .byte	$C6
10787 269E                        6C            .byte	$6C
10788 269F                        38            .byte	$38
10789 26A0                        0C            .byte	$C
10790 26A1                        C6            .byte	$C6
10791 26A2                        7C            .byte	$7C
10792 26A3                        00            .byte	0
10793 26A4                        00            .byte	0
10794 26A5                        00            .byte	0
10795                                           ! 1267  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
10796 26A6                        00            .byte	0
10797 26A7                        00            .byte	0
10798 26A8                        00            .byte	0
10799 26A9                        00            .byte	0
10800 26AA                        00            .byte	0
10801 26AB                        00            .byte	0
10802 26AC                        00            .byte	0
10803 26AD                        00            .byte	0
10804 26AE                        FE            .byte	$FE
10805 26AF                        FE            .byte	$FE
10806 26B0                        FE            .byte	$FE
10807 26B1                        FE            .byte	$FE
10808 26B2                        00            .byte	0
10809 26B3                        00            .byte	0
10810 26B4                        00            .byte	0
10811 26B5                        00            .byte	0
10812                                           ! 1268  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
10813 26B6                        00            .byte	0
10814 26B7                        00            .byte	0
10815 26B8                        18            .byte	$18
10816 26B9                        3C            .byte	$3C
10817 26BA                        7E            .byte	$7E
10818 26BB                        18            .byte	$18
10819 26BC                        18            .byte	$18
10820 26BD                        18            .byte	$18
10821 26BE                        7E            .byte	$7E
10822 26BF                        3C            .byte	$3C
10823 26C0                        18            .byte	$18
10824 26C1                        7E            .byte	$7E
10825 26C2                        00            .byte	0
10826 26C3                        00            .byte	0
10827 26C4                        00            .byte	0
10828 26C5                        00            .byte	0
10829                                           ! 1269  0x00, 0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10830 26C6                        00            .byte	0
10831 26C7                        00            .byte	0
10832 26C8                        18            .byte	$18
10833 26C9                        3C            .byte	$3C
10834 26CA                        7E            .byte	$7E
10835 26CB                        18            .byte	$18
10836 26CC                        18            .byte	$18
10837 26CD                        18            .byte	$18
10838 26CE                        18            .byte	$18
10839 26CF                        18            .byte	$18
10840 26D0                        18            .byte	$18
10841 26D1                        18            .byte	$18
10842 26D2                        00            .byte	0
10843 26D3                        00            .byte	0
10844 26D4                        00            .byte	0
10845 26D5                        00            .byte	0
10846                                           ! 1270  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
10847 26D6                        00            .byte	0
10848 26D7                        00            .byte	0
10849 26D8                        18            .byte	$18
10850 26D9                        18            .byte	$18
10851 26DA                        18            .byte	$18
10852 26DB                        18            .byte	$18
10853 26DC                        18            .byte	$18
10854 26DD                        18            .byte	$18
10855 26DE                        18            .byte	$18
10856 26DF                        7E            .byte	$7E
10857 26E0                        3C            .byte	$3C
10858 26E1                        18            .byte	$18
10859 26E2                        00            .byte	0
10860 26E3                        00            .byte	0
10861 26E4                        00            .byte	0
10862 26E5                        00            .byte	0
10863                                           ! 1271  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10864 26E6                        00            .byte	0
10865 26E7                        00            .byte	0
10866 26E8                        00            .byte	0
10867 26E9                        00            .byte	0
10868 26EA                        00            .byte	0
10869 26EB                        18            .byte	$18
10870 26EC                        0C            .byte	$C
10871 26ED                        FE            .byte	$FE
10872 26EE                        0C            .byte	$C
10873 26EF                        18            .byte	$18
10874 26F0                        00            .byte	0
10875 26F1                        00            .byte	0
10876 26F2                        00            .byte	0
10877 26F3                        00            .byte	0
10878 26F4                        00            .byte	0
10879 26F5                        00            .byte	0
10880                                           ! 1272  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10881 26F6                        00            .byte	0
10882 26F7                        00            .byte	0
10883 26F8                        00            .byte	0
10884 26F9                        00            .byte	0
10885 26FA                        00            .byte	0
10886 26FB                        30            .byte	$30
10887 26FC                        60            .byte	$60
10888 26FD                        FE            .byte	$FE
10889 26FE                        60            .byte	$60
10890 26FF                        30            .byte	$30
10891 2700                        00            .byte	0
10892 2701                        00            .byte	0
10893 2702                        00            .byte	0
10894 2703                        00            .byte	0
10895 2704                        00            .byte	0
10896 2705                        00            .byte	0
10897                                           ! 1273  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10898 2706                        00            .byte	0
10899 2707                        00            .byte	0
10900 2708                        00            .byte	0
10901 2709                        00            .byte	0
10902 270A                        00            .byte	0
10903 270B                        00            .byte	0
10904 270C                        C0            .byte	$C0
10905 270D                        C0            .byte	$C0
10906 270E                        C0            .byte	$C0
10907 270F                        FE            .byte	$FE
10908 2710                        00            .byte	0
10909 2711                        00            .byte	0
10910 2712                        00            .byte	0
10911 2713                        00            .byte	0
10912 2714                        00            .byte	0
10913 2715                        00            .byte	0
10914                                           ! 1274  0x00, 0x0
10915 2716                        00            .byte	0
10916                                           ! 1274 0, 0x00, 0x00, 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10917 2717                        00            .byte	0
10918 2718                        00            .byte	0
10919 2719                        00            .byte	0
10920 271A                        00            .byte	0
10921 271B                        24            .byte	$24
10922 271C                        66            .byte	$66
10923 271D                        FF            .byte	$FF
10924 271E                        66            .byte	$66
10925 271F                        24            .byte	$24
10926 2720                        00            .byte	0
10927 2721                        00            .byte	0
10928 2722                        00            .byte	0
10929 2723                        00            .byte	0
10930 2724                        00            .byte	0
10931 2725                        00            .byte	0
10932                                           ! 1275  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7c, 0x7c, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
10933 2726                        00            .byte	0
10934 2727                        00            .byte	0
10935 2728                        00            .byte	0
10936 2729                        00            .byte	0
10937 272A                        10            .byte	$10
10938 272B                        38            .byte	$38
10939 272C                        38            .byte	$38
10940 272D                        7C            .byte	$7C
10941 272E                        7C            .byte	$7C
10942 272F                        FE            .byte	$FE
10943 2730                        FE            .byte	$FE
10944 2731                        00            .byte	0
10945 2732                        00            .byte	0
10946 2733                        00            .byte	0
10947 2734                        00            .byte	0
10948 2735                        00            .byte	0
10949                                           ! 1276  0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0x7c, 0x7c, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
10950 2736                        00            .byte	0
10951 2737                        00            .byte	0
10952 2738                        00            .byte	0
10953 2739                        00            .byte	0
10954 273A                        FE            .byte	$FE
10955 273B                        FE            .byte	$FE
10956 273C                        7C            .byte	$7C
10957 273D                        7C            .byte	$7C
10958 273E                        38            .byte	$38
10959 273F                        38            .byte	$38
10960 2740                        10            .byte	$10
10961 2741                        00            .byte	0
10962 2742                        00            .byte	0
10963 2743                        00            .byte	0
10964 2744                        00            .byte	0
10965 2745                        00            .byte	0
10966                                           ! 1277  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
10967 2746                        00            .byte	0
10968 2747                        00            .byte	0
10969 2748                        00            .byte	0
10970 2749                        00            .byte	0
10971 274A                        00            .byte	0
10972 274B                        00            .byte	0
10973 274C                        00            .byte	0
10974 274D                        00            .byte	0
10975 274E                        00            .byte	0
10976 274F                        00            .byte	0
10977 2750                        00            .byte	0
10978 2751                        00            .byte	0
10979 2752                        00            .byte	0
10980 2753                        00            .byte	0
10981 2754                        00            .byte	0
10982 2755                        00            .byte	0
10983                                           ! 1278  0x00, 0x00, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
10984 2756                        00            .byte	0
10985 2757                        00            .byte	0
10986 2758                        18            .byte	$18
10987 2759                        3C            .byte	$3C
10988 275A                        3C            .byte	$3C
10989 275B                        3C            .byte	$3C
10990 275C                        18            .byte	$18
10991 275D                        18            .byte	$18
10992 275E                        18            .byte	$18
10993 275F                        00            .byte	0
10994 2760                        18            .byte	$18
10995 2761                        18            .byte	$18
10996 2762                        00            .byte	0
10997 2763                        00            .byte	0
10998 2764                        00            .byte	0
10999 2765                        00            .byte	0
11000                                           ! 1279  0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11001 2766                        00            .byte	0
11002 2767                        66            .byte	$66
11003 2768                        66            .byte	$66
11004 2769                        66            .byte	$66
11005 276A                        24            .byte	$24
11006 276B                        00            .byte	0
11007 276C                        00            .byte	0
11008 276D                        00            .byte	0
11009 276E                        00            .byte	0
11010 276F                        00            .byte	0
11011 2770                        00            .byte	0
11012 2771                        00            .byte	0
11013 2772                        00            .byte	0
11014 2773                        00            .byte	0
11015 2774                        00            .byte	0
11016 2775                        00            .byte	0
11017                                           ! 1280  0x00, 0x00, 0x00, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
11018 2776                        00            .byte	0
11019 2777                        00            .byte	0
11020 2778                        00            .byte	0
11021 2779                        6C            .byte	$6C
11022 277A                        6C            .byte	$6C
11023 277B                        FE            .byte	$FE
11024 277C                        6C            .byte	$6C
11025 277D                        6C            .byte	$6C
11026 277E                        6C            .byte	$6C
11027 277F                        FE            .byte	$FE
11028 2780                        6C            .byte	$6C
11029 2781                        6C            .byte	$6C
11030 2782                        00            .byte	0
11031 2783                        00            .byte	0
11032 2784                        00            .byte	0
11033 2785                        00            .byte	0
11034                                           ! 1281  0x18, 0x18, 0x7c, 0xc6, 0xc2, 0xc0, 0x7c, 0x06, 0x06, 0x86, 0xc6, 0x7c, 0x18, 0x18, 0x00, 0x00,
11035 2786                        18            .byte	$18
11036 2787                        18            .byte	$18
11037 2788                        7C            .byte	$7C
11038 2789                        C6            .byte	$C6
11039 278A                        C2            .byte	$C2
11040 278B                        C0            .byte	$C0
11041 278C                        7C            .byte	$7C
11042 278D                        06            .byte	6
11043 278E                        06            .byte	6
11044 278F                        86            .byte	$86
11045 2790                        C6            .byte	$C6
11046 2791                        7C            .byte	$7C
11047 2792                        18            .byte	$18
11048 2793                        18            .byte	$18
11049 2794                        00            .byte	0
11050 2795                        00            .byte	0
11051                                           ! 1282  0x00, 0x00, 0x00, 0x00, 0xc2, 0xc6, 0x0c, 0x18, 0x30, 0x60, 0xc6, 0x86, 0x00, 0x00, 0x00, 0x00,
11052 2796                        00            .byte	0
11053 2797                        00            .byte	0
11054 2798                        00            .byte	0
11055 2799                        00            .byte	0
11056 279A                        C2            .byte	$C2
11057 279B                        C6            .byte	$C6
11058 279C                        0C            .byte	$C
11059 279D                        18            .byte	$18
11060 279E                        30            .byte	$30
11061 279F                        60            .byte	$60
11062 27A0                        C6            .byte	$C6
11063 27A1                        86            .byte	$86
11064 27A2                        00            .byte	0
11065 27A3                        00            .byte	0
11066 27A4                        00            .byte	0
11067 27A5                        00            .byte	0
11068                                           ! 1283  0x00, 0x00, 0x38, 0x6c, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
11069 27A6                        00            .byte	0
11070 27A7                        00            .byte	0
11071 27A8                        38            .byte	$38
11072 27A9                        6C            .byte	$6C
11073 27AA                        6C            .byte	$6C
11074 27AB                        38            .byte	$38
11075 27AC                        76            .byte	$76
11076 27AD                        DC            .byte	$DC
11077 27AE                        CC            .byte	$CC
11078 27AF                        CC            .byte	$CC
11079 27B0                        CC            .byte	$CC
11080 27B1                        76            .byte	$76
11081 27B2                        00            .byte	0
11082 27B3                        00            .byte	0
11083 27B4                        00            .byte	0
11084 27B5                        00            .byte	0
11085                                           ! 1284  0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11086 27B6                        00            .byte	0
11087 27B7                        30            .byte	$30
11088 27B8                        30            .byte	$30
11089 27B9                        30            .byte	$30
11090 27BA                        60            .byte	$60
11091 27BB                        00            .byte	0
11092 27BC                        00            .byte	0
11093 27BD                        00            .byte	0
11094 27BE                        00            .byte	0
11095 27BF                        00            .byte	0
11096 27C0                        00            .byte	0
11097 27C1                        00            .byte	0
11098 27C2                        00            .byte	0
11099 27C3                        00            .byte	0
11100 27C4                        00            .byte	0
11101 27C5                        00            .byte	0
11102                                           ! 1285  0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00,
11103 27C6                        00            .byte	0
11104 27C7                        00            .byte	0
11105 27C8                        0C            .byte	$C
11106 27C9                        18            .byte	$18
11107 27CA                        30            .byte	$30
11108 27CB                        30            .byte	$30
11109 27CC                        30            .byte	$30
11110 27CD                        30            .byte	$30
11111 27CE                        30            .byte	$30
11112 27CF                        30            .byte	$30
11113 27D0                        18            .byte	$18
11114 27D1                        0C            .byte	$C
11115 27D2                        00            .byte	0
11116 27D3                        00            .byte	0
11117 27D4                        00            .byte	0
11118 27D5                        00            .byte	0
11119                                           ! 1286  0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11120 27D6                        00            .byte	0
11121 27D7                        00            .byte	0
11122 27D8                        30            .byte	$30
11123 27D9                        18            .byte	$18
11124 27DA                        0C            .byte	$C
11125 27DB                        0C            .byte	$C
11126 27DC                        0C            .byte	$C
11127 27DD                        0C            .byte	$C
11128 27DE                        0C            .byte	$C
11129 27DF                        0C            .byte	$C
11130 27E0                        18            .byte	$18
11131 27E1                        30            .byte	$30
11132 27E2                        00            .byte	0
11133 27E3                        00            .byte	0
11134 27E4                        00            .byte	0
11135 27E5                        00            .byte	0
11136                                           ! 1287  0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11137 27E6                        00            .byte	0
11138 27E7                        00            .byte	0
11139 27E8                        00            .byte	0
11140 27E9                        00            .byte	0
11141 27EA                        00            .byte	0
11142 27EB                        66            .byte	$66
11143 27EC                        3C            .byte	$3C
11144 27ED                        FF            .byte	$FF
11145 27EE                        3C            .byte	$3C
11146 27EF                        66            .byte	$66
11147 27F0                        00            .byte	0
11148 27F1                        00            .byte	0
11149 27F2                        00            .byte	0
11150 27F3                        00            .byte	0
11151 27F4                        00            .byte	0
11152 27F5                        00            .byte	0
11153                                           ! 1288  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11154 27F6                        00            .byte	0
11155 27F7                        00            .byte	0
11156 27F8                        00            .byte	0
11157 27F9                        00            .byte	0
11158 27FA                        00            .byte	0
11159 27FB                        18            .byte	$18
11160 27FC                        18            .byte	$18
11161 27FD                        7E            .byte	$7E
11162 27FE                        18            .byte	$18
11163 27FF                        18            .byte	$18
11164 2800                        00            .byte	0
11165 2801                        00            .byte	0
11166 2802                        00            .byte	0
11167 2803                        00            .byte	0
11168 2804                        00            .byte	0
11169 2805                        00            .byte	0
11170                                           ! 1289  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00,
11171 2806                        00            .byte	0
11172 2807                        00            .byte	0
11173 2808                        00            .byte	0
11174 2809                        00            .byte	0
11175 280A                        00            .byte	0
11176 280B                        00            .byte	0
11177 280C                        00            .byte	0
11178 280D                        00            .byte	0
11179 280E                        00            .byte	0
11180 280F                        18            .byte	$18
11181 2810                        18            .byte	$18
11182 2811                        18            .byte	$18
11183 2812                        30            .byte	$30
11184 2813                        00            .byte	0
11185 2814                        00            .byte	0
11186 2815                        00            .byte	0
11187                                           ! 1290  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11188 2816                        00            .byte	0
11189 2817                        00            .byte	0
11190 2818                        00            .byte	0
11191 2819                        00            .byte	0
11192 281A                        00            .byte	0
11193 281B                        00            .byte	0
11194 281C                        00            .byte	0
11195 281D                        FE            .byte	$FE
11196 281E                        00            .byte	0
11197 281F                        00            .byte	0
11198 2820                        00            .byte	0
11199 2821                        00            .byte	0
11200 2822                        00            .byte	0
11201 2823                        00            .byte	0
11202 2824                        00            .byte	0
11203 2825                        00            .byte	0
11204                                           ! 1291  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11205 2826                        00            .byte	0
11206 2827                        00            .byte	0
11207 2828                        00            .byte	0
11208 2829                        00            .byte	0
11209 282A                        00            .byte	0
11210 282B                        00            .byte	0
11211 282C                        00            .byte	0
11212 282D                        00            .byte	0
11213 282E                        00            .byte	0
11214 282F                        00            .byte	0
11215 2830                        18            .byte	$18
11216 2831                        18            .byte	$18
11217 2832                        00            .byte	0
11218 2833                        00            .byte	0
11219 2834                        00            .byte	0
11220 2835                        00            .byte	0
11221                                           ! 1292  0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00,
11222 2836                        00            .byte	0
11223 2837                        00            .byte	0
11224 2838                        00            .byte	0
11225 2839                        00            .byte	0
11226 283A                        02            .byte	2
11227 283B                        06            .byte	6
11228 283C                        0C            .byte	$C
11229 283D                        18            .byte	$18
11230 283E                        30            .byte	$30
11231 283F                        60            .byte	$60
11232 2840                        C0            .byte	$C0
11233 2841                        80            .byte	$80
11234 2842                        00            .byte	0
11235 2843                        00            .byte	0
11236 2844                        00            .byte	0
11237 2845                        00            .byte	0
11238                                           ! 1293  0x00, 0x00, 0x3c, 0x66, 0xc3, 0xc3, 0xdb, 0xdb, 0xc3, 0xc3, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11239 2846                        00            .byte	0
11240 2847                        00            .byte	0
11241 2848                        3C            .byte	$3C
11242 2849                        66            .byte	$66
11243 284A                        C3            .byte	$C3
11244 284B                        C3            .byte	$C3
11245 284C                        DB            .byte	$DB
11246 284D                        DB            .byte	$DB
11247 284E                        C3            .byte	$C3
11248 284F                        C3            .byte	$C3
11249 2850                        66            .byte	$66
11250 2851                        3C            .byte	$3C
11251 2852                        00            .byte	0
11252 2853                        00            .byte	0
11253 2854                        00            .byte	0
11254 2855                        00            .byte	0
11255                                           ! 1294  0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
11256 2856                        00            .byte	0
11257 2857                        00            .byte	0
11258 2858                        18            .byte	$18
11259 2859                        38            .byte	$38
11260 285A                        78            .byte	$78
11261 285B                        18            .byte	$18
11262 285C                        18            .byte	$18
11263 285D                        18            .byte	$18
11264 285E                        18            .byte	$18
11265 285F                        18            .byte	$18
11266 2860                        18            .byte	$18
11267 2861                        7E            .byte	$7E
11268 2862                        00            .byte	0
11269 2863                        00            .byte	0
11270 2864                        00            .byte	0
11271 2865                        00            .byte	0
11272                                           ! 1295  0x00, 0x00, 0x7c, 0x
11273 2866                        00            .byte	0
11274 2867                        00            .byte	0
11275 2868                        7C            .byte	$7C
11276                                           ! 1295 c6, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
11277 2869                        C6            .byte	$C6
11278 286A                        06            .byte	6
11279 286B                        0C            .byte	$C
11280 286C                        18            .byte	$18
11281 286D                        30            .byte	$30
11282 286E                        60            .byte	$60
11283 286F                        C0            .byte	$C0
11284 2870                        C6            .byte	$C6
11285 2871                        FE            .byte	$FE
11286 2872                        00            .byte	0
11287 2873                        00            .byte	0
11288 2874                        00            .byte	0
11289 2875                        00            .byte	0
11290                                           ! 1296  0x00, 0x00, 0x7c, 0xc6, 0x06, 0x06, 0x3c, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11291 2876                        00            .byte	0
11292 2877                        00            .byte	0
11293 2878                        7C            .byte	$7C
11294 2879                        C6            .byte	$C6
11295 287A                        06            .byte	6
11296 287B                        06            .byte	6
11297 287C                        3C            .byte	$3C
11298 287D                        06            .byte	6
11299 287E                        06            .byte	6
11300 287F                        06            .byte	6
11301 2880                        C6            .byte	$C6
11302 2881                        7C            .byte	$7C
11303 2882                        00            .byte	0
11304 2883                        00            .byte	0
11305 2884                        00            .byte	0
11306 2885                        00            .byte	0
11307                                           ! 1297  0x00, 0x00, 0x0c, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00,
11308 2886                        00            .byte	0
11309 2887                        00            .byte	0
11310 2888                        0C            .byte	$C
11311 2889                        1C            .byte	$1C
11312 288A                        3C            .byte	$3C
11313 288B                        6C            .byte	$6C
11314 288C                        CC            .byte	$CC
11315 288D                        FE            .byte	$FE
11316 288E                        0C            .byte	$C
11317 288F                        0C            .byte	$C
11318 2890                        0C            .byte	$C
11319 2891                        1E            .byte	$1E
11320 2892                        00            .byte	0
11321 2893                        00            .byte	0
11322 2894                        00            .byte	0
11323 2895                        00            .byte	0
11324                                           ! 1298  0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xfc, 0x06, 0x06, 0x06, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11325 2896                        00            .byte	0
11326 2897                        00            .byte	0
11327 2898                        FE            .byte	$FE
11328 2899                        C0            .byte	$C0
11329 289A                        C0            .byte	$C0
11330 289B                        C0            .byte	$C0
11331 289C                        FC            .byte	$FC
11332 289D                        06            .byte	6
11333 289E                        06            .byte	6
11334 289F                        06            .byte	6
11335 28A0                        C6            .byte	$C6
11336 28A1                        7C            .byte	$7C
11337 28A2                        00            .byte	0
11338 28A3                        00            .byte	0
11339 28A4                        00            .byte	0
11340 28A5                        00            .byte	0
11341                                           ! 1299  0x00, 0x00, 0x38, 0x60, 0xc0, 0xc0, 0xfc, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11342 28A6                        00            .byte	0
11343 28A7                        00            .byte	0
11344 28A8                        38            .byte	$38
11345 28A9                        60            .byte	$60
11346 28AA                        C0            .byte	$C0
11347 28AB                        C0            .byte	$C0
11348 28AC                        FC            .byte	$FC
11349 28AD                        C6            .byte	$C6
11350 28AE                        C6            .byte	$C6
11351 28AF                        C6            .byte	$C6
11352 28B0                        C6            .byte	$C6
11353 28B1                        7C            .byte	$7C
11354 28B2                        00            .byte	0
11355 28B3                        00            .byte	0
11356 28B4                        00            .byte	0
11357 28B5                        00            .byte	0
11358                                           ! 1300  0x00, 0x00, 0xfe, 0xc6, 0x06, 0x06, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00,
11359 28B6                        00            .byte	0
11360 28B7                        00            .byte	0
11361 28B8                        FE            .byte	$FE
11362 28B9                        C6            .byte	$C6
11363 28BA                        06            .byte	6
11364 28BB                        06            .byte	6
11365 28BC                        0C            .byte	$C
11366 28BD                        18            .byte	$18
11367 28BE                        30            .byte	$30
11368 28BF                        30            .byte	$30
11369 28C0                        30            .byte	$30
11370 28C1                        30            .byte	$30
11371 28C2                        00            .byte	0
11372 28C3                        00            .byte	0
11373 28C4                        00            .byte	0
11374 28C5                        00            .byte	0
11375                                           ! 1301  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11376 28C6                        00            .byte	0
11377 28C7                        00            .byte	0
11378 28C8                        7C            .byte	$7C
11379 28C9                        C6            .byte	$C6
11380 28CA                        C6            .byte	$C6
11381 28CB                        C6            .byte	$C6
11382 28CC                        7C            .byte	$7C
11383 28CD                        C6            .byte	$C6
11384 28CE                        C6            .byte	$C6
11385 28CF                        C6            .byte	$C6
11386 28D0                        C6            .byte	$C6
11387 28D1                        7C            .byte	$7C
11388 28D2                        00            .byte	0
11389 28D3                        00            .byte	0
11390 28D4                        00            .byte	0
11391 28D5                        00            .byte	0
11392                                           ! 1302  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x06, 0x06, 0x0c, 0x78, 0x00, 0x00, 0x00, 0x00,
11393 28D6                        00            .byte	0
11394 28D7                        00            .byte	0
11395 28D8                        7C            .byte	$7C
11396 28D9                        C6            .byte	$C6
11397 28DA                        C6            .byte	$C6
11398 28DB                        C6            .byte	$C6
11399 28DC                        7E            .byte	$7E
11400 28DD                        06            .byte	6
11401 28DE                        06            .byte	6
11402 28DF                        06            .byte	6
11403 28E0                        0C            .byte	$C
11404 28E1                        78            .byte	$78
11405 28E2                        00            .byte	0
11406 28E3                        00            .byte	0
11407 28E4                        00            .byte	0
11408 28E5                        00            .byte	0
11409                                           ! 1303  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
11410 28E6                        00            .byte	0
11411 28E7                        00            .byte	0
11412 28E8                        00            .byte	0
11413 28E9                        00            .byte	0
11414 28EA                        18            .byte	$18
11415 28EB                        18            .byte	$18
11416 28EC                        00            .byte	0
11417 28ED                        00            .byte	0
11418 28EE                        00            .byte	0
11419 28EF                        18            .byte	$18
11420 28F0                        18            .byte	$18
11421 28F1                        00            .byte	0
11422 28F2                        00            .byte	0
11423 28F3                        00            .byte	0
11424 28F4                        00            .byte	0
11425 28F5                        00            .byte	0
11426                                           ! 1304  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00,
11427 28F6                        00            .byte	0
11428 28F7                        00            .byte	0
11429 28F8                        00            .byte	0
11430 28F9                        00            .byte	0
11431 28FA                        18            .byte	$18
11432 28FB                        18            .byte	$18
11433 28FC                        00            .byte	0
11434 28FD                        00            .byte	0
11435 28FE                        00            .byte	0
11436 28FF                        18            .byte	$18
11437 2900                        18            .byte	$18
11438 2901                        30            .byte	$30
11439 2902                        00            .byte	0
11440 2903                        00            .byte	0
11441 2904                        00            .byte	0
11442 2905                        00            .byte	0
11443                                           ! 1305  0x00, 0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00,
11444 2906                        00            .byte	0
11445 2907                        00            .byte	0
11446 2908                        00            .byte	0
11447 2909                        06            .byte	6
11448 290A                        0C            .byte	$C
11449 290B                        18            .byte	$18
11450 290C                        30            .byte	$30
11451 290D                        60            .byte	$60
11452 290E                        30            .byte	$30
11453 290F                        18            .byte	$18
11454 2910                        0C            .byte	$C
11455 2911                        06            .byte	6
11456 2912                        00            .byte	0
11457 2913                        00            .byte	0
11458 2914                        00            .byte	0
11459 2915                        00            .byte	0
11460                                           ! 1306  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
11461 2916                        00            .byte	0
11462 2917                        00            .byte	0
11463 2918                        00            .byte	0
11464 2919                        00            .byte	0
11465 291A                        00            .byte	0
11466 291B                        7E            .byte	$7E
11467 291C                        00            .byte	0
11468 291D                        00            .byte	0
11469 291E                        7E            .byte	$7E
11470 291F                        00            .byte	0
11471 2920                        00            .byte	0
11472 2921                        00            .byte	0
11473 2922                        00            .byte	0
11474 2923                        00            .byte	0
11475 2924                        00            .byte	0
11476 2925                        00            .byte	0
11477                                           ! 1307  0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00,
11478 2926                        00            .byte	0
11479 2927                        00            .byte	0
11480 2928                        00            .byte	0
11481 2929                        60            .byte	$60
11482 292A                        30            .byte	$30
11483 292B                        18            .byte	$18
11484 292C                        0C            .byte	$C
11485 292D                        06            .byte	6
11486 292E                        0C            .byte	$C
11487 292F                        18            .byte	$18
11488 2930                        30            .byte	$30
11489 2931                        60            .byte	$60
11490 2932                        00            .byte	0
11491 2933                        00            .byte	0
11492 2934                        00            .byte	0
11493 2935                        00            .byte	0
11494                                           ! 1308  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x0c, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
11495 2936                        00            .byte	0
11496 2937                        00            .byte	0
11497 2938                        7C            .byte	$7C
11498 2939                        C6            .byte	$C6
11499 293A                        C6            .byte	$C6
11500 293B                        0C            .byte	$C
11501 293C                        18            .byte	$18
11502 293D                        18            .byte	$18
11503 293E                        18            .byte	$18
11504 293F                        00            .byte	0
11505 2940                        18            .byte	$18
11506 2941                        18            .byte	$18
11507 2942                        00            .byte	0
11508 2943                        00            .byte	0
11509 2944                        00            .byte	0
11510 2945                        00            .byte	0
11511                                           ! 1309  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xde, 0xde, 0xde, 0xdc, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00,
11512 2946                        00            .byte	0
11513 2947                        00            .byte	0
11514 2948                        00            .byte	0
11515 2949                        7C            .byte	$7C
11516 294A                        C6            .byte	$C6
11517 294B                        C6            .byte	$C6
11518 294C                        DE            .byte	$DE
11519 294D                        DE            .byte	$DE
11520 294E                        DE            .byte	$DE
11521 294F                        DC            .byte	$DC
11522 2950                        C0            .byte	$C0
11523 2951                        7C            .byte	$7C
11524 2952                        00            .byte	0
11525 2953                        00            .byte	0
11526 2954                        00            .byte	0
11527 2955                        00            .byte	0
11528                                           ! 1310  0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11529 2956                        00            .byte	0
11530 2957                        00            .byte	0
11531 2958                        10            .byte	$10
11532 2959                        38            .byte	$38
11533 295A                        6C            .byte	$6C
11534 295B                        C6            .byte	$C6
11535 295C                        C6            .byte	$C6
11536 295D                        FE            .byte	$FE
11537 295E                        C6            .byte	$C6
11538 295F                        C6            .byte	$C6
11539 2960                        C6            .byte	$C6
11540 2961                        C6            .byte	$C6
11541 2962                        00            .byte	0
11542 2963                        00            .byte	0
11543 2964                        00            .byte	0
11544 2965                        00            .byte	0
11545                                           ! 1311  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x66, 0x66, 0xfc, 0x00, 0x00, 0x00, 0x00,
11546 2966                        00            .byte	0
11547 2967                        00            .byte	0
11548 2968                        FC            .byte	$FC
11549 2969                        66            .byte	$66
11550 296A                        66            .byte	$66
11551 296B                        66            .byte	$66
11552 296C                        7C            .byte	$7C
11553 296D                        66            .byte	$66
11554 296E                        66            .byte	$66
11555 296F                        66            .byte	$66
11556 2970                        66            .byte	$66
11557 2971                        FC            .byte	$FC
11558 2972                        00            .byte	0
11559 2973                        00            .byte	0
11560 2974                        00            .byte	0
11561 2975                        00            .byte	0
11562                                           ! 1312  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
11563 2976                        00            .byte	0
11564 2977                        00            .byte	0
11565 2978                        3C            .byte	$3C
11566 2979                        66            .byte	$66
11567 297A                        C2            .byte	$C2
11568 297B                        C0            .byte	$C0
11569 297C                        C0            .byte	$C0
11570 297D                        C0            .byte	$C0
11571 297E                        C0            .byte	$C0
11572 297F                        C2            .byte	$C2
11573 2980                        66            .byte	$66
11574 2981                        3C            .byte	$3C
11575 2982                        00            .byte	0
11576 2983                        00            .byte	0
11577 2984                        00            .byte	0
11578 2985                        00            .byte	0
11579                                           ! 1313  0x00, 0x00, 0xf8, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0x00, 0x00, 0x00,
11580 2986                        00            .byte	0
11581 2987                        00            .byte	0
11582 2988                        F8            .byte	$F8
11583 2989                        6C            .byte	$6C
11584 298A                        66            .byte	$66
11585 298B                        66            .byte	$66
11586 298C                        66            .byte	$66
11587 298D                        66            .byte	$66
11588 298E                        66            .byte	$66
11589 298F                        66            .byte	$66
11590 2990                        6C            .byte	$6C
11591 2991                        F8            .byte	$F8
11592 2992                        00            .byte	0
11593 2993                        00            .byte	0
11594 2994                        00            .byte	0
11595 2995                        00            .byte	0
11596                                           ! 1314  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11597 2996                        00            .byte	0
11598 2997                        00            .byte	0
11599 2998                        FE            .byte	$FE
11600 2999                        66            .byte	$66
11601 299A                        62            .byte	$62
11602 299B                        68            .byte	$68
11603 299C                        78            .byte	$78
11604 299D                        68            .byte	$68
11605 299E                        60            .byte	$60
11606 299F                        62            .byte	$62
11607 29A0                        66            .byte	$66
11608 29A1                        FE            .byte	$FE
11609 29A2                        00            .byte	0
11610 29A3                        00            .byte	0
11611 29A4                        00            .byte	0
11612 29A5                        00            .byte	0
11613                                           ! 1315  0x00, 0x00, 0xfe, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11614 29A6                        00            .byte	0
11615 29A7                        00            .byte	0
11616 29A8                        FE            .byte	$FE
11617 29A9                        66            .byte	$66
11618 29AA                        62            .byte	$62
11619 29AB                        68            .byte	$68
11620 29AC                        78            .byte	$78
11621 29AD                        68            .byte	$68
11622 29AE                        60            .byte	$60
11623 29AF                        60            .byte	$60
11624 29B0                        60            .byte	$60
11625 29B1                        F0            .byte	$F0
11626 29B2                        00            .byte	0
11627 29B3                        00            .byte	0
11628 29B4                        00            .byte	0
11629 29B5                        00            .byte	0
11630                                           ! 1316  0x00, 0x00, 0x3c, 0x66, 0xc2, 0
11631 29B6                        00            .byte	0
11632 29B7                        00            .byte	0
11633 29B8                        3C            .byte	$3C
11634 29B9                        66            .byte	$66
11635 29BA                        C2            .byte	$C2
11636                                           ! 1316 xc0, 0xc0, 0xde, 0xc6, 0xc6, 0x66, 0x3a, 0x00, 0x00, 0x00, 0x00,
11637 29BB                        C0            .byte	$C0
11638 29BC                        C0            .byte	$C0
11639 29BD                        DE            .byte	$DE
11640 29BE                        C6            .byte	$C6
11641 29BF                        C6            .byte	$C6
11642 29C0                        66            .byte	$66
11643 29C1                        3A            .byte	$3A
11644 29C2                        00            .byte	0
11645 29C3                        00            .byte	0
11646 29C4                        00            .byte	0
11647 29C5                        00            .byte	0
11648                                           ! 1317  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11649 29C6                        00            .byte	0
11650 29C7                        00            .byte	0
11651 29C8                        C6            .byte	$C6
11652 29C9                        C6            .byte	$C6
11653 29CA                        C6            .byte	$C6
11654 29CB                        C6            .byte	$C6
11655 29CC                        FE            .byte	$FE
11656 29CD                        C6            .byte	$C6
11657 29CE                        C6            .byte	$C6
11658 29CF                        C6            .byte	$C6
11659 29D0                        C6            .byte	$C6
11660 29D1                        C6            .byte	$C6
11661 29D2                        00            .byte	0
11662 29D3                        00            .byte	0
11663 29D4                        00            .byte	0
11664 29D5                        00            .byte	0
11665                                           ! 1318  0x00, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11666 29D6                        00            .byte	0
11667 29D7                        00            .byte	0
11668 29D8                        3C            .byte	$3C
11669 29D9                        18            .byte	$18
11670 29DA                        18            .byte	$18
11671 29DB                        18            .byte	$18
11672 29DC                        18            .byte	$18
11673 29DD                        18            .byte	$18
11674 29DE                        18            .byte	$18
11675 29DF                        18            .byte	$18
11676 29E0                        18            .byte	$18
11677 29E1                        3C            .byte	$3C
11678 29E2                        00            .byte	0
11679 29E3                        00            .byte	0
11680 29E4                        00            .byte	0
11681 29E5                        00            .byte	0
11682                                           ! 1319  0x00, 0x00, 0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0x00, 0x00,
11683 29E6                        00            .byte	0
11684 29E7                        00            .byte	0
11685 29E8                        1E            .byte	$1E
11686 29E9                        0C            .byte	$C
11687 29EA                        0C            .byte	$C
11688 29EB                        0C            .byte	$C
11689 29EC                        0C            .byte	$C
11690 29ED                        0C            .byte	$C
11691 29EE                        CC            .byte	$CC
11692 29EF                        CC            .byte	$CC
11693 29F0                        CC            .byte	$CC
11694 29F1                        78            .byte	$78
11695 29F2                        00            .byte	0
11696 29F3                        00            .byte	0
11697 29F4                        00            .byte	0
11698 29F5                        00            .byte	0
11699                                           ! 1320  0x00, 0x00, 0xe6, 0x66, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11700 29F6                        00            .byte	0
11701 29F7                        00            .byte	0
11702 29F8                        E6            .byte	$E6
11703 29F9                        66            .byte	$66
11704 29FA                        66            .byte	$66
11705 29FB                        6C            .byte	$6C
11706 29FC                        78            .byte	$78
11707 29FD                        78            .byte	$78
11708 29FE                        6C            .byte	$6C
11709 29FF                        66            .byte	$66
11710 2A00                        66            .byte	$66
11711 2A01                        E6            .byte	$E6
11712 2A02                        00            .byte	0
11713 2A03                        00            .byte	0
11714 2A04                        00            .byte	0
11715 2A05                        00            .byte	0
11716                                           ! 1321  0x00, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
11717 2A06                        00            .byte	0
11718 2A07                        00            .byte	0
11719 2A08                        F0            .byte	$F0
11720 2A09                        60            .byte	$60
11721 2A0A                        60            .byte	$60
11722 2A0B                        60            .byte	$60
11723 2A0C                        60            .byte	$60
11724 2A0D                        60            .byte	$60
11725 2A0E                        60            .byte	$60
11726 2A0F                        62            .byte	$62
11727 2A10                        66            .byte	$66
11728 2A11                        FE            .byte	$FE
11729 2A12                        00            .byte	0
11730 2A13                        00            .byte	0
11731 2A14                        00            .byte	0
11732 2A15                        00            .byte	0
11733                                           ! 1322  0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11734 2A16                        00            .byte	0
11735 2A17                        00            .byte	0
11736 2A18                        C3            .byte	$C3
11737 2A19                        E7            .byte	$E7
11738 2A1A                        FF            .byte	$FF
11739 2A1B                        FF            .byte	$FF
11740 2A1C                        DB            .byte	$DB
11741 2A1D                        C3            .byte	$C3
11742 2A1E                        C3            .byte	$C3
11743 2A1F                        C3            .byte	$C3
11744 2A20                        C3            .byte	$C3
11745 2A21                        C3            .byte	$C3
11746 2A22                        00            .byte	0
11747 2A23                        00            .byte	0
11748 2A24                        00            .byte	0
11749 2A25                        00            .byte	0
11750                                           ! 1323  0x00, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
11751 2A26                        00            .byte	0
11752 2A27                        00            .byte	0
11753 2A28                        C6            .byte	$C6
11754 2A29                        E6            .byte	$E6
11755 2A2A                        F6            .byte	$F6
11756 2A2B                        FE            .byte	$FE
11757 2A2C                        DE            .byte	$DE
11758 2A2D                        CE            .byte	$CE
11759 2A2E                        C6            .byte	$C6
11760 2A2F                        C6            .byte	$C6
11761 2A30                        C6            .byte	$C6
11762 2A31                        C6            .byte	$C6
11763 2A32                        00            .byte	0
11764 2A33                        00            .byte	0
11765 2A34                        00            .byte	0
11766 2A35                        00            .byte	0
11767                                           ! 1324  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11768 2A36                        00            .byte	0
11769 2A37                        00            .byte	0
11770 2A38                        7C            .byte	$7C
11771 2A39                        C6            .byte	$C6
11772 2A3A                        C6            .byte	$C6
11773 2A3B                        C6            .byte	$C6
11774 2A3C                        C6            .byte	$C6
11775 2A3D                        C6            .byte	$C6
11776 2A3E                        C6            .byte	$C6
11777 2A3F                        C6            .byte	$C6
11778 2A40                        C6            .byte	$C6
11779 2A41                        7C            .byte	$7C
11780 2A42                        00            .byte	0
11781 2A43                        00            .byte	0
11782 2A44                        00            .byte	0
11783 2A45                        00            .byte	0
11784                                           ! 1325  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
11785 2A46                        00            .byte	0
11786 2A47                        00            .byte	0
11787 2A48                        FC            .byte	$FC
11788 2A49                        66            .byte	$66
11789 2A4A                        66            .byte	$66
11790 2A4B                        66            .byte	$66
11791 2A4C                        7C            .byte	$7C
11792 2A4D                        60            .byte	$60
11793 2A4E                        60            .byte	$60
11794 2A4F                        60            .byte	$60
11795 2A50                        60            .byte	$60
11796 2A51                        F0            .byte	$F0
11797 2A52                        00            .byte	0
11798 2A53                        00            .byte	0
11799 2A54                        00            .byte	0
11800 2A55                        00            .byte	0
11801                                           ! 1326  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xd6, 0xde, 0x7c, 0x0c, 0x0e, 0x00, 0x00,
11802 2A56                        00            .byte	0
11803 2A57                        00            .byte	0
11804 2A58                        7C            .byte	$7C
11805 2A59                        C6            .byte	$C6
11806 2A5A                        C6            .byte	$C6
11807 2A5B                        C6            .byte	$C6
11808 2A5C                        C6            .byte	$C6
11809 2A5D                        C6            .byte	$C6
11810 2A5E                        C6            .byte	$C6
11811 2A5F                        D6            .byte	$D6
11812 2A60                        DE            .byte	$DE
11813 2A61                        7C            .byte	$7C
11814 2A62                        0C            .byte	$C
11815 2A63                        0E            .byte	$E
11816 2A64                        00            .byte	0
11817 2A65                        00            .byte	0
11818                                           ! 1327  0x00, 0x00, 0xfc, 0x66, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
11819 2A66                        00            .byte	0
11820 2A67                        00            .byte	0
11821 2A68                        FC            .byte	$FC
11822 2A69                        66            .byte	$66
11823 2A6A                        66            .byte	$66
11824 2A6B                        66            .byte	$66
11825 2A6C                        7C            .byte	$7C
11826 2A6D                        6C            .byte	$6C
11827 2A6E                        66            .byte	$66
11828 2A6F                        66            .byte	$66
11829 2A70                        66            .byte	$66
11830 2A71                        E6            .byte	$E6
11831 2A72                        00            .byte	0
11832 2A73                        00            .byte	0
11833 2A74                        00            .byte	0
11834 2A75                        00            .byte	0
11835                                           ! 1328  0x00, 0x00, 0x7c, 0xc6, 0xc6, 0x60, 0x38, 0x0c, 0x06, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11836 2A76                        00            .byte	0
11837 2A77                        00            .byte	0
11838 2A78                        7C            .byte	$7C
11839 2A79                        C6            .byte	$C6
11840 2A7A                        C6            .byte	$C6
11841 2A7B                        60            .byte	$60
11842 2A7C                        38            .byte	$38
11843 2A7D                        0C            .byte	$C
11844 2A7E                        06            .byte	6
11845 2A7F                        C6            .byte	$C6
11846 2A80                        C6            .byte	$C6
11847 2A81                        7C            .byte	$7C
11848 2A82                        00            .byte	0
11849 2A83                        00            .byte	0
11850 2A84                        00            .byte	0
11851 2A85                        00            .byte	0
11852                                           ! 1329  0x00, 0x00, 0xff, 0xdb, 0x99, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11853 2A86                        00            .byte	0
11854 2A87                        00            .byte	0
11855 2A88                        FF            .byte	$FF
11856 2A89                        DB            .byte	$DB
11857 2A8A                        99            .byte	$99
11858 2A8B                        18            .byte	$18
11859 2A8C                        18            .byte	$18
11860 2A8D                        18            .byte	$18
11861 2A8E                        18            .byte	$18
11862 2A8F                        18            .byte	$18
11863 2A90                        18            .byte	$18
11864 2A91                        3C            .byte	$3C
11865 2A92                        00            .byte	0
11866 2A93                        00            .byte	0
11867 2A94                        00            .byte	0
11868 2A95                        00            .byte	0
11869                                           ! 1330  0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
11870 2A96                        00            .byte	0
11871 2A97                        00            .byte	0
11872 2A98                        C6            .byte	$C6
11873 2A99                        C6            .byte	$C6
11874 2A9A                        C6            .byte	$C6
11875 2A9B                        C6            .byte	$C6
11876 2A9C                        C6            .byte	$C6
11877 2A9D                        C6            .byte	$C6
11878 2A9E                        C6            .byte	$C6
11879 2A9F                        C6            .byte	$C6
11880 2AA0                        C6            .byte	$C6
11881 2AA1                        7C            .byte	$7C
11882 2AA2                        00            .byte	0
11883 2AA3                        00            .byte	0
11884 2AA4                        00            .byte	0
11885 2AA5                        00            .byte	0
11886                                           ! 1331  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
11887 2AA6                        00            .byte	0
11888 2AA7                        00            .byte	0
11889 2AA8                        C3            .byte	$C3
11890 2AA9                        C3            .byte	$C3
11891 2AAA                        C3            .byte	$C3
11892 2AAB                        C3            .byte	$C3
11893 2AAC                        C3            .byte	$C3
11894 2AAD                        C3            .byte	$C3
11895 2AAE                        C3            .byte	$C3
11896 2AAF                        66            .byte	$66
11897 2AB0                        3C            .byte	$3C
11898 2AB1                        18            .byte	$18
11899 2AB2                        00            .byte	0
11900 2AB3                        00            .byte	0
11901 2AB4                        00            .byte	0
11902 2AB5                        00            .byte	0
11903                                           ! 1332  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
11904 2AB6                        00            .byte	0
11905 2AB7                        00            .byte	0
11906 2AB8                        C3            .byte	$C3
11907 2AB9                        C3            .byte	$C3
11908 2ABA                        C3            .byte	$C3
11909 2ABB                        C3            .byte	$C3
11910 2ABC                        C3            .byte	$C3
11911 2ABD                        DB            .byte	$DB
11912 2ABE                        DB            .byte	$DB
11913 2ABF                        FF            .byte	$FF
11914 2AC0                        66            .byte	$66
11915 2AC1                        66            .byte	$66
11916 2AC2                        00            .byte	0
11917 2AC3                        00            .byte	0
11918 2AC4                        00            .byte	0
11919 2AC5                        00            .byte	0
11920                                           ! 1333  0x00, 0x00, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00,
11921 2AC6                        00            .byte	0
11922 2AC7                        00            .byte	0
11923 2AC8                        C3            .byte	$C3
11924 2AC9                        C3            .byte	$C3
11925 2ACA                        66            .byte	$66
11926 2ACB                        3C            .byte	$3C
11927 2ACC                        18            .byte	$18
11928 2ACD                        18            .byte	$18
11929 2ACE                        3C            .byte	$3C
11930 2ACF                        66            .byte	$66
11931 2AD0                        C3            .byte	$C3
11932 2AD1                        C3            .byte	$C3
11933 2AD2                        00            .byte	0
11934 2AD3                        00            .byte	0
11935 2AD4                        00            .byte	0
11936 2AD5                        00            .byte	0
11937                                           ! 1334  0x00, 0x00, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
11938 2AD6                        00            .byte	0
11939 2AD7                        00            .byte	0
11940 2AD8                        C3            .byte	$C3
11941 2AD9                        C3            .byte	$C3
11942 2ADA                        C3            .byte	$C3
11943 2ADB                        66            .byte	$66
11944 2ADC                        3C            .byte	$3C
11945 2ADD                        18            .byte	$18
11946 2ADE                        18            .byte	$18
11947 2ADF                        18            .byte	$18
11948 2AE0                        18            .byte	$18
11949 2AE1                        3C            .byte	$3C
11950 2AE2                        00            .byte	0
11951 2AE3                        00            .byte	0
11952 2AE4                        00            .byte	0
11953 2AE5                        00            .byte	0
11954                                           ! 1335  0x00, 0x00, 0xff, 0xc3, 0x86, 0x0c, 0x18, 0x30, 0x60, 0xc1, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00,
11955 2AE6                        00            .byte	0
11956 2AE7                        00            .byte	0
11957 2AE8                        FF            .byte	$FF
11958 2AE9                        C3            .byte	$C3
11959 2AEA                        86            .byte	$86
11960 2AEB                        0C            .byte	$C
11961 2AEC                        18            .byte	$18
11962 2AED                        30            .byte	$30
11963 2AEE                        60            .byte	$60
11964 2AEF                        C1            .byte	$C1
11965 2AF0                        C3            .byte	$C3
11966 2AF1                        FF            .byte	$FF
11967 2AF2                        00            .byte	0
11968 2AF3                        00            .byte	0
11969 2AF4                        00            .byte	0
11970 2AF5                        00            .byte	0
11971                                           ! 1336  0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00, 0x00, 0x00, 0x00,
11972 2AF6                        00            .byte	0
11973 2AF7                        00            .byte	0
11974 2AF8                        3C            .byte	$3C
11975 2AF9                        30            .byte	$30
11976 2AFA                        30            .byte	$30
11977 2AFB                        30            .byte	$30
11978 2AFC                        30            .byte	$30
11979 2AFD                        30            .byte	$30
11980 2AFE                        30            .byte	$30
11981 2AFF                        30            .byte	$30
11982 2B00                        30            .byte	$30
11983 2B01                        3C            .byte	$3C
11984 2B02                        00            .byte	0
11985 2B03                        00            .byte	0
11986 2B04                        00            .byte	0
11987 2B05                        00            .byte	0
11988                                           ! 1337  0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0x70, 
11989 2B06                        00            .byte	0
11990 2B07                        00            .byte	0
11991 2B08                        00            .byte	0
11992 2B09                        80            .byte	$80
11993 2B0A                        C0            .byte	$C0
11994 2B0B                        E0            .byte	$E0
11995 2B0C                        70            .byte	$70
11996                                           ! 1337 0x38, 0x1c, 0x0e, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00,
11997 2B0D                        38            .byte	$38
11998 2B0E                        1C            .byte	$1C
11999 2B0F                        0E            .byte	$E
12000 2B10                        06            .byte	6
12001 2B11                        02            .byte	2
12002 2B12                        00            .byte	0
12003 2B13                        00            .byte	0
12004 2B14                        00            .byte	0
12005 2B15                        00            .byte	0
12006                                           ! 1338  0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00,
12007 2B16                        00            .byte	0
12008 2B17                        00            .byte	0
12009 2B18                        3C            .byte	$3C
12010 2B19                        0C            .byte	$C
12011 2B1A                        0C            .byte	$C
12012 2B1B                        0C            .byte	$C
12013 2B1C                        0C            .byte	$C
12014 2B1D                        0C            .byte	$C
12015 2B1E                        0C            .byte	$C
12016 2B1F                        0C            .byte	$C
12017 2B20                        0C            .byte	$C
12018 2B21                        3C            .byte	$3C
12019 2B22                        00            .byte	0
12020 2B23                        00            .byte	0
12021 2B24                        00            .byte	0
12022 2B25                        00            .byte	0
12023                                           ! 1339  0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12024 2B26                        10            .byte	$10
12025 2B27                        38            .byte	$38
12026 2B28                        6C            .byte	$6C
12027 2B29                        C6            .byte	$C6
12028 2B2A                        00            .byte	0
12029 2B2B                        00            .byte	0
12030 2B2C                        00            .byte	0
12031 2B2D                        00            .byte	0
12032 2B2E                        00            .byte	0
12033 2B2F                        00            .byte	0
12034 2B30                        00            .byte	0
12035 2B31                        00            .byte	0
12036 2B32                        00            .byte	0
12037 2B33                        00            .byte	0
12038 2B34                        00            .byte	0
12039 2B35                        00            .byte	0
12040                                           ! 1340  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
12041 2B36                        00            .byte	0
12042 2B37                        00            .byte	0
12043 2B38                        00            .byte	0
12044 2B39                        00            .byte	0
12045 2B3A                        00            .byte	0
12046 2B3B                        00            .byte	0
12047 2B3C                        00            .byte	0
12048 2B3D                        00            .byte	0
12049 2B3E                        00            .byte	0
12050 2B3F                        00            .byte	0
12051 2B40                        00            .byte	0
12052 2B41                        00            .byte	0
12053 2B42                        00            .byte	0
12054 2B43                        FF            .byte	$FF
12055 2B44                        00            .byte	0
12056 2B45                        00            .byte	0
12057                                           ! 1341  0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12058 2B46                        30            .byte	$30
12059 2B47                        30            .byte	$30
12060 2B48                        18            .byte	$18
12061 2B49                        00            .byte	0
12062 2B4A                        00            .byte	0
12063 2B4B                        00            .byte	0
12064 2B4C                        00            .byte	0
12065 2B4D                        00            .byte	0
12066 2B4E                        00            .byte	0
12067 2B4F                        00            .byte	0
12068 2B50                        00            .byte	0
12069 2B51                        00            .byte	0
12070 2B52                        00            .byte	0
12071 2B53                        00            .byte	0
12072 2B54                        00            .byte	0
12073 2B55                        00            .byte	0
12074                                           ! 1342  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12075 2B56                        00            .byte	0
12076 2B57                        00            .byte	0
12077 2B58                        00            .byte	0
12078 2B59                        00            .byte	0
12079 2B5A                        00            .byte	0
12080 2B5B                        78            .byte	$78
12081 2B5C                        0C            .byte	$C
12082 2B5D                        7C            .byte	$7C
12083 2B5E                        CC            .byte	$CC
12084 2B5F                        CC            .byte	$CC
12085 2B60                        CC            .byte	$CC
12086 2B61                        76            .byte	$76
12087 2B62                        00            .byte	0
12088 2B63                        00            .byte	0
12089 2B64                        00            .byte	0
12090 2B65                        00            .byte	0
12091                                           ! 1343  0x00, 0x00, 0xe0, 0x60, 0x60, 0x78, 0x6c, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x00, 0x00, 0x00, 0x00,
12092 2B66                        00            .byte	0
12093 2B67                        00            .byte	0
12094 2B68                        E0            .byte	$E0
12095 2B69                        60            .byte	$60
12096 2B6A                        60            .byte	$60
12097 2B6B                        78            .byte	$78
12098 2B6C                        6C            .byte	$6C
12099 2B6D                        66            .byte	$66
12100 2B6E                        66            .byte	$66
12101 2B6F                        66            .byte	$66
12102 2B70                        66            .byte	$66
12103 2B71                        7C            .byte	$7C
12104 2B72                        00            .byte	0
12105 2B73                        00            .byte	0
12106 2B74                        00            .byte	0
12107 2B75                        00            .byte	0
12108                                           ! 1344  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc0, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12109 2B76                        00            .byte	0
12110 2B77                        00            .byte	0
12111 2B78                        00            .byte	0
12112 2B79                        00            .byte	0
12113 2B7A                        00            .byte	0
12114 2B7B                        7C            .byte	$7C
12115 2B7C                        C6            .byte	$C6
12116 2B7D                        C0            .byte	$C0
12117 2B7E                        C0            .byte	$C0
12118 2B7F                        C0            .byte	$C0
12119 2B80                        C6            .byte	$C6
12120 2B81                        7C            .byte	$7C
12121 2B82                        00            .byte	0
12122 2B83                        00            .byte	0
12123 2B84                        00            .byte	0
12124 2B85                        00            .byte	0
12125                                           ! 1345  0x00, 0x00, 0x1c, 0x0c, 0x0c, 0x3c, 0x6c, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12126 2B86                        00            .byte	0
12127 2B87                        00            .byte	0
12128 2B88                        1C            .byte	$1C
12129 2B89                        0C            .byte	$C
12130 2B8A                        0C            .byte	$C
12131 2B8B                        3C            .byte	$3C
12132 2B8C                        6C            .byte	$6C
12133 2B8D                        CC            .byte	$CC
12134 2B8E                        CC            .byte	$CC
12135 2B8F                        CC            .byte	$CC
12136 2B90                        CC            .byte	$CC
12137 2B91                        76            .byte	$76
12138 2B92                        00            .byte	0
12139 2B93                        00            .byte	0
12140 2B94                        00            .byte	0
12141 2B95                        00            .byte	0
12142                                           ! 1346  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12143 2B96                        00            .byte	0
12144 2B97                        00            .byte	0
12145 2B98                        00            .byte	0
12146 2B99                        00            .byte	0
12147 2B9A                        00            .byte	0
12148 2B9B                        7C            .byte	$7C
12149 2B9C                        C6            .byte	$C6
12150 2B9D                        FE            .byte	$FE
12151 2B9E                        C0            .byte	$C0
12152 2B9F                        C0            .byte	$C0
12153 2BA0                        C6            .byte	$C6
12154 2BA1                        7C            .byte	$7C
12155 2BA2                        00            .byte	0
12156 2BA3                        00            .byte	0
12157 2BA4                        00            .byte	0
12158 2BA5                        00            .byte	0
12159                                           ! 1347  0x00, 0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12160 2BA6                        00            .byte	0
12161 2BA7                        00            .byte	0
12162 2BA8                        38            .byte	$38
12163 2BA9                        6C            .byte	$6C
12164 2BAA                        64            .byte	$64
12165 2BAB                        60            .byte	$60
12166 2BAC                        F0            .byte	$F0
12167 2BAD                        60            .byte	$60
12168 2BAE                        60            .byte	$60
12169 2BAF                        60            .byte	$60
12170 2BB0                        60            .byte	$60
12171 2BB1                        F0            .byte	$F0
12172 2BB2                        00            .byte	0
12173 2BB3                        00            .byte	0
12174 2BB4                        00            .byte	0
12175 2BB5                        00            .byte	0
12176                                           ! 1348  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xcc, 0x78, 0x00,
12177 2BB6                        00            .byte	0
12178 2BB7                        00            .byte	0
12179 2BB8                        00            .byte	0
12180 2BB9                        00            .byte	0
12181 2BBA                        00            .byte	0
12182 2BBB                        76            .byte	$76
12183 2BBC                        CC            .byte	$CC
12184 2BBD                        CC            .byte	$CC
12185 2BBE                        CC            .byte	$CC
12186 2BBF                        CC            .byte	$CC
12187 2BC0                        CC            .byte	$CC
12188 2BC1                        7C            .byte	$7C
12189 2BC2                        0C            .byte	$C
12190 2BC3                        CC            .byte	$CC
12191 2BC4                        78            .byte	$78
12192 2BC5                        00            .byte	0
12193                                           ! 1349  0x00, 0x00, 0xe0, 0x60, 0x60, 0x6c, 0x76, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12194 2BC6                        00            .byte	0
12195 2BC7                        00            .byte	0
12196 2BC8                        E0            .byte	$E0
12197 2BC9                        60            .byte	$60
12198 2BCA                        60            .byte	$60
12199 2BCB                        6C            .byte	$6C
12200 2BCC                        76            .byte	$76
12201 2BCD                        66            .byte	$66
12202 2BCE                        66            .byte	$66
12203 2BCF                        66            .byte	$66
12204 2BD0                        66            .byte	$66
12205 2BD1                        E6            .byte	$E6
12206 2BD2                        00            .byte	0
12207 2BD3                        00            .byte	0
12208 2BD4                        00            .byte	0
12209 2BD5                        00            .byte	0
12210                                           ! 1350  0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12211 2BD6                        00            .byte	0
12212 2BD7                        00            .byte	0
12213 2BD8                        18            .byte	$18
12214 2BD9                        18            .byte	$18
12215 2BDA                        00            .byte	0
12216 2BDB                        38            .byte	$38
12217 2BDC                        18            .byte	$18
12218 2BDD                        18            .byte	$18
12219 2BDE                        18            .byte	$18
12220 2BDF                        18            .byte	$18
12221 2BE0                        18            .byte	$18
12222 2BE1                        3C            .byte	$3C
12223 2BE2                        00            .byte	0
12224 2BE3                        00            .byte	0
12225 2BE4                        00            .byte	0
12226 2BE5                        00            .byte	0
12227                                           ! 1351  0x00, 0x00, 0x06, 0x06, 0x00, 0x0e, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c, 0x00,
12228 2BE6                        00            .byte	0
12229 2BE7                        00            .byte	0
12230 2BE8                        06            .byte	6
12231 2BE9                        06            .byte	6
12232 2BEA                        00            .byte	0
12233 2BEB                        0E            .byte	$E
12234 2BEC                        06            .byte	6
12235 2BED                        06            .byte	6
12236 2BEE                        06            .byte	6
12237 2BEF                        06            .byte	6
12238 2BF0                        06            .byte	6
12239 2BF1                        06            .byte	6
12240 2BF2                        66            .byte	$66
12241 2BF3                        66            .byte	$66
12242 2BF4                        3C            .byte	$3C
12243 2BF5                        00            .byte	0
12244                                           ! 1352  0x00, 0x00, 0xe0, 0x60, 0x60, 0x66, 0x6c, 0x78, 0x78, 0x6c, 0x66, 0xe6, 0x00, 0x00, 0x00, 0x00,
12245 2BF6                        00            .byte	0
12246 2BF7                        00            .byte	0
12247 2BF8                        E0            .byte	$E0
12248 2BF9                        60            .byte	$60
12249 2BFA                        60            .byte	$60
12250 2BFB                        66            .byte	$66
12251 2BFC                        6C            .byte	$6C
12252 2BFD                        78            .byte	$78
12253 2BFE                        78            .byte	$78
12254 2BFF                        6C            .byte	$6C
12255 2C00                        66            .byte	$66
12256 2C01                        E6            .byte	$E6
12257 2C02                        00            .byte	0
12258 2C03                        00            .byte	0
12259 2C04                        00            .byte	0
12260 2C05                        00            .byte	0
12261                                           ! 1353  0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12262 2C06                        00            .byte	0
12263 2C07                        00            .byte	0
12264 2C08                        38            .byte	$38
12265 2C09                        18            .byte	$18
12266 2C0A                        18            .byte	$18
12267 2C0B                        18            .byte	$18
12268 2C0C                        18            .byte	$18
12269 2C0D                        18            .byte	$18
12270 2C0E                        18            .byte	$18
12271 2C0F                        18            .byte	$18
12272 2C10                        18            .byte	$18
12273 2C11                        3C            .byte	$3C
12274 2C12                        00            .byte	0
12275 2C13                        00            .byte	0
12276 2C14                        00            .byte	0
12277 2C15                        00            .byte	0
12278                                           ! 1354  0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xff, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0x00, 0x00, 0x00, 0x00,
12279 2C16                        00            .byte	0
12280 2C17                        00            .byte	0
12281 2C18                        00            .byte	0
12282 2C19                        00            .byte	0
12283 2C1A                        00            .byte	0
12284 2C1B                        E6            .byte	$E6
12285 2C1C                        FF            .byte	$FF
12286 2C1D                        DB            .byte	$DB
12287 2C1E                        DB            .byte	$DB
12288 2C1F                        DB            .byte	$DB
12289 2C20                        DB            .byte	$DB
12290 2C21                        DB            .byte	$DB
12291 2C22                        00            .byte	0
12292 2C23                        00            .byte	0
12293 2C24                        00            .byte	0
12294 2C25                        00            .byte	0
12295                                           ! 1355  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
12296 2C26                        00            .byte	0
12297 2C27                        00            .byte	0
12298 2C28                        00            .byte	0
12299 2C29                        00            .byte	0
12300 2C2A                        00            .byte	0
12301 2C2B                        DC            .byte	$DC
12302 2C2C                        66            .byte	$66
12303 2C2D                        66            .byte	$66
12304 2C2E                        66            .byte	$66
12305 2C2F                        66            .byte	$66
12306 2C30                        66            .byte	$66
12307 2C31                        66            .byte	$66
12308 2C32                        00            .byte	0
12309 2C33                        00            .byte	0
12310 2C34                        00            .byte	0
12311 2C35                        00            .byte	0
12312                                           ! 1356  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12313 2C36                        00            .byte	0
12314 2C37                        00            .byte	0
12315 2C38                        00            .byte	0
12316 2C39                        00            .byte	0
12317 2C3A                        00            .byte	0
12318 2C3B                        7C            .byte	$7C
12319 2C3C                        C6            .byte	$C6
12320 2C3D                        C6            .byte	$C6
12321 2C3E                        C6            .byte	$C6
12322 2C3F                        C6            .byte	$C6
12323 2C40                        C6            .byte	$C6
12324 2C41                        7C            .byte	$7C
12325 2C42                        00            .byte	0
12326 2C43                        00            .byte	0
12327 2C44                        00            .byte	0
12328 2C45                        00            .byte	0
12329                                           ! 1357  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00,
12330 2C46                        00            .byte	0
12331 2C47                        00            .byte	0
12332 2C48                        00            .byte	0
12333 2C49                        00            .byte	0
12334 2C4A                        00            .byte	0
12335 2C4B                        DC            .byte	$DC
12336 2C4C                        66            .byte	$66
12337 2C4D                        66            .byte	$66
12338 2C4E                        66            .byte	$66
12339 2C4F                        66            .byte	$66
12340 2C50                        66            .byte	$66
12341 2C51                        7C            .byte	$7C
12342 2C52                        60            .byte	$60
12343 2C53                        60            .byte	$60
12344 2C54                        F0            .byte	$F0
12345 2C55                        00            .byte	0
12346                                           ! 1358  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0xcc,
12347 2C56                        00            .byte	0
12348 2C57                        00            .byte	0
12349 2C58                        00            .byte	0
12350 2C59                        00            .byte	0
12351 2C5A                        00            .byte	0
12352 2C5B                        76            .byte	$76
12353 2C5C                        CC            .byte	$CC
12354 2C5D                        CC            .byte	$CC
12355                                           ! 1358  0xcc, 0xcc, 0x7c, 0x0c, 0x0c, 0x1e, 0x00,
12356 2C5E                        CC            .byte	$CC
12357 2C5F                        CC            .byte	$CC
12358 2C60                        CC            .byte	$CC
12359 2C61                        7C            .byte	$7C
12360 2C62                        0C            .byte	$C
12361 2C63                        0C            .byte	$C
12362 2C64                        1E            .byte	$1E
12363 2C65                        00            .byte	0
12364                                           ! 1359  0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x76, 0x66, 0x60, 0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x00,
12365 2C66                        00            .byte	0
12366 2C67                        00            .byte	0
12367 2C68                        00            .byte	0
12368 2C69                        00            .byte	0
12369 2C6A                        00            .byte	0
12370 2C6B                        DC            .byte	$DC
12371 2C6C                        76            .byte	$76
12372 2C6D                        66            .byte	$66
12373 2C6E                        60            .byte	$60
12374 2C6F                        60            .byte	$60
12375 2C70                        60            .byte	$60
12376 2C71                        F0            .byte	$F0
12377 2C72                        00            .byte	0
12378 2C73                        00            .byte	0
12379 2C74                        00            .byte	0
12380 2C75                        00            .byte	0
12381                                           ! 1360  0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc6, 0x60, 0x38, 0x0c, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12382 2C76                        00            .byte	0
12383 2C77                        00            .byte	0
12384 2C78                        00            .byte	0
12385 2C79                        00            .byte	0
12386 2C7A                        00            .byte	0
12387 2C7B                        7C            .byte	$7C
12388 2C7C                        C6            .byte	$C6
12389 2C7D                        60            .byte	$60
12390 2C7E                        38            .byte	$38
12391 2C7F                        0C            .byte	$C
12392 2C80                        C6            .byte	$C6
12393 2C81                        7C            .byte	$7C
12394 2C82                        00            .byte	0
12395 2C83                        00            .byte	0
12396 2C84                        00            .byte	0
12397 2C85                        00            .byte	0
12398                                           ! 1361  0x00, 0x00, 0x10, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0x00,
12399 2C86                        00            .byte	0
12400 2C87                        00            .byte	0
12401 2C88                        10            .byte	$10
12402 2C89                        30            .byte	$30
12403 2C8A                        30            .byte	$30
12404 2C8B                        FC            .byte	$FC
12405 2C8C                        30            .byte	$30
12406 2C8D                        30            .byte	$30
12407 2C8E                        30            .byte	$30
12408 2C8F                        30            .byte	$30
12409 2C90                        36            .byte	$36
12410 2C91                        1C            .byte	$1C
12411 2C92                        00            .byte	0
12412 2C93                        00            .byte	0
12413 2C94                        00            .byte	0
12414 2C95                        00            .byte	0
12415                                           ! 1362  0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12416 2C96                        00            .byte	0
12417 2C97                        00            .byte	0
12418 2C98                        00            .byte	0
12419 2C99                        00            .byte	0
12420 2C9A                        00            .byte	0
12421 2C9B                        CC            .byte	$CC
12422 2C9C                        CC            .byte	$CC
12423 2C9D                        CC            .byte	$CC
12424 2C9E                        CC            .byte	$CC
12425 2C9F                        CC            .byte	$CC
12426 2CA0                        CC            .byte	$CC
12427 2CA1                        76            .byte	$76
12428 2CA2                        00            .byte	0
12429 2CA3                        00            .byte	0
12430 2CA4                        00            .byte	0
12431 2CA5                        00            .byte	0
12432                                           ! 1363  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
12433 2CA6                        00            .byte	0
12434 2CA7                        00            .byte	0
12435 2CA8                        00            .byte	0
12436 2CA9                        00            .byte	0
12437 2CAA                        00            .byte	0
12438 2CAB                        C3            .byte	$C3
12439 2CAC                        C3            .byte	$C3
12440 2CAD                        C3            .byte	$C3
12441 2CAE                        C3            .byte	$C3
12442 2CAF                        66            .byte	$66
12443 2CB0                        3C            .byte	$3C
12444 2CB1                        18            .byte	$18
12445 2CB2                        00            .byte	0
12446 2CB3                        00            .byte	0
12447 2CB4                        00            .byte	0
12448 2CB5                        00            .byte	0
12449                                           ! 1364  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xdb, 0xdb, 0xff, 0x66, 0x00, 0x00, 0x00, 0x00,
12450 2CB6                        00            .byte	0
12451 2CB7                        00            .byte	0
12452 2CB8                        00            .byte	0
12453 2CB9                        00            .byte	0
12454 2CBA                        00            .byte	0
12455 2CBB                        C3            .byte	$C3
12456 2CBC                        C3            .byte	$C3
12457 2CBD                        C3            .byte	$C3
12458 2CBE                        DB            .byte	$DB
12459 2CBF                        DB            .byte	$DB
12460 2CC0                        FF            .byte	$FF
12461 2CC1                        66            .byte	$66
12462 2CC2                        00            .byte	0
12463 2CC3                        00            .byte	0
12464 2CC4                        00            .byte	0
12465 2CC5                        00            .byte	0
12466                                           ! 1365  0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00,
12467 2CC6                        00            .byte	0
12468 2CC7                        00            .byte	0
12469 2CC8                        00            .byte	0
12470 2CC9                        00            .byte	0
12471 2CCA                        00            .byte	0
12472 2CCB                        C3            .byte	$C3
12473 2CCC                        66            .byte	$66
12474 2CCD                        3C            .byte	$3C
12475 2CCE                        18            .byte	$18
12476 2CCF                        3C            .byte	$3C
12477 2CD0                        66            .byte	$66
12478 2CD1                        C3            .byte	$C3
12479 2CD2                        00            .byte	0
12480 2CD3                        00            .byte	0
12481 2CD4                        00            .byte	0
12482 2CD5                        00            .byte	0
12483                                           ! 1366  0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0xf8, 0x00,
12484 2CD6                        00            .byte	0
12485 2CD7                        00            .byte	0
12486 2CD8                        00            .byte	0
12487 2CD9                        00            .byte	0
12488 2CDA                        00            .byte	0
12489 2CDB                        C6            .byte	$C6
12490 2CDC                        C6            .byte	$C6
12491 2CDD                        C6            .byte	$C6
12492 2CDE                        C6            .byte	$C6
12493 2CDF                        C6            .byte	$C6
12494 2CE0                        C6            .byte	$C6
12495 2CE1                        7E            .byte	$7E
12496 2CE2                        06            .byte	6
12497 2CE3                        0C            .byte	$C
12498 2CE4                        F8            .byte	$F8
12499 2CE5                        00            .byte	0
12500                                           ! 1367  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xcc, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
12501 2CE6                        00            .byte	0
12502 2CE7                        00            .byte	0
12503 2CE8                        00            .byte	0
12504 2CE9                        00            .byte	0
12505 2CEA                        00            .byte	0
12506 2CEB                        FE            .byte	$FE
12507 2CEC                        CC            .byte	$CC
12508 2CED                        18            .byte	$18
12509 2CEE                        30            .byte	$30
12510 2CEF                        60            .byte	$60
12511 2CF0                        C6            .byte	$C6
12512 2CF1                        FE            .byte	$FE
12513 2CF2                        00            .byte	0
12514 2CF3                        00            .byte	0
12515 2CF4                        00            .byte	0
12516 2CF5                        00            .byte	0
12517                                           ! 1368  0x00, 0x00, 0x0e, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0e, 0x00, 0x00, 0x00, 0x00,
12518 2CF6                        00            .byte	0
12519 2CF7                        00            .byte	0
12520 2CF8                        0E            .byte	$E
12521 2CF9                        18            .byte	$18
12522 2CFA                        18            .byte	$18
12523 2CFB                        18            .byte	$18
12524 2CFC                        70            .byte	$70
12525 2CFD                        18            .byte	$18
12526 2CFE                        18            .byte	$18
12527 2CFF                        18            .byte	$18
12528 2D00                        18            .byte	$18
12529 2D01                        0E            .byte	$E
12530 2D02                        00            .byte	0
12531 2D03                        00            .byte	0
12532 2D04                        00            .byte	0
12533 2D05                        00            .byte	0
12534                                           ! 1369  0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
12535 2D06                        00            .byte	0
12536 2D07                        00            .byte	0
12537 2D08                        18            .byte	$18
12538 2D09                        18            .byte	$18
12539 2D0A                        18            .byte	$18
12540 2D0B                        18            .byte	$18
12541 2D0C                        00            .byte	0
12542 2D0D                        18            .byte	$18
12543 2D0E                        18            .byte	$18
12544 2D0F                        18            .byte	$18
12545 2D10                        18            .byte	$18
12546 2D11                        18            .byte	$18
12547 2D12                        00            .byte	0
12548 2D13                        00            .byte	0
12549 2D14                        00            .byte	0
12550 2D15                        00            .byte	0
12551                                           ! 1370  0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00,
12552 2D16                        00            .byte	0
12553 2D17                        00            .byte	0
12554 2D18                        70            .byte	$70
12555 2D19                        18            .byte	$18
12556 2D1A                        18            .byte	$18
12557 2D1B                        18            .byte	$18
12558 2D1C                        0E            .byte	$E
12559 2D1D                        18            .byte	$18
12560 2D1E                        18            .byte	$18
12561 2D1F                        18            .byte	$18
12562 2D20                        18            .byte	$18
12563 2D21                        70            .byte	$70
12564 2D22                        00            .byte	0
12565 2D23                        00            .byte	0
12566 2D24                        00            .byte	0
12567 2D25                        00            .byte	0
12568                                           ! 1371  0x00, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
12569 2D26                        00            .byte	0
12570 2D27                        00            .byte	0
12571 2D28                        76            .byte	$76
12572 2D29                        DC            .byte	$DC
12573 2D2A                        00            .byte	0
12574 2D2B                        00            .byte	0
12575 2D2C                        00            .byte	0
12576 2D2D                        00            .byte	0
12577 2D2E                        00            .byte	0
12578 2D2F                        00            .byte	0
12579 2D30                        00            .byte	0
12580 2D31                        00            .byte	0
12581 2D32                        00            .byte	0
12582 2D33                        00            .byte	0
12583 2D34                        00            .byte	0
12584 2D35                        00            .byte	0
12585                                           ! 1372  0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
12586 2D36                        00            .byte	0
12587 2D37                        00            .byte	0
12588 2D38                        00            .byte	0
12589 2D39                        00            .byte	0
12590 2D3A                        10            .byte	$10
12591 2D3B                        38            .byte	$38
12592 2D3C                        6C            .byte	$6C
12593 2D3D                        C6            .byte	$C6
12594 2D3E                        C6            .byte	$C6
12595 2D3F                        C6            .byte	$C6
12596 2D40                        FE            .byte	$FE
12597 2D41                        00            .byte	0
12598 2D42                        00            .byte	0
12599 2D43                        00            .byte	0
12600 2D44                        00            .byte	0
12601 2D45                        00            .byte	0
12602                                           ! 1373  0x00, 0x00, 0x3c, 0x66, 0xc2, 0xc0, 0xc0, 0xc0, 0xc2, 0x66, 0x3c, 0x0c, 0x06, 0x7c, 0x00, 0x00,
12603 2D46                        00            .byte	0
12604 2D47                        00            .byte	0
12605 2D48                        3C            .byte	$3C
12606 2D49                        66            .byte	$66
12607 2D4A                        C2            .byte	$C2
12608 2D4B                        C0            .byte	$C0
12609 2D4C                        C0            .byte	$C0
12610 2D4D                        C0            .byte	$C0
12611 2D4E                        C2            .byte	$C2
12612 2D4F                        66            .byte	$66
12613 2D50                        3C            .byte	$3C
12614 2D51                        0C            .byte	$C
12615 2D52                        06            .byte	6
12616 2D53                        7C            .byte	$7C
12617 2D54                        00            .byte	0
12618 2D55                        00            .byte	0
12619                                           ! 1374  0x00, 0x00, 0xcc, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12620 2D56                        00            .byte	0
12621 2D57                        00            .byte	0
12622 2D58                        CC            .byte	$CC
12623 2D59                        00            .byte	0
12624 2D5A                        00            .byte	0
12625 2D5B                        CC            .byte	$CC
12626 2D5C                        CC            .byte	$CC
12627 2D5D                        CC            .byte	$CC
12628 2D5E                        CC            .byte	$CC
12629 2D5F                        CC            .byte	$CC
12630 2D60                        CC            .byte	$CC
12631 2D61                        76            .byte	$76
12632 2D62                        00            .byte	0
12633 2D63                        00            .byte	0
12634 2D64                        00            .byte	0
12635 2D65                        00            .byte	0
12636                                           ! 1375  0x00, 0x0c, 0x18, 0x30, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12637 2D66                        00            .byte	0
12638 2D67                        0C            .byte	$C
12639 2D68                        18            .byte	$18
12640 2D69                        30            .byte	$30
12641 2D6A                        00            .byte	0
12642 2D6B                        7C            .byte	$7C
12643 2D6C                        C6            .byte	$C6
12644 2D6D                        FE            .byte	$FE
12645 2D6E                        C0            .byte	$C0
12646 2D6F                        C0            .byte	$C0
12647 2D70                        C6            .byte	$C6
12648 2D71                        7C            .byte	$7C
12649 2D72                        00            .byte	0
12650 2D73                        00            .byte	0
12651 2D74                        00            .byte	0
12652 2D75                        00            .byte	0
12653                                           ! 1376  0x00, 0x10, 0x38, 0x6c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12654 2D76                        00            .byte	0
12655 2D77                        10            .byte	$10
12656 2D78                        38            .byte	$38
12657 2D79                        6C            .byte	$6C
12658 2D7A                        00            .byte	0
12659 2D7B                        78            .byte	$78
12660 2D7C                        0C            .byte	$C
12661 2D7D                        7C            .byte	$7C
12662 2D7E                        CC            .byte	$CC
12663 2D7F                        CC            .byte	$CC
12664 2D80                        CC            .byte	$CC
12665 2D81                        76            .byte	$76
12666 2D82                        00            .byte	0
12667 2D83                        00            .byte	0
12668 2D84                        00            .byte	0
12669 2D85                        00            .byte	0
12670                                           ! 1377  0x00, 0x00, 0xcc, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12671 2D86                        00            .byte	0
12672 2D87                        00            .byte	0
12673 2D88                        CC            .byte	$CC
12674 2D89                        00            .byte	0
12675 2D8A                        00            .byte	0
12676 2D8B                        78            .byte	$78
12677 2D8C                        0C            .byte	$C
12678 2D8D                        7C            .byte	$7C
12679 2D8E                        CC            .byte	$CC
12680 2D8F                        CC            .byte	$CC
12681 2D90                        CC            .byte	$CC
12682 2D91                        76            .byte	$76
12683 2D92                        00            .byte	0
12684 2D93                        00            .byte	0
12685 2D94                        00            .byte	0
12686 2D95                        00            .byte	0
12687                                           ! 1378  0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12688 2D96                        00            .byte	0
12689 2D97                        60            .byte	$60
12690 2D98                        30            .byte	$30
12691 2D99                        18            .byte	$18
12692 2D9A                        00            .byte	0
12693 2D9B                        78            .byte	$78
12694 2D9C                        0C            .byte	$C
12695 2D9D                        7C            .byte	$7C
12696 2D9E                        CC            .byte	$CC
12697 2D9F                        CC            .byte	$CC
12698 2DA0                        CC            .byte	$CC
12699 2DA1                        76            .byte	$76
12700 2DA2                        00            .byte	0
12701 2DA3                        00            .byte	0
12702 2DA4                        00            .byte	0
12703 2DA5                        00            .byte	0
12704                                           ! 1379  0x00, 0x38, 0x6c, 0x38, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc
12705 2DA6                        00            .byte	0
12706 2DA7                        38            .byte	$38
12707 2DA8                        6C            .byte	$6C
12708 2DA9                        38            .byte	$38
12709 2DAA                        00            .byte	0
12710 2DAB                        78            .byte	$78
12711 2DAC                        0C            .byte	$C
12712 2DAD                        7C            .byte	$7C
12713 2DAE                        CC            .byte	$CC
12714 2DAF                        CC            .byte	$CC
12715                                           ! 1379 , 0x76, 0x00, 0x00, 0x00, 0x00,
12716 2DB0                        CC            .byte	$CC
12717 2DB1                        76            .byte	$76
12718 2DB2                        00            .byte	0
12719 2DB3                        00            .byte	0
12720 2DB4                        00            .byte	0
12721 2DB5                        00            .byte	0
12722                                           ! 1380  0x00, 0x00, 0x00, 0x00, 0x3c, 0x66, 0x60, 0x60, 0x66, 0x3c, 0x0c, 0x06, 0x3c, 0x00, 0x00, 0x00,
12723 2DB6                        00            .byte	0
12724 2DB7                        00            .byte	0
12725 2DB8                        00            .byte	0
12726 2DB9                        00            .byte	0
12727 2DBA                        3C            .byte	$3C
12728 2DBB                        66            .byte	$66
12729 2DBC                        60            .byte	$60
12730 2DBD                        60            .byte	$60
12731 2DBE                        66            .byte	$66
12732 2DBF                        3C            .byte	$3C
12733 2DC0                        0C            .byte	$C
12734 2DC1                        06            .byte	6
12735 2DC2                        3C            .byte	$3C
12736 2DC3                        00            .byte	0
12737 2DC4                        00            .byte	0
12738 2DC5                        00            .byte	0
12739                                           ! 1381  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12740 2DC6                        00            .byte	0
12741 2DC7                        10            .byte	$10
12742 2DC8                        38            .byte	$38
12743 2DC9                        6C            .byte	$6C
12744 2DCA                        00            .byte	0
12745 2DCB                        7C            .byte	$7C
12746 2DCC                        C6            .byte	$C6
12747 2DCD                        FE            .byte	$FE
12748 2DCE                        C0            .byte	$C0
12749 2DCF                        C0            .byte	$C0
12750 2DD0                        C6            .byte	$C6
12751 2DD1                        7C            .byte	$7C
12752 2DD2                        00            .byte	0
12753 2DD3                        00            .byte	0
12754 2DD4                        00            .byte	0
12755 2DD5                        00            .byte	0
12756                                           ! 1382  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12757 2DD6                        00            .byte	0
12758 2DD7                        00            .byte	0
12759 2DD8                        C6            .byte	$C6
12760 2DD9                        00            .byte	0
12761 2DDA                        00            .byte	0
12762 2DDB                        7C            .byte	$7C
12763 2DDC                        C6            .byte	$C6
12764 2DDD                        FE            .byte	$FE
12765 2DDE                        C0            .byte	$C0
12766 2DDF                        C0            .byte	$C0
12767 2DE0                        C6            .byte	$C6
12768 2DE1                        7C            .byte	$7C
12769 2DE2                        00            .byte	0
12770 2DE3                        00            .byte	0
12771 2DE4                        00            .byte	0
12772 2DE5                        00            .byte	0
12773                                           ! 1383  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0xc0, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12774 2DE6                        00            .byte	0
12775 2DE7                        60            .byte	$60
12776 2DE8                        30            .byte	$30
12777 2DE9                        18            .byte	$18
12778 2DEA                        00            .byte	0
12779 2DEB                        7C            .byte	$7C
12780 2DEC                        C6            .byte	$C6
12781 2DED                        FE            .byte	$FE
12782 2DEE                        C0            .byte	$C0
12783 2DEF                        C0            .byte	$C0
12784 2DF0                        C6            .byte	$C6
12785 2DF1                        7C            .byte	$7C
12786 2DF2                        00            .byte	0
12787 2DF3                        00            .byte	0
12788 2DF4                        00            .byte	0
12789 2DF5                        00            .byte	0
12790                                           ! 1384  0x00, 0x00, 0x66, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12791 2DF6                        00            .byte	0
12792 2DF7                        00            .byte	0
12793 2DF8                        66            .byte	$66
12794 2DF9                        00            .byte	0
12795 2DFA                        00            .byte	0
12796 2DFB                        38            .byte	$38
12797 2DFC                        18            .byte	$18
12798 2DFD                        18            .byte	$18
12799 2DFE                        18            .byte	$18
12800 2DFF                        18            .byte	$18
12801 2E00                        18            .byte	$18
12802 2E01                        3C            .byte	$3C
12803 2E02                        00            .byte	0
12804 2E03                        00            .byte	0
12805 2E04                        00            .byte	0
12806 2E05                        00            .byte	0
12807                                           ! 1385  0x00, 0x18, 0x3c, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12808 2E06                        00            .byte	0
12809 2E07                        18            .byte	$18
12810 2E08                        3C            .byte	$3C
12811 2E09                        66            .byte	$66
12812 2E0A                        00            .byte	0
12813 2E0B                        38            .byte	$38
12814 2E0C                        18            .byte	$18
12815 2E0D                        18            .byte	$18
12816 2E0E                        18            .byte	$18
12817 2E0F                        18            .byte	$18
12818 2E10                        18            .byte	$18
12819 2E11                        3C            .byte	$3C
12820 2E12                        00            .byte	0
12821 2E13                        00            .byte	0
12822 2E14                        00            .byte	0
12823 2E15                        00            .byte	0
12824                                           ! 1386  0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
12825 2E16                        00            .byte	0
12826 2E17                        60            .byte	$60
12827 2E18                        30            .byte	$30
12828 2E19                        18            .byte	$18
12829 2E1A                        00            .byte	0
12830 2E1B                        38            .byte	$38
12831 2E1C                        18            .byte	$18
12832 2E1D                        18            .byte	$18
12833 2E1E                        18            .byte	$18
12834 2E1F                        18            .byte	$18
12835 2E20                        18            .byte	$18
12836 2E21                        3C            .byte	$3C
12837 2E22                        00            .byte	0
12838 2E23                        00            .byte	0
12839 2E24                        00            .byte	0
12840 2E25                        00            .byte	0
12841                                           ! 1387  0x00, 0xc6, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12842 2E26                        00            .byte	0
12843 2E27                        C6            .byte	$C6
12844 2E28                        00            .byte	0
12845 2E29                        10            .byte	$10
12846 2E2A                        38            .byte	$38
12847 2E2B                        6C            .byte	$6C
12848 2E2C                        C6            .byte	$C6
12849 2E2D                        C6            .byte	$C6
12850 2E2E                        FE            .byte	$FE
12851 2E2F                        C6            .byte	$C6
12852 2E30                        C6            .byte	$C6
12853 2E31                        C6            .byte	$C6
12854 2E32                        00            .byte	0
12855 2E33                        00            .byte	0
12856 2E34                        00            .byte	0
12857 2E35                        00            .byte	0
12858                                           ! 1388  0x38, 0x6c, 0x38, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
12859 2E36                        38            .byte	$38
12860 2E37                        6C            .byte	$6C
12861 2E38                        38            .byte	$38
12862 2E39                        00            .byte	0
12863 2E3A                        38            .byte	$38
12864 2E3B                        6C            .byte	$6C
12865 2E3C                        C6            .byte	$C6
12866 2E3D                        C6            .byte	$C6
12867 2E3E                        FE            .byte	$FE
12868 2E3F                        C6            .byte	$C6
12869 2E40                        C6            .byte	$C6
12870 2E41                        C6            .byte	$C6
12871 2E42                        00            .byte	0
12872 2E43                        00            .byte	0
12873 2E44                        00            .byte	0
12874 2E45                        00            .byte	0
12875                                           ! 1389  0x18, 0x30, 0x60, 0x00, 0xfe, 0x66, 0x60, 0x7c, 0x60, 0x60, 0x66, 0xfe, 0x00, 0x00, 0x00, 0x00,
12876 2E46                        18            .byte	$18
12877 2E47                        30            .byte	$30
12878 2E48                        60            .byte	$60
12879 2E49                        00            .byte	0
12880 2E4A                        FE            .byte	$FE
12881 2E4B                        66            .byte	$66
12882 2E4C                        60            .byte	$60
12883 2E4D                        7C            .byte	$7C
12884 2E4E                        60            .byte	$60
12885 2E4F                        60            .byte	$60
12886 2E50                        66            .byte	$66
12887 2E51                        FE            .byte	$FE
12888 2E52                        00            .byte	0
12889 2E53                        00            .byte	0
12890 2E54                        00            .byte	0
12891 2E55                        00            .byte	0
12892                                           ! 1390  0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x3b, 0x1b, 0x7e, 0xd8, 0xdc, 0x77, 0x00, 0x00, 0x00, 0x00,
12893 2E56                        00            .byte	0
12894 2E57                        00            .byte	0
12895 2E58                        00            .byte	0
12896 2E59                        00            .byte	0
12897 2E5A                        00            .byte	0
12898 2E5B                        6E            .byte	$6E
12899 2E5C                        3B            .byte	$3B
12900 2E5D                        1B            .byte	$1B
12901 2E5E                        7E            .byte	$7E
12902 2E5F                        D8            .byte	$D8
12903 2E60                        DC            .byte	$DC
12904 2E61                        77            .byte	$77
12905 2E62                        00            .byte	0
12906 2E63                        00            .byte	0
12907 2E64                        00            .byte	0
12908 2E65                        00            .byte	0
12909                                           ! 1391  0x00, 0x00, 0x3e, 0x6c, 0xcc, 0xcc, 0xfe, 0xcc, 0xcc, 0xcc, 0xcc, 0xce, 0x00, 0x00, 0x00, 0x00,
12910 2E66                        00            .byte	0
12911 2E67                        00            .byte	0
12912 2E68                        3E            .byte	$3E
12913 2E69                        6C            .byte	$6C
12914 2E6A                        CC            .byte	$CC
12915 2E6B                        CC            .byte	$CC
12916 2E6C                        FE            .byte	$FE
12917 2E6D                        CC            .byte	$CC
12918 2E6E                        CC            .byte	$CC
12919 2E6F                        CC            .byte	$CC
12920 2E70                        CC            .byte	$CC
12921 2E71                        CE            .byte	$CE
12922 2E72                        00            .byte	0
12923 2E73                        00            .byte	0
12924 2E74                        00            .byte	0
12925 2E75                        00            .byte	0
12926                                           ! 1392  0x00, 0x10, 0x38, 0x6c, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12927 2E76                        00            .byte	0
12928 2E77                        10            .byte	$10
12929 2E78                        38            .byte	$38
12930 2E79                        6C            .byte	$6C
12931 2E7A                        00            .byte	0
12932 2E7B                        7C            .byte	$7C
12933 2E7C                        C6            .byte	$C6
12934 2E7D                        C6            .byte	$C6
12935 2E7E                        C6            .byte	$C6
12936 2E7F                        C6            .byte	$C6
12937 2E80                        C6            .byte	$C6
12938 2E81                        7C            .byte	$7C
12939 2E82                        00            .byte	0
12940 2E83                        00            .byte	0
12941 2E84                        00            .byte	0
12942 2E85                        00            .byte	0
12943                                           ! 1393  0x00, 0x00, 0xc6, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12944 2E86                        00            .byte	0
12945 2E87                        00            .byte	0
12946 2E88                        C6            .byte	$C6
12947 2E89                        00            .byte	0
12948 2E8A                        00            .byte	0
12949 2E8B                        7C            .byte	$7C
12950 2E8C                        C6            .byte	$C6
12951 2E8D                        C6            .byte	$C6
12952 2E8E                        C6            .byte	$C6
12953 2E8F                        C6            .byte	$C6
12954 2E90                        C6            .byte	$C6
12955 2E91                        7C            .byte	$7C
12956 2E92                        00            .byte	0
12957 2E93                        00            .byte	0
12958 2E94                        00            .byte	0
12959 2E95                        00            .byte	0
12960                                           ! 1394  0x00, 0x60, 0x30, 0x18, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
12961 2E96                        00            .byte	0
12962 2E97                        60            .byte	$60
12963 2E98                        30            .byte	$30
12964 2E99                        18            .byte	$18
12965 2E9A                        00            .byte	0
12966 2E9B                        7C            .byte	$7C
12967 2E9C                        C6            .byte	$C6
12968 2E9D                        C6            .byte	$C6
12969 2E9E                        C6            .byte	$C6
12970 2E9F                        C6            .byte	$C6
12971 2EA0                        C6            .byte	$C6
12972 2EA1                        7C            .byte	$7C
12973 2EA2                        00            .byte	0
12974 2EA3                        00            .byte	0
12975 2EA4                        00            .byte	0
12976 2EA5                        00            .byte	0
12977                                           ! 1395  0x00, 0x30, 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12978 2EA6                        00            .byte	0
12979 2EA7                        30            .byte	$30
12980 2EA8                        78            .byte	$78
12981 2EA9                        CC            .byte	$CC
12982 2EAA                        00            .byte	0
12983 2EAB                        CC            .byte	$CC
12984 2EAC                        CC            .byte	$CC
12985 2EAD                        CC            .byte	$CC
12986 2EAE                        CC            .byte	$CC
12987 2EAF                        CC            .byte	$CC
12988 2EB0                        CC            .byte	$CC
12989 2EB1                        76            .byte	$76
12990 2EB2                        00            .byte	0
12991 2EB3                        00            .byte	0
12992 2EB4                        00            .byte	0
12993 2EB5                        00            .byte	0
12994                                           ! 1396  0x00, 0x60, 0x30, 0x18, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
12995 2EB6                        00            .byte	0
12996 2EB7                        60            .byte	$60
12997 2EB8                        30            .byte	$30
12998 2EB9                        18            .byte	$18
12999 2EBA                        00            .byte	0
13000 2EBB                        CC            .byte	$CC
13001 2EBC                        CC            .byte	$CC
13002 2EBD                        CC            .byte	$CC
13003 2EBE                        CC            .byte	$CC
13004 2EBF                        CC            .byte	$CC
13005 2EC0                        CC            .byte	$CC
13006 2EC1                        76            .byte	$76
13007 2EC2                        00            .byte	0
13008 2EC3                        00            .byte	0
13009 2EC4                        00            .byte	0
13010 2EC5                        00            .byte	0
13011                                           ! 1397  0x00, 0x00, 0xc6, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00,
13012 2EC6                        00            .byte	0
13013 2EC7                        00            .byte	0
13014 2EC8                        C6            .byte	$C6
13015 2EC9                        00            .byte	0
13016 2ECA                        00            .byte	0
13017 2ECB                        C6            .byte	$C6
13018 2ECC                        C6            .byte	$C6
13019 2ECD                        C6            .byte	$C6
13020 2ECE                        C6            .byte	$C6
13021 2ECF                        C6            .byte	$C6
13022 2ED0                        C6            .byte	$C6
13023 2ED1                        7E            .byte	$7E
13024 2ED2                        06            .byte	6
13025 2ED3                        0C            .byte	$C
13026 2ED4                        78            .byte	$78
13027 2ED5                        00            .byte	0
13028                                           ! 1398  0x00, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13029 2ED6                        00            .byte	0
13030 2ED7                        C6            .byte	$C6
13031 2ED8                        00            .byte	0
13032 2ED9                        7C            .byte	$7C
13033 2EDA                        C6            .byte	$C6
13034 2EDB                        C6            .byte	$C6
13035 2EDC                        C6            .byte	$C6
13036 2EDD                        C6            .byte	$C6
13037 2EDE                        C6            .byte	$C6
13038 2EDF                        C6            .byte	$C6
13039 2EE0                        C6            .byte	$C6
13040 2EE1                        7C            .byte	$7C
13041 2EE2                        00            .byte	0
13042 2EE3                        00            .byte	0
13043 2EE4                        00            .byte	0
13044 2EE5                        00            .byte	0
13045                                           ! 1399  0x00, 0xc6, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13046 2EE6                        00            .byte	0
13047 2EE7                        C6            .byte	$C6
13048 2EE8                        00            .byte	0
13049 2EE9                        C6            .byte	$C6
13050 2EEA                        C6            .byte	$C6
13051 2EEB                        C6            .byte	$C6
13052 2EEC                        C6            .byte	$C6
13053 2EED                        C6            .byte	$C6
13054 2EEE                        C6            .byte	$C6
13055 2EEF                        C6            .byte	$C6
13056 2EF0                        C6            .byte	$C6
13057 2EF1                        7C            .byte	$7C
13058 2EF2                        00            .byte	0
13059 2EF3                        00            .byte	0
13060 2EF4                        00            .byte	0
13061 2EF5                        00            .byte	0
13062                                           ! 1400  0x00, 0x18, 0x18, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x18, 0x18, 0x0
13063 2EF6                        00            .byte	0
13064 2EF7                        18            .byte	$18
13065 2EF8                        18            .byte	$18
13066 2EF9                        7E            .byte	$7E
13067 2EFA                        C3            .byte	$C3
13068 2EFB                        C0            .byte	$C0
13069 2EFC                        C0            .byte	$C0
13070 2EFD                        C0            .byte	$C0
13071 2EFE                        C3            .byte	$C3
13072 2EFF                        7E            .byte	$7E
13073 2F00                        18            .byte	$18
13074 2F01                        18            .byte	$18
13075                                           ! 1400 0, 0x00, 0x00, 0x00,
13076 2F02                        00            .byte	0
13077 2F03                        00            .byte	0
13078 2F04                        00            .byte	0
13079 2F05                        00            .byte	0
13080                                           ! 1401  0x00, 0x38, 0x6c, 0x64, 0x60, 0xf0, 0x60, 0x60, 0x60, 0x60, 0xe6, 0xfc, 0x00, 0x00, 0x00, 0x00,
13081 2F06                        00            .byte	0
13082 2F07                        38            .byte	$38
13083 2F08                        6C            .byte	$6C
13084 2F09                        64            .byte	$64
13085 2F0A                        60            .byte	$60
13086 2F0B                        F0            .byte	$F0
13087 2F0C                        60            .byte	$60
13088 2F0D                        60            .byte	$60
13089 2F0E                        60            .byte	$60
13090 2F0F                        60            .byte	$60
13091 2F10                        E6            .byte	$E6
13092 2F11                        FC            .byte	$FC
13093 2F12                        00            .byte	0
13094 2F13                        00            .byte	0
13095 2F14                        00            .byte	0
13096 2F15                        00            .byte	0
13097                                           ! 1402  0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
13098 2F16                        00            .byte	0
13099 2F17                        00            .byte	0
13100 2F18                        C3            .byte	$C3
13101 2F19                        66            .byte	$66
13102 2F1A                        3C            .byte	$3C
13103 2F1B                        18            .byte	$18
13104 2F1C                        FF            .byte	$FF
13105 2F1D                        18            .byte	$18
13106 2F1E                        FF            .byte	$FF
13107 2F1F                        18            .byte	$18
13108 2F20                        18            .byte	$18
13109 2F21                        18            .byte	$18
13110 2F22                        00            .byte	0
13111 2F23                        00            .byte	0
13112 2F24                        00            .byte	0
13113 2F25                        00            .byte	0
13114                                           ! 1403  0x00, 0xfc, 0x66, 0x66, 0x7c, 0x62, 0x66, 0x6f, 0x66, 0x66, 0x66, 0xf3, 0x00, 0x00, 0x00, 0x00,
13115 2F26                        00            .byte	0
13116 2F27                        FC            .byte	$FC
13117 2F28                        66            .byte	$66
13118 2F29                        66            .byte	$66
13119 2F2A                        7C            .byte	$7C
13120 2F2B                        62            .byte	$62
13121 2F2C                        66            .byte	$66
13122 2F2D                        6F            .byte	$6F
13123 2F2E                        66            .byte	$66
13124 2F2F                        66            .byte	$66
13125 2F30                        66            .byte	$66
13126 2F31                        F3            .byte	$F3
13127 2F32                        00            .byte	0
13128 2F33                        00            .byte	0
13129 2F34                        00            .byte	0
13130 2F35                        00            .byte	0
13131                                           ! 1404  0x00, 0x0e, 0x1b, 0x18, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0x70, 0x00, 0x00,
13132 2F36                        00            .byte	0
13133 2F37                        0E            .byte	$E
13134 2F38                        1B            .byte	$1B
13135 2F39                        18            .byte	$18
13136 2F3A                        18            .byte	$18
13137 2F3B                        18            .byte	$18
13138 2F3C                        7E            .byte	$7E
13139 2F3D                        18            .byte	$18
13140 2F3E                        18            .byte	$18
13141 2F3F                        18            .byte	$18
13142 2F40                        18            .byte	$18
13143 2F41                        18            .byte	$18
13144 2F42                        D8            .byte	$D8
13145 2F43                        70            .byte	$70
13146 2F44                        00            .byte	0
13147 2F45                        00            .byte	0
13148                                           ! 1405  0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13149 2F46                        00            .byte	0
13150 2F47                        18            .byte	$18
13151 2F48                        30            .byte	$30
13152 2F49                        60            .byte	$60
13153 2F4A                        00            .byte	0
13154 2F4B                        78            .byte	$78
13155 2F4C                        0C            .byte	$C
13156 2F4D                        7C            .byte	$7C
13157 2F4E                        CC            .byte	$CC
13158 2F4F                        CC            .byte	$CC
13159 2F50                        CC            .byte	$CC
13160 2F51                        76            .byte	$76
13161 2F52                        00            .byte	0
13162 2F53                        00            .byte	0
13163 2F54                        00            .byte	0
13164 2F55                        00            .byte	0
13165                                           ! 1406  0x00, 0x0c, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0x00,
13166 2F56                        00            .byte	0
13167 2F57                        0C            .byte	$C
13168 2F58                        18            .byte	$18
13169 2F59                        30            .byte	$30
13170 2F5A                        00            .byte	0
13171 2F5B                        38            .byte	$38
13172 2F5C                        18            .byte	$18
13173 2F5D                        18            .byte	$18
13174 2F5E                        18            .byte	$18
13175 2F5F                        18            .byte	$18
13176 2F60                        18            .byte	$18
13177 2F61                        3C            .byte	$3C
13178 2F62                        00            .byte	0
13179 2F63                        00            .byte	0
13180 2F64                        00            .byte	0
13181 2F65                        00            .byte	0
13182                                           ! 1407  0x00, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13183 2F66                        00            .byte	0
13184 2F67                        18            .byte	$18
13185 2F68                        30            .byte	$30
13186 2F69                        60            .byte	$60
13187 2F6A                        00            .byte	0
13188 2F6B                        7C            .byte	$7C
13189 2F6C                        C6            .byte	$C6
13190 2F6D                        C6            .byte	$C6
13191 2F6E                        C6            .byte	$C6
13192 2F6F                        C6            .byte	$C6
13193 2F70                        C6            .byte	$C6
13194 2F71                        7C            .byte	$7C
13195 2F72                        00            .byte	0
13196 2F73                        00            .byte	0
13197 2F74                        00            .byte	0
13198 2F75                        00            .byte	0
13199                                           ! 1408  0x00, 0x18, 0x30, 0x60, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0x00,
13200 2F76                        00            .byte	0
13201 2F77                        18            .byte	$18
13202 2F78                        30            .byte	$30
13203 2F79                        60            .byte	$60
13204 2F7A                        00            .byte	0
13205 2F7B                        CC            .byte	$CC
13206 2F7C                        CC            .byte	$CC
13207 2F7D                        CC            .byte	$CC
13208 2F7E                        CC            .byte	$CC
13209 2F7F                        CC            .byte	$CC
13210 2F80                        CC            .byte	$CC
13211 2F81                        76            .byte	$76
13212 2F82                        00            .byte	0
13213 2F83                        00            .byte	0
13214 2F84                        00            .byte	0
13215 2F85                        00            .byte	0
13216                                           ! 1409  0x00, 0x00, 0x76, 0xdc, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00,
13217 2F86                        00            .byte	0
13218 2F87                        00            .byte	0
13219 2F88                        76            .byte	$76
13220 2F89                        DC            .byte	$DC
13221 2F8A                        00            .byte	0
13222 2F8B                        DC            .byte	$DC
13223 2F8C                        66            .byte	$66
13224 2F8D                        66            .byte	$66
13225 2F8E                        66            .byte	$66
13226 2F8F                        66            .byte	$66
13227 2F90                        66            .byte	$66
13228 2F91                        66            .byte	$66
13229 2F92                        00            .byte	0
13230 2F93                        00            .byte	0
13231 2F94                        00            .byte	0
13232 2F95                        00            .byte	0
13233                                           ! 1410  0x76, 0xdc, 0x00, 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
13234 2F96                        76            .byte	$76
13235 2F97                        DC            .byte	$DC
13236 2F98                        00            .byte	0
13237 2F99                        C6            .byte	$C6
13238 2F9A                        E6            .byte	$E6
13239 2F9B                        F6            .byte	$F6
13240 2F9C                        FE            .byte	$FE
13241 2F9D                        DE            .byte	$DE
13242 2F9E                        CE            .byte	$CE
13243 2F9F                        C6            .byte	$C6
13244 2FA0                        C6            .byte	$C6
13245 2FA1                        C6            .byte	$C6
13246 2FA2                        00            .byte	0
13247 2FA3                        00            .byte	0
13248 2FA4                        00            .byte	0
13249 2FA5                        00            .byte	0
13250                                           ! 1411  0x00, 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13251 2FA6                        00            .byte	0
13252 2FA7                        3C            .byte	$3C
13253 2FA8                        6C            .byte	$6C
13254 2FA9                        6C            .byte	$6C
13255 2FAA                        3E            .byte	$3E
13256 2FAB                        00            .byte	0
13257 2FAC                        7E            .byte	$7E
13258 2FAD                        00            .byte	0
13259 2FAE                        00            .byte	0
13260 2FAF                        00            .byte	0
13261 2FB0                        00            .byte	0
13262 2FB1                        00            .byte	0
13263 2FB2                        00            .byte	0
13264 2FB3                        00            .byte	0
13265 2FB4                        00            .byte	0
13266 2FB5                        00            .byte	0
13267                                           ! 1412  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13268 2FB6                        00            .byte	0
13269 2FB7                        38            .byte	$38
13270 2FB8                        6C            .byte	$6C
13271 2FB9                        6C            .byte	$6C
13272 2FBA                        38            .byte	$38
13273 2FBB                        00            .byte	0
13274 2FBC                        7C            .byte	$7C
13275 2FBD                        00            .byte	0
13276 2FBE                        00            .byte	0
13277 2FBF                        00            .byte	0
13278 2FC0                        00            .byte	0
13279 2FC1                        00            .byte	0
13280 2FC2                        00            .byte	0
13281 2FC3                        00            .byte	0
13282 2FC4                        00            .byte	0
13283 2FC5                        00            .byte	0
13284                                           ! 1413  0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xc0, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00,
13285 2FC6                        00            .byte	0
13286 2FC7                        00            .byte	0
13287 2FC8                        30            .byte	$30
13288 2FC9                        30            .byte	$30
13289 2FCA                        00            .byte	0
13290 2FCB                        30            .byte	$30
13291 2FCC                        30            .byte	$30
13292 2FCD                        60            .byte	$60
13293 2FCE                        C0            .byte	$C0
13294 2FCF                        C6            .byte	$C6
13295 2FD0                        C6            .byte	$C6
13296 2FD1                        7C            .byte	$7C
13297 2FD2                        00            .byte	0
13298 2FD3                        00            .byte	0
13299 2FD4                        00            .byte	0
13300 2FD5                        00            .byte	0
13301                                           ! 1414  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
13302 2FD6                        00            .byte	0
13303 2FD7                        00            .byte	0
13304 2FD8                        00            .byte	0
13305 2FD9                        00            .byte	0
13306 2FDA                        00            .byte	0
13307 2FDB                        00            .byte	0
13308 2FDC                        FE            .byte	$FE
13309 2FDD                        C0            .byte	$C0
13310 2FDE                        C0            .byte	$C0
13311 2FDF                        C0            .byte	$C0
13312 2FE0                        C0            .byte	$C0
13313 2FE1                        00            .byte	0
13314 2FE2                        00            .byte	0
13315 2FE3                        00            .byte	0
13316 2FE4                        00            .byte	0
13317 2FE5                        00            .byte	0
13318                                           ! 1415  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
13319 2FE6                        00            .byte	0
13320 2FE7                        00            .byte	0
13321 2FE8                        00            .byte	0
13322 2FE9                        00            .byte	0
13323 2FEA                        00            .byte	0
13324 2FEB                        00            .byte	0
13325 2FEC                        FE            .byte	$FE
13326 2FED                        06            .byte	6
13327 2FEE                        06            .byte	6
13328 2FEF                        06            .byte	6
13329 2FF0                        06            .byte	6
13330 2FF1                        00            .byte	0
13331 2FF2                        00            .byte	0
13332 2FF3                        00            .byte	0
13333 2FF4                        00            .byte	0
13334 2FF5                        00            .byte	0
13335                                           ! 1416  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x60, 0xce, 0x9b, 0x06, 0x0c, 0x1f, 0x00, 0x00,
13336 2FF6                        00            .byte	0
13337 2FF7                        C0            .byte	$C0
13338 2FF8                        C0            .byte	$C0
13339 2FF9                        C2            .byte	$C2
13340 2FFA                        C6            .byte	$C6
13341 2FFB                        CC            .byte	$CC
13342 2FFC                        18            .byte	$18
13343 2FFD                        30            .byte	$30
13344 2FFE                        60            .byte	$60
13345 2FFF                        CE            .byte	$CE
13346 3000                        9B            .byte	$9B
13347 3001                        06            .byte	6
13348 3002                        0C            .byte	$C
13349 3003                        1F            .byte	$1F
13350 3004                        00            .byte	0
13351 3005                        00            .byte	0
13352                                           ! 1417  0x00, 0xc0, 0xc0, 0xc2, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xce, 0x96, 0x3e, 0x06, 0x06, 0x00, 0x00,
13353 3006                        00            .byte	0
13354 3007                        C0            .byte	$C0
13355 3008                        C0            .byte	$C0
13356 3009                        C2            .byte	$C2
13357 300A                        C6            .byte	$C6
13358 300B                        CC            .byte	$CC
13359 300C                        18            .byte	$18
13360 300D                        30            .byte	$30
13361 300E                        66            .byte	$66
13362 300F                        CE            .byte	$CE
13363 3010                        96            .byte	$96
13364 3011                        3E            .byte	$3E
13365 3012                        06            .byte	6
13366 3013                        06            .byte	6
13367 3014                        00            .byte	0
13368 3015                        00            .byte	0
13369                                           ! 1418  0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x00, 0x00, 0x00, 0x00,
13370 3016                        00            .byte	0
13371 3017                        00            .byte	0
13372 3018                        18            .byte	$18
13373 3019                        18            .byte	$18
13374 301A                        00            .byte	0
13375 301B                        18            .byte	$18
13376 301C                        18            .byte	$18
13377 301D                        18            .byte	$18
13378 301E                        3C            .byte	$3C
13379 301F                        3C            .byte	$3C
13380 3020                        3C            .byte	$3C
13381 3021                        18            .byte	$18
13382 3022                        00            .byte	0
13383 3023                        00            .byte	0
13384 3024                        00            .byte	0
13385 3025                        00            .byte	0
13386                                           ! 1419  0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x6c, 0xd8, 0x6c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13387 3026                        00            .byte	0
13388 3027                        00            .byte	0
13389 3028                        00            .byte	0
13390 3029                        00            .byte	0
13391 302A                        00            .byte	0
13392 302B                        36            .byte	$36
13393 302C                        6C            .byte	$6C
13394 302D                        D8            .byte	$D8
13395 302E                        6C            .byte	$6C
13396 302F                        36            .byte	$36
13397 3030                        00            .byte	0
13398 3031                        00            .byte	0
13399 3032                        00            .byte	0
13400 3033                        00            .byte	0
13401 3034                        00            .byte	0
13402 3035                        00            .byte	0
13403                                           ! 1420  0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x6c, 0x36, 0x6c, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13404 3036                        00            .byte	0
13405 3037                        00            .byte	0
13406 3038                        00            .byte	0
13407 3039                        00            .byte	0
13408 303A                        00            .byte	0
13409 303B                        D8            .byte	$D8
13410 303C                        6C            .byte	$6C
13411 303D                        36            .byte	$36
13412 303E                        6C            .byte	$6C
13413 303F                        D8            .byte	$D8
13414 3040                        00            .byte	0
13415 3041                        00            .byte	0
13416 3042                        00            .byte	0
13417 3043                        00            .byte	0
13418 3044                        00            .byte	0
13419 3045                        00            .byte	0
13420                                           ! 1421  0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x
13421 3046                        11            .byte	$11
13422 3047                        44            .byte	$44
13423 3048                        11            .byte	$11
13424 3049                        44            .byte	$44
13425 304A                        11            .byte	$11
13426 304B                        44            .byte	$44
13427 304C                        11            .byte	$11
13428 304D                        44            .byte	$44
13429 304E                        11            .byte	$11
13430 304F                        44            .byte	$44
13431 3050                        11            .byte	$11
13432 3051                        44            .byte	$44
13433 3052                        11            .byte	$11
13434 3053                        44            .byte	$44
13435                                           ! 1421 11, 0x44,
13436 3054                        11            .byte	$11
13437 3055                        44            .byte	$44
13438                                           ! 1422  0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
13439 3056                        55            .byte	$55
13440 3057                        AA            .byte	$AA
13441 3058                        55            .byte	$55
13442 3059                        AA            .byte	$AA
13443 305A                        55            .byte	$55
13444 305B                        AA            .byte	$AA
13445 305C                        55            .byte	$55
13446 305D                        AA            .byte	$AA
13447 305E                        55            .byte	$55
13448 305F                        AA            .byte	$AA
13449 3060                        55            .byte	$55
13450 3061                        AA            .byte	$AA
13451 3062                        55            .byte	$55
13452 3063                        AA            .byte	$AA
13453 3064                        55            .byte	$55
13454 3065                        AA            .byte	$AA
13455                                           ! 1423  0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77,
13456 3066                        DD            .byte	$DD
13457 3067                        77            .byte	$77
13458 3068                        DD            .byte	$DD
13459 3069                        77            .byte	$77
13460 306A                        DD            .byte	$DD
13461 306B                        77            .byte	$77
13462 306C                        DD            .byte	$DD
13463 306D                        77            .byte	$77
13464 306E                        DD            .byte	$DD
13465 306F                        77            .byte	$77
13466 3070                        DD            .byte	$DD
13467 3071                        77            .byte	$77
13468 3072                        DD            .byte	$DD
13469 3073                        77            .byte	$77
13470 3074                        DD            .byte	$DD
13471 3075                        77            .byte	$77
13472                                           ! 1424  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13473 3076                        18            .byte	$18
13474 3077                        18            .byte	$18
13475 3078                        18            .byte	$18
13476 3079                        18            .byte	$18
13477 307A                        18            .byte	$18
13478 307B                        18            .byte	$18
13479 307C                        18            .byte	$18
13480 307D                        18            .byte	$18
13481 307E                        18            .byte	$18
13482 307F                        18            .byte	$18
13483 3080                        18            .byte	$18
13484 3081                        18            .byte	$18
13485 3082                        18            .byte	$18
13486 3083                        18            .byte	$18
13487 3084                        18            .byte	$18
13488 3085                        18            .byte	$18
13489                                           ! 1425  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13490 3086                        18            .byte	$18
13491 3087                        18            .byte	$18
13492 3088                        18            .byte	$18
13493 3089                        18            .byte	$18
13494 308A                        18            .byte	$18
13495 308B                        18            .byte	$18
13496 308C                        18            .byte	$18
13497 308D                        F8            .byte	$F8
13498 308E                        18            .byte	$18
13499 308F                        18            .byte	$18
13500 3090                        18            .byte	$18
13501 3091                        18            .byte	$18
13502 3092                        18            .byte	$18
13503 3093                        18            .byte	$18
13504 3094                        18            .byte	$18
13505 3095                        18            .byte	$18
13506                                           ! 1426  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13507 3096                        18            .byte	$18
13508 3097                        18            .byte	$18
13509 3098                        18            .byte	$18
13510 3099                        18            .byte	$18
13511 309A                        18            .byte	$18
13512 309B                        F8            .byte	$F8
13513 309C                        18            .byte	$18
13514 309D                        F8            .byte	$F8
13515 309E                        18            .byte	$18
13516 309F                        18            .byte	$18
13517 30A0                        18            .byte	$18
13518 30A1                        18            .byte	$18
13519 30A2                        18            .byte	$18
13520 30A3                        18            .byte	$18
13521 30A4                        18            .byte	$18
13522 30A5                        18            .byte	$18
13523                                           ! 1427  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13524 30A6                        36            .byte	$36
13525 30A7                        36            .byte	$36
13526 30A8                        36            .byte	$36
13527 30A9                        36            .byte	$36
13528 30AA                        36            .byte	$36
13529 30AB                        36            .byte	$36
13530 30AC                        36            .byte	$36
13531 30AD                        F6            .byte	$F6
13532 30AE                        36            .byte	$36
13533 30AF                        36            .byte	$36
13534 30B0                        36            .byte	$36
13535 30B1                        36            .byte	$36
13536 30B2                        36            .byte	$36
13537 30B3                        36            .byte	$36
13538 30B4                        36            .byte	$36
13539 30B5                        36            .byte	$36
13540                                           ! 1428  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13541 30B6                        00            .byte	0
13542 30B7                        00            .byte	0
13543 30B8                        00            .byte	0
13544 30B9                        00            .byte	0
13545 30BA                        00            .byte	0
13546 30BB                        00            .byte	0
13547 30BC                        00            .byte	0
13548 30BD                        FE            .byte	$FE
13549 30BE                        36            .byte	$36
13550 30BF                        36            .byte	$36
13551 30C0                        36            .byte	$36
13552 30C1                        36            .byte	$36
13553 30C2                        36            .byte	$36
13554 30C3                        36            .byte	$36
13555 30C4                        36            .byte	$36
13556 30C5                        36            .byte	$36
13557                                           ! 1429  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13558 30C6                        00            .byte	0
13559 30C7                        00            .byte	0
13560 30C8                        00            .byte	0
13561 30C9                        00            .byte	0
13562 30CA                        00            .byte	0
13563 30CB                        F8            .byte	$F8
13564 30CC                        18            .byte	$18
13565 30CD                        F8            .byte	$F8
13566 30CE                        18            .byte	$18
13567 30CF                        18            .byte	$18
13568 30D0                        18            .byte	$18
13569 30D1                        18            .byte	$18
13570 30D2                        18            .byte	$18
13571 30D3                        18            .byte	$18
13572 30D4                        18            .byte	$18
13573 30D5                        18            .byte	$18
13574                                           ! 1430  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13575 30D6                        36            .byte	$36
13576 30D7                        36            .byte	$36
13577 30D8                        36            .byte	$36
13578 30D9                        36            .byte	$36
13579 30DA                        36            .byte	$36
13580 30DB                        F6            .byte	$F6
13581 30DC                        06            .byte	6
13582 30DD                        F6            .byte	$F6
13583 30DE                        36            .byte	$36
13584 30DF                        36            .byte	$36
13585 30E0                        36            .byte	$36
13586 30E1                        36            .byte	$36
13587 30E2                        36            .byte	$36
13588 30E3                        36            .byte	$36
13589 30E4                        36            .byte	$36
13590 30E5                        36            .byte	$36
13591                                           ! 1431  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13592 30E6                        36            .byte	$36
13593 30E7                        36            .byte	$36
13594 30E8                        36            .byte	$36
13595 30E9                        36            .byte	$36
13596 30EA                        36            .byte	$36
13597 30EB                        36            .byte	$36
13598 30EC                        36            .byte	$36
13599 30ED                        36            .byte	$36
13600 30EE                        36            .byte	$36
13601 30EF                        36            .byte	$36
13602 30F0                        36            .byte	$36
13603 30F1                        36            .byte	$36
13604 30F2                        36            .byte	$36
13605 30F3                        36            .byte	$36
13606 30F4                        36            .byte	$36
13607 30F5                        36            .byte	$36
13608                                           ! 1432  0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13609 30F6                        00            .byte	0
13610 30F7                        00            .byte	0
13611 30F8                        00            .byte	0
13612 30F9                        00            .byte	0
13613 30FA                        00            .byte	0
13614 30FB                        FE            .byte	$FE
13615 30FC                        06            .byte	6
13616 30FD                        F6            .byte	$F6
13617 30FE                        36            .byte	$36
13618 30FF                        36            .byte	$36
13619 3100                        36            .byte	$36
13620 3101                        36            .byte	$36
13621 3102                        36            .byte	$36
13622 3103                        36            .byte	$36
13623 3104                        36            .byte	$36
13624 3105                        36            .byte	$36
13625                                           ! 1433  0x36, 0x36, 0x36, 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13626 3106                        36            .byte	$36
13627 3107                        36            .byte	$36
13628 3108                        36            .byte	$36
13629 3109                        36            .byte	$36
13630 310A                        36            .byte	$36
13631 310B                        F6            .byte	$F6
13632 310C                        06            .byte	6
13633 310D                        FE            .byte	$FE
13634 310E                        00            .byte	0
13635 310F                        00            .byte	0
13636 3110                        00            .byte	0
13637 3111                        00            .byte	0
13638 3112                        00            .byte	0
13639 3113                        00            .byte	0
13640 3114                        00            .byte	0
13641 3115                        00            .byte	0
13642                                           ! 1434  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13643 3116                        36            .byte	$36
13644 3117                        36            .byte	$36
13645 3118                        36            .byte	$36
13646 3119                        36            .byte	$36
13647 311A                        36            .byte	$36
13648 311B                        36            .byte	$36
13649 311C                        36            .byte	$36
13650 311D                        FE            .byte	$FE
13651 311E                        00            .byte	0
13652 311F                        00            .byte	0
13653 3120                        00            .byte	0
13654 3121                        00            .byte	0
13655 3122                        00            .byte	0
13656 3123                        00            .byte	0
13657 3124                        00            .byte	0
13658 3125                        00            .byte	0
13659                                           ! 1435  0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13660 3126                        18            .byte	$18
13661 3127                        18            .byte	$18
13662 3128                        18            .byte	$18
13663 3129                        18            .byte	$18
13664 312A                        18            .byte	$18
13665 312B                        F8            .byte	$F8
13666 312C                        18            .byte	$18
13667 312D                        F8            .byte	$F8
13668 312E                        00            .byte	0
13669 312F                        00            .byte	0
13670 3130                        00            .byte	0
13671 3131                        00            .byte	0
13672 3132                        00            .byte	0
13673 3133                        00            .byte	0
13674 3134                        00            .byte	0
13675 3135                        00            .byte	0
13676                                           ! 1436  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13677 3136                        00            .byte	0
13678 3137                        00            .byte	0
13679 3138                        00            .byte	0
13680 3139                        00            .byte	0
13681 313A                        00            .byte	0
13682 313B                        00            .byte	0
13683 313C                        00            .byte	0
13684 313D                        F8            .byte	$F8
13685 313E                        18            .byte	$18
13686 313F                        18            .byte	$18
13687 3140                        18            .byte	$18
13688 3141                        18            .byte	$18
13689 3142                        18            .byte	$18
13690 3143                        18            .byte	$18
13691 3144                        18            .byte	$18
13692 3145                        18            .byte	$18
13693                                           ! 1437  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13694 3146                        18            .byte	$18
13695 3147                        18            .byte	$18
13696 3148                        18            .byte	$18
13697 3149                        18            .byte	$18
13698 314A                        18            .byte	$18
13699 314B                        18            .byte	$18
13700 314C                        18            .byte	$18
13701 314D                        1F            .byte	$1F
13702 314E                        00            .byte	0
13703 314F                        00            .byte	0
13704 3150                        00            .byte	0
13705 3151                        00            .byte	0
13706 3152                        00            .byte	0
13707 3153                        00            .byte	0
13708 3154                        00            .byte	0
13709 3155                        00            .byte	0
13710                                           ! 1438  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13711 3156                        18            .byte	$18
13712 3157                        18            .byte	$18
13713 3158                        18            .byte	$18
13714 3159                        18            .byte	$18
13715 315A                        18            .byte	$18
13716 315B                        18            .byte	$18
13717 315C                        18            .byte	$18
13718 315D                        FF            .byte	$FF
13719 315E                        00            .byte	0
13720 315F                        00            .byte	0
13721 3160                        00            .byte	0
13722 3161                        00            .byte	0
13723 3162                        00            .byte	0
13724 3163                        00            .byte	0
13725 3164                        00            .byte	0
13726 3165                        00            .byte	0
13727                                           ! 1439  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13728 3166                        00            .byte	0
13729 3167                        00            .byte	0
13730 3168                        00            .byte	0
13731 3169                        00            .byte	0
13732 316A                        00            .byte	0
13733 316B                        00            .byte	0
13734 316C                        00            .byte	0
13735 316D                        FF            .byte	$FF
13736 316E                        18            .byte	$18
13737 316F                        18            .byte	$18
13738 3170                        18            .byte	$18
13739 3171                        18            .byte	$18
13740 3172                        18            .byte	$18
13741 3173                        18            .byte	$18
13742 3174                        18            .byte	$18
13743 3175                        18            .byte	$18
13744                                           ! 1440  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13745 3176                        18            .byte	$18
13746 3177                        18            .byte	$18
13747 3178                        18            .byte	$18
13748 3179                        18            .byte	$18
13749 317A                        18            .byte	$18
13750 317B                        18            .byte	$18
13751 317C                        18            .byte	$18
13752 317D                        1F            .byte	$1F
13753 317E                        18            .byte	$18
13754 317F                        18            .byte	$18
13755 3180                        18            .byte	$18
13756 3181                        18            .byte	$18
13757 3182                        18            .byte	$18
13758 3183                        18            .byte	$18
13759 3184                        18            .byte	$18
13760 3185                        18            .byte	$18
13761                                           ! 1441  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13762 3186                        00            .byte	0
13763 3187                        00            .byte	0
13764 3188                        00            .byte	0
13765 3189                        00            .byte	0
13766 318A                        00            .byte	0
13767 318B                        00            .byte	0
13768 318C                        00            .byte	0
13769 318D                        FF            .byte	$FF
13770 318E                        00            .byte	0
13771 318F                        00            .byte	0
13772 3190                        00            .byte	0
13773 3191                        00            .byte	0
13774 3192                        00            .byte	0
13775 3193                        00            .byte	0
13776 3194                        00            .byte	0
13777 3195                        00            .byte	0
13778                                           ! 1442  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13779 3196                        18            .byte	$18
13780 3197                        18            .byte	$18
13781 3198                        18            .byte	$18
13782 3199                        18            .byte	$18
13783 319A                        18            .byte	$18
13784 319B                        18            .byte	$18
13785 319C                        18            .byte	$18
13786 319D                        FF            .byte	$FF
13787 319E                        18            .byte	$18
13788 319F                        18            .byte	$18
13789 31A0                        18            .byte	$18
13790 31A1                        18            .byte	$18
13791 31A2                        18            .byte	$18
13792 31A3                        18            .byte	$18
13793 31A4                        18            .byte	$18
13794 31A5                        18            .byte	$18
13795                                           ! 1443  
13796                                           ! 1443 0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13797 31A6                        18            .byte	$18
13798 31A7                        18            .byte	$18
13799 31A8                        18            .byte	$18
13800 31A9                        18            .byte	$18
13801 31AA                        18            .byte	$18
13802 31AB                        1F            .byte	$1F
13803 31AC                        18            .byte	$18
13804 31AD                        1F            .byte	$1F
13805 31AE                        18            .byte	$18
13806 31AF                        18            .byte	$18
13807 31B0                        18            .byte	$18
13808 31B1                        18            .byte	$18
13809 31B2                        18            .byte	$18
13810 31B3                        18            .byte	$18
13811 31B4                        18            .byte	$18
13812 31B5                        18            .byte	$18
13813                                           ! 1444  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13814 31B6                        36            .byte	$36
13815 31B7                        36            .byte	$36
13816 31B8                        36            .byte	$36
13817 31B9                        36            .byte	$36
13818 31BA                        36            .byte	$36
13819 31BB                        36            .byte	$36
13820 31BC                        36            .byte	$36
13821 31BD                        37            .byte	$37
13822 31BE                        36            .byte	$36
13823 31BF                        36            .byte	$36
13824 31C0                        36            .byte	$36
13825 31C1                        36            .byte	$36
13826 31C2                        36            .byte	$36
13827 31C3                        36            .byte	$36
13828 31C4                        36            .byte	$36
13829 31C5                        36            .byte	$36
13830                                           ! 1445  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13831 31C6                        36            .byte	$36
13832 31C7                        36            .byte	$36
13833 31C8                        36            .byte	$36
13834 31C9                        36            .byte	$36
13835 31CA                        36            .byte	$36
13836 31CB                        37            .byte	$37
13837 31CC                        30            .byte	$30
13838 31CD                        3F            .byte	$3F
13839 31CE                        00            .byte	0
13840 31CF                        00            .byte	0
13841 31D0                        00            .byte	0
13842 31D1                        00            .byte	0
13843 31D2                        00            .byte	0
13844 31D3                        00            .byte	0
13845 31D4                        00            .byte	0
13846 31D5                        00            .byte	0
13847                                           ! 1446  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13848 31D6                        00            .byte	0
13849 31D7                        00            .byte	0
13850 31D8                        00            .byte	0
13851 31D9                        00            .byte	0
13852 31DA                        00            .byte	0
13853 31DB                        3F            .byte	$3F
13854 31DC                        30            .byte	$30
13855 31DD                        37            .byte	$37
13856 31DE                        36            .byte	$36
13857 31DF                        36            .byte	$36
13858 31E0                        36            .byte	$36
13859 31E1                        36            .byte	$36
13860 31E2                        36            .byte	$36
13861 31E3                        36            .byte	$36
13862 31E4                        36            .byte	$36
13863 31E5                        36            .byte	$36
13864                                           ! 1447  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13865 31E6                        36            .byte	$36
13866 31E7                        36            .byte	$36
13867 31E8                        36            .byte	$36
13868 31E9                        36            .byte	$36
13869 31EA                        36            .byte	$36
13870 31EB                        F7            .byte	$F7
13871 31EC                        00            .byte	0
13872 31ED                        FF            .byte	$FF
13873 31EE                        00            .byte	0
13874 31EF                        00            .byte	0
13875 31F0                        00            .byte	0
13876 31F1                        00            .byte	0
13877 31F2                        00            .byte	0
13878 31F3                        00            .byte	0
13879 31F4                        00            .byte	0
13880 31F5                        00            .byte	0
13881                                           ! 1448  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13882 31F6                        00            .byte	0
13883 31F7                        00            .byte	0
13884 31F8                        00            .byte	0
13885 31F9                        00            .byte	0
13886 31FA                        00            .byte	0
13887 31FB                        FF            .byte	$FF
13888 31FC                        00            .byte	0
13889 31FD                        F7            .byte	$F7
13890 31FE                        36            .byte	$36
13891 31FF                        36            .byte	$36
13892 3200                        36            .byte	$36
13893 3201                        36            .byte	$36
13894 3202                        36            .byte	$36
13895 3203                        36            .byte	$36
13896 3204                        36            .byte	$36
13897 3205                        36            .byte	$36
13898                                           ! 1449  0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13899 3206                        36            .byte	$36
13900 3207                        36            .byte	$36
13901 3208                        36            .byte	$36
13902 3209                        36            .byte	$36
13903 320A                        36            .byte	$36
13904 320B                        37            .byte	$37
13905 320C                        30            .byte	$30
13906 320D                        37            .byte	$37
13907 320E                        36            .byte	$36
13908 320F                        36            .byte	$36
13909 3210                        36            .byte	$36
13910 3211                        36            .byte	$36
13911 3212                        36            .byte	$36
13912 3213                        36            .byte	$36
13913 3214                        36            .byte	$36
13914 3215                        36            .byte	$36
13915                                           ! 1450  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13916 3216                        00            .byte	0
13917 3217                        00            .byte	0
13918 3218                        00            .byte	0
13919 3219                        00            .byte	0
13920 321A                        00            .byte	0
13921 321B                        FF            .byte	$FF
13922 321C                        00            .byte	0
13923 321D                        FF            .byte	$FF
13924 321E                        00            .byte	0
13925 321F                        00            .byte	0
13926 3220                        00            .byte	0
13927 3221                        00            .byte	0
13928 3222                        00            .byte	0
13929 3223                        00            .byte	0
13930 3224                        00            .byte	0
13931 3225                        00            .byte	0
13932                                           ! 1451  0x36, 0x36, 0x36, 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
13933 3226                        36            .byte	$36
13934 3227                        36            .byte	$36
13935 3228                        36            .byte	$36
13936 3229                        36            .byte	$36
13937 322A                        36            .byte	$36
13938 322B                        F7            .byte	$F7
13939 322C                        00            .byte	0
13940 322D                        F7            .byte	$F7
13941 322E                        36            .byte	$36
13942 322F                        36            .byte	$36
13943 3230                        36            .byte	$36
13944 3231                        36            .byte	$36
13945 3232                        36            .byte	$36
13946 3233                        36            .byte	$36
13947 3234                        36            .byte	$36
13948 3235                        36            .byte	$36
13949                                           ! 1452  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13950 3236                        18            .byte	$18
13951 3237                        18            .byte	$18
13952 3238                        18            .byte	$18
13953 3239                        18            .byte	$18
13954 323A                        18            .byte	$18
13955 323B                        FF            .byte	$FF
13956 323C                        00            .byte	0
13957 323D                        FF            .byte	$FF
13958 323E                        00            .byte	0
13959 323F                        00            .byte	0
13960 3240                        00            .byte	0
13961 3241                        00            .byte	0
13962 3242                        00            .byte	0
13963 3243                        00            .byte	0
13964 3244                        00            .byte	0
13965 3245                        00            .byte	0
13966                                           ! 1453  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
13967 3246                        36            .byte	$36
13968 3247                        36            .byte	$36
13969 3248                        36            .byte	$36
13970 3249                        36            .byte	$36
13971 324A                        36            .byte	$36
13972 324B                        36            .byte	$36
13973 324C                        36            .byte	$36
13974 324D                        FF            .byte	$FF
13975 324E                        00            .byte	0
13976 324F                        00            .byte	0
13977 3250                        00            .byte	0
13978 3251                        00            .byte	0
13979 3252                        00            .byte	0
13980 3253                        00            .byte	0
13981 3254                        00            .byte	0
13982 3255                        00            .byte	0
13983                                           ! 1454  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
13984 3256                        00            .byte	0
13985 3257                        00            .byte	0
13986 3258                        00            .byte	0
13987 3259                        00            .byte	0
13988 325A                        00            .byte	0
13989 325B                        FF            .byte	$FF
13990 325C                        00            .byte	0
13991 325D                        FF            .byte	$FF
13992 325E                        18            .byte	$18
13993 325F                        18            .byte	$18
13994 3260                        18            .byte	$18
13995 3261                        18            .byte	$18
13996 3262                        18            .byte	$18
13997 3263                        18            .byte	$18
13998 3264                        18            .byte	$18
13999 3265                        18            .byte	$18
14000                                           ! 1455  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14001 3266                        00            .byte	0
14002 3267                        00            .byte	0
14003 3268                        00            .byte	0
14004 3269                        00            .byte	0
14005 326A                        00            .byte	0
14006 326B                        00            .byte	0
14007 326C                        00            .byte	0
14008 326D                        FF            .byte	$FF
14009 326E                        36            .byte	$36
14010 326F                        36            .byte	$36
14011 3270                        36            .byte	$36
14012 3271                        36            .byte	$36
14013 3272                        36            .byte	$36
14014 3273                        36            .byte	$36
14015 3274                        36            .byte	$36
14016 3275                        36            .byte	$36
14017                                           ! 1456  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14018 3276                        36            .byte	$36
14019 3277                        36            .byte	$36
14020 3278                        36            .byte	$36
14021 3279                        36            .byte	$36
14022 327A                        36            .byte	$36
14023 327B                        36            .byte	$36
14024 327C                        36            .byte	$36
14025 327D                        3F            .byte	$3F
14026 327E                        00            .byte	0
14027 327F                        00            .byte	0
14028 3280                        00            .byte	0
14029 3281                        00            .byte	0
14030 3282                        00            .byte	0
14031 3283                        00            .byte	0
14032 3284                        00            .byte	0
14033 3285                        00            .byte	0
14034                                           ! 1457  0x18, 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14035 3286                        18            .byte	$18
14036 3287                        18            .byte	$18
14037 3288                        18            .byte	$18
14038 3289                        18            .byte	$18
14039 328A                        18            .byte	$18
14040 328B                        1F            .byte	$1F
14041 328C                        18            .byte	$18
14042 328D                        1F            .byte	$1F
14043 328E                        00            .byte	0
14044 328F                        00            .byte	0
14045 3290                        00            .byte	0
14046 3291                        00            .byte	0
14047 3292                        00            .byte	0
14048 3293                        00            .byte	0
14049 3294                        00            .byte	0
14050 3295                        00            .byte	0
14051                                           ! 1458  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14052 3296                        00            .byte	0
14053 3297                        00            .byte	0
14054 3298                        00            .byte	0
14055 3299                        00            .byte	0
14056 329A                        00            .byte	0
14057 329B                        1F            .byte	$1F
14058 329C                        18            .byte	$18
14059 329D                        1F            .byte	$1F
14060 329E                        18            .byte	$18
14061 329F                        18            .byte	$18
14062 32A0                        18            .byte	$18
14063 32A1                        18            .byte	$18
14064 32A2                        18            .byte	$18
14065 32A3                        18            .byte	$18
14066 32A4                        18            .byte	$18
14067 32A5                        18            .byte	$18
14068                                           ! 1459  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14069 32A6                        00            .byte	0
14070 32A7                        00            .byte	0
14071 32A8                        00            .byte	0
14072 32A9                        00            .byte	0
14073 32AA                        00            .byte	0
14074 32AB                        00            .byte	0
14075 32AC                        00            .byte	0
14076 32AD                        3F            .byte	$3F
14077 32AE                        36            .byte	$36
14078 32AF                        36            .byte	$36
14079 32B0                        36            .byte	$36
14080 32B1                        36            .byte	$36
14081 32B2                        36            .byte	$36
14082 32B3                        36            .byte	$36
14083 32B4                        36            .byte	$36
14084 32B5                        36            .byte	$36
14085                                           ! 1460  0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xff, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36,
14086 32B6                        36            .byte	$36
14087 32B7                        36            .byte	$36
14088 32B8                        36            .byte	$36
14089 32B9                        36            .byte	$36
14090 32BA                        36            .byte	$36
14091 32BB                        36            .byte	$36
14092 32BC                        36            .byte	$36
14093 32BD                        FF            .byte	$FF
14094 32BE                        36            .byte	$36
14095 32BF                        36            .byte	$36
14096 32C0                        36            .byte	$36
14097 32C1                        36            .byte	$36
14098 32C2                        36            .byte	$36
14099 32C3                        36            .byte	$36
14100 32C4                        36            .byte	$36
14101 32C5                        36            .byte	$36
14102                                           ! 1461  0x18, 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0xff, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14103 32C6                        18            .byte	$18
14104 32C7                        18            .byte	$18
14105 32C8                        18            .byte	$18
14106 32C9                        18            .byte	$18
14107 32CA                        18            .byte	$18
14108 32CB                        FF            .byte	$FF
14109 32CC                        18            .byte	$18
14110 32CD                        FF            .byte	$FF
14111 32CE                        18            .byte	$18
14112 32CF                        18            .byte	$18
14113 32D0                        18            .byte	$18
14114 32D1                        18            .byte	$18
14115 32D2                        18            .byte	$18
14116 32D3                        18            .byte	$18
14117 32D4                        18            .byte	$18
14118 32D5                        18            .byte	$18
14119                                           ! 1462  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14120 32D6                        18            .byte	$18
14121 32D7                        18            .byte	$18
14122 32D8                        18            .byte	$18
14123 32D9                        18            .byte	$18
14124 32DA                        18            .byte	$18
14125 32DB                        18            .byte	$18
14126 32DC                        18            .byte	$18
14127 32DD                        F8            .byte	$F8
14128 32DE                        00            .byte	0
14129 32DF                        00            .byte	0
14130 32E0                        00            .byte	0
14131 32E1                        00            .byte	0
14132 32E2                        00            .byte	0
14133 32E3                        00            .byte	0
14134 32E4                        00            .byte	0
14135 32E5                        00            .byte	0
14136                                           ! 1463  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14137 32E6                        00            .byte	0
14138 32E7                        00            .byte	0
14139 32E8                        00            .byte	0
14140 32E9                        00            .byte	0
14141 32EA                        00            .byte	0
14142 32EB                        00            .byte	0
14143 32EC                        00            .byte	0
14144 32ED                        1F            .byte	$1F
14145 32EE                        18            .byte	$18
14146 32EF                        18            .byte	$18
14147 32F0                        18            .byte	$18
14148 32F1                        18            .byte	$18
14149 32F2                        18            .byte	$18
14150 32F3                        18            .byte	$18
14151 32F4                        18            .byte	$18
14152 32F5                        18            .byte	$18
14153                                           ! 1464  0xff, 0xff,
14154 32F6                        FF            .byte	$FF
14155                                           ! 1464  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14156 32F7                        FF            .byte	$FF
14157 32F8                        FF            .byte	$FF
14158 32F9                        FF            .byte	$FF
14159 32FA                        FF            .byte	$FF
14160 32FB                        FF            .byte	$FF
14161 32FC                        FF            .byte	$FF
14162 32FD                        FF            .byte	$FF
14163 32FE                        FF            .byte	$FF
14164 32FF                        FF            .byte	$FF
14165 3300                        FF            .byte	$FF
14166 3301                        FF            .byte	$FF
14167 3302                        FF            .byte	$FF
14168 3303                        FF            .byte	$FF
14169 3304                        FF            .byte	$FF
14170 3305                        FF            .byte	$FF
14171                                           ! 1465  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
14172 3306                        00            .byte	0
14173 3307                        00            .byte	0
14174 3308                        00            .byte	0
14175 3309                        00            .byte	0
14176 330A                        00            .byte	0
14177 330B                        00            .byte	0
14178 330C                        00            .byte	0
14179 330D                        FF            .byte	$FF
14180 330E                        FF            .byte	$FF
14181 330F                        FF            .byte	$FF
14182 3310                        FF            .byte	$FF
14183 3311                        FF            .byte	$FF
14184 3312                        FF            .byte	$FF
14185 3313                        FF            .byte	$FF
14186 3314                        FF            .byte	$FF
14187 3315                        FF            .byte	$FF
14188                                           ! 1466  0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0,
14189 3316                        F0            .byte	$F0
14190 3317                        F0            .byte	$F0
14191 3318                        F0            .byte	$F0
14192 3319                        F0            .byte	$F0
14193 331A                        F0            .byte	$F0
14194 331B                        F0            .byte	$F0
14195 331C                        F0            .byte	$F0
14196 331D                        F0            .byte	$F0
14197 331E                        F0            .byte	$F0
14198 331F                        F0            .byte	$F0
14199 3320                        F0            .byte	$F0
14200 3321                        F0            .byte	$F0
14201 3322                        F0            .byte	$F0
14202 3323                        F0            .byte	$F0
14203 3324                        F0            .byte	$F0
14204 3325                        F0            .byte	$F0
14205                                           ! 1467  0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
14206 3326                        0F            .byte	$F
14207 3327                        0F            .byte	$F
14208 3328                        0F            .byte	$F
14209 3329                        0F            .byte	$F
14210 332A                        0F            .byte	$F
14211 332B                        0F            .byte	$F
14212 332C                        0F            .byte	$F
14213 332D                        0F            .byte	$F
14214 332E                        0F            .byte	$F
14215 332F                        0F            .byte	$F
14216 3330                        0F            .byte	$F
14217 3331                        0F            .byte	$F
14218 3332                        0F            .byte	$F
14219 3333                        0F            .byte	$F
14220 3334                        0F            .byte	$F
14221 3335                        0F            .byte	$F
14222                                           ! 1468  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14223 3336                        FF            .byte	$FF
14224 3337                        FF            .byte	$FF
14225 3338                        FF            .byte	$FF
14226 3339                        FF            .byte	$FF
14227 333A                        FF            .byte	$FF
14228 333B                        FF            .byte	$FF
14229 333C                        FF            .byte	$FF
14230 333D                        00            .byte	0
14231 333E                        00            .byte	0
14232 333F                        00            .byte	0
14233 3340                        00            .byte	0
14234 3341                        00            .byte	0
14235 3342                        00            .byte	0
14236 3343                        00            .byte	0
14237 3344                        00            .byte	0
14238 3345                        00            .byte	0
14239                                           ! 1469  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0xd8, 0xd8, 0xd8, 0xdc, 0x76, 0x00, 0x00, 0x00, 0x00,
14240 3346                        00            .byte	0
14241 3347                        00            .byte	0
14242 3348                        00            .byte	0
14243 3349                        00            .byte	0
14244 334A                        00            .byte	0
14245 334B                        76            .byte	$76
14246 334C                        DC            .byte	$DC
14247 334D                        D8            .byte	$D8
14248 334E                        D8            .byte	$D8
14249 334F                        D8            .byte	$D8
14250 3350                        DC            .byte	$DC
14251 3351                        76            .byte	$76
14252 3352                        00            .byte	0
14253 3353                        00            .byte	0
14254 3354                        00            .byte	0
14255 3355                        00            .byte	0
14256                                           ! 1470  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xd8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0x00, 0x00, 0x00, 0x00,
14257 3356                        00            .byte	0
14258 3357                        00            .byte	0
14259 3358                        78            .byte	$78
14260 3359                        CC            .byte	$CC
14261 335A                        CC            .byte	$CC
14262 335B                        CC            .byte	$CC
14263 335C                        D8            .byte	$D8
14264 335D                        CC            .byte	$CC
14265 335E                        C6            .byte	$C6
14266 335F                        C6            .byte	$C6
14267 3360                        C6            .byte	$C6
14268 3361                        CC            .byte	$CC
14269 3362                        00            .byte	0
14270 3363                        00            .byte	0
14271 3364                        00            .byte	0
14272 3365                        00            .byte	0
14273                                           ! 1471  0x00, 0x00, 0xfe, 0xc6, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00,
14274 3366                        00            .byte	0
14275 3367                        00            .byte	0
14276 3368                        FE            .byte	$FE
14277 3369                        C6            .byte	$C6
14278 336A                        C6            .byte	$C6
14279 336B                        C0            .byte	$C0
14280 336C                        C0            .byte	$C0
14281 336D                        C0            .byte	$C0
14282 336E                        C0            .byte	$C0
14283 336F                        C0            .byte	$C0
14284 3370                        C0            .byte	$C0
14285 3371                        C0            .byte	$C0
14286 3372                        00            .byte	0
14287 3373                        00            .byte	0
14288 3374                        00            .byte	0
14289 3375                        00            .byte	0
14290                                           ! 1472  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00,
14291 3376                        00            .byte	0
14292 3377                        00            .byte	0
14293 3378                        00            .byte	0
14294 3379                        00            .byte	0
14295 337A                        FE            .byte	$FE
14296 337B                        6C            .byte	$6C
14297 337C                        6C            .byte	$6C
14298 337D                        6C            .byte	$6C
14299 337E                        6C            .byte	$6C
14300 337F                        6C            .byte	$6C
14301 3380                        6C            .byte	$6C
14302 3381                        6C            .byte	$6C
14303 3382                        00            .byte	0
14304 3383                        00            .byte	0
14305 3384                        00            .byte	0
14306 3385                        00            .byte	0
14307                                           ! 1473  0x00, 0x00, 0x00, 0xfe, 0xc6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00,
14308 3386                        00            .byte	0
14309 3387                        00            .byte	0
14310 3388                        00            .byte	0
14311 3389                        FE            .byte	$FE
14312 338A                        C6            .byte	$C6
14313 338B                        60            .byte	$60
14314 338C                        30            .byte	$30
14315 338D                        18            .byte	$18
14316 338E                        30            .byte	$30
14317 338F                        60            .byte	$60
14318 3390                        C6            .byte	$C6
14319 3391                        FE            .byte	$FE
14320 3392                        00            .byte	0
14321 3393                        00            .byte	0
14322 3394                        00            .byte	0
14323 3395                        00            .byte	0
14324                                           ! 1474  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xd8, 0xd8, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14325 3396                        00            .byte	0
14326 3397                        00            .byte	0
14327 3398                        00            .byte	0
14328 3399                        00            .byte	0
14329 339A                        00            .byte	0
14330 339B                        7E            .byte	$7E
14331 339C                        D8            .byte	$D8
14332 339D                        D8            .byte	$D8
14333 339E                        D8            .byte	$D8
14334 339F                        D8            .byte	$D8
14335 33A0                        D8            .byte	$D8
14336 33A1                        70            .byte	$70
14337 33A2                        00            .byte	0
14338 33A3                        00            .byte	0
14339 33A4                        00            .byte	0
14340 33A5                        00            .byte	0
14341                                           ! 1475  0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00,
14342 33A6                        00            .byte	0
14343 33A7                        00            .byte	0
14344 33A8                        00            .byte	0
14345 33A9                        00            .byte	0
14346 33AA                        66            .byte	$66
14347 33AB                        66            .byte	$66
14348 33AC                        66            .byte	$66
14349 33AD                        66            .byte	$66
14350 33AE                        66            .byte	$66
14351 33AF                        7C            .byte	$7C
14352 33B0                        60            .byte	$60
14353 33B1                        60            .byte	$60
14354 33B2                        C0            .byte	$C0
14355 33B3                        00            .byte	0
14356 33B4                        00            .byte	0
14357 33B5                        00            .byte	0
14358                                           ! 1476  0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00,
14359 33B6                        00            .byte	0
14360 33B7                        00            .byte	0
14361 33B8                        00            .byte	0
14362 33B9                        00            .byte	0
14363 33BA                        76            .byte	$76
14364 33BB                        DC            .byte	$DC
14365 33BC                        18            .byte	$18
14366 33BD                        18            .byte	$18
14367 33BE                        18            .byte	$18
14368 33BF                        18            .byte	$18
14369 33C0                        18            .byte	$18
14370 33C1                        18            .byte	$18
14371 33C2                        00            .byte	0
14372 33C3                        00            .byte	0
14373 33C4                        00            .byte	0
14374 33C5                        00            .byte	0
14375                                           ! 1477  0x00, 0x00, 0x00, 0x7e, 0x18, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x00, 0x00, 0x00, 0x00,
14376 33C6                        00            .byte	0
14377 33C7                        00            .byte	0
14378 33C8                        00            .byte	0
14379 33C9                        7E            .byte	$7E
14380 33CA                        18            .byte	$18
14381 33CB                        3C            .byte	$3C
14382 33CC                        66            .byte	$66
14383 33CD                        66            .byte	$66
14384 33CE                        66            .byte	$66
14385 33CF                        3C            .byte	$3C
14386 33D0                        18            .byte	$18
14387 33D1                        7E            .byte	$7E
14388 33D2                        00            .byte	0
14389 33D3                        00            .byte	0
14390 33D4                        00            .byte	0
14391 33D5                        00            .byte	0
14392                                           ! 1478  0x00, 0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00,
14393 33D6                        00            .byte	0
14394 33D7                        00            .byte	0
14395 33D8                        00            .byte	0
14396 33D9                        38            .byte	$38
14397 33DA                        6C            .byte	$6C
14398 33DB                        C6            .byte	$C6
14399 33DC                        C6            .byte	$C6
14400 33DD                        FE            .byte	$FE
14401 33DE                        C6            .byte	$C6
14402 33DF                        C6            .byte	$C6
14403 33E0                        6C            .byte	$6C
14404 33E1                        38            .byte	$38
14405 33E2                        00            .byte	0
14406 33E3                        00            .byte	0
14407 33E4                        00            .byte	0
14408 33E5                        00            .byte	0
14409                                           ! 1479  0x00, 0x00, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x6c, 0x6c, 0x6c, 0xee, 0x00, 0x00, 0x00, 0x00,
14410 33E6                        00            .byte	0
14411 33E7                        00            .byte	0
14412 33E8                        38            .byte	$38
14413 33E9                        6C            .byte	$6C
14414 33EA                        C6            .byte	$C6
14415 33EB                        C6            .byte	$C6
14416 33EC                        C6            .byte	$C6
14417 33ED                        6C            .byte	$6C
14418 33EE                        6C            .byte	$6C
14419 33EF                        6C            .byte	$6C
14420 33F0                        6C            .byte	$6C
14421 33F1                        EE            .byte	$EE
14422 33F2                        00            .byte	0
14423 33F3                        00            .byte	0
14424 33F4                        00            .byte	0
14425 33F5                        00            .byte	0
14426                                           ! 1480  0x00, 0x00, 0x1e, 0x30, 0x18, 0x0c, 0x3e, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00, 0x00, 0x00, 0x00,
14427 33F6                        00            .byte	0
14428 33F7                        00            .byte	0
14429 33F8                        1E            .byte	$1E
14430 33F9                        30            .byte	$30
14431 33FA                        18            .byte	$18
14432 33FB                        0C            .byte	$C
14433 33FC                        3E            .byte	$3E
14434 33FD                        66            .byte	$66
14435 33FE                        66            .byte	$66
14436 33FF                        66            .byte	$66
14437 3400                        66            .byte	$66
14438 3401                        3C            .byte	$3C
14439 3402                        00            .byte	0
14440 3403                        00            .byte	0
14441 3404                        00            .byte	0
14442 3405                        00            .byte	0
14443                                           ! 1481  0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0xdb, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14444 3406                        00            .byte	0
14445 3407                        00            .byte	0
14446 3408                        00            .byte	0
14447 3409                        00            .byte	0
14448 340A                        00            .byte	0
14449 340B                        7E            .byte	$7E
14450 340C                        DB            .byte	$DB
14451 340D                        DB            .byte	$DB
14452 340E                        DB            .byte	$DB
14453 340F                        7E            .byte	$7E
14454 3410                        00            .byte	0
14455 3411                        00            .byte	0
14456 3412                        00            .byte	0
14457 3413                        00            .byte	0
14458 3414                        00            .byte	0
14459 3415                        00            .byte	0
14460                                           ! 1482  0x00, 0x00, 0x00, 0x03, 0x06, 0x7e, 0xdb, 0xdb, 0xf3, 0x7e, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00,
14461 3416                        00            .byte	0
14462 3417                        00            .byte	0
14463 3418                        00            .byte	0
14464 3419                        03            .byte	3
14465 341A                        06            .byte	6
14466 341B                        7E            .byte	$7E
14467 341C                        DB            .byte	$DB
14468 341D                        DB            .byte	$DB
14469 341E                        F3            .byte	$F3
14470 341F                        7E            .byte	$7E
14471 3420                        60            .byte	$60
14472 3421                        C0            .byte	$C0
14473 3422                        00            .byte	0
14474 3423                        00            .byte	0
14475 3424                        00            .byte	0
14476 3425                        00            .byte	0
14477                                           ! 1483  0x00, 0x00, 0x1c, 0x30, 0x60, 0x60, 0x7c, 0x60, 0x60, 0x60, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00,
14478 3426                        00            .byte	0
14479 3427                        00            .byte	0
14480 3428                        1C            .byte	$1C
14481 3429                        30            .byte	$30
14482 342A                        60            .byte	$60
14483 342B                        60            .byte	$60
14484 342C                        7C            .byte	$7C
14485 342D                        60            .byte	$60
14486 342E                        60            .byte	$60
14487 342F                        60            .byte	$60
14488 3430                        30            .byte	$30
14489 3431                        1C            .byte	$1C
14490 3432                        00            .byte	0
14491 3433                        00            .byte	0
14492 3434                        00            .byte	0
14493 3435                        00            .byte	0
14494                                           ! 1484  0x00, 0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00,
14495 3436                        00            .byte	0
14496 3437                        00            .byte	0
14497 3438                        00            .byte	0
14498 3439                        7C            .byte	$7C
14499 343A                        C6            .byte	$C6
14500 343B                        C6            .byte	$C6
14501 343C                        C6            .byte	$C6
14502 343D                        C6            .byte	$C6
14503 343E                        C6            .byte	$C6
14504 343F                        C6            .byte	$C6
14505 3440                        C6            .byte	$C6
14506 3441                        C6            .byte	$C6
14507 3442                        00            .byte	0
14508 3443                        00            .byte	0
14509 3444                        00            .byte	0
14510 3445                        00            .byte	0
14511                                           ! 1485  0x00, 0x00, 0x00, 0x00
14512 3446                        00            .byte	0
14513 3447                        00            .byte	0
14514 3448                        00            .byte	0
14515                                           ! 1485 , 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
14516 3449                        00            .byte	0
14517 344A                        FE            .byte	$FE
14518 344B                        00            .byte	0
14519 344C                        00            .byte	0
14520 344D                        FE            .byte	$FE
14521 344E                        00            .byte	0
14522 344F                        00            .byte	0
14523 3450                        FE            .byte	$FE
14524 3451                        00            .byte	0
14525 3452                        00            .byte	0
14526 3453                        00            .byte	0
14527 3454                        00            .byte	0
14528 3455                        00            .byte	0
14529                                           ! 1486  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
14530 3456                        00            .byte	0
14531 3457                        00            .byte	0
14532 3458                        00            .byte	0
14533 3459                        00            .byte	0
14534 345A                        18            .byte	$18
14535 345B                        18            .byte	$18
14536 345C                        7E            .byte	$7E
14537 345D                        18            .byte	$18
14538 345E                        18            .byte	$18
14539 345F                        00            .byte	0
14540 3460                        00            .byte	0
14541 3461                        FF            .byte	$FF
14542 3462                        00            .byte	0
14543 3463                        00            .byte	0
14544 3464                        00            .byte	0
14545 3465                        00            .byte	0
14546                                           ! 1487  0x00, 0x00, 0x00, 0x30, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x30, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14547 3466                        00            .byte	0
14548 3467                        00            .byte	0
14549 3468                        00            .byte	0
14550 3469                        30            .byte	$30
14551 346A                        18            .byte	$18
14552 346B                        0C            .byte	$C
14553 346C                        06            .byte	6
14554 346D                        0C            .byte	$C
14555 346E                        18            .byte	$18
14556 346F                        30            .byte	$30
14557 3470                        00            .byte	0
14558 3471                        7E            .byte	$7E
14559 3472                        00            .byte	0
14560 3473                        00            .byte	0
14561 3474                        00            .byte	0
14562 3475                        00            .byte	0
14563                                           ! 1488  0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00,
14564 3476                        00            .byte	0
14565 3477                        00            .byte	0
14566 3478                        00            .byte	0
14567 3479                        0C            .byte	$C
14568 347A                        18            .byte	$18
14569 347B                        30            .byte	$30
14570 347C                        60            .byte	$60
14571 347D                        30            .byte	$30
14572 347E                        18            .byte	$18
14573 347F                        0C            .byte	$C
14574 3480                        00            .byte	0
14575 3481                        7E            .byte	$7E
14576 3482                        00            .byte	0
14577 3483                        00            .byte	0
14578 3484                        00            .byte	0
14579 3485                        00            .byte	0
14580                                           ! 1489  0x00, 0x00, 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
14581 3486                        00            .byte	0
14582 3487                        00            .byte	0
14583 3488                        0E            .byte	$E
14584 3489                        1B            .byte	$1B
14585 348A                        1B            .byte	$1B
14586 348B                        18            .byte	$18
14587 348C                        18            .byte	$18
14588 348D                        18            .byte	$18
14589 348E                        18            .byte	$18
14590 348F                        18            .byte	$18
14591 3490                        18            .byte	$18
14592 3491                        18            .byte	$18
14593 3492                        18            .byte	$18
14594 3493                        18            .byte	$18
14595 3494                        18            .byte	$18
14596 3495                        18            .byte	$18
14597                                           ! 1490  0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0xd8, 0x70, 0x00, 0x00, 0x00, 0x00,
14598 3496                        18            .byte	$18
14599 3497                        18            .byte	$18
14600 3498                        18            .byte	$18
14601 3499                        18            .byte	$18
14602 349A                        18            .byte	$18
14603 349B                        18            .byte	$18
14604 349C                        18            .byte	$18
14605 349D                        18            .byte	$18
14606 349E                        D8            .byte	$D8
14607 349F                        D8            .byte	$D8
14608 34A0                        D8            .byte	$D8
14609 34A1                        70            .byte	$70
14610 34A2                        00            .byte	0
14611 34A3                        00            .byte	0
14612 34A4                        00            .byte	0
14613 34A5                        00            .byte	0
14614                                           ! 1491  0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7e, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
14615 34A6                        00            .byte	0
14616 34A7                        00            .byte	0
14617 34A8                        00            .byte	0
14618 34A9                        00            .byte	0
14619 34AA                        18            .byte	$18
14620 34AB                        18            .byte	$18
14621 34AC                        00            .byte	0
14622 34AD                        7E            .byte	$7E
14623 34AE                        00            .byte	0
14624 34AF                        18            .byte	$18
14625 34B0                        18            .byte	$18
14626 34B1                        00            .byte	0
14627 34B2                        00            .byte	0
14628 34B3                        00            .byte	0
14629 34B4                        00            .byte	0
14630 34B5                        00            .byte	0
14631                                           ! 1492  0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xdc, 0x00, 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14632 34B6                        00            .byte	0
14633 34B7                        00            .byte	0
14634 34B8                        00            .byte	0
14635 34B9                        00            .byte	0
14636 34BA                        00            .byte	0
14637 34BB                        76            .byte	$76
14638 34BC                        DC            .byte	$DC
14639 34BD                        00            .byte	0
14640 34BE                        76            .byte	$76
14641 34BF                        DC            .byte	$DC
14642 34C0                        00            .byte	0
14643 34C1                        00            .byte	0
14644 34C2                        00            .byte	0
14645 34C3                        00            .byte	0
14646 34C4                        00            .byte	0
14647 34C5                        00            .byte	0
14648                                           ! 1493  0x00, 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14649 34C6                        00            .byte	0
14650 34C7                        38            .byte	$38
14651 34C8                        6C            .byte	$6C
14652 34C9                        6C            .byte	$6C
14653 34CA                        38            .byte	$38
14654 34CB                        00            .byte	0
14655 34CC                        00            .byte	0
14656 34CD                        00            .byte	0
14657 34CE                        00            .byte	0
14658 34CF                        00            .byte	0
14659 34D0                        00            .byte	0
14660 34D1                        00            .byte	0
14661 34D2                        00            .byte	0
14662 34D3                        00            .byte	0
14663 34D4                        00            .byte	0
14664 34D5                        00            .byte	0
14665                                           ! 1494  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14666 34D6                        00            .byte	0
14667 34D7                        00            .byte	0
14668 34D8                        00            .byte	0
14669 34D9                        00            .byte	0
14670 34DA                        00            .byte	0
14671 34DB                        00            .byte	0
14672 34DC                        00            .byte	0
14673 34DD                        18            .byte	$18
14674 34DE                        18            .byte	$18
14675 34DF                        00            .byte	0
14676 34E0                        00            .byte	0
14677 34E1                        00            .byte	0
14678 34E2                        00            .byte	0
14679 34E3                        00            .byte	0
14680 34E4                        00            .byte	0
14681 34E5                        00            .byte	0
14682                                           ! 1495  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14683 34E6                        00            .byte	0
14684 34E7                        00            .byte	0
14685 34E8                        00            .byte	0
14686 34E9                        00            .byte	0
14687 34EA                        00            .byte	0
14688 34EB                        00            .byte	0
14689 34EC                        00            .byte	0
14690 34ED                        00            .byte	0
14691 34EE                        18            .byte	$18
14692 34EF                        00            .byte	0
14693 34F0                        00            .byte	0
14694 34F1                        00            .byte	0
14695 34F2                        00            .byte	0
14696 34F3                        00            .byte	0
14697 34F4                        00            .byte	0
14698 34F5                        00            .byte	0
14699                                           ! 1496  0x00, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x6c, 0x3c, 0x1c, 0x00, 0x00, 0x00, 0x00,
14700 34F6                        00            .byte	0
14701 34F7                        0F            .byte	$F
14702 34F8                        0C            .byte	$C
14703 34F9                        0C            .byte	$C
14704 34FA                        0C            .byte	$C
14705 34FB                        0C            .byte	$C
14706 34FC                        0C            .byte	$C
14707 34FD                        EC            .byte	$EC
14708 34FE                        6C            .byte	$6C
14709 34FF                        6C            .byte	$6C
14710 3500                        3C            .byte	$3C
14711 3501                        1C            .byte	$1C
14712 3502                        00            .byte	0
14713 3503                        00            .byte	0
14714 3504                        00            .byte	0
14715 3505                        00            .byte	0
14716                                           ! 1497  0x00, 0xd8, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14717 3506                        00            .byte	0
14718 3507                        D8            .byte	$D8
14719 3508                        6C            .byte	$6C
14720 3509                        6C            .byte	$6C
14721 350A                        6C            .byte	$6C
14722 350B                        6C            .byte	$6C
14723 350C                        6C            .byte	$6C
14724 350D                        00            .byte	0
14725 350E                        00            .byte	0
14726 350F                        00            .byte	0
14727 3510                        00            .byte	0
14728 3511                        00            .byte	0
14729 3512                        00            .byte	0
14730 3513                        00            .byte	0
14731 3514                        00            .byte	0
14732 3515                        00            .byte	0
14733                                           ! 1498  0x00, 0x70, 0xd8, 0x30, 0x60, 0xc8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
14734 3516                        00            .byte	0
14735 3517                        70            .byte	$70
14736 3518                        D8            .byte	$D8
14737 3519                        30            .byte	$30
14738 351A                        60            .byte	$60
14739 351B                        C8            .byte	$C8
14740 351C                        F8            .byte	$F8
14741 351D                        00            .byte	0
14742 351E                        00            .byte	0
14743 351F                        00            .byte	0
14744 3520                        00            .byte	0
14745 3521                        00            .byte	0
14746 3522                        00            .byte	0
14747 3523                        00            .byte	0
14748 3524                        00            .byte	0
14749 3525                        00            .byte	0
14750                                           ! 1499  0x00, 0x00, 0x00, 0x00, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00,
14751 3526                        00            .byte	0
14752 3527                        00            .byte	0
14753 3528                        00            .byte	0
14754 3529                        00            .byte	0
14755 352A                        7C            .byte	$7C
14756 352B                        7C            .byte	$7C
14757 352C                        7C            .byte	$7C
14758 352D                        7C            .byte	$7C
14759 352E                        7C            .byte	$7C
14760 352F                        7C            .byte	$7C
14761 3530                        7C            .byte	$7C
14762 3531                        00            .byte	0
14763 3532                        00            .byte	0
14764 3533                        00            .byte	0
14765 3534                        00            .byte	0
14766 3535                        00            .byte	0
14767                                           ! 1500  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
14768 3536                        00            .byte	0
14769 3537                        00            .byte	0
14770 3538                        00            .byte	0
14771 3539                        00            .byte	0
14772 353A                        00            .byte	0
14773 353B                        00            .byte	0
14774 353C                        00            .byte	0
14775 353D                        00            .byte	0
14776 353E                        00            .byte	0
14777 353F                        00            .byte	0
14778 3540                        00            .byte	0
14779 3541                        00            .byte	0
14780 3542                        00            .byte	0
14781 3543                        00            .byte	0
14782 3544                        00            .byte	0
14783                                           ! 1501 };
14784 3545                        00            .byte	0
14785                                           !BCC_EOS
14786                                           ! 1502 static Bit8u vgafont14alt[1]={0x00};
14787                       00003546            _vgafont14alt:
14788 3546                        00            .byte	0
14789                                           !BCC_EOS
14790                                           ! 1503 static Bit8u vgafont16alt[1]={0x00};
14791                       00003547            _vgafont16alt:
14792 3547                        00            .byte	0
14793                                           !BCC_EOS
14794                                           ! 1504 #asm
14795                                           !BCC_ASM
14796                       00003548            init_vga_card:
14797                                           ;; switch to color mode and enable CPU access 480 lines
14798 3548           BA                   03C2    mov dx, #0x3C2
14799 354B           B0                     C3    mov al, #0xC3
14800 354D           EE                           outb dx,al
14801                                           ;; more than 64k 3C4/04
14802 354E           BA                   03C4    mov dx, #0x3C4
14803 3551           B0                     04    mov al, #0x04
14804 3553           EE                           outb dx,al
14805 3554           BA                   03C5    mov dx, #0x3C5
14806 3557           B0                     02    mov al, #0x02
14807 3559           EE                           outb dx,al
14808 355A           BB                   3564    mov bx, #msg_vga_init
14809 355D           53                           push bx
14810 355E           E8         4825              call _printf
14811 3561           44                           inc sp
14812 3562           44                           inc sp
14813 3563           C3                           ret
14814                       00003564            msg_vga_init:
14815 3564                        56            .ascii "VGABios $Id: vgabios.c,v 1.69 2009/04/07 18:18:20 vruppert Exp $"
14816 35A4                        0D            .byte 0x0d,0x0a,0x00
14817                                           ! 1526 endasm
14818                                           !BCC_ENDASM
14819                                           ! 1527 #asm
14820                                           !BCC_ASM
14821                       000035A7            init_bios_area:
14822 35A7           1E                           push ds
14823 35A8           B8                   0040    mov ax, # 0x40
14824 35AB           8ED8                         mov ds, ax
14825                                           ;; init detected hardware BIOS Area
14826 35AD           BB                   0010    mov bx, # 0x10
14827 35B0           8B07                         mov ax, [bx]
14828 35B2           25                   FFCF    and ax, #0xffcf
14829                                           ;; set 80x25 color (not clear from RBIL but usual)
14830 35B5           0D                   0020    or ax, #0x0020
14831 35B8           8907                         mov [bx], ax
14832                                           ;; Just for the first int10 find its children
14833                                           ;; the default char height
14834 35BA           BB                   0085    mov bx, # 0x85
14835 35BD           B0                     10    mov al, #0x10
14836 35BF           8807                         mov [bx], al
14837                                           ;; Clear the screen
14838 35C1           BB                   0087    mov bx, # 0x87
14839 35C4           B0                     60    mov al, #0x60
14840 35C6           8807                         mov [bx], al
14841                                           ;; Set the basic screen we have
14842 35C8           BB                   0088    mov bx, # 0x88
14843 35CB           B0                     F9    mov al, #0xf9
14844 35CD           8807                         mov [bx], al
14845                                           ;; Set the basic modeset options
14846 35CF           BB                   0089    mov bx, # 0x89
14847 35D2           B0                     51    mov al, #0x51
14848 35D4           8807                         mov [bx], al
14849                                           ;; Set the default MSR
14850 35D6           BB                   0065    mov bx, # 0x65
14851 35D9           B0                     09    mov al, #0x09
14852 35DB           8807                         mov [bx], al
14853 35DD           1F                           pop ds
14854 35DE           C3                           ret
14855                       000035DF            _video_save_pointer_table:
14856 35DF                      0276              .word _video_param_table
14857 35E1                      C000              .word 0xc000
14858 35E3                      0000              .word 0
14859 35E5                      0000              .word 0
14860 35E7                      0000              .word 0
14861 35E9                      0000              .word 0
14862 35EB                      0000              .word 0
14863 35ED                      0000              .word 0
14864 35EF                      0000              .word 0
14865 35F1                      0000              .word 0
14866 35F3                      0000              .word 0
14867 35F5                      0000              .word 0
14868 35F7                      0000              .word 0
14869 35F9                      0000              .word 0
14870                                           ! 1577 endasm
14871                                           !BCC_ENDASM
14872                                           ! 1578 static void display_splash_screen()
14873                                           ! 1579 {
14874                                           
14875                       000035FB            _display_splash_screen:
14876                                           ! 1580 }
14877 35FB           C3                         ret
14878                                           ! 1581 static void display_info()
14879                                           ! 1582 {
14880                       000035FC            _display_info:
14881                                           ! 1583 #asm
14882                                           !BCC_ASM
14883 35FC           B8                   C000   mov ax,#0xc000
14884 35FF           8ED8                        mov ds,ax
14885 3601           BE                   0022   mov si,#vgabios_name
14886 3604           E8         0013             call _display_string
14887 3607           BE                   0038   mov si,#vgabios_version
14888 360A           E8         000D             call _display_string
14889                                            ;;mov si,#vgabios_copyright
14890                                            ;;call _display_string
14891                                            ;;mov si,#crlf
14892                                            ;;call _display_string
14893 360D           BE                   007E   mov si,#vgabios_license
14894 3610           E8         0007             call _display_string
14895 3613           BE                   00B3   mov si,#vgabios_website
14896 3616           E8         0001             call _display_string
14897                                           ! 1598 endasm
14898                                           !BCC_ENDASM
14899                                           ! 1599 }
14900 3619           C3                         ret
14901                                           ! 1600 static void display_string()
14902                                           ! 1601 {
14903                       0000361A            _display_string:
14904                                           ! 1602 #asm
14905                                           !BCC_ASM
14906 361A           8CD8                        mov ax,ds
14907 361C           8EC0                        mov es,ax
14908 361E           89F7                        mov di,si
14909 3620           31C9                        xor cx,cx
14910 3622           F7D1                        not cx
14911 3624           30C0                        xor al,al
14912 3626           FC                          cld
14913 3627           F2                          repne
14914 3628           AE                           scasb
14915 3629           F7D1                        not cx
14916 362B           49                          dec cx
14917 362C           51                          push cx
14918 362D           B8                   0300   mov ax,#0x0300
14919 3630           BB                   0000   mov bx,#0x0000
14920 3633           CD                     10   int #0x10
14921 3635           59                          pop cx
14922 3636           B8                   1301   mov ax,#0x1301
14923 3639           BB                   000B   mov bx,#0x000b
14924 363C           89F5                        mov bp,si
14925 363E           CD                     10   int #0x10
14926                                           ! 1623 endasm
14927                                           !BCC_ENDASM
14928                                           ! 1624 }
14929 3640           C3                         ret
14930                                           ! 1625 static void int10_debugmsg(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14931                                           ! 1626   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14932                       00003641            _int10_debugmsg:
14933                                           !BCC_EOS
14934                                           ! 1627 {
14935                                           ! 1628  if(( AX >> 8 )!=0x0E)
14936 3641           55                         push	bp
14937 3642           89E5                       mov	bp,sp
14938                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14939 3644           8B46         12            mov	ax,$12[bp]
14940 3647           88E0                       mov	al,ah
14941 3649           30E4                       xor	ah,ah
14942                                           ! Debug: ne int = const $E to unsigned int = ax+0 (used reg = )
14943 364B           3D                   000E  cmp	ax,*$E
14944 364E           74           20            je  	.1
14945                       00003650            .2:
14946                                           ! 1629   printf("vgabios call ah%02x al%02x bx%04x cx%04x dx%04x\n",( AX >> 8 ),( AX & 0x00ff ),BX,CX,DX);
14947                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
14948 3650           FF76         0E            push	$E[bp]
14949                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
14950 3653           FF76         10            push	$10[bp]
14951                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
14952 3656           FF76         0C            push	$C[bp]
14953                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
14954 3659           8A46         12            mov	al,$12[bp]
14955                                           ! Debug: list unsigned char = al+0 (used reg = )
14956 365C           30E4                       xor	ah,ah
14957 365E           50                         push	ax
14958                                           ! Debug: sr int = const 8 to unsigned short AX = [S+$A+$10] (used reg = )
14959 365F           8B46         12            mov	ax,$12[bp]
14960 3662           88E0                       mov	al,ah
14961 3664           30E4                       xor	ah,ah
14962                                           ! Debug: list unsigned int = ax+0 (used reg = )
14963 3666           50                         push	ax
14964                                           ! Debug: list * char = .3+0 (used reg = )
14965 3667           BB                   7FAA  mov	bx,#.3
14966 366A           53                         push	bx
14967                                           ! Debug: func () void = printf+0 (used reg = )
14968 366B           E8         4718            call	_printf
14969 366E           89EC                       mov	sp,bp
14970                                           !BCC_EOS
14971                                           ! 1630 }
14972                       00003670            .1:
14973 3670           5D                         pop	bp
14974 3671           C3                         ret
14975                                           ! 1631 static void int10_func(DI, SI, BP, SP, BX, DX, CX, AX, DS, ES, FLAGS)
14976                                           ! Register BX used in function int10_debugmsg
14977                                           ! 1632   Bit16u DI, SI, BP, SP, BX, DX, CX, AX, ES, DS, FLAGS;
14978                       00003672            _int10_func:
14979                                           !BCC_EOS
14980                                           ! 1633 {
14981                                           ! 1634  switch(( AX >> 8 ))
14982 3672           55                         push	bp
14983 3673           89E5                       mov	bp,sp
14984                                           ! Debug: sr int = const 8 to unsigned short AX = [S+2+$10] (used reg = )
14985 3675           8B46         12            mov	ax,$12[bp]
14986 3678           88E0                       mov	al,ah
14987 367A           30E4                       xor	ah,ah
14988                                           ! 1635   {
14989 367C           E9         0448            br 	.6
14990                                           ! 1636    case 0x00:
14991                                           ! 1637      biosfn_set_video_mode(( AX & 0x00ff ));
14992                       0000367F            .7:
14993                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
14994 367F           8A46         12            mov	al,$12[bp]
14995                                           ! Debug: list unsigned char = al+0 (used reg = )
14996 3682           30E4                       xor	ah,ah
14997 3684           50                         push	ax
14998                                           ! Debug: func () void = biosfn_set_video_mode+0 (used reg = )
14999 3685           E8         0490            call	_biosfn_set_video_mode
15000 3688           44                         inc	sp
15001 3689           44                         inc	sp
15002                                           !BCC_EOS
15003                                           ! 1638      switch(( AX & 0x00ff )&0x7F)
15004                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15005 368A           8A46         12            mov	al,$12[bp]
15006                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
15007 368D           24                     7F  and	al,*$7F
15008                                           ! 1639       {case 6:
15009 368F           EB           24            jmp .A
15010                                           ! 1640         AX = ((AX & 0xff00) | (0x3
15011                       00003691            .B:
15012                                           ! 1640 F));
15013                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15014 3691           8B46         12            mov	ax,$12[bp]
15015 3694           30C0                       xor	al,al
15016                                           ! Debug: or int = const $3F to unsigned int = ax+0 (used reg = )
15017 3696           0C                     3F  or	al,*$3F
15018                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15019 3698           8946         12            mov	$12[bp],ax
15020                                           !BCC_EOS
15021                                           ! 1641         break;
15022 369B           EB           3D            jmp .8
15023                                           !BCC_EOS
15024                                           ! 1642        case 0:
15025                                           ! 1643        case 1:
15026                       0000369D            .C:
15027                                           ! 1644        case 2:
15028                       0000369D            .D:
15029                                           ! 1645        case 3:
15030                       0000369D            .E:
15031                                           ! 1646        case 4:
15032                       0000369D            .F:
15033                                           ! 1647        case 5:
15034                       0000369D            .10:
15035                                           ! 1648        case 7:
15036                       0000369D            .11:
15037                                           ! 1649         AX = ((AX & 0xff00) | (0x30));
15038                       0000369D            .12:
15039                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15040 369D           8B46         12            mov	ax,$12[bp]
15041 36A0           30C0                       xor	al,al
15042                                           ! Debug: or int = const $30 to unsigned int = ax+0 (used reg = )
15043 36A2           0C                     30  or	al,*$30
15044                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15045 36A4           8946         12            mov	$12[bp],ax
15046                                           !BCC_EOS
15047                                           ! 1650         break;
15048 36A7           EB           31            jmp .8
15049                                           !BCC_EOS
15050                                           ! 1651       default:
15051                                           ! 1652         AX = ((AX & 0xff00) | (0x20));
15052                       000036A9            .13:
15053                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15054 36A9           8B46         12            mov	ax,$12[bp]
15055 36AC           30C0                       xor	al,al
15056                                           ! Debug: or int = const $20 to unsigned int = ax+0 (used reg = )
15057 36AE           0C                     20  or	al,*$20
15058                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15059 36B0           8946         12            mov	$12[bp],ax
15060                                           !BCC_EOS
15061                                           ! 1653       }
15062                                           ! 1654      break;
15063 36B3           EB           25            jmp .8
15064                       000036B5            .A:
15065 36B5           2C                     00  sub	al,*0
15066 36B7           72           F0            jb 	.13
15067 36B9           3C                     07  cmp	al,*7
15068 36BB           77           1B            ja  	.14
15069 36BD           30E4                       xor	ah,ah
15070 36BF           D1E0                       shl	ax,*1
15071 36C1           89C3                       mov	bx,ax
15072 36C3           2E                         seg	cs
15073 36C4           FFA7       36C8            br	.15[bx]
15074                       000036C8            .15:
15075 36C8                      369D            .word	.C
15076 36CA                      369D            .word	.D
15077 36CC                      369D            .word	.E
15078 36CE                      369D            .word	.F
15079 36D0                      369D            .word	.10
15080 36D2                      369D            .word	.11
15081 36D4                      3691            .word	.B
15082 36D6                      369D            .word	.12
15083                       000036D8            .14:
15084 36D8           EB           CF            jmp	.13
15085                       000036DA            .8:
15086 36DA           E9         0439            br 	.4
15087                                           !BCC_EOS
15088                                           ! 1655    case 0x01:
15089                                           ! 1656      biosfn_set_cursor_shape(( CX >> 8 ),( CX & 0x00ff ));
15090                       000036DD            .16:
15091                                           ! Debug: and int = const $FF to unsigned short CX = [S+2+$E] (used reg = )
15092 36DD           8A46         10            mov	al,$10[bp]
15093                                           ! Debug: list unsigned char = al+0 (used reg = )
15094 36E0           30E4                       xor	ah,ah
15095 36E2           50                         push	ax
15096                                           ! Debug: sr int = const 8 to unsigned short CX = [S+4+$E] (used reg = )
15097 36E3           8B46         10            mov	ax,$10[bp]
15098 36E6           88E0                       mov	al,ah
15099 36E8           30E4                       xor	ah,ah
15100                                           ! Debug: list unsigned int = ax+0 (used reg = )
15101 36EA           50                         push	ax
15102                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
15103 36EB           E8         0ACB            call	_biosfn_set_cursor_shape
15104 36EE           83C4                   04  add	sp,*4
15105                                           !BCC_EOS
15106                                           ! 1657      break;
15107 36F1           E9         0422            br 	.4
15108                                           !BCC_EOS
15109                                           ! 1658    case 0x02:
15110                                           ! 1659      biosfn_set_cursor_pos(( BX >> 8 ),DX);
15111                       000036F4            .17:
15112                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15113 36F4           FF76         0E            push	$E[bp]
15114                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15115 36F7           8B46         0C            mov	ax,$C[bp]
15116 36FA           88E0                       mov	al,ah
15117 36FC           30E4                       xor	ah,ah
15118                                           ! Debug: list unsigned int = ax+0 (used reg = )
15119 36FE           50                         push	ax
15120                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
15121 36FF           E8         0BD2            call	_biosfn_set_cursor_pos
15122 3702           83C4                   04  add	sp,*4
15123                                           !BCC_EOS
15124                                           ! 1660      break;
15125 3705           E9         040E            br 	.4
15126                                           !BCC_EOS
15127                                           ! 1661    case 0x03:
15128                                           ! 1662      biosfn_get_cursor_pos(( BX >> 8 ),&CX,&DX);
15129                       00003708            .18:
15130                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15131 3708           8D5E         0E            lea	bx,$E[bp]
15132 370B           53                         push	bx
15133                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15134 370C           8D5E         10            lea	bx,$10[bp]
15135 370F           53                         push	bx
15136                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15137 3710           8B46         0C            mov	ax,$C[bp]
15138 3713           88E0                       mov	al,ah
15139 3715           30E4                       xor	ah,ah
15140                                           ! Debug: list unsigned int = ax+0 (used reg = )
15141 3717           50                         push	ax
15142                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
15143 3718           E8         0CBA            call	_biosfn_get_cursor_pos
15144 371B           83C4                   06  add	sp,*6
15145                                           !BCC_EOS
15146                                           ! 1663      break;
15147 371E           E9         03F5            br 	.4
15148                                           !BCC_EOS
15149                                           ! 1664    case 0x04:
15150                                           ! 1665      unimplemented();
15151                       00003721            .19:
15152                                           ! Debug: func () void = unimplemented+0 (used reg = )
15153 3721           E8         4646            call	_unimplemented
15154                                           !BCC_EOS
15155                                           ! 1666      AX=0x00;
15156                                           ! Debug: eq int = const 0 to unsigned short AX = [S+2+$10] (used reg = )
15157 3724           31C0                       xor	ax,ax
15158 3726           8946         12            mov	$12[bp],ax
15159                                           !BCC_EOS
15160                                           ! 1667      BX=0x00;
15161                                           ! Debug: eq int = const 0 to unsigned short BX = [S+2+$A] (used reg = )
15162 3729           31C0                       xor	ax,ax
15163 372B           8946         0C            mov	$C[bp],ax
15164                                           !BCC_EOS
15165                                           ! 1668      CX=0x00;
15166                                           ! Debug: eq int = const 0 to unsigned short CX = [S+2+$E] (used reg = )
15167 372E           31C0                       xor	ax,ax
15168 3730           8946         10            mov	$10[bp],ax
15169                                           !BCC_EOS
15170                                           ! 1669      DX=0x00;
15171                                           ! Debug: eq int = const 0 to unsigned short DX = [S+2+$C] (used reg = )
15172 3733           31C0                       xor	ax,ax
15173 3735           8946         0E            mov	$E[bp],ax
15174                                           !BCC_EOS
15175                                           ! 1670      break;
15176 3738           E9         03DB            br 	.4
15177                                           !BCC_EOS
15178                                           ! 1671    case 0x05:
15179                                           ! 1672      biosfn_set_active_page(( AX & 0x00ff ));
15180                       0000373B            .1A:
15181                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15182 373B           8A46         12            mov	al,$12[bp]
15183                                           ! Debug: list unsigned char = al+0 (used reg = )
15184 373E           30E4                       xor	ah,ah
15185 3740           50                         push	ax
15186                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
15187 3741           E8         0D06            call	_biosfn_set_active_page
15188 3744           44                         inc	sp
15189 3745           44                         inc	sp
15190                                           !BCC_EOS
15191                                           ! 1673      break;
15192 3746           E9         03CD            br 	.4
15193                                           !BCC_EOS
15194                                           ! 1674    case 0x06:
15195                                           ! 1675      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,1);
15196                       00003749            .1B:
15197                                           ! Debug: list int = const 1 (used reg = )
15198 3749           B8                   0001  mov	ax,*1
15199 374C           50                         push	ax
15200                                           ! Debug: list int = const $FF (used reg = )
15201 374D           B8                   00FF  mov	ax,#$FF
15202 3750           50                         push	ax
15203                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15204 3751           8A46         0E            mov	al,$E[bp]
15205                                           ! Debug: list unsigned char = al+0 (used reg = )
15206 3754           30E4                       xor	ah,ah
15207 3756           50                         push	ax
15208                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15209 3757           8B46         0E            mov	ax,$E[bp]
15210 375A           88E0                       mov	al,ah
15211 375C           30E4                       xor	ah,ah
15212                                           ! Debug: list unsigned int = ax+0 (used reg = )
15213 375E           50                         push	ax
15214                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15215 375F           8A46         10            mov	al,$10[bp]
15216                                           ! Debug: list unsigned char = al+0 (used reg = )
15217 3762           30E4                       xor	ah,ah
15218 3764           50                         push	ax
15219                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15220 3765           8B46         10            mov	ax,$10[bp]
15221 3768           88E0                       mov	al,ah
15222 376A           30E4                       xor	ah,ah
15223                                           ! Debug: list unsigned int = ax+0 (used reg = )
15224 376C           50                         push	ax
15225                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15226 376D           8B46         0C            mov	ax,$C[bp]
15227 3770           88E0                       mov	al,ah
15228 3772           30E4                       xor	ah,ah
15229                                           ! Debug: list unsigned int = ax+0 (used reg = )
15230 3774           50                         push	ax
15231                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15232 3775           8A46         12            mov	al,$12[bp]
15233                                           ! Debug: list unsigned char = al+0 (used reg = )
15234 3778           30E4                       xor	ah,ah
15235 377A           50                         push	ax
15236                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15237 377B           E8         1163            call	_biosfn_scroll
15238 377E           83C4                   10  add	sp,*$10
15239                                           !BCC_EOS
15240                                           ! 1676      break;
15241 3781           E9         0392            br 	.4
15242                                           !BCC_EOS
15243                                           ! 1677    case 0x07:
15244                                           ! 1678      biosfn_scroll(( AX & 0x00ff ),( BX >> 8 ),( CX >> 8 ),( CX & 0x00ff ),( DX >> 8 ),( DX & 0x00ff ),0xFF,0);
15245                       00003784            .1C:
15246                                           ! Debug: list int = const 0 (used reg = )
15247 3784           31C0                       xor	ax,ax
15248 3786           50                         push	ax
15249                                           ! Debug: list int = const $FF (used reg = )
15250 3787           B8                   00FF  mov	ax,#$FF
15251 378A           50                         push	ax
15252                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15253 378B           8A46         0E            mov	al,$E[bp]
15254                                           ! Debug: list unsigned char = al+0 (used reg = )
15255 378E           30E4                       xor	ah,ah
15256 3790           50                         push	ax
15257                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15258 3791           8B46         0E            mov	ax,$E[bp]
15259 3794           88E0                       mov	al,ah
15260 3796           30E4                       xor	ah,ah
15261                                           ! Debug: list unsigned int = ax+0 (used reg = )
15262 3798           50                         push	ax
15263                                           ! Debug: and int = const $FF to unsigned short CX = [S+$A+$E] (used reg = )
15264 3799           8A46         10            mov	al,$10[bp]
15265                                           ! Debug: list unsigned char = al+0 (used reg = )
15266 379C           30E4                       xor	ah,ah
15267 379E           50                         push	ax
15268                                           ! Debug: sr int = const 8 to unsigned short CX = [S+$C+$E] (used reg = )
15269 379F           8B46         10            mov	ax,$10[bp]
15270 37A2           88E0                       mov	al,ah
15271 37A4           30E4                       xor	ah,ah
15272                                           ! Debug: list unsigned int = ax+0 (used reg = )
15273 37A6           50                         push	ax
15274                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15275 37A7           8B46         0C            mov	ax,$C[bp]
15276 37AA           88E0                       mov	al,ah
15277 37AC           30E4                       xor	ah,ah
15278                                           ! Debug: list unsigned int = ax+0 (used reg = )
15279 37AE           50                         push	ax
15280                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15281 37AF           8A46         12            mov	al,$12[bp]
15282                                           ! Debug: list unsigned char = al+0 (used reg = )
15283 37B2           30E4                       xor	ah,ah
15284 37B4           50                         push	ax
15285                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
15286 37B5           E8         1129            call	_biosfn_scroll
15287 37B8           83C4                   10  add	sp,*$10
15288                                           !BCC_EOS
15289                                           ! 1679      break;
15290 37BB           E9         0358            br 	.4
15291                                           !BCC_EOS
15292                                           ! 1680    case 0x08:
15293                                           ! 1681      biosfn_read_char_attr(( BX >> 8 ),&AX);
15294                       000037BE            .1D:
15295                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15296 37BE           8D5E         12            lea	bx,$12[bp]
15297 37C1           53                         push	bx
15298                                           ! Debug: sr int = const 8 to unsigned short BX = [S+4+$A] (used reg = )
15299 37C2           8B46         0C            mov	ax,$C[bp]
15300 37C5           88E0                       mov	al,ah
15301 37C7           30E4                       xor	ah,ah
15302                                           ! Debug: list unsigned int = ax+0 (used reg = )
15303 37C9           50                         push	ax
15304                                           ! Debug: func () void = biosfn_read_char_attr+0 (used reg = )
15305 37CA           E8         184F            call	_biosfn_read_char_attr
15306 37CD           83C4                   04  add	sp,*4
15307                                           !BCC_EOS
15308                                           ! 1682      break;
15309 37D0           E9         0343            br 	.4
15310                                           !BCC_EOS
15311                                           ! 1683    case 0x09:
15312                                           ! 1684      biosfn_write_char_attr(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15313                       000037D3            .1E:
15314                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15315 37D3           FF76         10            push	$10[bp]
15316                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15317 37D6           8A46         0C            mov	al,$C[bp]
15318                                           ! Debug: list unsigned char = al+0 (used reg = )
15319 37D9           30E4                       xor	ah,ah
15320 37DB           50                         push	ax
15321                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15322 37DC           8B46         0C            mov	ax,$C[bp]
15323 37DF           88E0                       mov	al,ah
15324 37E1           30E4                       xor	ah,ah
15325                                           ! Debug: list unsigned int = ax+0 (used reg = )
15326 37E3           50                         push	ax
15327                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15328 37E4           8A46         12            mov	al,$12[bp]
15329                                           ! Debug: list unsigned char = al+0 (used reg = )
15330 37E7           30E4                       xor	ah,ah
15331 37E9           50                         push	ax
15332                                           ! Debug: func () void = biosfn_write_char_attr+0 (used reg = )
15333 37EA           E8         1D7D            call	_biosfn_write_char_attr
15334 37ED           83C4                   08  add	sp,*8
15335                                           !BCC_EOS
15336                                           ! 1685      break;
15337 37F0           E9         0323            br 	.4
15338                                           !BCC_EOS
15339                                           ! 1686    case 0x0A:
15340                                           ! 1687      biosfn_write_char_only(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX);
15341                       000037F3            .1F:
15342                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15343 37F3           FF76         10            push	$10[bp]
15344                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15345 37F6           8A46         0C            mov	al,$C[bp]
15346                                           ! Debug: list unsigned char = al+0 (used reg = )
15347 37F9           30E4                       xor	ah,ah
15348 37FB           50                         push	ax
15349                                           ! Debug: sr int = const 8 to unsigned short BX = [S+6+$A] (used reg = )
15350 37FC           8B46         0C            mov	ax,$C[bp]
15351 37FF           88E0                       mov	al,ah
15352 3801           30E4                       xor	ah,ah
15353                                           ! Debug: list unsigned int = ax+0 (used reg = )
15354 3803           50                         push	ax
15355                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15356 3804           8A46         12            mov	al,$12[bp]
15357                                           ! Debug: list unsigned char = al+0 (used reg = )
15358 3807           30E4                       xor	ah,ah
15359 3809           50                         push	ax
15360                                           ! Debug: func () void = biosfn_write_char_only+0 (used reg = )
15361 380A           E8         1F57            call	_biosfn_write_char_only
15362 380D           83C4                   08  add	sp,*8
15363                                           !BCC_EOS
15364                                           ! 1688      break;
15365 3810           E9         0303            br 	.4
15366                                           !BCC_EOS
15367                                           ! 1689    case 0x0C:
15368                                           ! 1690      biosfn_write_pixel(( BX >> 8 ),( AX & 0x00ff ),CX,DX);
15369                       00003813            .20:
15370                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15371 3813           FF76         0E            push	$E[bp]
15372                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15373 3816           FF76         10            push	$10[bp]
15374                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15375 3819           8A46         12            mov	al,$12[bp]
15376                                           ! Debug: list unsigned char = al+0 (used reg = )
15377 381C           30E4                       xor	ah,ah
15378 381E           50                         push	ax
15379                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15380 381F           8B46         0C            mov	ax,$C[bp]
15381 3822           88E0                       mov	al,ah
15382 3824           30E4                       xor	ah,ah
15383                                           ! Debug: list unsigned int = ax+0 (used reg = )
15384 3826           50                         push	ax
15385                                           ! Debug: func () void = biosfn_write_pixel+0 (used reg = )
15386 3827           E8         21B3            call	_biosfn_write_pixel
15387 382A           83C4                   08  add	sp,*8
15388                                           !BCC_EOS
15389                                           ! 1691      break;
15390 382D           E9         02E6            br 	.4
15391                                           !BCC_EOS
15392                                           ! 1692    case 0x0D:
15393                                           ! 1693      biosfn_read_pixel(( BX >> 8 ),CX,DX,&AX);
15394                       00003830            .21:
15395                                           ! Debug: list * unsigned short AX = S+2+$10 (used reg = )
15396 3830           8D5E         12            lea	bx,$12[bp]
15397 3833           53                         push	bx
15398                                           ! Debug: list unsigned short DX = [S+4+$C] (used reg = )
15399 3834           FF76         0E            push	$E[bp]
15400                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15401 3837           FF76         10            push	$10[bp]
15402                                           ! Debug: sr int = const 8 to unsigned short BX = [S+8+$A] (used reg = )
15403 383A           8B46         0C            mov	ax,$C[bp]
15404 383D           88E0                       mov	al,ah
15405 383F           30E4                       xor	ah,ah
15406                                           ! Debug: list unsigned int = ax+0 (used reg = )
15407 3841           50                         push	ax
15408                                           ! Debug: func () void = biosfn_read_pixel+0 (used reg = )
15409 3842           E8         243C            call	_biosfn_read_pixel
15410 3845           83C4                   08  add	sp,*8
15411                                           !BCC_EOS
15412                                           ! 1694      break;
15413 3848           E9         02CB            br 	.4
15414                                           !BCC_EOS
15415                                           ! 1695    case 0x0E:
15416                                           ! 1696      biosfn_write_teletype(( AX & 0x00ff ),0xff,( BX & 0x00ff ),2);
15417                       0000384B            .22:
15418                                           ! Debug: list int = const 2 (used reg = )
15419 384B           B8                   0002  mov	ax,*2
15420 384E           50                         push	ax
15421                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15422 384F           8A46         0C            mov	al,$C[bp]
15423                                           ! Debug: list unsigned char = al+0 (used reg = )
15424 3852           30E4                       xor	ah,ah
15425 3854           50                         push	ax
15426                                           ! Debug: list int = const $FF (used reg = )
15427 3855           B8                   00FF  mov	ax,#$FF
15428 3858           50                         push	ax
15429                                           ! Debug: and int = const $FF to unsigned short AX = [S+8+$10] (used reg = )
15430 3859           8A46         12            mov	al,$12[bp]
15431                                           ! Debug: list unsigned char = al+0 (used reg = )
15432 385C           30E4                       xor	ah,ah
15433 385E           50                         push	ax
15434                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
15435 385F           E8         262B            call	_biosfn_write_teletype
15436 3862           83C4                   08  add	sp,*8
15437                                           !BCC_EOS
15438                                           ! 1697      break;
15439 3865           E9         02AE            br 	.4
15440                                           !BCC_EOS
15441                                           ! 1698    case 0x10:
15442                                           ! 1699      biosfn_perform_gray_scale_summing(BX,CX);
15443                       00003868            .23:
15444                                           ! Debug: list unsigned short CX = [S+2+$E] (used reg = )
15445 3868           FF76         10            push	$10[bp]
15446                                           ! Debug: list unsigned short BX = [S+4+$A] (used reg = )
15447 386B           FF76         0C            push	$C[bp]
15448                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
15449 386E           E8         2C99            call	_biosfn_perform_gray_scale_summing
15450 3871           83C4                   04  add	sp,*4
15451                                           !BCC_EOS
15452                                           ! 1700      break;
15453 3874           E9         029F            br 	.4
15454                                           !BCC_EOS
15455                                           ! 1701    case 0x11:
15456                                           ! 1702      switch(( AX & 0x00ff ))
15457                       00003877            .24:
15458                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15459 3877           8A46         12            mov	al,$12[bp]
15460                                           ! 1703       {
15461 387A           E9         00E4            br 	.27
15462                                           ! 1704        case 0x00:
15463                                           ! 1705        case 0x10:
15464                       0000387D            .28:
15465                                           ! 1706         biosfn_load_text_user_pat(( AX & 0x00ff ),ES,BP,CX,DX,( BX & 0x00ff ),( BX >> 8 ));
15466                       0000387D            .29:
15467                                           ! Debug: sr int = const 8 to unsigned short BX = [S+2+$A] (used reg = )
15468 387D           8B46         0C            mov	ax,$C[bp]
15469 3880           88E0                       mov	al,ah
15470 3882           30E4                       xor	ah,ah
15471                                           ! Debug: list unsigned int = ax+0 (used reg = )
15472 3884           50                         push	ax
15473                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15474 3885           8A46         0C            mov	al,$C[bp]
15475                                           ! Debug: list unsigned char = al+0 (used reg = )
15476 3888           30E4                       xor	ah,ah
15477 388A           50                         push	ax
15478                                           ! Debug: list unsigned short DX = [S+6+$C] (used reg = )
15479 388B           FF76         0E            push	$E[bp]
15480                                           ! Debug: list unsigned short CX = [S+8+$E] (used reg = )
15481 388E           FF76         10            push	$10[bp]
15482                                           ! Debug: list unsigned short BP = [S+$A+6] (used reg = )
15483 3891           FF76         08            push	8[bp]
15484                                           ! Debug: list unsigned short ES = [S+$C+$14] (used reg = )
15485 3894           FF76         16            push	$16[bp]
15486                                           ! Debug: and int = const $FF to unsigned short AX = [S+$E+$10] (used reg = )
15487 3897           8A46         12            mov	al,$12[bp]
15488                                           ! Debug: list unsigned char = al+0 (used reg = )
15489 389A           30E4                       xor	ah,ah
15490 389C           50                         push	ax
15491                                           ! Debug: func () void = biosfn_load_text_user_pat+0 (used reg = )
15492 389D           E8         2F13            call	_biosfn_load_text_user_pat
15493 38A0           83C4                   0E  add	sp,*$E
15494                                           !BCC_EOS
15495                                           ! 1707         break;
15496 38A3           E9         011F            br 	.25
15497                                           !BCC_EOS
15498                                           ! 1708        case 0x01:
15499                                           ! 1709        case 0x11:
15500                       000038A6            .2A:
15501                                           ! 1710         biosfn_load_text_8_14_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15502                       000038A6            .2B:
15503                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15504 38A6           8A46         0C            mov	al,$C[bp]
15505                                           ! Debug: list unsigned char = al+0 (used reg = )
15506 38A9           30E4                       xor	ah,ah
15507 38AB           50                         push	ax
15508                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15509 38AC           8A46         12            mov	al,$12[bp]
15510                                           ! Debug: list unsigned char = al+0 (used reg = )
15511 38AF           30E4                       xor	ah,ah
15512 38B1           50                         push	ax
15513                                           ! Debug: func () void = biosfn_load_text_8_14_pat+0 (used reg = )
15514 38B2           E8         2F9A            call	_biosfn_load_text_8_14_pat
15515 38B5           83C4                   04  add	sp,*4
15516                                           !BCC_EOS
15517                                           ! 1711         break;
15518 38B8           E9         010A            br 	.25
15519                                           !BCC_EOS
15520                                           ! 1712        case 0x02:
15521                                           ! 1713        case 0x12:
15522                       000038BB            .2C:
15523                                           ! 1714         biosfn_load_text_8_8_pat(( AX & 0x00ff ),( BX & 0x00ff ));
15524                       000038BB            .2D:
15525                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15526 38BB           8A46         0C            mov	al,$C[bp]
15527                                           ! Debug: list unsigned char = al+0 (used reg = )
15528 38BE           30E4                       xor	ah,ah
15529 38C0           50                         push	ax
15530                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15531 38C1           8A46         12            mov	al,$12[bp]
15532                                           ! Debug: list unsigned char = al+0 (used reg = )
15533 38C4           30E4                       xor	ah,ah
15534 38C6           50                         push	ax
15535                                           ! Debug: func () void = biosfn_load_text_8_8_pat+0 (used reg = )
15536 38C7           E8         301C            call	_biosfn_load_text_8_8_pat
15537 38CA           83C4                   04  add	sp,*4
15538                                           !BCC_EOS
15539                                           ! 1715         break;
15540 38CD           E9         00F5            br 	.25
15541                                           !BCC_EOS
15542                                           ! 1716        case 0x04:
15543                                           ! 1717        case 0x14:
15544                       000038D0            .2E:
15545                                           ! 1718         biosfn_load_text_8_16_pat(( AX & 0x
15546                       000038D0            .2F:
15547                                           ! 1718 00ff ),( BX & 0x00ff ));
15548                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15549 38D0           8A46         0C            mov	al,$C[bp]
15550                                           ! Debug: list unsigned char = al+0 (used reg = )
15551 38D3           30E4                       xor	ah,ah
15552 38D5           50                         push	ax
15553                                           ! Debug: and int = const $FF to unsigned short AX = [S+4+$10] (used reg = )
15554 38D6           8A46         12            mov	al,$12[bp]
15555                                           ! Debug: list unsigned char = al+0 (used reg = )
15556 38D9           30E4                       xor	ah,ah
15557 38DB           50                         push	ax
15558                                           ! Debug: func () void = biosfn_load_text_8_16_pat+0 (used reg = )
15559 38DC           E8         30A5            call	_biosfn_load_text_8_16_pat
15560 38DF           83C4                   04  add	sp,*4
15561                                           !BCC_EOS
15562                                           ! 1719         break;
15563 38E2           E9         00E0            br 	.25
15564                                           !BCC_EOS
15565                                           ! 1720        case 0x20:
15566                                           ! 1721         biosfn_load_gfx_8_8_chars(ES,BP);
15567                       000038E5            .30:
15568                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15569 38E5           FF76         08            push	8[bp]
15570                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15571 38E8           FF76         16            push	$16[bp]
15572                                           ! Debug: func () void = biosfn_load_gfx_8_8_chars+0 (used reg = )
15573 38EB           E8         3127            call	_biosfn_load_gfx_8_8_chars
15574 38EE           83C4                   04  add	sp,*4
15575                                           !BCC_EOS
15576                                           ! 1722         break;
15577 38F1           E9         00D1            br 	.25
15578                                           !BCC_EOS
15579                                           ! 1723        case 0x21:
15580                                           ! 1724         biosfn_load_gfx_user_chars(ES,BP,CX,( BX & 0x00ff ),( DX & 0x00ff ));
15581                       000038F4            .31:
15582                                           ! Debug: and int = const $FF to unsigned short DX = [S+2+$C] (used reg = )
15583 38F4           8A46         0E            mov	al,$E[bp]
15584                                           ! Debug: list unsigned char = al+0 (used reg = )
15585 38F7           30E4                       xor	ah,ah
15586 38F9           50                         push	ax
15587                                           ! Debug: and int = const $FF to unsigned short BX = [S+4+$A] (used reg = )
15588 38FA           8A46         0C            mov	al,$C[bp]
15589                                           ! Debug: list unsigned char = al+0 (used reg = )
15590 38FD           30E4                       xor	ah,ah
15591 38FF           50                         push	ax
15592                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15593 3900           FF76         10            push	$10[bp]
15594                                           ! Debug: list unsigned short BP = [S+8+6] (used reg = )
15595 3903           FF76         08            push	8[bp]
15596                                           ! Debug: list unsigned short ES = [S+$A+$14] (used reg = )
15597 3906           FF76         16            push	$16[bp]
15598                                           ! Debug: func () void = biosfn_load_gfx_user_chars+0 (used reg = )
15599 3909           E8         3111            call	_biosfn_load_gfx_user_chars
15600 390C           83C4                   0A  add	sp,*$A
15601                                           !BCC_EOS
15602                                           ! 1725         break;
15603 390F           E9         00B3            br 	.25
15604                                           !BCC_EOS
15605                                           ! 1726        case 0x22:
15606                                           ! 1727         biosfn_load_gfx_8_14_chars(( BX & 0x00ff ));
15607                       00003912            .32:
15608                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15609 3912           8A46         0C            mov	al,$C[bp]
15610                                           ! Debug: list unsigned char = al+0 (used reg = )
15611 3915           30E4                       xor	ah,ah
15612 3917           50                         push	ax
15613                                           ! Debug: func () void = biosfn_load_gfx_8_14_chars+0 (used reg = )
15614 3918           E8         310A            call	_biosfn_load_gfx_8_14_chars
15615 391B           44                         inc	sp
15616 391C           44                         inc	sp
15617                                           !BCC_EOS
15618                                           ! 1728         break;
15619 391D           E9         00A5            br 	.25
15620                                           !BCC_EOS
15621                                           ! 1729        case 0x23:
15622                                           ! 1730         biosfn_load_gfx_8_8_dd_chars(( BX & 0x00ff ));
15623                       00003920            .33:
15624                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15625 3920           8A46         0C            mov	al,$C[bp]
15626                                           ! Debug: list unsigned char = al+0 (used reg = )
15627 3923           30E4                       xor	ah,ah
15628 3925           50                         push	ax
15629                                           ! Debug: func () void = biosfn_load_gfx_8_8_dd_chars+0 (used reg = )
15630 3926           E8         3104            call	_biosfn_load_gfx_8_8_dd_chars
15631 3929           44                         inc	sp
15632 392A           44                         inc	sp
15633                                           !BCC_EOS
15634                                           ! 1731         break;
15635 392B           E9         0097            br 	.25
15636                                           !BCC_EOS
15637                                           ! 1732        case 0x24:
15638                                           ! 1733         biosfn_load_gfx_8_16_chars(( BX & 0x00ff ));
15639                       0000392E            .34:
15640                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15641 392E           8A46         0C            mov	al,$C[bp]
15642                                           ! Debug: list unsigned char = al+0 (used reg = )
15643 3931           30E4                       xor	ah,ah
15644 3933           50                         push	ax
15645                                           ! Debug: func () void = biosfn_load_gfx_8_16_chars+0 (used reg = )
15646 3934           E8         30FE            call	_biosfn_load_gfx_8_16_chars
15647 3937           44                         inc	sp
15648 3938           44                         inc	sp
15649                                           !BCC_EOS
15650                                           ! 1734         break;
15651 3939           E9         0089            br 	.25
15652                                           !BCC_EOS
15653                                           ! 1735        case 0x30:
15654                                           ! 1736         biosfn_get_font_info(( BX >> 8 ),&ES,&BP,&CX,&DX);
15655                       0000393C            .35:
15656                                           ! Debug: list * unsigned short DX = S+2+$C (used reg = )
15657 393C           8D5E         0E            lea	bx,$E[bp]
15658 393F           53                         push	bx
15659                                           ! Debug: list * unsigned short CX = S+4+$E (used reg = )
15660 3940           8D5E         10            lea	bx,$10[bp]
15661 3943           53                         push	bx
15662                                           ! Debug: list * unsigned short BP = S+6+6 (used reg = )
15663 3944           8D5E         08            lea	bx,8[bp]
15664 3947           53                         push	bx
15665                                           ! Debug: list * unsigned short ES = S+8+$14 (used reg = )
15666 3948           8D5E         16            lea	bx,$16[bp]
15667 394B           53                         push	bx
15668                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$A+$A] (used reg = )
15669 394C           8B46         0C            mov	ax,$C[bp]
15670 394F           88E0                       mov	al,ah
15671 3951           30E4                       xor	ah,ah
15672                                           ! Debug: list unsigned int = ax+0 (used reg = )
15673 3953           50                         push	ax
15674                                           ! Debug: func () void = biosfn_get_font_info+0 (used reg = )
15675 3954           E8         30E6            call	_biosfn_get_font_info
15676 3957           83C4                   0A  add	sp,*$A
15677                                           !BCC_EOS
15678                                           ! 1737         break;
15679 395A           EB           69            jmp .25
15680                                           !BCC_EOS
15681                                           ! 1738        default:
15682                                           ! 1739         unknown();
15683                       0000395C            .36:
15684                                           ! Debug: func () void = unknown+0 (used reg = )
15685 395C           E8         4419            call	_unknown
15686                                           !BCC_EOS
15687                                           ! 1740       }
15688                                           ! 1741      break;
15689 395F           EB           64            jmp .25
15690                       00003961            .27:
15691 3961           2C                     00  sub	al,*0
15692 3963   7503    E9         FF15            beq 	.28
15693 3968           2C                     01  sub	al,*1
15694 396A   7503    E9         FF37            beq 	.2A
15695 396F           2C                     01  sub	al,*1
15696 3971   7503    E9         FF45            beq 	.2C
15697 3976           2C                     02  sub	al,*2
15698 3978   7503    E9         FF53            beq 	.2E
15699 397D           2C                     0C  sub	al,*$C
15700 397F   7503    E9         FEF9            beq 	.29
15701 3984           2C                     01  sub	al,*1
15702 3986   7503    E9         FF1B            beq 	.2B
15703 398B           2C                     01  sub	al,*1
15704 398D   7503    E9         FF29            beq 	.2D
15705 3992           2C                     02  sub	al,*2
15706 3994   7503    E9         FF37            beq 	.2F
15707 3999           2C                     0C  sub	al,*$C
15708 399B   7503    E9         FF45            beq 	.30
15709 39A0           2C                     01  sub	al,*1
15710 39A2   7503    E9         FF4D            beq 	.31
15711 39A7           2C                     01  sub	al,*1
15712 39A9   7503    E9         FF64            beq 	.32
15713 39AE           2C                     01  sub	al,*1
15714 39B0   7503    E9         FF6B            beq 	.33
15715 39B5           2C                     01  sub	al,*1
15716 39B7   7503    E9         FF72            beq 	.34
15717 39BC           2C                     0C  sub	al,*$C
15718 39BE   7503    E9         FF79            beq 	.35
15719 39C3           EB           97            jmp	.36
15720                       000039C5            .25:
15721 39C5           E9         014E            br 	.4
15722                                           !BCC_EOS
15723                                           ! 1742    case 0x12:
15724                                           ! 1743      switch(( BX & 0x00ff ))
15725                       000039C8            .37:
15726                                           ! Debug: and int = const $FF to unsigned short BX = [S+2+$A] (used reg = )
15727 39C8           8A46         0C            mov	al,$C[bp]
15728                                           ! 1744       {
15729 39CB           EB           3F            jmp .3A
15730                                           ! 1745        case 0x20:
15731                                           ! 1746         biosfn_alternate_prtsc();
15732                       000039CD            .3B:
15733                                           ! Debug: func () void = biosfn_alternate_prtsc+0 (used reg = )
15734 39CD           E8         3258            call	_biosfn_alternate_prtsc
15735                                           !BCC_EOS
15736                                           ! 1747         break;
15737 39D0           EB           48            jmp .38
15738                                           !BCC_EOS
15739                                           ! 1748        case 0x35:
15740                                           ! 1749         biosfn_switch_video_interface(( AX & 0x00ff ),ES,DX);
15741                       000039D2            .3C:
15742                                           ! Debug: list unsigned short DX = [S+2+$C] (used reg = )
15743 39D2           FF76         0E            push	$E[bp]
15744                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15745 39D5           FF76         16            push	$16[bp]
15746                                           ! Debug: and int = const $FF to unsigned short AX = [S+6+$10] (used reg = )
15747 39D8           8A46         12            mov	al,$12[bp]
15748                                           ! Debug: list unsigned char = al+0 (used reg = )
15749 39DB           30E4                       xor	ah,ah
15750 39DD           50                         push	ax
15751                                           ! Debug: func () void = biosfn_switch_video_interface+0 (used reg = )
15752 39DE           E8         3361            call	_biosfn_switch_video_interface
15753 39E1           83C4                   06  add	sp,*6
15754                                           !BCC_EOS
15755                                           ! 1750         AX = ((AX & 0xff00) | (0x12));
15756                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15757 39E4           8B46         12            mov	ax,$12[bp]
15758 39E7           30C0                       xor	al,al
15759                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15760 39E9           0C                     12  or	al,*$12
15761                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15762 39EB           8946         12            mov	$12[bp],ax
15763                                           !BCC_EOS
15764                                           ! 1751         break;
15765 39EE           EB           2A            jmp .38
15766                                           !BCC_EOS
15767                                           ! 1752        case 0x36:
15768                                           ! 1753         biosfn_enable_video_refresh_control(( AX & 0x00ff ));
15769                       000039F0            .3D:
15770                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15771 39F0           8A46         12            mov	al,$12[bp]
15772                                           ! Debug: list unsigned char = al+0 (used reg = )
15773 39F3           30E4                       xor	ah,ah
15774 39F5           50                         push	ax
15775                                           ! Debug: func () void = biosfn_enable_video_refresh_control+0 (used reg = )
15776 39F6           E8         3351            call	_biosfn_enable_video_refresh_control
15777 39F9           44                         inc	sp
15778 39FA           44                         inc	sp
15779                                           !BCC_EOS
15780                                           ! 1754         AX = ((AX & 0xff00) | (0x12));
15781                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15782 39FB           8B46         12            mov	ax,$12[bp]
15783 39FE           30C0                       xor	al,al
15784                                           ! Debug: or int = const $12 to unsigned int = ax+0 (used reg = )
15785 3A00           0C                     12  or	al,*$12
15786                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15787 3A02           8946         12            mov	$12[bp],ax
15788                                           !BCC_EOS
15789                                           ! 1755         break;
15790 3A05           EB           13            jmp .38
15791                                           !BCC_EOS
15792                                           ! 1756        default:
15793                                           ! 1757         unknown();
15794                       00003A07            .3E:
15795                                           ! Debug: func () void = unknown+0 (used reg = )
15796 3A07           E8         436E            call	_unknown
15797                                           !BCC_EOS
15798                                           ! 1758       }
15799                                           ! 1759      break;
15800 3A0A           EB           0E            jmp .38
15801                       00003A0C            .3A:
15802 3A0C           2C                     20  sub	al,*$20
15803 3A0E           74           BD            je 	.3B
15804 3A10           2C                     15  sub	al,*$15
15805 3A12           74           BE            je 	.3C
15806 3A14           2C                     01  sub	al,*1
15807 3A16           74           D8            je 	.3D
15808 3A18           EB           ED            jmp	.3E
15809                       00003A1A            .38:
15810 3A1A           E9         00F9            br 	.4
15811                                           !BCC_EOS
15812                                           ! 1760    case 0x13:
15813                                           ! 1761      biosfn_write_string(( AX & 0x00ff ),( BX >> 8 ),( BX & 0x00ff ),CX,( DX >> 8 ),( DX & 0x00ff ),ES,BP);
15814                       00003A1D            .3F:
15815                                           ! Debug: list unsigned short BP = [S+2+6] (used reg = )
15816 3A1D           FF76         08            push	8[bp]
15817                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15818 3A20           FF76         16            push	$16[bp]
15819                                           ! Debug: and int = const $FF to unsigned short DX = [S+6+$C] (used reg = )
15820 3A23           8A46         0E            mov	al,$E[bp]
15821                                           ! Debug: list unsigned char = al+0 (used reg = )
15822 3A26           30E4                       xor	ah,ah
15823 3A28           50                         push	ax
15824                                           ! Debug: sr int = const 8 to unsigned short DX = [S+8+$C] (used reg = )
15825 3A29           8B46         0E            mov	ax,$E[bp]
15826 3A2C           88E0                       mov	al,ah
15827 3A2E           30E4                       xor	ah,ah
15828                                           ! Debug: list unsigned int = ax+0 (used reg = )
15829 3A30           50                         push	ax
15830                                           ! Debug: list unsigned short CX = [S+$A+$E] (used reg = )
15831 3A31           FF76         10            push	$10[bp]
15832                                           ! Debug: and int = const $FF to unsigned short BX = [S+$C+$A] (used reg = )
15833 3A34           8A46         0C            mov	al,$C[bp]
15834                                           ! Debug: list unsigned char = al+0 (used reg = )
15835 3A37           30E4                       xor	ah,ah
15836 3A39           50                         push	ax
15837                                           ! Debug: sr int = const 8 to unsigned short BX = [S+$E+$A] (used reg = )
15838 3A3A           8B46         0C            mov	ax,$C[bp]
15839 3A3D           88E0                       mov	al,ah
15840 3A3F           30E4                       xor	ah,ah
15841                                           ! Debug: list unsigned int = ax+0 (used reg = )
15842 3A41           50                         push	ax
15843                                           ! Debug: and int = const $FF to unsigned short AX = [S+$10+$10] (used reg = )
15844 3A42           8A46         12            mov	al,$12[bp]
15845                                           ! Debug: list unsigned char = al+0 (used reg = )
15846 3A45           30E4                       xor	ah,ah
15847 3A47           50                         push	ax
15848                                           ! Debug: func () void = biosfn_write_string+0 (used reg = )
15849 3A48           E8         3307            call	_biosfn_write_string
15850 3A4B           83C4                   10  add	sp,*$10
15851                                           !BCC_EOS
15852                                           ! 1762      break;
15853 3A4E           E9         00C5            br 	.4
15854                                           !BCC_EOS
15855                                           ! 1763    case 0x1B:
15856                                           ! 1764      biosfn_read_state_info(BX,ES,DI);
15857                       00003A51            .40:
15858                                           ! Debug: list unsigned short DI = [S+2+2] (used reg = )
15859 3A51           FF76         04            push	4[bp]
15860                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15861 3A54           FF76         16            push	$16[bp]
15862                                           ! Debug: list unsigned short BX = [S+6+$A] (used reg = )
15863 3A57           FF76         0C            push	$C[bp]
15864                                           ! Debug: func () void = biosfn_read_state_info+0 (used reg = )
15865 3A5A           E8         3441            call	_biosfn_read_state_info
15866 3A5D           83C4                   06  add	sp,*6
15867                                           !BCC_EOS
15868                                           ! 1765      AX = ((AX & 0xff00) | (0x1B));
15869                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15870 3A60           8B46         12            mov	ax,$12[bp]
15871 3A63           30C0                       xor	al,al
15872                                           ! Debug: or int = const $1B to unsigned int = ax+0 (used reg = )
15873 3A65           0C                     1B  or	al,*$1B
15874                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15875 3A67           8946         12            mov	$12[bp],ax
15876                                           !BCC_EOS
15877                                           ! 1766      break;
15878 3A6A           E9         00A9            br 	.4
15879                                           !BCC_EOS
15880                                           ! 1767    case 0x1C:
15881                                           ! 1768      switch(( AX & 0x00ff ))
15882                       00003A6D            .41:
15883                                           ! Debug: and int = const $FF to unsigned short AX = [S+2+$10] (used reg = )
15884 3A6D           8A46         12            mov	al,$12[bp]
15885                                           ! 1769       {
15886 3A70           EB           36            jmp .44
15887                                           ! 1770        case 0x00:
15888                                           ! 1771         biosfn_read_video_state_size(CX,&BX);
15889                       00003A72            .45:
15890                                           ! Debug: list * unsigned short BX = S+2+$A (used reg = )
15891 3A72           8D5E         0C            lea	bx,$C[bp]
15892 3A75           53                         push	bx
15893                                           ! Debug: list unsigned short CX = [S+4+$E] (used reg = )
15894 3A76           FF76         10            push	$10[bp]
15895                                           ! Debug: func () void = biosfn_read_video_state_size+0 (used reg = )
15896 3A79           E8         35A1            call	_biosfn_read_video_state_size
15897 3A7C           83C4                   04  add	sp,*4
15898                                           !BCC_EOS
15899                                           ! 1772         break;
15900 3A7F           EB           35            jmp .42
15901                                           !BCC_EOS
15902                                           ! 1773        case 0x01:
15903                                           ! 1774         biosfn_save_video_state(CX,ES,BX);
15904                       00003A81            .46:
15905                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15906 3A81           FF76         0C            push	$C[bp]
15907                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15908 3A84           FF76         16            push	$16[bp]
15909                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15910 3A87           FF76         10            push	$10[bp]
15911                                           ! Debug: func () unsigned short = biosfn_save_video_state+0 (used reg = )
15912 3A8A           E8         35B4            call	_biosfn_save_video_state
15913 3A8D           83C4                   06  add	sp,*6
15914                                           !BCC_EOS
15915                                           ! 1775         break;
15916 3A90           EB           24            jmp .42
15917                                           !BCC_EOS
15918                                           ! 1776        case 0x02:
15919                                           ! 1777         biosfn_restore_video_state(CX,ES,BX);
15920                       00003A92            .47:
15921                                           ! Debug: list unsigned short BX = [S+2+$A] (used reg = )
15922 3A92           FF76         0C            push	$C[bp]
15923                                           ! Debug: list unsigned short ES = [S+4+$14] (used reg = )
15924 3A95           FF76         16            push	$16[bp]
15925                                           ! Debug: list unsigned short CX = [S+6+$E] (used reg = )
15926 3A98           FF76         10            push	$10[bp]
15927                                           ! Debug: func () unsigned short = biosfn_restore_video_state+0 (used reg = )
15928 3A9B           E8         3B70            call	_biosfn_restore_video_state
15929 3A9E           83C4                   06  add	sp,*6
15930                                           !BCC_EOS
15931                                           ! 1778         break;
15932 3AA1           EB           13            jmp .42
15933                                           !BCC_EOS
15934                                           ! 1779        default:
15935                                           ! 1780         unknown();
15936                       00003AA3            .48:
15937                                           ! Debug: func () void = unknown+0 (used reg = )
15938 3AA3           E8         42D2            call	_unknown
15939                                           !BCC_EOS
15940                                           ! 1781       }
15941                                           ! 1782      AX = ((AX & 0xff00) | (0x1C));
15942 3AA6           EB           0E            jmp .42
15943                       00003AA8            .44:
15944 3AA8           2C                     00  sub	al,*0
15945 3AAA           74           C6            je 	.45
15946 3AAC           2C                     01  sub	al,*1
15947 3AAE           74           D1            je 	.46
15948 3AB0           2C                     01  sub	al,*1
15949 3AB2           74           DE            je 	.47
15950 3AB4           EB           ED            jmp	.48
15951                       00003AB6            .42:
15952                                           ! Debug: and unsigned int = const $FF00 to unsigned short AX = [S+2+$10] (used reg = )
15953 3AB6           8B46         12            mov	ax,$12[bp]
15954 3AB9           30C0                       xor	al,al
15955                                           ! Debug: or int = const $1C to unsigned int = ax+0 (used reg = )
15956 3ABB           0C                     1C  or	al,*$1C
15957                                           ! Debug: eq unsigned int = ax+0 to unsigned short AX = [S+2+$10] (used reg = )
15958 3ABD           8946         12            mov	$12[bp],ax
15959                                           !BCC_EOS
15960                                           ! 1783      break;
15961 3AC0           EB           54            jmp .4
15962                                           !BCC_EOS
15963                                           ! 1784    default:
15964                                           ! 1785      unknown();
15965                       00003AC2            .49:
15966                                           ! Debug: func () void = unknown+0 (used reg = )
15967 3AC2           E8         42B3            call	_unknown
15968                                           !BCC_EOS
15969                                           ! 1786   }
15970                                           ! 1787 }
15971 3AC5           EB           4F            jmp .4
15972                       00003AC7            .6:
15973 3AC7           2D                   0000  sub	ax,*0
15974 3ACA           7C           F6            jl 	.49
15975 3ACC           3D                   001C  cmp	ax,*$1C
15976 3ACF           77           43            ja  	.4A
15977 3AD1           D1E0                       shl	ax,*1
15978 3AD3           89C3                       mov	bx,ax
15979 3AD5           2E                         seg	cs
15980 3AD6           FFA7       3ADA            br	.4B[bx]
15981                       00003ADA            .4B:
15982 3ADA                      367F            .word	.7
15983 3ADC                      36DD            .word	.16
15984 3ADE                      36F4            .word	.17
15985 3AE0                      3708            .word	.18
15986 3AE2                      3721            .word	.19
15987 3AE4                      373B            .word	.1A
15988 3AE6                      3749            .word	.1B
15989 3AE8                      3784            .word	.1C
15990 3AEA                      37BE            .word	.1D
15991 3AEC                      37D3            .word	.1E
15992 3AEE                      37F3            .word	.1F
15993 3AF0                      3AC2            .word	.49
15994 3AF2                      3813            .word	.20
15995 3AF4                      3830            .word	.21
15996 3AF6                      384B            .word	.22
15997 3AF8                      3AC2            .word	.49
15998 3AFA                      3868            .word	.23
15999 3AFC                      3877            .word	.24
16000 3AFE                      39C8            .word	.37
16001 3B00                      3A1D            .word	.3F
16002 3B02                      3AC2            .word	.49
16003 3B04                      3AC2            .word	.49
16004 3B06                      3AC2            .word	.49
16005 3B08                      3AC2            .word	.49
16006 3B0A                      3AC2            .word	.49
16007 3B0C                      3AC2            .word	.49
16008 3B0E                      3AC2            .word	.49
16009 3B10                      3A51            .word	.40
16010 3B12                      3A6D            .word	.41
16011                       00003B14            .4A:
16012 3B14           EB           AC            jmp	.49
16013                       00003B16            .4:
16014                       FFFFFFFE            ..FFFF	=	-2
16015 3B16           5D                         pop	bp
16016 3B17           C3                         ret
16017                                           ! 1788 static void biosfn_set_video_mode(mode) Bit8u mode;
16018                                           ! Register BX used in function int10_func
16019                       00003B18            _biosfn_set_video_mode:
16020                                           !BCC_EOS
16021                                           ! 1789 {
16022                                           ! 1790  Bit8u noclearmem=mode&0x80;
16023 3B18           55                         push	bp
16024 3B19           89E5                       mov	bp,sp
16025 3B1B           4C                         dec	sp
16026                                           ! Debug: and int = const $80 to unsigned char mode = [S+3+2] (used reg = )
16027 3B1C           8A46         04            mov	al,4[bp]
16028 3B1F           24                     80  and	al,#$80
16029                                           ! Debug: eq unsigned char = al+0 to unsigned char noclearmem = [S+3-3] (used reg = )
16030 3B21           8846         FF            mov	-1[bp],al
16031                                           !BCC_EOS
16032                                           ! 1791  Bit8u line,mmask,*palette,vpti;
16033                                           !BCC_EOS
16034                                           ! 1792  Bit16u i,twidth,theightm1,cheight;
16035                                           !BCC_EOS
16036                                           ! 1793  Bit8u modeset_ctl,video_ctl,vga_switches;
16037                                           !BCC_EOS
16038                                           ! 1794  Bit16u crtc_addr;
16039                                           !BCC_EOS
16040                                           ! 1795  mode=mode&0x7f;
16041 3B24           83C4                   EB  add	sp,*-$15
16042                                           ! Debug: and int = const $7F to unsigned char mode = [S+$18+2] (used reg = )
16043 3B27           8A46         04            mov	al,4[bp]
16044 3B2A           24                     7F  and	al,*$7F
16045                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$18+2] (used reg = )
16046 3B2C           8846         04            mov	4[bp],al
16047                                           !BCC_EOS
16048                                           ! 1796  line=find_vga_entry(mode);
16049                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16050 3B2F           8A46         04            mov	al,4[bp]
16051 3B32           30E4                       xor	ah,ah
16052 3B34           50                         push	ax
16053                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
16054 3B35           E8         40B7            call	_find_vga_entry
16055 3B38           44                         inc	sp
16056 3B39           44                         inc	sp
16057                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$18-4] (used reg = )
16058 3B3A           8846         FE            mov	-2[bp],al
16059                                           !BCC_EOS
16060                                           ! 1797  printf("mode search %02x found line %02x\n",mode,line);
16061                                           ! Debug: list unsigned char line = [S+$18-4] (used reg = )
16062 3B3D           8A46         FE            mov	al,-2[bp]
16063 3B40           30E4                       xor	ah,ah
16064 3B42           50                         push	ax
16065                                           ! Debug: list unsigned char mode = [S+$1A+2] (used reg = )
16066 3B43           8A46         04            mov	al,4[bp]
16067 3B46           30E4                       xor	ah,ah
16068 3B48           50                         push	ax
16069                                           ! Debug: list * char = .4C+0 (used reg = )
16070 3B49           BB                   7F88  mov	bx,#.4C
16071 3B4C           53                         push	bx
16072                                           ! Debug: func () void = printf+0 (used reg = )
16073 3B4D           E8         4236            call	_printf
16074 3B50           83C4                   06  add	sp,*6
16075                                           !BCC_EOS
16076                                           ! 1798  if(line==0xF
16077                                           ! 1798 F)
16078                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$18-4] (used reg = )
16079 3B53           8A46         FE            mov	al,-2[bp]
16080 3B56           3C                     FF  cmp	al,#$FF
16081 3B58           75           04            jne 	.4D
16082                       00003B5A            .4E:
16083                                           ! 1799   return;
16084 3B5A           89EC                       mov	sp,bp
16085 3B5C           5D                         pop	bp
16086 3B5D           C3                         ret
16087                                           !BCC_EOS
16088                                           ! 1800  vpti=line_to_vpti[line];
16089                       00003B5E            .4D:
16090                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
16091 3B5E           8A46         FE            mov	al,-2[bp]
16092 3B61           30E4                       xor	ah,ah
16093 3B63           89C3                       mov	bx,ax
16094                                           ! Debug: eq unsigned char = [bx+_line_to_vpti+0] to unsigned char vpti = [S+$18-9] (used reg = )
16095 3B65           8A87       0262            mov	al,_line_to_vpti[bx]
16096 3B69           8846         F9            mov	-7[bp],al
16097                                           !BCC_EOS
16098                                           ! 1801  twidth=video_param_table[vpti].twidth;
16099                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16100 3B6C           8A46         F9            mov	al,-7[bp]
16101 3B6F           30E4                       xor	ah,ah
16102 3B71           B1                     06  mov	cl,*6
16103 3B73           D3E0                       shl	ax,cl
16104 3B75           89C3                       mov	bx,ax
16105                                           ! Debug: eq unsigned char = [bx+_video_param_table+0] to unsigned short twidth = [S+$18-$E] (used reg = )
16106 3B77           8A87       0276            mov	al,_video_param_table[bx]
16107 3B7B           30E4                       xor	ah,ah
16108 3B7D           8946         F4            mov	-$C[bp],ax
16109                                           !BCC_EOS
16110                                           ! 1802  theightm1=video_param_table[vpti].theightm1;
16111                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16112 3B80           8A46         F9            mov	al,-7[bp]
16113 3B83           30E4                       xor	ah,ah
16114 3B85           B1                     06  mov	cl,*6
16115 3B87           D3E0                       shl	ax,cl
16116 3B89           89C3                       mov	bx,ax
16117 3B8B           81C3                 0276  add	bx,#_video_param_table
16118                                           ! Debug: eq unsigned char = [bx+1] to unsigned short theightm1 = [S+$18-$10] (used reg = )
16119 3B8F           8A47         01            mov	al,1[bx]
16120 3B92           30E4                       xor	ah,ah
16121 3B94           8946         F2            mov	-$E[bp],ax
16122                                           !BCC_EOS
16123                                           ! 1803  cheight=video_param_table[vpti].cheight;
16124                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16125 3B97           8A46         F9            mov	al,-7[bp]
16126 3B9A           30E4                       xor	ah,ah
16127 3B9C           B1                     06  mov	cl,*6
16128 3B9E           D3E0                       shl	ax,cl
16129 3BA0           89C3                       mov	bx,ax
16130 3BA2           81C3                 0276  add	bx,#_video_param_table
16131                                           ! Debug: eq unsigned char = [bx+2] to unsigned short cheight = [S+$18-$12] (used reg = )
16132 3BA6           8A47         02            mov	al,2[bx]
16133 3BA9           30E4                       xor	ah,ah
16134 3BAB           8946         F0            mov	-$10[bp],ax
16135                                           !BCC_EOS
16136                                           ! 1804  video_ctl=read_byte(0x40,0x87);
16137                                           ! Debug: list int = const $87 (used reg = )
16138 3BAE           B8                   0087  mov	ax,#$87
16139 3BB1           50                         push	ax
16140                                           ! Debug: list int = const $40 (used reg = )
16141 3BB2           B8                   0040  mov	ax,*$40
16142 3BB5           50                         push	ax
16143                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16144 3BB6           E8         4122            call	_read_byte
16145 3BB9           83C4                   04  add	sp,*4
16146                                           ! Debug: eq unsigned char = al+0 to unsigned char video_ctl = [S+$18-$14] (used reg = )
16147 3BBC           8846         EE            mov	-$12[bp],al
16148                                           !BCC_EOS
16149                                           ! 1805  vga_switches=read_byte(0x40,0x88);
16150                                           ! Debug: list int = const $88 (used reg = )
16151 3BBF           B8                   0088  mov	ax,#$88
16152 3BC2           50                         push	ax
16153                                           ! Debug: list int = const $40 (used reg = )
16154 3BC3           B8                   0040  mov	ax,*$40
16155 3BC6           50                         push	ax
16156                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16157 3BC7           E8         4111            call	_read_byte
16158 3BCA           83C4                   04  add	sp,*4
16159                                           ! Debug: eq unsigned char = al+0 to unsigned char vga_switches = [S+$18-$15] (used reg = )
16160 3BCD           8846         ED            mov	-$13[bp],al
16161                                           !BCC_EOS
16162                                           ! 1806  modeset_ctl=read_byte(0x40,0x89);
16163                                           ! Debug: list int = const $89 (used reg = )
16164 3BD0           B8                   0089  mov	ax,#$89
16165 3BD3           50                         push	ax
16166                                           ! Debug: list int = const $40 (used reg = )
16167 3BD4           B8                   0040  mov	ax,*$40
16168 3BD7           50                         push	ax
16169                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
16170 3BD8           E8         4100            call	_read_byte
16171 3BDB           83C4                   04  add	sp,*4
16172                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16173 3BDE           8846         EF            mov	-$11[bp],al
16174                                           !BCC_EOS
16175                                           ! 1807  if((modeset_ctl&0x08)==0)
16176                                           ! Debug: and int = const 8 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16177 3BE1           8A46         EF            mov	al,-$11[bp]
16178 3BE4           24                     08  and	al,*8
16179                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
16180 3BE6           84C0                       test	al,al
16181 3BE8   7403    E9         0146            bne 	.4F
16182                       00003BED            .50:
16183                                           ! 1808   {
16184                                           ! 1809    outb(0x3c6,vga_modes[line].pelmask);
16185                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16186 3BED           8A46         FE            mov	al,-2[bp]
16187 3BF0           30E4                       xor	ah,ah
16188 3BF2           B1                     03  mov	cl,*3
16189 3BF4           D3E0                       shl	ax,cl
16190 3BF6           89C3                       mov	bx,ax
16191 3BF8           81C3                 01E2  add	bx,#_vga_modes
16192                                           ! Debug: list unsigned char = [bx+6] (used reg = )
16193 3BFC           8A47         06            mov	al,6[bx]
16194 3BFF           30E4                       xor	ah,ah
16195 3C01           50                         push	ax
16196                                           ! Debug: list int = const $3C6 (used reg = )
16197 3C02           B8                   03C6  mov	ax,#$3C6
16198 3C05           50                         push	ax
16199                                           ! Debug: func () void = outb+0 (used reg = )
16200 3C06           E8         413E            call	_outb
16201 3C09           83C4                   04  add	sp,*4
16202                                           !BCC_EOS
16203                                           ! 1810    outb(0x3c8,0x00);
16204                                           ! Debug: list int = const 0 (used reg = )
16205 3C0C           31C0                       xor	ax,ax
16206 3C0E           50                         push	ax
16207                                           ! Debug: list int = const $3C8 (used reg = )
16208 3C0F           B8                   03C8  mov	ax,#$3C8
16209 3C12           50                         push	ax
16210                                           ! Debug: func () void = outb+0 (used reg = )
16211 3C13           E8         4131            call	_outb
16212 3C16           83C4                   04  add	sp,*4
16213                                           !BCC_EOS
16214                                           ! 1811    switch(vga_modes[line].dacmodel)
16215                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16216 3C19           8A46         FE            mov	al,-2[bp]
16217 3C1C           30E4                       xor	ah,ah
16218 3C1E           B1                     03  mov	cl,*3
16219 3C20           D3E0                       shl	ax,cl
16220 3C22           89C3                       mov	bx,ax
16221 3C24           81C3                 01E2  add	bx,#_vga_modes
16222 3C28           8A47         07            mov	al,7[bx]
16223                                           ! 1812     {case 0:
16224 3C2B           EB           22            jmp .53
16225                                           ! 1813       palette=&palette0;
16226                       00003C2D            .54:
16227                                           ! Debug: eq * [$40] [3] unsigned char = palette0+0 to * unsigned char palette = [S+$18-8] (used reg = )
16228 3C2D           BB                   09F6  mov	bx,#_palette0
16229 3C30           895E         FA            mov	-6[bp],bx
16230                                           !BCC_EOS
16231                                           ! 1814       break;
16232 3C33           EB           2A            jmp .51
16233                                           !BCC_EOS
16234                                           ! 1815      case 1:
16235                                           ! 1816       palette=&palette1;
16236                       00003C35            .55:
16237                                           ! Debug: eq * [$40] [3] unsigned char = palette1+0 to * unsigned char palette = [S+$18-8] (used reg = )
16238 3C35           BB                   0AB6  mov	bx,#_palette1
16239 3C38           895E         FA            mov	-6[bp],bx
16240                                           !BCC_EOS
16241                                           ! 1817       break;
16242 3C3B           EB           22            jmp .51
16243                                           !BCC_EOS
16244                                           ! 1818      case 2:
16245                                           ! 1819       palette=&palette2;
16246                       00003C3D            .56:
16247                                           ! Debug: eq * [$40] [3] unsigned char = palette2+0 to * unsigned char palette = [S+$18-8] (used reg = )
16248 3C3D           BB                   0B76  mov	bx,#_palette2
16249 3C40           895E         FA            mov	-6[bp],bx
16250                                           !BCC_EOS
16251                                           ! 1820       break;
16252 3C43           EB           1A            jmp .51
16253                                           !BCC_EOS
16254                                           ! 1821      case 3:
16255                                           ! 1822       palette=&palette3;
16256                       00003C45            .57:
16257                                           ! Debug: eq * [$100] [3] unsigned char = palette3+0 to * unsigned char palette = [S+$18-8] (used reg = )
16258 3C45           BB                   0C36  mov	bx,#_palette3
16259 3C48           895E         FA            mov	-6[bp],bx
16260                                           !BCC_EOS
16261                                           ! 1823       break;
16262 3C4B           EB           12            jmp .51
16263                                           !BCC_EOS
16264                                           ! 1824     }
16265                                           ! 1825    for(i=0;i<0x0100;i++)
16266 3C4D           EB           10            jmp .51
16267                       00003C4F            .53:
16268 3C4F           2C                     00  sub	al,*0
16269 3C51           74           DA            je 	.54
16270 3C53           2C                     01  sub	al,*1
16271 3C55           74           DE            je 	.55
16272 3C57           2C                     01  sub	al,*1
16273 3C59           74           E2            je 	.56
16274 3C5B           2C                     01  sub	al,*1
16275 3C5D           74           E6            je 	.57
16276                       00003C5F            .51:
16277                       FFFFFFE8            ..FFFE	=	-$18
16278                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16279 3C5F           31C0                       xor	ax,ax
16280 3C61           8946         F6            mov	-$A[bp],ax
16281                                           !BCC_EOS
16282                                           !BCC_EOS
16283                                           ! 1826     {if(i<=dac_regs[vga_modes[line].dacmodel])
16284 3C64           E9         00AB            br 	.5A
16285                       00003C67            .5B:
16286                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16287 3C67           8A46         FE            mov	al,-2[bp]
16288 3C6A           30E4                       xor	ah,ah
16289 3C6C           B1                     03  mov	cl,*3
16290 3C6E           D3E0                       shl	ax,cl
16291 3C70           89C3                       mov	bx,ax
16292 3C72           81C3                 01E2  add	bx,#_vga_modes
16293                                           ! Debug: ptradd unsigned char = [bx+7] to [4] unsigned char = dac_regs+0 (used reg = )
16294 3C76           8A47         07            mov	al,7[bx]
16295 3C79           30E4                       xor	ah,ah
16296 3C7B           89C3                       mov	bx,ax
16297                                           ! Debug: le unsigned char = [bx+_dac_regs+0] to unsigned short i = [S+$18-$C] (used reg = )
16298 3C7D           8A87       0272            mov	al,_dac_regs[bx]
16299 3C81           30E4                       xor	ah,ah
16300 3C83           3B46         F6            cmp	ax,-$A[bp]
16301 3C86           72           5C            jb  	.5C
16302                       00003C88            .5D:
16303                                           ! 1827       {outb(0x3c9,palette[(i*3)+0]);
16304                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16305 3C88           8B46         F6            mov	ax,-$A[bp]
16306 3C8B           89C2                       mov	dx,ax
16307 3C8D           D1E0                       shl	ax,*1
16308 3C8F           01D0                       add	ax,dx
16309                                           ! Debug: add int = const 0 to unsigned int = ax+0 (used reg = )
16310                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char palette = [S+$18-8] (used reg = )
16311 3C91           0346         FA            add	ax,-6[bp]
16312 3C94           89C3                       mov	bx,ax
16313                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16314 3C96           8A07                       mov	al,[bx]
16315 3C98           30E4                       xor	ah,ah
16316 3C9A           50                         push	ax
16317                                           ! Debug: list int = const $3C9 (used reg = )
16318 3C9B           B8                   03C9  mov	ax,#$3C9
16319 3C9E           50                         push	ax
16320                                           ! Debug: func () void = outb+0 (used reg = )
16321 3C9F           E8         40A5            call	_outb
16322 3CA2           83C4                   04  add	sp,*4
16323                                           !BCC_EOS
16324                                           ! 1828        outb(0x3c9,palette[(i*3)+1]);
16325                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16326 3CA5           8B46         F6            mov	ax,-$A[bp]
16327 3CA8           89C2                       mov	dx,ax
16328 3CAA           D1E0                       shl	ax,*1
16329 3CAC           01D0                       add	ax,dx
16330                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
16331                                           ! Debug: ptradd unsigned int = ax+1 to * unsigned char palette = [S+$18-8] (used reg = )
16332 3CAE           40                         inc	ax
16333 3CAF           0346         FA            add	ax,-6[bp]
16334 3CB2           89C3                       mov	bx,ax
16335                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16336 3CB4           8A07                       mov	al,[bx]
16337 3CB6           30E4                       xor	ah,ah
16338 3CB8           50                         push	ax
16339                                           ! Debug: list int = const $3C9 (used reg = )
16340 3CB9           B8                   03C9  mov	ax,#$3C9
16341 3CBC           50                         push	ax
16342                                           ! Debug: func () void = outb+0 (used reg = )
16343 3CBD           E8         4087            call	_outb
16344 3CC0           83C4                   04  add	sp,*4
16345                                           !BCC_EOS
16346                                           ! 1829        outb(0x3c9,palette[(i*3)+2]);
16347                                           ! Debug: mul int = const 3 to unsigned short i = [S+$18-$C] (used reg = )
16348 3CC3           8B46         F6            mov	ax,-$A[bp]
16349 3CC6           89C2                       mov	dx,ax
16350 3CC8           D1E0                       shl	ax,*1
16351 3CCA           01D0                       add	ax,dx
16352                                           ! Debug: add int = const 2 to unsigned int = ax+0 (used reg = )
16353                                           ! Debug: ptradd unsigned int = ax+2 to * unsigned char palette = [S+$18-8] (used reg = )
16354 3CCC           40                         inc	ax
16355 3CCD           40                         inc	ax
16356 3CCE           0346         FA            add	ax,-6[bp]
16357 3CD1           89C3                       mov	bx,ax
16358                                           ! Debug: list unsigned char = [bx+0] (used reg = )
16359 3CD3           8A07                       mov	al,[bx]
16360 3CD5           30E4                       xor	ah,ah
16361 3CD7           50                         push	ax
16362                                           ! Debug: list int = const $3C9 (used reg = )
16363 3CD8           B8                   03C9  mov	ax,#$3C9
16364 3CDB           50                         push	ax
16365                                           ! Debug: func () void = outb+0 (used reg = )
16366 3CDC           E8         4068            call	_outb
16367 3CDF           83C4                   04  add	sp,*4
16368                                           !BCC_EOS
16369                                           ! 1830       }
16370                                           ! 1831      else
16371                                           ! 1832       {outb(0x3c9,0);
16372 3CE2           EB           27            jmp .5E
16373                       00003CE4            .5C:
16374                                           ! Debug: list int = const 0 (used reg = )
16375 3CE4           31C0                       xor	ax,ax
16376 3CE6           50                         push	ax
16377                                           ! Debug: list int = const $3C9 (used reg = )
16378 3CE7           B8                   03C9  mov	ax,#$3C9
16379 3CEA           50                         push	ax
16380                                           ! Debug: func () void = outb+0 (used reg = )
16381 3CEB           E8         4059            call	_outb
16382 3CEE           83C4                   04  add	sp,*4
16383                                           !BCC_EOS
16384                                           ! 1833        outb(0x3c9,0);
16385                                           ! Debug: list int = const 0 (used reg = )
16386 3CF1           31C0                       xor	ax,ax
16387 3CF3           50                         push	ax
16388                                           ! Debug: list int = const $3C9 (used reg = )
16389 3CF4           B8                   03C9  mov	ax,#$3C9
16390 3CF7           50                         push	ax
16391                                           ! Debug: func () void = outb+0 (used reg = )
16392 3CF8           E8         404C            call	_outb
16393 3CFB           83C4                   04  add	sp,*4
16394                                           !BCC_EOS
16395                                           ! 1834        outb(0x3c9,0);
16396                                           ! Debug: list int = const 0 (used reg = )
16397 3CFE           31C0                       xor	ax,ax
16398 3D00           50                         push	ax
16399                                           ! Debug: list int = const $3C9 (used reg = )
16400 3D01           B8                   03C9  mov	ax,#$3C9
16401 3D04           50                         push	ax
16402                                           ! Debug: func () void = outb+0 (used reg = )
16403 3D05           E8         403F            call	_outb
16404 3D08           83C4                   04  add	sp,*4
16405                                           !BCC_EOS
16406                                           ! 1835       }
16407                                           ! 1836     }
16408                       00003D0B            .5E:
16409                                           ! 1837    if((modeset_ctl&0x02)==0x02)
16410                       00003D0B            .59:
16411                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16412 3D0B           8B46         F6            mov	ax,-$A[bp]
16413 3D0E           40                         inc	ax
16414 3D0F           8946         F6            mov	-$A[bp],ax
16415                       00003D12            .5A:
16416                                           ! Debug: lt int = const $100 to unsigned short i = [S+$18-$C] (used reg = )
16417 3D12           8B46         F6            mov	ax,-$A[bp]
16418 3D15           3D                   0100  cmp	ax,#$100
16419 3D18   7303    E9         FF4A            blo 	.5B
16420                       00003D1D            .5F:
16421                       00003D1D            .58:
16422                                           ! Debug: and int = const 2 to unsigned char modeset_ctl = [S+$18-$13] (used reg = )
16423 3D1D           8A46         EF            mov	al,-$11[bp]
16424 3D20           24                     02  and	al,*2
16425                                           ! Debug: logeq int = const 2 to unsigned char = al+0 (used reg = )
16426 3D22           3C                     02  cmp	al,*2
16427 3D24           75           0D            jne 	.60
16428                       00003D26            .61:
16429                                           ! 1838     {
16430                                           ! 1839      biosfn_perform_gray_scale_summing(0x00, 0x100);
16431                                           ! Debug: list int = const $100 (used reg = )
16432 3D26           B8                   0100  mov	ax,#$100
16433 3D29           50                         push	ax
16434                                           ! Debug: list int = const 0 (used reg = )
16435 3D2A           31C0                       xor	ax,ax
16436 3D2C           50                         push	ax
16437                                           ! Debug: func () void = biosfn_perform_gray_scale_summing+0 (used reg = )
16438 3D2D           E8         27DA            call	_biosfn_perform_gray_scale_summing
16439 3D30           83C4                   04  add	sp,*4
16440                                           !BCC_EOS
16441                                           ! 1840     }
16442                                           ! 1841   }
16443                       00003D33            .60:
16444                                           ! 1842  inb(0x3da);
16445                       00003D33            .4F:
16446                                           ! Debug: list int = const $3DA (used reg = )
16447 3D33           B8                   03DA  mov	ax,#$3DA
16448 3D36           50                         push	ax
16449                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16450 3D37           E8         3FF7            call	_inb
16451 3D3A           44                         inc	sp
16452 3D3B           44                         inc	sp
16453                                           !BCC_EOS
16454                                           ! 1843  for(i=0;i<=0x13;i++)
16455                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16456 3D3C           31C0                       xor	ax,ax
16457 3D3E           8946         F6            mov	-$A[bp],ax
16458                                           !BCC_EOS
16459                                           !BCC_EOS
16460                                           ! 1844   {outb(0x3c0,i);
16461 3D41           EB           38            jmp .64
16462                       00003D43            .65:
16463                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16464 3D43           FF76         F6            push	-$A[bp]
16465                                           ! Debug: list int = const $3C0 (used reg = )
16466 3D46           B8                   03C0  mov	ax,#$3C0
16467 3D49           50                         push	ax
16468                                           ! Debug: func () void = outb+0 (used reg = )
16469 3D4A           E8         3FFA            call	_outb
16470 3D4D           83C4                   04  add	sp,*4
16471                                           !BCC_EOS
16472                                           ! 1845    outb(0x3c0,video_param_table[vpti].actl_regs[i]);
16473                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16474 3D50           8A46         F9            mov	al,-7[bp]
16475 3D53           30E4                       xor	ah,ah
16476 3D55           B1                     06  mov	cl,*6
16477 3D57           D3E0                       shl	ax,cl
16478 3D59           89C3                       mov	bx,ax
16479 3D5B           81C3                 0276  add	bx,#_video_param_table
16480                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$14] unsigned char = bx+$23 (used reg = )
16481 3D5F           8B46         F6            mov	ax,-$A[bp]
16482 3D62           01C3                       add	bx,ax
16483                                           ! Debug: list unsigned char = [bx+$23] (used reg = )
16484 3D64           8A47         23            mov	al,$23[bx]
16485 3D67           30E4                       xor	ah,ah
16486 3D69           50                         push	ax
16487                                           ! Debug: list int = const $3C0 (used reg = )
16488 3D6A           B8                   03C0  mov	ax,#$3C0
16489 3D6D           50                         push	ax
16490                                           ! Debug: func () void = outb+0 (used reg = )
16491 3D6E           E8         3FD6            call	_outb
16492 3D71           83C4                   04  add	sp,*4
16493                                           !BCC_EOS
16494                                           ! 1846   }
16495                                           ! 1847  outb(0x3c0,0x14);
16496                       00003D74            .63:
16497                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16498 3D74           8B46         F6            mov	ax,-$A[bp]
16499 3D77           40                         inc	ax
16500 3D78           8946         F6            mov	-$A[bp],ax
16501                       00003D7B            .64:
16502                                           ! Debug: le int = const $13 to unsigned short i = [S+$18-$C] (used reg = )
16503 3D7B           8B46         F6            mov	ax,-$A[bp]
16504 3D7E           3D                   0013  cmp	ax,*$13
16505 3D81           76           C0            jbe	.65
16506                       00003D83            .66:
16507                       00003D83            .62:
16508                                           ! Debug: list int = const $14 (used reg = )
16509 3D83           B8                   0014  mov	ax,*$14
16510 3D86           50                         push	ax
16511                                           ! Debug: list int = const $3C0 (used reg = )
16512 3D87           B8                   03C0  mov	ax,#$3C0
16513 3D8A           50                         push	ax
16514                                           ! Debug: func () void = outb+0 (used reg = )
16515 3D8B           E8         3FB9            call	_outb
16516 3D8E           83C4                   04  add	sp,*4
16517                                           !BCC_EOS
16518                                           ! 1848  outb(0x3c0,0x00);
16519                                           ! Debug: list int = const 0 (used reg = )
16520 3D91           31C0                       xor	ax,ax
16521 3D93           50                         push	ax
16522                                           ! Debug: list int = const $3C0 (used reg = )
16523 3D94           B8                   03C0  mov	ax,#$3C0
16524 3D97           50                         push	ax
16525                                           ! Debug: func () void = outb+0 (used reg = )
16526 3D98           E8         3FAC            call	_outb
16527 3D9B           83C4                   04  add	sp,*4
16528                                           !BCC_EOS
16529                                           ! 1849  outb(0x3c4,0);
16530                                           ! Debug: list int = const 0 (used reg = )
16531 3D9E           31C0                       xor	ax,ax
16532 3DA0           50                         push	ax
16533                                           ! Debug: list int = const $3C4 (used reg = )
16534 3DA1           B8                   03C4  mov	ax,#$3C4
16535 3DA4           50                         push	ax
16536                                           ! Debug: func () void = outb+0 (used reg = )
16537 3DA5           E8         3F9F            call	_outb
16538 3DA8           83C4                   04  add	sp,*4
16539                                           !BCC_EOS
16540                                           ! 1850  outb(0x3c5,0x03);
16541                                           ! Debug: list int = const 3 (used reg = )
16542 3DAB           B8                   0003  mov	ax,*3
16543 3DAE           50                         push	ax
16544                                           ! Debug: list int = const $3C5 (used reg = )
16545 3DAF           B8                   03C5  mov	ax,#$3C5
16546 3DB2           50                         push	ax
16547                                           ! Debug: func () void = outb+0 (used reg = )
16548 3DB3           E8         3F91            call	_outb
16549 3DB6           83C4                   04  add	sp,*4
16550                                           !BCC_EOS
16551                                           ! 1851  for(i=1;i<=4;i++)
16552                                           ! Debug: eq int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16553 3DB9           B8                   0001  mov	ax,*1
16554 3DBC           8946         F6            mov	-$A[bp],ax
16555                                           !BCC_EOS
16556                                           !BCC_EOS
16557                                           ! 1852   {outb(0x3c4,i);
16558 3DBF           EB           3F            jmp .69
16559                       00003DC1            .6A:
16560                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16561 3DC1           FF76         F6            push	-$A[bp]
16562                                           ! Debug: list int = const $3C4 (used reg = )
16563 3DC4           B8                   03C4  mov	ax,#$3C4
16564 3DC7           50                         push	ax
16565                                           ! Debug: func () void = outb+0 (used reg = )
16566 3DC8           E8         3F7C            call	_outb
16567 3DCB           83C4                   04  add	sp,*4
16568                                           !BCC_EOS
16569                                           ! 1853    outb(0x3c5,video_param_table[vpti].sequ_regs[i - 1]);
16570                                           ! Debug: sub int = const 1 to unsigned short i = [S+$18-$C] (used reg = )
16571 3DCE           8B46         F6            mov	ax,-$A[bp]
16572 3DD1           48                         dec	ax
16573 3DD2           50                         push	ax
16574                                           ! Debug: ptradd unsigned char vpti = [S+$1A-9] to [$1E] struct  = video_param_table+0 (used reg = )
16575 3DD3           8A46         F9            mov	al,-7[bp]
16576 3DD6           30E4                       xor	ah,ah
16577 3DD8           B1                     06  mov	cl,*6
16578 3DDA           D3E0                       shl	ax,cl
16579 3DDC           89C3                       mov	bx,ax
16580 3DDE           81C3                 0276  add	bx,#_video_param_table
16581                                           ! Debug: ptradd unsigned int (temp) = [S+$1A-$1A] to [4] unsigned char = bx+5 (used reg = )
16582 3DE2           8B46         E8            mov	ax,-$18[bp]
16583 3DE5           01C3                       add	bx,ax
16584 3DE7           44                         inc	sp
16585 3DE8           44                         inc	sp
16586                                           ! Debug: list unsigned char = [bx+5] (used reg = )
16587 3DE9           8A47         05            mov	al,5[bx]
16588 3DEC           30E4                       xor	ah,ah
16589 3DEE           50                         push	ax
16590                                           ! Debug: list int = const $3C5 (used reg = )
16591 3DEF           B8                   03C5  mov	ax,#$3C5
16592 3DF2           50                         push	ax
16593                                           ! Debug: func () void = outb+0 (used reg = )
16594 3DF3           E8         3F51            call	_outb
16595 3DF6           83C4                   04  add	sp,*4
16596                                           !BCC_EOS
16597                                           ! 1854   }
16598                                           ! 1855  for(i=0;i<=8;i++)
16599                       00003DF9            .68:
16600                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16601 3DF9           8B46         F6            mov	ax,-$A[bp]
16602 3DFC           40                         inc	ax
16603 3DFD           8946         F6            mov	-$A[bp],ax
16604                       00003E00            .69:
16605                                           ! Debug: le int = const 4 to unsigned short i = [S+$18-$C] (used reg = )
16606 3E00           8B46         F6            mov	ax,-$A[bp]
16607 3E03           3D                   0004  cmp	ax,*4
16608 3E06           76           B9            jbe	.6A
16609                       00003E08            .6B:
16610                       00003E08            .67:
16611                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16612 3E08           31C0                       xor	ax,ax
16613 3E0A           8946         F6            mov	-$A[bp],ax
16614                                           !BCC_EOS
16615                                           !BCC_EOS
16616                                           ! 1856   {outb(0x3ce,i);
16617 3E0D           EB           38            jmp .6E
16618                       00003E0F            .6F:
16619                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16620 3E0F           FF76         F6            push	-$A[bp]
16621                                           ! Debug: list int = const $3CE (used reg = )
16622 3E12           B8                   03CE  mov	ax,#$3CE
16623 3E15           50                         push	ax
16624                                           ! Debug: func () void = outb+0 (used reg = )
16625 3E16           E8         3F2E            call	_outb
16626 3E19           83C4                   04  add	sp,*4
16627                                           !BCC_EOS
16628                                           ! 1857    outb(0x3cf,video_param_table[vpti].grdc_regs[i]);
16629                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16630 3E1C           8A46         F9            mov	al,-7[bp]
16631 3E1F           30E4                       xor	ah,ah
16632 3E21           B1                     06  mov	cl,*6
16633 3E23           D3E0                       shl	ax,cl
16634 3E25           89C3                       mov	bx,ax
16635 3E27           81C3                 0276  add	bx,#_video_param_table
16636                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [9] unsigned char = bx+$37 (used reg = )
16637 3E2B           8B46         F6            mov	ax,-$A[bp]
16638 3E2E           01C3                       add	bx,ax
16639                                           ! Debug: list unsigned char = [bx+$37] (used reg = )
16640 3E30           8A47         37            mov	al,$37[bx]
16641 3E33           30E4                       xor	ah,ah
16642 3E35           50                         push	ax
16643                                           ! Debug: list int = const $3CF (used reg = )
16644 3E36           B8                   03CF  mov	ax,#$3CF
16645 3E39           50                         push	ax
16646                                           ! Debug: func () void = outb+0 (used reg = )
16647 3E3A           E8         3F0A            call	_outb
16648 3E3D           83C4                   04  add	sp,*4
16649                                           !BCC_EOS
16650                                           ! 1858   }
16651                                           ! 1859  crtc_addr=vga_modes[line].memmodel==0x01?0x3b4:0x3d4;
16652                       00003E40            .6D:
16653                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16654 3E40           8B46         F6            mov	ax,-$A[bp]
16655 3E43           40                         inc	ax
16656 3E44           8946         F6            mov	-$A[bp],ax
16657                       00003E47            .6E:
16658                                           ! Debug: le int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
16659 3E47           8B46         F6            mov	ax,-$A[bp]
16660 3E4A           3D                   0008  cmp	ax,*8
16661 3E4D           76           C0            jbe	.6F
16662                       00003E4F            .70:
16663                       00003E4F            .6C:
16664                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16665 3E4F           8A46         FE            mov	al,-2[bp]
16666 3E52           30E4                       xor	ah,ah
16667 3E54           B1                     03  mov	cl,*3
16668 3E56           D3E0                       shl	ax,cl
16669 3E58           89C3                       mov	bx,ax
16670 3E5A           81C3                 01E2  add	bx,#_vga_modes
16671                                           ! Debug: logeq int = const 1 to unsigned char = [bx+2] (used reg = )
16672 3E5E           8A47         02            mov	al,2[bx]
16673 3E61           3C                     01  cmp	al,*1
16674 3E63           75           05            jne 	.71
16675                       00003E65            .72:
16676 3E65           B8                   03B4  mov	ax,#$3B4
16677 3E68           EB           03            jmp .73
16678                       00003E6A            .71:
16679 3E6A           B8                   03D4  mov	ax,#$3D4
16680                       00003E6D            .73:
16681                                           ! Debug: eq int = ax+0 to unsigned short crtc_addr = [S+$18-$18] (used reg = )
16682 3E6D           8946         EA            mov	-$16[bp],ax
16683                                           !BCC_EOS
16684                                           ! 1860  outw(crtc_addr,0x0011);
16685                                           ! Debug: list int = const $11 (used reg = )
16686 3E70           B8                   0011  mov	ax,*$11
16687 3E73           50                         push	ax
16688                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16689 3E74           FF76         EA            push	-$16[bp]
16690                                           ! Debug: func () void = outw+0 (used reg = )
16691 3E77           E8         3EDD            call	_outw
16692 3E7A           83C4                   04  add	sp,*4
16693                                           !BCC_EOS
16694                                           ! 1861  for(i=0;i<=0x18;i++)
16695                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
16696 3E7D           31C0                       xor	ax,ax
16697 3E7F           8946         F6            mov	-$A[bp],ax
16698                                           !BCC_EOS
16699                                           !BCC_EOS
16700                                           ! 1862   {outb(crtc_addr,i);
16701 3E82           EB           38            jmp .76
16702                       00003E84            .77:
16703                                           ! Debug: list unsigned short i = [S+$18-$C] (used reg = )
16704 3E84           FF76         F6            push	-$A[bp]
16705                                           ! Debug: list unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16706 3E87           FF76         EA            push	-$16[bp]
16707                                           ! Debug: func () void = outb+0 (used reg = )
16708 3E8A           E8         3EBA            call	_outb
16709 3E8D           83C4                   04  add	sp,*4
16710                                           !BCC_EOS
16711                                           ! 1863    outb(crtc_addr+1,video_param_table[vpti].crtc_regs[i]);
16712                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16713 3E90           8A46         F9            mov	al,-7[bp]
16714 3E93           30E4                       xor	ah,ah
16715 3E95           B1                     06  mov	cl,*6
16716 3E97           D3E0                       shl	ax,cl
16717 3E99           89C3                       mov	bx,ax
16718 3E9B           81C3                 0276  add	bx,#_video_param_table
16719                                           ! Debug: ptradd unsigned short i = [S+$18-$C] to [$19] unsigned char = bx+$A (used reg = )
16720 3E9F           8B46         F6            mov	ax,-$A[bp]
16721 3EA2           01C3                       add	bx,ax
16722                                           ! Debug: list unsigned char = [bx+$A] (used reg = )
16723 3EA4           8A47         0A            mov	al,$A[bx]
16724 3EA7           30E4                       xor	ah,ah
16725 3EA9           50                         push	ax
16726                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$1A-$18] (used reg = )
16727 3EAA           8B46         EA            mov	ax,-$16[bp]
16728                                           ! Debug: list unsigned int = ax+1 (used reg = )
16729 3EAD           40                         inc	ax
16730 3EAE           50                         push	ax
16731                                           ! Debug: func () void = outb+0 (used reg = )
16732 3EAF           E8         3E95            call	_outb
16733 3EB2           83C4                   04  add	sp,*4
16734                                           !BCC_EOS
16735                                           ! 1864   }
16736                                           ! 1865  outb(0x3c2,video_param_table[vpti].miscreg);
16737                       00003EB5            .75:
16738                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
16739 3EB5           8B46         F6            mov	ax,-$A[bp]
16740 3EB8           40                         inc	ax
16741 3EB9           8946         F6            mov	-$A[bp],ax
16742                       00003EBC            .76:
16743                                           ! Debug: le int = const $18 to unsigned short i = [S+$18-$C] (used reg = )
16744 3EBC           8B46         F6            mov	ax,-$A[bp]
16745 3EBF           3D                   0018  cmp	ax,*$18
16746 3EC2           76           C0            jbe	.77
16747                       00003EC4            .78:
16748                       00003EC4            .74:
16749                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16750 3EC4           8A46         F9            mov	al,-7[bp]
16751 3EC7           30E4                       xor	ah,ah
16752 3EC9           B1                     06  mov	cl,*6
16753 3ECB           D3E0                       shl	ax,cl
16754 3ECD           89C3                       mov	bx,ax
16755 3ECF           81C3                 0276  add	bx,#_video_param_table
16756                                           ! Debug: list unsigned char = [bx+9] (used reg = )
16757 3ED3           8A47         09            mov	al,9[bx]
16758 3ED6           30E4                       xor	ah,ah
16759 3ED8           50                         push	ax
16760                                           ! Debug: list int = const $3C2 (used reg = )
16761 3ED9           B8                   03C2  mov	ax,#$3C2
16762 3EDC           50                         push	ax
16763                                           ! Debug: func () void = outb+0 (used reg = )
16764 3EDD           E8         3E67            call	_outb
16765 3EE0           83C4                   04  add	sp,*4
16766                                           !BCC_EOS
16767                                           ! 1866  outb(0x3c0,0x20);
16768                                           ! Debug: list int = const $20 (used reg = )
16769 3EE3           B8                   0020  mov	ax,*$20
16770 3EE6           50                         push	ax
16771                                           ! Debug: list int = const $3C0 (used reg = )
16772 3EE7           B8                   03C0  mov	ax,#$3C0
16773 3EEA           50                         push	ax
16774                                           ! Debug: func () void = outb+0 (used reg = )
16775 3EEB           E8         3E59            call	_outb
16776 3EEE           83C4                   04  add	sp,*4
16777                                           !BCC_EOS
16778                                           ! 1867  inb(0x3da);
16779                                           ! Debug: list int = const $3DA (used reg = )
16780 3EF1           B8                   03DA  mov	ax,#$3DA
16781 3EF4           50                         push	ax
16782                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16783 3EF5           E8         3E39            call	_inb
16784 3EF8           44                         inc	sp
16785 3EF9           44                         inc	sp
16786                                           !BCC_EOS
16787                                           ! 1868  if(noclearmem==0x00)
16788                                           ! Debug: logeq int = const 0 to unsigned char noclearmem = [S+$18-3] (used reg = )
16789 3EFA           8A46         FF            mov	al,-1[bp]
16790 3EFD           84C0                       test	al,al
16791 3EFF   7403    E9         00C1            bne 	.79
16792                       00003F04            .7A:
16793                                           ! 1869   {
16794                                           ! 1870    if(vga_modes[line].class==0x00)
16795                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
16796 3F04           8A46         FE            mov	al,-2[bp]
16797 3F07           30E4                       xor	ah,ah
16798 3F09           B1                     03  mov	cl,*3
16799 3F0B           D3E0                       shl	ax,cl
16800 3F0D           89C3                       mov	bx,ax
16801 3F0F           81C3                 01E2  add	bx,#_vga_modes
16802                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
16803 3F13           8A47         01            mov	al,1[bx]
16804 3F16           84C0                       test	al,al
16805 3F18           75           26            jne 	.7B
16806                       00003F1A            .7C:
16807                                           ! 1871     {
16808                                           ! 1872      memsetw(vga_modes[line].sstart,0,0x0720,0x4000);
16809                                           ! Debug: list int = const $4000 (used reg = )
16810 3F1A           B8                   4000  mov	ax,#$4000
16811 3F1D           50                         push	ax
16812                                           ! Debug: list int = const $720 (used reg = )
16813 3F1E           B8                   0720  mov	ax,#$720
16814 3F21           50                         push	ax
16815                                           ! Debug: list int = const 0 (used reg = )
16816 3F22           31C0                       xor	ax,ax
16817 3F24           50                         push	ax
16818                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16819 3F25           8A46         FE            mov	al,-2[bp]
16820 3F28           30E4                       xor	ah,ah
16821 3F2A           B1                     03  mov	cl,*3
16822 3F2C           D3E0                       shl	ax,cl
16823 3F2E           89C3                       mov	bx,ax
16824 3F30           81C3                 01E2  add	bx,#_vga_modes
16825                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16826 3F34           FF77         04            push	4[bx]
16827                                           ! Debug: func () void = memsetw+0 (used reg = )
16828 3F37           E8         3D1C            call	_memsetw
16829 3F3A           83C4                   08  add	sp,*8
16830                                           !BCC_EOS
16831                                           ! 1873     }
16832                                           ! 1874    else
16833                                           ! 1875     {
16834 3F3D           E9         0085            br 	.7D
16835                       00003F40            .7B:
16836                                           ! 1876      if(mode<0x0d)
16837                                           ! Debug: lt int = const $D to unsigned char mode = [S+$18+2] (used reg = )
16838 3F40           8A46         04            mov	al,4[bp]
16839 3F43           3C                     0D  cmp	al,*$D
16840 3F45           73           24            jae 	.7E
16841                       00003F47            .7F:
16842                                           ! 1877       {
16843                                           ! 1878        memsetw(vga_modes[line].sstart,0,0x0000,0x4000);
16844                                           ! Debug: list int = const $4000 (used reg = )
16845 3F47           B8                   4000  mov	ax,#$4000
16846 3F4A           50                         push	ax
16847                                           ! Debug: list int = const 0 (used reg = )
16848 3F4B           31C0                       xor	ax,ax
16849 3F4D           50                         push	ax
16850                                           ! Debug: list int = const 0 (used reg = )
16851 3F4E           31C0                       xor	ax,ax
16852 3F50           50                         push	ax
16853                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16854 3F51           8A46         FE            mov	al,-2[bp]
16855 3F54           30E4                       xor	ah,ah
16856 3F56           B1                     03  mov	cl,*3
16857 3F58           D3E0                       shl	ax,cl
16858 3F5A           89C3                       mov	bx,ax
16859 3F5C           81C3                 01E2  add	bx,#_vga_modes
16860                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16861 3F60           FF77         04            push	4[bx]
16862                                           ! Debug: func () void = memsetw+0 (used reg = )
16863 3F63           E8         3CF0            call	_memsetw
16864 3F66           83C4                   08  add	sp,*8
16865                                           !BCC_EOS
16866                                           ! 1879       }
16867                                           ! 1880      else
16868                                           ! 1881       {
16869 3F69           EB           5A            jmp .80
16870                       00003F6B            .7E:
16871                                           ! 1882        outb( 0x3c4, 0x02 );
16872                                           ! Debug: list int = const 2 (used reg = )
16873 3F6B           B8                   0002  mov	ax,*2
16874 3F6E           50                         push	ax
16875                                           ! Debug: list int = const $3C4 (used reg = )
16876 3F6F           B8                   03C4  mov	ax,#$3C4
16877 3F72           50                         push	ax
16878                                           ! Debug: func () void = outb+0 (used reg = )
16879 3F73           E8         3DD1            call	_outb
16880 3F76           83C4                   04  add	sp,*4
16881                                           !BCC_EOS
16882                                           ! 1883        mmask = inb( 0x3c5 );
16883                                           ! Debug: list int = const $3C5 (used reg = )
16884 3F79           B8                   03C5  mov	ax,#$3C5
16885 3F7C           50                         push	ax
16886                                           ! Debug: func () unsigned char = inb+0 (used reg = )
16887 3F7D           E8         3DB1            call	_inb
16888 3F80           44                         inc	sp
16889 3F81           44                         inc	sp
16890                                           ! Debug: eq unsigned char = al+0 to unsigned char mmask = [S+$18-5] (used reg = )
16891 3F82           8846         FD            mov	-3[bp],al
16892                                           !BCC_EOS
16893                                           ! 1884        outb( 0x3c5, 0x0f );
16894                                           ! Debug: list int = const $F (used reg = )
16895 3F85           B8                   000F  mov	ax,*$F
16896 3F88           50                         push	ax
16897                                           ! Debug: list int = const $3C5 (used reg = )
16898 3F89           B8                   03C5  mov	ax,#$3C5
16899 3F8C           50                         push	ax
16900                                           ! Debug: func () void = outb+0 (used reg = )
16901 3F8D           E8         3DB7            call	_outb
16902 3F90           83C4                   04  add	sp,*4
16903                                           !BCC_EOS
16904                                           ! 1885        memsetw(vga_modes[line].sstart,0,0x0000,0x8000);
16905                                           ! Debug: list unsigned int = const $8000 (used reg = )
16906 3F93           B8                   8000  mov	ax,#$8000
16907 3F96           50                         push	ax
16908                                           ! Debug: list int = const 0 (used reg = )
16909 3F97           31C0                       xor	ax,ax
16910 3F99           50                         push	ax
16911                                           ! Debug: list int = const 0 (used reg = )
16912 3F9A           31C0                       xor	ax,ax
16913 3F9C           50                         push	ax
16914                                           ! Debug: ptradd unsigned char line = [S+$1E-4] to [$10] struct  = vga_modes+0 (used reg = )
16915 3F9D           8A46         FE            mov	al,-2[bp]
16916 3FA0           30E4                       xor	ah,ah
16917 3FA2           B1                     03  mov	cl,*3
16918 3FA4           D3E0                       shl	ax,cl
16919 3FA6           89C3                       mov	bx,ax
16920 3FA8           81C3                 01E2  add	bx,#_vga_modes
16921                                           ! Debug: list unsigned short = [bx+4] (used reg = )
16922 3FAC           FF77         04            push	4[bx]
16923                                           ! Debug: func () void = memsetw+0 (used reg = )
16924 3FAF           E8         3CA4            call	_memsetw
16925 3FB2           83C4                   08  add	sp,*8
16926                                           !BCC_EOS
16927                                           ! 1886        outb( 0x3c5, mmask 
16928                                           ! 1886 );
16929                                           ! Debug: list unsigned char mmask = [S+$18-5] (used reg = )
16930 3FB5           8A46         FD            mov	al,-3[bp]
16931 3FB8           30E4                       xor	ah,ah
16932 3FBA           50                         push	ax
16933                                           ! Debug: list int = const $3C5 (used reg = )
16934 3FBB           B8                   03C5  mov	ax,#$3C5
16935 3FBE           50                         push	ax
16936                                           ! Debug: func () void = outb+0 (used reg = )
16937 3FBF           E8         3D85            call	_outb
16938 3FC2           83C4                   04  add	sp,*4
16939                                           !BCC_EOS
16940                                           ! 1887       }
16941                                           ! 1888     }
16942                       00003FC5            .80:
16943                                           ! 1889   }
16944                       00003FC5            .7D:
16945                                           ! 1890  write_byte(0x40,0x49,mode);
16946                       00003FC5            .79:
16947                                           ! Debug: list unsigned char mode = [S+$18+2] (used reg = )
16948 3FC5           8A46         04            mov	al,4[bp]
16949 3FC8           30E4                       xor	ah,ah
16950 3FCA           50                         push	ax
16951                                           ! Debug: list int = const $49 (used reg = )
16952 3FCB           B8                   0049  mov	ax,*$49
16953 3FCE           50                         push	ax
16954                                           ! Debug: list int = const $40 (used reg = )
16955 3FCF           B8                   0040  mov	ax,*$40
16956 3FD2           50                         push	ax
16957                                           ! Debug: func () void = write_byte+0 (used reg = )
16958 3FD3           E8         3D2B            call	_write_byte
16959 3FD6           83C4                   06  add	sp,*6
16960                                           !BCC_EOS
16961                                           ! 1891  write_word(0x40,0x4A,twidth);
16962                                           ! Debug: list unsigned short twidth = [S+$18-$E] (used reg = )
16963 3FD9           FF76         F4            push	-$C[bp]
16964                                           ! Debug: list int = const $4A (used reg = )
16965 3FDC           B8                   004A  mov	ax,*$4A
16966 3FDF           50                         push	ax
16967                                           ! Debug: list int = const $40 (used reg = )
16968 3FE0           B8                   0040  mov	ax,*$40
16969 3FE3           50                         push	ax
16970                                           ! Debug: func () void = write_word+0 (used reg = )
16971 3FE4           E8         3D32            call	_write_word
16972 3FE7           83C4                   06  add	sp,*6
16973                                           !BCC_EOS
16974                                           ! 1892  write_word(0x40,0x4C,*(Bit16u *)&video_param_table[vpti].slength_l);
16975                                           ! Debug: ptradd unsigned char vpti = [S+$18-9] to [$1E] struct  = video_param_table+0 (used reg = )
16976 3FEA           8A46         F9            mov	al,-7[bp]
16977 3FED           30E4                       xor	ah,ah
16978 3FEF           B1                     06  mov	cl,*6
16979 3FF1           D3E0                       shl	ax,cl
16980 3FF3           89C3                       mov	bx,ax
16981 3FF5           81C3                 0276  add	bx,#_video_param_table
16982                                           ! Debug: address unsigned char = [bx+3] (used reg = )
16983                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
16984                                           ! Debug: list unsigned short = [bx+3] (used reg = )
16985 3FF9           FF77         03            push	3[bx]
16986                                           ! Debug: list int = const $4C (used reg = )
16987 3FFC           B8                   004C  mov	ax,*$4C
16988 3FFF           50                         push	ax
16989                                           ! Debug: list int = const $40 (used reg = )
16990 4000           B8                   0040  mov	ax,*$40
16991 4003           50                         push	ax
16992                                           ! Debug: func () void = write_word+0 (used reg = )
16993 4004           E8         3D12            call	_write_word
16994 4007           83C4                   06  add	sp,*6
16995                                           !BCC_EOS
16996                                           ! 1893  write_word(0x40,0x63,crtc_addr);
16997                                           ! Debug: list unsigned short crtc_addr = [S+$18-$18] (used reg = )
16998 400A           FF76         EA            push	-$16[bp]
16999                                           ! Debug: list int = const $63 (used reg = )
17000 400D           B8                   0063  mov	ax,*$63
17001 4010           50                         push	ax
17002                                           ! Debug: list int = const $40 (used reg = )
17003 4011           B8                   0040  mov	ax,*$40
17004 4014           50                         push	ax
17005                                           ! Debug: func () void = write_word+0 (used reg = )
17006 4015           E8         3D01            call	_write_word
17007 4018           83C4                   06  add	sp,*6
17008                                           !BCC_EOS
17009                                           ! 1894  write_byte(0x40,0x84,theightm1);
17010                                           ! Debug: list unsigned short theightm1 = [S+$18-$10] (used reg = )
17011 401B           FF76         F2            push	-$E[bp]
17012                                           ! Debug: list int = const $84 (used reg = )
17013 401E           B8                   0084  mov	ax,#$84
17014 4021           50                         push	ax
17015                                           ! Debug: list int = const $40 (used reg = )
17016 4022           B8                   0040  mov	ax,*$40
17017 4025           50                         push	ax
17018                                           ! Debug: func () void = write_byte+0 (used reg = )
17019 4026           E8         3CD8            call	_write_byte
17020 4029           83C4                   06  add	sp,*6
17021                                           !BCC_EOS
17022                                           ! 1895  write_word(0x40,0x85,cheight);
17023                                           ! Debug: list unsigned short cheight = [S+$18-$12] (used reg = )
17024 402C           FF76         F0            push	-$10[bp]
17025                                           ! Debug: list int = const $85 (used reg = )
17026 402F           B8                   0085  mov	ax,#$85
17027 4032           50                         push	ax
17028                                           ! Debug: list int = const $40 (used reg = )
17029 4033           B8                   0040  mov	ax,*$40
17030 4036           50                         push	ax
17031                                           ! Debug: func () void = write_word+0 (used reg = )
17032 4037           E8         3CDF            call	_write_word
17033 403A           83C4                   06  add	sp,*6
17034                                           !BCC_EOS
17035                                           ! 1896  write_byte(0x40,0x87,(0x60|noclearmem));
17036                                           ! Debug: or unsigned char noclearmem = [S+$18-3] to int = const $60 (used reg = )
17037                                           ! Debug: expression subtree swapping
17038 403D           8A46         FF            mov	al,-1[bp]
17039 4040           0C                     60  or	al,*$60
17040                                           ! Debug: list unsigned char = al+0 (used reg = )
17041 4042           30E4                       xor	ah,ah
17042 4044           50                         push	ax
17043                                           ! Debug: list int = const $87 (used reg = )
17044 4045           B8                   0087  mov	ax,#$87
17045 4048           50                         push	ax
17046                                           ! Debug: list int = const $40 (used reg = )
17047 4049           B8                   0040  mov	ax,*$40
17048 404C           50                         push	ax
17049                                           ! Debug: func () void = write_byte+0 (used reg = )
17050 404D           E8         3CB1            call	_write_byte
17051 4050           83C4                   06  add	sp,*6
17052                                           !BCC_EOS
17053                                           ! 1897  write_byte(0x40,0x88,0xF9);
17054                                           ! Debug: list int = const $F9 (used reg = )
17055 4053           B8                   00F9  mov	ax,#$F9
17056 4056           50                         push	ax
17057                                           ! Debug: list int = const $88 (used reg = )
17058 4057           B8                   0088  mov	ax,#$88
17059 405A           50                         push	ax
17060                                           ! Debug: list int = const $40 (used reg = )
17061 405B           B8                   0040  mov	ax,*$40
17062 405E           50                         push	ax
17063                                           ! Debug: func () void = write_byte+0 (used reg = )
17064 405F           E8         3C9F            call	_write_byte
17065 4062           83C4                   06  add	sp,*6
17066                                           !BCC_EOS
17067                                           ! 1898  write_byte(0x40,0x89,read_byte(0x40,0x89)&0x7f);
17068                                           ! Debug: list int = const $89 (used reg = )
17069 4065           B8                   0089  mov	ax,#$89
17070 4068           50                         push	ax
17071                                           ! Debug: list int = const $40 (used reg = )
17072 4069           B8                   0040  mov	ax,*$40
17073 406C           50                         push	ax
17074                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17075 406D           E8         3C6B            call	_read_byte
17076 4070           83C4                   04  add	sp,*4
17077                                           ! Debug: and int = const $7F to unsigned char = al+0 (used reg = )
17078 4073           24                     7F  and	al,*$7F
17079                                           ! Debug: list unsigned char = al+0 (used reg = )
17080 4075           30E4                       xor	ah,ah
17081 4077           50                         push	ax
17082                                           ! Debug: list int = const $89 (used reg = )
17083 4078           B8                   0089  mov	ax,#$89
17084 407B           50                         push	ax
17085                                           ! Debug: list int = const $40 (used reg = )
17086 407C           B8                   0040  mov	ax,*$40
17087 407F           50                         push	ax
17088                                           ! Debug: func () void = write_byte+0 (used reg = )
17089 4080           E8         3C7E            call	_write_byte
17090 4083           83C4                   06  add	sp,*6
17091                                           !BCC_EOS
17092                                           ! 1899  write_byte(0x40,0x8A,0x08);
17093                                           ! Debug: list int = const 8 (used reg = )
17094 4086           B8                   0008  mov	ax,*8
17095 4089           50                         push	ax
17096                                           ! Debug: list int = const $8A (used reg = )
17097 408A           B8                   008A  mov	ax,#$8A
17098 408D           50                         push	ax
17099                                           ! Debug: list int = const $40 (used reg = )
17100 408E           B8                   0040  mov	ax,*$40
17101 4091           50                         push	ax
17102                                           ! Debug: func () void = write_byte+0 (used reg = )
17103 4092           E8         3C6C            call	_write_byte
17104 4095           83C4                   06  add	sp,*6
17105                                           !BCC_EOS
17106                                           ! 1900  write_word(0x40,0xA8, video_save_pointer_table);
17107                                           ! Debug: list * unsigned char = video_save_pointer_table+0 (used reg = )
17108 4098           BB                   35DF  mov	bx,#_video_save_pointer_table
17109 409B           53                         push	bx
17110                                           ! Debug: list int = const $A8 (used reg = )
17111 409C           B8                   00A8  mov	ax,#$A8
17112 409F           50                         push	ax
17113                                           ! Debug: list int = const $40 (used reg = )
17114 40A0           B8                   0040  mov	ax,*$40
17115 40A3           50                         push	ax
17116                                           ! Debug: func () void = write_word+0 (used reg = )
17117 40A4           E8         3C72            call	_write_word
17118 40A7           83C4                   06  add	sp,*6
17119                                           !BCC_EOS
17120                                           ! 1901  write_word(0x40,0xA8 +2, 0xc000);
17121                                           ! Debug: list unsigned int = const $C000 (used reg = )
17122 40AA           B8                   C000  mov	ax,#$C000
17123 40AD           50                         push	ax
17124                                           ! Debug: list int = const $AA (used reg = )
17125 40AE           B8                   00AA  mov	ax,#$AA
17126 40B1           50                         push	ax
17127                                           ! Debug: list int = const $40 (used reg = )
17128 40B2           B8                   0040  mov	ax,*$40
17129 40B5           50                         push	ax
17130                                           ! Debug: func () void = write_word+0 (used reg = )
17131 40B6           E8         3C60            call	_write_word
17132 40B9           83C4                   06  add	sp,*6
17133                                           !BCC_EOS
17134                                           ! 1902  write_byte(0x40,0x65,0x00);
17135                                           ! Debug: list int = const 0 (used reg = )
17136 40BC           31C0                       xor	ax,ax
17137 40BE           50                         push	ax
17138                                           ! Debug: list int = const $65 (used reg = )
17139 40BF           B8                   0065  mov	ax,*$65
17140 40C2           50                         push	ax
17141                                           ! Debug: list int = const $40 (used reg = )
17142 40C3           B8                   0040  mov	ax,*$40
17143 40C6           50                         push	ax
17144                                           ! Debug: func () void = write_byte+0 (used reg = )
17145 40C7           E8         3C37            call	_write_byte
17146 40CA           83C4                   06  add	sp,*6
17147                                           !BCC_EOS
17148                                           ! 1903  write_byte(0x40,0x66,0x00);
17149                                           ! Debug: list int = const 0 (used reg = )
17150 40CD           31C0                       xor	ax,ax
17151 40CF           50                         push	ax
17152                                           ! Debug: list int = const $66 (used reg = )
17153 40D0           B8                   0066  mov	ax,*$66
17154 40D3           50                         push	ax
17155                                           ! Debug: list int = const $40 (used reg = )
17156 40D4           B8                   0040  mov	ax,*$40
17157 40D7           50                         push	ax
17158                                           ! Debug: func () void = write_byte+0 (used reg = )
17159 40D8           E8         3C26            call	_write_byte
17160 40DB           83C4                   06  add	sp,*6
17161                                           !BCC_EOS
17162                                           ! 1904  if(vga_modes[line].class==0x00)
17163                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17164 40DE           8A46         FE            mov	al,-2[bp]
17165 40E1           30E4                       xor	ah,ah
17166 40E3           B1                     03  mov	cl,*3
17167 40E5           D3E0                       shl	ax,cl
17168 40E7           89C3                       mov	bx,ax
17169 40E9           81C3                 01E2  add	bx,#_vga_modes
17170                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17171 40ED           8A47         01            mov	al,1[bx]
17172 40F0           84C0                       test	al,al
17173 40F2           75           0E            jne 	.81
17174                       000040F4            .82:
17175                                           ! 1905   {
17176                                           ! 1906    biosfn_set_cursor_shape(0x06,0x07);
17177                                           ! Debug: list int = const 7 (used reg = )
17178 40F4           B8                   0007  mov	ax,*7
17179 40F7           50                         push	ax
17180                                           ! Debug: list int = const 6 (used reg = )
17181 40F8           B8                   0006  mov	ax,*6
17182 40FB           50                         push	ax
17183                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
17184 40FC           E8         00BA            call	_biosfn_set_cursor_shape
17185 40FF           83C4                   04  add	sp,*4
17186                                           !BCC_EOS
17187                                           ! 1907   }
17188                                           ! 1908  for(i=0;i<8;i++)
17189                       00004102            .81:
17190                                           ! Debug: eq int = const 0 to unsigned short i = [S+$18-$C] (used reg = )
17191 4102           31C0                       xor	ax,ax
17192 4104           8946         F6            mov	-$A[bp],ax
17193                                           !BCC_EOS
17194                                           !BCC_EOS
17195                                           ! 1909   biosfn_set_cursor_pos(i,0x0000);
17196 4107           EB           13            jmp .85
17197                       00004109            .86:
17198                                           ! Debug: list int = const 0 (used reg = )
17199 4109           31C0                       xor	ax,ax
17200 410B           50                         push	ax
17201                                           ! Debug: list unsigned short i = [S+$1A-$C] (used reg = )
17202 410C           FF76         F6            push	-$A[bp]
17203                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
17204 410F           E8         01C2            call	_biosfn_set_cursor_pos
17205 4112           83C4                   04  add	sp,*4
17206                                           !BCC_EOS
17207                                           ! 1910  biosfn_set_active_page(0x00);
17208                       00004115            .84:
17209                                           ! Debug: postinc unsigned short i = [S+$18-$C] (used reg = )
17210 4115           8B46         F6            mov	ax,-$A[bp]
17211 4118           40                         inc	ax
17212 4119           8946         F6            mov	-$A[bp],ax
17213                       0000411C            .85:
17214                                           ! Debug: lt int = const 8 to unsigned short i = [S+$18-$C] (used reg = )
17215 411C           8B46         F6            mov	ax,-$A[bp]
17216 411F           3D                   0008  cmp	ax,*8
17217 4122           72           E5            jb 	.86
17218                       00004124            .87:
17219                       00004124            .83:
17220                                           ! Debug: list int = const 0 (used reg = )
17221 4124           31C0                       xor	ax,ax
17222 4126           50                         push	ax
17223                                           ! Debug: func () void = biosfn_set_active_page+0 (used reg = )
17224 4127           E8         0320            call	_biosfn_set_active_page
17225 412A           44                         inc	sp
17226 412B           44                         inc	sp
17227                                           !BCC_EOS
17228                                           ! 1911  if(vga_modes[line].class==0x00)
17229                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
17230 412C           8A46         FE            mov	al,-2[bp]
17231 412F           30E4                       xor	ah,ah
17232 4131           B1                     03  mov	cl,*3
17233 4133           D3E0                       shl	ax,cl
17234 4135           89C3                       mov	bx,ax
17235 4137           81C3                 01E2  add	bx,#_vga_modes
17236                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
17237 413B           8A47         01            mov	al,1[bx]
17238 413E           84C0                       test	al,al
17239 4140           75           0E            jne 	.88
17240                       00004142            .89:
17241                                           ! 1912   {
17242                                           ! 1913 #asm
17243                                           !BCC_EOS
17244                                           !BCC_ASM
17245                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17246                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17247                       00000008            _biosfn_set_video_mode.theightm1	set	8
17248                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17249                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17250                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17251                       00000014            _biosfn_set_video_mode.line	set	$14
17252                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17253                       00000006            _biosfn_set_video_mode.cheight	set	6
17254                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17255                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17256                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17257                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17258                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17259                       0000000C            _biosfn_set_video_mode.i	set	$C
17260                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17261                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17262                       00000004            .biosfn_set_video_mode.mode	set	4
17263                       00000010            _biosfn_set_video_mode.palette	set	$10
17264                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17265                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17266                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17267                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17268                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17269                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17270                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17271                       00000013            _biosfn_set_video_mode.mmask	set	$13
17272                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17273                                             ;; copy and activate 8x16 font
17274 4142           B8                   1104    mov ax, #0x1104
17275 4145           B3                     00    mov bl, #0x00
17276 4147           CD                     10    int #0x10
17277 4149           B8                   1103    mov ax, #0x1103
17278 414C           B3                     00    mov bl, #0x00
17279 414E           CD                     10    int #0x10
17280                                           ! 1921 endasm
17281                                           !BCC_ENDASM
17282                                           !BCC_EOS
17283                                           ! 1922   }
17284                                           ! 1923 #asm
17285                       00004150            .88:
17286                                           !BCC_EOS
17287                                           !BCC_ASM
17288                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17289                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17290                       00000008            _biosfn_set_video_mode.theightm1	set	8
17291                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17292                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17293                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17294                       00000014            _biosfn_set_video_mode.line	set	$14
17295                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17296                       00000006            _biosfn_set_video_mode.cheight	set	6
17297                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17298                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17299                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17300                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17301                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17302                       0000000C            _biosfn_set_video_mode.i	set	$C
17303                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17304                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17305                       00000004            .biosfn_set_video_mode.mode	set	4
17306                       00000010            _biosfn_set_video_mode.palette	set	$10
17307                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17308                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17309                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17310                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17311                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17312                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17313                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17314                       00000013            _biosfn_set_video_mode.mmask	set	$13
17315                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17316                                            SET_INT_VECTOR(0x1f, #0xC000, #_vgafont8+128*8)
 +a   4150           1E                           push ds
 +a   4151           31C0                         xor ax, ax
 +a   4153           8ED8                         mov ds, ax
 +a   4155           B8                   1346    mov ax,  #_vgafont8+128*8
 +a   4158           A3         007C              mov 0x1f*4, ax
 +a   415B           B8                   C000    mov ax,  #0xC000
 +a   415E           A3         007E              mov 0x1f*4+2, ax
 +a   4161           1F                           pop ds
17317                                           ! 1925 endasm
17318                                           !BCC_ENDASM
17319                                           !BCC_EOS
17320                                           ! 1926   switch(cheight)
17321 4162           8B46         F0            mov	ax,-$10[bp]
17322                                           ! 1927    {case 8:
17323 4165           E9         003E            br 	.8C
17324                                           ! 1928 #asm
17325                       00004168            .8D:
17326                                           !BCC_EOS
17327                                           !BCC_ASM
17328                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17329                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17330                       00000008            _biosfn_set_video_mode.theightm1	set	8
17331                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17332                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17333                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17334                       00000014            _biosfn_set_video_mode.line	set	$14
17335                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17336                       00000006            _biosfn_set_video_mode.cheight	set	6
17337                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17338                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17339                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17340                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17341                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17342                       0000000C            _biosfn_set_video_mode.i	set	$C
17343                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17344                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17345                       00000004            .biosfn_set_video_mode.mode	set	4
17346                       00000010            _biosfn_set_video_mode.palette	set	$10
17347                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17348                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17349                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17350                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17351                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17352                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17353                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17354                       00000013            _biosfn_set_video_mode.mmask	set	$13
17355                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17356                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont8)
 +a   4168           1E                           push ds
 +a   4169           31C0                         xor ax, ax
 +a   416B           8ED8                         mov ds, ax
 +a   416D           B8                   0F46    mov ax,  #_vgafont8
 +a   4170           A3         010C              mov 0x43*4, ax
 +a   4173           B8                   C000    mov ax,  #0xC000
 +a   4176           A3         010E              mov 0x43*4+2, ax
 +a   4179           1F                           pop ds
17357                                           ! 1930 endasm
17358                                           !BCC_ENDASM
17359                                           !BCC_EOS
17360                                           ! 1931      break;
17361 417A           EB           39            jmp .8A
17362                                           !BCC_EOS
17363                                           ! 1932     case 14:
17364                                           ! 1933 #asm
17365                       0000417C            .8E:
17366                                           !BCC_EOS
17367                                           !BCC_ASM
17368                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17369                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17370                       00000008            _biosfn_set_video_mode.theightm1	set	8
17371                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17372                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17373                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17374                       00000014            _biosfn_set_video_mode.line	set	$14
17375                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17376                       00000006            _biosfn_set_video_mode.cheight	set	6
17377                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17378                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17379                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17380                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17381                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17382                       0000000C            _biosfn_set_video_mode.i	set	$C
17383                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17384                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17385                       00000004            .biosfn_set_video_mode.mode	set	4
17386                       00000010            _biosfn_set_video_mode.palette	set	$10
17387                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17388                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17389                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17390                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17391                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17392                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17393                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17394                       00000013            _biosfn_set_video_mode.mmask	set	$13
17395                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17396                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont14)
 +a   417C           1E                           push ds
 +a   417D           31C0                         xor ax, ax
 +a   417F           8ED8                         mov ds, ax
 +a   4181           B8                   1746    mov ax,  #_vgafont14
 +a   4184           A3         010C              mov 0x43*4, ax
 +a   4187           B8                   C000    mov ax,  #0xC000
 +a   418A           A3         010E              mov 0x43*4+2, ax
 +a   418D           1F                           pop ds
17397                                           ! 1935 endasm
17398                                           !BCC_ENDASM
17399                                           !BCC_EOS
17400                                           ! 1936      break;
17401 418E           EB           25            jmp .8A
17402                                           !BCC_EOS
17403                                           ! 1937     case 16:
17404                                           ! 1938 #asm
17405                       00004190            .8F:
17406                                           !BCC_EOS
17407                                           !BCC_ASM
17408                       00000005            _biosfn_set_video_mode.modeset_ctl	set	5
17409                       FFFFFFEF            .biosfn_set_video_mode.modeset_ctl	set	-$11
17410                       00000008            _biosfn_set_video_mode.theightm1	set	8
17411                       FFFFFFF2            .biosfn_set_video_mode.theightm1	set	-$E
17412                       00000004            _biosfn_set_video_mode.video_ctl	set	4
17413                       FFFFFFEE            .biosfn_set_video_mode.video_ctl	set	-$12
17414                       00000014            _biosfn_set_video_mode.line	set	$14
17415                       FFFFFFFE            .biosfn_set_video_mode.line	set	-2
17416                       00000006            _biosfn_set_video_mode.cheight	set	6
17417                       FFFFFFF0            .biosfn_set_video_mode.cheight	set	-$10
17418                       0000000F            _biosfn_set_video_mode.vpti	set	$F
17419                       FFFFFFF9            .biosfn_set_video_mode.vpti	set	-7
17420                       00000003            _biosfn_set_video_mode.vga_switches	set	3
17421                       FFFFFFED            .biosfn_set_video_mode.vga_switches	set	-$13
17422                       0000000C            _biosfn_set_video_mode.i	set	$C
17423                       FFFFFFF6            .biosfn_set_video_mode.i	set	-$A
17424                       0000001A            _biosfn_set_video_mode.mode	set	$1A
17425                       00000004            .biosfn_set_video_mode.mode	set	4
17426                       00000010            _biosfn_set_video_mode.palette	set	$10
17427                       FFFFFFFA            .biosfn_set_video_mode.palette	set	-6
17428                       0000000A            _biosfn_set_video_mode.twidth	set	$A
17429                       FFFFFFF4            .biosfn_set_video_mode.twidth	set	-$C
17430                       00000000            _biosfn_set_video_mode.crtc_addr	set	0
17431                       FFFFFFEA            .biosfn_set_video_mode.crtc_addr	set	-$16
17432                       00000015            _biosfn_set_video_mode.noclearmem	set	$15
17433                       FFFFFFFF            .biosfn_set_video_mode.noclearmem	set	-1
17434                       00000013            _biosfn_set_video_mode.mmask	set	$13
17435                       FFFFFFFD            .biosfn_set_video_mode.mmask	set	-3
17436                                                SET_INT_VECTOR(0x43, #0xC000, #_vgafont16)
 +a   4190           1E                           push ds
 +a   4191           31C0                         xor ax, ax
 +a   4193           8ED8                         mov ds, ax
 +a   4195           B8                   2546    mov ax,  #_vgafont16
 +a   4198           A3         010C              mov 0x43*4, ax
 +a   419B           B8                   C000    mov ax,  #0xC000
 +a   419E           A3         010E              mov 0x43*4+2, ax
 +a   41A1           1F                           pop ds
17437                                           ! 1940 endasm
17438                                           !BCC_ENDASM
17439                                           !BCC_EOS
17440                                           ! 1941      break;
17441 41A2           EB           11            jmp .8A
17442                                           !BCC_EOS
17443                                           ! 1942    }
17444                                           ! 1943 }
17445 41A4           EB           0F            jmp .8A
17446                       000041A6            .8C:
17447 41A6           2D                   0008  sub	ax,*8
17448 41A9           74           BD            je 	.8D
17449 41AB           2D                   0006  sub	ax,*6
17450 41AE           74           CC            je 	.8E
17451 41B0           2D                   0002  sub	ax,*2
17452 41B3           74           DB            je 	.8F
17453                       000041B5            .8A:
17454                       FFFFFFE8            ..FFFD	=	-$18
17455 41B5           89EC                       mov	sp,bp
17456 41B7           5D                         pop	bp
17457 41B8           C3                         ret
17458                                           ! 1944 static void biosfn_set_cursor_shape (CH,CL)
17459                                           ! Register BX used in function biosfn_set_video_mode
17460                                           ! 1945 Bit8u CH;Bit8u CL;
17461                       000041B9            _biosfn_set_cursor_shape:
17462                                           !BCC_EOS
17463                                           !BCC_EOS
17464                                           ! 1946 {Bit16u cheight,curs,crtc_addr;
17465                                           !BCC_EOS
17466                                           ! 1947  Bit8u modeset_ctl;
17467                                           !BCC_EOS
17468                                           ! 1948  CH&=0x3f;
17469 41B9           55                         push	bp
17470 41BA           89E5                       mov	bp,sp
17471 41BC           83C4                   F8  add	sp,*-8
17472                                           ! Debug: andab int = const $3F to unsigned char CH = [S+$A+2] (used reg = )
17473 41BF           8A46         04            mov	al,4[bp]
17474 41C2           24                     3F  and	al,*$3F
17475 41C4           8846         04            mov	4[bp],al
17476                                           !BCC_EOS
17477                                           ! 1949  CL&=0x1f;
17478                                           ! Debug: andab int = const $1F to unsigned char CL = [S+$A+4] (used reg = )
17479 41C7           8A46         06            mov	al,6[bp]
17480 41CA           24                     1F  and	al,*$1F
17481 41CC           8846         06            mov	6[bp],al
17482                                           !BCC_EOS
17483                                           ! 1950  curs=(CH<<8)+CL;
17484                                           ! Debug: sl int = const 8 to unsigned char CH = [S+$A+2] (used reg = )
17485 41CF           8A46         04            mov	al,4[bp]
17486 41D2           30E4                       xor	ah,ah
17487 41D4           88C4                       mov	ah,al
17488 41D6           30C0                       xor	al,al
17489                                           ! Debug: add unsigned char CL = [S+$A+4] to unsigned int = ax+0 (used reg = )
17490 41D8           0246         06            add	al,6[bp]
17491 41DB           80D4                   00  adc	ah,*0
17492                                           ! Debug: eq unsigned int = ax+0 to unsigned short curs = [S+$A-6] (used reg = )
17493 41DE           8946         FC            mov	-4[bp],ax
17494                                           !BCC_EOS
17495                                           ! 1951  write_word(0x40,0x60,curs);
17496                                           ! Debug: list unsigned short curs = [S+$A-6] (used reg = )
17497 41E1           FF76         FC            push	-4[bp]
17498                                           ! Debug: list int = const $60 (used reg = )
17499 41E4           B8                   0060  mov	ax,*$60
17500 41E7           50                         push	ax
17501                                           ! Debug: list int = const $40 (used reg = )
17502 41E8           B8                   0040  mov	ax,*$40
17503 41EB           50                         push	ax
17504                                           ! Debug: func () void = write_word+0 (used reg = )
17505 41EC           E8         3B2A            call	_write_word
17506 41EF           83C4                   06  add	sp,*6
17507                                           !BCC_EOS
17508                                           ! 1952  modeset_ctl=read_byte(0x40,0x89);
17509                                           ! Debug: list int = const $89 (used reg = )
17510 41F2           B8                   0089  mov	ax,#$89
17511 41F5           50                         push	ax
17512                                           ! Debug: list int = const $40 (used reg = )
17513 41F6           B8                   0040  mov	ax,*$40
17514 41F9           50                         push	ax
17515                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17516 41FA           E8         3ADE            call	_read_byte
17517 41FD           83C4                   04  add	sp,*4
17518                                           ! Debug: eq unsigned char = al+0 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17519 4200           8846         F9            mov	-7[bp],al
17520                                           !BCC_EOS
17521                                           ! 1953  cheight = read_word(0x40,0x85);
17522                                           ! Debug: list int = const $85 (used reg = )
17523 4203           B8                   0085  mov	ax,#$85
17524 4206           50                         push	ax
17525                                           ! Debug: list int = const $40 (used reg = )
17526 4207           B8                   0040  mov	ax,*$40
17527 420A           50                         push	ax
17528                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17529 420B           E8         3AE0            call	_read_word
17530 420E           83C4                   04  add	sp,*4
17531                                           ! Debug: eq unsigned short = ax+0 to unsigned short cheight = [S+$A-4] (used reg = )
17532 4211           8946         FE            mov	-2[bp],ax
17533                                           !BCC_EOS
17534                                           ! 1954  if((modeset_ctl&0x01) && (cheight>8) && (CL<8) && (CH<0x20))
17535                                           ! Debug: and int = const 1 to unsigned char modeset_ctl = [S+$A-9] (used reg = )
17536 4214           8A46         F9            mov	al,-7[bp]
17537 4217           24                     01  and	al,*1
17538 4219           84C0                       test	al,al
17539 421B           74           66            je  	.90
17540                       0000421D            .94:
17541                                           ! Debug: gt int = const 8 to unsigned short cheight = [S+$A-4] (used reg = )
17542 421D           8B46         FE            mov	ax,-2[bp]
17543 4220           3D                   0008  cmp	ax,*8
17544 4223           76           5E            jbe 	.90
17545                       00004225            .93:
17546                                           ! Debug: lt int = const 8 to unsigned char CL = [S+$A+4] (used reg = )
17547 4225           8A46         06            mov	al,6[bp]
17548 4228           3C                     08  cmp	al,*8
17549 422A           73           57            jae 	.90
17550                       0000422C            .92:
17551                                           ! Debug: lt int = const $20 to unsigned char CH = [S+$A+2] (used reg = )
17552 422C           8A46         04            mov	al,4[bp]
17553 422F           3C                     20  cmp	al,*$20
17554 4231           73           50            jae 	.90
17555                       00004233            .91:
17556                                           ! 1955   {
17557                                           ! 1956    if(CL!=(CH+1))
17558                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17559 4233           8A46         04            mov	al,4[bp]
17560 4236           30E4                       xor	ah,ah
17561                                           ! Debug: ne unsigned int = ax+1 to unsigned char CL = [S+$A+4] (used reg = )
17562                                           ! Debug: expression subtree swapping
17563 4238           40                         inc	ax
17564 4239           50                         push	ax
17565 423A           8A46         06            mov	al,6[bp]
17566 423D           30E4                       xor	ah,ah
17567 423F           3B46         F6            cmp	ax,-$A[bp]
17568 4242           8D66         F8            lea	sp,-8[bp]
17569 4245           74           15            je  	.95
17570                       00004247            .96:
17571                                           ! 1957     {
17572                                           ! 1958      CH = ((CH+1) * cheight / 8) -1;
17573                                           ! Debug: add int = const 1 to unsigned char CH = [S+$A+2] (used reg = )
17574 4247           8A46         04            mov	al,4[bp]
17575 424A           30E4                       xor	ah,ah
17576                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17577 424C           40                         inc	ax
17578 424D           8B4E         FE            mov	cx,-2[bp]
17579 4250           F7E9                       imul	cx
17580                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17581 4252           B1                     03  mov	cl,*3
17582 4254           D3E8                       shr	ax,cl
17583                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17584                                           ! Debug: eq unsigned int = ax-1 to unsigned char CH = [S+$A+2] (used reg = )
17585 4256           48                         dec	ax
17586 4257           8846         04            mov	4[bp],al
17587                                           !BCC_EOS
17588                                           ! 1959     }
17589                                           ! 1960    else
17590                                           ! 1961     {
17591 425A           EB           14            jmp .97
17592                       0000425C            .95:
17593                                           ! 1962      CH = ((CL+1) * cheight / 8) - 2;
17594                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17595 425C           8A46         06            mov	al,6[bp]
17596 425F           30E4                       xor	ah,ah
17597                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17598 4261           40                         inc	ax
17599 4262           8B4E         FE            mov	cx,-2[bp]
17600 4265           F7E9                       imul	cx
17601                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17602 4267           B1                     03  mov	cl,*3
17603 4269           D3E8                       shr	ax,cl
17604                                           ! Debug: sub int = const 2 to unsigned int = ax+0 (used reg = )
17605                                           ! Debug: eq unsigned int = ax-2 to unsigned char CH = [S+$A+2] (used reg = )
17606 426B           48                         dec	ax
17607 426C           48                         dec	ax
17608 426D           8846         04            mov	4[bp],al
17609                                           !BCC_EOS
17610                                           ! 1963     }
17611                                           ! 1964    CL = ((CL+1) * cheight / 8) - 1;
17612                       00004270            .97:
17613                                           ! Debug: add int = const 1 to unsigned char CL = [S+$A+4] (used reg = )
17614 4270           8A46         06            mov	al,6[bp]
17615 4273           30E4                       xor	ah,ah
17616                                           ! Debug: mul unsigned short cheight = [S+$A-4] to unsigned int = ax+1 (used reg = )
17617 4275           40                         inc	ax
17618 4276           8B4E         FE            mov	cx,-2[bp]
17619 4279           F7E9                       imul	cx
17620                                           ! Debug: div int = const 8 to unsigned int = ax+0 (used reg = )
17621 427B           B1                     03  mov	cl,*3
17622 427D           D3E8                       shr	ax,cl
17623                                           ! Debug: sub int = const 1 to unsigned int = ax+0 (used reg = )
17624                                           ! Debug: eq unsigned int = ax-1 to unsigned char CL = [S+$A+4] (used reg = )
17625 427F           48                         dec	ax
17626 4280           8846         06            mov	6[bp],al
17627                                           !BCC_EOS
17628                                           ! 1965   }
17629                                           ! 1966  crtc_addr=read_word(0x40,0x63);
17630                       00004283            .90:
17631                                           ! Debug: list int = const $63 (used reg = )
17632 4283           B8                   0063  mov	ax,*$63
17633 4286           50                         push	ax
17634                                           ! Debug: list int = const $40 (used reg = )
17635 4287           B8                   0040  mov	ax,*$40
17636 428A           50                         push	ax
17637                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17638 428B           E8         3A60            call	_read_word
17639 428E           83C4                   04  add	sp,*4
17640                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
17641 4291           8946         FA            mov	-6[bp],ax
17642                                           !BCC_EOS
17643                                           ! 1967  outb(crtc_addr,0x0a);
17644                                           ! Debug: list int = const $A (used reg = )
17645 4294           B8                   000A  mov	ax,*$A
17646 4297           50                         push	ax
17647                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17648 4298           FF76         FA            push	-6[bp]
17649                                           ! Debug: func () void = outb+0 (used reg = )
17650 429B           E8         3AA9            call	_outb
17651 429E           83C4                   04  add	sp,*4
17652                                           !BCC_EOS
17653                                           ! 1968  outb(crtc_addr+1,CH);
17654                                           ! Debug: list unsigned char CH = [S+$A+2] (used reg = )
17655 42A1           8A46         04            mov	al,4[bp]
17656 42A4           30E4                       xor	ah,ah
17657 42A6           50                         push	ax
17658                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17659 42A7           8B46         FA            mov	ax,-6[bp]
17660                                           ! Debug: list unsigned int = ax+1 (used reg = )
17661 42AA           40                         inc	ax
17662 42AB           50                         push	ax
17663                                           ! Debug: func () void = outb+0 (used reg = )
17664 42AC           E8         3A98            call	_outb
17665 42AF           83C4                   04  add	sp,*4
17666                                           !BCC_EOS
17667                                           ! 1969  outb(crtc_addr,0x0b);
17668                                           ! Debug: list int = const $B (used reg = )
17669 42B2           B8                   000B  mov	ax,*$B
17670 42B5           50                         push	ax
17671                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
17672 42B6           FF76         FA            push	-6[bp]
17673                                           ! Debug: func () void = outb+0 (used reg = )
17674 42B9           E8         3A8B            call	_outb
17675 42BC           83C4                   04  add	sp,*4
17676                                           !BCC_EOS
17677                                           ! 1970  outb(crtc_addr+1,CL);
17678                                           ! Debug: list unsigned char CL = [S+$A+4] (used reg = )
17679 42BF           8A46         06            mov	al,6[bp]
17680 42C2           30E4                       xor	ah,ah
17681 42C4           50                         push	ax
17682                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$C-8] (used reg = )
17683 42C5           8B46         FA            mov	ax,-6[bp]
17684                                           ! Debug: list unsigned int = ax+1 (used reg = )
17685 42C8           40                         inc	ax
17686 42C9           50                         push	ax
17687                                           ! Debug: func () void = outb+0 (used reg = )
17688 42CA           E8         3A7A            call	_outb
17689 42CD           83C4                   04  add	sp,*4
17690                                           !BCC_EOS
17691                                           ! 1971 }
17692 42D0           89EC                       mov	sp,bp
17693 42D2           5D                         pop	bp
17694 42D3           C3                         ret
17695                                           ! 1972 static void biosfn_set_cursor_pos (page, cursor)
17696                                           ! 1973 Bit8u page;Bit16u cursor;
17697                       000042D4            _biosfn_set_cursor_pos:
17698                                           !BCC_EOS
17699                                           !BCC_EOS
17700                                           ! 1974 {
17701                                           ! 1975  Bit8u xcurs,ycurs,current;
17702                                           !BCC_EOS
17703                                           ! 1976  Bit16u nbcols,nbrows,address,crtc_addr;
17704                                           !BCC_EOS
17705                                           ! 1977  if(page>7)return;
17706 42D4           55                         push	bp
17707 42D5           89E5                       mov	bp,sp
17708 42D7           83C4                   F4  add	sp,*-$C
17709                                           ! Debug: gt int = const 7 to unsigned char page = [S+$E+2] (used reg = )
17710 42DA           8A46         04            mov	al,4[bp]
17711 42DD           3C                     07  cmp	al,*7
17712 42DF           76           04            jbe 	.98
17713                       000042E1            .99:
17714 42E1           89EC                       mov	sp,bp
17715 42E3           5D                         pop	bp
17716 42E4           C3                         ret
17717                                           !BCC_EOS
17718                                           ! 1978  write_word(0x40, 0x50 +2*page, cursor);
17719                       000042E5            .98:
17720                                           ! Debug: list unsigned short cursor = [S+$E+4] (used reg = )
17721 42E5           FF76         06            push	6[bp]
17722                                           ! Debug: mul unsigned char page = [S+$10+2] to int = const 2 (used reg = )
17723                                           ! Debug: expression subtree swapping
17724 42E8           8A46         04            mov	al,4[bp]
17725 42EB           30E4                       xor	ah,ah
17726 42ED           D1E0                       shl	ax,*1
17727                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17728                                           ! Debug: expression subtree swapping
17729                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17730 42EF           05                   0050  add	ax,*$50
17731 42F2           50                         push	ax
17732                                           ! Debug: list int = const $40 (used reg = )
17733 42F3           B8                   0040  mov	ax,*$40
17734 42F6           50                         push	ax
17735                                           ! Debug: func () void = write_word+0 (used reg = )
17736 42F7           E8         3A1F            call	_write_word
17737 42FA           83C4                   06  add	sp,*6
17738                                           !BCC_EOS
17739                                           ! 1979  c
17740                                           ! 1979 urrent=read_byte(0x40,0x62);
17741                                           ! Debug: list int = const $62 (used reg = )
17742 42FD           B8                   0062  mov	ax,*$62
17743 4300           50                         push	ax
17744                                           ! Debug: list int = const $40 (used reg = )
17745 4301           B8                   0040  mov	ax,*$40
17746 4304           50                         push	ax
17747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17748 4305           E8         39D3            call	_read_byte
17749 4308           83C4                   04  add	sp,*4
17750                                           ! Debug: eq unsigned char = al+0 to unsigned char current = [S+$E-5] (used reg = )
17751 430B           8846         FD            mov	-3[bp],al
17752                                           !BCC_EOS
17753                                           ! 1980  if(page==current)
17754                                           ! Debug: logeq unsigned char current = [S+$E-5] to unsigned char page = [S+$E+2] (used reg = )
17755 430E           8A46         04            mov	al,4[bp]
17756 4311           3A46         FD            cmp	al,-3[bp]
17757 4314   7403    E9         00B8            bne 	.9A
17758                       00004319            .9B:
17759                                           ! 1981   {
17760                                           ! 1982    nbcols=read_word(0x40,0x4A);
17761                                           ! Debug: list int = const $4A (used reg = )
17762 4319           B8                   004A  mov	ax,*$4A
17763 431C           50                         push	ax
17764                                           ! Debug: list int = const $40 (used reg = )
17765 431D           B8                   0040  mov	ax,*$40
17766 4320           50                         push	ax
17767                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17768 4321           E8         39CA            call	_read_word
17769 4324           83C4                   04  add	sp,*4
17770                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$E-8] (used reg = )
17771 4327           8946         FA            mov	-6[bp],ax
17772                                           !BCC_EOS
17773                                           ! 1983    nbrows=read_byte(0x40,0x84)+1;
17774                                           ! Debug: list int = const $84 (used reg = )
17775 432A           B8                   0084  mov	ax,#$84
17776 432D           50                         push	ax
17777                                           ! Debug: list int = const $40 (used reg = )
17778 432E           B8                   0040  mov	ax,*$40
17779 4331           50                         push	ax
17780                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
17781 4332           E8         39A6            call	_read_byte
17782 4335           83C4                   04  add	sp,*4
17783                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
17784 4338           30E4                       xor	ah,ah
17785                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$E-$A] (used reg = )
17786 433A           40                         inc	ax
17787 433B           8946         F8            mov	-8[bp],ax
17788                                           !BCC_EOS
17789                                           ! 1984    xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
17790                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$E+4] (used reg = )
17791 433E           8A46         06            mov	al,6[bp]
17792                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$E-3] (used reg = )
17793 4341           8846         FF            mov	-1[bp],al
17794                                           !BCC_EOS
17795                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$E+4] (used reg = )
17796 4344           8B46         06            mov	ax,6[bp]
17797 4347           30C0                       xor	al,al
17798                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17799 4349           88E0                       mov	al,ah
17800 434B           30E4                       xor	ah,ah
17801                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$E-4] (used reg = )
17802 434D           8846         FE            mov	-2[bp],al
17803                                           !BCC_EOS
17804                                           ! 1985    address=((((nbcols*nbrows)|0x00ff)+1)*page)+xcurs+ycurs*nbcols;
17805                                           ! Debug: mul unsigned short nbcols = [S+$E-8] to unsigned char ycurs = [S+$E-4] (used reg = )
17806 4350           8A46         FE            mov	al,-2[bp]
17807 4353           30E4                       xor	ah,ah
17808 4355           8B4E         FA            mov	cx,-6[bp]
17809 4358           F7E9                       imul	cx
17810 435A           50                         push	ax
17811                                           ! Debug: mul unsigned short nbrows = [S+$10-$A] to unsigned short nbcols = [S+$10-8] (used reg = )
17812 435B           8B46         FA            mov	ax,-6[bp]
17813 435E           8B4E         F8            mov	cx,-8[bp]
17814 4361           F7E9                       imul	cx
17815                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
17816 4363           0C                     FF  or	al,#$FF
17817                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
17818                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
17819 4365           89C3                       mov	bx,ax
17820 4367           8A46         04            mov	al,4[bp]
17821 436A           30E4                       xor	ah,ah
17822 436C           93                         xchg	ax,bx
17823 436D           40                         inc	ax
17824 436E           89D9                       mov	cx,bx
17825 4370           F7E9                       imul	cx
17826                                           ! Debug: add unsigned char xcurs = [S+$10-3] to unsigned int = ax+0 (used reg = )
17827 4372           0246         FF            add	al,-1[bp]
17828 4375           80D4                   00  adc	ah,*0
17829                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
17830 4378           0346         F2            add	ax,-$E[bp]
17831 437B           44                         inc	sp
17832 437C           44                         inc	sp
17833                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$E-$C] (used reg = )
17834 437D           8946         F6            mov	-$A[bp],ax
17835                                           !BCC_EOS
17836                                           ! 1986    crtc_addr=read_word(0x40,0x63);
17837                                           ! Debug: list int = const $63 (used reg = )
17838 4380           B8                   0063  mov	ax,*$63
17839 4383           50                         push	ax
17840                                           ! Debug: list int = const $40 (used reg = )
17841 4384           B8                   0040  mov	ax,*$40
17842 4387           50                         push	ax
17843                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17844 4388           E8         3963            call	_read_word
17845 438B           83C4                   04  add	sp,*4
17846                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-$E] (used reg = )
17847 438E           8946         F4            mov	-$C[bp],ax
17848                                           !BCC_EOS
17849                                           ! 1987    outb(crtc_addr,0x0e);
17850                                           ! Debug: list int = const $E (used reg = )
17851 4391           B8                   000E  mov	ax,*$E
17852 4394           50                         push	ax
17853                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17854 4395           FF76         F4            push	-$C[bp]
17855                                           ! Debug: func () void = outb+0 (used reg = )
17856 4398           E8         39AC            call	_outb
17857 439B           83C4                   04  add	sp,*4
17858                                           !BCC_EOS
17859                                           ! 1988    outb(crtc_addr+1,(address&0xff00)>>8);
17860                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$E-$C] (used reg = )
17861 439E           8B46         F6            mov	ax,-$A[bp]
17862 43A1           30C0                       xor	al,al
17863                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
17864 43A3           88E0                       mov	al,ah
17865 43A5           30E4                       xor	ah,ah
17866                                           ! Debug: list unsigned int = ax+0 (used reg = )
17867 43A7           50                         push	ax
17868                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17869 43A8           8B46         F4            mov	ax,-$C[bp]
17870                                           ! Debug: list unsigned int = ax+1 (used reg = )
17871 43AB           40                         inc	ax
17872 43AC           50                         push	ax
17873                                           ! Debug: func () void = outb+0 (used reg = )
17874 43AD           E8         3997            call	_outb
17875 43B0           83C4                   04  add	sp,*4
17876                                           !BCC_EOS
17877                                           ! 1989    outb(crtc_addr,0x0f);
17878                                           ! Debug: list int = const $F (used reg = )
17879 43B3           B8                   000F  mov	ax,*$F
17880 43B6           50                         push	ax
17881                                           ! Debug: list unsigned short crtc_addr = [S+$10-$E] (used reg = )
17882 43B7           FF76         F4            push	-$C[bp]
17883                                           ! Debug: func () void = outb+0 (used reg = )
17884 43BA           E8         398A            call	_outb
17885 43BD           83C4                   04  add	sp,*4
17886                                           !BCC_EOS
17887                                           ! 1990    outb(crtc_addr+1,address&0x00ff);
17888                                           ! Debug: and int = const $FF to unsigned short address = [S+$E-$C] (used reg = )
17889 43C0           8A46         F6            mov	al,-$A[bp]
17890                                           ! Debug: list unsigned char = al+0 (used reg = )
17891 43C3           30E4                       xor	ah,ah
17892 43C5           50                         push	ax
17893                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-$E] (used reg = )
17894 43C6           8B46         F4            mov	ax,-$C[bp]
17895                                           ! Debug: list unsigned int = ax+1 (used reg = )
17896 43C9           40                         inc	ax
17897 43CA           50                         push	ax
17898                                           ! Debug: func () void = outb+0 (used reg = )
17899 43CB           E8         3979            call	_outb
17900 43CE           83C4                   04  add	sp,*4
17901                                           !BCC_EOS
17902                                           ! 1991   }
17903                                           ! 1992 }
17904                       000043D1            .9A:
17905 43D1           89EC                       mov	sp,bp
17906 43D3           5D                         pop	bp
17907 43D4           C3                         ret
17908                                           ! 1993 static void biosfn_get_cursor_pos (page,shape, pos)
17909                                           ! Register BX used in function biosfn_set_cursor_pos
17910                                           ! 1994 Bit8u page;Bit16u *shape;Bit16u *pos;
17911                       000043D5            _biosfn_get_cursor_pos:
17912                                           !BCC_EOS
17913                                           !BCC_EOS
17914                                           !BCC_EOS
17915                                           ! 1995 {
17916                                           ! 1996  Bit16u ss=get_SS();
17917 43D5           55                         push	bp
17918 43D6           89E5                       mov	bp,sp
17919 43D8           4C                         dec	sp
17920 43D9           4C                         dec	sp
17921                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
17922 43DA           E8         398A            call	_get_SS
17923                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
17924 43DD           8946         FE            mov	-2[bp],ax
17925                                           !BCC_EOS
17926                                           ! 1997  write_word(ss, shape, 0);
17927                                           ! Debug: list int = const 0 (used reg = )
17928 43E0           31C0                       xor	ax,ax
17929 43E2           50                         push	ax
17930                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17931 43E3           FF76         06            push	6[bp]
17932                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17933 43E6           FF76         FE            push	-2[bp]
17934                                           ! Debug: func () void = write_word+0 (used reg = )
17935 43E9           E8         392D            call	_write_word
17936 43EC           83C4                   06  add	sp,*6
17937                                           !BCC_EOS
17938                                           ! 1998  write_word(ss, pos, 0);
17939                                           ! Debug: list int = const 0 (used reg = )
17940 43EF           31C0                       xor	ax,ax
17941 43F1           50                         push	ax
17942                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
17943 43F2           FF76         08            push	8[bp]
17944                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17945 43F5           FF76         FE            push	-2[bp]
17946                                           ! Debug: func () void = write_word+0 (used reg = )
17947 43F8           E8         391E            call	_write_word
17948 43FB           83C4                   06  add	sp,*6
17949                                           !BCC_EOS
17950                                           ! 1999  if(page>7)return;
17951                                           ! Debug: gt int = const 7 to unsigned char page = [S+4+2] (used reg = )
17952 43FE           8A46         04            mov	al,4[bp]
17953 4401           3C                     07  cmp	al,*7
17954 4403           76           04            jbe 	.9C
17955                       00004405            .9D:
17956 4405           89EC                       mov	sp,bp
17957 4407           5D                         pop	bp
17958 4408           C3                         ret
17959                                           !BCC_EOS
17960                                           ! 2000  write_word(ss,shape,read_word(0x40,0x60));
17961                       00004409            .9C:
17962                                           ! Debug: list int = const $60 (used reg = )
17963 4409           B8                   0060  mov	ax,*$60
17964 440C           50                         push	ax
17965                                           ! Debug: list int = const $40 (used reg = )
17966 440D           B8                   0040  mov	ax,*$40
17967 4410           50                         push	ax
17968                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17969 4411           E8         38DA            call	_read_word
17970 4414           83C4                   04  add	sp,*4
17971                                           ! Debug: list unsigned short = ax+0 (used reg = )
17972 4417           50                         push	ax
17973                                           ! Debug: list * unsigned short shape = [S+6+4] (used reg = )
17974 4418           FF76         06            push	6[bp]
17975                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
17976 441B           FF76         FE            push	-2[bp]
17977                                           ! Debug: func () void = write_word+0 (used reg = )
17978 441E           E8         38F8            call	_write_word
17979 4421           83C4                   06  add	sp,*6
17980                                           !BCC_EOS
17981                                           ! 2001  write_word(ss,pos,read_word(0x40,0x50 +page*2));
17982                                           ! Debug: mul int = const 2 to unsigned char page = [S+4+2] (used reg = )
17983 4424           8A46         04            mov	al,4[bp]
17984 4427           30E4                       xor	ah,ah
17985 4429           D1E0                       shl	ax,*1
17986                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
17987                                           ! Debug: expression subtree swapping
17988                                           ! Debug: list unsigned int = ax+$50 (used reg = )
17989 442B           05                   0050  add	ax,*$50
17990 442E           50                         push	ax
17991                                           ! Debug: list int = const $40 (used reg = )
17992 442F           B8                   0040  mov	ax,*$40
17993 4432           50                         push	ax
17994                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
17995 4433           E8         38B8            call	_read_word
17996 4436           83C4                   04  add	sp,*4
17997                                           ! Debug: list unsigned short = ax+0 (used reg = )
17998 4439           50                         push	ax
17999                                           ! Debug: list * unsigned short pos = [S+6+6] (used reg = )
18000 443A           FF76         08            push	8[bp]
18001                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
18002 443D           FF76         FE            push	-2[bp]
18003                                           ! Debug: func () void = write_word+0 (used reg = )
18004 4440           E8         38D6            call	_write_word
18005 4443           83C4                   06  add	sp,*6
18006                                           !BCC_EOS
18007                                           ! 2002 }
18008 4446           89EC                       mov	sp,bp
18009 4448           5D                         pop	bp
18010 4449           C3                         ret
18011                                           ! 2003 static void biosfn_set_active_page (page)
18012                                           ! 2004 Bit8u page;
18013                       0000444A            _biosfn_set_active_page:
18014                                           !BCC_EOS
18015                                           ! 2005 {
18016                                           ! 2006  Bit16u cursor,dummy,crtc_addr;
18017                                           !BCC_EOS
18018                                           ! 2007  Bit16u nbcols,nbrows,address;
18019                                           !BCC_EOS
18020                                           ! 2008  Bit8u mode,line;
18021                                           !BCC_EOS
18022                                           ! 2009  if(page>7)return;
18023 444A           55                         push	bp
18024 444B           89E5                       mov	bp,sp
18025 444D           83C4                   F2  add	sp,*-$E
18026                                           ! Debug: gt int = const 7 to unsigned char page = [S+$10+2] (used reg = )
18027 4450           8A46         04            mov	al,4[bp]
18028 4453           3C                     07  cmp	al,*7
18029 4455           76           04            jbe 	.9E
18030                       00004457            .9F:
18031 4457           89EC                       mov	sp,bp
18032 4459           5D                         pop	bp
18033 445A           C3                         ret
18034                                           !BCC_EOS
18035                                           ! 2010  mode=read_byte(0x40,0x49);
18036                       0000445B            .9E:
18037                                           ! Debug: list int = const $49 (used reg = )
18038 445B           B8                   0049  mov	ax,*$49
18039 445E           50                         push	ax
18040                                           ! Debug: list int = const $40 (used reg = )
18041 445F           B8                   0040  mov	ax,*$40
18042 4462           50                         push	ax
18043                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18044 4463           E8         3875            call	_read_byte
18045 4466           83C4                   04  add	sp,*4
18046                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-$F] (used reg = )
18047 4469           8846         F3            mov	-$D[bp],al
18048                                           !BCC_EOS
18049                                           ! 2011  line=find_vga_entry(mode);
18050                                           ! Debug: list unsigned char mode = [S+$10-$F] (used reg = )
18051 446C           8A46         F3            mov	al,-$D[bp]
18052 446F           30E4                       xor	ah,ah
18053 4471           50                         push	ax
18054                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
18055 4472           E8         377A            call	_find_vga_entry
18056 4475           44                         inc	sp
18057 4476           44                         inc	sp
18058                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-$10] (used reg = )
18059 4477           8846         F2            mov	-$E[bp],al
18060                                           !BCC_EOS
18061                                           ! 2012  if(line==0xFF)return;
18062                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-$10] (used reg = )
18063 447A           8A46         F2            mov	al,-$E[bp]
18064 447D           3C                     FF  cmp	al,#$FF
18065 447F           75           04            jne 	.A0
18066                       00004481            .A1:
18067 4481           89EC                       mov	sp,bp
18068 4483           5D                         pop	bp
18069 4484           C3                         ret
18070                                           !BCC_EOS
18071                                           ! 2013  biosfn_get_cursor_pos(page,&dummy,&cursor);
18072                       00004485            .A0:
18073                                           ! Debug: list * unsigned short cursor = S+$10-4 (used reg = )
18074 4485           8D5E         FE            lea	bx,-2[bp]
18075 4488           53                         push	bx
18076                                           ! Debug: list * unsigned short dummy = S+$12-6 (used reg = )
18077 4489           8D5E         FC            lea	bx,-4[bp]
18078 448C           53                         push	bx
18079                                           ! Debug: list unsigned char page = [S+$14+2] (used reg = )
18080 448D           8A46         04            mov	al,4[bp]
18081 4490           30E4                       xor	ah,ah
18082 4492           50                         push	ax
18083                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
18084 4493           E8         FF3F            call	_biosfn_get_cursor_pos
18085 4496           83C4                   06  add	sp,*6
18086                                           !BCC_EOS
18087                                           ! 2014  if(vga_modes[line].class==0x00)
18088                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] struct  = vga_modes+0 (used reg = )
18089 4499           8A46         F2            mov	al,-$E[bp]
18090 449C           30E4                       xor	ah,ah
18091 449E           B1                     03  mov	cl,*3
18092 44A0           D3E0                       shl	ax,cl
18093 44A2           89C3                       mov	bx,ax
18094 44A4           81C3                 01E2  add	bx,#_vga_modes
18095                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
18096 44A8           8A47         01            mov	al,1[bx]
18097 44AB           84C0                       test	al,al
18098 44AD           75           6E            jne 	.A2
18099                       000044AF            .A3:
18100                                           ! 2015   {
18101                                           ! 2016    nbcols=read_word(0x40,0x4A);
18102                                           ! Debug: list int = const $4A (used reg = )
18103 44AF           B8                   004A  mov	ax,*$4A
18104 44B2           50                         push	ax
18105                                           ! Debug: list int = const $40 (used reg = )
18106 44B3           B8                   0040  mov	ax,*$40
18107 44B6           50                         push	ax
18108                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18109 44B7           E8         3834            call	_read_word
18110 44BA           83C4                   04  add	sp,*4
18111                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
18112 44BD           8946         F8            mov	-8[bp],ax
18113                                           !BCC_EOS
18114                                           ! 2017    nbrows=read_byte(0x40,0x84)+1;
18115                                           ! Debug: list int = const $84 (used reg = )
18116 44C0           B8                   0084  mov	ax,#$84
18117 44C3           50                         push	ax
18118                                           ! Debug: list int = const $40 (used reg = )
18119 44C4           B8                   0040  mov	ax,*$40
18120 44C7           50                         push	ax
18121                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
18122 44C8           E8         3810            call	_read_byte
18123 44CB           83C4                   04  add	sp,*4
18124                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
18125 44CE           30E4                       xor	ah,ah
18126                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
18127 44D0           40                         inc	ax
18128 44D1           8946         F6            mov	-$A[bp],ax
18129                                           !BCC_EOS
18130                                           ! 2018    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
18131                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18132 44D4           8B46         F8            mov	ax,-8[bp]
18133 44D7           8B4E         F6            mov	cx,-$A[bp]
18134 44DA           F7E9                       imul	cx
18135                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
18136 44DC           D1E0                       shl	ax,*1
18137                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18138 44DE           0C                     FF  or	al,#$FF
18139                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18140                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18141 44E0           89C3                       mov	bx,ax
18142 44E2           8A46         04            mov	al,4[bp]
18143 44E5           30E4                       xor	ah,ah
18144 44E7           93                         xchg	ax,bx
18145 44E8           40                         inc	ax
18146 44E9           89D9                       mov	cx,bx
18147 44EB           F7E9                       imul	cx
18148                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18149 44ED           8946         F4            mov	-$C[bp],ax
18150                                           !BCC_EOS
18151                                           ! 2019    write_word(0x40,0x4E,address);
18152                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18153 44F0           FF76         F4            push	-$C[bp]
18154                                           ! Debug: list int = const $4E (used reg = )
18155 44F3           B8                   004E  mov	ax,*$4E
18156 44F6           50                         push	ax
18157                                           ! Debug: list int = const $40 (used reg = )
18158 44F7           B8                   0040  mov	ax,*$40
18159 44FA           50                         push	ax
18160                                           ! Debug: func () void = write_word+0 (used reg = )
18161 44FB           E8         381B            call	_write_word
18162 44FE           83C4                   06  add	sp,*6
18163                                           !BCC_EOS
18164                                           ! 2020    address=((((nbcols*nbrows)|0x00ff)+1)*page);
18165                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
18166 4501           8B46         F8            mov	ax,-8[bp]
18167 4504           8B4E         F6            mov	cx,-$A[bp]
18168 4507           F7E9                       imul	cx
18169                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
18170 4509           0C                     FF  or	al,#$FF
18171                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
18172                                           ! Debug: mul unsigned char page = [S+$10+2] to unsigned int = ax+1 (used reg = )
18173 450B           89C3                       mov	bx,ax
18174 450D           8A46         04            mov	al,4[bp]
18175 4510           30E4                       xor	ah,ah
18176 4512           93                         xchg	ax,bx
18177 4513           40                         inc	ax
18178 4514           89D9                       mov	cx,bx
18179 4516           F7E9                       imul	cx
18180                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18181 4518           8946         F4            mov	-$C[bp],ax
18182                                           !BCC_EOS
18183                                           ! 2021   }
18184                                           ! 2022  else
18185                                           ! 2023   {
18186 451B           EB           24            jmp .A4
18187                       0000451D            .A2:
18188                                           ! 2024    address = page * (*(Bit16u *)&video_param_table[line_to_vpti[line]].slength_l);
18189                                           ! Debug: ptradd unsigned char line = [S+$10-$10] to [$10] unsigned char = line_to_vpti+0 (used reg = )
18190 451D           8A46         F2            mov	al,-$E[bp]
18191 4520           30E4                       xor	ah,ah
18192 4522           89C3                       mov	bx,ax
18193                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
18194 4524           8A87       0262            mov	al,_line_to_vpti[bx]
18195 4528           30E4                       xor	ah,ah
18196 452A           B1                     06  mov	cl,*6
18197 452C           D3E0                       shl	ax,cl
18198 452E           89C3                       mov	bx,ax
18199 4530           81C3                 0276  add	bx,#_video_param_table
18200                                           ! Debug: address unsigned char = [bx+3] (used reg = )
18201                                           ! Debug: cast * unsigned short = const 0 to * unsigned char = bx+3 (used reg = )
18202                                           ! Debug: mul unsigned short = [bx+3] to unsigned char page = [S+$10+2] (used reg = )
18203 4534           8A46         04            mov	al,4[bp]
18204 4537           30E4                       xor	ah,ah
18205 4539           8B4F         03            mov	cx,3[bx]
18206 453C           F7E9                       imul	cx
18207                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$E] (used reg = )
18208 453E           8946         F4            mov	-$C[bp],ax
18209                                           !BCC_EOS
18210                                           ! 2025   }
18211                                           ! 2026  crtc_addr=read_word(0x40,0x63);
18212                       00004541            .A4:
18213                                           ! Debug: list int = const $63 (used reg = )
18214 4541           B8                   0063  mov	ax,*$63
18215 4544           50                         push	ax
18216                                           ! Debug: list int = const $40 (used reg = )
18217 4545           B8                   0040  mov	ax,*$40
18218 4548           50                         push	ax
18219                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
18220 4549           E8         37A2            call	_read_word
18221 454C           83C4                   04  add	sp,*4
18222                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$10-8] (used reg = )
18223 454F           8946         FA            mov	-6[bp],ax
18224                                           !BCC_EOS
18225                                           ! 2027  outb(crtc_addr,0x0c);
18226                                           ! Debug: list int = const $C (used reg = )
18227 4552           B8                   000C  mov	ax,*$C
18228 4555           50                         push	ax
18229                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18230 4556           FF76         FA            push	-6[bp]
18231                                           ! Debug: func () void = outb+0 (used reg = )
18232 4559           E8         37EB            call	_outb
18233 455C           83C4                   04  add	sp,*4
18234                                           !BCC_EOS
18235                                           ! 2028  outb(crtc_addr+1,(address&0xff00)>>8);
18236                                           ! Debug: and unsigned int = const $FF00 to unsigned short address = [S+$10-$E] (used reg = )
18237 455F           8B46         F4            mov	ax,-$C[bp]
18238 4562           30C0                       xor	al,al
18239                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
18240 4564           88E0                       mov	al,ah
18241 4566           30E4                       xor	ah,ah
18242                                           ! Debug: list unsigned int = ax+0 (used reg = )
18243 4568           50                         push	ax
18244                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18245 4569           8B46         FA            mov	ax,-6[bp]
18246                                           ! Debug: list unsigned int = ax+1 (used reg = )
18247 456C           40                         inc	ax
18248 456D           50                         push	ax
18249                                           ! Debug: func () void = outb+0 (used reg = )
18250 456E           E8         37D6            call	_outb
18251 4571           83C4                   04  add	sp,*4
18252                                           !BCC_EOS
18253                                           ! 2029  outb(crtc_addr,0x0d);
18254                                           ! Debug: list int = const $D (used reg = )
18255 4574           B8                   000D  mov	ax,*$D
18256 4577           50                         push	ax
18257                                           ! Debug: list unsigned short crtc_addr = [S+$12-8] (used reg = )
18258 4578           FF76         FA            push	-6[bp]
18259                                           ! Debug: func () void = outb+0 (used reg = )
18260 457B           E8         37C9            call	_outb
18261 457E           83C4                   04  add	sp,*4
18262                                           !BCC_EOS
18263                                           ! 2030  outb(crtc_addr+1,address&0x00ff);
18264                                           ! Debug: and int = const $FF to unsigned short address = [S+$10-$E] (used reg = )
18265 4581           8A46         F4            mov	al,-$C[bp]
18266                                           ! Debug: list unsigned char = al+0 (used reg = )
18267 4584           30E4                       xor	ah,ah
18268 4586           50                         push	ax
18269                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$12-8] (used reg = )
18270 4587           8B46         FA            mov	ax,-6[bp]
18271                                           ! Debug: list unsigned int = ax+1 (used reg = )
18272 458A           40                         inc	ax
18273 458B           50                         push	ax
18274                                           ! Debug: func () void = outb+0 (used reg = )
18275 458C           E8         37B8            call	_outb
18276 458F           83C4                   04  add	sp,*4
18277                                           !BCC_EOS
18278                                           ! 2031  write_byte(0x40,0x62,page);
18279                                           ! Debug: list unsigned char page = [S+$10+2] (used reg = )
18280 4592           8A46         04            mov	al,4[bp]
18281 4595           30E4                       xor	ah,ah
18282 4597           50                         push	ax
18283                                           ! Debug: list int = const $62 (used reg = )
18284 4598           B8                   0062  mov	ax,*$62
18285 459B           50                         push	ax
18286                                           ! Debug: list int = const $40 (used reg = )
18287 459C           B8                   0040  mov	ax,*$40
18288 459F           50                         push	ax
18289                                           ! Debug: func () void = write_byte+0 (used reg = )
18290 45A0           E8         375E            call	_write_byte
18291 45A3           83C4                   06  add	sp,*6
18292                                           !BCC_EOS
18293                                           ! 2032  printf("Set active page %02x address %04x\n",page,address);
18294                                           ! Debug: list unsigned short address = [S+$10-$E] (used reg = )
18295 45A6           FF76         F4            push	-$C[bp]
18296                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18297 45A9           8A46         04            mov	al,4[bp]
18298 45AC           30E4                       xor	ah,ah
18299 45AE           50                         push	ax
18300                                           ! Debug: list * char = .A5+0 (used reg = )
18301 45AF           BB                   7F65  mov	bx,#.A5
18302 45B2           53                         push	bx
18303                                           ! Debug: func () void = printf+0 (used reg = )
18304 45B3           E8         37D0            call	_printf
18305 45B6           83C4                   06  add	sp,*6
18306                                           !BCC_EOS
18307                                           ! 2033  biosfn_set_cursor_pos(page,cursor);
18308                                           ! Debug: list unsigned short cursor = [S+$10-4] (used reg = )
18309 45B9           FF76         FE            push	-2[bp]
18310                                           ! Debug: list unsigned char page = [S+$12+2] (used reg = )
18311 45BC           8A46         04            mov	al,4[bp]
18312 45BF           30E4                       xor	ah,ah
18313 45C1           50                         push	ax
18314                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
18315 45C2           E8         FD0F            call	_biosfn_set_cursor_pos
18316 45C5           83C4                   04  add	sp,*4
18317                                           !BCC_EOS
18318                                           ! 2034 }
18319 45C8           89EC                       mov	sp,bp
18320 45CA           5D                         pop	bp
18321 45CB           C3                         ret
18322                                           ! 2035 static void vgamem_copy_pl4(xstart,ysrc,ydest,cols,nbcols,cheight)
18323                                           ! Register BX used in function biosfn_set_active_page
18324                                           ! 2036 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18325                       000045CC            _vgamem_copy_pl4:
18326                                           !BCC_EOS
18327                                           !BCC_EOS
18328                                           !BCC_EOS
18329                                           !BCC_EOS
18330                                           !BCC_EOS
18331                                           !BCC_EOS
18332                                           ! 2037 {
18333                                           ! 2038  Bit16u src,dest;
18334                                           !BCC_EOS
18335                                           ! 2039  Bit8u i;
18336                                           !BCC_EOS
18337                                           ! 2040  src=ysrc*cheight*nbcols+xstart;
18338 45CC           55                         push	bp
18339 45CD           89E5                       mov	bp,sp
18340 45CF           83C4                   FA  add	sp,*-6
18341                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18342 45D2           8A46         0E            mov	al,$E[bp]
18343 45D5           30E4                       xor	ah,ah
18344 45D7           89C3                       mov	bx,ax
18345 45D9           8A46         06            mov	al,6[bp]
18346 45DC           30E4                       xor	ah,ah
18347 45DE           89D9                       mov	cx,bx
18348 45E0           F7E9                       imul	cx
18349                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18350 45E2           89C3                       mov	bx,ax
18351 45E4           8A46         0C            mov	al,$C[bp]
18352 45E7           30E4                       xor	ah,ah
18353 45E9           93                         xchg	ax,bx
18354 45EA           89D9                       mov	cx,bx
18355 45EC           F7E9                       imul	cx
18356                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18357 45EE           0246         04            add	al,4[bp]
18358 45F1           80D4                   00  adc	ah,*0
18359                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18360 45F4           8946         FE            mov	-2[bp],ax
18361                                           !BCC_EOS
18362                                           ! 2041  dest=ydest*cheight*nbcols+xstart;
18363                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18364 45F7           8A46         0E            mov	al,$E[bp]
18365 45FA           30E4                       xor	ah,ah
18366 45FC           89C3                       mov	bx,ax
18367 45FE           8A46         08            mov	al,8[bp]
18368 4601           30E4                       xor	ah,ah
18369 4603           89D9                       mov	cx,bx
18370 4605           F7E9                       imul	cx
18371                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18372 4607           89C3                       mov	bx,ax
18373 4609           8A46         0C            mov	al,$C[bp]
18374 460C           30E4                       xor	ah,ah
18375 460E           93                         xchg	ax,bx
18376 460F           89D9                       mov	cx,bx
18377 4611           F7E9                       imul	cx
18378                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18379 4613           0246         04            add	al,4[bp]
18380 4616           80D4                   00  adc	ah,*0
18381                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18382 4619           8946         FC            mov	-4[bp],ax
18383                                           !BCC_EOS
18384                                           ! 2042  outw(0x3ce, 0x0105);
18385                                           ! Debug: list int = const $105 (used reg = )
18386 461C           B8                   0105  mov	ax,#$105
18387 461F           50                         push	ax
18388                                           ! Debug: list int = const $3CE (used reg = )
18389 4620           B8                   03CE  mov	ax,#$3CE
18390 4623           50                         push	ax
18391                                           ! Debug: func () void = outw+0 (used reg = )
18392 4624           E8         3730            call	_outw
18393 4627           83C4                   04  add	sp,*4
18394                                           !BCC_EOS
18395                                           ! 2043  for(i=0;i<cheight;i++)
18396                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18397 462A           30C0                       xor	al,al
18398 462C           8846         FB            mov	-5[bp],al
18399                                           !BCC_EOS
18400                                           !BCC_EOS
18401                                           ! 2044   {
18402 462F           EB           43            jmp .A8
18403                       00004631            .A9:
18404                                           ! 2045    memcpyb(0xa000,dest+i*nbcols,0xa000,src+i*nbcols,cols);
18405                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18406 4631           8A46         0A            mov	al,$A[bp]
18407 4634           30E4                       xor	ah,ah
18408 4636           50                         push	ax
18409                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned char i = [S+$A-7] (used reg = )
18410 4637           8A46         0C            mov	al,$C[bp]
18411 463A           30E4                       xor	ah,ah
18412 463C           89C3                       mov	bx,ax
18413 463E           8A46         FB            mov	al,-5[bp]
18414 4641           30E4                       xor	ah,ah
18415 4643           89D9                       mov	cx,bx
18416 4645           F7E9                       imul	cx
18417                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18418                                           ! Debug: expression subtree swapping
18419 4647           0346         FE            add	ax,-2[bp]
18420                                           ! Debug: list unsigned int = ax+0 (used reg = )
18421 464A           50                         push	ax
18422                                           ! Debug: list unsigned int = const $A000 (used reg = )
18423 464B           B8                   A000  mov	ax,#$A000
18424 464E           50                         push	ax
18425                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-7] (used reg = )
18426 464F           8A46         0C            mov	al,$C[bp]
18427 4652           30E4                       xor	ah,ah
18428 4654           89C3                       mov	bx,ax
18429 4656           8A46         FB            mov	al,-5[bp]
18430 4659           30E4                       xor	ah,ah
18431 465B           89D9                       mov	cx,bx
18432 465D           F7E9                       imul	cx
18433                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18434                                           ! Debug: expression subtree swapping
18435 465F           0346         FC            add	ax,-4[bp]
18436                                           ! Debug: list unsigned int = ax+0 (used reg = )
18437 4662           50                         push	ax
18438                                           ! Debug: list unsigned int = const $A000 (used reg = )
18439 4663           B8                   A000  mov	ax,#$A000
18440 4666           50                         push	ax
18441                                           ! Debug: func () void = memcpyb+0 (used reg = )
18442 4667           E8         3611            call	_memcpyb
18443 466A           83C4                   0A  add	sp,*$A
18444                                           !BCC_EOS
18445                                           ! 2046   }
18446                                           ! 2047  outw(0x3ce, 0x0005);
18447                       0000466D            .A7:
18448                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18449 466D           8A46         FB            mov	al,-5[bp]
18450 4670           40                         inc	ax
18451 4671           8846         FB            mov	-5[bp],al
18452                       00004674            .A8:
18453                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18454 4674           8A46         FB            mov	al,-5[bp]
18455 4677           3A46         0E            cmp	al,$E[bp]
18456 467A           72           B5            jb 	.A9
18457                       0000467C            .AA:
18458                       0000467C            .A6:
18459                                           ! Debug: list int = const 5 (used reg = )
18460 467C           B8                   0005  mov	ax,*5
18461 467F           50                         push	ax
18462                                           ! Debug: list int = const $3CE (used reg = )
18463 4680           B8                   03CE  mov	ax,#$3CE
18464 4683           50                         push	ax
18465                                           ! Debug: func () void = outw+0 (used reg = )
18466 4684           E8         36D0            call	_outw
18467 4687           83C4                   04  add	sp,*4
18468                                           !BCC_EOS
18469                                           ! 2048 }
18470 468A           89EC                       mov	sp,bp
18471 468C           5D                         pop	bp
18472 468D           C3                         ret
18473                                           ! 2049 static void vgamem_fill_pl4(xstart,ystart,cols,nbcols,cheight,attr)
18474                                           ! Register BX used in function vgamem_copy_pl4
18475                                           ! 2050 Bit8u xstart;Bit8u y
18476                       0000468E            _vgamem_fill_pl4:
18477                                           !BCC_EOS
18478                                           ! 2050 start;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18479                                           !BCC_EOS
18480                                           !BCC_EOS
18481                                           !BCC_EOS
18482                                           !BCC_EOS
18483                                           !BCC_EOS
18484                                           ! 2051 {
18485                                           ! 2052  Bit16u dest;
18486                                           !BCC_EOS
18487                                           ! 2053  Bit8u i;
18488                                           !BCC_EOS
18489                                           ! 2054  dest=ystart*cheight*nbcols+xstart;
18490 468E           55                         push	bp
18491 468F           89E5                       mov	bp,sp
18492 4691           83C4                   FC  add	sp,*-4
18493                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18494 4694           8A46         0C            mov	al,$C[bp]
18495 4697           30E4                       xor	ah,ah
18496 4699           89C3                       mov	bx,ax
18497 469B           8A46         06            mov	al,6[bp]
18498 469E           30E4                       xor	ah,ah
18499 46A0           89D9                       mov	cx,bx
18500 46A2           F7E9                       imul	cx
18501                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18502 46A4           89C3                       mov	bx,ax
18503 46A6           8A46         0A            mov	al,$A[bp]
18504 46A9           30E4                       xor	ah,ah
18505 46AB           93                         xchg	ax,bx
18506 46AC           89D9                       mov	cx,bx
18507 46AE           F7E9                       imul	cx
18508                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18509 46B0           0246         04            add	al,4[bp]
18510 46B3           80D4                   00  adc	ah,*0
18511                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18512 46B6           8946         FE            mov	-2[bp],ax
18513                                           !BCC_EOS
18514                                           ! 2055  outw(0x3ce, 0x0205);
18515                                           ! Debug: list int = const $205 (used reg = )
18516 46B9           B8                   0205  mov	ax,#$205
18517 46BC           50                         push	ax
18518                                           ! Debug: list int = const $3CE (used reg = )
18519 46BD           B8                   03CE  mov	ax,#$3CE
18520 46C0           50                         push	ax
18521                                           ! Debug: func () void = outw+0 (used reg = )
18522 46C1           E8         3693            call	_outw
18523 46C4           83C4                   04  add	sp,*4
18524                                           !BCC_EOS
18525                                           ! 2056  for(i=0;i<cheight;i++)
18526                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18527 46C7           30C0                       xor	al,al
18528 46C9           8846         FD            mov	-3[bp],al
18529                                           !BCC_EOS
18530                                           !BCC_EOS
18531                                           ! 2057   {
18532 46CC           EB           31            jmp .AD
18533                       000046CE            .AE:
18534                                           ! 2058    memsetb(0xa000,dest+i*nbcols,attr,cols);
18535                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18536 46CE           8A46         08            mov	al,8[bp]
18537 46D1           30E4                       xor	ah,ah
18538 46D3           50                         push	ax
18539                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18540 46D4           8A46         0E            mov	al,$E[bp]
18541 46D7           30E4                       xor	ah,ah
18542 46D9           50                         push	ax
18543                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned char i = [S+$A-5] (used reg = )
18544 46DA           8A46         0A            mov	al,$A[bp]
18545 46DD           30E4                       xor	ah,ah
18546 46DF           89C3                       mov	bx,ax
18547 46E1           8A46         FD            mov	al,-3[bp]
18548 46E4           30E4                       xor	ah,ah
18549 46E6           89D9                       mov	cx,bx
18550 46E8           F7E9                       imul	cx
18551                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18552                                           ! Debug: expression subtree swapping
18553 46EA           0346         FE            add	ax,-2[bp]
18554                                           ! Debug: list unsigned int = ax+0 (used reg = )
18555 46ED           50                         push	ax
18556                                           ! Debug: list unsigned int = const $A000 (used reg = )
18557 46EE           B8                   A000  mov	ax,#$A000
18558 46F1           50                         push	ax
18559                                           ! Debug: func () void = memsetb+0 (used reg = )
18560 46F2           E8         353C            call	_memsetb
18561 46F5           83C4                   08  add	sp,*8
18562                                           !BCC_EOS
18563                                           ! 2059   }
18564                                           ! 2060  outw(0x3ce, 0x0005);
18565                       000046F8            .AC:
18566                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18567 46F8           8A46         FD            mov	al,-3[bp]
18568 46FB           40                         inc	ax
18569 46FC           8846         FD            mov	-3[bp],al
18570                       000046FF            .AD:
18571                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18572 46FF           8A46         FD            mov	al,-3[bp]
18573 4702           3A46         0C            cmp	al,$C[bp]
18574 4705           72           C7            jb 	.AE
18575                       00004707            .AF:
18576                       00004707            .AB:
18577                                           ! Debug: list int = const 5 (used reg = )
18578 4707           B8                   0005  mov	ax,*5
18579 470A           50                         push	ax
18580                                           ! Debug: list int = const $3CE (used reg = )
18581 470B           B8                   03CE  mov	ax,#$3CE
18582 470E           50                         push	ax
18583                                           ! Debug: func () void = outw+0 (used reg = )
18584 470F           E8         3645            call	_outw
18585 4712           83C4                   04  add	sp,*4
18586                                           !BCC_EOS
18587                                           ! 2061 }
18588 4715           89EC                       mov	sp,bp
18589 4717           5D                         pop	bp
18590 4718           C3                         ret
18591                                           ! 2062 static void vgamem_copy_cga(xstart,ysrc,ydest,cols,nbcols,cheight)
18592                                           ! Register BX used in function vgamem_fill_pl4
18593                                           ! 2063 Bit8u xstart;Bit8u ysrc;Bit8u ydest;Bit8u cols;Bit8u nbcols;Bit8u cheight;
18594                       00004719            _vgamem_copy_cga:
18595                                           !BCC_EOS
18596                                           !BCC_EOS
18597                                           !BCC_EOS
18598                                           !BCC_EOS
18599                                           !BCC_EOS
18600                                           !BCC_EOS
18601                                           ! 2064 {
18602                                           ! 2065  Bit16u src,dest;
18603                                           !BCC_EOS
18604                                           ! 2066  Bit8u i;
18605                                           !BCC_EOS
18606                                           ! 2067  src=((ysrc*cheight*nbcols)>>1)+xstart;
18607 4719           55                         push	bp
18608 471A           89E5                       mov	bp,sp
18609 471C           83C4                   FA  add	sp,*-6
18610                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ysrc = [S+8+4] (used reg = )
18611 471F           8A46         0E            mov	al,$E[bp]
18612 4722           30E4                       xor	ah,ah
18613 4724           89C3                       mov	bx,ax
18614 4726           8A46         06            mov	al,6[bp]
18615 4729           30E4                       xor	ah,ah
18616 472B           89D9                       mov	cx,bx
18617 472D           F7E9                       imul	cx
18618                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18619 472F           89C3                       mov	bx,ax
18620 4731           8A46         0C            mov	al,$C[bp]
18621 4734           30E4                       xor	ah,ah
18622 4736           93                         xchg	ax,bx
18623 4737           89D9                       mov	cx,bx
18624 4739           F7E9                       imul	cx
18625                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18626 473B           D1E8                       shr	ax,*1
18627                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18628 473D           0246         04            add	al,4[bp]
18629 4740           80D4                   00  adc	ah,*0
18630                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+8-4] (used reg = )
18631 4743           8946         FE            mov	-2[bp],ax
18632                                           !BCC_EOS
18633                                           ! 2068  dest=((ydest*cheight*nbcols)>>1)+xstart;
18634                                           ! Debug: mul unsigned char cheight = [S+8+$C] to unsigned char ydest = [S+8+6] (used reg = )
18635 4746           8A46         0E            mov	al,$E[bp]
18636 4749           30E4                       xor	ah,ah
18637 474B           89C3                       mov	bx,ax
18638 474D           8A46         08            mov	al,8[bp]
18639 4750           30E4                       xor	ah,ah
18640 4752           89D9                       mov	cx,bx
18641 4754           F7E9                       imul	cx
18642                                           ! Debug: mul unsigned char nbcols = [S+8+$A] to unsigned int = ax+0 (used reg = )
18643 4756           89C3                       mov	bx,ax
18644 4758           8A46         0C            mov	al,$C[bp]
18645 475B           30E4                       xor	ah,ah
18646 475D           93                         xchg	ax,bx
18647 475E           89D9                       mov	cx,bx
18648 4760           F7E9                       imul	cx
18649                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18650 4762           D1E8                       shr	ax,*1
18651                                           ! Debug: add unsigned char xstart = [S+8+2] to unsigned int = ax+0 (used reg = )
18652 4764           0246         04            add	al,4[bp]
18653 4767           80D4                   00  adc	ah,*0
18654                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+8-6] (used reg = )
18655 476A           8946         FC            mov	-4[bp],ax
18656                                           !BCC_EOS
18657                                           ! 2069  for(i=0;i<cheight;i++)
18658                                           ! Debug: eq int = const 0 to unsigned char i = [S+8-7] (used reg = )
18659 476D           30C0                       xor	al,al
18660 476F           8846         FB            mov	-5[bp],al
18661                                           !BCC_EOS
18662                                           !BCC_EOS
18663                                           ! 2070   {
18664 4772           E9         00A8            br 	.B2
18665                       00004775            .B3:
18666                                           ! 2071    if (i & 1)
18667                                           ! Debug: and int = const 1 to unsigned char i = [S+8-7] (used reg = )
18668 4775           8A46         FB            mov	al,-5[bp]
18669 4778           24                     01  and	al,*1
18670 477A           84C0                       test	al,al
18671 477C           74           56            je  	.B4
18672                       0000477E            .B5:
18673                                           ! 2072      memcpyb(0xb800,0x2000+dest+(i>>1)*nbcols,0xb800,0x2000+src+(i>>1)*nbcols,cols);
18674                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18675 477E           8A46         0A            mov	al,$A[bp]
18676 4781           30E4                       xor	ah,ah
18677 4783           50                         push	ax
18678                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18679 4784           8A46         FB            mov	al,-5[bp]
18680 4787           30E4                       xor	ah,ah
18681 4789           D1E8                       shr	ax,*1
18682                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18683 478B           89C3                       mov	bx,ax
18684 478D           8A46         0C            mov	al,$C[bp]
18685 4790           30E4                       xor	ah,ah
18686 4792           93                         xchg	ax,bx
18687 4793           89D9                       mov	cx,bx
18688 4795           F7E9                       imul	cx
18689 4797           50                         push	ax
18690                                           ! Debug: add unsigned short src = [S+$C-4] to int = const $2000 (used reg = )
18691                                           ! Debug: expression subtree swapping
18692 4798           8B46         FE            mov	ax,-2[bp]
18693                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18694 479B           05                   2000  add	ax,#$2000
18695 479E           0346         F6            add	ax,-$A[bp]
18696 47A1           44                         inc	sp
18697 47A2           44                         inc	sp
18698                                           ! Debug: list unsigned int = ax+0 (used reg = )
18699 47A3           50                         push	ax
18700                                           ! Debug: list unsigned int = const $B800 (used reg = )
18701 47A4           B8                   B800  mov	ax,#$B800
18702 47A7           50                         push	ax
18703                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18704 47A8           8A46         FB            mov	al,-5[bp]
18705 47AB           30E4                       xor	ah,ah
18706 47AD           D1E8                       shr	ax,*1
18707                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18708 47AF           89C3                       mov	bx,ax
18709 47B1           8A46         0C            mov	al,$C[bp]
18710 47B4           30E4                       xor	ah,ah
18711 47B6           93                         xchg	ax,bx
18712 47B7           89D9                       mov	cx,bx
18713 47B9           F7E9                       imul	cx
18714 47BB           50                         push	ax
18715                                           ! Debug: add unsigned short dest = [S+$10-6] to int = const $2000 (used reg = )
18716                                           ! Debug: expression subtree swapping
18717 47BC           8B46         FC            mov	ax,-4[bp]
18718                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+$2000 (used reg = )
18719 47BF           05                   2000  add	ax,#$2000
18720 47C2           0346         F2            add	ax,-$E[bp]
18721 47C5           44                         inc	sp
18722 47C6           44                         inc	sp
18723                                           ! Debug: list unsigned int = ax+0 (used reg = )
18724 47C7           50                         push	ax
18725                                           ! Debug: list unsigned int = const $B800 (used reg = )
18726 47C8           B8                   B800  mov	ax,#$B800
18727 47CB           50                         push	ax
18728                                           ! Debug: func () void = memcpyb+0 (used reg = )
18729 47CC           E8         34AC            call	_memcpyb
18730 47CF           83C4                   0A  add	sp,*$A
18731                                           !BCC_EOS
18732                                           ! 2073    else
18733                                           ! 2074      memcpyb(0xb800,dest+(i>>1)*nbcols,0xb800,src+(i>>1)*nbcols,cols);
18734 47D2           EB           42            jmp .B6
18735                       000047D4            .B4:
18736                                           ! Debug: list unsigned char cols = [S+8+8] (used reg = )
18737 47D4           8A46         0A            mov	al,$A[bp]
18738 47D7           30E4                       xor	ah,ah
18739 47D9           50                         push	ax
18740                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-7] (used reg = )
18741 47DA           8A46         FB            mov	al,-5[bp]
18742 47DD           30E4                       xor	ah,ah
18743 47DF           D1E8                       shr	ax,*1
18744                                           ! Debug: mul unsigned char nbcols = [S+$A+$A] to unsigned int = ax+0 (used reg = )
18745 47E1           89C3                       mov	bx,ax
18746 47E3           8A46         0C            mov	al,$C[bp]
18747 47E6           30E4                       xor	ah,ah
18748 47E8           93                         xchg	ax,bx
18749 47E9           89D9                       mov	cx,bx
18750 47EB           F7E9                       imul	cx
18751                                           ! Debug: add unsigned int = ax+0 to unsigned short src = [S+$A-4] (used reg = )
18752                                           ! Debug: expression subtree swapping
18753 47ED           0346         FE            add	ax,-2[bp]
18754                                           ! Debug: list unsigned int = ax+0 (used reg = )
18755 47F0           50                         push	ax
18756                                           ! Debug: list unsigned int = const $B800 (used reg = )
18757 47F1           B8                   B800  mov	ax,#$B800
18758 47F4           50                         push	ax
18759                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-7] (used reg = )
18760 47F5           8A46         FB            mov	al,-5[bp]
18761 47F8           30E4                       xor	ah,ah
18762 47FA           D1E8                       shr	ax,*1
18763                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
18764 47FC           89C3                       mov	bx,ax
18765 47FE           8A46         0C            mov	al,$C[bp]
18766 4801           30E4                       xor	ah,ah
18767 4803           93                         xchg	ax,bx
18768 4804           89D9                       mov	cx,bx
18769 4806           F7E9                       imul	cx
18770                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$E-6] (used reg = )
18771                                           ! Debug: expression subtree swapping
18772 4808           0346         FC            add	ax,-4[bp]
18773                                           ! Debug: list unsigned int = ax+0 (used reg = )
18774 480B           50                         push	ax
18775                                           ! Debug: list unsigned int = const $B800 (used reg = )
18776 480C           B8                   B800  mov	ax,#$B800
18777 480F           50                         push	ax
18778                                           ! Debug: func () void = memcpyb+0 (used reg = )
18779 4810           E8         3468            call	_memcpyb
18780 4813           83C4                   0A  add	sp,*$A
18781                                           !BCC_EOS
18782                                           ! 2075   }
18783                       00004816            .B6:
18784                                           ! 2076 }
18785                       00004816            .B1:
18786                                           ! Debug: postinc unsigned char i = [S+8-7] (used reg = )
18787 4816           8A46         FB            mov	al,-5[bp]
18788 4819           40                         inc	ax
18789 481A           8846         FB            mov	-5[bp],al
18790                       0000481D            .B2:
18791                                           ! Debug: lt unsigned char cheight = [S+8+$C] to unsigned char i = [S+8-7] (used reg = )
18792 481D           8A46         FB            mov	al,-5[bp]
18793 4820           3A46         0E            cmp	al,$E[bp]
18794 4823   7303    E9         FF4D            blo 	.B3
18795                       00004828            .B7:
18796                       00004828            .B0:
18797 4828           89EC                       mov	sp,bp
18798 482A           5D                         pop	bp
18799 482B           C3                         ret
18800                                           ! 2077 static void vgamem_fill_cga(xstart,ystart,cols,nbcols,cheight,attr)
18801                                           ! Register BX used in function vgamem_copy_cga
18802                                           ! 2078 Bit8u xstart;Bit8u ystart;Bit8u cols;Bit8u nbcols;Bit8u cheight;Bit8u attr;
18803                       0000482C            _vgamem_fill_cga:
18804                                           !BCC_EOS
18805                                           !BCC_EOS
18806                                           !BCC_EOS
18807                                           !BCC_EOS
18808                                           !BCC_EOS
18809                                           !BCC_EOS
18810                                           ! 2079 {
18811                                           ! 2080  Bit16u dest;
18812                                           !BCC_EOS
18813                                           ! 2081  Bit8u i;
18814                                           !BCC_EOS
18815                                           ! 2082  dest=((ystart*cheight*nbcols)>>1)+xstart;
18816 482C           55                         push	bp
18817 482D           89E5                       mov	bp,sp
18818 482F           83C4                   FC  add	sp,*-4
18819                                           ! Debug: mul unsigned char cheight = [S+6+$A] to unsigned char ystart = [S+6+4] (used reg = )
18820 4832           8A46         0C            mov	al,$C[bp]
18821 4835           30E4                       xor	ah,ah
18822 4837           89C3                       mov	bx,ax
18823 4839           8A46         06            mov	al,6[bp]
18824 483C           30E4                       xor	ah,ah
18825 483E           89D9                       mov	cx,bx
18826 4840           F7E9                       imul	cx
18827                                           ! Debug: mul unsigned char nbcols = [S+6+8] to unsigned int = ax+0 (used reg = )
18828 4842           89C3                       mov	bx,ax
18829 4844           8A46         0A            mov	al,$A[bp]
18830 4847           30E4                       xor	ah,ah
18831 4849           93                         xchg	ax,bx
18832 484A           89D9                       mov	cx,bx
18833 484C           F7E9                       imul	cx
18834                                           ! Debug: sr int = const 1 to unsigned int = ax+0 (used reg = )
18835 484E           D1E8                       shr	ax,*1
18836                                           ! Debug: add unsigned char xstart = [S+6+2] to unsigned int = ax+0 (used reg = )
18837 4850           0246         04            add	al,4[bp]
18838 4853           80D4                   00  adc	ah,*0
18839                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+6-4] (used reg = )
18840 4856           8946         FE            mov	-2[bp],ax
18841                                           !BCC_EOS
18842                                           ! 2083  for(i=0;i<cheight;i++)
18843                                           ! Debug: eq int = const 0 to unsigned char i = [S+6-5] (used reg = )
18844 4859           30C0                       xor	al,al
18845 485B           8846         FD            mov	-3[bp],al
18846                                           !BCC_EOS
18847                                           !BCC_EOS
18848                                           ! 2084   {
18849 485E           EB           75            jmp .BA
18850                       00004860            .BB:
18851                                           ! 2085    if (i & 1)
18852                                           ! Debug: and int = const 1 to unsigned char i = [S+6-5] (used reg = )
18853 4860           8A46         FD            mov	al,-3[bp]
18854 4863           24                     01  and	al,*1
18855 4865           84C0                       test	al,al
18856 4867           74           38            je  	.BC
18857                       00004869            .BD:
18858                                           ! 2086      memsetb(0xb800,0x2000+dest+(i>>1)*nbcols,attr,cols);
18859                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18860 4869           8A46         08            mov	al,8[bp]
18861 486C           30E4                       xor	ah,ah
18862 486E           50                         push	ax
18863                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18864 486F           8A46         0E            mov	al,$E[bp]
18865 4872           30E4                       xor	ah,ah
18866 4874           50                         push	ax
18867                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18868 4875           8A46         FD            mov	al,-3[bp]
18869 4878           30E4                       xor	ah,ah
18870 487A           D1E8                       shr	ax,*1
18871                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18872 487C           89C3                       mov	bx,ax
18873 487E           8A46         0A            mov	al,$A[bp]
18874 4881           30E4                       xor	ah,ah
18875 4883           93                         xchg	ax,bx
18876 4884           89D9                       mov	cx,bx
18877 4886           F7E9                       imul	cx
18878 4888           50                         push	ax
18879                                           ! Debug: add unsigned short dest = [S+$C-4] to int = const $2000 (used reg = )
18880                                           ! Debug: expression subtree swapping
18881 4889           8B46         FE            mov	ax,-2[bp]
18882                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+$2000 (used reg = )
18883 488C           05                   2000  add	ax,#$2000
18884 488F           0346         F6            add	ax,-$A[bp]
18885 4892           44                         inc	sp
18886 4893           44                         inc	sp
18887                                           ! Debug: list unsigned int = ax+0 (used reg = )
18888 4894           50                         push	ax
18889                                           ! Debug: list unsigned int = const $B800 (used reg = )
18890 4895           B8                   B800  mov	ax,#$B800
18891 4898           50                         push	ax
18892                                           ! Debug: func () void = memsetb+0 (used reg = )
18893 4899           E8         3395            call	_memsetb
18894 489C           83C4                   08  add	sp,*8
18895                                           !BCC_EOS
18896                                           ! 2087    else
18897                                           ! 2088      memsetb(0xb800,dest+(i>>1)*nbcols,attr,cols);
18898 489F           EB           2D            jmp .BE
18899                       000048A1            .BC:
18900                                           ! Debug: list unsigned char cols = [S+6+6] (used reg = )
18901 48A1           8A46         08            mov	al,8[bp]
18902 48A4           30E4                       xor	ah,ah
18903 48A6           50                         push	ax
18904                                           ! Debug: list unsigned char attr = [S+8+$C] (used reg = )
18905 48A7           8A46         0E            mov	al,$E[bp]
18906 48AA           30E4                       xor	ah,ah
18907 48AC           50                         push	ax
18908                                           ! Debug: sr int = const 1 to unsigned char i = [S+$A-5] (used reg = )
18909 48AD           8A46         FD            mov	al,-3[bp]
18910 48B0           30E4                       xor	ah,ah
18911 48B2           D1E8                       shr	ax,*1
18912                                           ! Debug: mul unsigned char nbcols = [S+$A+8] to unsigned int = ax+0 (used reg = )
18913 48B4           89C3                       mov	bx,ax
18914 48B6           8A46         0A            mov	al,$A[bp]
18915 48B9           30E4                       xor	ah,ah
18916 48BB           93                         xchg	ax,bx
18917 48BC           89D9                       mov	cx,bx
18918 48BE           F7E9                       imul	cx
18919                                           ! Debug: add unsigned int = ax+0 to unsigned short dest = [S+$A-4] (used reg = )
18920                                           ! Debug: expression subtree swapping
18921 48C0           0346         FE            add	ax,-2[bp]
18922                                           ! Debug: list unsigned int = ax+0 (used reg = )
18923 48C3           50                         push	ax
18924                                           ! Debug: list unsigned int = const $B800 (used reg = )
18925 48C4           B8                   B800  mov	ax,#$B800
18926 48C7           50                         push	ax
18927                                           ! Debug: func () void = memsetb+0 (used reg = )
18928 48C8           E8         3366            call	_memsetb
18929 48CB           83C4                   08  add	sp,*8
18930                                           !BCC_EOS
18931                                           ! 2089   }
18932                       000048CE            .BE:
18933                                           ! 2090 }
18934                       000048CE            .B9:
18935                                           ! Debug: postinc unsigned char i = [S+6-5] (used reg = )
18936 48CE           8A46         FD            mov	al,-3[bp]
18937 48D1           40                         inc	ax
18938 48D2           8846         FD            mov	-3[bp],al
18939                       000048D5            .BA:
18940                                           ! Debug: lt unsigned char cheight = [S+6+$A] to unsigned char i = [S+6-5] (used reg = )
18941 48D5           8A46         FD            mov	al,-3[bp]
18942 48D8           3A46         0C            cmp	al,$C[bp]
18943 48DB           72           83            jb 	.BB
18944                       000048DD            .BF:
18945                       000048DD            .B8:
18946 48DD           89EC                       mov	sp,bp
18947 48DF           5D                         pop	bp
18948 48E0           C3                         ret
18949                                           ! 2091 static void biosfn_scroll (nblines,attr,rul,cul,rlr,clr,page,dir)
18950                                           ! Register BX used in function vgamem_fill_cga
18951                                           ! 2092 Bit8u nblines;Bit8u attr;Bit8u rul;Bit8u cul;Bit8u rlr;Bit8u clr;Bit8u page;Bit8u dir;
18952                       000048E1            _biosfn_scroll:
18953                                           !BCC_EOS
18954                                           !BCC_EOS
18955                                           !BCC_EOS
18956                                           !BCC_EOS
18957                                           !BCC_EOS
18958                                           !BCC_EOS
18959                                           !BCC_EOS
18960                                           !BCC_EOS
18961                                           ! 2093 {
18962                                           ! 2094  Bit8u mode,line,cheight,bpp,cols;
18963                                           !BCC_EOS
18964                                           ! 2095  Bit16u nbcols,nbrows,i;
18965                                           !BCC_EOS
18966                                           ! 2096  Bit16u address;
18967                                           !BCC_EOS
18968                                           ! 2097  if(rul>rlr)return;
18969 48E1           55                         push	bp
18970 48E2           89E5                       mov	bp,sp
18971 48E4           83C4                   F2  add	sp,*-$E
18972                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned char rul = [S+$10+6] (used reg = )
18973 48E7           8A46         08            mov	al,8[bp]
18974 48EA           3A46         0C            cmp	al,$C[bp]
18975 48ED           76           04            jbe 	.C0
18976                       000048EF            .C1:
18977 48EF           89EC                       mov	sp,bp
18978 48F1           5D                         pop	bp
18979 48F2           C3                         ret
18980                                           !BCC_EOS
18981                                           ! 2098  if(cul>clr)return;
18982                       000048F3            .C0:
18983                                           ! Debug: gt unsigned char clr = [S+$10+$C] to unsigned char cul = [S+$10+8] (used reg = )
18984 48F3           8A46         0A            mov	al,$A[bp]
18985 48F6           3A46         0E            cmp	al,$E[bp]
18986 48F9           76           04            jbe 	.C2
18987                       000048FB            .C3:
18988 48FB           89EC                       mov	sp,bp
18989 48FD           5D                         pop	bp
18990 48FE           C3                         ret
18991                                           !BCC_EOS
18992                                           ! 2099  mode=read_byte(0x40,0x49);
18993                       000048FF            .C2:
18994                                           ! Debug: list int = const $49 (used reg = )
18995 48FF           B8                   0049  mov	ax,*$49
18996 4902           50                         push	ax
18997                                           ! Debug: list int = const $40 (used reg = )
18998 4903           B8                   0040  mov	ax,*$40
18999 4906           50                         push	ax
19000                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19001 4907           E8         33D1            call	_read_byte
19002 490A           83C4                   04  add	sp,*4
19003                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$10-3] (used reg = )
19004 490D           8846         FF            mov	-1[bp],al
19005                                           !BCC_EOS
19006                                           ! 2100  line=find_vga_entry(mode);
19007                                           ! Debug: list unsigned char mode = [S+$10-3] (used reg = )
19008 4910           8A46         FF            mov	al,-1[bp]
19009 4913           30E4                       xor	ah,ah
19010 4915           50                         push	ax
19011                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
19012 4916           E8         32D6            call	_find_vga_entry
19013 4919           44                         inc	sp
19014 491A           44                         inc	sp
19015                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$10-4] (used reg = )
19016 491B           8846         FE            mov	-2[bp],al
19017                                           !BCC_EOS
19018                                           ! 2101  if(line==0xFF)return;
19019                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$10-4] (used reg = )
19020 491E           8A46         FE            mov	al,-2[bp]
19021 4921           3C                     FF  cmp	al,#$FF
19022 4923           75           04            jne 	.C4
19023                       00004925            .C5:
19024 4925           89EC                       mov	sp,bp
19025 4927           5D                         pop	bp
19026 4928           C3                         ret
19027                                           !BCC_EOS
19028                                           ! 2102  nbrows=read_byte(0x40,0x84)+1;
19029                       00004929            .C4:
19030                                           ! Debug: list int = const $84 (used reg = )
19031 4929           B8                   0084  mov	ax,#$84
19032 492C           50                         push	ax
19033                                           ! Debug: list int = const $40 (used reg = )
19034 492D           B8                   0040  mov	ax,*$40
19035 4930           50                         push	ax
19036                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19037 4931           E8         33A7            call	_read_byte
19038 4934           83C4                   04  add	sp,*4
19039                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
19040 4937           30E4                       xor	ah,ah
19041                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19042 4939           40                         inc	ax
19043 493A           8946         F6            mov	-$A[bp],ax
19044                                           !BCC_EOS
19045                                           ! 2103  nbcols=read_word(0x40,0x4A);
19046                                           ! Debug: list int = const $4A (used reg = )
19047 493D           B8                   004A  mov	ax,*$4A
19048 4940           50                         push	ax
19049                                           ! Debug: list int = const $40 (used reg = )
19050 4941           B8                   0040  mov	ax,*$40
19051 4944           50                         push	ax
19052                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
19053 4945           E8         33A6            call	_read_word
19054 4948           83C4                   04  add	sp,*4
19055                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$10-$A] (used reg = )
19056 494B           8946         F8            mov	-8[bp],ax
19057                                           !BCC_EOS
19058                                           ! 2104  if(page==0xFF)
19059                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$10+$E] (used reg = )
19060 494E           8A46         10            mov	al,$10[bp]
19061 4951           3C                     FF  cmp	al,#$FF
19062 4953           75           11            jne 	.C6
19063                       00004955            .C7:
19064                                           ! 2105   page=read_byte(0x40,0x62);
19065                                           ! Debug: list int = const $62 (used reg = )
19066 4955           B8                   0062  mov	ax,*$62
19067 4958           50                         push	ax
19068                                           ! Debug: list int = const $40 (used reg = )
19069 4959           B8                   0040  mov	ax,*$40
19070 495C           50                         push	ax
19071                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
19072 495D           E8         337B            call	_read_byte
19073 4960           83C4                   04  add	sp,*4
19074                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$10+$E] (used reg = )
19075 4963           8846         10            mov	$10[bp],al
19076                                           !BCC_EOS
19077                                           ! 2106  if(rlr>=nbrows)rlr=nbrows-1;
19078                       00004966            .C6:
19079                                           ! Debug: ge unsigned short nbrows = [S+$10-$C] to unsigned char rlr = [S+$10+$A] (used reg = )
19080 4966           8A46         0C            mov	al,$C[bp]
19081 4969           30E4                       xor	ah,ah
19082 496B           3B46         F6            cmp	ax,-$A[bp]
19083 496E           72           07            jb  	.C8
19084                       00004970            .C9:
19085                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19086 4970           8B46         F6            mov	ax,-$A[bp]
19087                                           ! Debug: eq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19088 4973           48                         dec	ax
19089 4974           8846         0C            mov	$C[bp],al
19090                                           !BCC_EOS
19091                                           ! 2107  if(clr>=nbcols)clr=nbcols-1;
19092                       00004977            .C8:
19093                                           ! Debug: ge unsigned short nbcols = [S+$10-$A] to unsigned char clr = [S+$10+$C] (used reg = )
19094 4977           8A46         0E            mov	al,$E[bp]
19095 497A           30E4                       xor	ah,ah
19096 497C           3B46         F8            cmp	ax,-8[bp]
19097 497F           72           07            jb  	.CA
19098                       00004981            .CB:
19099                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19100 4981           8B46         F8            mov	ax,-8[bp]
19101                                           ! Debug: eq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19102 4984           48                         dec	ax
19103 4985           8846         0E            mov	$E[bp],al
19104                                           !BCC_EOS
19105                                           ! 2108  if(nblines>nbrows)nblines=0;
19106                       00004988            .CA:
19107                                           ! Debug: gt unsigned short nbrows = [S+$10-$C] to unsigned char nblines = [S+$10+2] (used reg = )
19108 4988           8A46         04            mov	al,4[bp]
19109 498B           30E4                       xor	ah,ah
19110 498D           3B46         F6            cmp	ax,-$A[bp]
19111 4990           76           05            jbe 	.CC
19112                       00004992            .CD:
19113                                           ! Debug: eq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19114 4992           30C0                       xor	al,al
19115 4994           8846         04            mov	4[bp],al
19116                                           !BCC_EOS
19117                                           ! 2109  cols=clr-cul+1;
19118                       00004997            .CC:
19119                                           ! Debug: sub unsigned char cul = [S+$10+8] to unsigned char clr = [S+$10+$C] (used reg = )
19120 4997           8A46         0E            mov	al,$E[bp]
19121 499A           30E4                       xor	ah,ah
19122 499C           2A46         0A            sub	al,$A[bp]
19123 499F           80DC                   00  sbb	ah,*0
19124                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19125                                           ! Debug: eq unsigned int = ax+1 to unsigned char cols = [S+$10-7] (used reg = )
19126 49A2           40                         inc	ax
19127 49A3           8846         FB            mov	-5[bp],al
19128                                           !BCC_EOS
19129                                           ! 2110  if(vga_modes[line].class==0x00)
19130                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19131 49A6           8A46         FE            mov	al,-2[bp]
19132 49A9           30E4                       xor	ah,ah
19133 49AB           B1                     03  mov	cl,*3
19134 49AD           D3E0                       shl	ax,cl
19135 49AF           89C3                       mov	bx,ax
19136 49B1           81C3                 01E2  add	bx,#_vga_modes
19137                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
19138 49B5           8A47         01            mov	al,1[bx]
19139 49B8           84C0                       test	al,al
19140 49BA   7403    E9         026C            bne 	.CE
19141                       000049BF            .CF:
19142                                           ! 2111   {
19143                                           ! 2112    address=((((nbcols*nbrows*2)|0x00ff)+1)*page);
19144                                           ! Debug: mul unsigned short nbrows = [S+$10-$C] to unsigned short nbcols = [S+$10-$A] (used reg = )
19145 49BF           8B46         F8            mov	ax,-8[bp]
19146 49C2           8B4E         F6            mov	cx,-$A[bp]
19147 49C5           F7E9                       imul	cx
19148                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19149 49C7           D1E0                       shl	ax,*1
19150                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
19151 49C9           0C                     FF  or	al,#$FF
19152                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
19153                                           ! Debug: mul unsigned char page = [S+$10+$E] to unsigned int = ax+1 (used reg = )
19154 49CB           89C3                       mov	bx,ax
19155 49CD           8A46         10            mov	al,$10[bp]
19156 49D0           30E4                       xor	ah,ah
19157 49D2           93                         xchg	ax,bx
19158 49D3           40                         inc	ax
19159 49D4           89D9                       mov	cx,bx
19160 49D6           F7E9                       imul	cx
19161                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$10-$10] (used reg = )
19162 49D8           8946         F2            mov	-$E[bp],ax
19163                                           !BCC_EOS
19164                                           ! 2113    printf("Scroll, address %04x (%04x %04x %02x)\n",address,nbrows,nbcols,page);
19165                                           ! Debug: list unsigned char page = [S+$10+$E] (used reg = )
19166 49DB           8A46         10            mov	al,$10[bp]
19167 49DE           30E4                       xor	ah,ah
19168 49E0           50                         push	ax
19169                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19170 49E1           FF76         F8            push	-8[bp]
19171                                           ! Debug: list unsigned short nbrows = [S+$14-$C] (used reg = )
19172 49E4           FF76         F6            push	-$A[bp]
19173                                           ! Debug: list unsigned short address = [S+$16-$10] (used reg = )
19174 49E7           FF76         F2            push	-$E[bp]
19175                                           ! Debug: list * char = .D0+0 (used reg = )
19176 49EA           BB                   7F3E  mov	bx,#.D0
19177 49ED           53                         push	bx
19178                                           ! Debug: func () void = printf+0 (used reg = )
19179 49EE           E8         3395            call	_printf
19180 49F1           83C4                   0A  add	sp,*$A
19181                                           !BCC_EOS
19182                                           ! 2114    if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19183                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19184 49F4           8A46         04            mov	al,4[bp]
19185 49F7           84C0                       test	al,al
19186 49F9           75           67            jne 	.D1
19187                       000049FB            .D6:
19188                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19189 49FB           8A46         08            mov	al,8[bp]
19190 49FE           84C0                       test	al,al
19191 4A00           75           60            jne 	.D1
19192                       00004A02            .D5:
19193                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19194 4A02           8A46         0A            mov	al,$A[bp]
19195 4A05           84C0                       test	al,al
19196 4A07           75           59            jne 	.D1
19197                       00004A09            .D4:
19198                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19199 4A09           8B46         F6            mov	ax,-$A[bp]
19200                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19201                                           ! Debug: expression subtree swapping
19202 4A0C           48                         dec	ax
19203 4A0D           50                         push	ax
19204 4A0E           8A46         0C            mov	al,$C[bp]
19205 4A11           30E4                       xor	ah,ah
19206 4A13           3B46         F0            cmp	ax,-$10[bp]
19207 4A16           8D66         F2            lea	sp,-$E[bp]
19208 4A19           75           47            jne 	.D1
19209                       00004A1B            .D3:
19210                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19211 4A1B           8B46         F8            mov	ax,-8[bp]
19212                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19213                                           ! Debug: expression subtree swapping
19214 4A1E           48                         dec	ax
19215 4A1F           50                         push	ax
19216 4A20           8A46         0E            mov	al,$E[bp]
19217 4A23           30E4                       xor	ah,ah
19218 4A25           3B46         F0            cmp	ax,-$10[bp]
19219 4A28           8D66         F2            lea	sp,-$E[bp]
19220 4A2B           75           35            jne 	.D1
19221                       00004A2D            .D2:
19222                                           ! 2115     {
19223                                           ! 2116      memsetw(vga_modes[line].sstart,address,(Bit16u)attr*0x100+' ',nbrows*nbcols);
19224                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19225 4A2D           8B46         F6            mov	ax,-$A[bp]
19226 4A30           8B4E         F8            mov	cx,-8[bp]
19227 4A33           F7E9                       imul	cx
19228                                           ! Debug: list unsigned int = ax+0 (used reg = )
19229 4A35           50                         push	ax
19230                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19231 4A36           8A46         06            mov	al,6[bp]
19232 4A39           30E4                       xor	ah,ah
19233                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19234 4A3B           B9                   0100  mov	cx,#$100
19235 4A3E           F7E9                       imul	cx
19236                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19237                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19238 4A40           05                   0020  add	ax,*$20
19239 4A43           50                         push	ax
19240                                           ! Debug: list unsigned short address = [S+$14-$10] (used reg = )
19241 4A44           FF76         F2            push	-$E[bp]
19242                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19243 4A47           8A46         FE            mov	al,-2[bp]
19244 4A4A           30E4                       xor	ah,ah
19245 4A4C           B1                     03  mov	cl,*3
19246 4A4E           D3E0                       shl	ax,cl
19247 4A50           89C3                       mov	bx,ax
19248 4A52           81C3                 01E2  add	bx,#_vga_modes
19249                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19250 4A56           FF77         04            push	4[bx]
19251                                           ! Debug: func () void = memsetw+0 (used reg = )
19252 4A59           E8         31FA            call	_memsetw
19253 4A5C           83C4                   08  add	sp,*8
19254                                           !BCC_EOS
19255                                           ! 2117     }
19256                                           ! 2118    else
19257                                           ! 2119     {
19258 4A5F           E9         01C6            br 	.D7
19259                       00004A62            .D1:
19260                                           ! 2120      if(dir==1)
19261                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19262 4A62           8A46         12            mov	al,$12[bp]
19263 4A65           3C                     01  cmp	al,*1
19264 4A67   7403    E9         00DD            bne 	.D8
19265                       00004A6C            .D9:
19266                                           ! 2121       {for(i=rul;i<=rlr;i++)
19267                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19268 4A6C           8A46         08            mov	al,8[bp]
19269 4A6F           30E4                       xor	ah,ah
19270 4A71           8946         F4            mov	-$C[bp],ax
19271                                           !BCC_EOS
19272                                           !BCC_EOS
19273                                           ! 2122         {
19274 4A74           E9         00C2            br 	.DC
19275                       00004A77            .DD:
19276                                           ! 2123    
19277                                           ! 2123       if((i+nblines>rlr)||(nblines==0))
19278                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19279 4A77           8B46         F4            mov	ax,-$C[bp]
19280 4A7A           0246         04            add	al,4[bp]
19281 4A7D           80D4                   00  adc	ah,*0
19282                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19283 4A80           50                         push	ax
19284 4A81           8A46         0C            mov	al,$C[bp]
19285 4A84           30E4                       xor	ah,ah
19286 4A86           3B46         F0            cmp	ax,-$10[bp]
19287 4A89           8D66         F2            lea	sp,-$E[bp]
19288 4A8C           72           07            jb  	.DF
19289                       00004A8E            .E0:
19290                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19291 4A8E           8A46         04            mov	al,4[bp]
19292 4A91           84C0                       test	al,al
19293 4A93           75           42            jne 	.DE
19294                       00004A95            .DF:
19295                                           ! 2124           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19296                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19297 4A95           8A46         FB            mov	al,-5[bp]
19298 4A98           30E4                       xor	ah,ah
19299 4A9A           50                         push	ax
19300                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19301 4A9B           8A46         06            mov	al,6[bp]
19302 4A9E           30E4                       xor	ah,ah
19303                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19304 4AA0           B9                   0100  mov	cx,#$100
19305 4AA3           F7E9                       imul	cx
19306                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19307                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19308 4AA5           05                   0020  add	ax,*$20
19309 4AA8           50                         push	ax
19310                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19311 4AA9           8B46         F4            mov	ax,-$C[bp]
19312 4AAC           8B4E         F8            mov	cx,-8[bp]
19313 4AAF           F7E9                       imul	cx
19314                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19315 4AB1           0246         0A            add	al,$A[bp]
19316 4AB4           80D4                   00  adc	ah,*0
19317                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19318 4AB7           D1E0                       shl	ax,*1
19319                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19320                                           ! Debug: expression subtree swapping
19321 4AB9           0346         F2            add	ax,-$E[bp]
19322                                           ! Debug: list unsigned int = ax+0 (used reg = )
19323 4ABC           50                         push	ax
19324                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19325 4ABD           8A46         FE            mov	al,-2[bp]
19326 4AC0           30E4                       xor	ah,ah
19327 4AC2           B1                     03  mov	cl,*3
19328 4AC4           D3E0                       shl	ax,cl
19329 4AC6           89C3                       mov	bx,ax
19330 4AC8           81C3                 01E2  add	bx,#_vga_modes
19331                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19332 4ACC           FF77         04            push	4[bx]
19333                                           ! Debug: func () void = memsetw+0 (used reg = )
19334 4ACF           E8         3184            call	_memsetw
19335 4AD2           83C4                   08  add	sp,*8
19336                                           !BCC_EOS
19337                                           ! 2125          else
19338                                           ! 2126           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i+nblines)*nbcols+cul)*2,cols);
19339 4AD5           EB           5B            jmp .E1
19340                       00004AD7            .DE:
19341                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19342 4AD7           8A46         FB            mov	al,-5[bp]
19343 4ADA           30E4                       xor	ah,ah
19344 4ADC           50                         push	ax
19345                                           ! Debug: add unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19346 4ADD           8B46         F4            mov	ax,-$C[bp]
19347 4AE0           0246         04            add	al,4[bp]
19348 4AE3           80D4                   00  adc	ah,*0
19349                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19350 4AE6           8B4E         F8            mov	cx,-8[bp]
19351 4AE9           F7E9                       imul	cx
19352                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19353 4AEB           0246         0A            add	al,$A[bp]
19354 4AEE           80D4                   00  adc	ah,*0
19355                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19356 4AF1           D1E0                       shl	ax,*1
19357                                           ! Debug: list unsigned int = ax+0 (used reg = )
19358 4AF3           50                         push	ax
19359                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19360 4AF4           8A46         FE            mov	al,-2[bp]
19361 4AF7           30E4                       xor	ah,ah
19362 4AF9           B1                     03  mov	cl,*3
19363 4AFB           D3E0                       shl	ax,cl
19364 4AFD           89C3                       mov	bx,ax
19365 4AFF           81C3                 01E2  add	bx,#_vga_modes
19366                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19367 4B03           FF77         04            push	4[bx]
19368                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19369 4B06           8B46         F4            mov	ax,-$C[bp]
19370 4B09           8B4E         F8            mov	cx,-8[bp]
19371 4B0C           F7E9                       imul	cx
19372                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19373 4B0E           0246         0A            add	al,$A[bp]
19374 4B11           80D4                   00  adc	ah,*0
19375                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19376 4B14           D1E0                       shl	ax,*1
19377                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19378                                           ! Debug: expression subtree swapping
19379 4B16           0346         F2            add	ax,-$E[bp]
19380                                           ! Debug: list unsigned int = ax+0 (used reg = )
19381 4B19           50                         push	ax
19382                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19383 4B1A           8A46         FE            mov	al,-2[bp]
19384 4B1D           30E4                       xor	ah,ah
19385 4B1F           B1                     03  mov	cl,*3
19386 4B21           D3E0                       shl	ax,cl
19387 4B23           89C3                       mov	bx,ax
19388 4B25           81C3                 01E2  add	bx,#_vga_modes
19389                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19390 4B29           FF77         04            push	4[bx]
19391                                           ! Debug: func () void = memcpyw+0 (used reg = )
19392 4B2C           E8         317C            call	_memcpyw
19393 4B2F           83C4                   0A  add	sp,*$A
19394                                           !BCC_EOS
19395                                           ! 2127         }
19396                       00004B32            .E1:
19397                                           ! 2128       }
19398                       00004B32            .DB:
19399                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19400 4B32           8B46         F4            mov	ax,-$C[bp]
19401 4B35           40                         inc	ax
19402 4B36           8946         F4            mov	-$C[bp],ax
19403                       00004B39            .DC:
19404                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19405 4B39           8A46         0C            mov	al,$C[bp]
19406 4B3C           30E4                       xor	ah,ah
19407 4B3E           3B46         F4            cmp	ax,-$C[bp]
19408 4B41   7203    E9         FF31            bhis	.DD
19409                       00004B46            .E2:
19410                       00004B46            .DA:
19411                                           ! 2129      else
19412                                           ! 2130       {for(i=rlr;i>=rul;i--)
19413 4B46           E9         00DF            br 	.E3
19414                       00004B49            .D8:
19415                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19416 4B49           8A46         0C            mov	al,$C[bp]
19417 4B4C           30E4                       xor	ah,ah
19418 4B4E           8946         F4            mov	-$C[bp],ax
19419                                           !BCC_EOS
19420                                           !BCC_EOS
19421                                           ! 2131         {
19422 4B51           E9         00C7            br 	.E6
19423                       00004B54            .E7:
19424                                           ! 2132          if((i<rul+nblines)||(nblines==0))
19425                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19426 4B54           8A46         08            mov	al,8[bp]
19427 4B57           30E4                       xor	ah,ah
19428 4B59           0246         04            add	al,4[bp]
19429 4B5C           80D4                   00  adc	ah,*0
19430                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19431 4B5F           3B46         F4            cmp	ax,-$C[bp]
19432 4B62           77           07            ja  	.E9
19433                       00004B64            .EA:
19434                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19435 4B64           8A46         04            mov	al,4[bp]
19436 4B67           84C0                       test	al,al
19437 4B69           75           42            jne 	.E8
19438                       00004B6B            .E9:
19439                                           ! 2133           memsetw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,(Bit16u)attr*0x100+' ',cols);
19440                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19441 4B6B           8A46         FB            mov	al,-5[bp]
19442 4B6E           30E4                       xor	ah,ah
19443 4B70           50                         push	ax
19444                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+4] (used reg = )
19445 4B71           8A46         06            mov	al,6[bp]
19446 4B74           30E4                       xor	ah,ah
19447                                           ! Debug: mul int = const $100 to unsigned short = ax+0 (used reg = )
19448 4B76           B9                   0100  mov	cx,#$100
19449 4B79           F7E9                       imul	cx
19450                                           ! Debug: add int = const $20 to unsigned int = ax+0 (used reg = )
19451                                           ! Debug: list unsigned int = ax+$20 (used reg = )
19452 4B7B           05                   0020  add	ax,*$20
19453 4B7E           50                         push	ax
19454                                           ! Debug: mul unsigned short nbcols = [S+$14-$A] to unsigned short i = [S+$14-$E] (used reg = )
19455 4B7F           8B46         F4            mov	ax,-$C[bp]
19456 4B82           8B4E         F8            mov	cx,-8[bp]
19457 4B85           F7E9                       imul	cx
19458                                           ! Debug: add unsigned char cul = [S+$14+8] to unsigned int = ax+0 (used reg = )
19459 4B87           0246         0A            add	al,$A[bp]
19460 4B8A           80D4                   00  adc	ah,*0
19461                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19462 4B8D           D1E0                       shl	ax,*1
19463                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$14-$10] (used reg = )
19464                                           ! Debug: expression subtree swapping
19465 4B8F           0346         F2            add	ax,-$E[bp]
19466                                           ! Debug: list unsigned int = ax+0 (used reg = )
19467 4B92           50                         push	ax
19468                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19469 4B93           8A46         FE            mov	al,-2[bp]
19470 4B96           30E4                       xor	ah,ah
19471 4B98           B1                     03  mov	cl,*3
19472 4B9A           D3E0                       shl	ax,cl
19473 4B9C           89C3                       mov	bx,ax
19474 4B9E           81C3                 01E2  add	bx,#_vga_modes
19475                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19476 4BA2           FF77         04            push	4[bx]
19477                                           ! Debug: func () void = memsetw+0 (used reg = )
19478 4BA5           E8         30AE            call	_memsetw
19479 4BA8           83C4                   08  add	sp,*8
19480                                           !BCC_EOS
19481                                           ! 2134          else
19482                                           ! 2135           memcpyw(vga_modes[line].sstart,address+(i*nbcols+cul)*2,vga_modes[line].sstart,((i-nblines)*nbcols+cul)*2,cols);
19483 4BAB           EB           5B            jmp .EB
19484                       00004BAD            .E8:
19485                                           ! Debug: list unsigned char cols = [S+$10-7] (used reg = )
19486 4BAD           8A46         FB            mov	al,-5[bp]
19487 4BB0           30E4                       xor	ah,ah
19488 4BB2           50                         push	ax
19489                                           ! Debug: sub unsigned char nblines = [S+$12+2] to unsigned short i = [S+$12-$E] (used reg = )
19490 4BB3           8B46         F4            mov	ax,-$C[bp]
19491 4BB6           2A46         04            sub	al,4[bp]
19492 4BB9           80DC                   00  sbb	ah,*0
19493                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax+0 (used reg = )
19494 4BBC           8B4E         F8            mov	cx,-8[bp]
19495 4BBF           F7E9                       imul	cx
19496                                           ! Debug: add unsigned char cul = [S+$12+8] to unsigned int = ax+0 (used reg = )
19497 4BC1           0246         0A            add	al,$A[bp]
19498 4BC4           80D4                   00  adc	ah,*0
19499                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19500 4BC7           D1E0                       shl	ax,*1
19501                                           ! Debug: list unsigned int = ax+0 (used reg = )
19502 4BC9           50                         push	ax
19503                                           ! Debug: ptradd unsigned char line = [S+$14-4] to [$10] struct  = vga_modes+0 (used reg = )
19504 4BCA           8A46         FE            mov	al,-2[bp]
19505 4BCD           30E4                       xor	ah,ah
19506 4BCF           B1                     03  mov	cl,*3
19507 4BD1           D3E0                       shl	ax,cl
19508 4BD3           89C3                       mov	bx,ax
19509 4BD5           81C3                 01E2  add	bx,#_vga_modes
19510                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19511 4BD9           FF77         04            push	4[bx]
19512                                           ! Debug: mul unsigned short nbcols = [S+$16-$A] to unsigned short i = [S+$16-$E] (used reg = )
19513 4BDC           8B46         F4            mov	ax,-$C[bp]
19514 4BDF           8B4E         F8            mov	cx,-8[bp]
19515 4BE2           F7E9                       imul	cx
19516                                           ! Debug: add unsigned char cul = [S+$16+8] to unsigned int = ax+0 (used reg = )
19517 4BE4           0246         0A            add	al,$A[bp]
19518 4BE7           80D4                   00  adc	ah,*0
19519                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
19520 4BEA           D1E0                       shl	ax,*1
19521                                           ! Debug: add unsigned int = ax+0 to unsigned short address = [S+$16-$10] (used reg = )
19522                                           ! Debug: expression subtree swapping
19523 4BEC           0346         F2            add	ax,-$E[bp]
19524                                           ! Debug: list unsigned int = ax+0 (used reg = )
19525 4BEF           50                         push	ax
19526                                           ! Debug: ptradd unsigned char line = [S+$18-4] to [$10] struct  = vga_modes+0 (used reg = )
19527 4BF0           8A46         FE            mov	al,-2[bp]
19528 4BF3           30E4                       xor	ah,ah
19529 4BF5           B1                     03  mov	cl,*3
19530 4BF7           D3E0                       shl	ax,cl
19531 4BF9           89C3                       mov	bx,ax
19532 4BFB           81C3                 01E2  add	bx,#_vga_modes
19533                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19534 4BFF           FF77         04            push	4[bx]
19535                                           ! Debug: func () void = memcpyw+0 (used reg = )
19536 4C02           E8         30A6            call	_memcpyw
19537 4C05           83C4                   0A  add	sp,*$A
19538                                           !BCC_EOS
19539                                           ! 2136          if (i>rlr) break;
19540                       00004C08            .EB:
19541                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19542 4C08           8A46         0C            mov	al,$C[bp]
19543 4C0B           30E4                       xor	ah,ah
19544 4C0D           3B46         F4            cmp	ax,-$C[bp]
19545 4C10           73           02            jae 	.EC
19546                       00004C12            .ED:
19547 4C12           EB           14            jmp .E4
19548                                           !BCC_EOS
19549                                           ! 2137         }
19550                       00004C14            .EC:
19551                                           ! 2138       }
19552                       00004C14            .E5:
19553                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19554 4C14           8B46         F4            mov	ax,-$C[bp]
19555 4C17           48                         dec	ax
19556 4C18           8946         F4            mov	-$C[bp],ax
19557                       00004C1B            .E6:
19558                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19559 4C1B           8A46         08            mov	al,8[bp]
19560 4C1E           30E4                       xor	ah,ah
19561 4C20           3B46         F4            cmp	ax,-$C[bp]
19562 4C23   7703    E9         FF2C            blos	.E7
19563                       00004C28            .EE:
19564                       00004C28            .E4:
19565                                           ! 2139     }
19566                       00004C28            .E3:
19567                                           ! 2140   }
19568                       00004C28            .D7:
19569                                           ! 2141  else
19570                                           ! 2142   {
19571 4C28           E9         03ED            br 	.EF
19572                       00004C2B            .CE:
19573                                           ! 2143    cheight=video_param_table[line_to_vpti[line]].cheight;
19574                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] unsigned char = line_to_vpti+0 (used reg = )
19575 4C2B           8A46         FE            mov	al,-2[bp]
19576 4C2E           30E4                       xor	ah,ah
19577 4C30           89C3                       mov	bx,ax
19578                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
19579 4C32           8A87       0262            mov	al,_line_to_vpti[bx]
19580 4C36           30E4                       xor	ah,ah
19581 4C38           B1                     06  mov	cl,*6
19582 4C3A           D3E0                       shl	ax,cl
19583 4C3C           89C3                       mov	bx,ax
19584 4C3E           81C3                 0276  add	bx,#_video_param_table
19585                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$10-5] (used reg = )
19586 4C42           8A47         02            mov	al,2[bx]
19587 4C45           8846         FD            mov	-3[bp],al
19588                                           !BCC_EOS
19589                                           ! 2144    switch(vga_modes[line].memmodel)
19590                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19591 4C48           8A46         FE            mov	al,-2[bp]
19592 4C4B           30E4                       xor	ah,ah
19593 4C4D           B1                     03  mov	cl,*3
19594 4C4F           D3E0                       shl	ax,cl
19595 4C51           89C3                       mov	bx,ax
19596 4C53           81C3                 01E2  add	bx,#_vga_modes
19597 4C57           8A47         02            mov	al,2[bx]
19598                                           ! 2145     {
19599 4C5A           E9         03A4            br 	.F2
19600                                           ! 2146      case 0x04:
19601                                           ! 2147      case 0x03:
19602                       00004C5D            .F3:
19603                                           ! 2148        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19604                       00004C5D            .F4:
19605                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19606 4C5D           8A46         04            mov	al,4[bp]
19607 4C60           84C0                       test	al,al
19608 4C62   7403    E9         008A            bne 	.F5
19609                       00004C67            .FA:
19610                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19611 4C67           8A46         08            mov	al,8[bp]
19612 4C6A           84C0                       test	al,al
19613 4C6C   7403    E9         0080            bne 	.F5
19614                       00004C71            .F9:
19615                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19616 4C71           8A46         0A            mov	al,$A[bp]
19617 4C74           84C0                       test	al,al
19618 4C76           75           79            jne 	.F5
19619                       00004C78            .F8:
19620                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19621 4C78           8B46         F6            mov	ax,-$A[bp]
19622                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19623                                           ! Debug: expression subtree swapping
19624 4C7B           48                         dec	ax
19625 4C7C           50                         push	ax
19626 4C7D           8A46         0C            mov	al,$C[bp]
19627 4C80           30E4                       xor	ah,ah
19628 4C82           3B46         F0            cmp	ax,0+..FFFC[bp]
19629 4C85           8D66         F2            lea	sp,2+..FFFC[bp]
19630 4C88           75           67            jne 	.F5
19631                       00004C8A            .F7:
19632                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19633 4C8A           8B46         F8            mov	ax,-8[bp]
19634                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19635                                           ! Debug: expression subtree swapping
19636 4C8D           48                         dec	ax
19637 4C8E           50                         push	ax
19638 4C8F           8A46         0E            mov	al,$E[bp]
19639 4C92           30E4                       xor	ah,ah
19640 4C94           3B46         F0            cmp	ax,0+..FFFC[bp]
19641 4C97           8D66         F2            lea	sp,2+..FFFC[bp]
19642 4C9A           75           55            jne 	.F5
19643                       00004C9C            .F6:
19644                                           ! 2149         {
19645                                           ! 2150          outw(0x3ce, 0x0205);
19646                                           ! Debug: list int = const $205 (used reg = )
19647 4C9C           B8                   0205  mov	ax,#$205
19648 4C9F           50                         push	ax
19649                                           ! Debug: list int = const $3CE (used reg = )
19650 4CA0           B8                   03CE  mov	ax,#$3CE
19651 4CA3           50                         push	ax
19652                                           ! Debug: func () void = outw+0 (used reg = )
19653 4CA4           E8         30B0            call	_outw
19654 4CA7           83C4                   04  add	sp,*4
19655                                           !BCC_EOS
19656                                           ! 2151          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight);
19657                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19658 4CAA           8B46         F6            mov	ax,-$A[bp]
19659 4CAD           8B4E         F8            mov	cx,-8[bp]
19660 4CB0           F7E9                       imul	cx
19661                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19662 4CB2           89C3                       mov	bx,ax
19663 4CB4           8A46         FD            mov	al,-3[bp]
19664 4CB7           30E4                       xor	ah,ah
19665 4CB9           93                         xchg	ax,bx
19666 4CBA           89D9                       mov	cx,bx
19667 4CBC           F7E9                       imul	cx
19668                                           ! Debug: list unsigned int = ax+0 (used reg = )
19669 4CBE           50                         push	ax
19670                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
19671 4CBF           8A46         06            mov	al,6[bp]
19672 4CC2           30E4                       xor	ah,ah
19673 4CC4           50                         push	ax
19674                                           ! Debug: list int = const 0 (used reg = )
19675 4CC5           31C0                       xor	ax,ax
19676 4CC7           50                         push	ax
19677                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
19678 4CC8           8A46         FE            mov	al,-2[bp]
19679 4CCB           30E4                       xor	ah,ah
19680 4CCD           B1                     03  mov	cl,*3
19681 4CCF           D3E0                       shl	ax,cl
19682 4CD1           89C3                       mov	bx,ax
19683 4CD3           81C3                 01E2  add	bx,#_vga_modes
19684                                           ! Debug: list unsigned short = [bx+4] (used reg = )
19685 4CD7           FF77         04            push	4[bx]
19686                                           ! Debug: func () void = memsetb+0 (used reg = )
19687 4CDA           E8         2F54            call	_memsetb
19688 4CDD           83C4                   08  add	sp,*8
19689                                           !BCC_EOS
19690                                           ! 2152          outw(0x3ce, 0x0005);
19691                                           ! Debug: list int = const 5 (used reg = )
19692 4CE0           B8                   0005  mov	ax,*5
19693 4CE3           50                         push	ax
19694                                           ! Debug: list int = const $3CE (used reg = )
19695 4CE4           B8                   03CE  mov	ax,#$3CE
19696 4CE7           50                         push	ax
19697                                           ! Debug: func () void = outw+0 (used reg = )
19698 4CE8           E8         306C            call	_outw
19699 4CEB           83C4                   04  add	sp,*4
19700                                           !BCC_EOS
19701                                           ! 2153         }
19702                                           ! 2154        else
19703                                           ! 2155         {
19704 4CEE           E9         0124            br 	.FB
19705                       00004CF1            .F5:
19706                                           ! 2156          if(dir==1)
19707                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
19708 4CF1           8A46         12            mov	al,$12[bp]
19709 4CF4           3C                     01  cmp	al,*1
19710 4CF6   7403    E9         008A            bne 	.FC
19711                       00004CFB            .FD:
19712                                           ! 2157           {for(i=rul;i<=rlr;i++)
19713                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19714 4CFB           8A46         08            mov	al,8[bp]
19715 4CFE           30E4                       xor	ah,ah
19716 4D00           8946         F4            mov	-$C[bp],ax
19717                                           !BCC_EOS
19718                                           !BCC_EOS
19719                                           ! 2158             {
19720 4D03           EB           73            jmp .100
19721                       00004D05            .101:
19722                                           ! 2159              if((i+nblines>rlr)||(nblines==0))
19723                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
19724 4D05           8B46         F4            mov	ax,-$C[bp]
19725 4D08           0246         04            add	al,4[bp]
19726 4D0B           80D4                   00  adc	ah,*0
19727                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
19728 4D0E           50                         push	ax
19729 4D0F           8A46         0C            mov	al,$C[bp]
19730 4D12           30E4                       xor	ah,ah
19731 4D14           3B46         F0            cmp	ax,0+..FFFC[bp]
19732 4D17           8D66         F2            lea	sp,2+..FFFC[bp]
19733 4D1A           72           07            jb  	.103
19734                       00004D1C            .104:
19735                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19736 4D1C           8A46         04            mov	al,4[bp]
19737 4D1F           84C0                       test	al,al
19738 4D21           75           26            jne 	.102
19739                       00004D23            .103:
19740                                           ! 2160               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19741                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19742 4D23           8A46         06            mov	al,6[bp]
19743 4D26           30E4                       xor	ah,ah
19744 4D28           50                         push	ax
19745                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19746 4D29           8A46         FD            mov	al,-3[bp]
19747 4D2C           30E4                       xor	ah,ah
19748 4D2E           50                         push	ax
19749                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19750 4D2F           FF76         F8            push	-8[bp]
19751                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19752 4D32           8A46         FB            mov	al,-5[bp]
19753 4D35           30E4                       xor	ah,ah
19754 4D37           50                         push	ax
19755                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19756 4D38           FF76         F4            push	-$C[bp]
19757                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19758 4D3B           8A46         0A            mov	al,$A[bp]
19759 4D3E           30E4                       xor	ah,ah
19760 4D40           50                         push	ax
19761                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19762 4D41           E8         F94A            call	_vgamem_fill_pl4
19763 4D44           83C4                   0C  add	sp,*$C
19764                                           !BCC_EOS
19765                                           ! 2161              else
19766                                           ! 2162               vgamem_copy_pl4(cul,i+nblines,i,cols,nbcols,cheight);
19767 4D47           EB           28            jmp .105
19768                       00004D49            .102:
19769                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19770 4D49           8A46         FD            mov	al,-3[bp]
19771 4D4C           30E4                       xor	ah,ah
19772 4D4E           50                         push	ax
19773                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19774 4D4F           FF76         F8            push	-8[bp]
19775                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19776 4D52           8A46         FB            mov	al,-5[bp]
19777 4D55           30E4                       xor	ah,ah
19778 4D57           50                         push	ax
19779                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
19780 4D58           FF76         F4            push	-$C[bp]
19781                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
19782 4D5B           8B46         F4            mov	ax,-$C[bp]
19783 4D5E           0246         04            add	al,4[bp]
19784 4D61           80D4                   00  adc	ah,*0
19785                                           ! Debug: list unsigned int = ax+0 (used reg = )
19786 4D64           50                         push	ax
19787                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19788 4D65           8A46         0A            mov	al,$A[bp]
19789 4D68           30E4                       xor	ah,ah
19790 4D6A           50                         push	ax
19791                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19792 4D6B           E8         F85E            call	_vgamem_copy_pl4
19793 4D6E           83C4                   0C  add	sp,*$C
19794                                           !BCC_EOS
19795                                           ! 2163             }
19796                       00004D71            .105:
19797                                           ! 2164           }
19798                       00004D71            .FF:
19799                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
19800 4D71           8B46         F4            mov	ax,-$C[bp]
19801 4D74           40                         inc	ax
19802 4D75           8946         F4            mov	-$C[bp],ax
19803                       00004D78            .100:
19804                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19805 4D78           8A46         0C            mov	al,$C[bp]
19806 4D7B           30E4                       xor	ah,ah
19807 4D7D           3B46         F4            cmp	ax,-$C[bp]
19808 4D80           73           83            jae	.101
19809                       00004D82            .106:
19810                       00004D82            .FE:
19811                                           ! 2165          else
19812                                           ! 2166           {for(i=rlr;i>=rul;i--)
19813 4D82           E9         0090            br 	.107
19814                       00004D85            .FC:
19815                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19816 4D85           8A46         0C            mov	al,$C[bp]
19817 4D88           30E4                       xor	ah,ah
19818 4D8A           8946         F4            mov	-$C[bp],ax
19819                                           !BCC_EOS
19820                                           !BCC_EOS
19821                                           ! 2167             {
19822 4D8D           E9         0078            br 	.10A
19823                       00004D90            .10B:
19824                                           ! 2168              if((i<rul+nblines)||(nblines==0))
19825                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
19826 4D90           8A46         08            mov	al,8[bp]
19827 4D93           30E4                       xor	ah,ah
19828 4D95           0246         04            add	al,4[bp]
19829 4D98           80D4                   00  adc	ah,*0
19830                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
19831 4D9B           3B46         F4            cmp	ax,-$C[bp]
19832 4D9E           77           07            ja  	.10D
19833                       00004DA0            .10E:
19834                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19835 4DA0           8A46         04            mov	al,4[bp]
19836 4DA3           84C0                       test	al,al
19837 4DA5           75           26            jne 	.10C
19838                       00004DA7            .10D:
19839                                           ! 2169               vgamem_fill_pl4(cul,i,cols,nbcols,cheight,attr);
19840                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
19841 4DA7           8A46         06            mov	al,6[bp]
19842 4DAA           30E4                       xor	ah,ah
19843 4DAC           50                         push	ax
19844                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
19845 4DAD           8A46         FD            mov	al,-3[bp]
19846 4DB0           30E4                       xor	ah,ah
19847 4DB2           50                         push	ax
19848                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
19849 4DB3           FF76         F8            push	-8[bp]
19850                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
19851 4DB6           8A46         FB            mov	al,-5[bp]
19852 4DB9           30E4                       xor	ah,ah
19853 4DBB           50                         push	ax
19854                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19855 4DBC           FF76         F4            push	-$C[bp]
19856                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19857 4DBF           8A46         0A            mov	al,$A[bp]
19858 4DC2           30E4                       xor	ah,ah
19859 4DC4           50                         push	ax
19860                                           ! Debug: func () void = vgamem_fill_pl4+0 (used reg = )
19861 4DC5           E8         F8C6            call	_vgamem_fill_pl4
19862 4DC8           83C4                   0C  add	sp,*$C
19863                                           !BCC_EOS
19864                                           ! 2170              else
19865                                           ! 2171               vgamem_copy_pl4(cul,i,i-nblines,cols,nbcols,cheight);
19866 4DCB           EB           28            jmp .10F
19867                       00004DCD            .10C:
19868                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
19869 4DCD           8A46         FD            mov	al,-3[bp]
19870 4DD0           30E4                       xor	ah,ah
19871 4DD2           50                         push	ax
19872                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
19873 4DD3           FF76         F8            push	-8[bp]
19874                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
19875 4DD6           8A46         FB            mov	al,-5[bp]
19876 4DD9           30E4                       xor	ah,ah
19877 4DDB           50                         push	ax
19878                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
19879 4DDC           8B46         F4            mov	ax,-$C[bp]
19880 4DDF           2A46         04            sub	al,4[bp]
19881 4DE2           80DC                   00  sbb	ah,*0
19882                                           ! Debug: list unsigned int = ax+0 (used reg = )
19883 4DE5           50                         push	ax
19884                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
19885 4DE6           FF76         F4            push	-$C[bp]
19886                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
19887 4DE9           8A46         0A            mov	al,$A[bp]
19888 4DEC           30E4                       xor	ah,ah
19889 4DEE           50                         push	ax
19890                                           ! Debug: func () void = vgamem_copy_pl4+0 (used reg = )
19891 4DEF           E8         F7DA            call	_vgamem_copy_pl4
19892 4DF2           83C4                   0C  add	sp,*$C
19893                                           !BCC_EOS
19894                                           ! 2172              if (i>rlr) break;
19895                       00004DF5            .10F:
19896                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
19897 4DF5           8A46         0C            mov	al,$C[bp]
19898 4DF8           30E4                       xor	ah,ah
19899 4DFA           3B46         F4            cmp	ax,-$C[bp]
19900 4DFD           73           02            jae 	.110
19901                       00004DFF            .111:
19902 4DFF           EB           14            jmp .108
19903                                           !BCC_EOS
19904                                           ! 2173             }
19905                       00004E01            .110:
19906                                           ! 2174           }
19907                       00004E01            .109:
19908                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
19909 4E01           8B46         F4            mov	ax,-$C[bp]
19910 4E04           48                         dec	ax
19911 4E05           8946         F4            mov	-$C[bp],ax
19912                       00004E08            .10A:
19913                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
19914 4E08           8A46         08            mov	al,8[bp]
19915 4E0B           30E4                       xor	ah,ah
19916 4E0D           3B46         F4            cmp	ax,-$C[bp]
19917 4E10   7703    E9         FF7B            blos	.10B
19918                       00004E15            .112:
19919                       00004E15            .108:
19920                                           ! 2175         }
19921                       00004E15            .107:
19922                                           ! 2176        break;
19923                       00004E15            .FB:
19924 4E15           E9         0200            br 	.F0
19925                                           !BCC_EOS
19926                                           ! 2177      case 0x02:
19927                                           ! 2178        bpp=vga_modes[line].pixbits;
19928                       00004E18            .113:
19929                                           ! Debug: ptradd unsigned char line = [S+$10-4] to [$10] struct  = vga_modes+0 (used reg = )
19930 4E18           8A46         FE            mov	al,-2[bp]
19931 4E1B           30E4                       xor	ah,ah
19932 4E1D           B1                     03  mov	cl,*3
19933 4E1F           D3E0                       shl	ax,cl
19934 4E21           89C3                       mov	bx,ax
19935 4E23           81C3                 01E2  add	bx,#_vga_modes
19936                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$10-6] (used reg = )
19937 4E27           8A47         03            mov	al,3[bx]
19938 4E2A           8846         FC            mov	-4[bp],al
19939                                           !BCC_EOS
19940                                           ! 2179        if(nblines==0&&rul==0&&cul==0&&rlr==nbrows-1&&clr==nbcols-1)
19941                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
19942 4E2D           8A46         04            mov	al,4[bp]
19943 4E30           84C0                       test	al,al
19944 4E32           75           77            jne 	.114
19945                       00004E34            .119:
19946                                           ! Debug: logeq int = const 0 to unsigned char rul = [S+$10+6] (used reg = )
19947 4E34           8A46         08            mov	al,8[bp]
19948 4E37           84C0                       test	al,al
19949 4E39           75           70            jne 	.114
19950                       00004E3B            .118:
19951                                           ! Debug: logeq int = const 0 to unsigned char cul = [S+$10+8] (used reg = )
19952 4E3B           8A46         0A            mov	al,$A[bp]
19953 4E3E           84C0                       test	al,al
19954 4E40           75           69            jne 	.114
19955                       00004E42            .117:
19956                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$10-$C] (used reg = )
19957 4E42           8B46         F6            mov	ax,-$A[bp]
19958                                           ! Debug: logeq unsigned int = ax-1 to unsigned char rlr = [S+$10+$A] (used reg = )
19959                                           ! Debug: expression subtree swapping
19960 4E45           48                         dec	ax
19961 4E46           50                         push	ax
19962 4E47           8A46         0C            mov	al,$C[bp]
19963 4E4A           30E4                       xor	ah,ah
19964 4E4C           3B46         F0            cmp	ax,0+..FFFC[bp]
19965 4E4F           8D66         F2            lea	sp,2+..FFFC[bp]
19966 4E52           75           57            jne 	.114
19967                       00004E54            .116:
19968                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
19969 4E54           8B46         F8            mov	ax,-8[bp]
19970                                           ! Debug: logeq unsigned int = ax-1 to unsigned char clr = [S+$10+$C] (used reg = )
19971                                           ! Debug: expression subtree swapping
19972 4E57           48                         dec	ax
19973 4E58           50                         push	ax
19974 4E59           8A46         0E            mov	al,$E[bp]
19975 4E5C           30E4                       xor	ah,ah
19976 4E5E           3B46         F0            cmp	ax,0+..FFFC[bp]
19977 4E61           8D66         F2            lea	sp,2+..FFFC[bp]
19978 4E64           75           45            jne 	.114
19979                       00004E66            .115:
19980                                           ! 2180         {
19981                                           ! 2181          memsetb(vga_modes[line].sstart,0,attr,nbrows*nbcols*cheight*bpp);
19982                                           ! Debug: mul unsigned short nbcols = [S+$10-$A] to unsigned short nbrows = [S+$10-$C] (used reg = )
19983 4E66           8B46         F6            mov	ax,-$A[bp]
19984 4E69           8B4E         F8            mov	cx,-8[bp]
19985 4E6C           F7E9                       imul	cx
19986                                           ! Debug: mul unsigned char cheight = [S+$10-5] to unsigned int = ax+0 (used reg = )
19987 4E6E           89C3                       mov	bx,ax
19988 4E70           8A46         FD            mov	al,-3[bp]
19989 4E73           30E4                       xor	ah,ah
19990 4E75           93                         xchg	ax,bx
19991 4E76           89D9                       mov	cx,bx
19992 4E78           F7E9                       imul	cx
19993                                           ! Debug: mul unsigned char bpp = [S+$10-6] to unsigned int = ax+0 (used reg = )
19994 4E7A           89C3                       mov	bx,ax
19995 4E7C           8A46         FC            mov	al,-4[bp]
19996 4E7F           30E4                       xor	ah,ah
19997 4E81           93                         xchg	ax,bx
19998 4E82           89D9                       mov	cx,bx
19999 4E84           F7E9                       imul	cx
20000                                           ! Debug: list unsigned int = ax+0 (used reg = )
20001 4E86           50                         push	ax
20002                                           ! Debug: list unsigned char attr = [S+$12+4] (used reg = )
20003 4E87           8A46         06            mov	al,6[bp]
20004 4E8A           30E4                       xor	ah,ah
20005 4E8C           50                         push	ax
20006                                           ! Debug: list int = const 0 (used reg = )
20007 4E8D           31C0                       xor	ax,ax
20008 4E8F           50                         push	ax
20009                                           ! Debug: ptradd unsigned char line = [S+$16-4] to [$10] struct  = vga_modes+0 (used reg = )
20010 4E90           8A46         FE            mov	al,-2[bp]
20011 4E93           30E4                       xor	ah,ah
20012 4E95           B1                     03  mov	cl,*3
20013 4E97           D3E0                       shl	ax,cl
20014 4E99           89C3                       mov	bx,ax
20015 4E9B           81C3                 01E2  add	bx,#_vga_modes
20016                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20017 4E9F           FF77         04            push	4[bx]
20018                                           ! Debug: func () void = memsetb+0 (used reg = )
20019 4EA2           E8         2D8C            call	_memsetb
20020 4EA5           83C4                   08  add	sp,*8
20021                                           !BCC_EOS
20022                                           ! 2182         }
20023                                           ! 2183        else
20024                                           ! 2184         {
20025 4EA8           E9         0146            br 	.11A
20026                       00004EAB            .114:
20027                                           ! 2185          if(bpp==2)
20028                                           ! Debug: logeq int = const 2 to unsigned char bpp = [S+$10-6] (used reg = )
20029 4EAB           8A46         FC            mov	al,-4[bp]
20030 4EAE           3C                     02  cmp	al,*2
20031 4EB0           75           1C            jne 	.11B
20032                       00004EB2            .11C:
20033                                           ! 2186           {
20034                                           ! 2187            cul<<=1;
20035                                           ! Debug: slab int = const 1 to unsigned char cul = [S+$10+8] (used reg = )
20036 4EB2           8A46         0A            mov	al,$A[bp]
20037 4EB5           30E4                       xor	ah,ah
20038 4EB7           D1E0                       shl	ax,*1
20039 4EB9           8846         0A            mov	$A[bp],al
20040                                           !BCC_EOS
20041                                           ! 2188            cols<<=1;
20042                                           ! Debug: slab int = const 1 to unsigned char cols = [S+$10-7] (used reg = )
20043 4EBC           8A46         FB            mov	al,-5[bp]
20044 4EBF           30E4                       xor	ah,ah
20045 4EC1           D1E0                       shl	ax,*1
20046 4EC3           8846         FB            mov	-5[bp],al
20047                                           !BCC_EOS
20048                                           ! 2189            nbcols<<=1;
20049                                           ! Debug: slab int = const 1 to unsigned short nbcols = [S+$10-$A] (used reg = )
20050 4EC6           8B46         F8            mov	ax,-8[bp]
20051 4EC9           D1E0                       shl	ax,*1
20052 4ECB           8946         F8            mov	-8[bp],ax
20053                                           !BCC_EOS
20054                                           ! 2190           }
20055                                           ! 2191          if(dir==1)
20056                       00004ECE            .11B:
20057                                           ! Debug: logeq int = const 1 to unsigned char dir = [S+$10+$10] (used reg = )
20058 4ECE           8A46         12            mov	al,$12[bp]
20059 4ED1           3C                     01  cmp	al,*1
20060 4ED3   7403    E9         008A            bne 	.11D
20061                       00004ED8            .11E:
20062                                           ! 2192   
20063                                           ! 2192         {for(i=rul;i<=rlr;i++)
20064                                           ! Debug: eq unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20065 4ED8           8A46         08            mov	al,8[bp]
20066 4EDB           30E4                       xor	ah,ah
20067 4EDD           8946         F4            mov	-$C[bp],ax
20068                                           !BCC_EOS
20069                                           !BCC_EOS
20070                                           ! 2193             {
20071 4EE0           EB           73            jmp .121
20072                       00004EE2            .122:
20073                                           ! 2194              if((i+nblines>rlr)||(nblines==0))
20074                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned short i = [S+$10-$E] (used reg = )
20075 4EE2           8B46         F4            mov	ax,-$C[bp]
20076 4EE5           0246         04            add	al,4[bp]
20077 4EE8           80D4                   00  adc	ah,*0
20078                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned int = ax+0 (used reg = )
20079 4EEB           50                         push	ax
20080 4EEC           8A46         0C            mov	al,$C[bp]
20081 4EEF           30E4                       xor	ah,ah
20082 4EF1           3B46         F0            cmp	ax,0+..FFFC[bp]
20083 4EF4           8D66         F2            lea	sp,2+..FFFC[bp]
20084 4EF7           72           07            jb  	.124
20085                       00004EF9            .125:
20086                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20087 4EF9           8A46         04            mov	al,4[bp]
20088 4EFC           84C0                       test	al,al
20089 4EFE           75           26            jne 	.123
20090                       00004F00            .124:
20091                                           ! 2195               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20092                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20093 4F00           8A46         06            mov	al,6[bp]
20094 4F03           30E4                       xor	ah,ah
20095 4F05           50                         push	ax
20096                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20097 4F06           8A46         FD            mov	al,-3[bp]
20098 4F09           30E4                       xor	ah,ah
20099 4F0B           50                         push	ax
20100                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20101 4F0C           FF76         F8            push	-8[bp]
20102                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20103 4F0F           8A46         FB            mov	al,-5[bp]
20104 4F12           30E4                       xor	ah,ah
20105 4F14           50                         push	ax
20106                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20107 4F15           FF76         F4            push	-$C[bp]
20108                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20109 4F18           8A46         0A            mov	al,$A[bp]
20110 4F1B           30E4                       xor	ah,ah
20111 4F1D           50                         push	ax
20112                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20113 4F1E           E8         F90B            call	_vgamem_fill_cga
20114 4F21           83C4                   0C  add	sp,*$C
20115                                           !BCC_EOS
20116                                           ! 2196              else
20117                                           ! 2197               vgamem_copy_cga(cul,i+nblines,i,cols,nbcols,cheight);
20118 4F24           EB           28            jmp .126
20119                       00004F26            .123:
20120                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20121 4F26           8A46         FD            mov	al,-3[bp]
20122 4F29           30E4                       xor	ah,ah
20123 4F2B           50                         push	ax
20124                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20125 4F2C           FF76         F8            push	-8[bp]
20126                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20127 4F2F           8A46         FB            mov	al,-5[bp]
20128 4F32           30E4                       xor	ah,ah
20129 4F34           50                         push	ax
20130                                           ! Debug: list unsigned short i = [S+$16-$E] (used reg = )
20131 4F35           FF76         F4            push	-$C[bp]
20132                                           ! Debug: add unsigned char nblines = [S+$18+2] to unsigned short i = [S+$18-$E] (used reg = )
20133 4F38           8B46         F4            mov	ax,-$C[bp]
20134 4F3B           0246         04            add	al,4[bp]
20135 4F3E           80D4                   00  adc	ah,*0
20136                                           ! Debug: list unsigned int = ax+0 (used reg = )
20137 4F41           50                         push	ax
20138                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20139 4F42           8A46         0A            mov	al,$A[bp]
20140 4F45           30E4                       xor	ah,ah
20141 4F47           50                         push	ax
20142                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20143 4F48           E8         F7CE            call	_vgamem_copy_cga
20144 4F4B           83C4                   0C  add	sp,*$C
20145                                           !BCC_EOS
20146                                           ! 2198             }
20147                       00004F4E            .126:
20148                                           ! 2199           }
20149                       00004F4E            .120:
20150                                           ! Debug: postinc unsigned short i = [S+$10-$E] (used reg = )
20151 4F4E           8B46         F4            mov	ax,-$C[bp]
20152 4F51           40                         inc	ax
20153 4F52           8946         F4            mov	-$C[bp],ax
20154                       00004F55            .121:
20155                                           ! Debug: le unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20156 4F55           8A46         0C            mov	al,$C[bp]
20157 4F58           30E4                       xor	ah,ah
20158 4F5A           3B46         F4            cmp	ax,-$C[bp]
20159 4F5D           73           83            jae	.122
20160                       00004F5F            .127:
20161                       00004F5F            .11F:
20162                                           ! 2200          else
20163                                           ! 2201           {for(i=rlr;i>=rul;i--)
20164 4F5F           E9         008F            br 	.128
20165                       00004F62            .11D:
20166                                           ! Debug: eq unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20167 4F62           8A46         0C            mov	al,$C[bp]
20168 4F65           30E4                       xor	ah,ah
20169 4F67           8946         F4            mov	-$C[bp],ax
20170                                           !BCC_EOS
20171                                           !BCC_EOS
20172                                           ! 2202             {
20173 4F6A           EB           78            jmp .12B
20174                       00004F6C            .12C:
20175                                           ! 2203              if((i<rul+nblines)||(nblines==0))
20176                                           ! Debug: add unsigned char nblines = [S+$10+2] to unsigned char rul = [S+$10+6] (used reg = )
20177 4F6C           8A46         08            mov	al,8[bp]
20178 4F6F           30E4                       xor	ah,ah
20179 4F71           0246         04            add	al,4[bp]
20180 4F74           80D4                   00  adc	ah,*0
20181                                           ! Debug: lt unsigned int = ax+0 to unsigned short i = [S+$10-$E] (used reg = )
20182 4F77           3B46         F4            cmp	ax,-$C[bp]
20183 4F7A           77           07            ja  	.12E
20184                       00004F7C            .12F:
20185                                           ! Debug: logeq int = const 0 to unsigned char nblines = [S+$10+2] (used reg = )
20186 4F7C           8A46         04            mov	al,4[bp]
20187 4F7F           84C0                       test	al,al
20188 4F81           75           26            jne 	.12D
20189                       00004F83            .12E:
20190                                           ! 2204               vgamem_fill_cga(cul,i,cols,nbcols,cheight,attr);
20191                                           ! Debug: list unsigned char attr = [S+$10+4] (used reg = )
20192 4F83           8A46         06            mov	al,6[bp]
20193 4F86           30E4                       xor	ah,ah
20194 4F88           50                         push	ax
20195                                           ! Debug: list unsigned char cheight = [S+$12-5] (used reg = )
20196 4F89           8A46         FD            mov	al,-3[bp]
20197 4F8C           30E4                       xor	ah,ah
20198 4F8E           50                         push	ax
20199                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
20200 4F8F           FF76         F8            push	-8[bp]
20201                                           ! Debug: list unsigned char cols = [S+$16-7] (used reg = )
20202 4F92           8A46         FB            mov	al,-5[bp]
20203 4F95           30E4                       xor	ah,ah
20204 4F97           50                         push	ax
20205                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20206 4F98           FF76         F4            push	-$C[bp]
20207                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20208 4F9B           8A46         0A            mov	al,$A[bp]
20209 4F9E           30E4                       xor	ah,ah
20210 4FA0           50                         push	ax
20211                                           ! Debug: func () void = vgamem_fill_cga+0 (used reg = )
20212 4FA1           E8         F888            call	_vgamem_fill_cga
20213 4FA4           83C4                   0C  add	sp,*$C
20214                                           !BCC_EOS
20215                                           ! 2205              else
20216                                           ! 2206               vgamem_copy_cga(cul,i,i-nblines,cols,nbcols,cheight);
20217 4FA7           EB           28            jmp .130
20218                       00004FA9            .12D:
20219                                           ! Debug: list unsigned char cheight = [S+$10-5] (used reg = )
20220 4FA9           8A46         FD            mov	al,-3[bp]
20221 4FAC           30E4                       xor	ah,ah
20222 4FAE           50                         push	ax
20223                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
20224 4FAF           FF76         F8            push	-8[bp]
20225                                           ! Debug: list unsigned char cols = [S+$14-7] (used reg = )
20226 4FB2           8A46         FB            mov	al,-5[bp]
20227 4FB5           30E4                       xor	ah,ah
20228 4FB7           50                         push	ax
20229                                           ! Debug: sub unsigned char nblines = [S+$16+2] to unsigned short i = [S+$16-$E] (used reg = )
20230 4FB8           8B46         F4            mov	ax,-$C[bp]
20231 4FBB           2A46         04            sub	al,4[bp]
20232 4FBE           80DC                   00  sbb	ah,*0
20233                                           ! Debug: list unsigned int = ax+0 (used reg = )
20234 4FC1           50                         push	ax
20235                                           ! Debug: list unsigned short i = [S+$18-$E] (used reg = )
20236 4FC2           FF76         F4            push	-$C[bp]
20237                                           ! Debug: list unsigned char cul = [S+$1A+8] (used reg = )
20238 4FC5           8A46         0A            mov	al,$A[bp]
20239 4FC8           30E4                       xor	ah,ah
20240 4FCA           50                         push	ax
20241                                           ! Debug: func () void = vgamem_copy_cga+0 (used reg = )
20242 4FCB           E8         F74B            call	_vgamem_copy_cga
20243 4FCE           83C4                   0C  add	sp,*$C
20244                                           !BCC_EOS
20245                                           ! 2207              if (i>rlr) break;
20246                       00004FD1            .130:
20247                                           ! Debug: gt unsigned char rlr = [S+$10+$A] to unsigned short i = [S+$10-$E] (used reg = )
20248 4FD1           8A46         0C            mov	al,$C[bp]
20249 4FD4           30E4                       xor	ah,ah
20250 4FD6           3B46         F4            cmp	ax,-$C[bp]
20251 4FD9           73           02            jae 	.131
20252                       00004FDB            .132:
20253 4FDB           EB           14            jmp .129
20254                                           !BCC_EOS
20255                                           ! 2208             }
20256                       00004FDD            .131:
20257                                           ! 2209           }
20258                       00004FDD            .12A:
20259                                           ! Debug: postdec unsigned short i = [S+$10-$E] (used reg = )
20260 4FDD           8B46         F4            mov	ax,-$C[bp]
20261 4FE0           48                         dec	ax
20262 4FE1           8946         F4            mov	-$C[bp],ax
20263                       00004FE4            .12B:
20264                                           ! Debug: ge unsigned char rul = [S+$10+6] to unsigned short i = [S+$10-$E] (used reg = )
20265 4FE4           8A46         08            mov	al,8[bp]
20266 4FE7           30E4                       xor	ah,ah
20267 4FE9           3B46         F4            cmp	ax,-$C[bp]
20268 4FEC   7703    E9         FF7B            blos	.12C
20269                       00004FF1            .133:
20270                       00004FF1            .129:
20271                                           ! 2210         }
20272                       00004FF1            .128:
20273                                           ! 2211        break;
20274                       00004FF1            .11A:
20275 4FF1           EB           25            jmp .F0
20276                                           !BCC_EOS
20277                                           ! 2212      default:
20278                                           ! 2213        printf("Scroll in graphics mode ");
20279                       00004FF3            .134:
20280                                           ! Debug: list * char = .135+0 (used reg = )
20281 4FF3           BB                   7F25  mov	bx,#.135
20282 4FF6           53                         push	bx
20283                                           ! Debug: func () void = printf+0 (used reg = )
20284 4FF7           E8         2D8C            call	_printf
20285 4FFA           44                         inc	sp
20286 4FFB           44                         inc	sp
20287                                           !BCC_EOS
20288                                           ! 2214        unimplemented();
20289                                           ! Debug: func () void = unimplemented+0 (used reg = )
20290 4FFC           E8         2D6B            call	_unimplemented
20291                                           !BCC_EOS
20292                                           ! 2215     }
20293                                           ! 2216   }
20294 4FFF           EB           17            jmp .F0
20295                       00005001            .F2:
20296 5001           2C                     02  sub	al,*2
20297 5003   7503    E9         FE10            beq 	.113
20298 5008           2C                     01  sub	al,*1
20299 500A   7503    E9         FC4E            beq 	.F4
20300 500F           2C                     01  sub	al,*1
20301 5011   7503    E9         FC47            beq 	.F3
20302 5016           EB           DB            jmp	.134
20303                       00005018            .F0:
20304                       FFFFFFF0            ..FFFC	=	-$10
20305                                           ! 2217 }
20306                       00005018            .EF:
20307 5018           89EC                       mov	sp,bp
20308 501A           5D                         pop	bp
20309 501B           C3                         ret
20310                                           ! 2218 static void biosfn_read_char_attr (page,car)
20311                                           ! Register BX used in function biosfn_scroll
20312                                           ! 2219 Bit8u page;Bit16u *car;
20313                       0000501C            _biosfn_read_char_attr:
20314                                           !BCC_EOS
20315                                           !BCC_EOS
20316                                           ! 2220 {Bit16u ss=get_SS();
20317 501C           55                         push	bp
20318 501D           89E5                       mov	bp,sp
20319 501F           4C                         dec	sp
20320 5020           4C                         dec	sp
20321                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
20322 5021           E8         2D43            call	_get_SS
20323                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
20324 5024           8946         FE            mov	-2[bp],ax
20325                                           !BCC_EOS
20326                                           ! 2221  Bit8u xcurs,ycurs,mode,line;
20327                                           !BCC_EOS
20328                                           ! 2222  Bit16u nbcols,nbrows,address;
20329                                           !BCC_EOS
20330                                           ! 2223  Bit16u cursor,dummy;
20331                                           !BCC_EOS
20332                                           ! 2224  mode=read_byte(0x40,0x49);
20333 5027           83C4                   F2  add	sp,*-$E
20334                                           ! Debug: list int = const $49 (used reg = )
20335 502A           B8                   0049  mov	ax,*$49
20336 502D           50                         push	ax
20337                                           ! Debug: list int = const $40 (used reg = )
20338 502E           B8                   0040  mov	ax,*$40
20339 5031           50                         push	ax
20340                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20341 5032           E8         2CA6            call	_read_byte
20342 5035           83C4                   04  add	sp,*4
20343                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-7] (used reg = )
20344 5038           8846         FB            mov	-5[bp],al
20345                                           !BCC_EOS
20346                                           ! 2225  line=find_vga_entry(mode);
20347                                           ! Debug: list unsigned char mode = [S+$12-7] (used reg = )
20348 503B           8A46         FB            mov	al,-5[bp]
20349 503E           30E4                       xor	ah,ah
20350 5040           50                         push	ax
20351                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
20352 5041           E8         2BAB            call	_find_vga_entry
20353 5044           44                         inc	sp
20354 5045           44                         inc	sp
20355                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-8] (used reg = )
20356 5046           8846         FA            mov	-6[bp],al
20357                                           !BCC_EOS
20358                                           ! 2226  if(line==0xFF)return;
20359                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-8] (used reg = )
20360 5049           8A46         FA            mov	al,-6[bp]
20361 504C           3C                     FF  cmp	al,#$FF
20362 504E           75           04            jne 	.136
20363                       00005050            .137:
20364 5050           89EC                       mov	sp,bp
20365 5052           5D                         pop	bp
20366 5053           C3                         ret
20367                                           !BCC_EOS
20368                                           ! 2227  biosfn_get_cursor_pos(page,&dummy,&cursor);
20369                       00005054            .136:
20370                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
20371 5054           8D5E         F2            lea	bx,-$E[bp]
20372 5057           53                         push	bx
20373                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
20374 5058           8D5E         F0            lea	bx,-$10[bp]
20375 505B           53                         push	bx
20376                                           ! Debug: list unsigned char page = [S+$16+2] (used reg = )
20377 505C           8A46         04            mov	al,4[bp]
20378 505F           30E4                       xor	ah,ah
20379 5061           50                         push	ax
20380                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
20381 5062           E8         F370            call	_biosfn_get_cursor_pos
20382 5065           83C4                   06  add	sp,*6
20383                                           !BCC_EOS
20384                                           ! 2228  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
20385                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
20386 5068           8A46         F2            mov	al,-$E[bp]
20387                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20388 506B           8846         FD            mov	-3[bp],al
20389                                           !BCC_EOS
20390                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
20391 506E           8B46         F2            mov	ax,-$E[bp]
20392 5071           30C0                       xor	al,al
20393                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
20394 5073           88E0                       mov	al,ah
20395 5075           30E4                       xor	ah,ah
20396                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-6] (used reg = )
20397 5077           8846         FC            mov	-4[bp],al
20398                                           !BCC_EOS
20399                                           ! 2229  nbrows=read_byte(0x40,0x84)+1;
20400                                           ! Debug: list int = const $84 (used reg = )
20401 507A           B8                   0084  mov	ax,#$84
20402 507D           50                         push	ax
20403                                           ! Debug: list int = const $40 (used reg = )
20404 507E           B8                   0040  mov	ax,*$40
20405 5081           50                         push	ax
20406                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20407 5082           E8         2C56            call	_read_byte
20408 5085           83C4                   04  add	sp,*4
20409                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
20410 5088           30E4                       xor	ah,ah
20411                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
20412 508A           40                         inc	ax
20413 508B           8946         F6            mov	-$A[bp],ax
20414                                           !BCC_EOS
20415                                           ! 2230  nbcols=read_word(0x40,0x4A);
20416                                           ! Debug: list int = const $4A (used reg = )
20417 508E           B8                   004A  mov	ax,*$4A
20418 5091           50                         push	ax
20419                                           ! Debug: list int = const $40 (used reg = )
20420 5092           B8                   0040  mov	ax,*$40
20421 5095           50                         push	ax
20422                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20423 5096           E8         2C55            call	_read_word
20424 5099           83C4                   04  add	sp,*4
20425                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
20426 509C           8946         F8            mov	-8[bp],ax
20427                                           !BCC_EOS
20428                                           ! 2231  if(vga_modes[line].class==0x00)
20429                                           ! Debug: ptradd unsigned char line = [S+$12-8] to [$10] struct  = vga_modes+0 (used reg = )
20430 509F           8A46         FA            mov	al,-6[bp]
20431 50A2           30E4                       xor	ah,ah
20432 50A4           B1                     03  mov	cl,*3
20433 50A6           D3E0                       shl	ax,cl
20434 50A8           89C3                       mov	bx,ax
20435 50AA           81C3                 01E2  add	bx,#_vga_modes
20436                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
20437 50AE           8A47         01            mov	al,1[bx]
20438 50B1           84C0                       test	al,al
20439 50B3           75           5E            jne 	.138
20440                       000050B5            .139:
20441                                           ! 2232   {
20442                                           ! 2233    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
20443                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-6] (used reg = )
20444 50B5           8A46         FC            mov	al,-4[bp]
20445 50B8           30E4                       xor	ah,ah
20446 50BA           8B4E         F8            mov	cx,-8[bp]
20447 50BD           F7E9                       imul	cx
20448                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-5] (used reg = )
20449                                           ! Debug: expression subtree swapping
20450 50BF           0246         FD            add	al,-3[bp]
20451 50C2           80D4                   00  adc	ah,*0
20452                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20453 50C5           D1E0                       shl	ax,*1
20454 50C7           50                         push	ax
20455                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
20456 50C8           8B46         F8            mov	ax,-8[bp]
20457 50CB           8B4E         F6            mov	cx,-$A[bp]
20458 50CE           F7E9                       imul	cx
20459                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
20460 50D0           D1E0                       shl	ax,*1
20461                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
20462 50D2           0C                     FF  or	al,#$FF
20463                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
20464                                           ! Debug: mul unsigned char page = [S+$14+2] to unsigned int = ax+1 (used reg = )
20465 50D4           89C3                       mov	bx,ax
20466 50D6           8A46         04            mov	al,4[bp]
20467 50D9           30E4                       xor	ah,ah
20468 50DB           93                         xchg	ax,bx
20469 50DC           40                         inc	ax
20470 50DD           89D9                       mov	cx,bx
20471 50DF           F7E9                       imul	cx
20472                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
20473 50E1           0346         EE            add	ax,-$12[bp]
20474 50E4           44                         inc	sp
20475 50E5           44                         inc	sp
20476                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
20477 50E6           8946         F4            mov	-$C[bp],ax
20478                                           !BCC_EOS
20479                                           ! 2234    write_word(ss,car,read_word(vga_modes[line].sstart,address));
20480                                           ! Debug: list unsigned short address = [S+$12-$E] (used reg = )
20481 50E9           FF76         F4            push	-$C[bp]
20482                                           ! Debug: ptradd unsigned char line = [S+$14-8] to [$10] struct  = vga_modes+0 (used reg = )
20483 50EC           8A46         FA            mov	al,-6[bp]
20484 50EF           30E4                       xor	ah,ah
20485 50F1           B1                     03  mov	cl,*3
20486 50F3           D3E0                       shl	ax,cl
20487 50F5           89C3                       mov	bx,ax
20488 50F7           81C3                 01E2  add	bx,#_vga_modes
20489                                           ! Debug: list unsigned short = [bx+4] (used reg = )
20490 50FB           FF77         04            push	4[bx]
20491                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
20492 50FE           E8         2BED            call	_read_word
20493 5101           83C4                   04  add	sp,*4
20494                                           ! Debug: list unsigned short = ax+0 (used reg = )
20495 5104           50                         push	ax
20496                                           ! Debug: list * unsigned short car = [S+$14+4] (used reg = )
20497 5105           FF76         06            push	6[bp]
20498                                           ! Debug: list unsigned short ss = [S+$16-4] (used reg = )
20499 5108           FF76         FE            push	-2[bp]
20500                                           ! Debug: func () void = write_word+0 (used reg = )
20501 510B           E8         2C0B            call	_write_word
20502 510E           83C4                   06  add	sp,*6
20503                                           !BCC_EOS
20504                                           ! 2235   }
20505                                           ! 2236  else
20506                                           ! 2237   {
20507 5111           EB           03            jmp .13A
20508                       00005113            .138:
20509                                           ! 2238    unimplemented();
20510                                           ! Debug: func () void = unimplemented+0 (used reg = )
20511 5113           E8         2C54            call	_unimplemented
20512                                           !BCC_EOS
20513                                           ! 2239   }
20514                                           ! 2240 }
20515                       00005116            .13A:
20516 5116           89EC                       mov	sp,bp
20517 5118           5D                         pop	bp
20518 5119           C3                         ret
20519                                           ! 2241 static void write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight)
20520                                           ! Register BX used in function biosfn_read_char_attr
20521                                           ! 2242 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u cheight;
20522                       0000511A            _write_gfx_char_pl4:
20523                                           !BCC_EOS
20524                                           !BCC_EOS
20525                                           !BCC_EOS
20526                                           !BCC_EOS
20527                                           !BCC_EOS
20528                                           !BCC_EOS
20529                                           ! 2243 {
20530                                           ! 2244  Bit8u i,j,mask;
20531                                           !BCC_EOS
20532                                           ! 2245  Bit8u *fdata;
20533                                           !BCC_EOS
20534                                           ! 2246  Bit16u addr,dest,src;
20535                                           !BCC_EOS
20536                                           ! 2247  switch(cheight)
20537 511A           55                         push	bp
20538 511B           89E5                       mov	bp,sp
20539 511D           83C4                   F4  add	sp,*-$C
20540 5120           8A46         0E            mov	al,$E[bp]
20541                                           ! 2248   {case 14:
20542 5123           EB           18            jmp .13D
20543                                           ! 2249     fdata = &vgafont14;
20544                       00005125            .13E:
20545                                           ! Debug: eq * [$E00] unsigned char = vgafont14+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20546 5125           BB                   1746  mov	bx,#_vgafont14
20547 5128           895E         FA            mov	-6[bp],bx
20548                                           !BCC_EOS
20549                                           ! 2250     break;
20550 512B           EB           1A            jmp .13B
20551                                           !BCC_EOS
20552                                           ! 2251    case 16:
20553                                           ! 2252     fdata = &vgafont16;
20554                       0000512D            .13F:
20555                                           ! Debug: eq * [$1000] unsigned char = vgafont16+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20556 512D           BB                   2546  mov	bx,#_vgafont16
20557 5130           895E         FA            mov	-6[bp],bx
20558                                           !BCC_EOS
20559                                           ! 2253     break;
20560 5133           EB           12            jmp .13B
20561                                           !BCC_EOS
20562                                           ! 2254    default:
20563                                           ! 2255     fdata = &vgafont8;
20564                       00005135            .140:
20565                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20566 5135           BB                   0F46  mov	bx,#_vgafont8
20567 5138           895E         FA            mov	-6[bp],bx
20568                                           !BCC_EOS
20569                                           ! 2256   }
20570                                           ! 2257  addr=xcurs+ycurs*cheight*nbcols;
20571 513B           EB           0A            jmp .13B
20572                       0000513D            .13D:
20573 513D           2C                     0E  sub	al,*$E
20574 513F           74           E4            je 	.13E
20575 5141           2C                     02  sub	al,*2
20576 5143           74           E8            je 	.13F
20577 5145           EB           EE            jmp	.140
20578                       00005147            .13B:
20579                       FFFFFFF2            ..FFFB	=	-$E
20580                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char ycurs = [S+$E+8] (used reg = )
20581 5147           8A46         0E            mov	al,$E[bp]
20582 514A           30E4                       xor	ah,ah
20583 514C           89C3                       mov	bx,ax
20584 514E           8A46         0A            mov	al,$A[bp]
20585 5151           30E4                       xor	ah,ah
20586 5153           89D9                       mov	cx,bx
20587 5155           F7E9                       imul	cx
20588                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned int = ax+0 (used reg = )
20589 5157           89C3                       mov	bx,ax
20590 5159           8A46         0C            mov	al,$C[bp]
20591 515C           30E4                       xor	ah,ah
20592 515E           93                         xchg	ax,bx
20593 515F           89D9                       mov	cx,bx
20594 5161           F7E9                       imul	cx
20595                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$E+6] (used reg = )
20596                                           ! Debug: expression subtree swapping
20597 5163           0246         08            add	al,8[bp]
20598 5166           80D4                   00  adc	ah,*0
20599                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20600 5169           8946         F8            mov	-8[bp],ax
20601                                           !BCC_EOS
20602                                           ! 2258  src = car * cheight;
20603                                           ! Debug: mul unsigned char cheight = [S+$E+$C] to unsigned char car = [S+$E+2] (used reg = )
20604 516C           8A46         0E            mov	al,$E[bp]
20605 516F           30E4                       xor	ah,ah
20606 5171           89C3                       mov	bx,ax
20607 5173           8A46         04            mov	al,4[bp]
20608 5176           30E4                       xor	ah,ah
20609 5178           89D9                       mov	cx,bx
20610 517A           F7E9                       imul	cx
20611                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20612 517C           8946         F4            mov	-$C[bp],ax
20613                                           !BCC_EOS
20614                                           ! 2259  outw(0x3c4, 0x0f02);
20615                                           ! Debug: list int = const $F02 (used reg = )
20616 517F           B8                   0F02  mov	ax,#$F02
20617 5182           50                         push	ax
20618                                           ! Debug: list int = const $3C4 (used reg = )
20619 5183           B8                   03C4  mov	ax,#$3C4
20620 5186           50                         push	ax
20621                                           ! Debug: func () void = outw+0 (used reg = )
20622 5187           E8         2BCD            call	_outw
20623 518A           83C4                   04  add	sp,*4
20624                                           !BCC_EOS
20625                                           ! 2260  outw(0x3ce, 0x0205);
20626                                           ! Debug: list int = const $205 (used reg = )
20627 518D           B8                   0205  mov	ax,#$205
20628 5190           50                         push	ax
20629                                           ! Debug: list int = const $3CE (used reg = )
20630 5191           B8                   03CE  mov	ax,#$3CE
20631 5194           50                         push	ax
20632                                           ! Debug: func () void = outw+0 (used reg = )
20633 5195           E8         2BBF            call	_outw
20634 5198           83C4                   04  add	sp,*4
20635                                           !BCC_EOS
20636                                           ! 2261  if(attr&0x80)
20637                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20638 519B           8A46         06            mov	al,6[bp]
20639 519E           24                     80  and	al,#$80
20640 51A0           84C0                       test	al,al
20641 51A2           74           10            je  	.141
20642                       000051A4            .142:
20643                                           ! 2262   {
20644                                           ! 2263    outw(0x3ce, 0x1803);
20645                                           ! Debug: list int = const $1803 (used reg = )
20646 51A4           B8                   1803  mov	ax,#$1803
20647 51A7           50                         push	ax
20648                                           ! Debug: list int = const $3CE (used reg = )
20649 51A8           B8                   03CE  mov	ax,#$3CE
20650 51AB           50                         push	ax
20651                                           ! Debug: func () void = outw+0 (used reg = )
20652 51AC           E8         2BA8            call	_outw
20653 51AF           83C4                   04  add	sp,*4
20654                                           !BCC_EOS
20655                                           ! 2264   }
20656                                           ! 2265  else
20657                                           ! 2266   {
20658 51B2           EB           0E            jmp .143
20659                       000051B4            .141:
20660                                           ! 2267    outw(0x3ce, 0x0003);
20661                                           ! Debug: list int = const 3 (used reg = )
20662 51B4           B8                   0003  mov	ax,*3
20663 51B7           50                         push	ax
20664                                           ! Debug: list int = const $3CE (used reg = )
20665 51B8           B8                   03CE  mov	ax,#$3CE
20666 51BB           50                         push	ax
20667                                           ! Debug: func () void = outw+0 (used reg = )
20668 51BC           E8         2B98            call	_outw
20669 51BF           83C4                   04  add	sp,*4
20670                                           !BCC_EOS
20671                                           ! 2268   }
20672                                           ! 2269  for(i=0;i<cheight;i++)
20673                       000051C2            .143:
20674                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20675 51C2           30C0                       xor	al,al
20676 51C4           8846         FF            mov	-1[bp],al
20677                                           !BCC_EOS
20678                                           !BCC_EOS
20679                                           ! 2270   {
20680 51C7           E9         00A7            br 	.146
20681                       000051CA            .147:
20682                                           ! 2271    dest=addr+i*nbcols;
20683                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
20684 51CA           8A46         0C            mov	al,$C[bp]
20685 51CD           30E4                       xor	ah,ah
20686 51CF           89C3                       mov	bx,ax
20687 51D1           8A46         FF            mov	al,-1[bp]
20688 51D4           30E4                       xor	ah,ah
20689 51D6           89D9                       mov	cx,bx
20690 51D8           F7E9                       imul	cx
20691                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20692                                           ! Debug: expression subtree swapping
20693 51DA           0346         F8            add	ax,-8[bp]
20694                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20695 51DD           8946         F6            mov	-$A[bp],ax
20696                                           !BCC_EOS
20697                                           ! 2272    for(j=0;j<8;j++)
20698                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
20699 51E0           30C0                       xor	al,al
20700 51E2           8846         FE            mov	-2[bp],al
20701                                           !BCC_EOS
20702                                           !BCC_EOS
20703                                           ! 2273     {
20704 51E5           EB           79            jmp .14A
20705                       000051E7            .14B:
20706                                           ! 2274      mask=0x80>>j;
20707                                           ! Debug: sr unsigned char j = [S+$E-4] to int = const $80 (used reg = )
20708 51E7           8A46         FE            mov	al,-2[bp]
20709 51EA           30E4                       xor	ah,ah
20710 51EC           89C3                       mov	bx,ax
20711 51EE           B8                   0080  mov	ax,#$80
20712 51F1           89D9                       mov	cx,bx
20713 51F3           D3F8                       sar	ax,cl
20714                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$E-5] (used reg = )
20715 51F5           8846         FD            mov	-3[bp],al
20716                                           !BCC_EOS
20717                                           ! 2275      outw(0x3ce, (mask << 8) | 0x08);
20718                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$E-5] (used reg = )
20719 51F8           8A46         FD            mov	al,-3[bp]
20720 51FB           30E4                       xor	ah,ah
20721 51FD           88C4                       mov	ah,al
20722 51FF           30C0                       xor	al,al
20723                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
20724 5201           0C                     08  or	al,*8
20725                                           ! Debug: list unsigned int = ax+0 (used reg = )
20726 5203           50                         push	ax
20727                                           ! Debug: list int = const $3CE (used reg = )
20728 5204           B8                   03CE  mov	ax,#$3CE
20729 5207           50                         push	ax
20730                                           ! Debug: func () void = outw+0 (used reg = )
20731 5208           E8         2B4C            call	_outw
20732 520B           83C4                   04  add	sp,*4
20733                                           !BCC_EOS
20734                                           ! 2276      read_byte(0xa000,dest);
20735                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20736 520E           FF76         F6            push	-$A[bp]
20737                                           ! Debug: list unsigned int = const $A000 (used reg = )
20738 5211           B8                   A000  mov	ax,#$A000
20739 5214           50                         push	ax
20740                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20741 5215           E8         2AC3            call	_read_byte
20742 5218           83C4                   04  add	sp,*4
20743                                           !BCC_EOS
20744                                           ! 2277      if(fdata[src+i]&mask)
20745                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
20746 521B           8B46         F4            mov	ax,-$C[bp]
20747 521E           0246         FF            add	al,-1[bp]
20748 5221           80D4                   00  adc	ah,*0
20749                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20750 5224           0346         FA            add	ax,-6[bp]
20751 5227           89C3                       mov	bx,ax
20752                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
20753 5229           8A07                       mov	al,[bx]
20754 522B           2246         FD            and	al,-3[bp]
20755 522E           84C0                       test	al,al
20756 5230           74           17            je  	.14C
20757                       00005232            .14D:
20758                                           ! 2278       
20759                                           ! 2278 {
20760                                           ! 2279        write_byte(0xa000,dest,attr&0x0f);
20761                                           ! Debug: and int = const $F to unsigned char attr = [S+$E+4] (used reg = )
20762 5232           8A46         06            mov	al,6[bp]
20763 5235           24                     0F  and	al,*$F
20764                                           ! Debug: list unsigned char = al+0 (used reg = )
20765 5237           30E4                       xor	ah,ah
20766 5239           50                         push	ax
20767                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20768 523A           FF76         F6            push	-$A[bp]
20769                                           ! Debug: list unsigned int = const $A000 (used reg = )
20770 523D           B8                   A000  mov	ax,#$A000
20771 5240           50                         push	ax
20772                                           ! Debug: func () void = write_byte+0 (used reg = )
20773 5241           E8         2ABD            call	_write_byte
20774 5244           83C4                   06  add	sp,*6
20775                                           !BCC_EOS
20776                                           ! 2280       }
20777                                           ! 2281      else
20778                                           ! 2282       {
20779 5247           EB           10            jmp .14E
20780                       00005249            .14C:
20781                                           ! 2283        write_byte(0xa000,dest,0x00);
20782                                           ! Debug: list int = const 0 (used reg = )
20783 5249           31C0                       xor	ax,ax
20784 524B           50                         push	ax
20785                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
20786 524C           FF76         F6            push	-$A[bp]
20787                                           ! Debug: list unsigned int = const $A000 (used reg = )
20788 524F           B8                   A000  mov	ax,#$A000
20789 5252           50                         push	ax
20790                                           ! Debug: func () void = write_byte+0 (used reg = )
20791 5253           E8         2AAB            call	_write_byte
20792 5256           83C4                   06  add	sp,*6
20793                                           !BCC_EOS
20794                                           ! 2284       }
20795                                           ! 2285     }
20796                       00005259            .14E:
20797                                           ! 2286   }
20798                       00005259            .149:
20799                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
20800 5259           8A46         FE            mov	al,-2[bp]
20801 525C           40                         inc	ax
20802 525D           8846         FE            mov	-2[bp],al
20803                       00005260            .14A:
20804                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
20805 5260           8A46         FE            mov	al,-2[bp]
20806 5263           3C                     08  cmp	al,*8
20807 5265   7303    E9         FF7D            blo 	.14B
20808                       0000526A            .14F:
20809                       0000526A            .148:
20810                                           ! 2287 #asm
20811                       0000526A            .145:
20812                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
20813 526A           8A46         FF            mov	al,-1[bp]
20814 526D           40                         inc	ax
20815 526E           8846         FF            mov	-1[bp],al
20816                       00005271            .146:
20817                                           ! Debug: lt unsigned char cheight = [S+$E+$C] to unsigned char i = [S+$E-3] (used reg = )
20818 5271           8A46         FF            mov	al,-1[bp]
20819 5274           3A46         0E            cmp	al,$E[bp]
20820 5277   7303    E9         FF4E            blo 	.147
20821                       0000527C            .150:
20822                       0000527C            .144:
20823                                           !BCC_EOS
20824                                           !BCC_ASM
20825                       0000000A            _write_gfx_char_pl4.j	set	$A
20826                       FFFFFFFE            .write_gfx_char_pl4.j	set	-2
20827                       00000006            _write_gfx_char_pl4.fdata	set	6
20828                       FFFFFFFA            .write_gfx_char_pl4.fdata	set	-6
20829                       0000001A            _write_gfx_char_pl4.cheight	set	$1A
20830                       0000000E            .write_gfx_char_pl4.cheight	set	$E
20831                       00000018            _write_gfx_char_pl4.nbcols	set	$18
20832                       0000000C            .write_gfx_char_pl4.nbcols	set	$C
20833                       0000000B            _write_gfx_char_pl4.i	set	$B
20834                       FFFFFFFF            .write_gfx_char_pl4.i	set	-1
20835                       00000016            _write_gfx_char_pl4.ycurs	set	$16
20836                       0000000A            .write_gfx_char_pl4.ycurs	set	$A
20837                       00000009            _write_gfx_char_pl4.mask	set	9
20838                       FFFFFFFD            .write_gfx_char_pl4.mask	set	-3
20839                       00000002            _write_gfx_char_pl4.dest	set	2
20840                       FFFFFFF6            .write_gfx_char_pl4.dest	set	-$A
20841                       00000014            _write_gfx_char_pl4.xcurs	set	$14
20842                       00000008            .write_gfx_char_pl4.xcurs	set	8
20843                       00000000            _write_gfx_char_pl4.src	set	0
20844                       FFFFFFF4            .write_gfx_char_pl4.src	set	-$C
20845                       00000012            _write_gfx_char_pl4.attr	set	$12
20846                       00000006            .write_gfx_char_pl4.attr	set	6
20847                       00000010            _write_gfx_char_pl4.car	set	$10
20848                       00000004            .write_gfx_char_pl4.car	set	4
20849                       00000004            _write_gfx_char_pl4.addr	set	4
20850                       FFFFFFF8            .write_gfx_char_pl4.addr	set	-8
20851 527C           BA                   03CE    mov dx, # 0x3ce
20852 527F           B8                   FF08    mov ax, #0xff08
20853 5282           EF                           out dx, ax
20854 5283           B8                   0005    mov ax, #0x0005
20855 5286           EF                           out dx, ax
20856 5287           B8                   0003    mov ax, #0x0003
20857 528A           EF                           out dx, ax
20858                                           ! 2295 endasm
20859                                           !BCC_ENDASM
20860                                           !BCC_EOS
20861                                           ! 2296 }
20862 528B           89EC                       mov	sp,bp
20863 528D           5D                         pop	bp
20864 528E           C3                         ret
20865                                           ! 2297 static void write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp)
20866                                           ! Register BX used in function write_gfx_char_pl4
20867                                           ! 2298 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;Bit8u bpp;
20868                       0000528F            _write_gfx_char_cga:
20869                                           !BCC_EOS
20870                                           !BCC_EOS
20871                                           !BCC_EOS
20872                                           !BCC_EOS
20873                                           !BCC_EOS
20874                                           !BCC_EOS
20875                                           ! 2299 {
20876                                           ! 2300  Bit8u i,j,mask,data;
20877                                           !BCC_EOS
20878                                           ! 2301  Bit8u *fdata;
20879                                           !BCC_EOS
20880                                           ! 2302  Bit16u addr,dest,src;
20881                                           !BCC_EOS
20882                                           ! 2303  fdata = &vgafont8;
20883 528F           55                         push	bp
20884 5290           89E5                       mov	bp,sp
20885 5292           83C4                   F4  add	sp,*-$C
20886                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
20887 5295           BB                   0F46  mov	bx,#_vgafont8
20888 5298           895E         FA            mov	-6[bp],bx
20889                                           !BCC_EOS
20890                                           ! 2304  addr=(xcurs*bpp)+ycurs*320;
20891                                           ! Debug: mul int = const $140 to unsigned char ycurs = [S+$E+8] (used reg = )
20892 529B           8A46         0A            mov	al,$A[bp]
20893 529E           30E4                       xor	ah,ah
20894 52A0           B9                   0140  mov	cx,#$140
20895 52A3           F7E9                       imul	cx
20896 52A5           50                         push	ax
20897                                           ! Debug: mul unsigned char bpp = [S+$10+$C] to unsigned char xcurs = [S+$10+6] (used reg = )
20898 52A6           8A46         0E            mov	al,$E[bp]
20899 52A9           30E4                       xor	ah,ah
20900 52AB           89C3                       mov	bx,ax
20901 52AD           8A46         08            mov	al,8[bp]
20902 52B0           30E4                       xor	ah,ah
20903 52B2           89D9                       mov	cx,bx
20904 52B4           F7E9                       imul	cx
20905                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
20906 52B6           0346         F2            add	ax,-$E[bp]
20907 52B9           44                         inc	sp
20908 52BA           44                         inc	sp
20909                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20910 52BB           8946         F8            mov	-8[bp],ax
20911                                           !BCC_EOS
20912                                           ! 2305  src = car * 8;
20913                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
20914 52BE           8A46         04            mov	al,4[bp]
20915 52C1           30E4                       xor	ah,ah
20916 52C3           B1                     03  mov	cl,*3
20917 52C5           D3E0                       shl	ax,cl
20918                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
20919 52C7           8946         F4            mov	-$C[bp],ax
20920                                           !BCC_EOS
20921                                           ! 2306  for(i=0;i<8;i++)
20922                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
20923 52CA           30C0                       xor	al,al
20924 52CC           8846         FF            mov	-1[bp],al
20925                                           !BCC_EOS
20926                                           !BCC_EOS
20927                                           ! 2307   {
20928 52CF           E9         01B5            br 	.153
20929                       000052D2            .154:
20930                                           ! 2308    dest=addr+(i>>1)*80;
20931                                           ! Debug: sr int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20932 52D2           8A46         FF            mov	al,-1[bp]
20933 52D5           30E4                       xor	ah,ah
20934 52D7           D1E8                       shr	ax,*1
20935                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
20936 52D9           B9                   0050  mov	cx,*$50
20937 52DC           F7E9                       imul	cx
20938                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
20939                                           ! Debug: expression subtree swapping
20940 52DE           0346         F8            add	ax,-8[bp]
20941                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
20942 52E1           8946         F6            mov	-$A[bp],ax
20943                                           !BCC_EOS
20944                                           ! 2309    if (i & 1) dest += 0x2000;
20945                                           ! Debug: and int = const 1 to unsigned char i = [S+$E-3] (used reg = )
20946 52E4           8A46         FF            mov	al,-1[bp]
20947 52E7           24                     01  and	al,*1
20948 52E9           84C0                       test	al,al
20949 52EB           74           09            je  	.155
20950                       000052ED            .156:
20951                                           ! Debug: addab int = const $2000 to unsigned short dest = [S+$E-$C] (used reg = )
20952 52ED           8B46         F6            mov	ax,-$A[bp]
20953 52F0           05                   2000  add	ax,#$2000
20954 52F3           8946         F6            mov	-$A[bp],ax
20955                                           !BCC_EOS
20956                                           ! 2310    mask = 0x80;
20957                       000052F6            .155:
20958                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
20959 52F6           B0                     80  mov	al,#$80
20960 52F8           8846         FD            mov	-3[bp],al
20961                                           !BCC_EOS
20962                                           ! 2311    if (bpp == 1)
20963                                           ! Debug: logeq int = const 1 to unsigned char bpp = [S+$E+$C] (used reg = )
20964 52FB           8A46         0E            mov	al,$E[bp]
20965 52FE           3C                     01  cmp	al,*1
20966 5300   7403    E9         00B3            bne 	.157
20967                       00005305            .158:
20968                                           ! 2312     {
20969                                           ! 2313      if (attr & 0x80)
20970                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
20971 5305           8A46         06            mov	al,6[bp]
20972 5308           24                     80  and	al,#$80
20973 530A           84C0                       test	al,al
20974 530C           74           12            je  	.159
20975                       0000530E            .15A:
20976                                           ! 2314       {
20977                                           ! 2315        data = read_byte(0xb800,dest);
20978                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
20979 530E           FF76         F6            push	-$A[bp]
20980                                           ! Debug: list unsigned int = const $B800 (used reg = )
20981 5311           B8                   B800  mov	ax,#$B800
20982 5314           50                         push	ax
20983                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
20984 5315           E8         29C3            call	_read_byte
20985 5318           83C4                   04  add	sp,*4
20986                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
20987 531B           8846         FC            mov	-4[bp],al
20988                                           !BCC_EOS
20989                                           ! 2316       }
20990                                           ! 2317      else
20991                                           ! 2318       {
20992 531E           EB           05            jmp .15B
20993                       00005320            .159:
20994                                           ! 2319        data = 0x00;
20995                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
20996 5320           30C0                       xor	al,al
20997 5322           8846         FC            mov	-4[bp],al
20998                                           !BCC_EOS
20999                                           ! 2320       }
21000                                           ! 2321      for(j=0;j<8;j++)
21001                       00005325            .15B:
21002                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21003 5325           30C0                       xor	al,al
21004 5327           8846         FE            mov	-2[bp],al
21005                                           !BCC_EOS
21006                                           !BCC_EOS
21007                                           ! 2322       {
21008 532A           EB           6F            jmp .15E
21009                       0000532C            .15F:
21010                                           ! 2323        if (fdata[src+i] & mask)
21011                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21012 532C           8B46         F4            mov	ax,-$C[bp]
21013 532F           0246         FF            add	al,-1[bp]
21014 5332           80D4                   00  adc	ah,*0
21015                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21016 5335           0346         FA            add	ax,-6[bp]
21017 5338           89C3                       mov	bx,ax
21018                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21019 533A           8A07                       mov	al,[bx]
21020 533C           2246         FD            and	al,-3[bp]
21021 533F           84C0                       test	al,al
21022 5341           74           47            je  	.160
21023                       00005343            .161:
21024                                           ! 2324         {
21025                                           ! 2325          if (attr & 0x80)
21026                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21027 5343           8A46         06            mov	al,6[bp]
21028 5346           24                     80  and	al,#$80
21029 5348           84C0                       test	al,al
21030 534A           74           20            je  	.162
21031                       0000534C            .163:
21032                                           ! 2326           {
21033                                           ! 2327            data ^= (attr & 0x01) << (7-j);
21034                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21035 534C           B8                   0007  mov	ax,*7
21036 534F           2A46         FE            sub	al,-2[bp]
21037 5352           80DC                   00  sbb	ah,*0
21038 5355           50                         push	ax
21039                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21040 5356           8A46         06            mov	al,6[bp]
21041 5359           24                     01  and	al,*1
21042                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21043 535B           30E4                       xor	ah,ah
21044 535D           8B4E         F2            mov	cx,-$E[bp]
21045 5360           D3E0                       shl	ax,cl
21046 5362           44                         inc	sp
21047 5363           44                         inc	sp
21048                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21049 5364           3246         FC            xor	al,-4[bp]
21050 5367           8846         FC            mov	-4[bp],al
21051                                           !BCC_EOS
21052                                           ! 2328           }
21053                                           ! 2329          else
21054                                           ! 2330           {
21055 536A           EB           1E            jmp .164
21056                       0000536C            .162:
21057                                           ! 2331            data |= (attr & 0x01) << (7-j);
21058                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 7 (used reg = )
21059 536C           B8                   0007  mov	ax,*7
21060 536F           2A46         FE            sub	al,-2[bp]
21061 5372           80DC                   00  sbb	ah,*0
21062 5375           50                         push	ax
21063                                           ! Debug: and int = const 1 to unsigned char attr = [S+$10+4] (used reg = )
21064 5376           8A46         06            mov	al,6[bp]
21065 5379           24                     01  and	al,*1
21066                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21067 537B           30E4                       xor	ah,ah
21068 537D           8B4E         F2            mov	cx,-$E[bp]
21069 5380           D3E0                       shl	ax,cl
21070 5382           44                         inc	sp
21071 5383           44                         inc	sp
21072                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21073 5384           0A46         FC            or	al,-4[bp]
21074 5387           8846         FC            mov	-4[bp],al
21075                                           !BCC_EOS
21076                                           ! 2332           }
21077                                           ! 2333         }
21078                       0000538A            .164:
21079                                           ! 2334        mask >>= 1;
21080                       0000538A            .160:
21081                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21082 538A           8A46         FD            mov	al,-3[bp]
21083 538D           30E4                       xor	ah,ah
21084 538F           D1E8                       shr	ax,*1
21085 5391           8846         FD            mov	-3[bp],al
21086                                           !BCC_EOS
21087                                           ! 2335       }
21088                                           ! 2336      write_byte(0xb800,dest,data);
21089                       00005394            .15D:
21090                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21091 5394           8A46         FE            mov	al,-2[bp]
21092 5397           40                         inc	ax
21093 5398           8846         FE            mov	-2[bp],al
21094                       0000539B            .15E:
21095                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21096 539B           8A46         FE            mov	al,-2[bp]
21097 539E           3C                     08  cmp	al,*8
21098 53A0           72           8A            jb 	.15F
21099                       000053A2            .165:
21100                       000053A2            .15C:
21101                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21102 53A2           8A46         FC            mov	al,-4[bp]
21103 53A5           30E4                       xor	ah,ah
21104 53A7           50                         push	ax
21105                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21106 53A8           FF76         F6            push	-$A[bp]
21107                                           ! Debug: list unsigned int = const $B800 (used reg = )
21108 53AB           B8                   B800  mov	ax,#$B800
21109 53AE           50                         push	ax
21110                                           ! Debug: func () void = write_byte+0 (used reg = )
21111 53AF           E8         294F            call	_write_byte
21112 53B2           83C4                   06  add	sp,*6
21113                                           !BCC_EOS
21114                                           ! 2337     }
21115                                           ! 2338    else
21116                                           ! 2339     {
21117 53B5           E9         00C8            br 	.166
21118                       000053B8            .157:
21119                                           ! 2340      while (mask > 0)
21120                                           ! 2341       {
21121 53B8           E9         00BB            br 	.168
21122                       000053BB            .169:
21123                                           ! 2342        if (attr & 0x80)
21124                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21125 53BB           8A46         06            mov	al,6[bp]
21126 53BE           24                     80  and	al,#$80
21127 53C0           84C0                       test	al,al
21128 53C2           74           12            je  	.16A
21129                       000053C4            .16B:
21130                                           ! 2343         {
21131                                           ! 2344          data = read_byte(0xb800,dest);
21132                                           ! Debug: list unsigned short dest = [S+$E-$C] (used reg = )
21133 53C4           FF76         F6            push	-$A[bp]
21134                                           ! Debug: list unsigned int = const $B800 (used reg = )
21135 53C7           B8                   B800  mov	ax,#$B800
21136 53CA           50                         push	ax
21137                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21138 53CB           E8         290D            call	_read_byte
21139 53CE           83C4                   04  add	sp,*4
21140                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$E-6] (used reg = )
21141 53D1           8846         FC            mov	-4[bp],al
21142                                           !BCC_EOS
21143                                           ! 2345         }
21144                                           ! 2346        else
21145                                           ! 2347         {
21146 53D4           EB           05            jmp .16C
21147                       000053D6            .16A:
21148                                           ! 2348          data = 0x00;
21149                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21150 53D6           30C0                       xor	al,al
21151 53D8           8846         FC            mov	-4[bp],al
21152                                           !BCC_EOS
21153                                           ! 2349         }
21154                                           ! 2350        for(j=0;j<4;j++)
21155                       000053DB            .16C:
21156                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21157 53DB           30C0                       xor	al,al
21158 53DD           8846         FE            mov	-2[bp],al
21159                                           !BCC_EOS
21160                                           !BCC_EOS
21161                                           ! 2351         {
21162 53E0           EB           73            jmp .16F
21163                       000053E2            .170:
21164                                           ! 2352          if (fdata[src+i] & mask)
21165                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21166 53E2           8B46         F4            mov	ax,-$C[bp]
21167 53E5           0246         FF            add	al,-1[bp]
21168 53E8           80D4                   00  adc	ah,*0
21169                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21170 53EB           0346         FA            add	ax,-6[bp]
21171 53EE           89C3                       mov	bx,ax
21172                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21173 53F0           8A07                       mov	al,[bx]
21174 53F2           2246         FD            and	al,-3[bp]
21175 53F5           84C0                       test	al,al
21176 53F7           74           4B            je  	.171
21177                       000053F9            .172:
21178                                           ! 2353           {
21179                                           ! 2354            if (attr & 0x80)
21180                                           ! Debug: and int = const $80 to unsigned char attr = [S+$E+4] (used reg = )
21181 53F9           8A46         06            mov	al,6[bp]
21182 53FC           24                     80  and	al,#$80
21183 53FE           84C0                       test	al,al
21184 5400           74           22            je  	.173
21185                       00005402            .174:
21186                                           ! 2355             {
21187                                           ! 2356              data ^= (attr & 0x03) << ((3-j)*2);
21188                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21189 5402           B8                   0003  mov	ax,*3
21190 5405           2A46         FE            sub	al,-2[bp]
21191 5408           80DC                   00  sbb	ah,*0
21192                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21193 540B           D1E0                       shl	ax,*1
21194 540D           50                         push	ax
21195                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21196 540E           8A46         06            mov	al,6[bp]
21197 5411           24                     03  and	al,*3
21198                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21199 5413           30E4                       xor	ah,ah
21200 5415           8B4E         F2            mov	cx,-$E[bp]
21201 5418           D3E0                       shl	ax,cl
21202 541A           44                         inc	sp
21203 541B           44                         inc	sp
21204                                           ! Debug: eorab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21205 541C           3246         FC            xor	al,-4[bp]
21206 541F           8846         FC            mov	-4[bp],al
21207                                           !BCC_EOS
21208                                           ! 2357             }
21209                                           ! 2358            else
21210                                           ! 2359             {
21211 5422           EB           20            jmp .175
21212                       00005424            .173:
21213                                           ! 2360              data |= (attr & 0x03) << ((3-j)*2);
21214                                           ! Debug: sub unsigned char j = [S+$E-4] to int = const 3 (used reg = )
21215 5424           B8                   0003  mov	ax,*3
21216 5427           2A46         FE            sub	al,-2[bp]
21217 542A           80DC                   00  sbb	ah,*0
21218                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21219 542D           D1E0                       shl	ax,*1
21220 542F           50                         push	ax
21221                                           ! Debug: and int = const 3 to unsigned char attr = [S+$10+4] (used reg = )
21222 5430           8A46         06            mov	al,6[bp]
21223 5433           24                     03  and	al,*3
21224                                           ! Debug: sl unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
21225 5435           30E4                       xor	ah,ah
21226 5437           8B4E         F2            mov	cx,-$E[bp]
21227 543A           D3E0                       shl	ax,cl
21228 543C           44                         inc	sp
21229 543D           44                         inc	sp
21230                                           ! Debug: orab unsigned int = ax+0 to unsigned char data = [S+$E-6] (used reg = )
21231 543E           0A46         FC            or	al,-4[bp]
21232 5441           8846         FC            mov	-4[bp],al
21233                                           !BCC_EOS
21234                                           ! 2361             }
21235                                           ! 2362           }
21236                       00005444            .175:
21237                                           ! 2363          mask >>= 1;
21238                       00005444            .171:
21239                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21240 5444           8A46         FD            mov	al,-3[bp]
21241 5447           30E4                       xor	ah,ah
21242 5449           D1E8                       shr	ax,*1
21243 544B           8846         FD            mov	-3[bp],al
21244                                           !BCC_EOS
21245                                           ! 2364         }
21246                                           ! 2365        write_byte(0xb800,dest,data);
21247                       0000544E            .16E:
21248                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21249 544E           8A46         FE            mov	al,-2[bp]
21250 5451           40                         inc	ax
21251 5452           8846         FE            mov	-2[bp],al
21252                       00005455            .16F:
21253                                           ! Debug: lt int = const 4 to unsigned char j = [S+$E-4] (used reg = )
21254 5455           8A46         FE            mov	al,-2[bp]
21255 5458           3C                     04  cmp	al,*4
21256 545A           72           86            jb 	.170
21257                       0000545C            .176:
21258                       0000545C            .16D:
21259                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21260 545C           8A46         FC            mov	al,-4[bp]
21261 545F           30E4                       xor	ah,ah
21262 5461           50                         push	ax
21263                                           ! Debug: list unsigned short dest = [S+$10-$C] (used reg = )
21264 5462           FF76         F6            push	-$A[bp]
21265                                           ! Debug: list unsigned int = const $B800 (used reg = )
21266 5465           B8                   B800  mov	ax,#$B800
21267 5468           50                         push	ax
21268                                           ! Debug: func () void = write_byte+0 (used reg = )
21269 5469           E8         2895            call	_write_byte
21270 546C           83C4                   06  add	sp,*6
21271                                           !BCC_EOS
21272                                           ! 2366        dest += 1;
21273                                           ! Debug: addab int = const 1 to unsigned short dest = [S+$E-$C] (used reg = )
21274 546F           8B46         F6            mov	ax,-$A[bp]
21275 5472           40                         inc	ax
21276 5473           8946         F6            mov	-$A[bp],ax
21277                                           !BCC_EOS
21278                                           ! 2367       }
21279                                           ! 2368     }
21280                       00005476            .168:
21281                                           ! Debug: gt int = const 0 to unsigned char mask = [S+$E-5] (used reg = )
21282 5476           8A46         FD            mov	al,-3[bp]
21283 5479           84C0                       test	al,al
21284 547B   7403    E9         FF3B            bne 	.169
21285                       00005480            .177:
21286                       00005480            .167:
21287                                           ! 2369   }
21288                       00005480            .166:
21289                                           ! 2370 }
21290                       00005480            .152:
21291                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21292 5480           8A46         FF            mov	al,-1[bp]
21293 5483           40                         inc	ax
21294 5484           8846         FF            mov	-1[bp],al
21295                       00005487            .153:
21296                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21297 5487           8A46         FF            mov	al,-1[bp]
21298 548A           3C                     08  cmp	al,*8
21299 548C   7303    E9         FE41            blo 	.154
21300                       00005491            .178:
21301                       00005491            .151:
21302 5491           89EC                       mov	sp,bp
21303 5493           5D                         pop	bp
21304 5494           C3                         ret
21305                                           ! 2371 static void write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols)
21306                                           ! Register BX used in function write_gfx_char_cga
21307                                           ! 2372 Bit8u car;Bit8u attr;Bit8u xcurs;Bit8u ycurs;Bit8u nbcols;
21308                       00005495            _write_gfx_char_lin:
21309                                           !BCC_EOS
21310                                           !BCC_EOS
21311                                           !BCC_EOS
21312                                           !BCC_EOS
21313                                           !BCC_EOS
21314                                           ! 2373 {
21315                                           ! 2374  Bit8u i,j,mask,data;
21316                                           !BCC_EOS
21317                                           ! 2375  Bit8u *fdata;
21318                                           !BCC_EOS
21319                                           ! 2376  Bit16u addr,dest,src;
21320                                           !BCC_EOS
21321                                           ! 2377  fdata = &vgafont8;
21322 5495           55                         push	bp
21323 5496           89E5                       mov	bp,sp
21324 5498           83C4                   F4  add	sp,*-$C
21325                                           ! Debug: eq * [$800] unsigned char = vgafont8+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21326 549B           BB                   0F46  mov	bx,#_vgafont8
21327 549E           895E         FA            mov	-6[bp],bx
21328                                           !BCC_EOS
21329                                           ! 2378  addr=xcurs*8+ycurs*nbcols*64;
21330                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char ycurs = [S+$E+8] (used reg = )
21331 54A1           8A46         0C            mov	al,$C[bp]
21332 54A4           30E4                       xor	ah,ah
21333 54A6           89C3                       mov	bx,ax
21334 54A8           8A46         0A            mov	al,$A[bp]
21335 54AB           30E4                       xor	ah,ah
21336 54AD           89D9                       mov	cx,bx
21337 54AF           F7E9                       imul	cx
21338                                           ! Debug: mul int = const $40 to unsigned int = ax+0 (used reg = )
21339 54B1           B1                     06  mov	cl,*6
21340 54B3           D3E0                       shl	ax,cl
21341 54B5           50                         push	ax
21342                                           ! Debug: mul int = const 8 to unsigned char xcurs = [S+$10+6] (used reg = )
21343 54B6           8A46         08            mov	al,8[bp]
21344 54B9           30E4                       xor	ah,ah
21345 54BB           B1                     03  mov	cl,*3
21346 54BD           D3E0                       shl	ax,cl
21347                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
21348 54BF           0346         F2            add	ax,-$E[bp]
21349 54C2           44                         inc	sp
21350 54C3           44                         inc	sp
21351                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21352 54C4           8946         F8            mov	-8[bp],ax
21353                                           !BCC_EOS
21354                                           ! 2379  src = car * 8;
21355                                           ! Debug: mul int = const 8 to unsigned char car = [S+$E+2] (used reg = )
21356 54C7           8A46         04            mov	al,4[bp]
21357 54CA           30E4                       xor	ah,ah
21358 54CC           B1                     03  mov	cl,*3
21359 54CE           D3E0                       shl	ax,cl
21360                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$E-$E] (used reg = )
21361 54D0           8946         F4            mov	-$C[bp],ax
21362                                           !BCC_EOS
21363                                           ! 2380  for(i=0;i<8;i++)
21364                                           ! Debug: eq int = const 0 to unsigned char i = [S+$E-3] (used reg = )
21365 54D3           30C0                       xor	al,al
21366 54D5           8846         FF            mov	-1[bp],al
21367                                           !BCC_EOS
21368                                           !BCC_EOS
21369                                           ! 2381   {
21370 54D8           E9         0081            br 	.17B
21371                       000054DB            .17C:
21372                                           ! 2382    dest=addr+i*nbcols*8;
21373                                           ! Debug: mul unsigned char nbcols = [S+$E+$A] to unsigned char i = [S+$E-3] (used reg = )
21374 54DB           8A46         0C            mov	al,$C[bp]
21375 54DE           30E4                       xor	ah,ah
21376 54E0           89C3                       mov	bx,ax
21377 54E2           8A46         FF            mov	al,-1[bp]
21378 54E5           30E4                       xor	ah,ah
21379 54E7           89D9                       mov	cx,bx
21380 54E9           F7E9                       imul	cx
21381                                           ! Debug: mul int = const 8 to unsigned int = ax+0 (used reg = )
21382 54EB           B1                     03  mov	cl,*3
21383 54ED           D3E0                       shl	ax,cl
21384                                           ! Debug: add unsigned int = ax+0 to unsigned short addr = [S+$E-$A] (used reg = )
21385                                           ! Debug: expression subtree swapping
21386 54EF           0346         F8            add	ax,-8[bp]
21387                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$E-$C] (used reg = )
21388 54F2           8946         F6            mov	-$A[bp],ax
21389                                           !BCC_EOS
21390                                           ! 2383    mask = 0x80;
21391                                           ! Debug: eq int = const $80 to unsigned char mask = [S+$E-5] (used reg = )
21392 54F5           B0                     80  mov	al,#$80
21393 54F7           8846         FD            mov	-3[bp],al
21394                                           !BCC_EOS
21395                                           ! 2384    for(j=0;j<8;j++)
21396                                           ! Debug: eq int = const 0 to unsigned char j = [S+$E-4] (used reg = )
21397 54FA           30C0                       xor	al,al
21398 54FC           8846         FE            mov	-2[bp],al
21399                                           !BCC_EOS
21400                                           !BCC_EOS
21401                                           ! 2385     {
21402 54FF           EB           4D            jmp .17F
21403                       00005501            .180:
21404                                           ! 2386      data = 0x00;
21405                                           ! Debug: eq int = const 0 to unsigned char data = [S+$E-6] (used reg = )
21406 5501           30C0                       xor	al,al
21407 5503           8846         FC            mov	-4[bp],al
21408                                           !BCC_EOS
21409                                           ! 2387      if (fdata[src+i] & mask)
21410                                           ! Debug: add unsigned char i = [S+$E-3] to unsigned short src = [S+$E-$E] (used reg = )
21411 5506           8B46         F4            mov	ax,-$C[bp]
21412 5509           0246         FF            add	al,-1[bp]
21413 550C           80D4                   00  adc	ah,*0
21414                                           ! Debug: ptradd unsigned int = ax+0 to * unsigned char fdata = [S+$E-8] (used reg = )
21415 550F           0346         FA            add	ax,-6[bp]
21416 5512           89C3                       mov	bx,ax
21417                                           ! Debug: and unsigned char mask = [S+$E-5] to unsigned char = [bx+0] (used reg = )
21418 5514           8A07                       mov	al,[bx]
21419 5516           2246         FD            and	al,-3[bp]
21420 5519           84C0                       test	al,al
21421 551B           74           06            je  	.181
21422                       0000551D            .182:
21423                                           ! 2388       {
21424                                           ! 2389      
21425                                           ! 2389   data = attr;
21426                                           ! Debug: eq unsigned char attr = [S+$E+4] to unsigned char data = [S+$E-6] (used reg = )
21427 551D           8A46         06            mov	al,6[bp]
21428 5520           8846         FC            mov	-4[bp],al
21429                                           !BCC_EOS
21430                                           ! 2390       }
21431                                           ! 2391      write_byte(0xa000,dest+j,data);
21432                       00005523            .181:
21433                                           ! Debug: list unsigned char data = [S+$E-6] (used reg = )
21434 5523           8A46         FC            mov	al,-4[bp]
21435 5526           30E4                       xor	ah,ah
21436 5528           50                         push	ax
21437                                           ! Debug: add unsigned char j = [S+$10-4] to unsigned short dest = [S+$10-$C] (used reg = )
21438 5529           8B46         F6            mov	ax,-$A[bp]
21439 552C           0246         FE            add	al,-2[bp]
21440 552F           80D4                   00  adc	ah,*0
21441                                           ! Debug: list unsigned int = ax+0 (used reg = )
21442 5532           50                         push	ax
21443                                           ! Debug: list unsigned int = const $A000 (used reg = )
21444 5533           B8                   A000  mov	ax,#$A000
21445 5536           50                         push	ax
21446                                           ! Debug: func () void = write_byte+0 (used reg = )
21447 5537           E8         27C7            call	_write_byte
21448 553A           83C4                   06  add	sp,*6
21449                                           !BCC_EOS
21450                                           ! 2392      mask >>= 1;
21451                                           ! Debug: srab int = const 1 to unsigned char mask = [S+$E-5] (used reg = )
21452 553D           8A46         FD            mov	al,-3[bp]
21453 5540           30E4                       xor	ah,ah
21454 5542           D1E8                       shr	ax,*1
21455 5544           8846         FD            mov	-3[bp],al
21456                                           !BCC_EOS
21457                                           ! 2393     }
21458                                           ! 2394   }
21459                       00005547            .17E:
21460                                           ! Debug: postinc unsigned char j = [S+$E-4] (used reg = )
21461 5547           8A46         FE            mov	al,-2[bp]
21462 554A           40                         inc	ax
21463 554B           8846         FE            mov	-2[bp],al
21464                       0000554E            .17F:
21465                                           ! Debug: lt int = const 8 to unsigned char j = [S+$E-4] (used reg = )
21466 554E           8A46         FE            mov	al,-2[bp]
21467 5551           3C                     08  cmp	al,*8
21468 5553           72           AC            jb 	.180
21469                       00005555            .183:
21470                       00005555            .17D:
21471                                           ! 2395 }
21472                       00005555            .17A:
21473                                           ! Debug: postinc unsigned char i = [S+$E-3] (used reg = )
21474 5555           8A46         FF            mov	al,-1[bp]
21475 5558           40                         inc	ax
21476 5559           8846         FF            mov	-1[bp],al
21477                       0000555C            .17B:
21478                                           ! Debug: lt int = const 8 to unsigned char i = [S+$E-3] (used reg = )
21479 555C           8A46         FF            mov	al,-1[bp]
21480 555F           3C                     08  cmp	al,*8
21481 5561   7303    E9         FF75            blo 	.17C
21482                       00005566            .184:
21483                       00005566            .179:
21484 5566           89EC                       mov	sp,bp
21485 5568           5D                         pop	bp
21486 5569           C3                         ret
21487                                           ! 2396 static void biosfn_write_char_attr (car,page,attr,count)
21488                                           ! Register BX used in function write_gfx_char_lin
21489                                           ! 2397 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21490                       0000556A            _biosfn_write_char_attr:
21491                                           !BCC_EOS
21492                                           !BCC_EOS
21493                                           !BCC_EOS
21494                                           !BCC_EOS
21495                                           ! 2398 {
21496                                           ! 2399  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21497                                           !BCC_EOS
21498                                           ! 2400  Bit16u nbcols,nbrows,address;
21499                                           !BCC_EOS
21500                                           ! 2401  Bit16u cursor,dummy;
21501                                           !BCC_EOS
21502                                           ! 2402  mode=read_byte(0x40,0x49);
21503 556A           55                         push	bp
21504 556B           89E5                       mov	bp,sp
21505 556D           83C4                   F0  add	sp,*-$10
21506                                           ! Debug: list int = const $49 (used reg = )
21507 5570           B8                   0049  mov	ax,*$49
21508 5573           50                         push	ax
21509                                           ! Debug: list int = const $40 (used reg = )
21510 5574           B8                   0040  mov	ax,*$40
21511 5577           50                         push	ax
21512                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21513 5578           E8         2760            call	_read_byte
21514 557B           83C4                   04  add	sp,*4
21515                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21516 557E           8846         FC            mov	-4[bp],al
21517                                           !BCC_EOS
21518                                           ! 2403  line=find_vga_entry(mode);
21519                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21520 5581           8A46         FC            mov	al,-4[bp]
21521 5584           30E4                       xor	ah,ah
21522 5586           50                         push	ax
21523                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21524 5587           E8         2665            call	_find_vga_entry
21525 558A           44                         inc	sp
21526 558B           44                         inc	sp
21527                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21528 558C           8846         FB            mov	-5[bp],al
21529                                           !BCC_EOS
21530                                           ! 2404  if(line==0xFF)return;
21531                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21532 558F           8A46         FB            mov	al,-5[bp]
21533 5592           3C                     FF  cmp	al,#$FF
21534 5594           75           04            jne 	.185
21535                       00005596            .186:
21536 5596           89EC                       mov	sp,bp
21537 5598           5D                         pop	bp
21538 5599           C3                         ret
21539                                           !BCC_EOS
21540                                           ! 2405  biosfn_get_cursor_pos(page,&dummy,&cursor);
21541                       0000559A            .185:
21542                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21543 559A           8D5E         F2            lea	bx,-$E[bp]
21544 559D           53                         push	bx
21545                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21546 559E           8D5E         F0            lea	bx,-$10[bp]
21547 55A1           53                         push	bx
21548                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21549 55A2           8A46         06            mov	al,6[bp]
21550 55A5           30E4                       xor	ah,ah
21551 55A7           50                         push	ax
21552                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21553 55A8           E8         EE2A            call	_biosfn_get_cursor_pos
21554 55AB           83C4                   06  add	sp,*6
21555                                           !BCC_EOS
21556                                           ! 2406  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21557                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21558 55AE           8A46         F2            mov	al,-$E[bp]
21559                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21560 55B1           8846         FE            mov	-2[bp],al
21561                                           !BCC_EOS
21562                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21563 55B4           8B46         F2            mov	ax,-$E[bp]
21564 55B7           30C0                       xor	al,al
21565                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21566 55B9           88E0                       mov	al,ah
21567 55BB           30E4                       xor	ah,ah
21568                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21569 55BD           8846         FD            mov	-3[bp],al
21570                                           !BCC_EOS
21571                                           ! 2407  nbrows=read_byte(0x40,0x84)+1;
21572                                           ! Debug: list int = const $84 (used reg = )
21573 55C0           B8                   0084  mov	ax,#$84
21574 55C3           50                         push	ax
21575                                           ! Debug: list int = const $40 (used reg = )
21576 55C4           B8                   0040  mov	ax,*$40
21577 55C7           50                         push	ax
21578                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21579 55C8           E8         2710            call	_read_byte
21580 55CB           83C4                   04  add	sp,*4
21581                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21582 55CE           30E4                       xor	ah,ah
21583                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21584 55D0           40                         inc	ax
21585 55D1           8946         F6            mov	-$A[bp],ax
21586                                           !BCC_EOS
21587                                           ! 2408  nbcols=read_word(0x40,0x4A);
21588                                           ! Debug: list int = const $4A (used reg = )
21589 55D4           B8                   004A  mov	ax,*$4A
21590 55D7           50                         push	ax
21591                                           ! Debug: list int = const $40 (used reg = )
21592 55D8           B8                   0040  mov	ax,*$40
21593 55DB           50                         push	ax
21594                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21595 55DC           E8         270F            call	_read_word
21596 55DF           83C4                   04  add	sp,*4
21597                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21598 55E2           8946         F8            mov	-8[bp],ax
21599                                           !BCC_EOS
21600                                           ! 2409  if(vga_modes[line].class==0x00)
21601                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21602 55E5           8A46         FB            mov	al,-5[bp]
21603 55E8           30E4                       xor	ah,ah
21604 55EA           B1                     03  mov	cl,*3
21605 55EC           D3E0                       shl	ax,cl
21606 55EE           89C3                       mov	bx,ax
21607 55F0           81C3                 01E2  add	bx,#_vga_modes
21608                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21609 55F4           8A47         01            mov	al,1[bx]
21610 55F7           84C0                       test	al,al
21611 55F9           75           6A            jne 	.187
21612                       000055FB            .188:
21613                                           ! 2410   {
21614                                           ! 2411    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
21615                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
21616 55FB           8A46         FD            mov	al,-3[bp]
21617 55FE           30E4                       xor	ah,ah
21618 5600           8B4E         F8            mov	cx,-8[bp]
21619 5603           F7E9                       imul	cx
21620                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21621                                           ! Debug: expression subtree swapping
21622 5605           0246         FE            add	al,-2[bp]
21623 5608           80D4                   00  adc	ah,*0
21624                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21625 560B           D1E0                       shl	ax,*1
21626 560D           50                         push	ax
21627                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
21628 560E           8B46         F8            mov	ax,-8[bp]
21629 5611           8B4E         F6            mov	cx,-$A[bp]
21630 5614           F7E9                       imul	cx
21631                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
21632 5616           D1E0                       shl	ax,*1
21633                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
21634 5618           0C                     FF  or	al,#$FF
21635                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
21636                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
21637 561A           89C3                       mov	bx,ax
21638 561C           8A46         06            mov	al,6[bp]
21639 561F           30E4                       xor	ah,ah
21640 5621           93                         xchg	ax,bx
21641 5622           40                         inc	ax
21642 5623           89D9                       mov	cx,bx
21643 5625           F7E9                       imul	cx
21644                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
21645 5627           0346         EE            add	ax,-$12[bp]
21646 562A           44                         inc	sp
21647 562B           44                         inc	sp
21648                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
21649 562C           8946         F4            mov	-$C[bp],ax
21650                                           !BCC_EOS
21651                                           ! 2412    dummy=((Bit16u)attr<<8)+car;
21652                                           ! Debug: cast unsigned short = const 0 to unsigned char attr = [S+$12+6] (used reg = )
21653 562F           8A46         08            mov	al,8[bp]
21654 5632           30E4                       xor	ah,ah
21655                                           ! Debug: sl int = const 8 to unsigned short = ax+0 (used reg = )
21656 5634           88C4                       mov	ah,al
21657 5636           30C0                       xor	al,al
21658                                           ! Debug: add unsigned char car = [S+$12+2] to unsigned int = ax+0 (used reg = )
21659 5638           0246         04            add	al,4[bp]
21660 563B           80D4                   00  adc	ah,*0
21661                                           ! Debug: eq unsigned int = ax+0 to unsigned short dummy = [S+$12-$12] (used reg = )
21662 563E           8946         F0            mov	-$10[bp],ax
21663                                           !BCC_EOS
21664                                           ! 2413    memsetw(vga_modes[line].sstart,address,dummy,count);
21665                                           ! Debug: list unsigned short count = [S+$12+8] (used reg = )
21666 5641           FF76         0A            push	$A[bp]
21667                                           ! Debug: list unsigned short dummy = [S+$14-$12] (used reg = )
21668 5644           FF76         F0            push	-$10[bp]
21669                                           ! Debug: list unsigned short address = [S+$16-$E] (used reg = )
21670 5647           FF76         F4            push	-$C[bp]
21671                                           ! Debug: ptradd unsigned char line = [S+$18-7] to [$10] struct  = vga_modes+0 (used reg = )
21672 564A           8A46         FB            mov	al,-5[bp]
21673 564D           30E4                       xor	ah,ah
21674 564F           B1                     03  mov	cl,*3
21675 5651           D3E0                       shl	ax,cl
21676 5653           89C3                       mov	bx,ax
21677 5655           81C3                 01E2  add	bx,#_vga_modes
21678                                           ! Debug: list unsigned short = [bx+4] (used reg = )
21679 5659           FF77         04            push	4[bx]
21680                                           ! Debug: func () void = memsetw+0 (used reg = )
21681 565C           E8         25F7            call	_memsetw
21682 565F           83C4                   08  add	sp,*8
21683                                           !BCC_EOS
21684                                           ! 2414   }
21685                                           ! 2415  else
21686                                           ! 2416   {
21687 5662           E9         00FB            br 	.189
21688                       00005665            .187:
21689                                           ! 2417    cheight=video_param_table[line_to_vpti[line]].cheight;
21690                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
21691 5665           8A46         FB            mov	al,-5[bp]
21692 5668           30E4                       xor	ah,ah
21693 566A           89C3                       mov	bx,ax
21694                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
21695 566C           8A87       0262            mov	al,_line_to_vpti[bx]
21696 5670           30E4                       xor	ah,ah
21697 5672           B1                     06  mov	cl,*6
21698 5674           D3E0                       shl	ax,cl
21699 5676           89C3                       mov	bx,ax
21700 5678           81C3                 0276  add	bx,#_video_param_table
21701                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
21702 567C           8A47         02            mov	al,2[bx]
21703 567F           8846         FF            mov	-1[bp],al
21704                                           !BCC_EOS
21705                                           ! 2418    bpp=vga_modes[line].pixbits;
21706                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21707 5682           8A46         FB            mov	al,-5[bp]
21708 5685           30E4                       xor	ah,ah
21709 5687           B1                     03  mov	cl,*3
21710 5689           D3E0                       shl	ax,cl
21711 568B           89C3                       mov	bx,ax
21712 568D           81C3                 01E2  add	bx,#_vga_modes
21713                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
21714 5691           8A47         03            mov	al,3[bx]
21715 5694           8846         FA            mov	-6[bp],al
21716                                           !BCC_EOS
21717                                           ! 2419    while((count-->0) && (xcurs<nbcols))
21718                                           ! 2420     {
21719 5697           E9         00AD            br 	.18B
21720                       0000569A            .18C:
21721                                           ! 2421      switch(vga_modes[line].memmodel)
21722                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21723 569A           8A46         FB            mov	al,-5[bp]
21724 569D           30E4                       xor	ah,ah
21725 569F           B1                     03  mov	cl,*3
21726 56A1           D3E0                       shl	ax,cl
21727 56A3           89C3                       mov	bx,ax
21728 56A5           81C3                 01E2  add	bx,#_vga_modes
21729 56A9           8A47         02            mov	al,2[bx]
21730                                           ! 2422       {
21731 56AC           EB           7A            jmp .18F
21732                                           ! 2423        case 0x04:
21733                                           ! 2424        case 0x03:
21734                       000056AE            .190:
21735                                           ! 2425          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
21736                       000056AE            .191:
21737                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
21738 56AE           8A46         FF            mov	al,-1[bp]
21739 56B1           30E4                       xor	ah,ah
21740 56B3           50                         push	ax
21741                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21742 56B4           FF76         F8            push	-8[bp]
21743                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21744 56B7           8A46         FD            mov	al,-3[bp]
21745 56BA           30E4                       xor	ah,ah
21746 56BC           50                         push	ax
21747                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21748 56BD           8A46         FE            mov	al,-2[bp]
21749 56C0           30E4                       xor	ah,ah
21750 56C2           50                         push	ax
21751                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21752 56C3           8A46         08            mov	al,8[bp]
21753 56C6           30E4                       xor	ah,ah
21754 56C8           50                         push	ax
21755                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21756 56C9           8A46         04            mov	al,4[bp]
21757 56CC           30E4                       xor	ah,ah
21758 56CE           50                         push	ax
21759                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
21760 56CF           E8         FA48            call	_write_gfx_char_pl4
21761 56D2           83C4                   0C  add	sp,*$C
21762                                           !BCC_EOS
21763                                           ! 2426          break;
21764 56D5           EB           69            jmp .18D
21765                                           !BCC_EOS
21766                                           ! 2427        case 0x02:
21767                                           ! 2428          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
21768                       000056D7            .192:
21769                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
21770 56D7           8A46         FA            mov	al,-6[bp]
21771 56DA           30E4                       xor	ah,ah
21772 56DC           50                         push	ax
21773                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
21774 56DD           FF76         F8            push	-8[bp]
21775                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
21776 56E0           8A46         FD            mov	al,-3[bp]
21777 56E3           30E4                       xor	ah,ah
21778 56E5           50                         push	ax
21779                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
21780 56E6           8A46         FE            mov	al,-2[bp]
21781 56E9           30E4                       xor	ah,ah
21782 56EB           50                         push	ax
21783                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
21784 56EC           8A46         08            mov	al,8[bp]
21785 56EF           30E4                       xor	ah,ah
21786 56F1           50                         push	ax
21787                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
21788 56F2           8A46         04            mov	al,4[bp]
21789 56F5           30E4                       xor	ah,ah
21790 56F7           50                         push	ax
21791                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
21792 56F8           E8         FB94            call	_write_gfx_char_cga
21793 56FB           83C4                   0C  add	sp,*$C
21794                                           !BCC_EOS
21795                                           ! 2429          break;
21796 56FE           EB           40            jmp .18D
21797                                           !BCC_EOS
21798                                           ! 2430        case 0x05:
21799                                           ! 2431          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
21800                       00005700            .193:
21801                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
21802 5700           FF76         F8            push	-8[bp]
21803                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
21804 5703           8A46         FD            mov	al,-3[bp]
21805 5706           30E4                       xor	ah,ah
21806 5708           50                         push	ax
21807                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
21808 5709           8A46         FE            mov	al,-2[bp]
21809 570C           30E4                       xor	ah,ah
21810 570E           50                         push	ax
21811                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
21812 570F           8A46         08            mov	al,8[bp]
21813 5712           30E4                       xor	ah,ah
21814 5714           50                         push	ax
21815                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
21816 5715           8A46         04            mov	al,4[bp]
21817 5718           30E4                       xor	ah,ah
21818 571A           50                         push	ax
21819                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
21820 571B           E8         FD77            call	_write_gfx_char_lin
21821 571E           83C4                   0A  add	sp,*$A
21822                                           !BCC_EOS
21823                                           ! 2432          break;
21824 5721           EB           1D            jmp .18D
21825                                           !BCC_EOS
21826                                           ! 2433        default:
21827                                           ! 2434          unimplemented();
21828                       00005723            .194:
21829                                           ! Debug: func () void = unimplemented+0 (used reg = )
21830 5723           E8         2644            call	_unimplemented
21831                                           !BCC_EOS
21832                                           ! 2435       }
21833                                           ! 2436      xcurs++;
21834 5726           EB           18            jmp .18D
21835                       00005728            .18F:
21836 5728           2C                     02  sub	al,*2
21837 572A           74           AB            je 	.192
21838 572C           2C                     01  sub	al,*1
21839 572E   7503    E9         FF7B            beq 	.191
21840 5733           2C                     01  sub	al,*1
21841 5735   7503    E9         FF74            beq 	.190
21842 573A           2C                     01  sub	al,*1
21843 573C           74           C2            je 	.193
21844 573E           EB           E3            jmp	.194
21845                       00005740            .18D:
21846                       FFFFFFEE            ..FFFA	=	-$12
21847                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
21848 5740           8A46         FE            mov	al,-2[bp]
21849 5743           40                         inc	ax
21850 5744           8846         FE            mov	-2[bp],al
21851                                           !BCC_EOS
21852                                           ! 2437     }
21853                                           ! 2438   }
21854                       00005747            .18B:
21855                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
21856 5747           8B46         0A            mov	ax,$A[bp]
21857 574A           48                         dec	ax
21858 574B           8946         0A            mov	$A[bp],ax
21859                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
21860 574E           3D                   FFFF  cmp	ax,*-1
21861 5751           74           0D            je  	.195
21862                       00005753            .196:
21863                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
21864 5753           8A46         FE            mov	al,-2[bp]
21865 5756           30E4                       xor	ah,ah
21866 5758           3B46         F8            cmp	ax,-8[bp]
21867 575B   7303    E9         FF3A            blo 	.18C
21868                       00005760            .195:
21869                       00005760            .18A:
21870                                           ! 2439 }
21871                       00005760            .189:
21872 5760           89EC                       mov	sp,bp
21873 5762           5D                         pop	bp
21874 5763           C3                         ret
21875                                           ! 2440 static void biosfn_write_char_only (car,page,attr,count)
21876                                           ! Register BX used in function biosfn_write_char_attr
21877                                           ! 2441 Bit8u car;Bit8u page;Bit8u attr;Bit16u count;
21878                       00005764            _biosfn_write_char_only:
21879                                           !BCC_EOS
21880                                           !BCC_EOS
21881                                           !BCC_EOS
21882                                           !BCC_EOS
21883                                           ! 2442 {
21884                                           ! 2443  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
21885                                           !BCC_EOS
21886                                           ! 2444  Bit16u nbcols,nbrows,address;
21887                                           !BCC_EOS
21888                                           ! 2445  Bit16u cursor,dummy;
21889                                           !BCC_EOS
21890                                           ! 2446  mode=read_byte(0x40,0x49);
21891 5764           55                         push	bp
21892 5765           89E5                       mov	bp,sp
21893 5767           83C4                   F0  add	sp,*-$10
21894                                           ! Debug: list int = const $49 (used reg = )
21895 576A           B8                   0049  mov	ax,*$49
21896 576D           50                         push	ax
21897                                           ! Debug: list int = const $40 (used reg = )
21898 576E           B8                   0040  mov	ax,*$40
21899 5771           50                         push	ax
21900                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21901 5772           E8         2566            call	_read_byte
21902 5775           83C4                   04  add	sp,*4
21903                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
21904 5778           8846         FC            mov	-4[bp],al
21905                                           !BCC_EOS
21906                                           ! 2447  line=find_vga_entry(mode);
21907                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
21908 577B           8A46         FC            mov	al,-4[bp]
21909 577E           30E4                       xor	ah,ah
21910 5780           50                         push	ax
21911                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
21912 5781           E8         246B            call	_find_vga_entry
21913 5784           44                         inc	sp
21914 5785           44                         inc	sp
21915                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
21916 5786           8846         FB            mov	-5[bp],al
21917                                           !BCC_EOS
21918                                           ! 2448  if(line==0xFF)return;
21919                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
21920 5789           8A46         FB            mov	al,-5[bp]
21921 578C           3C                     FF  cmp	al,#$FF
21922 578E           75           04            jne 	.197
21923                       00005790            .198:
21924 5790           89EC                       mov	sp,bp
21925 5792           5D                         pop	bp
21926 5793           C3                         ret
21927                                           !BCC_EOS
21928                                           ! 2449  biosfn_get_cursor_pos(page,&dummy,&cursor);
21929                       00005794            .197:
21930                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
21931 5794           8D5E         F2            lea	bx,-$E[bp]
21932 5797           53                         push	bx
21933                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
21934 5798           8D5E         F0            lea	bx,-$10[bp]
21935 579B           53                         push	bx
21936                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
21937 579C           8A46         06            mov	al,6[bp]
21938 579F           30E4                       xor	ah,ah
21939 57A1           50                         push	ax
21940                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
21941 57A2           E8         EC30            call	_biosfn_get_cursor_pos
21942 57A5           83C4                   06  add	sp,*6
21943                                           !BCC_EOS
21944                                           ! 2450  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
21945                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
21946 57A8           8A46         F2            mov	al,-$E[bp]
21947                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
21948 57AB           8846         FE            mov	-2[bp],al
21949                                           !BCC_EOS
21950                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
21951 57AE           8B46         F2            mov	ax,-$E[bp]
21952 57B1           30C0                       xor	al,al
21953                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
21954 57B3           88E0                       mov	al,ah
21955 57B5           30E4                       xor	ah,ah
21956                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
21957 57B7           8846         FD            mov	-3[bp],al
21958                                           !BCC_EOS
21959                                           ! 2451  nbrows=read_byte(0x40,0x84)+1;
21960                                           ! Debug: list int = const $84 (used reg = )
21961 57BA           B8                   0084  mov	ax,#$84
21962 57BD           50                         push	ax
21963                                           ! Debug: list int = const $40 (used reg = )
21964 57BE           B8                   0040  mov	ax,*$40
21965 57C1           50                         push	ax
21966                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
21967 57C2           E8         2516            call	_read_byte
21968 57C5           83C4                   04  add	sp,*4
21969                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
21970 57C8           30E4                       xor	ah,ah
21971                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
21972 57CA           40                         inc	ax
21973 57CB           8946         F6            mov	-$A[bp],ax
21974                                           !BCC_EOS
21975                                           ! 2452  nbcols=read_word(0x40,0x4A);
21976                                           ! Debug: list int = const $4A (used reg = )
21977 57CE           B8                   004A  mov	ax,*$4A
21978 57D1           50                         push	ax
21979                                           ! Debug: list int = const $40 (used reg = )
21980 57D2           B8                   0040  mov	ax,*$40
21981 57D5           50                         push	ax
21982                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
21983 57D6           E8         2515            call	_read_word
21984 57D9           83C4                   04  add	sp,*4
21985                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
21986 57DC           8946         F8            mov	-8[bp],ax
21987                                           !BCC_EOS
21988                                           ! 2453  if(vga_modes[line].class==0x00)
21989                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
21990 57DF           8A46         FB            mov	al,-5[bp]
21991 57E2           30E4                       xor	ah,ah
21992 57E4           B1                     03  mov	cl,*3
21993 57E6           D3E0                       shl	ax,cl
21994 57E8           89C3                       mov	bx,ax
21995 57EA           81C3                 01E2  add	bx,#_vga_modes
21996                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
21997 57EE           8A47         01            mov	al,1[bx]
21998 57F1           84C0                       test	al,al
21999 57F3           75           6E            jne 	.199
22000                       000057F5            .19A:
22001                                           ! 2454   {
22002                                           ! 2455    address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
22003                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
22004 57F5           8A46         FD            mov	al,-3[bp]
22005 57F8           30E4                       xor	ah,ah
22006 57FA           8B4E         F8            mov	cx,-8[bp]
22007 57FD           F7E9                       imul	cx
22008                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
22009                                           ! Debug: expression subtree swapping
22010 57FF           0246         FE            add	al,-2[bp]
22011 5802           80D4                   00  adc	ah,*0
22012                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22013 5805           D1E0                       shl	ax,*1
22014 5807           50                         push	ax
22015                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
22016 5808           8B46         F8            mov	ax,-8[bp]
22017 580B           8B4E         F6            mov	cx,-$A[bp]
22018 580E           F7E9                       imul	cx
22019                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22020 5810           D1E0                       shl	ax,*1
22021                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
22022 5812           0C                     FF  or	al,#$FF
22023                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
22024                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
22025 5814           89C3                       mov	bx,ax
22026 5816           8A46         06            mov	al,6[bp]
22027 5819           30E4                       xor	ah,ah
22028 581B           93                         xchg	ax,bx
22029 581C           40                         inc	ax
22030 581D           89D9                       mov	cx,bx
22031 581F           F7E9                       imul	cx
22032                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
22033 5821           0346         EE            add	ax,-$12[bp]
22034 5824           44                         inc	sp
22035 5825           44                         inc	sp
22036                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
22037 5826           8946         F4            mov	-$C[bp],ax
22038                                           !BCC_EOS
22039                                           ! 2456    while(count-->0)
22040                                           ! 2457     {write_byte(vga_modes[line].sstart,address,car);
22041 5829           EB           29            jmp .19C
22042                       0000582B            .19D:
22043                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
22044 582B           8A46         04            mov	al,4[bp]
22045 582E           30E4                       xor	ah,ah
22046 5830           50                         push	ax
22047                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
22048 5831           FF76         F4            push	-$C[bp]
22049                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
22050 5834           8A46         FB            mov	al,-5[bp]
22051 5837           30E4                       xor	ah,ah
22052 5839           B1                     03  mov	cl,*3
22053 583B           D3E0                       shl	ax,cl
22054 583D           89C3                       mov	bx,ax
22055 583F           81C3                 01E2  add	bx,#_vga_modes
22056                                           ! Debug: list unsigned short = [bx+4] (used reg = )
22057 5843           FF77         04            push	4[bx]
22058                                           ! Debug: func () void = write_byte+0 (used reg = )
22059 5846           E8         24B8            call	_write_byte
22060 5849           83C4                   06  add	sp,*6
22061                                           !BCC_EOS
22062                                           ! 2458      address+=2;
22063                                           ! Debug: addab int = const 2 to unsigned short address = [S+$12-$E] (used reg = )
22064 584C           8B46         F4            mov	ax,-$C[bp]
22065 584F           40                         inc	ax
22066 5850           40                         inc	ax
22067 5851           8946         F4            mov	-$C[bp],ax
22068                                           !BCC_EOS
22069                                           ! 2459     }
22070                                           ! 2460   }
22071                       00005854            .19C:
22072                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22073 5854           8B46         0A            mov	ax,$A[bp]
22074 5857           48                         dec	ax
22075 5858           8946         0A            mov	$A[bp],ax
22076                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22077 585B           3D                   FFFF  cmp	ax,*-1
22078 585E           75           CB            jne	.19D
22079                       00005860            .19E:
22080                       00005860            .19B:
22081                                           ! 2461  else
22082                                           ! 2462   {
22083 5860           E9         00FB            br 	.19F
22084                       00005863            .199:
22085                                           ! 2463    cheight=video_param_table[line_to_vpti[line]].cheight;
22086                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
22087 5863           8A46         FB            mov	al,-5[bp]
22088 5866           30E4                       xor	ah,ah
22089 5868           89C3                       mov	bx,ax
22090                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
22091 586A           8A87       0262            mov	al,_line_to_vpti[bx]
22092 586E           30E4                       xor	ah,ah
22093 5870           B1                     06  mov	cl,*6
22094 5872           D3E0                       shl	ax,cl
22095 5874           89C3                       mov	bx,ax
22096 5876           81C3                 0276  add	bx,#_video_param_table
22097                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
22098 587A           8A47         02            mov	al,2[bx]
22099 587D           8846         FF            mov	-1[bp],al
22100                                           !BCC_EOS
22101                                           ! 2464    bpp=vga_modes[line].pixbits;
22102                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22103 5880           8A46         FB            mov	al,-5[bp]
22104 5883           30E4                       xor	ah,ah
22105 5885           B1                     03  mov	cl,*3
22106 5887           D3E0                       shl	ax,cl
22107 5889           89C3                       mov	bx,ax
22108 588B           81C3                 01E2  add	bx,#_vga_modes
22109                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
22110 588F           8A47         03            mov	al,3[bx]
22111 5892           8846         FA            mov	-6[bp],al
22112                                           !BCC_EOS
22113                                           ! 2465    whil
22114                                           ! 2465 e((count-->0) && (xcurs<nbcols))
22115                                           ! 2466     {
22116 5895           E9         00AD            br 	.1A1
22117                       00005898            .1A2:
22118                                           ! 2467      switch(vga_modes[line].memmodel)
22119                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
22120 5898           8A46         FB            mov	al,-5[bp]
22121 589B           30E4                       xor	ah,ah
22122 589D           B1                     03  mov	cl,*3
22123 589F           D3E0                       shl	ax,cl
22124 58A1           89C3                       mov	bx,ax
22125 58A3           81C3                 01E2  add	bx,#_vga_modes
22126 58A7           8A47         02            mov	al,2[bx]
22127                                           ! 2468       {
22128 58AA           EB           7A            jmp .1A5
22129                                           ! 2469        case 0x04:
22130                                           ! 2470        case 0x03:
22131                       000058AC            .1A6:
22132                                           ! 2471          write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
22133                       000058AC            .1A7:
22134                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
22135 58AC           8A46         FF            mov	al,-1[bp]
22136 58AF           30E4                       xor	ah,ah
22137 58B1           50                         push	ax
22138                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22139 58B2           FF76         F8            push	-8[bp]
22140                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22141 58B5           8A46         FD            mov	al,-3[bp]
22142 58B8           30E4                       xor	ah,ah
22143 58BA           50                         push	ax
22144                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22145 58BB           8A46         FE            mov	al,-2[bp]
22146 58BE           30E4                       xor	ah,ah
22147 58C0           50                         push	ax
22148                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22149 58C1           8A46         08            mov	al,8[bp]
22150 58C4           30E4                       xor	ah,ah
22151 58C6           50                         push	ax
22152                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22153 58C7           8A46         04            mov	al,4[bp]
22154 58CA           30E4                       xor	ah,ah
22155 58CC           50                         push	ax
22156                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
22157 58CD           E8         F84A            call	_write_gfx_char_pl4
22158 58D0           83C4                   0C  add	sp,*$C
22159                                           !BCC_EOS
22160                                           ! 2472          break;
22161 58D3           EB           69            jmp .1A3
22162                                           !BCC_EOS
22163                                           ! 2473        case 0x02:
22164                                           ! 2474          write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
22165                       000058D5            .1A8:
22166                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
22167 58D5           8A46         FA            mov	al,-6[bp]
22168 58D8           30E4                       xor	ah,ah
22169 58DA           50                         push	ax
22170                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
22171 58DB           FF76         F8            push	-8[bp]
22172                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
22173 58DE           8A46         FD            mov	al,-3[bp]
22174 58E1           30E4                       xor	ah,ah
22175 58E3           50                         push	ax
22176                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
22177 58E4           8A46         FE            mov	al,-2[bp]
22178 58E7           30E4                       xor	ah,ah
22179 58E9           50                         push	ax
22180                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
22181 58EA           8A46         08            mov	al,8[bp]
22182 58ED           30E4                       xor	ah,ah
22183 58EF           50                         push	ax
22184                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
22185 58F0           8A46         04            mov	al,4[bp]
22186 58F3           30E4                       xor	ah,ah
22187 58F5           50                         push	ax
22188                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
22189 58F6           E8         F996            call	_write_gfx_char_cga
22190 58F9           83C4                   0C  add	sp,*$C
22191                                           !BCC_EOS
22192                                           ! 2475          break;
22193 58FC           EB           40            jmp .1A3
22194                                           !BCC_EOS
22195                                           ! 2476        case 0x05:
22196                                           ! 2477          write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
22197                       000058FE            .1A9:
22198                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
22199 58FE           FF76         F8            push	-8[bp]
22200                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
22201 5901           8A46         FD            mov	al,-3[bp]
22202 5904           30E4                       xor	ah,ah
22203 5906           50                         push	ax
22204                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
22205 5907           8A46         FE            mov	al,-2[bp]
22206 590A           30E4                       xor	ah,ah
22207 590C           50                         push	ax
22208                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
22209 590D           8A46         08            mov	al,8[bp]
22210 5910           30E4                       xor	ah,ah
22211 5912           50                         push	ax
22212                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
22213 5913           8A46         04            mov	al,4[bp]
22214 5916           30E4                       xor	ah,ah
22215 5918           50                         push	ax
22216                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
22217 5919           E8         FB79            call	_write_gfx_char_lin
22218 591C           83C4                   0A  add	sp,*$A
22219                                           !BCC_EOS
22220                                           ! 2478          break;
22221 591F           EB           1D            jmp .1A3
22222                                           !BCC_EOS
22223                                           ! 2479        default:
22224                                           ! 2480          unimplemented();
22225                       00005921            .1AA:
22226                                           ! Debug: func () void = unimplemented+0 (used reg = )
22227 5921           E8         2446            call	_unimplemented
22228                                           !BCC_EOS
22229                                           ! 2481       }
22230                                           ! 2482      xcurs++;
22231 5924           EB           18            jmp .1A3
22232                       00005926            .1A5:
22233 5926           2C                     02  sub	al,*2
22234 5928           74           AB            je 	.1A8
22235 592A           2C                     01  sub	al,*1
22236 592C   7503    E9         FF7B            beq 	.1A7
22237 5931           2C                     01  sub	al,*1
22238 5933   7503    E9         FF74            beq 	.1A6
22239 5938           2C                     01  sub	al,*1
22240 593A           74           C2            je 	.1A9
22241 593C           EB           E3            jmp	.1AA
22242                       0000593E            .1A3:
22243                       FFFFFFEE            ..FFF9	=	-$12
22244                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
22245 593E           8A46         FE            mov	al,-2[bp]
22246 5941           40                         inc	ax
22247 5942           8846         FE            mov	-2[bp],al
22248                                           !BCC_EOS
22249                                           ! 2483     }
22250                                           ! 2484   }
22251                       00005945            .1A1:
22252                                           ! Debug: postdec unsigned short count = [S+$12+8] (used reg = )
22253 5945           8B46         0A            mov	ax,$A[bp]
22254 5948           48                         dec	ax
22255 5949           8946         0A            mov	$A[bp],ax
22256                                           ! Debug: gt int = const 0 to unsigned short = ax+1 (used reg = )
22257 594C           3D                   FFFF  cmp	ax,*-1
22258 594F           74           0D            je  	.1AB
22259                       00005951            .1AC:
22260                                           ! Debug: lt unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
22261 5951           8A46         FE            mov	al,-2[bp]
22262 5954           30E4                       xor	ah,ah
22263 5956           3B46         F8            cmp	ax,-8[bp]
22264 5959   7303    E9         FF3A            blo 	.1A2
22265                       0000595E            .1AB:
22266                       0000595E            .1A0:
22267                                           ! 2485 }
22268                       0000595E            .19F:
22269 595E           89EC                       mov	sp,bp
22270 5960           5D                         pop	bp
22271 5961           C3                         ret
22272                                           ! 2486 #asm
22273                                           !BCC_ASM
22274                       00000008            _biosfn_write_char_only.count	set	8
22275                       00000006            _biosfn_write_char_only.attr	set	6
22276                       00000004            _biosfn_write_char_only.page	set	4
22277                       00000002            _biosfn_write_char_only.car	set	2
22278                       00005962            biosfn_group_0B:
22279 5962           80FF                   00    cmp bh, #0x00
22280 5965           74           09              je biosfn_set_border_color
22281 5967           80FF                   01    cmp bh, #0x01
22282 596A           74           43              je biosfn_set_palette
22283 596C           E8         2409              call _unknown
22284 596F           C3                           ret
22285                       00005970            biosfn_set_border_color:
22286 5970           50                           push ax
22287 5971           53                           push bx
22288 5972           51                           push cx
22289 5973           52                           push dx
22290 5974           BA                   03DA    mov dx, # 0x3da
22291 5977           EC                           in al, dx
22292 5978           BA                   03C0    mov dx, # 0x3c0
22293 597B           B0                     00    mov al, #0x00
22294 597D           EE                           out dx, al
22295 597E           88D8                         mov al, bl
22296 5980           24                     0F    and al, #0x0f
22297 5982           A8                     08    test al, #0x08
22298 5984           74           02              jz set_low_border
22299 5986           04                     08    add al, #0x08
22300                       00005988            set_low_border:
22301 5988           EE                           out dx, al
22302 5989           B1                     01    mov cl, #0x01
22303 598B           80E3                   10    and bl, #0x10
22304                       0000598E            set_intensity_loop:
22305 598E           BA                   03C0    mov dx, # 0x3c0
22306 5991           88C8                         mov al, cl
22307 5993           EE                           out dx, al
22308 5994           BA                   03C1    mov dx, # 0x3c1
22309 5997           EC                           in al, dx
22310 5998           24                     EF    and al, #0xef
22311 599A           08D8                         or al, bl
22312 599C           BA                   03C0    mov dx, # 0x3c0
22313 599F           EE                           out dx, al
22314 59A0           FEC1                         inc cl
22315 59A2           80F9                   04    cmp cl, #0x04
22316 59A5           75           E7              jne set_intensity_loop
22317 59A7           B0                     20    mov al, #0x20
22318 59A9           EE                           out dx, al
22319 59AA           5A                           pop dx
22320 59AB           59                           pop cx
22321 59AC           5B                           pop bx
22322 59AD           58                           pop ax
22323 59AE           C3                           ret
22324                       000059AF            biosfn_set_palette:
22325 59AF           50                           push ax
22326 59B0           53                           push bx
22327 59B1           51                           push cx
22328 59B2           52                           push dx
22329 59B3           BA                   03DA    mov dx, # 0x3da
22330 59B6           EC                           in al, dx
22331 59B7           B1                     01    mov cl, #0x01
22332 59B9           80E3                   01    and bl, #0x01
22333                       000059BC            set_cga_palette_loop:
22334 59BC           BA                   03C0    mov dx, # 0x3c0
22335 59BF           88C8                         mov al, cl
22336 59C1           EE                           out dx, al
22337 59C2           BA                   03C1    mov dx, # 0x3c1
22338 59C5           EC                           in al, dx
22339 59C6           24                     FE    and al, #0xfe
22340 59C8           08D8                         or al, bl
22341 59CA           BA                   03C0    mov dx, # 0x3c0
22342 59CD           EE                           out dx, al
22343 59CE           FEC1                         inc cl
22344 59D0           80F9                   04    cmp cl, #0x04
22345 59D3           75           E7              jne set_cga_palette_loop
22346 59D5           B0                     20    mov al, #0x20
22347 59D7           EE                           out dx, al
22348 59D8           5A                           pop dx
22349 59D9           59                           pop cx
22350 59DA           5B                           pop bx
22351 59DB           58                           pop ax
22352 59DC           C3                           ret
22353                                           ! 2562 endasm
22354                                           !BCC_ENDASM
22355                                           ! 2563 static void biosfn_write_pixel (BH,AL,CX,DX) Bit8u BH;Bit8u AL;Bit16u CX;Bit16u DX;
22356                                           ! Register BX used in function biosfn_write_char_only
22357                       000059DD            _biosfn_write_pixel:
22358                                           !BCC_EOS
22359                                           !BCC_EOS
22360                                           !BCC_EOS
22361                                           !BCC_EOS
22362                                           ! 2564 {
22363                                           ! 2565  Bit8u mode,line,mask,attr,data;
22364                                           !BCC_EOS
22365                                           ! 2566  Bit16u addr;
22366                                           !BCC_EOS
22367                                           ! 2567  mode=read_byte(0x40,0x49);
22368 59DD           55                         push	bp
22369 59DE           89E5                       mov	bp,sp
22370 59E0           83C4                   F8  add	sp,*-8
22371                                           ! Debug: list int = const $49 (used reg = )
22372 59E3           B8                   0049  mov	ax,*$49
22373 59E6           50                         push	ax
22374                                           ! Debug: list int = const $40 (used reg = )
22375 59E7           B8                   0040  mov	ax,*$40
22376 59EA           50                         push	ax
22377                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22378 59EB           E8         22ED            call	_read_byte
22379 59EE           83C4                   04  add	sp,*4
22380                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$A-3] (used reg = )
22381 59F1           8846         FF            mov	-1[bp],al
22382                                           !BCC_EOS
22383                                           ! 2568  line=find_vga_entry(mode);
22384                                           ! Debug: list unsigned char mode = [S+$A-3] (used reg = )
22385 59F4           8A46         FF            mov	al,-1[bp]
22386 59F7           30E4                       xor	ah,ah
22387 59F9           50                         push	ax
22388                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22389 59FA           E8         21F2            call	_find_vga_entry
22390 59FD           44                         inc	sp
22391 59FE           44                         inc	sp
22392                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$A-4] (used reg = )
22393 59FF           8846         FE            mov	-2[bp],al
22394                                           !BCC_EOS
22395                                           ! 2569  if(line==0xFF)return;
22396                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$A-4] (used reg = )
22397 5A02           8A46         FE            mov	al,-2[bp]
22398 5A05           3C                     FF  cmp	al,#$FF
22399 5A07           75           04            jne 	.1AD
22400                       00005A09            .1AE:
22401 5A09           89EC                       mov	sp,bp
22402 5A0B           5D                         pop	bp
22403 5A0C           C3                         ret
22404                                           !BCC_EOS
22405                                           ! 2570  if(vga_modes[line].class==0x00)return;
22406                       00005A0D            .1AD:
22407                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22408 5A0D           8A46         FE            mov	al,-2[bp]
22409 5A10           30E4                       xor	ah,ah
22410 5A12           B1                     03  mov	cl,*3
22411 5A14           D3E0                       shl	ax,cl
22412 5A16           89C3                       mov	bx,ax
22413 5A18           81C3                 01E2  add	bx,#_vga_modes
22414                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22415 5A1C           8A47         01            mov	al,1[bx]
22416 5A1F           84C0                       test	al,al
22417 5A21           75           04            jne 	.1AF
22418                       00005A23            .1B0:
22419 5A23           89EC                       mov	sp,bp
22420 5A25           5D                         pop	bp
22421 5A26           C3                         ret
22422                                           !BCC_EOS
22423                                           ! 2571  switch(vga_modes[line].memmodel)
22424                       00005A27            .1AF:
22425                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22426 5A27           8A46         FE            mov	al,-2[bp]
22427 5A2A           30E4                       xor	ah,ah
22428 5A2C           B1                     03  mov	cl,*3
22429 5A2E           D3E0                       shl	ax,cl
22430 5A30           89C3                       mov	bx,ax
22431 5A32           81C3                 01E2  add	bx,#_vga_modes
22432 5A36           8A47         02            mov	al,2[bx]
22433                                           ! 2572   {
22434 5A39           E9         0226            br 	.1B3
22435                                           ! 2573    case 0x04:
22436                                           ! 2574    case 0x03:
22437                       00005A3C            .1B4:
22438                                           ! 2575      addr = CX/8+DX*read_word(0x40,0x4A);
22439                       00005A3C            .1B5:
22440                                           ! Debug: list int = const $4A (used reg = )
22441 5A3C           B8                   004A  mov	ax,*$4A
22442 5A3F           50                         push	ax
22443                                           ! Debug: list int = const $40 (used reg = )
22444 5A40           B8                   0040  mov	ax,*$40
22445 5A43           50                         push	ax
22446                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22447 5A44           E8         22A7            call	_read_word
22448 5A47           83C4                   04  add	sp,*4
22449                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22450                                           ! Debug: expression subtree swapping
22451 5A4A           8B4E         0A            mov	cx,$A[bp]
22452 5A4D           F7E9                       imul	cx
22453 5A4F           50                         push	ax
22454                                           ! Debug: div int = const 8 to unsigned short CX = [S+$C+6] (used reg = )
22455 5A50           8B46         08            mov	ax,8[bp]
22456 5A53           B1                     03  mov	cl,*3
22457 5A55           D3E8                       shr	ax,cl
22458                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22459 5A57           0346         F6            add	ax,0+..FFF8[bp]
22460 5A5A           44                         inc	sp
22461 5A5B           44                         inc	sp
22462                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22463 5A5C           8946         F8            mov	-8[bp],ax
22464                                           !BCC_EOS
22465                                           ! 2576      mask = 0x80 >> (CX & 0x07);
22466                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22467 5A5F           8A46         08            mov	al,8[bp]
22468 5A62           24                     07  and	al,*7
22469                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
22470 5A64           30E4                       xor	ah,ah
22471 5A66           89C3                       mov	bx,ax
22472 5A68           B8                   0080  mov	ax,#$80
22473 5A6B           89D9                       mov	cx,bx
22474 5A6D           D3F8                       sar	ax,cl
22475                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22476 5A6F           8846         FD            mov	-3[bp],al
22477                                           !BCC_EOS
22478                                           ! 2577      outw(0x3ce, (mask << 8) | 0x08);
22479                                           ! Debug: sl int = const 8 to unsigned char mask = [S+$A-5] (used reg = )
22480 5A72           8A46         FD            mov	al,-3[bp]
22481 5A75           30E4                       xor	ah,ah
22482 5A77           88C4                       mov	ah,al
22483 5A79           30C0                       xor	al,al
22484                                           ! Debug: or int = const 8 to unsigned int = ax+0 (used reg = )
22485 5A7B           0C                     08  or	al,*8
22486                                           ! Debug: list unsigned int = ax+0 (used reg = )
22487 5A7D           50                         push	ax
22488                                           ! Debug: list int = const $3CE (used reg = )
22489 5A7E           B8                   03CE  mov	ax,#$3CE
22490 5A81           50                         push	ax
22491                                           ! Debug: func () void = outw+0 (used reg = )
22492 5A82           E8         22D2            call	_outw
22493 5A85           83C4                   04  add	sp,*4
22494                                           !BCC_EOS
22495                                           ! 2578      outw(0x3ce, 0x0205);
22496                                           ! Debug: list int = const $205 (used reg = )
22497 5A88           B8                   0205  mov	ax,#$205
22498 5A8B           50                         push	ax
22499                                           ! Debug: list int = const $3CE (used reg = )
22500 5A8C           B8                   03CE  mov	ax,#$3CE
22501 5A8F           50                         push	ax
22502                                           ! Debug: func () void = outw+0 (used reg = )
22503 5A90           E8         22C4            call	_outw
22504 5A93           83C4                   04  add	sp,*4
22505                                           !BCC_EOS
22506                                           ! 2579      data = read_byte(0xa000
22507                                           ! 2579 ,addr);
22508                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22509 5A96           FF76         F8            push	-8[bp]
22510                                           ! Debug: list unsigned int = const $A000 (used reg = )
22511 5A99           B8                   A000  mov	ax,#$A000
22512 5A9C           50                         push	ax
22513                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22514 5A9D           E8         223B            call	_read_byte
22515 5AA0           83C4                   04  add	sp,*4
22516                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22517 5AA3           8846         FB            mov	-5[bp],al
22518                                           !BCC_EOS
22519                                           ! 2580      if (AL & 0x80)
22520                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22521 5AA6           8A46         06            mov	al,6[bp]
22522 5AA9           24                     80  and	al,#$80
22523 5AAB           84C0                       test	al,al
22524 5AAD           74           0E            je  	.1B6
22525                       00005AAF            .1B7:
22526                                           ! 2581       {
22527                                           ! 2582        outw(0x3ce, 0x1803);
22528                                           ! Debug: list int = const $1803 (used reg = )
22529 5AAF           B8                   1803  mov	ax,#$1803
22530 5AB2           50                         push	ax
22531                                           ! Debug: list int = const $3CE (used reg = )
22532 5AB3           B8                   03CE  mov	ax,#$3CE
22533 5AB6           50                         push	ax
22534                                           ! Debug: func () void = outw+0 (used reg = )
22535 5AB7           E8         229D            call	_outw
22536 5ABA           83C4                   04  add	sp,*4
22537                                           !BCC_EOS
22538                                           ! 2583       }
22539                                           ! 2584      write_byte(0xa000,addr,AL);
22540                       00005ABD            .1B6:
22541                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22542 5ABD           8A46         06            mov	al,6[bp]
22543 5AC0           30E4                       xor	ah,ah
22544 5AC2           50                         push	ax
22545                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22546 5AC3           FF76         F8            push	-8[bp]
22547                                           ! Debug: list unsigned int = const $A000 (used reg = )
22548 5AC6           B8                   A000  mov	ax,#$A000
22549 5AC9           50                         push	ax
22550                                           ! Debug: func () void = write_byte+0 (used reg = )
22551 5ACA           E8         2234            call	_write_byte
22552 5ACD           83C4                   06  add	sp,*6
22553                                           !BCC_EOS
22554                                           ! 2585 #asm
22555                                           !BCC_EOS
22556                                           !BCC_ASM
22557                       0000000C            _biosfn_write_pixel.BH	set	$C
22558                       00000004            .biosfn_write_pixel.BH	set	4
22559                       00000010            _biosfn_write_pixel.CX	set	$10
22560                       00000008            .biosfn_write_pixel.CX	set	8
22561                       00000006            _biosfn_write_pixel.line	set	6
22562                       FFFFFFFE            .biosfn_write_pixel.line	set	-2
22563                       0000000E            _biosfn_write_pixel.AL	set	$E
22564                       00000006            .biosfn_write_pixel.AL	set	6
22565                       00000003            _biosfn_write_pixel.data	set	3
22566                       FFFFFFFB            .biosfn_write_pixel.data	set	-5
22567                       00000012            _biosfn_write_pixel.DX	set	$12
22568                       0000000A            .biosfn_write_pixel.DX	set	$A
22569                       00000005            _biosfn_write_pixel.mask	set	5
22570                       FFFFFFFD            .biosfn_write_pixel.mask	set	-3
22571                       00000004            _biosfn_write_pixel.attr	set	4
22572                       FFFFFFFC            .biosfn_write_pixel.attr	set	-4
22573                       00000007            _biosfn_write_pixel.mode	set	7
22574                       FFFFFFFF            .biosfn_write_pixel.mode	set	-1
22575                       00000000            _biosfn_write_pixel.addr	set	0
22576                       FFFFFFF8            .biosfn_write_pixel.addr	set	-8
22577 5AD0           BA                   03CE       mov dx, # 0x3ce
22578 5AD3           B8                   FF08       mov ax, #0xff08
22579 5AD6           EF                              out dx, ax
22580 5AD7           B8                   0005       mov ax, #0x0005
22581 5ADA           EF                              out dx, ax
22582 5ADB           B8                   0003       mov ax, #0x0003
22583 5ADE           EF                              out dx, ax
22584                                           ! 2593 endasm
22585                                           !BCC_ENDASM
22586                                           !BCC_EOS
22587                                           ! 2594      break;
22588 5ADF           E9         019B            br 	.1B1
22589                                           !BCC_EOS
22590                                           ! 2595    case 0x02:
22591                                           ! 2596      if(vga_modes[line].pixbits==2)
22592                       00005AE2            .1B8:
22593                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22594 5AE2           8A46         FE            mov	al,-2[bp]
22595 5AE5           30E4                       xor	ah,ah
22596 5AE7           B1                     03  mov	cl,*3
22597 5AE9           D3E0                       shl	ax,cl
22598 5AEB           89C3                       mov	bx,ax
22599 5AED           81C3                 01E2  add	bx,#_vga_modes
22600                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22601 5AF1           8A47         03            mov	al,3[bx]
22602 5AF4           3C                     02  cmp	al,*2
22603 5AF6           75           1C            jne 	.1B9
22604                       00005AF8            .1BA:
22605                                           ! 2597       {
22606                                           ! 2598        addr=(CX>>2)+(DX>>1)*80;
22607                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22608 5AF8           8B46         0A            mov	ax,$A[bp]
22609 5AFB           D1E8                       shr	ax,*1
22610                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22611 5AFD           B9                   0050  mov	cx,*$50
22612 5B00           F7E9                       imul	cx
22613 5B02           50                         push	ax
22614                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$C+6] (used reg = )
22615 5B03           8B46         08            mov	ax,8[bp]
22616 5B06           D1E8                       shr	ax,*1
22617 5B08           D1E8                       shr	ax,*1
22618                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22619 5B0A           0346         F6            add	ax,0+..FFF8[bp]
22620 5B0D           44                         inc	sp
22621 5B0E           44                         inc	sp
22622                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22623 5B0F           8946         F8            mov	-8[bp],ax
22624                                           !BCC_EOS
22625                                           ! 2599       }
22626                                           ! 2600      else
22627                                           ! 2601       {
22628 5B12           EB           1A            jmp .1BB
22629                       00005B14            .1B9:
22630                                           ! 2602        addr=(CX>>3)+(DX>>1)*80;
22631                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22632 5B14           8B46         0A            mov	ax,$A[bp]
22633 5B17           D1E8                       shr	ax,*1
22634                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
22635 5B19           B9                   0050  mov	cx,*$50
22636 5B1C           F7E9                       imul	cx
22637 5B1E           50                         push	ax
22638                                           ! Debug: sr int = const 3 to unsigned short CX = [S+$C+6] (used reg = )
22639 5B1F           8B46         08            mov	ax,8[bp]
22640 5B22           B1                     03  mov	cl,*3
22641 5B24           D3E8                       shr	ax,cl
22642                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
22643 5B26           0346         F6            add	ax,0+..FFF8[bp]
22644 5B29           44                         inc	sp
22645 5B2A           44                         inc	sp
22646                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22647 5B2B           8946         F8            mov	-8[bp],ax
22648                                           !BCC_EOS
22649                                           ! 2603       }
22650                                           ! 2604      if (DX & 1) addr += 0x2000;
22651                       00005B2E            .1BB:
22652                                           ! Debug: and int = const 1 to unsigned short DX = [S+$A+8] (used reg = )
22653 5B2E           8A46         0A            mov	al,$A[bp]
22654 5B31           24                     01  and	al,*1
22655 5B33           84C0                       test	al,al
22656 5B35           74           09            je  	.1BC
22657                       00005B37            .1BD:
22658                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$A-$A] (used reg = )
22659 5B37           8B46         F8            mov	ax,-8[bp]
22660 5B3A           05                   2000  add	ax,#$2000
22661 5B3D           8946         F8            mov	-8[bp],ax
22662                                           !BCC_EOS
22663                                           ! 2605      data = read_byte(0xb800,addr);
22664                       00005B40            .1BC:
22665                                           ! Debug: list unsigned short addr = [S+$A-$A] (used reg = )
22666 5B40           FF76         F8            push	-8[bp]
22667                                           ! Debug: list unsigned int = const $B800 (used reg = )
22668 5B43           B8                   B800  mov	ax,#$B800
22669 5B46           50                         push	ax
22670                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22671 5B47           E8         2191            call	_read_byte
22672 5B4A           83C4                   04  add	sp,*4
22673                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$A-7] (used reg = )
22674 5B4D           8846         FB            mov	-5[bp],al
22675                                           !BCC_EOS
22676                                           ! 2606      if(vga_modes[line].pixbits==2)
22677                                           ! Debug: ptradd unsigned char line = [S+$A-4] to [$10] struct  = vga_modes+0 (used reg = )
22678 5B50           8A46         FE            mov	al,-2[bp]
22679 5B53           30E4                       xor	ah,ah
22680 5B55           B1                     03  mov	cl,*3
22681 5B57           D3E0                       shl	ax,cl
22682 5B59           89C3                       mov	bx,ax
22683 5B5B           81C3                 01E2  add	bx,#_vga_modes
22684                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
22685 5B5F           8A47         03            mov	al,3[bx]
22686 5B62           3C                     02  cmp	al,*2
22687 5B64           75           46            jne 	.1BE
22688                       00005B66            .1BF:
22689                                           ! 2607       {
22690                                           ! 2608        attr = (AL & 0x03) << ((3 - (CX & 0x03)) * 2);
22691                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22692 5B66           8A46         08            mov	al,8[bp]
22693 5B69           24                     03  and	al,*3
22694                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22695 5B6B           50                         push	ax
22696 5B6C           B8                   0003  mov	ax,*3
22697 5B6F           2A46         F6            sub	al,0+..FFF8[bp]
22698 5B72           80DC                   00  sbb	ah,*0
22699 5B75           44                         inc	sp
22700 5B76           44                         inc	sp
22701                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22702 5B77           D1E0                       shl	ax,*1
22703 5B79           50                         push	ax
22704                                           ! Debug: and int = const 3 to unsigned char AL = [S+$C+4] (used reg = )
22705 5B7A           8A46         06            mov	al,6[bp]
22706 5B7D           24                     03  and	al,*3
22707                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22708 5B7F           30E4                       xor	ah,ah
22709 5B81           8B4E         F6            mov	cx,0+..FFF8[bp]
22710 5B84           D3E0                       shl	ax,cl
22711 5B86           44                         inc	sp
22712 5B87           44                         inc	sp
22713                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22714 5B88           8846         FC            mov	-4[bp],al
22715                                           !BCC_EOS
22716                                           ! 2609        mask = 0x03 << ((3 - (CX & 0x03)) * 2);
22717                                           ! Debug: and int = const 3 to unsigned short CX = [S+$A+6] (used reg = )
22718 5B8B           8A46         08            mov	al,8[bp]
22719 5B8E           24                     03  and	al,*3
22720                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
22721 5B90           50                         push	ax
22722 5B91           B8                   0003  mov	ax,*3
22723 5B94           2A46         F6            sub	al,0+..FFF8[bp]
22724 5B97           80DC                   00  sbb	ah,*0
22725 5B9A           44                         inc	sp
22726 5B9B           44                         inc	sp
22727                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
22728 5B9C           D1E0                       shl	ax,*1
22729                                           ! Debug: sl unsigned int = ax+0 to int = const 3 (used reg = )
22730 5B9E           89C3                       mov	bx,ax
22731 5BA0           B8                   0003  mov	ax,*3
22732 5BA3           89D9                       mov	cx,bx
22733 5BA5           D3E0                       shl	ax,cl
22734                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22735 5BA7           8846         FD            mov	-3[bp],al
22736                                           !BCC_EOS
22737                                           ! 2610       }
22738                                           ! 2611      else
22739                                           ! 2612       {
22740 5BAA           EB           40            jmp .1C0
22741                       00005BAC            .1BE:
22742                                           ! 2613        attr = (AL & 0x01) << (7 - (CX & 0x07));
22743                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22744 5BAC           8A46         08            mov	al,8[bp]
22745 5BAF           24                     07  and	al,*7
22746                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22747 5BB1           50                         push	ax
22748 5BB2           B8                   0007  mov	ax,*7
22749 5BB5           2A46         F6            sub	al,0+..FFF8[bp]
22750 5BB8           80DC                   00  sbb	ah,*0
22751 5BBB           44                         inc	sp
22752 5BBC           44                         inc	sp
22753 5BBD           50                         push	ax
22754                                           ! Debug: and int = const 1 to unsigned char AL = [S+$C+4] (used reg = )
22755 5BBE           8A46         06            mov	al,6[bp]
22756 5BC1           24                     01  and	al,*1
22757                                           ! Debug: sl unsigned int (temp) = [S+$C-$C] to unsigned char = al+0 (used reg = )
22758 5BC3           30E4                       xor	ah,ah
22759 5BC5           8B4E         F6            mov	cx,0+..FFF8[bp]
22760 5BC8           D3E0                       shl	ax,cl
22761 5BCA           44                         inc	sp
22762 5BCB           44                         inc	sp
22763                                           ! Debug: eq unsigned int = ax+0 to unsigned char attr = [S+$A-6] (used reg = )
22764 5BCC           8846         FC            mov	-4[bp],al
22765                                           !BCC_EOS
22766                                           ! 2614        mask = 0x01 << (7 - (CX & 0x07));
22767                                           ! Debug: and int = const 7 to unsigned short CX = [S+$A+6] (used reg = )
22768 5BCF           8A46         08            mov	al,8[bp]
22769 5BD2           24                     07  and	al,*7
22770                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
22771 5BD4           50                         push	ax
22772 5BD5           B8                   0007  mov	ax,*7
22773 5BD8           2A46         F6            sub	al,0+..FFF8[bp]
22774 5BDB           80DC                   00  sbb	ah,*0
22775 5BDE           44                         inc	sp
22776 5BDF           44                         inc	sp
22777                                           ! Debug: sl unsigned int = ax+0 to int = const 1 (used reg = )
22778 5BE0           89C3                       mov	bx,ax
22779 5BE2           B8                   0001  mov	ax,*1
22780 5BE5           89D9                       mov	cx,bx
22781 5BE7           D3E0                       shl	ax,cl
22782                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$A-5] (used reg = )
22783 5BE9           8846         FD            mov	-3[bp],al
22784                                           !BCC_EOS
22785                                           ! 2615       }
22786                                           ! 2616      if (AL & 0x80)
22787                       00005BEC            .1C0:
22788                                           ! Debug: and int = const $80 to unsigned char AL = [S+$A+4] (used reg = )
22789 5BEC           8A46         06            mov	al,6[bp]
22790 5BEF           24                     80  and	al,#$80
22791 5BF1           84C0                       test	al,al
22792 5BF3           74           0B            je  	.1C1
22793                       00005BF5            .1C2:
22794                                           ! 2617       {
22795                                           ! 2618        data ^= attr;
22796                                           ! Debug: eorab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22797 5BF5           8A46         FB            mov	al,-5[bp]
22798 5BF8           3246         FC            xor	al,-4[bp]
22799 5BFB           8846         FB            mov	-5[bp],al
22800                                           !BCC_EOS
22801                                           ! 2619       }
22802                                           ! 2620      else
22803                                           ! 2621       {
22804 5BFE           EB           16            jmp .1C3
22805                       00005C00            .1C1:
22806                                           ! 2622        data &= ~mask;
22807                                           ! Debug: not unsigned char mask = [S+$A-5] (used reg = )
22808 5C00           8A46         FD            mov	al,-3[bp]
22809 5C03           30E4                       xor	ah,ah
22810 5C05           F7D0                       not	ax
22811                                           ! Debug: andab unsigned int = ax+0 to unsigned char data = [S+$A-7] (used reg = )
22812 5C07           2246         FB            and	al,-5[bp]
22813 5C0A           8846         FB            mov	-5[bp],al
22814                                           !BCC_EOS
22815                                           ! 2623        data |= attr;
22816                                           ! Debug: orab unsigned char attr = [S+$A-6] to unsigned char data = [S+$A-7] (used reg = )
22817 5C0D           8A46         FB            mov	al,-5[bp]
22818 5C10           0A46         FC            or	al,-4[bp]
22819 5C13           8846         FB            mov	-5[bp],al
22820                                           !BCC_EOS
22821                                           ! 2624       }
22822                                           ! 2625      write_byte(0xb800,addr,data);
22823                       00005C16            .1C3:
22824                                           ! Debug: list unsigned char data = [S+$A-7] (used reg = )
22825 5C16           8A46         FB            mov	al,-5[bp]
22826 5C19           30E4                       xor	ah,ah
22827 5C1B           50                         push	ax
22828                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22829 5C1C           FF76         F8            push	-8[bp]
22830                                           ! Debug: list unsigned int = const $B800 (used reg = )
22831 5C1F           B8                   B800  mov	ax,#$B800
22832 5C22           50                         push	ax
22833                                           ! Debug: func () void = write_byte+0 (used reg = )
22834 5C23           E8         20DB            call	_write_byte
22835 5C26           83C4                   06  add	sp,*6
22836                                           !BCC_EOS
22837                                           ! 2626      break;
22838 5C29           EB           52            jmp .1B1
22839                                           !BCC_EOS
22840                                           ! 2627    case 0x05:
22841                                           ! 2628      addr=CX+DX*(read_word(0x40,0x4A)*8);
22842                       00005C2B            .1C4:
22843                                           ! Debug: list int = const $4A (used reg = )
22844 5C2B           B8                   004A  mov	ax,*$4A
22845 5C2E           50                         push	ax
22846                                           ! Debug: list int = const $40 (used reg = )
22847 5C2F           B8                   0040  mov	ax,*$40
22848 5C32           50                         push	ax
22849                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
22850 5C33           E8         20B8            call	_read_word
22851 5C36           83C4                   04  add	sp,*4
22852                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
22853 5C39           B1                     03  mov	cl,*3
22854 5C3B           D3E0                       shl	ax,cl
22855                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$A+8] (used reg = )
22856                                           ! Debug: expression subtree swapping
22857 5C3D           8B4E         0A            mov	cx,$A[bp]
22858 5C40           F7E9                       imul	cx
22859                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$A+6] (used reg = )
22860                                           ! Debug: expression subtree swapping
22861 5C42           0346         08            add	ax,8[bp]
22862                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$A-$A] (used reg = )
22863 5C45           8946         F8            mov	-8[bp],ax
22864                                           !BCC_EOS
22865                                           ! 2629      write_byte(0xa000,addr,AL);
22866                                           ! Debug: list unsigned char AL = [S+$A+4] (used reg = )
22867 5C48           8A46         06            mov	al,6[bp]
22868 5C4B           30E4                       xor	ah,ah
22869 5C4D           50                         push	ax
22870                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
22871 5C4E           FF76         F8            push	-8[bp]
22872                                           ! Debug: list unsigned int = const $A000 (used reg = )
22873 5C51           B8                   A000  mov	ax,#$A000
22874 5C54           50                         push	ax
22875                                           ! Debug: func () void = write_byte+0 (used reg = )
22876 5C55           E8         20A9            call	_write_byte
22877 5C58           83C4                   06  add	sp,*6
22878                                           !BCC_EOS
22879                                           ! 2630      break;
22880 5C5B           EB           20            jmp .1B1
22881                                           !BCC_EOS
22882                                           ! 2631    default:
22883                                           ! 2632      unimplemented();
22884                       00005C5D            .1C5:
22885                                           ! Debug: func () void = unimplemented+0 (used reg = )
22886 5C5D           E8         210A            call	_unimplemented
22887                                           !BCC_EOS
22888                                           ! 2633   }
22889                                           ! 2634 }
22890 5C60           EB           1B            jmp .1B1
22891                       00005C62            .1B3:
22892 5C62           2C                     02  sub	al,*2
22893 5C64   7503    E9         FE79            beq 	.1B8
22894 5C69           2C                     01  sub	al,*1
22895 5C6B   7503    E9         FDCC            beq 	.1B5
22896 5C70           2C                     01  sub	al,*1
22897 5C72   7503    E9         FDC5            beq 	.1B4
22898 5C77           2C                     01  sub	al,*1
22899 5C79           74           B0            je 	.1C4
22900 5C7B           EB           E0            jmp	.1C5
22901                       00005C7D            .1B1:
22902                       FFFFFFF6            ..FFF8	=	-$A
22903 5C7D           89EC                       mov	sp,bp
22904 5C7F           5D                         pop	bp
22905 5C80           C3                         ret
22906                                           ! 2635 static void biosfn_read_pixel (BH,CX,DX,AX) Bit8u BH;Bit16u CX;Bit16u DX;Bit16u *AX;
22907                                           ! Register BX used in function biosfn_write_pixel
22908                       00005C81            _biosfn_read_pixel:
22909                                           !BCC_EOS
22910                                           !BCC_EOS
22911                                           !BCC_EOS
22912                                           !BCC_EOS
22913                                           ! 2636 {
22914                                           ! 2637  Bit8u mode,line,mask,attr,data,i;
22915                                           !BCC_EOS
22916                                           ! 2638  Bit16u addr;
22917                                           !BCC_EOS
22918                                           ! 2639  Bit16u ss=get_SS();
22919 5C81           55                         push	bp
22920 5C82           89E5                       mov	bp,sp
22921 5C84           83C4                   F6  add	sp,*-$A
22922                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
22923 5C87           E8         20DD            call	_get_SS
22924                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+$C-$C] (used reg = )
22925 5C8A           8946         F6            mov	-$A[bp],ax
22926                                           !BCC_EOS
22927                                           ! 2640  mode=read_byte(0x40,0x49);
22928                                           ! Debug: list int = const $49 (used reg = )
22929 5C8D           B8                   0049  mov	ax,*$49
22930 5C90           50                         push	ax
22931                                           ! Debug: list int = const $40 (used reg = )
22932 5C91           B8                   0040  mov	ax,*$40
22933 5C94           50                         push	ax
22934                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
22935 5C95           E8         2043            call	_read_byte
22936 5C98           83C4                   04  add	sp,*4
22937                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$C-3] (used reg = )
22938 5C9B           8846         FF            mov	-1[bp],al
22939                                           !BCC_EOS
22940                                           ! 2641  line=find_vga_entry(mode);
22941                                           ! Debug: list unsigned char mode = [S+$C-3] (used reg = )
22942 5C9E           8A46         FF            mov	al,-1[bp]
22943 5CA1           30E4                       xor	ah,ah
22944 5CA3           50                         push	ax
22945                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
22946 5CA4           E8         1F48            call	_find_vga_entry
22947 5CA7           44                         inc	sp
22948 5CA8           44                         inc	sp
22949                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$C-4] (used reg = )
22950 5CA9           8846         FE            mov	-2[bp],al
22951                                           !BCC_EOS
22952                                           ! 2642  if(line==0xFF)return;
22953                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$C-4] (used reg = )
22954 5CAC           8A46         FE            mov	al,-2[bp]
22955 5CAF           3C                     FF  cmp	al,#$FF
22956 5CB1           75           04            jne 	.1C6
22957                       00005CB3            .1C7:
22958 5CB3           89EC                       mov	sp,bp
22959 5CB5           5D                         pop	bp
22960 5CB6           C3                         ret
22961                                           !BCC_EOS
22962                                           ! 2643  if(vga_modes[line].class==0x00)return;
22963                       00005CB7            .1C6:
22964                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22965 5CB7           8A46         FE            mov	al,-2[bp]
22966 5CBA           30E4                       xor	ah,ah
22967 5CBC           B1                     03  mov	cl,*3
22968 5CBE           D3E0                       shl	ax,cl
22969 5CC0           89C3                       mov	bx,ax
22970 5CC2           81C3                 01E2  add	bx,#_vga_modes
22971                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
22972 5CC6           8A47         01            mov	al,1[bx]
22973 5CC9           84C0                       test	al,al
22974 5CCB           75           04            jne 	.1C8
22975                       00005CCD            .1C9:
22976 5CCD           89EC                       mov	sp,bp
22977 5CCF           5D                         pop	bp
22978 5CD0           C3                         ret
22979                                           !BCC_EOS
22980                                           ! 2644  switch(vga_modes[line].memmodel)
22981                       00005CD1            .1C8:
22982                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
22983 5CD1           8A46         FE            mov	al,-2[bp]
22984 5CD4           30E4                       xor	ah,ah
22985 5CD6           B1                     03  mov	cl,*3
22986 5CD8           D3E0                       shl	ax,cl
22987 5CDA           89C3                       mov	bx,ax
22988 5CDC           81C3                 01E2  add	bx,#_vga_modes
22989 5CE0           8A47         02            mov	al,2[bx]
22990                                           ! 2645   {
22991 5CE3           E9         016A            br 	.1CC
22992                                           ! 2646    case 0x04:
22993                                           ! 2647    case 0x03:
22994                       00005CE6            .1CD:
22995                                           ! 2648      addr = CX/8+DX*read_word(0x40,0x4A);
22996                       00005CE6            .1CE:
22997                                           ! Debug: list int = const $4A (used reg = )
22998 5CE6           B8                   004A  mov	ax,*$4A
22999 5CE9           50                         push	ax
23000                                           ! Debug: list int = const $40 (used reg = )
23001 5CEA           B8                   0040  mov	ax,*$40
23002 5CED           50                         push	ax
23003                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23004 5CEE           E8         1FFD            call	_read_word
23005 5CF1           83C4                   04  add	sp,*4
23006                                           ! Debug: mul unsigned short = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23007                                           ! Debug: expression subtree swapping
23008 5CF4           8B4E         08            mov	cx,8[bp]
23009 5CF7           F7E9                       imul	cx
23010 5CF9           50                         push	ax
23011                                           ! Debug: div int = const 8 to unsigned short CX = [S+$E+4] (used reg = )
23012 5CFA           8B46         06            mov	ax,6[bp]
23013 5CFD           B1                     03  mov	cl,*3
23014 5CFF           D3E8                       shr	ax,cl
23015                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23016 5D01           0346         F4            add	ax,0+..FFF7[bp]
23017 5D04           44                         inc	sp
23018 5D05           44                         inc	sp
23019                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23020 5D06           8946         F8            mov	-8[bp],ax
23021                                           !BCC_EOS
23022                                           ! 2649      mask = 0x80 >> (CX & 0x07);
23023                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23024 5D09           8A46         06            mov	al,6[bp]
23025 5D0C           24                     07  and	al,*7
23026                                           ! Debug: sr unsigned char = al+0 to int = const $80 (used reg = )
23027 5D0E           30E4                       xor	ah,ah
23028 5D10           89C3                       mov	bx,ax
23029 5D12           B8                   0080  mov	ax,#$80
23030 5D15           89D9                       mov	cx,bx
23031 5D17           D3F8                       sar	ax,cl
23032                                           ! Debug: eq int = ax+0 to unsigned char mask = [S+$C-5] (used reg = )
23033 5D19           8846         FD            mov	-3[bp],al
23034                                           !BCC_EOS
23035                                           ! 2650      attr = 0x00;
23036                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23037 5D1C           30C0                       xor	al,al
23038 5D1E           8846         FC            mov	-4[bp],al
23039                                           !BCC_EOS
23040                                           ! 2651      for(i=0;i<4;i++)
23041                                           ! Debug: eq int = const 0 to unsigned char i = [S+$C-8] (used reg = )
23042 5D21           30C0                       xor	al,al
23043 5D23           8846         FA            mov	-6[bp],al
23044                                           !BCC_EOS
23045                                           !BCC_EOS
23046                                           ! 2652       {
23047 5D26           EB           4B            jmp .1D1
23048                       00005D28            .1D2:
23049                                           ! 2653        outw(0x3ce, (i << 8) | 0x04);
23050                                           ! Debug: sl int = const 8 to unsigned char i = [S+$C-8] (used reg = )
23051 5D28           8A46         FA            mov	al,-6[bp]
23052 5D2B           30E4                       xor	ah,ah
23053 5D2D           88C4                       mov	ah,al
23054 5D2F           30C0                       xor	al,al
23055                                           ! Debug: or int = const 4 to unsigned int = ax+0 (used reg = )
23056 5D31           0C                     04  or	al,*4
23057                                           ! Debug: list unsigned int = ax+0 (used reg = )
23058 5D33           50                         push	ax
23059                                           ! Debug: list int = const $3CE (used reg = )
23060 5D34           B8                   03CE  mov	ax,#$3CE
23061 5D37           50                         push	ax
23062                                           ! Debug: func () void = outw+0 (used reg = )
23063 5D38           E8         201C            call	_outw
23064 5D3B           83C4                   04  add	sp,*4
23065                                           !BCC_EOS
23066                                           ! 2654        data = read_byte(0xa000,addr) & mask;
23067                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23068 5D3E           FF76         F8            push	-8[bp]
23069                                           ! Debug: list unsigned int = const $A000 (used reg = )
23070 5D41           B8                   A000  mov	ax,#$A000
23071 5D44           50                         push	ax
23072                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23073 5D45           E8         1F93            call	_read_byte
23074 5D48           83C4                   04  add	sp,*4
23075                                           ! Debug: and unsigned char mask = [S+$C-5] to unsigned char = al+0 (used reg = )
23076 5D4B           2246         FD            and	al,-3[bp]
23077                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23078 5D4E           8846         FB            mov	-5[bp],al
23079                                           !BCC_EOS
23080                                           ! 2655        if (data > 0) attr |= (0x01 << i);
23081                                           ! Debug: gt int = const 0 to unsigned char data = [S+$C-7] (used reg = )
23082 5D51           8A46         FB            mov	al,-5[bp]
23083 5D54           84C0                       test	al,al
23084 5D56           74           14            je  	.1D3
23085                       00005D58            .1D4:
23086                                           ! Debug: sl unsigned char i = [S+$C-8] to int = const 1 (used reg = )
23087 5D58           8A46         FA            mov	al,-6[bp]
23088 5D5B           30E4                       xor	ah,ah
23089 5D5D           89C3                       mov	bx,ax
23090 5D5F           B8                   0001  mov	ax,*1
23091 5D62           89D9                       mov	cx,bx
23092 5D64           D3E0                       shl	ax,cl
23093                                           ! Debug: orab int = ax+0 to unsigned char attr = [S+$C-6] (used reg = )
23094 5D66           0A46         FC            or	al,-4[bp]
23095 5D69           8846         FC            mov	-4[bp],al
23096                                           !BCC_EOS
23097                                           ! 2656       }
23098                       00005D6C            .1D3:
23099                                           ! 2657      break;
23100                       00005D6C            .1D0:
23101                                           ! Debug: postinc unsigned char i = [S+$C-8] (used reg = )
23102 5D6C           8A46         FA            mov	al,-6[bp]
23103 5D6F           40                         inc	ax
23104 5D70           8846         FA            mov	-6[bp],al
23105                       00005D73            .1D1:
23106                                           ! Debug: lt int = const 4 to unsigned char i = [S+$C-8] (used reg = )
23107 5D73           8A46         FA            mov	al,-6[bp]
23108 5D76           3C                     04  cmp	al,*4
23109 5D78           72           AE            jb 	.1D2
23110                       00005D7A            .1D5:
23111                       00005D7A            .1CF:
23112 5D7A           E9         00EE            br 	.1CA
23113                                           !BCC_EOS
23114                                           ! 2658    case 0x02:
23115                                           ! 2659      addr=(CX>>2)+(DX>>1)*80;
23116                       00005D7D            .1D6:
23117                                           ! Debug: sr int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23118 5D7D           8B46         08            mov	ax,8[bp]
23119 5D80           D1E8                       shr	ax,*1
23120                                           ! Debug: mul int = const $50 to unsigned int = ax+0 (used reg = )
23121 5D82           B9                   0050  mov	cx,*$50
23122 5D85           F7E9                       imul	cx
23123 5D87           50                         push	ax
23124                                           ! Debug: sr int = const 2 to unsigned short CX = [S+$E+4] (used reg = )
23125 5D88           8B46         06            mov	ax,6[bp]
23126 5D8B           D1E8                       shr	ax,*1
23127 5D8D           D1E8                       shr	ax,*1
23128                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
23129 5D8F           0346         F4            add	ax,0+..FFF7[bp]
23130 5D92           44                         inc	sp
23131 5D93           44                         inc	sp
23132                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23133 5D94           8946         F8            mov	-8[bp],ax
23134                                           !BCC_EOS
23135                                           ! 2660      if (DX & 1) addr += 0x2000;
23136                                           ! Debug: and int = const 1 to unsigned short DX = [S+$C+6] (used reg = )
23137 5D97           8A46         08            mov	al,8[bp]
23138 5D9A           24                     01  and	al,*1
23139 5D9C           84C0                       test	al,al
23140 5D9E           74           09            je  	.1D7
23141                       00005DA0            .1D8:
23142                                           ! Debug: addab int = const $2000 to unsigned short addr = [S+$C-$A] (used reg = )
23143 5DA0           8B46         F8            mov	ax,-8[bp]
23144 5DA3           05                   2000  add	ax,#$2000
23145 5DA6           8946         F8            mov	-8[bp],ax
23146                                           !BCC_EOS
23147                                           ! 2661      data = read_byte(0xb800,addr);
23148                       00005DA9            .1D7:
23149                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23150 5DA9           FF76         F8            push	-8[bp]
23151                                           ! Debug: list unsigned int = const $B800 (used reg = )
23152 5DAC           B8                   B800  mov	ax,#$B800
23153 5DAF           50                         push	ax
23154                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23155 5DB0           E8         1F28            call	_read_byte
23156 5DB3           83C4                   04  add	sp,*4
23157                                           ! Debug: eq unsigned char = al+0 to unsigned char data = [S+$C-7] (used reg = )
23158 5DB6           8846         FB            mov	-5[bp],al
23159                                           !BCC_EOS
23160                                           ! 2662      if(vga_modes[line].pixbits==2)
23161                                           ! Debug: ptradd unsigned char line = [S+$C-4] to [$10] struct  = vga_modes+0 (used reg = )
23162 5DB9           8A46         FE            mov	al,-2[bp]
23163 5DBC           30E4                       xor	ah,ah
23164 5DBE           B1                     03  mov	cl,*3
23165 5DC0           D3E0                       shl	ax,cl
23166 5DC2           89C3                       mov	bx,ax
23167 5DC4           81C3                 01E2  add	bx,#_vga_modes
23168                                           ! Debug: logeq int = const 2 to unsigned char = [bx+3] (used reg = )
23169 5DC8           8A47         03            mov	al,3[bx]
23170 5DCB           3C                     02  cmp	al,*2
23171 5DCD           75           25            jne 	.1D9
23172                       00005DCF            .1DA:
23173                                           ! 2663       {
23174                                           ! 2664        attr = (data >> ((3 - (CX & 0x03)) * 2)) & 0x03;
23175                                           ! Debug: and int = const 3 to unsigned short CX = [S+$C+4] (used reg = )
23176 5DCF           8A46         06            mov	al,6[bp]
23177 5DD2           24                     03  and	al,*3
23178                                           ! Debug: sub unsigned char = al+0 to int = const 3 (used reg = )
23179 5DD4           50                         push	ax
23180 5DD5           B8                   0003  mov	ax,*3
23181 5DD8           2A46         F4            sub	al,0+..FFF7[bp]
23182 5DDB           80DC                   00  sbb	ah,*0
23183 5DDE           44                         inc	sp
23184 5DDF           44                         inc	sp
23185                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23186 5DE0           D1E0                       shl	ax,*1
23187                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23188 5DE2           89C3                       mov	bx,ax
23189 5DE4           8A46         FB            mov	al,-5[bp]
23190 5DE7           30E4                       xor	ah,ah
23191 5DE9           89D9                       mov	cx,bx
23192 5DEB           D3E8                       shr	ax,cl
23193                                           ! Debug: and int = const 3 to unsigned int = ax+0 (used reg = )
23194 5DED           24                     03  and	al,*3
23195                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23196 5DEF           8846         FC            mov	-4[bp],al
23197                                           !BCC_EOS
23198                                           ! 2665       }
23199                                           ! 2666      else
23200                                           ! 2667       {
23201 5DF2           EB           21            jmp .1DB
23202                       00005DF4            .1D9:
23203                                           ! 2668        attr = (data >> (7 - (CX & 0x07))) & 0x01;
23204                                           ! Debug: and int = const 7 to unsigned short CX = [S+$C+4] (used reg = )
23205 5DF4           8A46         06            mov	al,6[bp]
23206 5DF7           24                     07  and	al,*7
23207                                           ! Debug: sub unsigned char = al+0 to int = const 7 (used reg = )
23208 5DF9           50                         push	ax
23209 5DFA           B8                   0007  mov	ax,*7
23210 5DFD           2A46         F4            sub	al,0+..FFF7[bp]
23211 5E00           80DC                   00  sbb	ah,*0
23212 5E03           44                         inc	sp
23213 5E04           44                         inc	sp
23214                                           ! Debug: sr unsigned int = ax+0 to unsigned char data = [S+$C-7] (used reg = )
23215 5E05           89C3                       mov	bx,ax
23216 5E07           8A46         FB            mov	al,-5[bp]
23217 5E0A           30E4                       xor	ah,ah
23218 5E0C           89D9                       mov	cx,bx
23219 5E0E           D3E8                       shr	ax,cl
23220                                           ! Debug: and int = const 1 to unsigned int = ax+0 (used reg = )
23221 5E10           24                     01  and	al,*1
23222                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23223 5E12           8846         FC            mov	-4[bp],al
23224                                           !BCC_EOS
23225                                           ! 2669       }
23226                                           ! 2670      break;
23227                       00005E15            .1DB:
23228 5E15           EB           54            jmp .1CA
23229                                           !BCC_EOS
23230                                           ! 2671    case 0x05:
23231                                           ! 2672      addr=CX+DX*(read_word(0x40,0x4A)*8);
23232                       00005E17            .1DC:
23233                                           ! Debug: list int = const $4A (used reg = )
23234 5E17           B8                   004A  mov	ax,*$4A
23235 5E1A           50                         push	ax
23236                                           ! Debug: list int = const $40 (used reg = )
23237 5E1B           B8                   0040  mov	ax,*$40
23238 5E1E           50                         push	ax
23239                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23240 5E1F           E8         1ECC            call	_read_word
23241 5E22           83C4                   04  add	sp,*4
23242                                           ! Debug: mul int = const 8 to unsigned short = ax+0 (used reg = )
23243 5E25           B1                     03  mov	cl,*3
23244 5E27           D3E0                       shl	ax,cl
23245                                           ! Debug: mul unsigned int = ax+0 to unsigned short DX = [S+$C+6] (used reg = )
23246                                           ! Debug: expression subtree swapping
23247 5E29           8B4E         08            mov	cx,8[bp]
23248 5E2C           F7E9                       imul	cx
23249                                           ! Debug: add unsigned int = ax+0 to unsigned short CX = [S+$C+4] (used reg = )
23250                                           ! Debug: expression subtree swapping
23251 5E2E           0346         06            add	ax,6[bp]
23252                                           ! Debug: eq unsigned int = ax+0 to unsigned short addr = [S+$C-$A] (used reg = )
23253 5E31           8946         F8            mov	-8[bp],ax
23254                                           !BCC_EOS
23255                                           ! 2673      
23256                                           ! 2673 attr=read_byte(0xa000,addr);
23257                                           ! Debug: list unsigned short addr = [S+$C-$A] (used reg = )
23258 5E34           FF76         F8            push	-8[bp]
23259                                           ! Debug: list unsigned int = const $A000 (used reg = )
23260 5E37           B8                   A000  mov	ax,#$A000
23261 5E3A           50                         push	ax
23262                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23263 5E3B           E8         1E9D            call	_read_byte
23264 5E3E           83C4                   04  add	sp,*4
23265                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$C-6] (used reg = )
23266 5E41           8846         FC            mov	-4[bp],al
23267                                           !BCC_EOS
23268                                           ! 2674      break;
23269 5E44           EB           25            jmp .1CA
23270                                           !BCC_EOS
23271                                           ! 2675    default:
23272                                           ! 2676      unimplemented();
23273                       00005E46            .1DD:
23274                                           ! Debug: func () void = unimplemented+0 (used reg = )
23275 5E46           E8         1F21            call	_unimplemented
23276                                           !BCC_EOS
23277                                           ! 2677      attr = 0;
23278                                           ! Debug: eq int = const 0 to unsigned char attr = [S+$C-6] (used reg = )
23279 5E49           30C0                       xor	al,al
23280 5E4B           8846         FC            mov	-4[bp],al
23281                                           !BCC_EOS
23282                                           ! 2678   }
23283                                           ! 2679  write_word(ss,AX,(read_word(ss,AX) & 0xff00) | attr);
23284 5E4E           EB           1B            jmp .1CA
23285                       00005E50            .1CC:
23286 5E50           2C                     02  sub	al,*2
23287 5E52   7503    E9         FF26            beq 	.1D6
23288 5E57           2C                     01  sub	al,*1
23289 5E59   7503    E9         FE88            beq 	.1CE
23290 5E5E           2C                     01  sub	al,*1
23291 5E60   7503    E9         FE81            beq 	.1CD
23292 5E65           2C                     01  sub	al,*1
23293 5E67           74           AE            je 	.1DC
23294 5E69           EB           DB            jmp	.1DD
23295                       00005E6B            .1CA:
23296                       FFFFFFF4            ..FFF7	=	-$C
23297                                           ! Debug: list * unsigned short AX = [S+$C+8] (used reg = )
23298 5E6B           FF76         0A            push	$A[bp]
23299                                           ! Debug: list unsigned short ss = [S+$E-$C] (used reg = )
23300 5E6E           FF76         F6            push	-$A[bp]
23301                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23302 5E71           E8         1E7A            call	_read_word
23303 5E74           83C4                   04  add	sp,*4
23304                                           ! Debug: and unsigned int = const $FF00 to unsigned short = ax+0 (used reg = )
23305 5E77           30C0                       xor	al,al
23306                                           ! Debug: or unsigned char attr = [S+$C-6] to unsigned int = ax+0 (used reg = )
23307 5E79           0A46         FC            or	al,-4[bp]
23308                                           ! Debug: list unsigned int = ax+0 (used reg = )
23309 5E7C           50                         push	ax
23310                                           ! Debug: list * unsigned short AX = [S+$E+8] (used reg = )
23311 5E7D           FF76         0A            push	$A[bp]
23312                                           ! Debug: list unsigned short ss = [S+$10-$C] (used reg = )
23313 5E80           FF76         F6            push	-$A[bp]
23314                                           ! Debug: func () void = write_word+0 (used reg = )
23315 5E83           E8         1E93            call	_write_word
23316 5E86           83C4                   06  add	sp,*6
23317                                           !BCC_EOS
23318                                           ! 2680 }
23319 5E89           89EC                       mov	sp,bp
23320 5E8B           5D                         pop	bp
23321 5E8C           C3                         ret
23322                                           ! 2681 static void biosfn_write_teletype (car, page, attr, flag)
23323                                           ! Register BX used in function biosfn_read_pixel
23324                                           ! 2682 Bit8u car;Bit8u page;Bit8u attr;Bit8u flag;
23325                       00005E8D            _biosfn_write_teletype:
23326                                           !BCC_EOS
23327                                           !BCC_EOS
23328                                           !BCC_EOS
23329                                           !BCC_EOS
23330                                           ! 2683 {
23331                                           ! 2684  Bit8u cheight,xcurs,ycurs,mode,line,bpp;
23332                                           !BCC_EOS
23333                                           ! 2685  Bit16u nbcols,nbrows,address;
23334                                           !BCC_EOS
23335                                           ! 2686  Bit16u cursor,dummy;
23336                                           !BCC_EOS
23337                                           ! 2687  if(page==0xff)
23338 5E8D           55                         push	bp
23339 5E8E           89E5                       mov	bp,sp
23340 5E90           83C4                   F0  add	sp,*-$10
23341                                           ! Debug: logeq int = const $FF to unsigned char page = [S+$12+4] (used reg = )
23342 5E93           8A46         06            mov	al,6[bp]
23343 5E96           3C                     FF  cmp	al,#$FF
23344 5E98           75           11            jne 	.1DE
23345                       00005E9A            .1DF:
23346                                           ! 2688   page=read_byte(0x40,0x62);
23347                                           ! Debug: list int = const $62 (used reg = )
23348 5E9A           B8                   0062  mov	ax,*$62
23349 5E9D           50                         push	ax
23350                                           ! Debug: list int = const $40 (used reg = )
23351 5E9E           B8                   0040  mov	ax,*$40
23352 5EA1           50                         push	ax
23353                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23354 5EA2           E8         1E36            call	_read_byte
23355 5EA5           83C4                   04  add	sp,*4
23356                                           ! Debug: eq unsigned char = al+0 to unsigned char page = [S+$12+4] (used reg = )
23357 5EA8           8846         06            mov	6[bp],al
23358                                           !BCC_EOS
23359                                           ! 2689  mode=read_byte(0x40,0x49);
23360                       00005EAB            .1DE:
23361                                           ! Debug: list int = const $49 (used reg = )
23362 5EAB           B8                   0049  mov	ax,*$49
23363 5EAE           50                         push	ax
23364                                           ! Debug: list int = const $40 (used reg = )
23365 5EAF           B8                   0040  mov	ax,*$40
23366 5EB2           50                         push	ax
23367                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23368 5EB3           E8         1E25            call	_read_byte
23369 5EB6           83C4                   04  add	sp,*4
23370                                           ! Debug: eq unsigned char = al+0 to unsigned char mode = [S+$12-6] (used reg = )
23371 5EB9           8846         FC            mov	-4[bp],al
23372                                           !BCC_EOS
23373                                           ! 2690  line=find_vga_entry(mode);
23374                                           ! Debug: list unsigned char mode = [S+$12-6] (used reg = )
23375 5EBC           8A46         FC            mov	al,-4[bp]
23376 5EBF           30E4                       xor	ah,ah
23377 5EC1           50                         push	ax
23378                                           ! Debug: func () unsigned char = find_vga_entry+0 (used reg = )
23379 5EC2           E8         1D2A            call	_find_vga_entry
23380 5EC5           44                         inc	sp
23381 5EC6           44                         inc	sp
23382                                           ! Debug: eq unsigned char = al+0 to unsigned char line = [S+$12-7] (used reg = )
23383 5EC7           8846         FB            mov	-5[bp],al
23384                                           !BCC_EOS
23385                                           ! 2691  if(line==0xFF)return;
23386                                           ! Debug: logeq int = const $FF to unsigned char line = [S+$12-7] (used reg = )
23387 5ECA           8A46         FB            mov	al,-5[bp]
23388 5ECD           3C                     FF  cmp	al,#$FF
23389 5ECF           75           04            jne 	.1E0
23390                       00005ED1            .1E1:
23391 5ED1           89EC                       mov	sp,bp
23392 5ED3           5D                         pop	bp
23393 5ED4           C3                         ret
23394                                           !BCC_EOS
23395                                           ! 2692  biosfn_get_cursor_pos(page,&dummy,&cursor);
23396                       00005ED5            .1E0:
23397                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23398 5ED5           8D5E         F2            lea	bx,-$E[bp]
23399 5ED8           53                         push	bx
23400                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23401 5ED9           8D5E         F0            lea	bx,-$10[bp]
23402 5EDC           53                         push	bx
23403                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23404 5EDD           8A46         06            mov	al,6[bp]
23405 5EE0           30E4                       xor	ah,ah
23406 5EE2           50                         push	ax
23407                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23408 5EE3           E8         E4EF            call	_biosfn_get_cursor_pos
23409 5EE6           83C4                   06  add	sp,*6
23410                                           !BCC_EOS
23411                                           ! 2693  xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23412                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23413 5EE9           8A46         F2            mov	al,-$E[bp]
23414                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23415 5EEC           8846         FE            mov	-2[bp],al
23416                                           !BCC_EOS
23417                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23418 5EEF           8B46         F2            mov	ax,-$E[bp]
23419 5EF2           30C0                       xor	al,al
23420                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23421 5EF4           88E0                       mov	al,ah
23422 5EF6           30E4                       xor	ah,ah
23423                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23424 5EF8           8846         FD            mov	-3[bp],al
23425                                           !BCC_EOS
23426                                           ! 2694  nbrows=read_byte(0x40,0x84)+1;
23427                                           ! Debug: list int = const $84 (used reg = )
23428 5EFB           B8                   0084  mov	ax,#$84
23429 5EFE           50                         push	ax
23430                                           ! Debug: list int = const $40 (used reg = )
23431 5EFF           B8                   0040  mov	ax,*$40
23432 5F02           50                         push	ax
23433                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23434 5F03           E8         1DD5            call	_read_byte
23435 5F06           83C4                   04  add	sp,*4
23436                                           ! Debug: add int = const 1 to unsigned char = al+0 (used reg = )
23437 5F09           30E4                       xor	ah,ah
23438                                           ! Debug: eq unsigned int = ax+1 to unsigned short nbrows = [S+$12-$C] (used reg = )
23439 5F0B           40                         inc	ax
23440 5F0C           8946         F6            mov	-$A[bp],ax
23441                                           !BCC_EOS
23442                                           ! 2695  nbcols=read_word(0x40,0x4A);
23443                                           ! Debug: list int = const $4A (used reg = )
23444 5F0F           B8                   004A  mov	ax,*$4A
23445 5F12           50                         push	ax
23446                                           ! Debug: list int = const $40 (used reg = )
23447 5F13           B8                   0040  mov	ax,*$40
23448 5F16           50                         push	ax
23449                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
23450 5F17           E8         1DD4            call	_read_word
23451 5F1A           83C4                   04  add	sp,*4
23452                                           ! Debug: eq unsigned short = ax+0 to unsigned short nbcols = [S+$12-$A] (used reg = )
23453 5F1D           8946         F8            mov	-8[bp],ax
23454                                           !BCC_EOS
23455                                           ! 2696  switch(car)
23456 5F20           8A46         04            mov	al,4[bp]
23457                                           ! 2697   {
23458 5F23           E9         01F2            br 	.1E4
23459                                           ! 2698    case 7:
23460                                           ! 2699     break;
23461                       00005F26            .1E5:
23462 5F26           E9         0215            br 	.1E2
23463                                           !BCC_EOS
23464                                           ! 2700    case 8:
23465                                           ! 2701     if(xcurs>0)xcurs--;
23466                       00005F29            .1E6:
23467                                           ! Debug: gt int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23468 5F29           8A46         FE            mov	al,-2[bp]
23469 5F2C           84C0                       test	al,al
23470 5F2E           74           07            je  	.1E7
23471                       00005F30            .1E8:
23472                                           ! Debug: postdec unsigned char xcurs = [S+$12-4] (used reg = )
23473 5F30           8A46         FE            mov	al,-2[bp]
23474 5F33           48                         dec	ax
23475 5F34           8846         FE            mov	-2[bp],al
23476                                           !BCC_EOS
23477                                           ! 2702     break;
23478                       00005F37            .1E7:
23479 5F37           E9         0204            br 	.1E2
23480                                           !BCC_EOS
23481                                           ! 2703    case '\r':
23482                                           ! 2704     xcurs=0;
23483                       00005F3A            .1E9:
23484                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23485 5F3A           30C0                       xor	al,al
23486 5F3C           8846         FE            mov	-2[bp],al
23487                                           !BCC_EOS
23488                                           ! 2705     break;
23489 5F3F           E9         01FC            br 	.1E2
23490                                           !BCC_EOS
23491                                           ! 2706    case '\n':
23492                                           ! 2707     ycurs++;
23493                       00005F42            .1EA:
23494                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23495 5F42           8A46         FD            mov	al,-3[bp]
23496 5F45           40                         inc	ax
23497 5F46           8846         FD            mov	-3[bp],al
23498                                           !BCC_EOS
23499                                           ! 2708     break;
23500 5F49           E9         01F2            br 	.1E2
23501                                           !BCC_EOS
23502                                           ! 2709    case '\t':
23503                                           ! 2710     do
23504                       00005F4C            .1EB:
23505                                           ! 2711      {
23506                       00005F4C            .1EE:
23507                                           ! 2712       biosfn_write_teletype(' ',page,attr,flag);
23508                                           ! Debug: list unsigned char flag = [S+$12+8] (used reg = )
23509 5F4C           8A46         0A            mov	al,$A[bp]
23510 5F4F           30E4                       xor	ah,ah
23511 5F51           50                         push	ax
23512                                           ! Debug: list unsigned char attr = [S+$14+6] (used reg = )
23513 5F52           8A46         08            mov	al,8[bp]
23514 5F55           30E4                       xor	ah,ah
23515 5F57           50                         push	ax
23516                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23517 5F58           8A46         06            mov	al,6[bp]
23518 5F5B           30E4                       xor	ah,ah
23519 5F5D           50                         push	ax
23520                                           ! Debug: list int = const $20 (used reg = )
23521 5F5E           B8                   0020  mov	ax,*$20
23522 5F61           50                         push	ax
23523                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
23524 5F62           E8         FF28            call	_biosfn_write_teletype
23525 5F65           83C4                   08  add	sp,*8
23526                                           !BCC_EOS
23527                                           ! 2713       biosfn_get_cursor_pos(page,&dummy,&cursor);
23528                                           ! Debug: list * unsigned short cursor = S+$12-$10 (used reg = )
23529 5F68           8D5E         F2            lea	bx,-$E[bp]
23530 5F6B           53                         push	bx
23531                                           ! Debug: list * unsigned short dummy = S+$14-$12 (used reg = )
23532 5F6C           8D5E         F0            lea	bx,-$10[bp]
23533 5F6F           53                         push	bx
23534                                           ! Debug: list unsigned char page = [S+$16+4] (used reg = )
23535 5F70           8A46         06            mov	al,6[bp]
23536 5F73           30E4                       xor	ah,ah
23537 5F75           50                         push	ax
23538                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
23539 5F76           E8         E45C            call	_biosfn_get_cursor_pos
23540 5F79           83C4                   06  add	sp,*6
23541                                           !BCC_EOS
23542                                           ! 2714       xcurs=cursor&0x00ff;ycurs=(cursor&0xff00)>>8;
23543                                           ! Debug: and int = const $FF to unsigned short cursor = [S+$12-$10] (used reg = )
23544 5F7C           8A46         F2            mov	al,-$E[bp]
23545                                           ! Debug: eq unsigned char = al+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23546 5F7F           8846         FE            mov	-2[bp],al
23547                                           !BCC_EOS
23548                                           ! Debug: and unsigned int = const $FF00 to unsigned short cursor = [S+$12-$10] (used reg = )
23549 5F82           8B46         F2            mov	ax,-$E[bp]
23550 5F85           30C0                       xor	al,al
23551                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
23552 5F87           88E0                       mov	al,ah
23553 5F89           30E4                       xor	ah,ah
23554                                           ! Debug: eq unsigned int = ax+0 to unsigned char ycurs = [S+$12-5] (used reg = )
23555 5F8B           8846         FD            mov	-3[bp],al
23556                                           !BCC_EOS
23557                                           ! 2715      }while(xcurs%8==0);
23558                       00005F8E            .1ED:
23559                                           ! Debug: mod int = const 8 to unsigned char xcurs = [S+$12-4] (used reg = )
23560 5F8E           8A46         FE            mov	al,-2[bp]
23561 5F91           30E4                       xor	ah,ah
23562 5F93           24                     07  and	al,*7
23563                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
23564 5F95           84C0                       test	al,al
23565 5F97           74           B3            je 	.1EE
23566                       00005F99            .1EF:
23567                                           !BCC_EOS
23568                                           ! 2716     break;
23569                       00005F99            .1EC:
23570 5F99           E9         01A2            br 	.1E2
23571                                           !BCC_EOS
23572                                           ! 2717    default:
23573                                           ! 2718     if(vga_modes[line].class==0x00)
23574                       00005F9C            .1F0:
23575                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23576 5F9C           8A46         FB            mov	al,-5[bp]
23577 5F9F           30E4                       xor	ah,ah
23578 5FA1           B1                     03  mov	cl,*3
23579 5FA3           D3E0                       shl	ax,cl
23580 5FA5           89C3                       mov	bx,ax
23581 5FA7           81C3                 01E2  add	bx,#_vga_modes
23582                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23583 5FAB           8A47         01            mov	al,1[bx]
23584 5FAE           84C0                       test	al,al
23585 5FB0   7403    E9         0082            bne 	.1F1
23586                       00005FB5            .1F2:
23587                                           ! 2719      {
23588                                           ! 2720       address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+ycurs*nbcols)*2;
23589                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned char ycurs = [S+$12-5] (used reg = )
23590 5FB5           8A46         FD            mov	al,-3[bp]
23591 5FB8           30E4                       xor	ah,ah
23592 5FBA           8B4E         F8            mov	cx,-8[bp]
23593 5FBD           F7E9                       imul	cx
23594                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23595                                           ! Debug: expression subtree swapping
23596 5FBF           0246         FE            add	al,-2[bp]
23597 5FC2           80D4                   00  adc	ah,*0
23598                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23599 5FC5           D1E0                       shl	ax,*1
23600 5FC7           50                         push	ax
23601                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23602 5FC8           8B46         F8            mov	ax,-8[bp]
23603 5FCB           8B4E         F6            mov	cx,-$A[bp]
23604 5FCE           F7E9                       imul	cx
23605                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23606 5FD0           D1E0                       shl	ax,*1
23607                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23608 5FD2           0C                     FF  or	al,#$FF
23609                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23610                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23611 5FD4           89C3                       mov	bx,ax
23612 5FD6           8A46         06            mov	al,6[bp]
23613 5FD9           30E4                       xor	ah,ah
23614 5FDB           93                         xchg	ax,bx
23615 5FDC           40                         inc	ax
23616 5FDD           89D9                       mov	cx,bx
23617 5FDF           F7E9                       imul	cx
23618                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23619 5FE1           0346         EE            add	ax,0+..FFF6[bp]
23620 5FE4           44                         inc	sp
23621 5FE5           44                         inc	sp
23622                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23623 5FE6           8946         F4            mov	-$C[bp],ax
23624                                           !BCC_EOS
23625                                           ! 2721       write_byte(vga_modes[line].sstart,address,car);
23626                                           ! Debug: list unsigned char car = [S+$12+2] (used reg = )
23627 5FE9           8A46         04            mov	al,4[bp]
23628 5FEC           30E4                       xor	ah,ah
23629 5FEE           50                         push	ax
23630                                           ! Debug: list unsigned short address = [S+$14-$E] (used reg = )
23631 5FEF           FF76         F4            push	-$C[bp]
23632                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23633 5FF2           8A46         FB            mov	al,-5[bp]
23634 5FF5           30E4                       xor	ah,ah
23635 5FF7           B1                     03  mov	cl,*3
23636 5FF9           D3E0                       shl	ax,cl
23637 5FFB           89C3                       mov	bx,ax
23638 5FFD           81C3                 01E2  add	bx,#_vga_modes
23639                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23640 6001           FF77         04            push	4[bx]
23641                                           ! Debug: func () void = write_byte+0 (used reg = )
23642 6004           E8         1CFA            call	_write_byte
23643 6007           83C4                   06  add	sp,*6
23644                                           !BCC_EOS
23645                                           ! 2722       if(flag==3)
23646                                           ! Debug: logeq int = const 3 to unsigned char flag = [S+$12+8] (used reg = )
23647 600A           8A46         0A            mov	al,$A[bp]
23648 600D           3C                     03  cmp	al,*3
23649 600F           75           23            jne 	.1F3
23650                       00006011            .1F4:
23651                                           ! 2723        write_byte(vga_modes[line].sstart,address+1,attr);
23652                                           ! Debug: list unsigned char attr = [S+$12+6] (used reg = )
23653 6011           8A46         08            mov	al,8[bp]
23654 6014           30E4                       xor	ah,ah
23655 6016           50                         push	ax
23656                                           ! Debug: add int = const 1 to unsigned short address = [S+$14-$E] (used reg = )
23657 6017           8B46         F4            mov	ax,-$C[bp]
23658                                           ! Debug: list unsigned int = ax+1 (used reg = )
23659 601A           40                         inc	ax
23660 601B           50                         push	ax
23661                                           ! Debug: ptradd unsigned char line = [S+$16-7] to [$10] struct  = vga_modes+0 (used reg = )
23662 601C           8A46         FB            mov	al,-5[bp]
23663 601F           30E4                       xor	ah,ah
23664 6021           B1                     03  mov	cl,*3
23665 6023           D3E0                       shl	ax,cl
23666 6025           89C3                       mov	bx,ax
23667 6027           81C3                 01E2  add	bx,#_vga_modes
23668                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23669 602B           FF77         04            push	4[bx]
23670                                           ! Debug: func () void = write_byte+0 (used reg = )
23671 602E           E8         1CD0            call	_write_byte
23672 6031           83C4                   06  add	sp,*6
23673                                           !BCC_EOS
23674                                           ! 2724      }
23675                       00006034            .1F3:
23676                                           ! 2725     else
23677                                           ! 2726      {
23678 6034           E9         00D8            br 	.1F5
23679                       00006037            .1F1:
23680                                           ! 2727       cheight=video_param_table[line_to_vpti[line]].cheight;
23681                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] unsigned char = line_to_vpti+0 (used reg = )
23682 6037           8A46         FB            mov	al,-5[bp]
23683 603A           30E4                       xor	ah,ah
23684 603C           89C3                       mov	bx,ax
23685                                           ! Debug: ptradd unsigned char = [bx+_line_to_vpti+0] to [$1E] struct  = video_param_table+0 (used reg = )
23686 603E           8A87       0262            mov	al,_line_to_vpti[bx]
23687 6042           30E4                       xor	ah,ah
23688 6044           B1                     06  mov	cl,*6
23689 6046           D3E0                       shl	ax,cl
23690 6048           89C3                       mov	bx,ax
23691 604A           81C3                 0276  add	bx,#_video_param_table
23692                                           ! Debug: eq unsigned char = [bx+2] to unsigned char cheight = [S+$12-3] (used reg = )
23693 604E           8A47         02            mov	al,2[bx]
23694 6051           8846         FF            mov	-1[bp],al
23695                                           !BCC_EOS
23696                                           ! 2728       bpp=vga_modes[line].pixbits;
23697                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23698 6054           8A46         FB            mov	al,-5[bp]
23699 6057           30E4                       xor	ah,ah
23700 6059           B1                     03  mov	cl,*3
23701 605B           D3E0                       shl	ax,cl
23702 605D           89C3                       mov	bx,ax
23703 605F           81C3                 01E2  add	bx,#_vga_modes
23704                                           ! Debug: eq unsigned char = [bx+3] to unsigned char bpp = [S+$12-8] (used reg = )
23705 6063           8A47         03            mov	al,3[bx]
23706 6066           8846         FA            mov	-6[bp],al
23707                                           !BCC_EOS
23708                                           ! 2729       switch(vga_modes[line].memmodel)
23709                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23710 6069           8A46         FB            mov	al,-5[bp]
23711 606C           30E4                       xor	ah,ah
23712 606E           B1                     03  mov	cl,*3
23713 6070           D3E0                       shl	ax,cl
23714 6072           89C3                       mov	bx,ax
23715 6074           81C3                 01E2  add	bx,#_vga_modes
23716 6078           8A47         02            mov	al,2[bx]
23717                                           ! 2730        {
23718 607B           EB           7A            jmp .1F8
23719                                           ! 2731         case 0x04:
23720                                           ! 2732         case 0x03:
23721                       0000607D            .1F9:
23722                                           ! 2733           write_gfx_char_pl4(car,attr,xcurs,ycurs,nbcols,cheight);
23723                       0000607D            .1FA:
23724                                           ! Debug: list unsigned char cheight = [S+$12-3] (used reg = )
23725 607D           8A46         FF            mov	al,-1[bp]
23726 6080           30E4                       xor	ah,ah
23727 6082           50                         push	ax
23728                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23729 6083           FF76         F8            push	-8[bp]
23730                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23731 6086           8A46         FD            mov	al,-3[bp]
23732 6089           30E4                       xor	ah,ah
23733 608B           50                         push	ax
23734                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23735 608C           8A46         FE            mov	al,-2[bp]
23736 608F           30E4                       xor	ah,ah
23737 6091           50                         push	ax
23738                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23739 6092           8A46         08            mov	al,8[bp]
23740 6095           30E4                       xor	ah,ah
23741 6097           50                         push	ax
23742                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23743 6098           8A46         04            mov	al,4[bp]
23744 609B           30E4                       xor	ah,ah
23745 609D           50                         push	ax
23746                                           ! Debug: func () void = write_gfx_char_pl4+0 (used reg = )
23747 609E           E8         F079            call	_write_gfx_char_pl4
23748 60A1           83C4                   0C  add	sp,*$C
23749                                           !BCC_EOS
23750                                           ! 2734           break;
23751 60A4           EB           69            jmp .1F6
23752                                           !BCC_EOS
23753                                           ! 2735         case 0x02:
23754                                           ! 2736           write_gfx_char_cga(car,attr,xcurs,ycurs,nbcols,bpp);
23755                       000060A6            .1FB:
23756                                           ! Debug: list unsigned char bpp = [S+$12-8] (used reg = )
23757 60A6           8A46         FA            mov	al,-6[bp]
23758 60A9           30E4                       xor	ah,ah
23759 60AB           50                         push	ax
23760                                           ! Debug: list unsigned short nbcols = [S+$14-$A] (used reg = )
23761 60AC           FF76         F8            push	-8[bp]
23762                                           ! Debug: list unsigned char ycurs = [S+$16-5] (used reg = )
23763 60AF           8A46         FD            mov	al,-3[bp]
23764 60B2           30E4                       xor	ah,ah
23765 60B4           50                         push	ax
23766                                           ! Debug: list unsigned char xcurs = [S+$18-4] (used reg = )
23767 60B5           8A46         FE            mov	al,-2[bp]
23768 60B8           30E4                       xor	ah,ah
23769 60BA           50                         push	ax
23770                                           ! Debug: list unsigned char attr = [S+$1A+6] (used reg = )
23771 60BB           8A46         08            mov	al,8[bp]
23772 60BE           30E4                       xor	ah,ah
23773 60C0           50                         push	ax
23774                                           ! Debug: list unsigned char car = [S+$1C+2] (used reg = )
23775 60C1           8A46         04            mov	al,4[bp]
23776 60C4           30E4                       xor	ah,ah
23777 60C6           50                         push	ax
23778                                           ! Debug: func () void = write_gfx_char_cga+0 (used reg = )
23779 60C7           E8         F1C5            call	_write_gfx_char_cga
23780 60CA           83C4                   0C  add	sp,*$C
23781                                           !BCC_EOS
23782                                           ! 2737           break;
23783 60CD           EB           40            jmp .1F6
23784                                           !BCC_EOS
23785                                           ! 2738         case 0x05:
23786                                           ! 2739           write_gfx_char_lin(car,attr,xcurs,ycurs,nbcols);
23787                       000060CF            .1FC:
23788                                           ! Debug: list unsigned short nbcols = [S+$12-$A] (used reg = )
23789 60CF           FF76         F8            push	-8[bp]
23790                                           ! Debug: list unsigned char ycurs = [S+$14-5] (used reg = )
23791 60D2           8A46         FD            mov	al,-3[bp]
23792 60D5           30E4                       xor	ah,ah
23793 60D7           50                         push	ax
23794                                           ! Debug: list unsigned char xcurs = [S+$16-4] (used reg = )
23795 60D8           8A46         FE            mov	al,-2[bp]
23796 60DB           30E4                       xor	ah,ah
23797 60DD           50                         push	ax
23798                                           ! Debug: list unsigned char attr = [S+$18+6] (used reg = )
23799 60DE           8A46         08            mov	al,8[bp]
23800 60E1           30E4                       xor	ah,ah
23801 60E3           50                         push	ax
23802                                           ! Debug: list unsigned char car = [S+$1A+2] (used reg = )
23803 60E4           8A46         04            mov	al,4[bp]
23804 60E7           30E4                       xor	ah,ah
23805 60E9           50                         push	ax
23806                                           ! Debug: func () void = write_gfx_char_lin+0 (used reg = )
23807 60EA           E8         F3A8            call	_write_gfx_char_lin
23808 60ED           83C4                   0A  add	sp,*$A
23809                                           !BCC_EOS
23810                                           ! 2740           break;
23811 60F0           EB           1D            jmp .1F6
23812                                           !BCC_EOS
23813                                           ! 2741         default:
23814                                           ! 2742           unimplemented();
23815                       000060F2            .1FD:
23816                                           ! Debug: func () void = unimplemented+0 (used reg = )
23817 60F2           E8         1C75            call	_unimplemented
23818                                           !BCC_EOS
23819                                           ! 2743        }
23820                                           ! 2744      }
23821 60F5           EB           18            jmp .1F6
23822                       000060F7            .1F8:
23823 60F7           2C                     02  sub	al,*2
23824 60F9           74           AB            je 	.1FB
23825 60FB           2C                     01  sub	al,*1
23826 60FD   7503    E9         FF7B            beq 	.1FA
23827 6102           2C                     01  sub	al,*1
23828 6104   7503    E9         FF74            beq 	.1F9
23829 6109           2C                     01  sub	al,*1
23830 610B           74           C2            je 	.1FC
23831 610D           EB           E3            jmp	.1FD
23832                       0000610F            .1F6:
23833                                           ! 2745     xcurs++;
23834                       0000610F            .1F5:
23835                                           ! Debug: postinc unsigned char xcurs = [S+$12-4] (used reg = )
23836 610F           8A46         FE            mov	al,-2[bp]
23837 6112           40                         inc	ax
23838 6113           8846         FE            mov	-2[bp],al
23839                                           !BCC_EOS
23840                                           ! 2746   }
23841                                           ! 2747  if(xcurs==nbcols)
23842 6116           EB           26            jmp .1E2
23843                       00006118            .1E4:
23844 6118           2C                     07  sub	al,*7
23845 611A   7503    E9         FE07            beq 	.1E5
23846 611F           2C                     01  sub	al,*1
23847 6121   7503    E9         FE03            beq 	.1E6
23848 6126           2C                     01  sub	al,*1
23849 6128   7503    E9         FE1F            beq 	.1EB
23850 612D           2C                     01  sub	al,*1
23851 612F   7503    E9         FE0E            beq 	.1EA
23852 6134           2C                     03  sub	al,*3
23853 6136   7503    E9         FDFF            beq 	.1E9
23854 613B           E9         FE5E            br 	.1F0
23855                       0000613E            .1E2:
23856                       FFFFFFEE            ..FFF6	=	-$12
23857                                           ! Debug: logeq unsigned short nbcols = [S+$12-$A] to unsigned char xcurs = [S+$12-4] (used reg = )
23858 613E           8A46         FE            mov	al,-2[bp]
23859 6141           30E4                       xor	ah,ah
23860 6143           3B46         F8            cmp	ax,-8[bp]
23861 6146           75           0C            jne 	.1FE
23862                       00006148            .1FF:
23863                                           ! 2748   {xcurs=0;
23864                                           ! Debug: eq int = const 0 to unsigned char xcurs = [S+$12-4] (used reg = )
23865 6148           30C0                       xor	al,al
23866 614A           8846         FE            mov	-2[bp],al
23867                                           !BCC_EOS
23868                                           ! 2749    ycurs++;
23869                                           ! Debug: postinc unsigned char ycurs = [S+$12-5] (used reg = )
23870 614D           8A46         FD            mov	al,-3[bp]
23871 6150           40                         inc	ax
23872 6151           8846         FD            mov	-3[bp],al
23873                                           !BCC_EOS
23874                                           ! 2750   }
23875                                           ! 2751  if(ycurs==nbrows)
23876                       00006154            .1FE:
23877                                           ! Debug: logeq unsigned short nbrows = [S+$12-$C] to unsigned char ycurs = [S+$12-5] (used reg = )
23878 6154           8A46         FD            mov	al,-3[bp]
23879 6157           30E4                       xor	ah,ah
23880 6159           3B46         F6            cmp	ax,-$A[bp]
23881 615C   7403    E9         00CA            bne 	.200
23882                       00006161            .201:
23883                                           ! 2752   {
23884                                           ! 2753    if(vga_modes[line].class==0x00)
23885                                           ! Debug: ptradd unsigned char line = [S+$12-7] to [$10] struct  = vga_modes+0 (used reg = )
23886 6161           8A46         FB            mov	al,-5[bp]
23887 6164           30E4                       xor	ah,ah
23888 6166           B1                     03  mov	cl,*3
23889 6168           D3E0                       shl	ax,cl
23890 616A           89C3                       mov	bx,ax
23891 616C           81C3                 01E2  add	bx,#_vga_modes
23892                                           ! Debug: logeq int = const 0 to unsigned char = [bx+1] (used reg = )
23893 6170           8A47         01            mov	al,1[bx]
23894 6173           84C0                       test	al,al
23895 6175   7403    E9         0081            bne 	.202
23896                       0000617A            .203:
23897                                           ! 2754     {
23898                                           ! 2755      address=((((nbcols*nbrows*2)|0x00ff)+1)*page)+(xcurs+(ycurs-1)*nbcols)*2;
23899                                           ! Debug: sub int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
23900 617A           8A46         FD            mov	al,-3[bp]
23901 617D           30E4                       xor	ah,ah
23902                                           ! Debug: mul unsigned short nbcols = [S+$12-$A] to unsigned int = ax-1 (used reg = )
23903 617F           48                         dec	ax
23904 6180           8B4E         F8            mov	cx,-8[bp]
23905 6183           F7E9                       imul	cx
23906                                           ! Debug: add unsigned int = ax+0 to unsigned char xcurs = [S+$12-4] (used reg = )
23907                                           ! Debug: expression subtree swapping
23908 6185           0246         FE            add	al,-2[bp]
23909 6188           80D4                   00  adc	ah,*0
23910                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23911 618B           D1E0                       shl	ax,*1
23912 618D           50                         push	ax
23913                                           ! Debug: mul unsigned short nbrows = [S+$14-$C] to unsigned short nbcols = [S+$14-$A] (used reg = )
23914 618E           8B46         F8            mov	ax,-8[bp]
23915 6191           8B4E         F6            mov	cx,-$A[bp]
23916 6194           F7E9                       imul	cx
23917                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
23918 6196           D1E0                       shl	ax,*1
23919                                           ! Debug: or int = const $FF to unsigned int = ax+0 (used reg = )
23920 6198           0C                     FF  or	al,#$FF
23921                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
23922                                           ! Debug: mul unsigned char page = [S+$14+4] to unsigned int = ax+1 (used reg = )
23923 619A           89C3                       mov	bx,ax
23924 619C           8A46         06            mov	al,6[bp]
23925 619F           30E4                       xor	ah,ah
23926 61A1           93                         xchg	ax,bx
23927 61A2           40                         inc	ax
23928 61A3           89D9                       mov	cx,bx
23929 61A5           F7E9                       imul	cx
23930                                           ! Debug: add unsigned int (temp) = [S+$14-$14] to unsigned int = ax+0 (used reg = )
23931 61A7           0346         EE            add	ax,-$12[bp]
23932 61AA           44                         inc	sp
23933 61AB           44                         inc	sp
23934                                           ! Debug: eq unsigned int = ax+0 to unsigned short address = [S+$12-$E] (used reg = )
23935 61AC           8946         F4            mov	-$C[bp],ax
23936                                           !BCC_EOS
23937                                           ! 2756      attr=read_byte(vga_modes[lin
23938                                           ! 2756 e].sstart,address+1);
23939                                           ! Debug: add int = const 1 to unsigned short address = [S+$12-$E] (used reg = )
23940 61AF           8B46         F4            mov	ax,-$C[bp]
23941                                           ! Debug: list unsigned int = ax+1 (used reg = )
23942 61B2           40                         inc	ax
23943 61B3           50                         push	ax
23944                                           ! Debug: ptradd unsigned char line = [S+$14-7] to [$10] struct  = vga_modes+0 (used reg = )
23945 61B4           8A46         FB            mov	al,-5[bp]
23946 61B7           30E4                       xor	ah,ah
23947 61B9           B1                     03  mov	cl,*3
23948 61BB           D3E0                       shl	ax,cl
23949 61BD           89C3                       mov	bx,ax
23950 61BF           81C3                 01E2  add	bx,#_vga_modes
23951                                           ! Debug: list unsigned short = [bx+4] (used reg = )
23952 61C3           FF77         04            push	4[bx]
23953                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
23954 61C6           E8         1B12            call	_read_byte
23955 61C9           83C4                   04  add	sp,*4
23956                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$12+6] (used reg = )
23957 61CC           8846         08            mov	8[bp],al
23958                                           !BCC_EOS
23959                                           ! 2757      biosfn_scroll(0x01,attr,0,0,nbrows-1,nbcols-1,page,1);
23960                                           ! Debug: list int = const 1 (used reg = )
23961 61CF           B8                   0001  mov	ax,*1
23962 61D2           50                         push	ax
23963                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
23964 61D3           8A46         06            mov	al,6[bp]
23965 61D6           30E4                       xor	ah,ah
23966 61D8           50                         push	ax
23967                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
23968 61D9           8B46         F8            mov	ax,-8[bp]
23969                                           ! Debug: list unsigned int = ax-1 (used reg = )
23970 61DC           48                         dec	ax
23971 61DD           50                         push	ax
23972                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
23973 61DE           8B46         F6            mov	ax,-$A[bp]
23974                                           ! Debug: list unsigned int = ax-1 (used reg = )
23975 61E1           48                         dec	ax
23976 61E2           50                         push	ax
23977                                           ! Debug: list int = const 0 (used reg = )
23978 61E3           31C0                       xor	ax,ax
23979 61E5           50                         push	ax
23980                                           ! Debug: list int = const 0 (used reg = )
23981 61E6           31C0                       xor	ax,ax
23982 61E8           50                         push	ax
23983                                           ! Debug: list unsigned char attr = [S+$1E+6] (used reg = )
23984 61E9           8A46         08            mov	al,8[bp]
23985 61EC           30E4                       xor	ah,ah
23986 61EE           50                         push	ax
23987                                           ! Debug: list int = const 1 (used reg = )
23988 61EF           B8                   0001  mov	ax,*1
23989 61F2           50                         push	ax
23990                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
23991 61F3           E8         E6EB            call	_biosfn_scroll
23992 61F6           83C4                   10  add	sp,*$10
23993                                           !BCC_EOS
23994                                           ! 2758     }
23995                                           ! 2759    else
23996                                           ! 2760     {
23997 61F9           EB           27            jmp .204
23998                       000061FB            .202:
23999                                           ! 2761      biosfn_scroll(0x01,0x00,0,0,nbrows-1,nbcols-1,page,1);
24000                                           ! Debug: list int = const 1 (used reg = )
24001 61FB           B8                   0001  mov	ax,*1
24002 61FE           50                         push	ax
24003                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24004 61FF           8A46         06            mov	al,6[bp]
24005 6202           30E4                       xor	ah,ah
24006 6204           50                         push	ax
24007                                           ! Debug: sub int = const 1 to unsigned short nbcols = [S+$16-$A] (used reg = )
24008 6205           8B46         F8            mov	ax,-8[bp]
24009                                           ! Debug: list unsigned int = ax-1 (used reg = )
24010 6208           48                         dec	ax
24011 6209           50                         push	ax
24012                                           ! Debug: sub int = const 1 to unsigned short nbrows = [S+$18-$C] (used reg = )
24013 620A           8B46         F6            mov	ax,-$A[bp]
24014                                           ! Debug: list unsigned int = ax-1 (used reg = )
24015 620D           48                         dec	ax
24016 620E           50                         push	ax
24017                                           ! Debug: list int = const 0 (used reg = )
24018 620F           31C0                       xor	ax,ax
24019 6211           50                         push	ax
24020                                           ! Debug: list int = const 0 (used reg = )
24021 6212           31C0                       xor	ax,ax
24022 6214           50                         push	ax
24023                                           ! Debug: list int = const 0 (used reg = )
24024 6215           31C0                       xor	ax,ax
24025 6217           50                         push	ax
24026                                           ! Debug: list int = const 1 (used reg = )
24027 6218           B8                   0001  mov	ax,*1
24028 621B           50                         push	ax
24029                                           ! Debug: func () void = biosfn_scroll+0 (used reg = )
24030 621C           E8         E6C2            call	_biosfn_scroll
24031 621F           83C4                   10  add	sp,*$10
24032                                           !BCC_EOS
24033                                           ! 2762     }
24034                                           ! 2763    ycurs-=1;
24035                       00006222            .204:
24036                                           ! Debug: subab int = const 1 to unsigned char ycurs = [S+$12-5] (used reg = )
24037 6222           8A46         FD            mov	al,-3[bp]
24038 6225           30E4                       xor	ah,ah
24039 6227           48                         dec	ax
24040 6228           8846         FD            mov	-3[bp],al
24041                                           !BCC_EOS
24042                                           ! 2764   }
24043                                           ! 2765  cursor=ycurs; cursor<<=8; cursor+=xcurs;
24044                       0000622B            .200:
24045                                           ! Debug: eq unsigned char ycurs = [S+$12-5] to unsigned short cursor = [S+$12-$10] (used reg = )
24046 622B           8A46         FD            mov	al,-3[bp]
24047 622E           30E4                       xor	ah,ah
24048 6230           8946         F2            mov	-$E[bp],ax
24049                                           !BCC_EOS
24050                                           ! Debug: slab int = const 8 to unsigned short cursor = [S+$12-$10] (used reg = )
24051 6233           8B46         F2            mov	ax,-$E[bp]
24052 6236           88C4                       mov	ah,al
24053 6238           30C0                       xor	al,al
24054 623A           8946         F2            mov	-$E[bp],ax
24055                                           !BCC_EOS
24056                                           ! Debug: addab unsigned char xcurs = [S+$12-4] to unsigned short cursor = [S+$12-$10] (used reg = )
24057 623D           8B46         F2            mov	ax,-$E[bp]
24058 6240           0246         FE            add	al,-2[bp]
24059 6243           80D4                   00  adc	ah,*0
24060 6246           8946         F2            mov	-$E[bp],ax
24061                                           !BCC_EOS
24062                                           ! 2766  biosfn_set_cursor_pos(page,cursor);
24063                                           ! Debug: list unsigned short cursor = [S+$12-$10] (used reg = )
24064 6249           FF76         F2            push	-$E[bp]
24065                                           ! Debug: list unsigned char page = [S+$14+4] (used reg = )
24066 624C           8A46         06            mov	al,6[bp]
24067 624F           30E4                       xor	ah,ah
24068 6251           50                         push	ax
24069                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
24070 6252           E8         E07F            call	_biosfn_set_cursor_pos
24071 6255           83C4                   04  add	sp,*4
24072                                           !BCC_EOS
24073                                           ! 2767 }
24074 6258           89EC                       mov	sp,bp
24075 625A           5D                         pop	bp
24076 625B           C3                         ret
24077                                           ! 2768 #asm
24078                                           !BCC_ASM
24079                       00000008            _biosfn_write_teletype.flag	set	8
24080                       00000006            _biosfn_write_teletype.attr	set	6
24081                       00000004            _biosfn_write_teletype.page	set	4
24082                       00000002            _biosfn_write_teletype.car	set	2
24083                       0000625C            biosfn_get_video_mode:
24084 625C           1E                           push ds
24085 625D           B8                   0040    mov ax, # 0x40
24086 6260           8ED8                         mov ds, ax
24087 6262           53                           push bx
24088 6263           BB                   0062    mov bx, # 0x62
24089 6266           8A07                         mov al, [bx]
24090 6268           5B                           pop bx
24091 6269           88C7                         mov bh, al
24092 626B           53                           push bx
24093 626C           BB                   0087    mov bx, # 0x87
24094 626F           8A27                         mov ah, [bx]
24095 6271           80E4                   80    and ah, #0x80
24096 6274           BB                   0049    mov bx, # 0x49
24097 6277           8A07                         mov al, [bx]
24098 6279           08E0                         or al, ah
24099 627B           BB                   004A    mov bx, # 0x4A
24100 627E           8A27                         mov ah, [bx]
24101 6280           5B                           pop bx
24102 6281           1F                           pop ds
24103 6282           C3                           ret
24104                                           ! 2790 endasm
24105                                           !BCC_ENDASM
24106                                           ! 2791 #asm
24107                                           !BCC_ASM
24108                       00000008            _biosfn_write_teletype.flag	set	8
24109                       00000006            _biosfn_write_teletype.attr	set	6
24110                       00000004            _biosfn_write_teletype.page	set	4
24111                       00000002            _biosfn_write_teletype.car	set	2
24112                       00006283            biosfn_group_10:
24113 6283           3C                     00    cmp al, #0x00
24114 6285           75           02              jne int10_test_1001
24115 6287           EB           64              jmp biosfn_set_single_palette_reg
24116                       00006289            int10_test_1001:
24117 6289           3C                     01    cmp al, #0x01
24118 628B           75           02              jne int10_test_1002
24119 628D           EB           78              jmp biosfn_set_overscan_border_color
24120                       0000628F            int10_test_1002:
24121 628F           3C                     02    cmp al, #0x02
24122 6291           75           02              jne int10_test_1003
24123 6293           EB           7A              jmp biosfn_set_all_palette_reg
24124                       00006295            int10_test_1003:
24125 6295           3C                     03    cmp al, #0x03
24126 6297           75           03              jne int10_test_1007
24127 6299           E9         00A0              jmp biosfn_toggle_intensity
24128                       0000629C            int10_test_1007:
24129 629C           3C                     07    cmp al, #0x07
24130 629E           75           03              jne int10_test_1008
24131 62A0           E9         00C2              jmp biosfn_get_single_palette_reg
24132                       000062A3            int10_test_1008:
24133 62A3           3C                     08    cmp al, #0x08
24134 62A5           75           03              jne int10_test_1009
24135 62A7           E9         00DF              jmp biosfn_read_overscan_border_color
24136                       000062AA            int10_test_1009:
24137 62AA           3C                     09    cmp al, #0x09
24138 62AC           75           03              jne int10_test_1010
24139 62AE           E9         00E6              jmp biosfn_get_all_palette_reg
24140                       000062B1            int10_test_1010:
24141 62B1           3C                     10    cmp al, #0x10
24142 62B3           75           03              jne int10_test_1012
24143 62B5           E9         0120              jmp biosfn_set_single_dac_reg
24144                       000062B8            int10_test_1012:
24145 62B8           3C                     12    cmp al, #0x12
24146 62BA           75           03              jne int10_test_1013
24147 62BC           E9         0132              jmp biosfn_set_all_dac_reg
24148                       000062BF            int10_test_1013:
24149 62BF           3C                     13    cmp al, #0x13
24150 62C1           75           03              jne int10_test_1015
24151 62C3           E9         0153              jmp biosfn_select_video_dac_color_page
24152                       000062C6            int10_test_1015:
24153 62C6           3C                     15    cmp al, #0x15
24154 62C8           75           03              jne int10_test_1017
24155 62CA           E9         019B              jmp biosfn_read_single_dac_reg
24156                       000062CD            int10_test_1017:
24157 62CD           3C                     17    cmp al, #0x17
24158 62CF           75           03              jne int10_test_1018
24159 62D1           E9         01AF              jmp biosfn_read_all_dac_reg
24160                       000062D4            int10_test_1018:
24161 62D4           3C                     18    cmp al, #0x18
24162 62D6           75           03              jne int10_test_1019
24163 62D8           E9         01D0              jmp biosfn_set_pel_mask
24164                       000062DB            int10_test_1019:
24165 62DB           3C                     19    cmp al, #0x19
24166 62DD           75           03              jne int10_test_101A
24167 62DF           E9         01D4              jmp biosfn_read_pel_mask
24168                       000062E2            int10_test_101A:
24169 62E2           3C                     1A    cmp al, #0x1a
24170 62E4           75           03              jne int10_group_10_unknown
24171 62E6           E9         01D8              jmp biosfn_read_video_dac_state
24172                       000062E9            int10_group_10_unknown:
24173 62E9           E8         1A8C              call _unknown
24174 62EC           C3                           ret
24175                       000062ED            biosfn_set_single_palette_reg:
24176 62ED           80FB                   14    cmp bl, #0x14
24177 62F0           77           14              ja no_actl_reg1
24178 62F2           50                           push ax
24179 62F3           52                           push dx
24180 62F4           BA                   03DA    mov dx, # 0x3da
24181 62F7           EC                           in al, dx
24182 62F8           BA                   03C0    mov dx, # 0x3c0
24183 62FB           88D8                         mov al, bl
24184 62FD           EE                           out dx, al
24185 62FE           88F8                         mov al, bh
24186 6300           EE                           out dx, al
24187 6301           B0                     20    mov al, #0x20
24188 6303           EE                           out dx, al
24189 6304           5A                           pop dx
24190 6305           58                           pop ax
24191                       00006306            no_actl_reg1:
24192 6306           C3                           ret
24193                                           ! 2873 endasm
24194                                           !BCC_ENDASM
24195                                           ! 2874 #asm
24196                                           !BCC_ASM
24197                       00000008            _biosfn_write_teletype.flag	set	8
24198                       00000006            _biosfn_write_teletype.attr	set	6
24199                       00000004            _biosfn_write_teletype.page	set	4
24200                       00000002            _biosfn_write_teletype.car	set	2
24201                       00006307            biosfn_set_overscan_border_color:
24202 6307           53                           push bx
24203 6308           B3                     11    mov bl, #0x11
24204 630A           E8         FFE0              call biosfn_set_single_palette_reg
24205 630D           5B                           pop bx
24206 630E           C3                           ret
24207                                           ! 2881 endasm
24208                                           !BCC_ENDASM
24209                                           ! 2882 #asm
24210                                           !BCC_ASM
24211                       00000008            _biosfn_write_teletype.flag	set	8
24212                       00000006            _biosfn_write_teletype.attr	set	6
24213                       00000004            _biosfn_write_teletype.page	set	4
24214                       00000002            _biosfn_write_teletype.car	set	2
24215                       0000630F            biosfn_set_all_palette_reg:
24216 630F           50                           push ax
24217 6310           53                           push bx
24218 6311           51                           push cx
24219 6312           52                           push dx
24220 6313           89D3                         mov bx, dx
24221 6315           BA                   03DA    mov dx, # 0x3da
24222 6318           EC                           in al, dx
24223 6319           B1                     00    mov cl, #0x00
24224 631B           BA                   03C0    mov dx, # 0x3c0
24225                       0000631E            set_palette_loop:
24226 631E           88C8                         mov al, cl
24227 6320           EE                           out dx, al
24228 6321           26                           seg es
24229 6322           8A07                         mov al, [bx]
24230 6324           EE                           out dx, al
24231 6325           43                           inc bx
24232 6326           FEC1                         inc cl
24233 6328           80F9                   10    cmp cl, #0x10
24234 632B           75           F1              jne set_palette_loop
24235 632D           B0                     11    mov al, #0x11
24236 632F           EE                           out dx, al
24237 6330           26                           seg es
24238 6331           8A07                         mov al, [bx]
24239 6333           EE                           out dx, al
24240 6334           B0                     20    mov al, #0x20
24241 6336           EE                           out dx, al
24242 6337           5A                           pop dx
24243 6338           59                           pop cx
24244 6339           5B                           pop bx
24245 633A           58                           pop ax
24246 633B           C3                           ret
24247                                           ! 2915 endasm
24248                                           !BCC_ENDASM
24249                                           ! 2916 #asm
24250                                           !BCC_ASM
24251                       00000008            _biosfn_write_teletype.flag	set	8
24252                       00000006            _biosfn_write_teletype.attr	set	6
24253                       00000004            _biosfn_write_teletype.page	set	4
24254                       00000002            _biosfn_write_teletype.car	set	2
24255                       0000633C            biosfn_toggle_intensity:
24256 633C           50                           push ax
24257 633D           53                           push bx
24258 633E           52                           push dx
24259 633F           BA                   03DA    mov dx, # 0x3da
24260 6342           EC                           in al, dx
24261 6343           BA                   03C0    mov dx, # 0x3c0
24262 6346           B0                     10    mov al, #0x10
24263 6348           EE                           out dx, al
24264 6349           BA                   03C1    mov dx, # 0x3c1
24265 634C           EC                           in al, dx
24266 634D           24                     F7    and al, #0xf7
24267 634F           80E3                   01    and bl, #0x01
24268                                             ;shl bl, 3
24269 6352           D0E3                         shl bl, 1
24270 6354           D0E3                         shl bl, 1
24271 6356           D0E3                         shl bl, 1
24272 6358           08D8                         or al, bl
24273 635A           BA                   03C0    mov dx, # 0x3c0
24274 635D           EE                           out dx, al
24275 635E           B0                     20    mov al, #0x20
24276 6360           EE                           out dx, al
24277 6361           5A                           pop dx
24278 6362           5B                           pop bx
24279 6363           58                           pop ax
24280 6364           C3                           ret
24281                                           ! 2943 endasm
24282                                           !BCC_ENDASM
24283                                           ! 2944 #asm
24284                                           !BCC_ASM
24285                       00000008            _biosfn_write_teletype.flag	set	8
24286                       00000006            _biosfn_write_teletype.attr	set	6
24287                       00000004            _biosfn_write_teletype.page	set	4
24288                       00000002            _biosfn_write_teletype.car	set	2
24289                       00006365            biosfn_get_single_palette_reg:
24290 6365           80FB                   14    cmp bl, #0x14
24291 6368           77           1E              ja no_actl_reg2
24292 636A           50                           push ax
24293 636B           52                           push dx
24294 636C           BA                   03DA    mov dx, # 0x3da
24295 636F           EC                           in al, dx
24296 6370           BA                   03C0    mov dx, # 0x3c0
24297 6373           88D8                         mov al, bl
24298 6375           EE                           out dx, al
24299 6376           BA                   03C1    mov dx, # 0x3c1
24300 6379           EC                           in al, dx
24301 637A           88C7                         mov bh, al
24302 637C           BA                   03DA    mov dx, # 0x3da
24303 637F           EC                           in al, dx
24304 6380           BA                   03C0    mov dx, # 0x3c0
24305 6383           B0                     20    mov al, #0x20
24306 6385           EE                           out dx, al
24307 6386           5A                           pop dx
24308 6387           58                           pop ax
24309                       00006388            no_actl_reg2:
24310 6388           C3                           ret
24311                                           ! 2967 endasm
24312                                           !BCC_ENDASM
24313                                           ! 2968 #asm
24314                                           !BCC_ASM
24315                       00000008            _biosfn_write_teletype.flag	set	8
24316                       00000006            _biosfn_write_teletype.attr	set	6
24317                       00000004            _biosfn_write_teletype.page	set	4
24318                       00000002            _biosfn_write_teletype.car	set	2
24319                       00006389            biosfn_read_overscan_border_color:
24320 6389           50                           push ax
24321 638A           53                           push bx
24322 638B           B3                     11    mov bl, #0x11
24323 638D           E8         FFD5              call biosfn_get_single_palette_reg
24324 6390           88F8                         mov al, bh
24325 6392           5B                           pop bx
24326 6393           88C7                         mov bh, al
24327 6395           58                           pop ax
24328 6396           C3                           ret
24329                                           ! 2979 endasm
24330                                           !BCC_ENDASM
24331                                           ! 2980 #asm
24332                                           !BCC_ASM
24333                       00000008            _biosfn_write_teletype.flag	set	8
24334                       00000006            _biosfn_write_teletype.attr	set	6
24335                       00000004            _biosfn_write_teletype.page	set	4
24336                       00000002            _biosfn_write_teletype.car	set	2
24337                       00006397            biosfn_get_all_palette_reg:
24338 6397           50                           push ax
24339 6398           53                           push bx
24340 6399           51                           push cx
24341 639A           52                           push dx
24342 639B           89D3                         mov bx, dx
24343 639D           B1                     00    mov cl, #0x00
24344                       0000639F            get_palette_loop:
24345 639F           BA                   03DA    mov dx, # 0x3da
24346 63A2           EC                           in al, dx
24347 63A3           BA                   03C0    mov dx, # 0x3c0
24348 63A6           88C8                         mov al, cl
24349 63A8           EE                           out dx, al
24350 63A9           BA                   03C1    mov dx, # 0x3c1
24351 63AC           EC                           in al, dx
24352 63AD           26                           seg es
24353 63AE           8807                         mov [bx], al
24354 63B0           43                           inc bx
24355 63B1           FEC1                         inc cl
24356 63B3           80F9                   10    cmp cl, #0x10
24357 63B6           75           E7              jne get_palette_loop
24358 63B8           BA                   03DA    mov dx, # 0x3da
24359 63BB           EC                           in al, dx
24360 63BC           BA                   03C0    mov dx, # 0x3c0
24361 63BF           B0                     11    mov al, #0x11
24362 63C1           EE                           out dx, al
24363 63C2           BA                   03C1    mov dx, # 0x3c1
24364 63C5           EC                           in al, dx
24365 63C6           26                           seg es
24366 63C7           8807                         mov [bx], al
24367 63C9           BA                   03DA    mov dx, # 0x3da
24368 63CC           EC                           in al, dx
24369 63CD           BA                   03C0    mov dx, # 0x3c0
24370 63D0           B0                     20    mov al, #0x20
24371 63D2           EE                           out dx, al
24372 63D3           5A                           pop dx
24373 63D4           59                           pop cx
24374 63D5           5B                           pop bx
24375 63D6           58                           pop ax
24376 63D7           C3                           ret
24377                                           ! 3021 endasm
24378                                           !BCC_ENDASM
24379                                           ! 3022 #asm
24380                                           !BCC_ASM
24381                       00000008            _biosfn_write_teletype.flag	set	8
24382                       00000006            _biosfn_write_teletype.attr	set	6
24383                       00000004            _biosfn_write_teletype.page	set	4
24384                       00000002            _biosfn_write_teletype.car	set	2
24385                       000063D8            biosfn_set_single_dac_reg:
24386 63D8           50                           push ax
24387 63D9           52                           push dx
24388 63DA           BA                   03C8    mov dx, # 0x3c8
24389 63DD           88D8                         mov al, bl
24390 63DF           EE                           out dx, al
24391 63E0           BA                   03C9    mov dx, # 0x3c9
24392 63E3           58                           pop ax
24393 63E4           50                           push ax
24394 63E5           88E0                         mov al, ah
24395 63E7           EE                           out dx, al
24396 63E8           88E8                         mov al, ch
24397 63EA           EE                           out dx, al
24398 63EB           88C8                         mov al, cl
24399 63ED           EE                           out dx, al
24400 63EE           5A                           pop dx
24401 63EF           58                           pop ax
24402 63F0           C3                           ret
24403                                           ! 3041 endasm
24404                                           !BCC_ENDASM
24405                                           ! 3042 #asm
24406                                           !BCC_ASM
24407                       00000008            _biosfn_write_teletype.flag	set	8
24408                       00000006            _biosfn_write_teletype.attr	set	6
24409                       00000004            _biosfn_write_teletype.page	set	4
24410                       00000002            _biosfn_write_teletype.car	set	2
24411                       000063F1            biosfn_set_all_dac_reg:
24412 63F1           50                           push ax
24413 63F2           53                           push bx
24414 63F3           51                           push cx
24415 63F4           52                           push dx
24416 63F5           BA                   03C8    mov dx, # 0x3c8
24417 63F8           88D8                         mov al, bl
24418 63FA           EE                           out dx, al
24419 63FB           5A                           pop dx
24420 63FC           52                           push dx
24421 63FD           89D3                         mov bx, dx
24422 63FF           BA                   03C9    mov dx, # 0x3c9
24423                       00006402            set_dac_loop:
24424 6402           26                           seg es
24425 6403           8A07                         mov al, [bx]
24426 6405           EE                           out dx, al
24427 6406           43                           inc bx
24428 6407           26                           seg es
24429 6408           8A07                         mov al, [bx]
24430 640A           EE                           out dx, al
24431 640B           43                           inc bx
24432 640C           26                           seg es
24433 640D           8A07                         mov al, [bx]
24434 640F           EE                           out dx, al
24435 6410           43                           inc bx
24436 6411           49                           dec cx
24437 6412           75           EE              jnz set_dac_loop
24438 6414           5A                           pop dx
24439 6415           59                           pop cx
24440 6416           5B                           pop bx
24441 6417           58                           pop ax
24442 6418           C3                           ret
24443                                           ! 3075 endasm
24444                                           !BCC_ENDASM
24445                                           ! 3076 #asm
24446                                           !BCC_ASM
24447                       00000008            _biosfn_write_teletype.flag	set	8
24448                       00000006            _biosfn_write_teletype.attr	set	6
24449                       00000004            _biosfn_write_teletype.page	set	4
24450                       00000002            _biosfn_write_teletype.car	set	2
24451                       00006419            biosfn_select_video_dac_color_page:
24452 6419           50                           push ax
24453 641A           53                           push bx
24454 641B           52                           push dx
24455 641C           BA                   03DA    mov dx, # 0x3da
24456 641F           EC                           in al, dx
24457 6420           BA                   03C0    mov dx, # 0x3c0
24458 6423           B0                     10    mov al, #0x10
24459 6425           EE                           out dx, al
24460 6426           BA                   03C1    mov dx, # 0x3c1
24461 6429           EC                           in al, dx
24462 642A           80E3                   01    and bl, #0x01
24463 642D           75           18              jnz set_dac_page
24464 642F           24                     7F    and al, #0x7f
24465                                             ;shl bh, 7
24466 6431           D0E7                         shl bh, 1
24467 6433           D0E7                         shl bh, 1
24468 6435           D0E7                         shl bh, 1
24469 6437           D0E7                         shl bh, 1
24470 6439           D0E7                         shl bh, 1
24471 643B           D0E7                         shl bh, 1
24472 643D           D0E7                         shl bh, 1
24473 643F           08F8                         or al, bh
24474 6441           BA                   03C0    mov dx, # 0x3c0
24475 6444           EE                           out dx, al
24476 6445           EB           1A              jmp set_actl_normal
24477                       00006447            set_dac_page:
24478 6447           50                           push ax
24479 6448           BA                   03DA    mov dx, # 0x3da
24480 644B           EC                           in al, dx
24481 644C           BA                   03C0    mov dx, # 0x3c0
24482 644F           B0                     14    mov al, #0x14
24483 6451           EE                           out dx, al
24484 6452           58                           pop ax
24485 6453           24                     80    and al, #0x80
24486 6455           75           04              jnz set_dac_16_page
24487                                             ;shl bh, 2
24488 6457           D0E7                         shl bh, 1
24489 6459           D0E7                         shl bh, 1
24490                       0000645B            set_dac_16_page:
24491 645B           80E7                   0F    and bh, #0x0f
24492 645E           88F8                         mov al, bh
24493 6460           EE                           out dx, al
24494                       00006461            set_actl_normal:
24495 6461           B0                     20    mov al, #0x20
24496 6463           EE                           out dx, al
24497 6464           5A                           pop dx
24498 6465           5B                           pop bx
24499 6466           58                           pop ax
24500 6467           C3                           ret
24501                                           ! 3127 endasm
24502                                           !BCC_ENDASM
24503                                           ! 3128 #asm
24504                                           !BCC_ASM
24505                       00000008            _biosfn_write_teletype.flag	set	8
24506                       00000006            _biosfn_write_teletype.attr	set	6
24507                       00000004            _biosfn_write_teletype.page	set	4
24508                       00000002            _biosfn_write_teletype.car	set	2
24509                       00006468            biosfn_read_single_dac_reg:
24510 6468           50                           push ax
24511 6469           52                           push dx
24512 646A           BA                   03C7    mov dx, # 0x3c7
24513 646D           88D8                         mov al, bl
24514 646F           EE                           out dx, al
24515 6470           58                           pop ax
24516 6471           88C4                         mov ah, al
24517 6473           BA                   03C9    mov dx, # 0x3c9
24518 6476           EC                           in al, dx
24519 6477           86E0                         xchg al, ah
24520 6479           50                           push ax
24521 647A           EC                           in al, dx
24522 647B           88C5                         mov ch, al
24523 647D           EC                           in al, dx
24524 647E           88C1                         mov cl, al
24525 6480           5A                           pop dx
24526 6481           58                           pop ax
24527 6482           C3                           ret
24528                                           ! 3148 endasm
24529                                           !BCC_ENDASM
24530                                           ! 3149 #asm
24531                                           !BCC_ASM
24532                       00000008            _biosfn_write_teletype.flag	set	8
24533                       00000006            _biosfn_write_teletype.attr	set	6
24534                       00000004            _biosfn_write_teletype.page	set	4
24535                       00000002            _biosfn_write_teletype.car	set	2
24536                       00006483            biosfn_read_all_dac_reg:
24537 6483           50                           push ax
24538 6484           53                           push bx
24539 6485           51                           push cx
24540 6486           52                           push dx
24541 6487           BA                   03C7    mov dx, # 0x3c7
24542 648A           88D8                         mov al, bl
24543 648C           EE                           out dx, al
24544 648D           5A                           pop dx
24545 648E           52                           push dx
24546 648F           89D3                         mov bx, dx
24547 6491           BA                   03C9    mov dx, # 0x3c9
24548                       00006494            read_dac_loop:
24549 6494           EC                           in al, dx
24550 6495           26                           seg es
24551 6496           8807                         mov [bx], al
24552 6498           43                           inc bx
24553 6499           EC                           in al, dx
24554 649A           26                           seg es
24555 649B           8807                         mov [bx], al
24556 649D           43                           inc bx
24557 649E           EC                           in al, dx
24558 649F           26                           seg es
24559 64A0           8807                         mov [bx], al
24560 64A2           43                           inc bx
24561 64A3           49                           dec cx
24562 64A4           75           EE              jnz read_dac_loop
24563 64A6           5A                           pop dx
24564 64A7           59                           pop cx
24565 64A8           5B                           pop bx
24566 64A9           58                           pop ax
24567 64AA           C3                           ret
24568                                           ! 3182 endasm
24569                                           !BCC_ENDASM
24570                                           ! 3183 #asm
24571                                           !BCC_ASM
24572                       00000008            _biosfn_write_teletype.flag	set	8
24573                       00000006            _biosfn_write_teletype.attr	set	6
24574                       00000004            _biosfn_write_teletype.page	set	4
24575                       00000002            _biosfn_write_teletype.car	set	2
24576                       000064AB            biosfn_set_pel_mask:
24577 64AB           50                           push ax
24578 64AC           52                           push dx
24579 64AD           BA                   03C6    mov dx, # 0x3c6
24580 64B0           88D8                         mov al, bl
24581 64B2           EE                           out dx, al
24582 64B3           5A                           pop dx
24583 64B4           58                           pop ax
24584 64B5           C3                           ret
24585                                           ! 3193 endasm
24586                                           !BCC_ENDASM
24587                                           ! 3194 #asm
24588                                           !BCC_ASM
24589                       00000008            _biosfn_write_teletype.flag	set	8
24590                       00000006            _biosfn_write_teletype.attr	set	6
24591                       00000004            _biosfn_write_teletype.page	set	4
24592                       00000002            _biosfn_write_teletype.car	set	2
24593                       000064B6            biosfn_read_pel_mask:
24594 64B6           50                           push ax
24595 64B7           52                           push dx
24596 64B8           BA                   03C6    mov dx, # 0x3c6
24597 64BB           EC                           in al, dx
24598 64BC           88C3                         mov bl, al
24599 64BE           5A                           pop dx
24600 64BF           58                           pop ax
24601 64C0           C3                           ret
24602                                           ! 3204 endasm
24603                                           !BCC_ENDASM
24604                                           ! 3205 #asm
24605                                           !BCC_ASM
24606                       00000008            _biosfn_write_teletype.flag	set	8
24607                       00000006            _biosfn_write_teletype.attr	set	6
24608                       00000004            _biosfn_write_teletype.page	set	4
24609                       00000002            _biosfn_write_teletype.car	set	2
24610                       000064C1            biosfn_read_video_dac_state:
24611 64C1           50                           push ax
24612 64C2           52                           push dx
24613 64C3           BA                   03DA    mov dx, # 0x3da
24614 64C6           EC                           in al, dx
24615 64C7           BA                   03C0    mov dx, # 0x3c0
24616 64CA           B0                     10    mov al, #0x10
24617 64CC           EE                           out dx, al
24618 64CD           BA                   03C1    mov dx, # 0x3c1
24619 64D0           EC                           in al, dx
24620 64D1           88C3                         mov bl, al
24621                                             ;shr bl, 7
24622 64D3           D0EB                         shr bl, 1
24623 64D5           D0EB                         shr bl, 1
24624 64D7           D0EB                         shr bl, 1
24625 64D9           D0EB                         shr bl, 1
24626 64DB           D0EB                         shr bl, 1
24627 64DD           D0EB                         shr bl, 1
24628 64DF           D0EB                         shr bl, 1
24629 64E1           BA                   03DA    mov dx, # 0x3da
24630 64E4           EC                           in al, dx
24631 64E5           BA                   03C0    mov dx, # 0x3c0
24632 64E8           B0                     14    mov al, #0x14
24633 64EA           EE                           out dx, al
24634 64EB           BA                   03C1    mov dx, # 0x3c1
24635 64EE           EC                           in al, dx
24636 64EF           88C7                         mov bh, al
24637 64F1           80E7                   0F    and bh, #0x0f
24638 64F4           F6C3                   01    test bl, #0x01
24639 64F7           75           04              jnz get_dac_16_page
24640                                             ;shr bh, 2
24641 64F9           D0EF                         shr bh, 1
24642 64FB           D0EF                         shr bh, 1
24643                       000064FD            get_dac_16_page:
24644 64FD           BA                   03DA    mov dx, # 0x3da
24645 6500           EC                           in al, dx
24646 6501           BA                   03C0    mov dx, # 0x3c0
24647 6504           B0                     20    mov al, #0x20
24648 6506           EE                           out dx, al
24649 6507           5A                           pop dx
24650 6508           58                           pop ax
24651 6509           C3                           ret
24652                                           ! 3248 endasm
24653                                           !BCC_ENDASM
24654                                           ! 3249 static void biosfn_perform_gray_scale_summing (start,count)
24655                                           ! Register BX used in function biosfn_write_teletype
24656                                           ! 3250 Bit16u start;Bit16u count;
24657                       0000650A            _biosfn_perform_gray_scale_summing:
24658                                           !BCC_EOS
24659                                           !BCC_EOS
24660                                           ! 3251 {Bit8u r,g,b;
24661                                           !BCC_EOS
24662                                           ! 3252  Bit16u i;
24663                                           !BCC_EOS
24664                                           ! 3253  Bit16u index;
24665                                           !BCC_EOS
24666                                           ! 3254  inb(0x3da);
24667 650A           55                         push	bp
24668 650B           89E5                       mov	bp,sp
24669 650D           83C4                   F8  add	sp,*-8
24670                                           ! Debug: list int = const $3DA (used reg = )
24671 6510           B8                   03DA  mov	ax,#$3DA
24672 6513           50                         push	ax
24673                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24674 6514           E8         181A            call	_inb
24675 6517           44                         inc	sp
24676 6518           44                         inc	sp
24677                                           !BCC_EOS
24678                                           ! 3255  outb(0x3c0,0x00);
24679                                           ! Debug: list int = const 0 (used reg = )
24680 6519           31C0                       xor	ax,ax
24681 651B           50                         push	ax
24682                                           ! Debug: list int = const $3C0 (used reg = )
24683 651C           B8                   03C0  mov	ax,#$3C0
24684 651F           50                         push	ax
24685                                           ! Debug: func () void = outb+0 (used reg = )
24686 6520           E8         1824            call	_outb
24687 6523           83C4                   04  add	sp,*4
24688                                           !BCC_EOS
24689                                           ! 3256  for( index = 0; index < count; index++ )
24690                                           ! Debug: eq int = const 0 to unsigned short index = [S+$A-$A] (used reg = )
24691 6526           31C0                       xor	ax,ax
24692 6528           8946         F8            mov	-8[bp],ax
24693                                           !BCC_EOS
24694                                           !BCC_EOS
24695                                           ! 3257   {
24696 652B           E9         00BE            br 	.207
24697                       0000652E            .208:
24698                                           ! 3258    outb(0x3c7,start);
24699                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24700 652E           FF76         04            push	4[bp]
24701                                           ! Debug: list int = const $3C7 (used reg = )
24702 6531           B8                   03C7  mov	ax,#$3C7
24703 6534           50                         push	ax
24704                                           ! Debug: func () void = outb+0 (used reg = )
24705 6535           E8         180F            call	_outb
24706 6538           83C4                   04  add	sp,*4
24707                                           !BCC_EOS
24708                                           ! 3259    r=inb( 0x3c9 );
24709                                           ! Debug: list int = const $3C9 (used reg = )
24710 653B           B8                   03C9  mov	ax,#$3C9
24711 653E           50                         push	ax
24712                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24713 653F           E8         17EF            call	_inb
24714 6542           44                         inc	sp
24715 6543           44                         inc	sp
24716                                           ! Debug: eq unsigned char = al+0 to unsigned char r = [S+$A-3] (used reg = )
24717 6544           8846         FF            mov	-1[bp],al
24718                                           !BCC_EOS
24719                                           ! 3260    g=inb( 0x3c9 );
24720                                           ! Debug: list int = const $3C9 (used reg = )
24721 6547           B8                   03C9  mov	ax,#$3C9
24722 654A           50                         push	ax
24723                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24724 654B           E8         17E3            call	_inb
24725 654E           44                         inc	sp
24726 654F           44                         inc	sp
24727                                           ! Debug: eq unsigned char = al+0 to unsigned char g = [S+$A-4] (used reg = )
24728 6550           8846         FE            mov	-2[bp],al
24729                                           !BCC_EOS
24730                                           ! 3261    b=inb( 0x3c9 );
24731                                           ! Debug: list int = const $3C9 (used reg = )
24732 6553           B8                   03C9  mov	ax,#$3C9
24733 6556           50                         push	ax
24734                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24735 6557           E8         17D7            call	_inb
24736 655A           44                         inc	sp
24737 655B           44                         inc	sp
24738                                           ! Debug: eq unsigned char = al+0 to unsigned char b = [S+$A-5] (used reg = )
24739 655C           8846         FD            mov	-3[bp],al
24740                                           !BCC_EOS
24741                                           ! 3262    i = ( ( 77*r + 151*g + 28*b ) + 0x80 ) >> 8;
24742                                           ! Debug: mul unsigned char b = [S+$A-5] to int = const $1C (used reg = )
24743                                           ! Debug: expression subtree swapping
24744 655F           8A46         FD            mov	al,-3[bp]
24745 6562           30E4                       xor	ah,ah
24746 6564           B9                   001C  mov	cx,*$1C
24747 6567           F7E9                       imul	cx
24748 6569           50                         push	ax
24749                                           ! Debug: mul unsigned char g = [S+$C-4] to int = const $97 (used reg = )
24750                                           ! Debug: expression subtree swapping
24751 656A           8A46         FE            mov	al,-2[bp]
24752 656D           30E4                       xor	ah,ah
24753 656F           B9                   0097  mov	cx,#$97
24754 6572           F7E9                       imul	cx
24755 6574           50                         push	ax
24756                                           ! Debug: mul unsigned char r = [S+$E-3] to int = const $4D (used reg = )
24757                                           ! Debug: expression subtree swapping
24758 6575           8A46         FF            mov	al,-1[bp]
24759 6578           30E4                       xor	ah,ah
24760 657A           B9                   004D  mov	cx,*$4D
24761 657D           F7E9                       imul	cx
24762                                           ! Debug: add unsigned int (temp) = [S+$E-$E] to unsigned int = ax+0 (used reg = )
24763 657F           0346         F4            add	ax,-$C[bp]
24764 6582           44                         inc	sp
24765 6583           44                         inc	sp
24766                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
24767 6584           0346         F6            add	ax,-$A[bp]
24768 6587           44                         inc	sp
24769 6588           44                         inc	sp
24770                                           ! Debug: add int = const $80 to unsigned int = ax+0 (used reg = )
24771                                           ! Debug: sr int = const 8 to unsigned int = ax+$80 (used reg = )
24772 6589           05                   0080  add	ax,#$80
24773 658C           88E0                       mov	al,ah
24774 658E           30E4                       xor	ah,ah
24775                                           ! Debug: eq unsigned int = ax+0 to unsigned short i = [S+$A-8] (used reg = )
24776 6590           8946         FA            mov	-6[bp],ax
24777                                           !BCC_EOS
24778                                           ! 3263    if(i>0x3f)i=0x3f;
24779                                           ! Debug: gt int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24780 6593           8B46         FA            mov	ax,-6[bp]
24781 6596           3D                   003F  cmp	ax,*$3F
24782 6599           76           06            jbe 	.209
24783                       0000659B            .20A:
24784                                           ! Debug: eq int = const $3F to unsigned short i = [S+$A-8] (used reg = )
24785 659B           B8                   003F  mov	ax,*$3F
24786 659E           8946         FA            mov	-6[bp],ax
24787                                           !BCC_EOS
24788                                           ! 3264    outb(0x3c8,start);
24789                       000065A1            .209:
24790                                           ! Debug: list unsigned short start = [S+$A+2] (used reg = )
24791 65A1           FF76         04            push	4[bp]
24792                                           ! Debug: list int = const $3C8 (used reg = )
24793 65A4           B8                   03C8  mov	ax,#$3C8
24794 65A7           50                         push	ax
24795                                           ! Debug: func () void = outb+0 (used reg = )
24796 65A8           E8         179C            call	_outb
24797 65AB           83C4                   04  add	sp,*4
24798                                           !BCC_EOS
24799                                           ! 3265    outb( 0x3c9, i&0xff );
24800                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24801 65AE           8A46         FA            mov	al,-6[bp]
24802                                           ! Debug: list unsigned char = al+0 (used reg = )
24803 65B1           30E4                       xor	ah,ah
24804 65B3           50                         push	ax
24805                                           ! Debug: list int = const $3C9 (used reg = )
24806 65B4           B8                   03C9  mov	ax,#$3C9
24807 65B7           50                         push	ax
24808                                           ! Debug: func () void = outb+0 (used reg = )
24809 65B8           E8         178C            call	_outb
24810 65BB           83C4                   04  add	sp,*4
24811                                           !BCC_EOS
24812                                           ! 3266    outb( 0x3c9, i&0xff );
24813                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24814 65BE           8A46         FA            mov	al,-6[bp]
24815                                           ! Debug: list unsigned char = al+0 (used reg = )
24816 65C1           30E4                       xor	ah,ah
24817 65C3           50                         push	ax
24818                                           ! Debug: list int = const $3C9 (used reg = )
24819 65C4           B8                   03C9  mov	ax,#$3C9
24820 65C7           50                         push	ax
24821                                           ! Debug: func () void = outb+0 (used reg = )
24822 65C8           E8         177C            call	_outb
24823 65CB           83C4                   04  add	sp,*4
24824                                           !BCC_EOS
24825                                           ! 3267    outb( 0x3c9, i&0xff );
24826                                           ! Debug: and int = const $FF to unsigned short i = [S+$A-8] (used reg = )
24827 65CE           8A46         FA            mov	al,-6[bp]
24828                                           ! Debug: list unsigned char = al+0 (used reg = )
24829 65D1           30E4                       xor	ah,ah
24830 65D3           50                         push	ax
24831                                           ! Debug: list int = const $3C9 (used reg = )
24832 65D4           B8                   03C9  mov	ax,#$3C9
24833 65D7           50                         push	ax
24834                                           ! Debug: func () void = outb+0 (used reg = )
24835 65D8           E8         176C            call	_outb
24836 65DB           83C4                   04  add	sp,*4
24837                                           !BCC_EOS
24838                                           ! 3268    start++;
24839                                           ! Debug: postinc unsigned short start = [S+$A+2] (used reg = )
24840 65DE           8B46         04            mov	ax,4[bp]
24841 65E1           40                         inc	ax
24842 65E2           8946         04            mov	4[bp],ax
24843                                           !BCC_EOS
24844                                           ! 3269   }
24845                                           ! 3270  inb(0x3da);
24846                       000065E5            .206:
24847                                           ! Debug: postinc unsigned short index = [S+$A-$A] (used reg = )
24848 65E5           8B46         F8            mov	ax,-8[bp]
24849 65E8           40                         inc	ax
24850 65E9           8946         F8            mov	-8[bp],ax
24851                       000065EC            .207:
24852                                           ! Debug: lt unsigned short count = [S+$A+4] to unsigned short index = [S+$A-$A] (used reg = )
24853 65EC           8B46         F8            mov	ax,-8[bp]
24854 65EF           3B46         06            cmp	ax,6[bp]
24855 65F2   7303    E9         FF37            blo 	.208
24856                       000065F7            .20B:
24857                       000065F7            .205:
24858                                           ! Debug: list int = const $3DA (used reg = )
24859 65F7           B8                   03DA  mov	ax,#$3DA
24860 65FA           50                         push	ax
24861                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24862 65FB           E8         1733            call	_inb
24863 65FE           44                         inc	sp
24864 65FF           44                         inc	sp
24865                                           !BCC_EOS
24866                                           ! 3271  outb(0x3c0,0x20);
24867                                           ! Debug: list int = const $20 (used reg = )
24868 6600           B8                   0020  mov	ax,*$20
24869 6603           50                         push	ax
24870                                           ! Debug: list int = const $3C0 (used reg = )
24871 6604           B8                   03C0  mov	ax,#$3C0
24872 6607           50                         push	ax
24873                                           ! Debug: func () void = outb+0 (used reg = )
24874 6608           E8         173C            call	_outb
24875 660B           83C4                   04  add	sp,*4
24876                                           !BCC_EOS
24877                                           ! 3272 }
24878 660E           89EC                       mov	sp,bp
24879 6610           5D                         pop	bp
24880 6611           C3                         ret
24881                                           ! 3273 static void get_font_access()
24882                                           ! 3274 {
24883                       00006612            _get_font_access:
24884                                           ! 3275 #asm
24885                                           !BCC_ASM
24886 6612           BA                   03C4   mov dx, # 0x3c4
24887 6615           B8                   0100   mov ax, #0x0100
24888 6618           EF                          out dx, ax
24889 6619           B8                   0402   mov ax, #0x0402
24890 661C           EF                          out dx, ax
24891 661D           B8                   0704   mov ax, #0x0704
24892 6620           EF                          out dx, ax
24893 6621           B8                   0300   mov ax, #0x0300
24894 6624           EF                          out dx, ax
24895 6625           BA                   03CE   mov dx, # 0x3ce
24896 6628           B8                   0204   mov ax, #0x0204
24897 662B           EF                          out dx, ax
24898 662C           B8                   0005   mov ax, #0x0005
24899 662F           EF                          out dx, ax
24900 6630           B8                   0406   mov ax, #0x0406
24901 6633           EF                          out dx, ax
24902                                           ! 3292 endasm
24903                                           !BCC_ENDASM
24904                                           ! 3293 }
24905 6634           C3                         ret
24906                                           ! 3294 static void release_font_access()
24907                                           ! 3295 {
24908                       00006635            _release_font_access:
24909                                           ! 3296 #asm
24910                                           !BCC_ASM
24911 6635           BA                   03C4   mov dx, # 0x3c4
24912 6638           B8                   0100   mov ax, #0x0100
24913 663B           EF                          out dx, ax
24914 663C           B8                   0302   mov ax, #0x0302
24915 663F           EF                          out dx, ax
24916 6640           B8                   0304   mov ax, #0x0304
24917 6643           EF                          out dx, ax
24918 6644           B8                   0300   mov ax, #0x0300
24919 6647           EF                          out dx, ax
24920 6648           BA                   03CC   mov dx, # 0x3cc
24921 664B           EC                          in al, dx
24922 664C           24                     01   and al, #0x01
24923                                            ;shl al, 2
24924 664E           D0E0                        shl al, 1
24925 6650           D0E0                        shl al, 1
24926 6652           0C                     0A   or al, #0x0a
24927 6654           88C4                        mov ah, al
24928 6656           B0                     06   mov al, #0x06
24929 6658           BA                   03CE   mov dx, # 0x3ce
24930 665B           EF                          out dx, ax
24931 665C           B8                   0004   mov ax, #0x0004
24932 665F           EF                          out dx, ax
24933 6660           B8                   1005   mov ax, #0x1005
24934 6663           EF                          out dx, ax
24935                                           ! 3321 endasm
24936                                           !BCC_ENDASM
24937                                           ! 3322 }
24938 6664           C3                         ret
24939                                           ! 3323 #asm
24940                                           !BCC_ASM
24941                       00006665            idiv_u:
24942 6665           31D2                         xor dx,dx
24943 6667           F7F3                         div bx
24944 6669           C3                           ret
24945                                           ! 3328 endasm
24946                                           !BCC_ENDASM
24947                                           ! 3329 static void set_scan_lines(lines) Bit8u lines;
24948                       0000666A            _set_scan_lines:
24949                                           !BCC_EOS
24950                                           ! 3330 {
24951                                           ! 3331  Bit16u crtc_addr,cols,page,vde;
24952                                           !BCC_EOS
24953                                           ! 3332  Bit8u crtc_r9,ovl,rows;
24954                                           !BCC_EOS
24955                                           ! 3333  crtc_addr = read_word(0x40,0x63);
24956 666A           55                         push	bp
24957 666B           89E5                       mov	bp,sp
24958 666D           83C4                   F4  add	sp,*-$C
24959                                           ! Debug: list int = const $63 (used reg = )
24960 6670           B8                   0063  mov	ax,*$63
24961 6673           50                         push	ax
24962                                           ! Debug: list int = const $40 (used reg = )
24963 6674           B8                   0040  mov	ax,*$40
24964 6677           50                         push	ax
24965                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
24966 6678           E8         1673            call	_read_word
24967 667B           83C4                   04  add	sp,*4
24968                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24969 667E           8946         FE            mov	-2[bp],ax
24970                                           !BCC_EOS
24971                                           ! 3334  outb(crtc_addr, 0x09);
24972                                           ! Debug: list int = const 9 (used reg = )
24973 6681           B8                   0009  mov	ax,*9
24974 6684           50                         push	ax
24975                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
24976 6685           FF76         FE            push	-2[bp]
24977                                           ! Debug: func () void = outb+0 (used reg = )
24978 6688           E8         16BC            call	_outb
24979 668B           83C4                   04  add	sp,*4
24980                                           !BCC_EOS
24981                                           ! 3335  crtc_r9 = inb(crtc_addr+1);
24982                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
24983 668E           8B46         FE            mov	ax,-2[bp]
24984                                           ! Debug: list unsigned int = ax+1 (used reg = )
24985 6691           40                         inc	ax
24986 6692           50                         push	ax
24987                                           ! Debug: func () unsigned char = inb+0 (used reg = )
24988 6693           E8         169B            call	_inb
24989 6696           44                         inc	sp
24990 6697           44                         inc	sp
24991                                           ! Debug: eq unsigned char = al+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
24992 6698           8846         F7            mov	-9[bp],al
24993                                           !BCC_EOS
24994                                           ! 3336  crtc_r9 = (crtc_r9 & 0xe0) | (lines - 1);
24995                                           ! Debug: sub int = const 1 to unsigned char lines = [S+$E+2] (used reg = )
24996 669B           8A46         04            mov	al,4[bp]
24997 669E           30E4                       xor	ah,ah
24998 66A0           48                         dec	ax
24999 66A1           50                         push	ax
25000                                           ! Debug: and int = const $E0 to unsigned char crtc_r9 = [S+$10-$B] (used reg = )
25001 66A2           8A46         F7            mov	al,-9[bp]
25002 66A5           24                     E0  and	al,#$E0
25003                                           ! Debug: or unsigned int (temp) = [S+$10-$10] to unsigned char = al+0 (used reg = )
25004 66A7           30E4                       xor	ah,ah
25005 66A9           0B46         F2            or	ax,-$E[bp]
25006 66AC           44                         inc	sp
25007 66AD           44                         inc	sp
25008                                           ! Debug: eq unsigned int = ax+0 to unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25009 66AE           8846         F7            mov	-9[bp],al
25010                                           !BCC_EOS
25011                                           ! 3337  outb(crtc_addr+1, crtc_r9);
25012                                           ! Debug: list unsigned char crtc_r9 = [S+$E-$B] (used reg = )
25013 66B1           8A46         F7            mov	al,-9[bp]
25014 66B4           30E4                       xor	ah,ah
25015 66B6           50                         push	ax
25016                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$10-4] (used reg = )
25017 66B7           8B46         FE            mov	ax,-2[bp]
25018                                           ! Debug: list unsigned int = ax+1 (used reg = )
25019 66BA           40                         inc	ax
25020 66BB           50                         push	ax
25021                                           ! Debug: func () void = outb+0 (used reg = )
25022 66BC           E8         1688            call	_outb
25023 66BF           83C4                   04  add	sp,*4
25024                                           !BCC_EOS
25025                                           ! 3338  if(lines==8)
25026                                           ! Debug: logeq int = const 8 to unsigned char lines = [S+$E+2] (used reg = )
25027 66C2           8A46         04            mov	al,4[bp]
25028 66C5           3C                     08  cmp	al,*8
25029 66C7           75           10            jne 	.20C
25030                       000066C9            .20D:
25031                                           ! 3339   {
25032                                           ! 3340    biosfn_set_cursor_shape(0x06,0x07);
25033                                           ! Debug: list int = const 7 (used reg = )
25034 66C9           B8                   0007  mov	ax,*7
25035 66CC           50                         push	ax
25036                                           ! Debug: list int = const 6 (used reg = )
25037 66CD           B8                   0006  mov	ax,*6
25038 66D0           50                         push	ax
25039                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25040 66D1           E8         DAE5            call	_biosfn_set_cursor_shape
25041 66D4           83C4                   04  add	sp,*4
25042                                           !BCC_EOS
25043                                           ! 3341   }
25044                                           ! 3342  else
25045                                           ! 3343   {
25046 66D7           EB           18            jmp .20E
25047                       000066D9            .20C:
25048                                           ! 3344    biosfn_set_cursor_shape(lines-4,lines-3);
25049                                           ! Debug: sub int = const 3 to unsigned char lines = [S+$E+2] (used reg = )
25050 66D9           8A46         04            mov	al,4[bp]
25051 66DC           30E4                       xor	ah,ah
25052                                           ! Debug: list unsigned int = ax-3 (used reg = )
25053 66DE           05                   FFFD  add	ax,*-3
25054 66E1           50                         push	ax
25055                                           ! Debug: sub int = const 4 to unsigned char lines = [S+$10+2] (used reg = )
25056 66E2           8A46         04            mov	al,4[bp]
25057 66E5           30E4                       xor	ah,ah
25058                                           ! Debug: list unsigned int = ax-4 (used reg = )
25059 66E7           05                   FFFC  add	ax,*-4
25060 66EA           50                         push	ax
25061                                           ! Debug: func () void = biosfn_set_cursor_shape+0 (used reg = )
25062 66EB           E8         DACB            call	_biosfn_set_cursor_shape
25063 66EE           83C4                   04  add	sp,*4
25064                                           !BCC_EOS
25065                                           ! 3345   }
25066                                           ! 3346  write_word(0x40,0x85, lines);
25067                       000066F1            .20E:
25068                                           ! Debug: list unsigned char lines = [S+$E+2] (used reg = )
25069 66F1           8A46         04            mov	al,4[bp]
25070 66F4           30E4                       xor	ah,ah
25071 66F6           50                         push	ax
25072                                           ! Debug: list int = const $85 (used reg = )
25073 66F7           B8                   0085  mov	ax,#$85
25074 66FA           50                         push	ax
25075                                           ! Debug: list int = const $40 (used reg = )
25076 66FB           B8                   0040  mov	ax,*$40
25077 66FE           50                         push	ax
25078                                           ! Debug: func () void = write_word+0 (used reg = )
25079 66FF           E8         1617            call	_write_word
25080 6702           83C4                   06  add	sp,*6
25081                                           !BCC_EOS
25082                                           ! 3347  outb(crtc_addr, 0x12);
25083                                           ! Debug: list int = const $12 (used reg = )
25084 6705           B8                   0012  mov	ax,*$12
25085 6708           50                         push	ax
25086                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25087 6709           FF76         FE            push	-2[bp]
25088                                           ! Debug: func () void = outb+0 (used reg = )
25089 670C           E8         1638            call	_outb
25090 670F           83C4                   04  add	sp,*4
25091                                           !BCC_EOS
25092                                           ! 3348  vde = inb(crtc_addr+1);
25093                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25094 6712           8B46         FE            mov	ax,-2[bp]
25095                                           ! Debug: list unsigned int = ax+1 (used reg = )
25096 6715           40                         inc	ax
25097 6716           50                         push	ax
25098                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25099 6717           E8         1617            call	_inb
25100 671A           44                         inc	sp
25101 671B           44                         inc	sp
25102                                           ! Debug: eq unsigned char = al+0 to unsigned short vde = [S+$E-$A] (used reg = )
25103 671C           30E4                       xor	ah,ah
25104 671E           8946         F8            mov	-8[bp],ax
25105                                           !BCC_EOS
25106                                           ! 3349  outb(crtc_addr, 0x07);
25107                                           ! Debug: list int = const 7 (used reg = )
25108 6721           B8                   0007  mov	ax,*7
25109 6724           50                         push	ax
25110                                           ! Debug: list unsigned short crtc_addr = [S+$10-4] (used reg = )
25111 6725           FF76         FE            push	-2[bp]
25112                                           ! Debug: func () void = outb+0 (used reg = )
25113 6728           E8         161C            call	_outb
25114 672B           83C4                   04  add	sp,*4
25115                                           !BCC_EOS
25116                                           ! 3350  ovl = inb(crtc_addr+1);
25117                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-4] (used reg = )
25118 672E           8B46         FE            mov	ax,-2[bp]
25119                                           ! Debug: list unsigned int = ax+1 (used reg = )
25120 6731           40                         inc	ax
25121 6732           50                         push	ax
25122                                           ! Debug: func () unsigned char = inb+0 (used reg = )
25123 6733           E8         15FB            call	_inb
25124 6736           44                         inc	sp
25125 6737           44                         inc	sp
25126                                           ! Debug: eq unsigned char = al+0 to unsigned char ovl = [S+$E-$C] (used reg = )
25127 6738           8846         F6            mov	-$A[bp],al
25128                                           !BCC_EOS
25129                                           ! 3351  vde += (((ovl & 0x02) << 7) + ((ovl & 0x40) << 3) + 1);
25130                                           ! Debug: and int = const $40 to unsigned char ovl = [S+$E-$C] (used reg = )
25131 673B           8A46         F6            mov	al,-$A[bp]
25132 673E           24                     40  and	al,*$40
25133                                           ! Debug: sl int = const 3 to unsigned char = al+0 (used reg = )
25134 6740           30E4                       xor	ah,ah
25135 6742           B1                     03  mov	cl,*3
25136 6744           D3E0                       shl	ax,cl
25137 6746           50                         push	ax
25138                                           ! Debug: and int = const 2 to unsigned char ovl = [S+$10-$C] (used reg = )
25139 6747           8A46         F6            mov	al,-$A[bp]
25140 674A           24                     02  and	al,*2
25141                                           ! Debug: sl int = const 7 to unsigned char = al+0 (used reg = )
25142 674C           30E4                       xor	ah,ah
25143 674E           B1                     07  mov	cl,*7
25144 6750           D3E0                       shl	ax,cl
25145                                           ! Debug: add unsigned int (temp) = [S+$10-$10] to unsigned int = ax+0 (used reg = )
25146 6752           0346         F2            add	ax,-$E[bp]
25147 6755           44                         inc	sp
25148 6756           44                         inc	sp
25149                                           ! Debug: add int = const 1 to unsigned int = ax+0 (used reg = )
25150                                           ! Debug: addab unsigned int = ax+1 to unsigned short vde = [S+$E-$A] (used reg = )
25151 6757           40                         inc	ax
25152 6758           0346         F8            add	ax,-8[bp]
25153 675B           8946         F8            mov	-8[bp],ax
25154                                           !BCC_EOS
25155                                           ! 3352  rows = vde / lines;
25156                                           ! Debug: div unsigned char lines = [S+$E+2] to unsigned short vde = [S+$E-$A] (used reg = )
25157 675E           8A46         04            mov	al,4[bp]
25158 6761           30E4                       xor	ah,ah
25159 6763           89C3                       mov	bx,ax
25160 6765           8B46         F8            mov	ax,-8[bp]
25161 6768           E8         FEFA            call	idiv_u
25162                                           ! Debug: eq unsigned int = ax+0 to unsigned char rows = [S+$E-$D] (used reg = )
25163 676B           8846         F5            mov	-$B[bp],al
25164                                           !BCC_EOS
25165                                           ! 3353  write_byte(0x40,0x84, rows-1);
25166                                           ! Debug: sub int = const 1 to unsigned char rows = [S+$E-$D] (used reg = )
25167 676E           8A46         F5            mov	al,-$B[bp]
25168 6771           30E4                       xor	ah,ah
25169                                           ! Debug: list unsigned int = ax-1 (used reg = )
25170 6773           48                         dec	ax
25171 6774           50                         push	ax
25172                                           ! Debug: list int = const $84 (used reg = )
25173 6775           B8                   0084  mov	ax,#$84
25174 6778           50                         push	ax
25175                                           ! Debug: list int = const $40 (used reg = )
25176 6779           B8                   0040  mov	ax,*$40
25177 677C           50                         push	ax
25178                                           ! Debug: func () void = write_byte+0 (used reg = )
25179 677D           E8         1581            call	_write_byte
25180 6780           83C4                   06  add	sp,*6
25181                                           !BCC_EOS
25182                                           ! 3354  cols = read_word(0x40,0x4A);
25183                                           ! Debug: list int = const $4A (used reg = )
25184 6783           B8                   004A  mov	ax,*$4A
25185 6786           50                         push	ax
25186                                           ! Debug: list int = const $40 (used reg = )
25187 6787           B8                   0040  mov	ax,*$40
25188 678A           50                         push	ax
25189                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25190 678B           E8         1560            call	_read_word
25191 678E           83C4                   04  add	sp,*4
25192                                           ! Debug: eq unsigned short = ax+0 to unsigned short cols = [S+$E-6] (used reg = )
25193 6791           8946         FC            mov	-4[bp],ax
25194                                           !BCC_EOS
25195                                           ! 3355  write_word(0x40,0x4C, rows * cols * 2);
25196                                           ! Debug: mul unsigned short cols = [S+$E-6] to unsigned char rows = [S+$E-$D] (used reg = )
25197 6794           8A46         F5            mov	al,-$B[bp]
25198 6797           30E4                       xor	ah,ah
25199 6799           8B4E         FC            mov	cx,-4[bp]
25200 679C           F7E9                       imul	cx
25201                                           ! Debug: mul int = const 2 to unsigned int = ax+0 (used reg = )
25202 679E           D1E0                       shl	ax,*1
25203                                           ! Debug: list unsigned int = ax+0 (used reg = )
25204 67A0           50                         push	ax
25205                                           ! Debug: list int = const $4C (used reg = )
25206 67A1           B8                   004C  mov	ax,*$4C
25207 67A4           50                         push	ax
25208                                           ! Debug: list int = const $40 (used reg = )
25209 67A5           B8                   0040  mov	ax,*$40
25210 67A8           50                         push	ax
25211                                           ! Debug: func () void = write_word+0 (used reg = )
25212 67A9           E8         156D            call	_write_word
25213 67AC           83C4                   06  add	sp,*6
25214                                           !BCC_EOS
25215                                           ! 3356 }
25216 67AF           89EC                       mov	sp,bp
25217 67B1           5D                         pop	bp
25218 67B2           C3                         ret
25219                                           ! 3357 static void biosfn_load_text_user_pat (AL,ES,BP,CX,DX,BL,BH) Bit8u AL;Bit16u ES;Bit16u BP;Bit16u CX;Bit16u DX;Bit8u BL;Bit8u BH;
25220                                           ! Register BX used in function set_scan_lines
25221                       000067B3            _biosfn_load_text_user_pat:
25222                                           !BCC_EOS
25223                                           !BCC_EOS
25224                                           !BCC_EOS
25225                                           !BCC_EOS
25226                                           !BCC_EOS
25227                                           !BCC_EOS
25228                                           !BCC_EOS
25229                                           ! 3358 {
25230                                           ! 3359  Bit16u blockaddr,dest,i,src;
25231                                           !BCC_EOS
25232                                           ! 3360  get_font_access();
25233 67B3           55                         push	bp
25234 67B4           89E5                       mov	bp,sp
25235 67B6           83C4                   F8  add	sp,*-8
25236                                           ! Debug: func () void = get_font_access+0 (used reg = )
25237 67B9           E8         FE56            call	_get_font_access
25238                                           !BCC_EOS
25239                                           ! 3361  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25240                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+$C] (used reg = )
25241 67BC           8A46         0E            mov	al,$E[bp]
25242 67BF           24                     04  and	al,*4
25243                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25244 67C1           30E4                       xor	ah,ah
25245 67C3           88C4                       mov	ah,al
25246 67C5           30C0                       xor	al,al
25247 67C7           B1                     03  mov	cl,*3
25248 67C9           D3E0                       shl	ax,cl
25249 67CB           50                         push	ax
25250                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+$C] (used reg = )
25251 67CC           8A46         0E            mov	al,$E[bp]
25252 67CF           24                     03  and	al,*3
25253                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25254 67D1           30E4                       xor	ah,ah
25255 67D3           88C4                       mov	ah,al
25256 67D5           30C0                       xor	al,al
25257 67D7           B1                     06  mov	cl,*6
25258 67D9           D3E0                       shl	ax,cl
25259                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25260 67DB           0346         F6            add	ax,-$A[bp]
25261 67DE           44                         inc	sp
25262 67DF           44                         inc	sp
25263                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25264 67E0           8946         FE            mov	-2[bp],ax
25265                                           !BCC_EOS
25266                                           ! 3362  for(i=0;i<CX;i++)
25267                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25268 67E3           31C0                       xor	ax,ax
25269 67E5           8946         FA            mov	-6[bp],ax
25270                                           !BCC_EOS
25271                                           !BCC_EOS
25272                                           ! 3363   {
25273 67E8           EB           44            jmp .211
25274                       000067EA            .212:
25275                                           ! 3364    src = BP + i * BH;
25276                                           ! Debug: mul unsigned char BH = [S+$A+$E] to unsigned short i = [S+$A-8] (used reg = )
25277 67EA           8A46         10            mov	al,$10[bp]
25278 67ED           30E4                       xor	ah,ah
25279 67EF           89C3                       mov	bx,ax
25280 67F1           8B46         FA            mov	ax,-6[bp]
25281 67F4           89D9                       mov	cx,bx
25282 67F6           F7E9                       imul	cx
25283                                           ! Debug: add unsigned int = ax+0 to unsigned short BP = [S+$A+6] (used reg = )
25284                                           ! Debug: expression subtree swapping
25285 67F8           0346         08            add	ax,8[bp]
25286                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25287 67FB           8946         F8            mov	-8[bp],ax
25288                                           !BCC_EOS
25289                                           ! 3365    dest = blockaddr + (DX + i) * 32;
25290                                           ! Debug: add unsigned short i = [S+$A-8] to unsigned short DX = [S+$A+$A] (used reg = )
25291 67FE           8B46         0C            mov	ax,$C[bp]
25292 6801           0346         FA            add	ax,-6[bp]
25293                                           ! Debug: mul int = const $20 to unsigned int = ax+0 (used reg = )
25294 6804           B1                     05  mov	cl,*5
25295 6806           D3E0                       shl	ax,cl
25296                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25297                                           ! Debug: expression subtree swapping
25298 6808           0346         FE            add	ax,-2[bp]
25299                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25300 680B           8946         FC            mov	-4[bp],ax
25301                                           !BCC_EOS
25302                                           ! 3366    memcpyb(0xA000, dest, ES, src, BH);
25303                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25304 680E           8A46         10            mov	al,$10[bp]
25305 6811           30E4                       xor	ah,ah
25306 6813           50                         push	ax
25307                                           ! Debug: list unsigned short src = [S+$C-$A] (used reg = )
25308 6814           FF76         F8            push	-8[bp]
25309                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
25310 6817           FF76         06            push	6[bp]
25311                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25312 681A           FF76         FC            push	-4[bp]
25313                                           ! Debug: list unsigned int = const $A000 (used reg = )
25314 681D           B8                   A000  mov	ax,#$A000
25315 6820           50                         push	ax
25316                                           ! Debug: func () void = memcpyb+0 (used reg = )
25317 6821           E8         1457            call	_memcpyb
25318 6824           83C4                   0A  add	sp,*$A
25319                                           !BCC_EOS
25320                                           ! 3367   }
25321                                           ! 3368  release_font_access();
25322                       00006827            .210:
25323                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25324 6827           8B46         FA            mov	ax,-6[bp]
25325 682A           40                         inc	ax
25326 682B           8946         FA            mov	-6[bp],ax
25327                       0000682E            .211:
25328                                           ! Debug: lt unsigned short CX = [S+$A+8] to unsigned short i = [S+$A-8] (used reg = )
25329 682E           8B46         FA            mov	ax,-6[bp]
25330 6831           3B46         0A            cmp	ax,$A[bp]
25331 6834           72           B4            jb 	.212
25332                       00006836            .213:
25333                       00006836            .20F:
25334                                           ! Debug: func () void = release_font_access+0 (used reg = )
25335 6836           E8         FDFC            call	_release_font_access
25336                                           !BCC_EOS
25337                                           ! 3369  if(AL>=0x10)
25338                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25339 6839           8A46         04            mov	al,4[bp]
25340 683C           3C                     10  cmp	al,*$10
25341 683E           72           0B            jb  	.214
25342                       00006840            .215:
25343                                           ! 3370   {
25344                                           ! 3371    set_scan_lines(BH);
25345                                           ! Debug: list unsigned char BH = [S+$A+$E] (used reg = )
25346 6840           8A46         10            mov	al,$10[bp]
25347 6843           30E4                       xor	ah,ah
25348 6845           50                         push	ax
25349                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25350 6846           E8         FE21            call	_set_scan_lines
25351 6849           44                         inc	sp
25352 684A           44                         inc	sp
25353                                           !BCC_EOS
25354                                           ! 3372   }
25355                                           ! 3373 }
25356                       0000684B            .214:
25357 684B           89EC                       mov	sp,bp
25358 684D           5D                         pop	bp
25359 684E           C3                         ret
25360                                           ! 3374 static void biosfn_load_text_8_14_pat (AL,BL) Bit8u AL;Bit8u BL;
25361                                           ! Register BX used in function biosfn_load_text_user_pat
25362                       0000684F            _biosfn_load_text_8_14_pat:
25363                                           !BCC_EOS
25364                                           !BCC_EOS
25365                                           ! 3375 {
25366                                           ! 3376  Bit16u blockaddr,dest,i,src;
25367                                           !BCC_EOS
25368                                           ! 3377  get_font_access();
25369 684F           55                         push	bp
25370 6850           89E5                       mov	bp,sp
25371 6852           83C4                   F8  add	sp,*-8
25372                                           ! Debug: func () void = get_font_access+0 (used reg = )
25373 6855           E8         FDBA            call	_get_font_access
25374                                           !BCC_EOS
25375                                           ! 3378  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25376                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25377 6858           8A46         06            mov	al,6[bp]
25378 685B           24                     04  and	al,*4
25379                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25380 685D           30E4                       xor	ah,ah
25381 685F           88C4                       mov	ah,al
25382 6861           30C0                       xor	al,al
25383 6863           B1                     03  mov	cl,*3
25384 6865           D3E0                       shl	ax,cl
25385 6867           50                         push	ax
25386                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25387 6868           8A46         06            mov	al,6[bp]
25388 686B           24                     03  and	al,*3
25389                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25390 686D           30E4                       xor	ah,ah
25391 686F           88C4                       mov	ah,al
25392 6871           30C0                       xor	al,al
25393 6873           B1                     06  mov	cl,*6
25394 6875           D3E0                       shl	ax,cl
25395                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25396 6877           0346         F6            add	ax,-$A[bp]
25397 687A           44                         inc	sp
25398 687B           44                         inc	sp
25399                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25400 687C           8946         FE            mov	-2[bp],ax
25401                                           !BCC_EOS
25402                                           ! 3379  for(i=0;i<0x100;i++)
25403                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25404 687F           31C0                       xor	ax,ax
25405 6881           8946         FA            mov	-6[bp],ax
25406                                           !BCC_EOS
25407                                           !BCC_EOS
25408                                           ! 3380   {
25409 6884           EB           41            jmp .218
25410                       00006886            .219:
25411                                           ! 3381    src = i * 14;
25412                                           ! Debug: mul int = const $E to unsigned short i = [S+$A-8] (used reg = )
25413 6886           8B46         FA            mov	ax,-6[bp]
25414 6889           89C2                       mov	dx,ax
25415 688B           B1                     03  mov	cl,*3
25416 688D           D3E0                       shl	ax,cl
25417 688F           29D0                       sub	ax,dx
25418 6891           D1E0                       shl	ax,*1
25419                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25420 6893           8946         F8            mov	-8[bp],ax
25421                                           !BCC_EOS
25422                                           ! 3382    dest = blockaddr + i * 32;
25423                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25424 6896           8B46         FA            mov	ax,-6[bp]
25425 6899           B1                     05  mov	cl,*5
25426 689B           D3E0                       shl	ax,cl
25427                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25428                                           ! Debug: expression subtree swapping
25429 689D           0346         FE            add	ax,-2[bp]
25430                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25431 68A0           8946         FC            mov	-4[bp],ax
25432                                           !BCC_EOS
25433                                           ! 3383    memcpyb(0xA000, dest, 0xC000, vgafont14+src, 14);
25434                                           ! Debug: list int = const $E (used reg = )
25435 68A3           B8                   000E  mov	ax,*$E
25436 68A6           50                         push	ax
25437                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$E00] unsigned char = vgafont14+0 (used reg = )
25438 68A7           8B5E         F8            mov	bx,-8[bp]
25439                                           ! Debug: cast * unsigned char = const 0 to [$E00] unsigned char = bx+_vgafont14+0 (used reg = )
25440                                           ! Debug: list * unsigned char = bx+_vgafont14+0 (used reg = )
25441 68AA           81C3                 1746  add	bx,#_vgafont14
25442 68AE           53                         push	bx
25443                                           ! Debug: list unsigned int = const $C000 (used reg = )
25444 68AF           B8                   C000  mov	ax,#$C000
25445 68B2           50                         push	ax
25446                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25447 68B3           FF76         FC            push	-4[bp]
25448                                           ! Debug: list unsigned int = const $A000 (used reg = )
25449 68B6           B8                   A000  mov	ax,#$A000
25450 68B9           50                         push	ax
25451                                           ! Debug: func () void = memcpyb+0 (used reg = )
25452 68BA           E8         13BE            call	_memcpyb
25453 68BD           83C4                   0A  add	sp,*$A
25454                                           !BCC_EOS
25455                                           ! 3384   }
25456                                           ! 3385  release_font_access();
25457                       000068C0            .217:
25458                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25459 68C0           8B46         FA            mov	ax,-6[bp]
25460 68C3           40                         inc	ax
25461 68C4           8946         FA            mov	-6[bp],ax
25462                       000068C7            .218:
25463                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25464 68C7           8B46         FA            mov	ax,-6[bp]
25465 68CA           3D                   0100  cmp	ax,#$100
25466 68CD           72           B7            jb 	.219
25467                       000068CF            .21A:
25468                       000068CF            .216:
25469                                           ! Debug: func () void = release_font_access+0 (used reg = )
25470 68CF           E8         FD63            call	_release_font_access
25471                                           !BCC_EOS
25472                                           ! 3386  if(AL>=0x10)
25473                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25474 68D2           8A46         04            mov	al,4[bp]
25475 68D5           3C                     10  cmp	al,*$10
25476 68D7           72           09            jb  	.21B
25477                       000068D9            .21C:
25478                                           ! 3387   {
25479                                           ! 3388    set_scan_lines(14);
25480                                           ! Debug: list int = const $E (used reg = )
25481 68D9           B8                   000E  mov	ax,*$E
25482 68DC           50                         push	ax
25483                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25484 68DD           E8         FD8A            call	_set_scan_lines
25485 68E0           44                         inc	sp
25486 68E1           44                         inc	sp
25487                                           !BCC_EOS
25488                                           ! 3389   }
25489                                           ! 3390 }
25490                       000068E2            .21B:
25491 68E2           89EC                       mov	sp,bp
25492 68E4           5D                         pop	bp
25493 68E5           C3                         ret
25494                                           ! 3391 static void biosfn_load_text_8_8_pat (AL,BL) Bit8u AL;Bit8u BL;
25495                                           ! Register BX used in function biosfn_load_text_8_14_pat
25496                       000068E6            _biosfn_load_text_8_8_pat:
25497                                           !BCC_EOS
25498                                           !BCC_EOS
25499                                           ! 3392 {
25500                                           ! 3393  Bit16u blockaddr,dest,i,src;
25501                                           !BCC_EOS
25502                                           ! 3394  get_font_access();
25503 68E6           55                         push	bp
25504 68E7           89E5                       mov	bp,sp
25505 68E9           83C4                   F8  add	sp,*-8
25506                                           ! Debug: func () void = get_font_access+0 (used reg = )
25507 68EC           E8         FD23            call	_get_font_access
25508                                           !BCC_EOS
25509                                           ! 3395  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25510                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25511 68EF           8A46         06            mov	al,6[bp]
25512 68F2           24                     04  and	al,*4
25513                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25514 68F4           30E4                       xor	ah,ah
25515 68F6           88C4                       mov	ah,al
25516 68F8           30C0                       xor	al,al
25517 68FA           B1                     03  mov	cl,*3
25518 68FC           D3E0                       shl	ax,cl
25519 68FE           50                         push	ax
25520                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25521 68FF           8A46         06            mov	al,6[bp]
25522 6902           24                     03  and	al,*3
25523                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25524 6904           30E4                       xor	ah,ah
25525 6906           88C4                       mov	ah,al
25526 6908           30C0                       xor	al,al
25527 690A           B1                     06  mov	cl,*6
25528 690C           D3E0                       shl	ax,cl
25529                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25530 690E           0346         F6            add	ax,-$A[bp]
25531 6911           44                         inc	sp
25532 6912           44                         inc	sp
25533                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25534 6913           8946         FE            mov	-2[bp],ax
25535                                           !BCC_EOS
25536                                           ! 3396  for(i=0;i<0x100;i++)
25537                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25538 6916           31C0                       xor	ax,ax
25539 6918           8946         FA            mov	-6[bp],ax
25540                                           !BCC_EOS
25541                                           !BCC_EOS
25542                                           ! 3397   {
25543 691B           EB           3B            jmp .21F
25544                       0000691D            .220:
25545                                           ! 3398    src = i * 8;
25546                                           ! Debug: mul int = const 8 to unsigned short i = [S+$A-8] (used reg = )
25547 691D           8B46         FA            mov	ax,-6[bp]
25548 6920           B1                     03  mov	cl,*3
25549 6922           D3E0                       shl	ax,cl
25550                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25551 6924           8946         F8            mov	-8[bp],ax
25552                                           !BCC_EOS
25553                                           ! 3399    dest = blockaddr + i * 32;
25554                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25555 6927           8B46         FA            mov	ax,-6[bp]
25556 692A           B1                     05  mov	cl,*5
25557 692C           D3E0                       shl	ax,cl
25558                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25559                                           ! Debug: expression subtree swapping
25560 692E           0346         FE            add	ax,-2[bp]
25561                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25562 6931           8946         FC            mov	-4[bp],ax
25563                                           !BCC_EOS
25564                                           ! 3400    memcpyb(0xA000, dest, 0xC000, vgafont8+src, 8);
25565                                           ! Debug: list int = const 8 (used reg = )
25566 6934           B8                   0008  mov	ax,*8
25567 6937           50                         push	ax
25568                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$800] unsigned char = vgafont8+0 (used reg = )
25569 6938           8B5E         F8            mov	bx,-8[bp]
25570                                           ! Debug: cast * unsigned char = const 0 to [$800] unsigned char = bx+_vgafont8+0 (used reg = )
25571                                           ! Debug: list * unsigned char = bx+_vgafont8+0 (used reg = )
25572 693B           81C3                 0F46  add	bx,#_vgafont8
25573 693F           53                         push	bx
25574                                           ! Debug: list unsigned int = const $C000 (used reg = )
25575 6940           B8                   C000  mov	ax,#$C000
25576 6943           50                         push	ax
25577                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25578 6944           FF76         FC            push	-4[bp]
25579                                           ! Debug: list unsigned int = const $A000 (used reg = )
25580 6947           B8                   A000  mov	ax,#$A000
25581 694A           50                         push	ax
25582                                           ! Debug: func () void = memcpyb+0 (used reg = )
25583 694B           E8         132D            call	_memcpyb
25584 694E           83C4                   0A  add	sp,*$A
25585                                           !BCC_EOS
25586                                           ! 3401   }
25587                                           ! 3402  release_font_access();
25588                       00006951            .21E:
25589                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25590 6951           8B46         FA            mov	ax,-6[bp]
25591 6954           40                         inc	ax
25592 6955           8946         FA            mov	-6[bp],ax
25593                       00006958            .21F:
25594                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25595 6958           8B46         FA            mov	ax,-6[bp]
25596 695B           3D                   0100  cmp	ax,#$100
25597 695E           72           BD            jb 	.220
25598                       00006960            .221:
25599                       00006960            .21D:
25600                                           ! Debug: func () void = release_font_access+0 (used reg = )
25601 6960           E8         FCD2            call	_release_font_access
25602                                           !BCC_EOS
25603                                           ! 3403  if(AL>=0x10)
25604                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25605 6963           8A46         04            mov	al,4[bp]
25606 6966           3C                     10  cmp	al,*$10
25607 6968           72           09            jb  	.222
25608                       0000696A            .223:
25609                                           ! 3404   {
25610                                           ! 3405    set_scan_lines(8);
25611                                           ! Debug: list int = const 8 (used reg = )
25612 696A           B8                   0008  mov	ax,*8
25613 696D           50                         push	ax
25614                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25615 696E           E8         FCF9            call	_set_scan_lines
25616 6971           44                         inc	sp
25617 6972           44                         inc	sp
25618                                           !BCC_EOS
25619                                           ! 3406   }
25620                                           ! 3407 }
25621                       00006973            .222:
25622 6973           89EC                       mov	sp,bp
25623 6975           5D                         pop	bp
25624 6976           C3                         ret
25625                                           ! 3408 #asm
25626                                           !BCC_ASM
25627                       00000002            _biosfn_load_text_8_8_pat.AL	set	2
25628                       00000004            _biosfn_load_text_8_8_pat.BL	set	4
25629                       00006977            biosfn_set_text_block_specifier:
25630 6977           50                           push ax
25631 6978           52                           push dx
25632 6979           BA                   03C4    mov dx, # 0x3c4
25633 697C           88DC                         mov ah, bl
25634 697E           B0                     03    mov al, #0x03
25635 6980           EF                           out dx, ax
25636 6981           5A                           pop dx
25637 6982           58                           pop ax
25638 6983           C3                           ret
25639                                           ! 3419 endasm
25640                                           !BCC_ENDASM
25641                                           ! 3420 static void biosfn_load_text_8_16_pat (AL,BL) Bit8u AL;Bit8u BL;
25642                                           ! Register BX used in function biosfn_load_text_8_8_pat
25643                       00006984            _biosfn_load_text_8_16_pat:
25644                                           !BCC_EOS
25645                                           !BCC_EOS
25646                                           ! 3421 {
25647                                           ! 3422  Bit16u blockaddr,dest,i,src;
25648                                           !BCC_EOS
25649                                           ! 3423  get_font_access();
25650 6984           55                         push	bp
25651 6985           89E5                       mov	bp,sp
25652 6987           83C4                   F8  add	sp,*-8
25653                                           ! Debug: func () void = get_font_access+0 (used reg = )
25654 698A           E8         FC85            call	_get_font_access
25655                                           !BCC_EOS
25656                                           ! 3424  blockaddr = ((BL & 0x03) << 14) + ((BL & 0x04) << 11);
25657                                           ! Debug: and int = const 4 to unsigned char BL = [S+$A+4] (used reg = )
25658 698D           8A46         06            mov	al,6[bp]
25659 6990           24                     04  and	al,*4
25660                                           ! Debug: sl int = const $B to unsigned char = al+0 (used reg = )
25661 6992           30E4                       xor	ah,ah
25662 6994           88C4                       mov	ah,al
25663 6996           30C0                       xor	al,al
25664 6998           B1                     03  mov	cl,*3
25665 699A           D3E0                       shl	ax,cl
25666 699C           50                         push	ax
25667                                           ! Debug: and int = const 3 to unsigned char BL = [S+$C+4] (used reg = )
25668 699D           8A46         06            mov	al,6[bp]
25669 69A0           24                     03  and	al,*3
25670                                           ! Debug: sl int = const $E to unsigned char = al+0 (used reg = )
25671 69A2           30E4                       xor	ah,ah
25672 69A4           88C4                       mov	ah,al
25673 69A6           30C0                       xor	al,al
25674 69A8           B1                     06  mov	cl,*6
25675 69AA           D3E0                       shl	ax,cl
25676                                           ! Debug: add unsigned int (temp) = [S+$C-$C] to unsigned int = ax+0 (used reg = )
25677 69AC           0346         F6            add	ax,-$A[bp]
25678 69AF           44                         inc	sp
25679 69B0           44                         inc	sp
25680                                           ! Debug: eq unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25681 69B1           8946         FE            mov	-2[bp],ax
25682                                           !BCC_EOS
25683                                           ! 3425  for(i=0;i<0x100;i++)
25684                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-8] (used reg = )
25685 69B4           31C0                       xor	ax,ax
25686 69B6           8946         FA            mov	-6[bp],ax
25687                                           !BCC_EOS
25688                                           !BCC_EOS
25689                                           ! 3426   {
25690 69B9           EB           3B            jmp .226
25691                       000069BB            .227:
25692                                           ! 3427    src = i * 16;
25693                                           ! Debug: mul int = const $10 to unsigned short i = [S+$A-8] (used reg = )
25694 69BB           8B46         FA            mov	ax,-6[bp]
25695 69BE           B1                     04  mov	cl,*4
25696 69C0           D3E0                       shl	ax,cl
25697                                           ! Debug: eq unsigned int = ax+0 to unsigned short src = [S+$A-$A] (used reg = )
25698 69C2           8946         F8            mov	-8[bp],ax
25699                                           !BCC_EOS
25700                                           ! 3428    dest = blockaddr + i * 32;
25701                                           ! Debug: mul int = const $20 to unsigned short i = [S+$A-8] (used reg = )
25702 69C5           8B46         FA            mov	ax,-6[bp]
25703 69C8           B1                     05  mov	cl,*5
25704 69CA           D3E0                       shl	ax,cl
25705                                           ! Debug: add unsigned int = ax+0 to unsigned short blockaddr = [S+$A-4] (used reg = )
25706                                           ! Debug: expression subtree swapping
25707 69CC           0346         FE            add	ax,-2[bp]
25708                                           ! Debug: eq unsigned int = ax+0 to unsigned short dest = [S+$A-6] (used reg = )
25709 69CF           8946         FC            mov	-4[bp],ax
25710                                           !BCC_EOS
25711                                           ! 3429    memcpyb(0xA000, dest, 0xC000, vgafont16+src, 16);
25712                                           ! Debug: list int = const $10 (used reg = )
25713 69D2           B8                   0010  mov	ax,*$10
25714 69D5           50                         push	ax
25715                                           ! Debug: ptradd unsigned short src = [S+$C-$A] to [$1000] unsigned char = vgafont16+0 (used reg = )
25716 69D6           8B5E         F8            mov	bx,-8[bp]
25717                                           ! Debug: cast * unsigned char = const 0 to [$1000] unsigned char = bx+_vgafont16+0 (used reg = )
25718                                           ! Debug: list * unsigned char = bx+_vgafont16+0 (used reg = )
25719 69D9           81C3                 2546  add	bx,#_vgafont16
25720 69DD           53                         push	bx
25721                                           ! Debug: list unsigned int = const $C000 (used reg = )
25722 69DE           B8                   C000  mov	ax,#$C000
25723 69E1           50                         push	ax
25724                                           ! Debug: list unsigned short dest = [S+$10-6] (used reg = )
25725 69E2           FF76         FC            push	-4[bp]
25726                                           ! Debug: list unsigned int = const $A000 (used reg = )
25727 69E5           B8                   A000  mov	ax,#$A000
25728 69E8           50                         push	ax
25729                                           ! Debug: func () void = memcpyb+0 (used reg = )
25730 69E9           E8         128F            call	_memcpyb
25731 69EC           83C4                   0A  add	sp,*$A
25732                                           !BCC_EOS
25733                                           ! 3430   }
25734                                           ! 3431  release_font_access();
25735                       000069EF            .225:
25736                                           ! Debug: postinc unsigned short i = [S+$A-8] (used reg = )
25737 69EF           8B46         FA            mov	ax,-6[bp]
25738 69F2           40                         inc	ax
25739 69F3           8946         FA            mov	-6[bp],ax
25740                       000069F6            .226:
25741                                           ! Debug: lt int = const $100 to unsigned short i = [S+$A-8] (used reg = )
25742 69F6           8B46         FA            mov	ax,-6[bp]
25743 69F9           3D                   0100  cmp	ax,#$100
25744 69FC           72           BD            jb 	.227
25745                       000069FE            .228:
25746                       000069FE            .224:
25747                                           ! Debug: func () void = release_font_access+0 (used reg = )
25748 69FE           E8         FC34            call	_release_font_access
25749                                           !BCC_EOS
25750                                           ! 3432  if(AL>=0x10)
25751                                           ! Debug: ge int = const $10 to unsigned char AL = [S+$A+2] (used reg = )
25752 6A01           8A46         04            mov	al,4[bp]
25753 6A04           3C                     10  cmp	al,*$10
25754 6A06           72           09            jb  	.229
25755                       00006A08            .22A:
25756                                           ! 3433   {
25757                                           ! 3434    set_scan_lines(16);
25758                                           ! Debug: list int = const $10 (used reg = )
25759 6A08           B8                   0010  mov	ax,*$10
25760 6A0B           50                         push	ax
25761                                           ! Debug: func () void = set_scan_lines+0 (used reg = )
25762 6A0C           E8         FC5B            call	_set_scan_lines
25763 6A0F           44                         inc	sp
25764 6A10           44                         inc	sp
25765                                           !BCC_EOS
25766                                           ! 3435   }
25767                                           ! 3436 }
25768                       00006A11            .229:
25769 6A11           89EC                       mov	sp,bp
25770 6A13           5D                         pop	bp
25771 6A14           C3                         ret
25772                                           ! 3437 static void biosfn_load_gfx_8_8_chars (ES,BP) Bit16u ES;Bit16u BP;
25773                                           ! Register BX used in function biosfn_load_text_8_16_pat
25774                       00006A15            _biosfn_load_gfx_8_8_chars:
25775                                           !BCC_EOS
25776                                           !BCC_EOS
25777                                           ! 3438 {
25778                                           ! 3439  unimplemented();
25779 6A15           55                         push	bp
25780 6A16           89E5                       mov	bp,sp
25781                                           ! Debug: func () void = unimplemented+0 (used reg = )
25782 6A18           E8         134F            call	_unimplemented
25783                                           !BCC_EOS
25784                                           ! 3440 }
25785 6A1B           5D                         pop	bp
25786 6A1C           C3                         ret
25787                                           ! 3441 static void biosfn_load_gfx_user_chars (ES,BP,CX,BL,DL) Bit16u ES;Bit16u BP;Bit16u CX;Bit8u BL;Bit8u DL;
25788                       00006A1D            _biosfn_load_gfx_user_chars:
25789                                           !BCC_EOS
25790                                           !BCC_EOS
25791                                           !BCC_EOS
25792                                           !BCC_EOS
25793                                           !BCC_EOS
25794                                           ! 3442 {
25795                                           ! 3443  unimplemented();
25796 6A1D           55                         push	bp
25797 6A1E           89E5                       mov	bp,sp
25798                                           ! Debug: func () void = unimplemented+0 (used reg = )
25799 6A20           E8         1347            call	_unimplemented
25800                                           !BCC_EOS
25801                                           ! 3444 }
25802 6A23           5D                         pop	bp
25803 6A24           C3                         ret
25804                                           ! 3445 static void biosfn_load_gfx_8_14_chars (BL) Bit8u BL;
25805                       00006A25            _biosfn_load_gfx_8_14_chars:
25806                                           !BCC_EOS
25807                                           ! 3446 {
25808                                           ! 3447  unimplemented();
25809 6A25           55                         push	bp
25810 6A26           89E5                       mov	bp,sp
25811                                           ! Debug: func () void = unimplemented+0 (used reg = )
25812 6A28           E8         133F            call	_unimplemented
25813                                           !BCC_EOS
25814                                           ! 3448 }
25815 6A2B           5D                         pop	bp
25816 6A2C           C3                         ret
25817                                           ! 3449 static void biosfn_load_gfx_8_8_dd_chars (BL) Bit8u BL;
25818                       00006A2D            _biosfn_load_gfx_8_8_dd_chars:
25819                                           !BCC_EOS
25820                                           ! 3450 {
25821                                           ! 3451  unimplemented();
25822 6A2D           55                         push	bp
25823 6A2E           89E5                       mov	bp,sp
25824                                           ! Debug: func () void = unimplemented+0 (used reg = )
25825 6A30           E8         1337            call	_unimplemented
25826                                           !BCC_EOS
25827                                           ! 3452 }
25828 6A33           5D                         pop	bp
25829 6A34           C3                         ret
25830                                           ! 3453 static void biosfn_load_gfx_8_16_chars (BL) Bit8u BL;
25831                       00006A35            _biosfn_load_gfx_8_16_chars:
25832                                           !BCC_EOS
25833                                           ! 3454 {
25834                                           ! 3455  unimplemented();
25835 6A35           55                         push	bp
25836 6A36           89E5                       mov	bp,sp
25837                                           ! Debug: func () void = unimplemented+0 (used reg = )
25838 6A38           E8         132F            call	_unimplemented
25839                                           !BCC_EOS
25840                                           ! 3456 }
25841 6A3B           5D                         pop	bp
25842 6A3C           C3                         ret
25843                                           ! 3457 static void biosfn_get_font_info (BH,ES,BP,CX,DX)
25844                                           ! 3458 Bit8u BH;Bit16u *ES;Bit16u *BP;Bit16u *CX;Bit16u *DX;
25845                       00006A3D            _biosfn_get_font_info:
25846                                           !BCC_EOS
25847                                           !BCC_EOS
25848                                           !BCC_EOS
25849                                           !BCC_EOS
25850                                           !BCC_EOS
25851                                           ! 3459 {Bit16u ss=get_SS();
25852 6A3D           55                         push	bp
25853 6A3E           89E5                       mov	bp,sp
25854 6A40           4C                         dec	sp
25855 6A41           4C                         dec	sp
25856                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
25857 6A42           E8         1322            call	_get_SS
25858                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
25859 6A45           8946         FE            mov	-2[bp],ax
25860                                           !BCC_EOS
25861                                           ! 3460  switch(BH)
25862 6A48           8A46         04            mov	al,4[bp]
25863                                           ! 3461   {case 0x00:
25864 6A4B           E9         0154            br 	.22D
25865                                           ! 3462     write_word(ss,ES,read_word(0x00,0x1f*4));
25866                       00006A4E            .22E:
25867                                           ! Debug: list int = const $7C (used reg = )
25868 6A4E           B8                   007C  mov	ax,*$7C
25869 6A51           50                         push	ax
25870                                           ! Debug: list int = const 0 (used reg = )
25871 6A52           31C0                       xor	ax,ax
25872 6A54           50                         push	ax
25873                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25874 6A55           E8         1296            call	_read_word
25875 6A58           83C4                   04  add	sp,*4
25876                                           ! Debug: list unsigned short = ax+0 (used reg = )
25877 6A5B           50                         push	ax
25878                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25879 6A5C           FF76         06            push	6[bp]
25880                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25881 6A5F           FF76         FE            push	-2[bp]
25882                                           ! Debug: func () void = write_word+0 (used reg = )
25883 6A62           E8         12B4            call	_write_word
25884 6A65           83C4                   06  add	sp,*6
25885                                           !BCC_EOS
25886                                           ! 3463     write_word(ss,BP,read_word(0x00,(0x1f*4)+2));
25887                                           ! Debug: list int = const $7E (used reg = )
25888 6A68           B8                   007E  mov	ax,*$7E
25889 6A6B           50                         push	ax
25890                                           ! Debug: list int = const 0 (used reg = )
25891 6A6C           31C0                       xor	ax,ax
25892 6A6E           50                         push	ax
25893                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25894 6A6F           E8         127C            call	_read_word
25895 6A72           83C4                   04  add	sp,*4
25896                                           ! Debug: list unsigned short = ax+0 (used reg = )
25897 6A75           50                         push	ax
25898                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25899 6A76           FF76         08            push	8[bp]
25900                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25901 6A79           FF76         FE            push	-2[bp]
25902                                           ! Debug: func () void = write_word+0 (used reg = )
25903 6A7C           E8         129A            call	_write_word
25904 6A7F           83C4                   06  add	sp,*6
25905                                           !BCC_EOS
25906                                           ! 3464     break;
25907 6A82           E9         0142            br 	.22B
25908                                           !BCC_EOS
25909                                           ! 3465    case 0x01:
25910                                           ! 3466     write_word(ss,ES,read_word(0x00,0x43*4));
25911                       00006A85            .22F:
25912                                           ! Debug: list int = const $10C (used reg = )
25913 6A85           B8                   010C  mov	ax,#$10C
25914 6A88           50                         push	ax
25915                                           ! Debug: list int = const 0 (used reg = )
25916 6A89           31C0                       xor	ax,ax
25917 6A8B           50                         push	ax
25918                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25919 6A8C           E8         125F            call	_read_word
25920 6A8F           83C4                   04  add	sp,*4
25921                                           ! Debug: list unsigned short = ax+0 (used reg = )
25922 6A92           50                         push	ax
25923                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25924 6A93           FF76         06            push	6[bp]
25925                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25926 6A96           FF76         FE            push	-2[bp]
25927                                           ! Debug: func () void = write_word+0 (used reg = )
25928 6A99           E8         127D            call	_write_word
25929 6A9C           83C4                   06  add	sp,*6
25930                                           !BCC_EOS
25931                                           ! 3467     write_word(ss,BP,read_word(0x00,(0x43*4)+2));
25932                                           ! Debug: list int = const $10E (used reg = )
25933 6A9F           B8                   010E  mov	ax,#$10E
25934 6AA2           50                         push	ax
25935                                           ! Debug: list int = const 0 (used reg = )
25936 6AA3           31C0                       xor	ax,ax
25937 6AA5           50                         push	ax
25938                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
25939 6AA6           E8         1245            call	_read_word
25940 6AA9           83C4                   04  add	sp,*4
25941                                           ! Debug: list unsigned short = ax+0 (used reg = )
25942 6AAC           50                         push	ax
25943                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25944 6AAD           FF76         08            push	8[bp]
25945                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25946 6AB0           FF76         FE            push	-2[bp]
25947                                           ! Debug: func () void = write_word+0 (used reg = )
25948 6AB3           E8         1263            call	_write_word
25949 6AB6           83C4                   06  add	sp,*6
25950                                           !BCC_EOS
25951                                           ! 3468     break;
25952 6AB9           E9         010B            br 	.22B
25953                                           !BCC_EOS
25954                                           ! 3469    case 0x02:
25955                                           ! 3470     write_word(ss,ES,0xC000);
25956                       00006ABC            .230:
25957                                           ! Debug: list unsigned int = const $C000 (used reg = )
25958 6ABC           B8                   C000  mov	ax,#$C000
25959 6ABF           50                         push	ax
25960                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25961 6AC0           FF76         06            push	6[bp]
25962                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25963 6AC3           FF76         FE            push	-2[bp]
25964                                           ! Debug: func () void = write_word+0 (used reg = )
25965 6AC6           E8         1250            call	_write_word
25966 6AC9           83C4                   06  add	sp,*6
25967                                           !BCC_EOS
25968                                           ! 3471     write_word(ss,BP,vgafont14);
25969                                           ! Debug: list * unsigned char = vgafont14+0 (used reg = )
25970 6ACC           BB                   1746  mov	bx,#_vgafont14
25971 6ACF           53                         push	bx
25972                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
25973 6AD0           FF76         08            push	8[bp]
25974                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25975 6AD3           FF76         FE            push	-2[bp]
25976                                           ! Debug: func () void = write_word+0 (used reg = )
25977 6AD6           E8         1240            call	_write_word
25978 6AD9           83C4                   06  add	sp,*6
25979                                           !BCC_EOS
25980                                           ! 3472     break;
25981 6ADC           E9         00E8            br 	.22B
25982                                           !BCC_EOS
25983                                           ! 3473    case 0x03:
25984                                           ! 3474     write_word(ss,ES,0xC000);
25985                       00006ADF            .231:
25986                                           ! Debug: list unsigned int = const $C000 (used reg = )
25987 6ADF           B8                   C000  mov	ax,#$C000
25988 6AE2           50                         push	ax
25989                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
25990 6AE3           FF76         06            push	6[bp]
25991                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
25992 6AE6           FF76         FE            push	-2[bp]
25993                                           ! Debug: func () void = write_word+0 (used reg = )
25994 6AE9           E8         122D            call	_write_word
25995 6AEC           83C4                   06  add	sp,*6
25996                                           !BCC_EOS
25997                                           ! 3475     write_word(ss,BP,vgafont8);
25998                                           ! Debug: list * unsigned char = vgafont8+0 (used reg = )
25999 6AEF           BB                   0F46  mov	bx,#_vgafont8
26000 6AF2           53                         push	bx
26001                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26002 6AF3           FF76         08            push	8[bp]
26003                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26004 6AF6           FF76         FE            push	-2[bp]
26005                                           ! Debug: func () void = write_word+0 (used reg = )
26006 6AF9           E8         121D            call	_write_word
26007 6AFC           83C4                   06  add	sp,*6
26008                                           !BCC_EOS
26009                                           ! 3476     break;
26010 6AFF           E9         00C5            br 	.22B
26011                                           !BCC_EOS
26012                                           ! 3477    case 0x04:
26013                                           ! 3478     write_word(ss,ES,0xC000);
26014                       00006B02            .232:
26015                                           ! Debug: list unsigned int = const $C000 (used reg = )
26016 6B02           B8                   C000  mov	ax,#$C000
26017 6B05           50                         push	ax
26018                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26019 6B06           FF76         06            push	6[bp]
26020                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26021 6B09           FF76         FE            push	-2[bp]
26022                                           ! Debug: func () void = write_word+0 (used reg = )
26023 6B0C           E8         120A            call	_write_word
26024 6B0F           83C4                   06  add	sp,*6
26025                                           !BCC_EOS
26026                                           ! 3479     write_word(ss,BP,vgafont8+128*8);
26027                                           ! Debug: list * unsigned char = vgafont8+$400 (used reg = )
26028 6B12           BB                   1346  mov	bx,#_vgafont8+$400
26029 6B15           53                         push	bx
26030                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26031 6B16           FF76         08            push	8[bp]
26032                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26033 6B19           FF76         FE            push	-2[bp]
26034                                           ! Debug: func () void = write_word+0 (used reg = )
26035 6B1C           E8         11FA            call	_write_word
26036 6B1F           83C4                   06  add	sp,*6
26037                                           !BCC_EOS
26038                                           ! 3480     break;
26039 6B22           E9         00A2            br 	.22B
26040                                           !BCC_EOS
26041                                           ! 3481    case 0x05:
26042                                           ! 3482     write_word(ss,ES,0xC000);
26043                       00006B25            .233:
26044                                           ! Debug: list unsigned int = const $C000 (used reg = )
26045 6B25           B8                   C000  mov	ax,#$C000
26046 6B28           50                         push	ax
26047                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26048 6B29           FF76         06            push	6[bp]
26049                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26050 6B2C           FF76         FE            push	-2[bp]
26051                                           ! Debug: func () void = write_word+0 (used reg = )
26052 6B2F           E8         11E7            call	_write_word
26053 6B32           83C4                   06  add	sp,*6
26054                                           !BCC_EOS
26055                                           ! 3483     write_word(ss,BP,vgafont14alt);
26056                                           ! Debug: list * unsigned char = vgafont14alt+0 (used reg = )
26057 6B35           BB                   3546  mov	bx,#_vgafont14alt
26058 6B38           53                         push	bx
26059                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26060 6B39           FF76         08            push	8[bp]
26061                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26062 6B3C           FF76         FE            push	-2[bp]
26063                                           ! Debug: func () void = write_word+0 (used reg = )
26064 6B3F           E8         11D7            call	_write_word
26065 6B42           83C4                   06  add	sp,*6
26066                                           !BCC_EOS
26067                                           ! 3484     break;
26068 6B45           E9         007F            jmp .22B
26069                                           !BCC_EOS
26070                                           ! 3485    case 0x06:
26071                                           ! 3486     write_word(ss,ES,0xC000);
26072                       00006B48            .234:
26073                                           ! Debug: list unsigned int = const $C000 (used reg = )
26074 6B48           B8                   C000  mov	ax,#$C000
26075 6B4B           50                         push	ax
26076                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26077 6B4C           FF76         06            push	6[bp]
26078                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26079 6B4F           FF76         FE            push	-2[bp]
26080                                           ! Debug: func () void = write_word+0 (used reg = )
26081 6B52           E8         11C4            call	_write_word
26082 6B55           83C4                   06  add	sp,*6
26083                                           !BCC_EOS
26084                                           ! 3487     write_word(ss,BP,vgafont16);
26085                                           ! Debug: list * unsigned char = vgafont16+0 (used reg = )
26086 6B58           BB                   2546  mov	bx,#_vgafont16
26087 6B5B           53                         push	bx
26088                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26089 6B5C           FF76         08            push	8[bp]
26090                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26091 6B5F           FF76         FE            push	-2[bp]
26092                                           ! Debug: func () void = write_word+0 (used reg = )
26093 6B62           E8         11B4            call	_write_word
26094 6B65           83C4                   06  add	sp,*6
26095                                           !BCC_EOS
26096                                           ! 3488     break;
26097 6B68           EB           5D            jmp .22B
26098                                           !BCC_EOS
26099                                           ! 3489    case 0x07:
26100                                           ! 3490     write_word(ss,ES,0xC000);
26101                       00006B6A            .235:
26102                                           ! Debug: list unsigned int = const $C000 (used reg = )
26103 6B6A           B8                   C000  mov	ax,#$C000
26104 6B6D           50                         push	ax
26105                                           ! Debug: list * unsigned short ES = [S+6+4] (used reg = )
26106 6B6E           FF76         06            push	6[bp]
26107                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26108 6B71           FF76         FE            push	-2[bp]
26109                                           ! Debug: func () void = write_word+0 (used reg = )
26110 6B74           E8         11A2            call	_write_word
26111 6B77           83C4                   06  add	sp,*6
26112                                           !BCC_EOS
26113                                           ! 3491     write_word(ss,BP,vgafont16alt);
26114                                           ! Debug: list * unsigned char = vgafont16alt+0 (used reg = )
26115 6B7A           BB                   3547  mov	bx,#_vgafont16alt
26116 6B7D           53                         push	bx
26117                                           ! Debug: list * unsigned short BP = [S+6+6] (used reg = )
26118 6B7E           FF76         08            push	8[bp]
26119                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26120 6B81           FF76         FE            push	-2[bp]
26121                                           ! Debug: func () void = write_word+0 (used reg = )
26122 6B84           E8         1192            call	_write_word
26123 6B87           83C4                   06  add	sp,*6
26124                                           !BCC_EOS
26125                                           ! 3492     break;
26126 6B8A           EB           3B            jmp .22B
26127                                           !BCC_EOS
26128                                           ! 3493    default:
26129                                           ! 3494      printf("Get font info BH(%02x) was discarded\n",BH);
26130                       00006B8C            .236:
26131                                           ! Debug: list unsigned char BH = [S+4+2] (used reg = )
26132 6B8C           8A46         04            mov	al,4[bp]
26133 6B8F           30E4                       xor	ah,ah
26134 6B91           50                         push	ax
26135                                           ! Debug: list * char = .237+0 (used reg = )
26136 6B92           BB                   7EFF  mov	bx,#.237
26137 6B95           53                         push	bx
26138                                           ! Debug: func () void = printf+0 (used reg = )
26139 6B96           E8         11ED            call	_printf
26140 6B99           83C4                   04  add	sp,*4
26141                                           !BCC_EOS
26142                                           ! 3495     return;
26143 6B9C           89EC                       mov	sp,bp
26144 6B9E           5D                         pop	bp
26145 6B9F           C3                         ret
26146                                           !BCC_EOS
26147                                           ! 3496   }
26148                                           ! 3497  write_word(ss,CX,(Bit16u)read_byte(0x40,0x85));
26149 6BA0           EB           25            jmp .22B
26150                       00006BA2            .22D:
26151 6BA2           2C                     00  sub	al,*0
26152 6BA4           72           E6            jb 	.236
26153 6BA6           3C                     07  cmp	al,*7
26154 6BA8           77           1B            ja  	.238
26155 6BAA           30E4                       xor	ah,ah
26156 6BAC           D1E0                       shl	ax,*1
26157 6BAE           89C3                       mov	bx,ax
26158 6BB0           2E                         seg	cs
26159 6BB1           FFA7       6BB5            br	.239[bx]
26160                       00006BB5            .239:
26161 6BB5                      6A4E            .word	.22E
26162 6BB7                      6A85            .word	.22F
26163 6BB9                      6ABC            .word	.230
26164 6BBB                      6ADF            .word	.231
26165 6BBD                      6B02            .word	.232
26166 6BBF                      6B25            .word	.233
26167 6BC1                      6B48            .word	.234
26168 6BC3                      6B6A            .word	.235
26169                       00006BC5            .238:
26170 6BC5           EB           C5            jmp	.236
26171                       00006BC7            .22B:
26172                       FFFFFFFC            ..FFF5	=	-4
26173                                           ! Debug: list int = const $85 (used reg = )
26174 6BC7           B8                   0085  mov	ax,#$85
26175 6BCA           50                         push	ax
26176                                           ! Debug: list int = const $40 (used reg = )
26177 6BCB           B8                   0040  mov	ax,*$40
26178 6BCE           50                         push	ax
26179                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26180 6BCF           E8         1109            call	_read_byte
26181 6BD2           83C4                   04  add	sp,*4
26182                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26183 6BD5           30E4                       xor	ah,ah
26184                                           ! Debug: list unsigned short = ax+0 (used reg = )
26185 6BD7           50                         push	ax
26186                                           ! Debug: list * unsigned short CX = [S+6+8] (used reg = )
26187 6BD8           FF76         0A            push	$A[bp]
26188                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26189 6BDB           FF76         FE            push	-2[bp]
26190                                           ! Debug: func () void = write_word+0 (used reg = )
26191 6BDE           E8         1138            call	_write_word
26192 6BE1           83C4                   06  add	sp,*6
26193                                           !BCC_EOS
26194                                           ! 3498  write_word(ss,DX,(Bit16u)read_byte(0x40,0x84));
26195                                           ! Debug: list int = const $84 (used reg = )
26196 6BE4           B8                   0084  mov	ax,#$84
26197 6BE7           50                         push	ax
26198                                           ! Debug: list int = const $40 (used reg = )
26199 6BE8           B8                   0040  mov	ax,*$40
26200 6BEB           50                         push	ax
26201                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26202 6BEC           E8         10EC            call	_read_byte
26203 6BEF           83C4                   04  add	sp,*4
26204                                           ! Debug: cast unsigned short = const 0 to unsigned char = al+0 (used reg = )
26205 6BF2           30E4                       xor	ah,ah
26206                                           ! Debug: list unsigned short = ax+0 (used reg = )
26207 6BF4           50                         push	ax
26208                                           ! Debug: list * unsigned short DX = [S+6+$A] (used reg = )
26209 6BF5           FF76         0C            push	$C[bp]
26210                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
26211 6BF8           FF76         FE            push	-2[bp]
26212                                           ! Debug: func () void = write_word+0 (used reg = )
26213 6BFB           E8         111B            call	_write_word
26214 6BFE           83C4                   06  add	sp,*6
26215                                           !BCC_EOS
26216                                           ! 3499 }
26217 6C01           89EC                       mov	sp,bp
26218 6C03           5D                         pop	bp
26219 6C04           C3                         ret
26220                                           ! 3500 #asm
26221                                           !BCC_ASM
26222                       00000006            _biosfn_get_font_info.BP	set	6
26223                       00000002            _biosfn_get_font_info.BH	set	2
26224                       00000008            _biosfn_get_font_info.CX	set	8
26225                       0000000A            _biosfn_get_font_info.DX	set	$A
26226                       00000004            _biosfn_get_font_info.ES	set	4
26227                       00006C05            biosfn_get_ega_info:
26228 6C05           1E                           push ds
26229 6C06           50                           push ax
26230 6C07           B8                   0040    mov ax, # 0x40
26231 6C0A           8ED8                         mov ds, ax
26232 6C0C           30ED                         xor ch, ch
26233 6C0E           BB                   0088    mov bx, # 0x88
26234 6C11           8A0F                         mov cl, [bx]
26235 6C13           80E1                   0F    and cl, #0x0f
26236 6C16           BB                   0063    mov bx, # 0x63
26237 6C19           8B07                         mov ax, [bx]
26238 6C1B           BB                   0003    mov bx, #0x0003
26239 6C1E           3D                   03B4    cmp ax, # 0x3b4
26240 6C21           75           02              jne mode_ega_color
26241 6C23           B7                     01    mov bh, #0x01
26242                       00006C25            mode_ega_color:
26243 6C25           58                           pop ax
26244 6C26           1F                           pop ds
26245 6C27           C3                           ret
26246                                           ! 3520 endasm
26247                                           !BCC_ENDASM
26248                                           ! 3521 static void biosfn_alternate_prtsc()
26249                                           ! Register BX used in function biosfn_get_font_info
26250                                           ! 3522 {
26251                       00006C28            _biosfn_alternate_prtsc:
26252                                           ! 3523  unimplemented();
26253 6C28           55                         push	bp
26254 6C29           89E5                       mov	bp,sp
26255                                           ! Debug: func () void = unimplemented+0 (used reg = )
26256 6C2B           E8         113C            call	_unimplemented
26257                                           !BCC_EOS
26258                                           ! 3524 }
26259 6C2E           5D                         pop	bp
26260 6C2F           C3                         ret
26261                                           ! 3525 #asm
26262                                           !BCC_ASM
26263                       00006C30            biosfn_select_vert_res:
26264                                           ; res : 00 200 lines, 01 350 lines, 02 400 lines
26265 6C30           1E                           push ds
26266 6C31           53                           push bx
26267 6C32           52                           push dx
26268 6C33           88C2                         mov dl, al
26269 6C35           B8                   0040    mov ax, # 0x40
26270 6C38           8ED8                         mov ds, ax
26271 6C3A           BB                   0089    mov bx, # 0x89
26272 6C3D           8A07                         mov al, [bx]
26273 6C3F           BB                   0088    mov bx, # 0x88
26274 6C42           8A27                         mov ah, [bx]
26275 6C44           80FA                   01    cmp dl, #0x01
26276 6C47           74           24              je vert_res_350
26277 6C49           72           2C              jb vert_res_200
26278 6C4B           80FA                   02    cmp dl, #0x02
26279 6C4E           74           11              je vert_res_400
26280 6C50           88D0                         mov al, dl
26281 6C52           30E4                         xor ah, ah
26282 6C54           50                           push ax
26283 6C55           BB                   6C92    mov bx, #msg_vert_res
26284 6C58           53                           push bx
26285 6C59           E8         112A              call _printf
26286 6C5C           83C4                   04    add sp, #4
26287 6C5F           EB           2A              jmp set_retcode
26288                       00006C61            vert_res_400:
26289                                             ; reset modeset ctl bit 7 and set bit 4
26290                                             ; set switches bit 3-0 to 0x09
26291 6C61           24                     7F    and al, #0x7f
26292 6C63           0C                     10    or al, #0x10
26293 6C65           80E4                   F0    and ah, #0xf0
26294 6C68           80CC                   09    or ah, #0x09
26295 6C6B           75           14              jnz set_vert_res
26296                       00006C6D            vert_res_350:
26297                                             ; reset modeset ctl bit 7 and bit 4
26298                                             ; set switches bit 3-0 to 0x09
26299 6C6D           24                     6F    and al, #0x6f
26300 6C6F           80E4                   F0    and ah, #0xf0
26301 6C72           80CC                   09    or ah, #0x09
26302 6C75           75           0A              jnz set_vert_res
26303                       00006C77            vert_res_200:
26304                                             ; set modeset ctl bit 7 and reset bit 4
26305                                             ; set switches bit 3-0 to 0x08
26306 6C77           24                     EF    and al, #0xef
26307 6C79           0C                     80    or al, #0x80
26308 6C7B           80E4                   F0    and ah, #0xf0
26309 6C7E           80CC                   08    or ah, #0x08
26310                       00006C81            set_vert_res:
26311 6C81           BB                   0089    mov bx, # 0x89
26312 6C84           8807                         mov [bx], al
26313 6C86           BB                   0088    mov bx, # 0x88
26314 6C89           8827                         mov [bx], ah
26315                       00006C8B            set_retcode:
26316 6C8B           B8                   1212    mov ax, #0x1212
26317 6C8E           5A                           pop dx
26318 6C8F           5B                           pop bx
26319 6C90           1F                           pop ds
26320 6C91           C3                           ret
26321                       00006C92            msg_vert_res:
26322 6C92                        53            .ascii "Select vert res (%02x) was discarded"
26323 6CB6                        0D            .byte 0x0d,0x0a,0x00
26324                       00006CB9            biosfn_enable_default_palette_loading:
26325 6CB9           1E                           push ds
26326 6CBA           53                           push bx
26327 6CBB           52                           push dx
26328 6CBC           88C2                         mov dl, al
26329 6CBE           80E2                   01    and dl, #0x01
26330                                             ;shl dl, 3
26331 6CC1           D0E2                         shl dl, 1
26332 6CC3           D0E2                         shl dl, 1
26333 6CC5           D0E2                         shl dl, 1
26334 6CC7           B8                   0040    mov ax, # 0x40
26335 6CCA           8ED8                         mov ds, ax
26336 6CCC           BB                   0089    mov bx, # 0x89
26337 6CCF           8A07                         mov al, [bx]
26338 6CD1           24                     F7    and al, #0xf7
26339 6CD3           08D0                         or al, dl
26340 6CD5           8807                         mov [bx], al
26341 6CD7           B8                   1212    mov ax, #0x1212
26342 6CDA           5A                           pop dx
26343 6CDB           5B                           pop bx
26344 6CDC           1F                           pop ds
26345 6CDD           C3                           ret
26346                       00006CDE            biosfn_enable_video_addressing:
26347 6CDE           53                           push bx
26348 6CDF           52                           push dx
26349 6CE0           88C3                         mov bl, al
26350 6CE2           80E3                   01    and bl, #0x01
26351 6CE5           80F3                   01    xor bl, #0x01
26352 6CE8           D0E3                         shl bl, 1
26353 6CEA           BA                   03CC    mov dx, # 0x3cc
26354 6CED           EC                           in al, dx
26355 6CEE           24                     FD    and al, #0xfd
26356 6CF0           08D8                         or al, bl
26357 6CF2           BA                   03C2    mov dx, # 0x3c2
26358 6CF5           EE                           out dx, al
26359 6CF6           B8                   1212    mov ax, #0x1212
26360 6CF9           5A                           pop dx
26361 6CFA           5B                           pop bx
26362 6CFB           C3                           ret
26363                       00006CFC            biosfn_enable_grayscale_summing:
26364 6CFC           1E                           push ds
26365 6CFD           53                           push bx
26366 6CFE           52                           push dx
26367 6CFF           88C2                         mov dl, al
26368 6D01           80E2                   01    and dl, #0x01
26369 6D04           80F2                   01    xor dl, #0x01
26370 6D07           D0E2                         shl dl, 1
26371 6D09           B8                   0040    mov ax, # 0x40
26372 6D0C           8ED8                         mov ds, ax
26373 6D0E           BB                   0089    mov bx, # 0x89
26374 6D11           8A07                         mov al, [bx]
26375 6D13           24                     FD    and al, #0xfd
26376 6D15           08D0                         or al, dl
26377 6D17           8807                         mov [bx], al
26378 6D19           B8                   1212    mov ax, #0x1212
26379 6D1C           5A                           pop dx
26380 6D1D           5B                           pop bx
26381 6D1E           1F                           pop ds
26382 6D1F           C3                           ret
26383                       00006D20            biosfn_enable_cursor_emulation:
26384 6D20           1E                           push ds
26385 6D21           53                           push bx
26386 6D22           52                           push dx
26387 6D23           88C2                         mov dl, al
26388 6D25           80E2                   01    and dl, #0x01
26389 6D28           80F2                   01    xor dl, #0x01
26390 6D2B           B8                   0040    mov ax, # 0x40
26391 6D2E           8ED8                         mov ds, ax
26392 6D30           BB                   0089    mov bx, # 0x89
26393 6D33           8A07                         mov al, [bx]
26394 6D35           24                     FE    and al, #0xfe
26395 6D37           08D0                         or al, dl
26396 6D39           8807                         mov [bx], al
26397 6D3B           B8                   1212    mov ax, #0x1212
26398 6D3E           5A                           pop dx
26399 6D3F           5B                           pop bx
26400 6D40           1F                           pop ds
26401 6D41           C3                           ret
26402                                           ! 3665 endasm
26403                                           !BCC_ENDASM
26404                                           ! 3666 static void biosfn_switch_video_interface (AL,ES,DX) Bit8u AL;Bit16u ES;Bit16u DX;
26405                       00006D42            _biosfn_switch_video_interface:
26406                                           !BCC_EOS
26407                                           !BCC_EOS
26408                                           !BCC_EOS
26409                                           ! 3667 {
26410                                           ! 3668  unimplemented();
26411 6D42           55                         push	bp
26412 6D43           89E5                       mov	bp,sp
26413                                           ! Debug: func () void = unimplemented+0 (used reg = )
26414 6D45           E8         1022            call	_unimplemented
26415                                           !BCC_EOS
26416                                           ! 3669 }
26417 6D48           5D                         pop	bp
26418 6D49           C3                         ret
26419                                           ! 3670 static void biosfn_enable_video_refresh_control (AL) Bit8u AL;
26420                       00006D4A            _biosfn_enable_video_refresh_control:
26421                                           !BCC_EOS
26422                                           ! 3671 {
26423                                           ! 3672  unimplemented();
26424 6D4A           55                         push	bp
26425 6D4B           89E5                       mov	bp,sp
26426                                           ! Debug: func () void = unimplemented+0 (used reg = )
26427 6D4D           E8         101A            call	_unimplemented
26428                                           !BCC_EOS
26429                                           ! 3673 }
26430 6D50           5D                         pop	bp
26431 6D51           C3                         ret
26432                                           ! 3674 static void biosfn_write_string (flag,page,attr,count,row,col,seg,offset)
26433                                           ! 3675 Bit8u flag;Bit8u page;Bit8u attr;Bit16u count;Bit8u row;Bit8u col;Bit16u seg;Bit16u offset;
26434                       00006D52            _biosfn_write_string:
26435                                           !BCC_EOS
26436                                           !BCC_EOS
26437                                           !BCC_EOS
26438                                           !BCC_EOS
26439                                           !BCC_EOS
26440                                           !BCC_EOS
26441                                           !BCC_EOS
26442                                           !BCC_EOS
26443                                           ! 3676 {
26444                                           ! 3677  Bit16u newcurs,oldcurs,dummy;
26445                                           !BCC_EOS
26446                                           ! 3678  Bit8u car,carattr;
26447                                           !BCC_EOS
26448                                           ! 3679  biosfn_get_cursor_pos(page,&dummy,&oldcurs);
26449 6D52           55                         push	bp
26450 6D53           89E5                       mov	bp,sp
26451 6D55           83C4                   F8  add	sp,*-8
26452                                           ! Debug: list * unsigned short oldcurs = S+$A-6 (used reg = )
26453 6D58           8D5E         FC            lea	bx,-4[bp]
26454 6D5B           53                         push	bx
26455                                           ! Debug: list * unsigned short dummy = S+$C-8 (used reg = )
26456 6D5C           8D5E         FA            lea	bx,-6[bp]
26457 6D5F           53                         push	bx
26458                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26459 6D60           8A46         06            mov	al,6[bp]
26460 6D63           30E4                       xor	ah,ah
26461 6D65           50                         push	ax
26462                                           ! Debug: func () void = biosfn_get_cursor_pos+0 (used reg = )
26463 6D66           E8         D66C            call	_biosfn_get_cursor_pos
26464 6D69           83C4                   06  add	sp,*6
26465                                           !BCC_EOS
26466                                           ! 3680  if(row==0xff)
26467                                           ! Debug: logeq int = const $FF to unsigned char row = [S+$A+$A] (used reg = )
26468 6D6C           8A46         0C            mov	al,$C[bp]
26469 6D6F           3C                     FF  cmp	al,#$FF
26470 6D71           75           12            jne 	.23A
26471                       00006D73            .23B:
26472                                           ! 3681   {col=oldcurs&0x00ff;
26473                                           ! Debug: and int = const $FF to unsigned short oldcurs = [S+$A-6] (used reg = )
26474 6D73           8A46         FC            mov	al,-4[bp]
26475                                           ! Debug: eq unsigned char = al+0 to unsigned char col = [S+$A+$C] (used reg = )
26476 6D76           8846         0E            mov	$E[bp],al
26477                                           !BCC_EOS
26478                                           ! 3682    row=(oldcurs&0xff00)>>8;
26479                                           ! Debug: and unsigned int = const $FF00 to unsigned short oldcurs = [S+$A-6] (used reg = )
26480 6D79           8B46         FC            mov	ax,-4[bp]
26481 6D7C           30C0                       xor	al,al
26482                                           ! Debug: sr int = const 8 to unsigned int = ax+0 (used reg = )
26483 6D7E           88E0                       mov	al,ah
26484 6D80           30E4                       xor	ah,ah
26485                                           ! Debug: eq unsigned int = ax+0 to unsigned char row = [S+$A+$A] (used reg = )
26486 6D82           8846         0C            mov	$C[bp],al
26487                                           !BCC_EOS
26488                                           ! 3683   }
26489                                           ! 3684  newcurs=row; newcurs<<=8; newcurs+=col;
26490                       00006D85            .23A:
26491                                           ! Debug: eq unsigned char row = [S+$A+$A] to unsigned short newcurs = [S+$A-4] (used reg = )
26492 6D85           8A46         0C            mov	al,$C[bp]
26493 6D88           30E4                       xor	ah,ah
26494 6D8A           8946         FE            mov	-2[bp],ax
26495                                           !BCC_EOS
26496                                           ! Debug: slab int = const 8 to unsigned short newcurs = [S+$A-4] (used reg = )
26497 6D8D           8B46         FE            mov	ax,-2[bp]
26498 6D90           88C4                       mov	ah,al
26499 6D92           30C0                       xor	al,al
26500 6D94           8946         FE            mov	-2[bp],ax
26501                                           !BCC_EOS
26502                                           ! Debug: addab unsigned char col = [S+$A+$C] to unsigned short newcurs = [S+$A-4] (used reg = )
26503 6D97           8B46         FE            mov	ax,-2[bp]
26504 6D9A           0246         0E            add	al,$E[bp]
26505 6D9D           80D4                   00  adc	ah,*0
26506 6DA0           8946         FE            mov	-2[bp],ax
26507                                           !BCC_EOS
26508                                           ! 3685  biosfn_set_cursor_pos(page,newcurs);
26509                                           ! Debug: list unsigned short newcurs = [S+$A-4] (used reg = )
26510 6DA3           FF76         FE            push	-2[bp]
26511                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26512 6DA6           8A46         06            mov	al,6[bp]
26513 6DA9           30E4                       xor	ah,ah
26514 6DAB           50                         push	ax
26515                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26516 6DAC           E8         D525            call	_biosfn_set_cursor_pos
26517 6DAF           83C4                   04  add	sp,*4
26518                                           !BCC_EOS
26519                                           ! 3686  while(count--!=0)
26520                                           ! 3687   {
26521 6DB2           EB           4F            jmp .23D
26522                       00006DB4            .23E:
26523                                           ! 3688    car=read_byte(seg,offset++);
26524                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26525 6DB4           8B46         12            mov	ax,$12[bp]
26526 6DB7           40                         inc	ax
26527 6DB8           8946         12            mov	$12[bp],ax
26528                                           ! Debug: list unsigned short = ax-1 (used reg = )
26529 6DBB           48                         dec	ax
26530 6DBC           50                         push	ax
26531                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26532 6DBD           FF76         10            push	$10[bp]
26533                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26534 6DC0           E8         0F18            call	_read_byte
26535 6DC3           83C4                   04  add	sp,*4
26536                                           ! Debug: eq unsigned char = al+0 to unsigned char car = [S+$A-9] (used reg = )
26537 6DC6           8846         F9            mov	-7[bp],al
26538                                           !BCC_EOS
26539                                           ! 3689    if((flag&0x02)!=0)
26540                                           ! Debug: and int = const 2 to unsigned char flag = [S+$A+2] (used reg = )
26541 6DC9           8A46         04            mov	al,4[bp]
26542 6DCC           24                     02  and	al,*2
26543                                           ! Debug: ne int = const 0 to unsigned char = al+0 (used reg = )
26544 6DCE           84C0                       test	al,al
26545 6DD0           74           15            je  	.23F
26546                       00006DD2            .240:
26547                                           ! 3690     attr=read_byte(seg,offset++);
26548                                           ! Debug: postinc unsigned short offset = [S+$A+$10] (used reg = )
26549 6DD2           8B46         12            mov	ax,$12[bp]
26550 6DD5           40                         inc	ax
26551 6DD6           8946         12            mov	$12[bp],ax
26552                                           ! Debug: list unsigned short = ax-1 (used reg = )
26553 6DD9           48                         dec	ax
26554 6DDA           50                         push	ax
26555                                           ! Debug: list unsigned short seg = [S+$C+$E] (used reg = )
26556 6DDB           FF76         10            push	$10[bp]
26557                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26558 6DDE           E8         0EFA            call	_read_byte
26559 6DE1           83C4                   04  add	sp,*4
26560                                           ! Debug: eq unsigned char = al+0 to unsigned char attr = [S+$A+6] (used reg = )
26561 6DE4           8846         08            mov	8[bp],al
26562                                           !BCC_EOS
26563                                           ! 3691    biosfn_write_teletype(car,page,attr,3);
26564                       00006DE7            .23F:
26565                                           ! Debug: list int = const 3 (used reg = )
26566 6DE7           B8                   0003  mov	ax,*3
26567 6DEA           50                         push	ax
26568                                           ! Debug: list unsigned char attr = [S+$C+6] (used reg = )
26569 6DEB           8A46         08            mov	al,8[bp]
26570 6DEE           30E4                       xor	ah,ah
26571 6DF0           50                         push	ax
26572                                           ! Debug: list unsigned char page = [S+$E+4] (used reg = )
26573 6DF1           8A46         06            mov	al,6[bp]
26574 6DF4           30E4                       xor	ah,ah
26575 6DF6           50                         push	ax
26576                                           ! Debug: list unsigned char car = [S+$10-9] (used reg = )
26577 6DF7           8A46         F9            mov	al,-7[bp]
26578 6DFA           30E4                       xor	ah,ah
26579 6DFC           50                         push	ax
26580                                           ! Debug: func () void = biosfn_write_teletype+0 (used reg = )
26581 6DFD           E8         F08D            call	_biosfn_write_teletype
26582 6E00           83C4                   08  add	sp,*8
26583                                           !BCC_EOS
26584                                           ! 3692   }
26585                                           ! 3693  if((flag&0x01)==0)
26586                       00006E03            .23D:
26587                                           ! Debug: postdec unsigned short count = [S+$A+8] (used reg = )
26588 6E03           8B46         0A            mov	ax,$A[bp]
26589 6E06           48                         dec	ax
26590 6E07           8946         0A            mov	$A[bp],ax
26591                                           ! Debug: ne int = const 0 to unsigned short = ax+1 (used reg = )
26592 6E0A           3D                   FFFF  cmp	ax,*-1
26593 6E0D           75           A5            jne	.23E
26594                       00006E0F            .241:
26595                       00006E0F            .23C:
26596                                           ! Debug: and int = const 1 to unsigned char flag = [S+$A+2] (used reg = )
26597 6E0F           8A46         04            mov	al,4[bp]
26598 6E12           24                     01  and	al,*1
26599                                           ! Debug: logeq int = const 0 to unsigned char = al+0 (used reg = )
26600 6E14           84C0                       test	al,al
26601 6E16           75           0F            jne 	.242
26602                       00006E18            .243:
26603                                           ! 3694   biosfn_set_cursor_pos(page,oldcurs);
26604                                           ! Debug: list unsigned short oldcurs = [S+$A-6] (used reg = )
26605 6E18           FF76         FC            push	-4[bp]
26606                                           ! Debug: list unsigned char page = [S+$C+4] (used reg = )
26607 6E1B           8A46         06            mov	al,6[bp]
26608 6E1E           30E4                       xor	ah,ah
26609 6E20           50                         push	ax
26610                                           ! Debug: func () void = biosfn_set_cursor_pos+0 (used reg = )
26611 6E21           E8         D4B0            call	_biosfn_set_cursor_pos
26612 6E24           83C4                   04  add	sp,*4
26613                                           !BCC_EOS
26614                                           ! 3695 }
26615                       00006E27            .242:
26616 6E27           89EC                       mov	sp,bp
26617 6E29           5D                         pop	bp
26618 6E2A           C3                         ret
26619                                           ! 3696 #asm
26620                                           !BCC_ASM
26621                       00000008            _biosfn_write_string.count	set	8
26622                       0000000E            _biosfn_write_string.seg	set	$E
26623                       0000000C            _biosfn_write_string.col	set	$C
26624                       00000002            _biosfn_write_string.flag	set	2
26625                       00000006            _biosfn_write_string.attr	set	6
26626                       00000004            _biosfn_write_string.page	set	4
26627                       0000000A            _biosfn_write_string.row	set	$A
26628                       00000010            _biosfn_write_string.offset	set	$10
26629                       00006E2B            biosfn_group_1A:
26630 6E2B           3C                     00    cmp al, #0x00
26631 6E2D           74           08              je biosfn_read_display_code
26632 6E2F           3C                     01    cmp al, #0x01
26633 6E31           74           19              je biosfn_set_display_code
26634 6E33           E8         0F42              call _unknown
26635 6E36           C3                           ret
26636                       00006E37            biosfn_read_display_code:
26637 6E37           1E                           push ds
26638 6E38           50                           push ax
26639 6E39           B8                   0040    mov ax, # 0x40
26640 6E3C           8ED8                         mov ds, ax
26641 6E3E           BB                   008A    mov bx, # 0x8A
26642 6E41           8A07                         mov al, [bx]
26643 6E43           88C3                         mov bl, al
26644 6E45           30FF                         xor bh, bh
26645 6E47           58                           pop ax
26646 6E48           88E0                         mov al, ah
26647 6E4A           1F                           pop ds
26648 6E4B           C3                           ret
26649                       00006E4C            biosfn_set_display_code:
26650 6E4C           1E                           push ds
26651 6E4D           50                           push ax
26652 6E4E           53                           push bx
26653 6E4F           B8                   0040    mov ax, # 0x40
26654 6E52           8ED8                         mov ds, ax
26655 6E54           89D8                         mov ax, bx
26656 6E56           BB                   008A    mov bx, # 0x8A
26657 6E59           8807                         mov [bx], al
26658 6E5B           88E0                         mov al, ah
26659 6E5D           30E4                         xor ah, ah
26660 6E5F           50                           push ax
26661 6E60           BB                   6E70    mov bx, #msg_alt_dcc
26662 6E63           53                           push bx
26663 6E64           E8         0F1F              call _printf
26664 6E67           83C4                   04    add sp, #4
26665 6E6A           5B                           pop bx
26666 6E6B           58                           pop ax
26667 6E6C           88E0                         mov al, ah
26668 6E6E           1F                           pop ds
26669 6E6F           C3                           ret
26670                       00006E70            msg_alt_dcc:
26671 6E70                        41            .ascii "Alternate Display code (%02x) was discarded"
26672 6E9B                        0D            .byte 0x0d,0x0a,0x00
26673                                           ! 3741 endasm
26674                                           !BCC_ENDASM
26675                                           ! 3742 static void biosfn_read_state_info (BX,ES,DI)
26676                                           ! Register BX used in function biosfn_write_string
26677                                           ! 3743 Bit16u BX;Bit16u ES;Bit16u DI;
26678                       00006E9E            _biosfn_read_state_info:
26679                                           !BCC_EOS
26680                                           !BCC_EOS
26681                                           !BCC_EOS
26682                                           ! 3744 {
26683                                           ! 3745  write_word(ES,DI+0x00,&static_functi
26684 6E9E           55                         push	bp
26685 6E9F           89E5                       mov	bp,sp
26686                                           ! 3745 onality);
26687                                           ! Debug: list * [$10] unsigned char = static_functionality+0 (used reg = )
26688 6EA1           BB                   0F36  mov	bx,#_static_functionality
26689 6EA4           53                         push	bx
26690                                           ! Debug: add int = const 0 to unsigned short DI = [S+4+6] (used reg = )
26691 6EA5           8B46         08            mov	ax,8[bp]
26692                                           ! Debug: list unsigned int = ax+0 (used reg = )
26693 6EA8           50                         push	ax
26694                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26695 6EA9           FF76         06            push	6[bp]
26696                                           ! Debug: func () void = write_word+0 (used reg = )
26697 6EAC           E8         0E6A            call	_write_word
26698 6EAF           89EC                       mov	sp,bp
26699                                           !BCC_EOS
26700                                           ! 3746  write_word(ES,DI+0x02,0xC000);
26701                                           ! Debug: list unsigned int = const $C000 (used reg = )
26702 6EB1           B8                   C000  mov	ax,#$C000
26703 6EB4           50                         push	ax
26704                                           ! Debug: add int = const 2 to unsigned short DI = [S+4+6] (used reg = )
26705 6EB5           8B46         08            mov	ax,8[bp]
26706                                           ! Debug: list unsigned int = ax+2 (used reg = )
26707 6EB8           40                         inc	ax
26708 6EB9           40                         inc	ax
26709 6EBA           50                         push	ax
26710                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26711 6EBB           FF76         06            push	6[bp]
26712                                           ! Debug: func () void = write_word+0 (used reg = )
26713 6EBE           E8         0E58            call	_write_word
26714 6EC1           89EC                       mov	sp,bp
26715                                           !BCC_EOS
26716                                           ! 3747  memcpyb(ES,DI+0x04,0x40,0x49,30);
26717                                           ! Debug: list int = const $1E (used reg = )
26718 6EC3           B8                   001E  mov	ax,*$1E
26719 6EC6           50                         push	ax
26720                                           ! Debug: list int = const $49 (used reg = )
26721 6EC7           B8                   0049  mov	ax,*$49
26722 6ECA           50                         push	ax
26723                                           ! Debug: list int = const $40 (used reg = )
26724 6ECB           B8                   0040  mov	ax,*$40
26725 6ECE           50                         push	ax
26726                                           ! Debug: add int = const 4 to unsigned short DI = [S+8+6] (used reg = )
26727 6ECF           8B46         08            mov	ax,8[bp]
26728                                           ! Debug: list unsigned int = ax+4 (used reg = )
26729 6ED2           05                   0004  add	ax,*4
26730 6ED5           50                         push	ax
26731                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26732 6ED6           FF76         06            push	6[bp]
26733                                           ! Debug: func () void = memcpyb+0 (used reg = )
26734 6ED9           E8         0D9F            call	_memcpyb
26735 6EDC           89EC                       mov	sp,bp
26736                                           !BCC_EOS
26737                                           ! 3748  memcpyb(ES,DI+0x22,0x40,0x84,3);
26738                                           ! Debug: list int = const 3 (used reg = )
26739 6EDE           B8                   0003  mov	ax,*3
26740 6EE1           50                         push	ax
26741                                           ! Debug: list int = const $84 (used reg = )
26742 6EE2           B8                   0084  mov	ax,#$84
26743 6EE5           50                         push	ax
26744                                           ! Debug: list int = const $40 (used reg = )
26745 6EE6           B8                   0040  mov	ax,*$40
26746 6EE9           50                         push	ax
26747                                           ! Debug: add int = const $22 to unsigned short DI = [S+8+6] (used reg = )
26748 6EEA           8B46         08            mov	ax,8[bp]
26749                                           ! Debug: list unsigned int = ax+$22 (used reg = )
26750 6EED           05                   0022  add	ax,*$22
26751 6EF0           50                         push	ax
26752                                           ! Debug: list unsigned short ES = [S+$A+4] (used reg = )
26753 6EF1           FF76         06            push	6[bp]
26754                                           ! Debug: func () void = memcpyb+0 (used reg = )
26755 6EF4           E8         0D84            call	_memcpyb
26756 6EF7           89EC                       mov	sp,bp
26757                                           !BCC_EOS
26758                                           ! 3749  write_byte(ES,DI+0x25,read_byte(0x40,0x8A));
26759                                           ! Debug: list int = const $8A (used reg = )
26760 6EF9           B8                   008A  mov	ax,#$8A
26761 6EFC           50                         push	ax
26762                                           ! Debug: list int = const $40 (used reg = )
26763 6EFD           B8                   0040  mov	ax,*$40
26764 6F00           50                         push	ax
26765                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
26766 6F01           E8         0DD7            call	_read_byte
26767 6F04           89EC                       mov	sp,bp
26768                                           ! Debug: list unsigned char = al+0 (used reg = )
26769 6F06           30E4                       xor	ah,ah
26770 6F08           50                         push	ax
26771                                           ! Debug: add int = const $25 to unsigned short DI = [S+4+6] (used reg = )
26772 6F09           8B46         08            mov	ax,8[bp]
26773                                           ! Debug: list unsigned int = ax+$25 (used reg = )
26774 6F0C           05                   0025  add	ax,*$25
26775 6F0F           50                         push	ax
26776                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26777 6F10           FF76         06            push	6[bp]
26778                                           ! Debug: func () void = write_byte+0 (used reg = )
26779 6F13           E8         0DEB            call	_write_byte
26780 6F16           89EC                       mov	sp,bp
26781                                           !BCC_EOS
26782                                           ! 3750  write_byte(ES,DI+0x26,0);
26783                                           ! Debug: list int = const 0 (used reg = )
26784 6F18           31C0                       xor	ax,ax
26785 6F1A           50                         push	ax
26786                                           ! Debug: add int = const $26 to unsigned short DI = [S+4+6] (used reg = )
26787 6F1B           8B46         08            mov	ax,8[bp]
26788                                           ! Debug: list unsigned int = ax+$26 (used reg = )
26789 6F1E           05                   0026  add	ax,*$26
26790 6F21           50                         push	ax
26791                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26792 6F22           FF76         06            push	6[bp]
26793                                           ! Debug: func () void = write_byte+0 (used reg = )
26794 6F25           E8         0DD9            call	_write_byte
26795 6F28           89EC                       mov	sp,bp
26796                                           !BCC_EOS
26797                                           ! 3751  write_byte(ES,DI+0x27,16);
26798                                           ! Debug: list int = const $10 (used reg = )
26799 6F2A           B8                   0010  mov	ax,*$10
26800 6F2D           50                         push	ax
26801                                           ! Debug: add int = const $27 to unsigned short DI = [S+4+6] (used reg = )
26802 6F2E           8B46         08            mov	ax,8[bp]
26803                                           ! Debug: list unsigned int = ax+$27 (used reg = )
26804 6F31           05                   0027  add	ax,*$27
26805 6F34           50                         push	ax
26806                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26807 6F35           FF76         06            push	6[bp]
26808                                           ! Debug: func () void = write_byte+0 (used reg = )
26809 6F38           E8         0DC6            call	_write_byte
26810 6F3B           89EC                       mov	sp,bp
26811                                           !BCC_EOS
26812                                           ! 3752  write_byte(ES,DI+0x28,0);
26813                                           ! Debug: list int = const 0 (used reg = )
26814 6F3D           31C0                       xor	ax,ax
26815 6F3F           50                         push	ax
26816                                           ! Debug: add int = const $28 to unsigned short DI = [S+4+6] (used reg = )
26817 6F40           8B46         08            mov	ax,8[bp]
26818                                           ! Debug: list unsigned int = ax+$28 (used reg = )
26819 6F43           05                   0028  add	ax,*$28
26820 6F46           50                         push	ax
26821                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26822 6F47           FF76         06            push	6[bp]
26823                                           ! Debug: func () void = write_byte+0 (used reg = )
26824 6F4A           E8         0DB4            call	_write_byte
26825 6F4D           89EC                       mov	sp,bp
26826                                           !BCC_EOS
26827                                           ! 3753  write_byte(ES,DI+0x29,8);
26828                                           ! Debug: list int = const 8 (used reg = )
26829 6F4F           B8                   0008  mov	ax,*8
26830 6F52           50                         push	ax
26831                                           ! Debug: add int = const $29 to unsigned short DI = [S+4+6] (used reg = )
26832 6F53           8B46         08            mov	ax,8[bp]
26833                                           ! Debug: list unsigned int = ax+$29 (used reg = )
26834 6F56           05                   0029  add	ax,*$29
26835 6F59           50                         push	ax
26836                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26837 6F5A           FF76         06            push	6[bp]
26838                                           ! Debug: func () void = write_byte+0 (used reg = )
26839 6F5D           E8         0DA1            call	_write_byte
26840 6F60           89EC                       mov	sp,bp
26841                                           !BCC_EOS
26842                                           ! 3754  write_byte(ES,DI+0x2a,2);
26843                                           ! Debug: list int = const 2 (used reg = )
26844 6F62           B8                   0002  mov	ax,*2
26845 6F65           50                         push	ax
26846                                           ! Debug: add int = const $2A to unsigned short DI = [S+4+6] (used reg = )
26847 6F66           8B46         08            mov	ax,8[bp]
26848                                           ! Debug: list unsigned int = ax+$2A (used reg = )
26849 6F69           05                   002A  add	ax,*$2A
26850 6F6C           50                         push	ax
26851                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26852 6F6D           FF76         06            push	6[bp]
26853                                           ! Debug: func () void = write_byte+0 (used reg = )
26854 6F70           E8         0D8E            call	_write_byte
26855 6F73           89EC                       mov	sp,bp
26856                                           !BCC_EOS
26857                                           ! 3755  write_byte(ES,DI+0x2b,0);
26858                                           ! Debug: list int = const 0 (used reg = )
26859 6F75           31C0                       xor	ax,ax
26860 6F77           50                         push	ax
26861                                           ! Debug: add int = const $2B to unsigned short DI = [S+4+6] (used reg = )
26862 6F78           8B46         08            mov	ax,8[bp]
26863                                           ! Debug: list unsigned int = ax+$2B (used reg = )
26864 6F7B           05                   002B  add	ax,*$2B
26865 6F7E           50                         push	ax
26866                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26867 6F7F           FF76         06            push	6[bp]
26868                                           ! Debug: func () void = write_byte+0 (used reg = )
26869 6F82           E8         0D7C            call	_write_byte
26870 6F85           89EC                       mov	sp,bp
26871                                           !BCC_EOS
26872                                           ! 3756  write_byte(ES,DI+0x2c,0);
26873                                           ! Debug: list int = const 0 (used reg = )
26874 6F87           31C0                       xor	ax,ax
26875 6F89           50                         push	ax
26876                                           ! Debug: add int = const $2C to unsigned short DI = [S+4+6] (used reg = )
26877 6F8A           8B46         08            mov	ax,8[bp]
26878                                           ! Debug: list unsigned int = ax+$2C (used reg = )
26879 6F8D           05                   002C  add	ax,*$2C
26880 6F90           50                         push	ax
26881                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26882 6F91           FF76         06            push	6[bp]
26883                                           ! Debug: func () void = write_byte+0 (used reg = )
26884 6F94           E8         0D6A            call	_write_byte
26885 6F97           89EC                       mov	sp,bp
26886                                           !BCC_EOS
26887                                           ! 3757  write_byte(ES,DI+0x31,3);
26888                                           ! Debug: list int = const 3 (used reg = )
26889 6F99           B8                   0003  mov	ax,*3
26890 6F9C           50                         push	ax
26891                                           ! Debug: add int = const $31 to unsigned short DI = [S+4+6] (used reg = )
26892 6F9D           8B46         08            mov	ax,8[bp]
26893                                           ! Debug: list unsigned int = ax+$31 (used reg = )
26894 6FA0           05                   0031  add	ax,*$31
26895 6FA3           50                         push	ax
26896                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26897 6FA4           FF76         06            push	6[bp]
26898                                           ! Debug: func () void = write_byte+0 (used reg = )
26899 6FA7           E8         0D57            call	_write_byte
26900 6FAA           89EC                       mov	sp,bp
26901                                           !BCC_EOS
26902                                           ! 3758  write_byte(ES,DI+0x32,0);
26903                                           ! Debug: list int = const 0 (used reg = )
26904 6FAC           31C0                       xor	ax,ax
26905 6FAE           50                         push	ax
26906                                           ! Debug: add int = const $32 to unsigned short DI = [S+4+6] (used reg = )
26907 6FAF           8B46         08            mov	ax,8[bp]
26908                                           ! Debug: list unsigned int = ax+$32 (used reg = )
26909 6FB2           05                   0032  add	ax,*$32
26910 6FB5           50                         push	ax
26911                                           ! Debug: list unsigned short ES = [S+6+4] (used reg = )
26912 6FB6           FF76         06            push	6[bp]
26913                                           ! Debug: func () void = write_byte+0 (used reg = )
26914 6FB9           E8         0D45            call	_write_byte
26915 6FBC           89EC                       mov	sp,bp
26916                                           !BCC_EOS
26917                                           ! 3759  memsetb(ES,DI+0x33,0,13);
26918                                           ! Debug: list int = const $D (used reg = )
26919 6FBE           B8                   000D  mov	ax,*$D
26920 6FC1           50                         push	ax
26921                                           ! Debug: list int = const 0 (used reg = )
26922 6FC2           31C0                       xor	ax,ax
26923 6FC4           50                         push	ax
26924                                           ! Debug: add int = const $33 to unsigned short DI = [S+6+6] (used reg = )
26925 6FC5           8B46         08            mov	ax,8[bp]
26926                                           ! Debug: list unsigned int = ax+$33 (used reg = )
26927 6FC8           05                   0033  add	ax,*$33
26928 6FCB           50                         push	ax
26929                                           ! Debug: list unsigned short ES = [S+8+4] (used reg = )
26930 6FCC           FF76         06            push	6[bp]
26931                                           ! Debug: func () void = memsetb+0 (used reg = )
26932 6FCF           E8         0C5F            call	_memsetb
26933 6FD2           89EC                       mov	sp,bp
26934                                           !BCC_EOS
26935                                           ! 3760 }
26936 6FD4           5D                         pop	bp
26937 6FD5           C3                         ret
26938                                           ! 3761 static Bit16u biosfn_read_video_state_size2 (CX)
26939                                           ! Register BX used in function biosfn_read_state_info
26940                                           ! 3762      Bit16u CX;
26941                       00006FD6            _biosfn_read_video_state_size2:
26942                                           !BCC_EOS
26943                                           ! 3763 {
26944                                           ! 3764     Bit16u size;
26945                                           !BCC_EOS
26946                                           ! 3765     size = 0;
26947 6FD6           55                         push	bp
26948 6FD7           89E5                       mov	bp,sp
26949 6FD9           4C                         dec	sp
26950 6FDA           4C                         dec	sp
26951                                           ! Debug: eq int = const 0 to unsigned short size = [S+4-4] (used reg = )
26952 6FDB           31C0                       xor	ax,ax
26953 6FDD           8946         FE            mov	-2[bp],ax
26954                                           !BCC_EOS
26955                                           ! 3766     if (CX & 1) {
26956                                           ! Debug: and int = const 1 to unsigned short CX = [S+4+2] (used reg = )
26957 6FE0           8A46         04            mov	al,4[bp]
26958 6FE3           24                     01  and	al,*1
26959 6FE5           84C0                       test	al,al
26960 6FE7           74           09            je  	.244
26961                       00006FE9            .245:
26962                                           ! 3767         size += 0x46;
26963                                           ! Debug: addab int = const $46 to unsigned short size = [S+4-4] (used reg = )
26964 6FE9           8B46         FE            mov	ax,-2[bp]
26965 6FEC           05                   0046  add	ax,*$46
26966 6FEF           8946         FE            mov	-2[bp],ax
26967                                           !BCC_EOS
26968                                           ! 3768     }
26969                                           ! 3769     if (CX & 2) {
26970                       00006FF2            .244:
26971                                           ! Debug: and int = const 2 to unsigned short CX = [S+4+2] (used reg = )
26972 6FF2           8A46         04            mov	al,4[bp]
26973 6FF5           24                     02  and	al,*2
26974 6FF7           84C0                       test	al,al
26975 6FF9           74           09            je  	.246
26976                       00006FFB            .247:
26977                                           ! 3770         size += (5 + 8 + 5) * 2 + 6;
26978                                           ! Debug: addab int = const $2A to unsigned short size = [S+4-4] (used reg = )
26979 6FFB           8B46         FE            mov	ax,-2[bp]
26980 6FFE           05                   002A  add	ax,*$2A
26981 7001           8946         FE            mov	-2[bp],ax
26982                                           !BCC_EOS
26983                                           ! 3771     }
26984                                           ! 3772     if (CX & 4) {
26985                       00007004            .246:
26986                                           ! Debug: and int = const 4 to unsigned short CX = [S+4+2] (used reg = )
26987 7004           8A46         04            mov	al,4[bp]
26988 7007           24                     04  and	al,*4
26989 7009           84C0                       test	al,al
26990 700B           74           09            je  	.248
26991                       0000700D            .249:
26992                                           ! 3773         size += 3 + 256 * 3 + 1;
26993                                           ! Debug: addab int = const $304 to unsigned short size = [S+4-4] (used reg = )
26994 700D           8B46         FE            mov	ax,-2[bp]
26995 7010           05                   0304  add	ax,#$304
26996 7013           8946         FE            mov	-2[bp],ax
26997                                           !BCC_EOS
26998                                           ! 3774 }
26999                                           ! 3775     return size;
27000                       00007016            .248:
27001 7016           8B46         FE            mov	ax,-2[bp]
27002 7019           89EC                       mov	sp,bp
27003 701B           5D                         pop	bp
27004 701C           C3                         ret
27005                                           !BCC_EOS
27006                                           ! 3776 }
27007                                           ! 3777 static void biosfn_read_video_state_size (CX, BX)
27008                                           ! 3778      Bit16u CX; Bit16u *BX;
27009                       0000701D            _biosfn_read_video_state_size:
27010                                           !BCC_EOS
27011                                           !BCC_EOS
27012                                           ! 3779 {
27013                                           ! 3780     Bit16u ss=get_SS();
27014 701D           55                         push	bp
27015 701E           89E5                       mov	bp,sp
27016 7020           4C                         dec	sp
27017 7021           4C                         dec	sp
27018                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
27019 7022           E8         0D42            call	_get_SS
27020                                           ! Debug: eq unsigned short = ax+0 to unsigned short ss = [S+4-4] (used reg = )
27021 7025           8946         FE            mov	-2[bp],ax
27022                                           !BCC_EOS
27023                                           ! 3781     write_word(ss, BX, biosfn_read_video_state_size2(CX));
27024                                           ! Debug: list unsigned short CX = [S+4+2] (used reg = )
27025 7028           FF76         04            push	4[bp]
27026                                           ! Debug: func () unsigned short = biosfn_read_video_state_size2+0 (used reg = )
27027 702B           E8         FFA8            call	_biosfn_read_video_state_size2
27028 702E           44                         inc	sp
27029 702F           44                         inc	sp
27030                                           ! Debug: list unsigned short = ax+0 (used reg = )
27031 7030           50                         push	ax
27032                                           ! Debug: list * unsigned short BX = [S+6+4] (used reg = )
27033 7031           FF76         06            push	6[bp]
27034                                           ! Debug: list unsigned short ss = [S+8-4] (used reg = )
27035 7034           FF76         FE            push	-2[bp]
27036                                           ! Debug: func () void = write_word+0 (used reg = )
27037 7037           E8         0CDF            call	_write_word
27038 703A           83C4                   06  add	sp,*6
27039                                           !BCC_EOS
27040                                           ! 3782 }
27041 703D           89EC                       mov	sp,bp
27042 703F           5D                         pop	bp
27043 7040           C3                         ret
27044                                           ! 3783 static Bit16u biosfn_save_video_state (CX,ES,BX)
27045                                           ! 3784      Bit16u CX;Bit16u ES;Bit16u BX;
27046                       00007041            _biosfn_save_video_state:
27047                                           !BCC_EOS
27048                                           !BCC_EOS
27049                                           !BCC_EOS
27050                                           ! 3785 {
27051                                           ! 3786     Bit16u i, v, crtc_addr, ar_index;
27052                                           !BCC_EOS
27053                                           ! 3787     crtc_addr = read_word(0x40, 0x63);
27054 7041           55                         push	bp
27055 7042           89E5                       mov	bp,sp
27056 7044           83C4                   F8  add	sp,*-8
27057                                           ! Debug: list int = const $63 (used reg = )
27058 7047           B8                   0063  mov	ax,*$63
27059 704A           50                         push	ax
27060                                           ! Debug: list int = const $40 (used reg = )
27061 704B           B8                   0040  mov	ax,*$40
27062 704E           50                         push	ax
27063                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27064 704F           E8         0C9C            call	_read_word
27065 7052           83C4                   04  add	sp,*4
27066                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27067 7055           8946         FA            mov	-6[bp],ax
27068                                           !BCC_EOS
27069                                           ! 3788     if (CX & 1) {
27070                                           ! Debug: and int = const 1 to unsigned short CX = [S+$A+2] (used reg = )
27071 7058           8A46         04            mov	al,4[bp]
27072 705B           24                     01  and	al,*1
27073 705D           84C0                       test	al,al
27074 705F   7503    E9         0266            beq 	.24A
27075                       00007064            .24B:
27076                                           ! 3789         write_byte(ES, BX, inb(0x3c4)); BX++;
27077                                           ! Debug: list int = const $3C4 (used reg = )
27078 7064           B8                   03C4  mov	ax,#$3C4
27079 7067           50                         push	ax
27080                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27081 7068           E8         0CC6            call	_inb
27082 706B           44                         inc	sp
27083 706C           44                         inc	sp
27084                                           ! Debug: list unsigned char = al+0 (used reg = )
27085 706D           30E4                       xor	ah,ah
27086 706F           50                         push	ax
27087                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27088 7070           FF76         08            push	8[bp]
27089                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27090 7073           FF76         06            push	6[bp]
27091                                           ! Debug: func () void = write_byte+0 (used reg = )
27092 7076           E8         0C88            call	_write_byte
27093 7079           83C4                   06  add	sp,*6
27094                                           !BCC_EOS
27095                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27096 707C           8B46         08            mov	ax,8[bp]
27097 707F           40                         inc	ax
27098 7080           8946         08            mov	8[bp],ax
27099                                           !BCC_EOS
27100                                           ! 3790         write_byte(ES, BX, inb(crtc_addr)); BX++;
27101                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27102 7083           FF76         FA            push	-6[bp]
27103                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27104 7086           E8         0CA8            call	_inb
27105 7089           44                         inc	sp
27106 708A           44                         inc	sp
27107                                           ! Debug: list unsigned char = al+0 (used reg = )
27108 708B           30E4                       xor	ah,ah
27109 708D           50                         push	ax
27110                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27111 708E           FF76         08            push	8[bp]
27112                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27113 7091           FF76         06            push	6[bp]
27114                                           ! Debug: func () void = write_byte+0 (used reg = )
27115 7094           E8         0C6A            call	_write_byte
27116 7097           83C4                   06  add	sp,*6
27117                                           !BCC_EOS
27118                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27119 709A           8B46         08            mov	ax,8[bp]
27120 709D           40                         inc	ax
27121 709E           8946         08            mov	8[bp],ax
27122                                           !BCC_EOS
27123                                           ! 3791         write_byte(ES, BX, inb(0x3ce)); BX++;
27124                                           ! Debug: list int = const $3CE (used reg = )
27125 70A1           B8                   03CE  mov	ax,#$3CE
27126 70A4           50                         push	ax
27127                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27128 70A5           E8         0C89            call	_inb
27129 70A8           44                         inc	sp
27130 70A9           44                         inc	sp
27131                                           ! Debug: list unsigned char = al+0 (used reg = )
27132 70AA           30E4                       xor	ah,ah
27133 70AC           50                         push	ax
27134                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27135 70AD           FF76         08            push	8[bp]
27136                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27137 70B0           FF76         06            push	6[bp]
27138                                           ! Debug: func () void = write_byte+0 (used reg = )
27139 70B3           E8         0C4B            call	_write_byte
27140 70B6           83C4                   06  add	sp,*6
27141                                           !BCC_EOS
27142                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27143 70B9           8B46         08            mov	ax,8[bp]
27144 70BC           40                         inc	ax
27145 70BD           8946         08            mov	8[bp],ax
27146                                           !BCC_EOS
27147                                           ! 3792         inb(0x3da);
27148                                           ! Debug: list int = const $3DA (used reg = )
27149 70C0           B8                   03DA  mov	ax,#$3DA
27150 70C3           50                         push	ax
27151                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27152 70C4           E8         0C6A            call	_inb
27153 70C7           44                         inc	sp
27154 70C8           44                         inc	sp
27155                                           !BCC_EOS
27156                                           ! 3793         ar_index = inb(0x3c0);
27157                                           ! Debug: list int = const $3C0 (used reg = )
27158 70C9           B8                   03C0  mov	ax,#$3C0
27159 70CC           50                         push	ax
27160                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27161 70CD           E8         0C61            call	_inb
27162 70D0           44                         inc	sp
27163 70D1           44                         inc	sp
27164                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$A-$A] (used reg = )
27165 70D2           30E4                       xor	ah,ah
27166 70D4           8946         F8            mov	-8[bp],ax
27167                                           !BCC_EOS
27168                                           ! 3794         write_byte(ES, BX, ar_index); BX++;
27169                                           ! Debug: list unsigned short ar_index = [S+$A-$A] (used reg = )
27170 70D7           FF76         F8            push	-8[bp]
27171                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27172 70DA           FF76         08            push	8[bp]
27173                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27174 70DD           FF76         06            push	6[bp]
27175                                           ! Debug: func () void = write_byte+0 (used reg = )
27176 70E0           E8         0C1E            call	_write_byte
27177 70E3           83C4                   06  add	sp,*6
27178                                           !BCC_EOS
27179                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27180 70E6           8B46         08            mov	ax,8[bp]
27181 70E9           40                         inc	ax
27182 70EA           8946         08            mov	8[bp],ax
27183                                           !BCC_EOS
27184                                           ! 3795         write_byte(ES, BX, inb(0x3ca)); BX++;
27185                                           ! Debug: list int = const $3CA (used reg = )
27186 70ED           B8                   03CA  mov	ax,#$3CA
27187 70F0           50                         push	ax
27188                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27189 70F1           E8         0C3D            call	_inb
27190 70F4           44                         inc	sp
27191 70F5           44                         inc	sp
27192                                           ! Debug: list unsigned char = al+0 (used reg = )
27193 70F6           30E4                       xor	ah,ah
27194 70F8           50                         push	ax
27195                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27196 70F9           FF76         08            push	8[bp]
27197                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27198 70FC           FF76         06            push	6[bp]
27199                                           ! Debug: func () void = write_byte+0 (used reg = )
27200 70FF           E8         0BFF            call	_write_byte
27201 7102           83C4                   06  add	sp,*6
27202                                           !BCC_EOS
27203                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27204 7105           8B46         08            mov	ax,8[bp]
27205 7108           40                         inc	ax
27206 7109           8946         08            mov	8[bp],ax
27207                                           !BCC_EOS
27208                                           ! 3796         for(i=1;i<=4;i++){
27209                                           ! Debug: eq int = const 1 to unsigned short i = [S+$A-4] (used reg = )
27210 710C           B8                   0001  mov	ax,*1
27211 710F           8946         FE            mov	-2[bp],ax
27212                                           !BCC_EOS
27213                                           !BCC_EOS
27214 7112           EB           33            jmp .24E
27215                       00007114            .24F:
27216                                           ! 3797             outb(0x3c4, i);
27217                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27218 7114           FF76         FE            push	-2[bp]
27219                                           ! Debug: list int = const $3C4 (used reg = )
27220 7117           B8                   03C4  mov	ax,#$3C4
27221 711A           50                         push	ax
27222                                           ! Debug: func () void = outb+0 (used reg = )
27223 711B           E8         0C29            call	_outb
27224 711E           83C4                   04  add	sp,*4
27225                                           !BCC_EOS
27226                                           ! 3798             write_byte(ES, BX, inb(0x3c5)); BX++;
27227                                           ! Debug: list int = const $3C5 (used reg = )
27228 7121           B8                   03C5  mov	ax,#$3C5
27229 7124           50                         push	ax
27230                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27231 7125           E8         0C09            call	_inb
27232 7128           44                         inc	sp
27233 7129           44                         inc	sp
27234                                           ! Debug: list unsigned char = al+0 (used reg = )
27235 712A           30E4                       xor	ah,ah
27236 712C           50                         push	ax
27237                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27238 712D           FF76         08            push	8[bp]
27239                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27240 7130           FF76         06            push	6[bp]
27241                                           ! Debug: func () void = write_byte+0 (used reg = )
27242 7133           E8         0BCB            call	_write_byte
27243 7136           83C4                   06  add	sp,*6
27244                                           !BCC_EOS
27245                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27246 7139           8B46         08            mov	ax,8[bp]
27247 713C           40                         inc	ax
27248 713D           8946         08            mov	8[bp],ax
27249                                           !BCC_EOS
27250                                           ! 3799         }
27251                                           ! 3800         outb(0x3c4, 0);
27252                       00007140            .24D:
27253                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27254 7140           8B46         FE            mov	ax,-2[bp]
27255 7143           40                         inc	ax
27256 7144           8946         FE            mov	-2[bp],ax
27257                       00007147            .24E:
27258                                           ! Debug: le int = const 4 to unsigned short i = [S+$A-4] (used reg = )
27259 7147           8B46         FE            mov	ax,-2[bp]
27260 714A           3D                   0004  cmp	ax,*4
27261 714D           76           C5            jbe	.24F
27262                       0000714F            .250:
27263                       0000714F            .24C:
27264                                           ! Debug: list int = const 0 (used reg = )
27265 714F           31C0                       xor	ax,ax
27266 7151           50                         push	ax
27267                                           ! Debug: list int = const $3C4 (used reg = )
27268 7152           B8                   03C4  mov	ax,#$3C4
27269 7155           50                         push	ax
27270                                           ! Debug: func () void = outb+0 (used reg = )
27271 7156           E8         0BEE            call	_outb
27272 7159           83C4                   04  add	sp,*4
27273                                           !BCC_EOS
27274                                           ! 3801         write_byte(ES, BX, inb(0x3c5)); BX++;
27275                                           ! Debug: list int = const $3C5 (used reg = )
27276 715C           B8                   03C5  mov	ax,#$3C5
27277 715F           50                         push	ax
27278                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27279 7160           E8         0BCE            call	_inb
27280 7163           44                         inc	sp
27281 7164           44                         inc	sp
27282                                           ! Debug: list unsigned char = al+0 (used reg = )
27283 7165           30E4                       xor	ah,ah
27284 7167           50                         push	ax
27285                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27286 7168           FF76         08            push	8[bp]
27287                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27288 716B           FF76         06            push	6[bp]
27289                                           ! Debug: func () void = write_byte+0 (used reg = )
27290 716E           E8         0B90            call	_write_byte
27291 7171           83C4                   06  add	sp,*6
27292                                           !BCC_EOS
27293                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27294 7174           8B46         08            mov	ax,8[bp]
27295 7177           40                         inc	ax
27296 7178           8946         08            mov	8[bp],ax
27297                                           !BCC_EOS
27298                                           ! 3802         for(i=0;i<=0x18;i++) {
27299                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27300 717B           31C0                       xor	ax,ax
27301 717D           8946         FE            mov	-2[bp],ax
27302                                           !BCC_EOS
27303                                           !BCC_EOS
27304 7180           EB           33            jmp .253
27305                       00007182            .254:
27306                                           ! 3803             outb(crtc_addr,i);
27307                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27308 7182           FF76         FE            push	-2[bp]
27309                                           ! Debug: list unsigned short crtc_addr = [S+$C-8] (used reg = )
27310 7185           FF76         FA            push	-6[bp]
27311                                           ! Debug: func () void = outb+0 (used reg = )
27312 7188           E8         0BBC            call	_outb
27313 718B           83C4                   04  add	sp,*4
27314                                           !BCC_EOS
27315                                           ! 3804             write_byte(ES, BX, inb(crtc_addr+1)); BX++;
27316                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$A-8] (used reg = )
27317 718E           8B46         FA            mov	ax,-6[bp]
27318                                           ! Debug: list unsigned int = ax+1 (used reg = )
27319 7191           40                         inc	ax
27320 7192           50                         push	ax
27321                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27322 7193           E8         0B9B            call	_inb
27323 7196           44                         inc	sp
27324 7197           44                         inc	sp
27325                                           ! Debug: list unsigned char = al+0 (used reg = )
27326 7198           30E4                       xor	ah,ah
27327 719A           50                         push	ax
27328                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27329 719B           FF76         08            push	8[bp]
27330                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27331 719E           FF76         06            push	6[bp]
27332                                           ! Debug: func () void = write_byte+0 (used reg = )
27333 71A1           E8         0B5D            call	_write_byte
27334 71A4           83C4                   06  add	sp,*6
27335                                           !BCC_EOS
27336                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27337 71A7           8B46         08            mov	ax,8[bp]
27338 71AA           40                         inc	ax
27339 71AB           8946         08            mov	8[bp],ax
27340                                           !BCC_EOS
27341                                           ! 3805         }
27342                                           ! 3806         for(i=0;i<=0x13;i++) {
27343                       000071AE            .252:
27344                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27345 71AE           8B46         FE            mov	ax,-2[bp]
27346 71B1           40                         inc	ax
27347 71B2           8946         FE            mov	-2[bp],ax
27348                       000071B5            .253:
27349                                           ! Debug: le int = const $18 to unsigned short i = [S+$A-4] (used reg = )
27350 71B5           8B46         FE            mov	ax,-2[bp]
27351 71B8           3D                   0018  cmp	ax,*$18
27352 71BB           76           C5            jbe	.254
27353                       000071BD            .255:
27354                       000071BD            .251:
27355                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27356 71BD           31C0                       xor	ax,ax
27357 71BF           8946         FE            mov	-2[bp],ax
27358                                           !BCC_EOS
27359                                           !BCC_EOS
27360 71C2           EB           44            jmp .258
27361                       000071C4            .259:
27362                                           ! 3807             inb(0x3da);
27363                                           ! Debug: list int = const $3DA (used reg = )
27364 71C4           B8                   03DA  mov	ax,#$3DA
27365 71C7           50                         push	ax
27366                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27367 71C8           E8         0B66            call	_inb
27368 71CB           44                         inc	sp
27369 71CC           44                         inc	sp
27370                                           !BCC_EOS
27371                                           ! 3808             outb(0x3c0, i | (ar_index & 0x20));
27372                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$A-$A] (used reg = )
27373 71CD           8A46         F8            mov	al,-8[bp]
27374 71D0           24                     20  and	al,*$20
27375                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$A-4] (used reg = )
27376                                           ! Debug: expression subtree swapping
27377 71D2           30E4                       xor	ah,ah
27378 71D4           0B46         FE            or	ax,-2[bp]
27379                                           ! Debug: list unsigned int = ax+0 (used reg = )
27380 71D7           50                         push	ax
27381                                           ! Debug: list int = const $3C0 (used reg = )
27382 71D8           B8                   03C0  mov	ax,#$3C0
27383 71DB           50                         push	ax
27384                                           ! Debug: func () void = outb+0 (used reg = )
27385 71DC           E8         0B68            call	_outb
27386 71DF           83C4                   04  add	sp,*4
27387                                           !BCC_EOS
27388                                           ! 3809             write_byte(ES, BX, inb(0x3c1)); BX++;
27389                                           ! Debug: list int = const $3C1 (used reg = )
27390 71E2           B8                   03C1  mov	ax,#$3C1
27391 71E5           50                         push	ax
27392                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27393 71E6           E8         0B48            call	_inb
27394 71E9           44                         inc	sp
27395 71EA           44                         inc	sp
27396                                           ! Debug: list unsigned char = al+0 (used reg = )
27397 71EB           30E4                       xor	ah,ah
27398 71ED           50                         push	ax
27399                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27400 71EE           FF76         08            push	8[bp]
27401                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27402 71F1           FF76         06            push	6[bp]
27403                                           ! Debug: func () void = write_byte+0 (used reg = )
27404 71F4           E8         0B0A            call	_write_byte
27405 71F7           83C4                   06  add	sp,*6
27406                                           !BCC_EOS
27407                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27408 71FA           8B46         08            mov	ax,8[bp]
27409 71FD           40                         inc	ax
27410 71FE           8946         08            mov	8[bp],ax
27411                                           !BCC_EOS
27412                                           ! 3810         }
27413                                           ! 3811         inb(0x3da);
27414                       00007201            .257:
27415                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27416 7201           8B46         FE            mov	ax,-2[bp]
27417 7204           40                         inc	ax
27418 7205           8946         FE            mov	-2[bp],ax
27419                       00007208            .258:
27420                                           ! Debug: le int = const $13 to unsigned short i = [S+$A-4] (used reg = )
27421 7208           8B46         FE            mov	ax,-2[bp]
27422 720B           3D                   0013  cmp	ax,*$13
27423 720E           76           B4            jbe	.259
27424                       00007210            .25A:
27425                       00007210            .256:
27426                                           ! Debug: list int = const $3DA (used reg = )
27427 7210           B8                   03DA  mov	ax,#$3DA
27428 7213           50                         push	ax
27429                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27430 7214           E8         0B1A            call	_inb
27431 7217           44                         inc	sp
27432 7218           44                         inc	sp
27433                                           !BCC_EOS
27434                                           ! 3812         for(i=0;i<=8;i++) {
27435                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27436 7219           31C0                       xor	ax,ax
27437 721B           8946         FE            mov	-2[bp],ax
27438                                           !BCC_EOS
27439                                           !BCC_EOS
27440 721E           EB           33            jmp .25D
27441                       00007220            .25E:
27442                                           ! 3813             outb(0x3ce,i);
27443                                           ! Debug: list unsigned short i = [S+$A-4] (used reg = )
27444 7220           FF76         FE            push	-2[bp]
27445                                           ! Debug: list int = const $3CE (used reg = )
27446 7223           B8                   03CE  mov	ax,#$3CE
27447 7226           50                         push	ax
27448                                           ! Debug: func () void = outb+0 (used reg = )
27449 7227           E8         0B1D            call	_outb
27450 722A           83C4                   04  add	sp,*4
27451                                           !BCC_EOS
27452                                           ! 3814             write_byte(ES, BX, inb(0x3cf)); BX++;
27453                                           ! Debug: list int = const $3CF (used reg = )
27454 722D           B8                   03CF  mov	ax,#$3CF
27455 7230           50                         push	ax
27456                                           ! Debug: func () unsigned char = inb+0 (used reg = )
27457 7231           E8         0AFD            call	_inb
27458 7234           44                         inc	sp
27459 7235           44                         inc	sp
27460                                           ! Debug: list unsigned char = al+0 (used reg = )
27461 7236           30E4                       xor	ah,ah
27462 7238           50                         push	ax
27463                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27464 7239           FF76         08            push	8[bp]
27465                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27466 723C           FF76         06            push	6[bp]
27467                                           ! Debug: func () void = write_byte+0 (used reg = )
27468 723F           E8         0ABF            call	_write_byte
27469 7242           83C4                   06  add	sp,*6
27470                                           !BCC_EOS
27471                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27472 7245           8B46         08            mov	ax,8[bp]
27473 7248           40                         inc	ax
27474 7249           8946         08            mov	8[bp],ax
27475                                           !BCC_EOS
27476                                           ! 3815         }
27477                                           ! 3816         write_word(ES, BX, crtc_addr); BX+= 2;
27478                       0000724C            .25C:
27479                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27480 724C           8B46         FE            mov	ax,-2[bp]
27481 724F           40                         inc	ax
27482 7250           8946         FE            mov	-2[bp],ax
27483                       00007253            .25D:
27484                                           ! Debug: le int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27485 7253           8B46         FE            mov	ax,-2[bp]
27486 7256           3D                   0008  cmp	ax,*8
27487 7259           76           C5            jbe	.25E
27488                       0000725B            .25F:
27489                       0000725B            .25B:
27490                                           ! Debug: list unsigned short crtc_addr = [S+$A-8] (used reg = )
27491 725B           FF76         FA            push	-6[bp]
27492                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27493 725E           FF76         08            push	8[bp]
27494                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27495 7261           FF76         06            push	6[bp]
27496                                           ! Debug: func () void = write_word+0 (used reg = )
27497 7264           E8         0AB2            call	_write_word
27498 7267           83C4                   06  add	sp,*6
27499                                           !BCC_EOS
27500                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27501 726A           8B46         08            mov	ax,8[bp]
27502 726D           40                         inc	ax
27503 726E           40                         inc	ax
27504 726F           8946         08            mov	8[bp],ax
27505                                           !BCC_EOS
27506                                           ! 3817         write_byte(ES, BX, 0); BX++;
27507                                           ! Debug: list int = const 0 (used reg = )
27508 7272           31C0                       xor	ax,ax
27509 7274           50                         push	ax
27510                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27511 7275           FF76         08            push	8[bp]
27512                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27513 7278           FF76         06            push	6[bp]
27514                                           ! Debug: func () void = write_byte+0 (used reg = )
27515 727B           E8         0A83            call	_write_byte
27516 727E           83C4                   06  add	sp,*6
27517                                           !BCC_EOS
27518                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27519 7281           8B46         08            mov	ax,8[bp]
27520 7284           40                         inc	ax
27521 7285           8946         08            mov	8[bp],ax
27522                                           !BCC_EOS
27523                                           ! 3818         write_by
27524                                           ! 3818 te(ES, BX, 0); BX++;
27525                                           ! Debug: list int = const 0 (used reg = )
27526 7288           31C0                       xor	ax,ax
27527 728A           50                         push	ax
27528                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27529 728B           FF76         08            push	8[bp]
27530                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27531 728E           FF76         06            push	6[bp]
27532                                           ! Debug: func () void = write_byte+0 (used reg = )
27533 7291           E8         0A6D            call	_write_byte
27534 7294           83C4                   06  add	sp,*6
27535                                           !BCC_EOS
27536                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27537 7297           8B46         08            mov	ax,8[bp]
27538 729A           40                         inc	ax
27539 729B           8946         08            mov	8[bp],ax
27540                                           !BCC_EOS
27541                                           ! 3819         write_byte(ES, BX, 0); BX++;
27542                                           ! Debug: list int = const 0 (used reg = )
27543 729E           31C0                       xor	ax,ax
27544 72A0           50                         push	ax
27545                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27546 72A1           FF76         08            push	8[bp]
27547                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27548 72A4           FF76         06            push	6[bp]
27549                                           ! Debug: func () void = write_byte+0 (used reg = )
27550 72A7           E8         0A57            call	_write_byte
27551 72AA           83C4                   06  add	sp,*6
27552                                           !BCC_EOS
27553                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27554 72AD           8B46         08            mov	ax,8[bp]
27555 72B0           40                         inc	ax
27556 72B1           8946         08            mov	8[bp],ax
27557                                           !BCC_EOS
27558                                           ! 3820         write_byte(ES, BX, 0); BX++;
27559                                           ! Debug: list int = const 0 (used reg = )
27560 72B4           31C0                       xor	ax,ax
27561 72B6           50                         push	ax
27562                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27563 72B7           FF76         08            push	8[bp]
27564                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27565 72BA           FF76         06            push	6[bp]
27566                                           ! Debug: func () void = write_byte+0 (used reg = )
27567 72BD           E8         0A41            call	_write_byte
27568 72C0           83C4                   06  add	sp,*6
27569                                           !BCC_EOS
27570                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27571 72C3           8B46         08            mov	ax,8[bp]
27572 72C6           40                         inc	ax
27573 72C7           8946         08            mov	8[bp],ax
27574                                           !BCC_EOS
27575                                           ! 3821     }
27576                                           ! 3822     if (CX & 2) {
27577                       000072CA            .24A:
27578                                           ! Debug: and int = const 2 to unsigned short CX = [S+$A+2] (used reg = )
27579 72CA           8A46         04            mov	al,4[bp]
27580 72CD           24                     02  and	al,*2
27581 72CF           84C0                       test	al,al
27582 72D1   7503    E9         0270            beq 	.260
27583                       000072D6            .261:
27584                                           ! 3823         write_byte(ES, BX, read_byte(0x40,0x49)); BX++;
27585                                           ! Debug: list int = const $49 (used reg = )
27586 72D6           B8                   0049  mov	ax,*$49
27587 72D9           50                         push	ax
27588                                           ! Debug: list int = const $40 (used reg = )
27589 72DA           B8                   0040  mov	ax,*$40
27590 72DD           50                         push	ax
27591                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27592 72DE           E8         09FA            call	_read_byte
27593 72E1           83C4                   04  add	sp,*4
27594                                           ! Debug: list unsigned char = al+0 (used reg = )
27595 72E4           30E4                       xor	ah,ah
27596 72E6           50                         push	ax
27597                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27598 72E7           FF76         08            push	8[bp]
27599                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27600 72EA           FF76         06            push	6[bp]
27601                                           ! Debug: func () void = write_byte+0 (used reg = )
27602 72ED           E8         0A11            call	_write_byte
27603 72F0           83C4                   06  add	sp,*6
27604                                           !BCC_EOS
27605                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27606 72F3           8B46         08            mov	ax,8[bp]
27607 72F6           40                         inc	ax
27608 72F7           8946         08            mov	8[bp],ax
27609                                           !BCC_EOS
27610                                           ! 3824         write_word(ES, BX, read_word(0x40,0x4A)); BX += 2;
27611                                           ! Debug: list int = const $4A (used reg = )
27612 72FA           B8                   004A  mov	ax,*$4A
27613 72FD           50                         push	ax
27614                                           ! Debug: list int = const $40 (used reg = )
27615 72FE           B8                   0040  mov	ax,*$40
27616 7301           50                         push	ax
27617                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27618 7302           E8         09E9            call	_read_word
27619 7305           83C4                   04  add	sp,*4
27620                                           ! Debug: list unsigned short = ax+0 (used reg = )
27621 7308           50                         push	ax
27622                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27623 7309           FF76         08            push	8[bp]
27624                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27625 730C           FF76         06            push	6[bp]
27626                                           ! Debug: func () void = write_word+0 (used reg = )
27627 730F           E8         0A07            call	_write_word
27628 7312           83C4                   06  add	sp,*6
27629                                           !BCC_EOS
27630                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27631 7315           8B46         08            mov	ax,8[bp]
27632 7318           40                         inc	ax
27633 7319           40                         inc	ax
27634 731A           8946         08            mov	8[bp],ax
27635                                           !BCC_EOS
27636                                           ! 3825         write_word(ES, BX, read_word(0x40,0x4C)); BX += 2;
27637                                           ! Debug: list int = const $4C (used reg = )
27638 731D           B8                   004C  mov	ax,*$4C
27639 7320           50                         push	ax
27640                                           ! Debug: list int = const $40 (used reg = )
27641 7321           B8                   0040  mov	ax,*$40
27642 7324           50                         push	ax
27643                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27644 7325           E8         09C6            call	_read_word
27645 7328           83C4                   04  add	sp,*4
27646                                           ! Debug: list unsigned short = ax+0 (used reg = )
27647 732B           50                         push	ax
27648                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27649 732C           FF76         08            push	8[bp]
27650                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27651 732F           FF76         06            push	6[bp]
27652                                           ! Debug: func () void = write_word+0 (used reg = )
27653 7332           E8         09E4            call	_write_word
27654 7335           83C4                   06  add	sp,*6
27655                                           !BCC_EOS
27656                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27657 7338           8B46         08            mov	ax,8[bp]
27658 733B           40                         inc	ax
27659 733C           40                         inc	ax
27660 733D           8946         08            mov	8[bp],ax
27661                                           !BCC_EOS
27662                                           ! 3826         write_word(ES, BX, read_word(0x40,0x63)); BX += 2;
27663                                           ! Debug: list int = const $63 (used reg = )
27664 7340           B8                   0063  mov	ax,*$63
27665 7343           50                         push	ax
27666                                           ! Debug: list int = const $40 (used reg = )
27667 7344           B8                   0040  mov	ax,*$40
27668 7347           50                         push	ax
27669                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27670 7348           E8         09A3            call	_read_word
27671 734B           83C4                   04  add	sp,*4
27672                                           ! Debug: list unsigned short = ax+0 (used reg = )
27673 734E           50                         push	ax
27674                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27675 734F           FF76         08            push	8[bp]
27676                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27677 7352           FF76         06            push	6[bp]
27678                                           ! Debug: func () void = write_word+0 (used reg = )
27679 7355           E8         09C1            call	_write_word
27680 7358           83C4                   06  add	sp,*6
27681                                           !BCC_EOS
27682                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27683 735B           8B46         08            mov	ax,8[bp]
27684 735E           40                         inc	ax
27685 735F           40                         inc	ax
27686 7360           8946         08            mov	8[bp],ax
27687                                           !BCC_EOS
27688                                           ! 3827         write_byte(ES, BX, read_byte(0x40,0x84)); BX++;
27689                                           ! Debug: list int = const $84 (used reg = )
27690 7363           B8                   0084  mov	ax,#$84
27691 7366           50                         push	ax
27692                                           ! Debug: list int = const $40 (used reg = )
27693 7367           B8                   0040  mov	ax,*$40
27694 736A           50                         push	ax
27695                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27696 736B           E8         096D            call	_read_byte
27697 736E           83C4                   04  add	sp,*4
27698                                           ! Debug: list unsigned char = al+0 (used reg = )
27699 7371           30E4                       xor	ah,ah
27700 7373           50                         push	ax
27701                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27702 7374           FF76         08            push	8[bp]
27703                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27704 7377           FF76         06            push	6[bp]
27705                                           ! Debug: func () void = write_byte+0 (used reg = )
27706 737A           E8         0984            call	_write_byte
27707 737D           83C4                   06  add	sp,*6
27708                                           !BCC_EOS
27709                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27710 7380           8B46         08            mov	ax,8[bp]
27711 7383           40                         inc	ax
27712 7384           8946         08            mov	8[bp],ax
27713                                           !BCC_EOS
27714                                           ! 3828         write_word(ES, BX, read_word(0x40,0x85)); BX += 2;
27715                                           ! Debug: list int = const $85 (used reg = )
27716 7387           B8                   0085  mov	ax,#$85
27717 738A           50                         push	ax
27718                                           ! Debug: list int = const $40 (used reg = )
27719 738B           B8                   0040  mov	ax,*$40
27720 738E           50                         push	ax
27721                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27722 738F           E8         095C            call	_read_word
27723 7392           83C4                   04  add	sp,*4
27724                                           ! Debug: list unsigned short = ax+0 (used reg = )
27725 7395           50                         push	ax
27726                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27727 7396           FF76         08            push	8[bp]
27728                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27729 7399           FF76         06            push	6[bp]
27730                                           ! Debug: func () void = write_word+0 (used reg = )
27731 739C           E8         097A            call	_write_word
27732 739F           83C4                   06  add	sp,*6
27733                                           !BCC_EOS
27734                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27735 73A2           8B46         08            mov	ax,8[bp]
27736 73A5           40                         inc	ax
27737 73A6           40                         inc	ax
27738 73A7           8946         08            mov	8[bp],ax
27739                                           !BCC_EOS
27740                                           ! 3829         write_byte(ES, BX, read_byte(0x40,0x87)); BX++;
27741                                           ! Debug: list int = const $87 (used reg = )
27742 73AA           B8                   0087  mov	ax,#$87
27743 73AD           50                         push	ax
27744                                           ! Debug: list int = const $40 (used reg = )
27745 73AE           B8                   0040  mov	ax,*$40
27746 73B1           50                         push	ax
27747                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27748 73B2           E8         0926            call	_read_byte
27749 73B5           83C4                   04  add	sp,*4
27750                                           ! Debug: list unsigned char = al+0 (used reg = )
27751 73B8           30E4                       xor	ah,ah
27752 73BA           50                         push	ax
27753                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27754 73BB           FF76         08            push	8[bp]
27755                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27756 73BE           FF76         06            push	6[bp]
27757                                           ! Debug: func () void = write_byte+0 (used reg = )
27758 73C1           E8         093D            call	_write_byte
27759 73C4           83C4                   06  add	sp,*6
27760                                           !BCC_EOS
27761                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27762 73C7           8B46         08            mov	ax,8[bp]
27763 73CA           40                         inc	ax
27764 73CB           8946         08            mov	8[bp],ax
27765                                           !BCC_EOS
27766                                           ! 3830         write_byte(ES, BX, read_byte(0x40,0x88)); BX++;
27767                                           ! Debug: list int = const $88 (used reg = )
27768 73CE           B8                   0088  mov	ax,#$88
27769 73D1           50                         push	ax
27770                                           ! Debug: list int = const $40 (used reg = )
27771 73D2           B8                   0040  mov	ax,*$40
27772 73D5           50                         push	ax
27773                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27774 73D6           E8         0902            call	_read_byte
27775 73D9           83C4                   04  add	sp,*4
27776                                           ! Debug: list unsigned char = al+0 (used reg = )
27777 73DC           30E4                       xor	ah,ah
27778 73DE           50                         push	ax
27779                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27780 73DF           FF76         08            push	8[bp]
27781                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27782 73E2           FF76         06            push	6[bp]
27783                                           ! Debug: func () void = write_byte+0 (used reg = )
27784 73E5           E8         0919            call	_write_byte
27785 73E8           83C4                   06  add	sp,*6
27786                                           !BCC_EOS
27787                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27788 73EB           8B46         08            mov	ax,8[bp]
27789 73EE           40                         inc	ax
27790 73EF           8946         08            mov	8[bp],ax
27791                                           !BCC_EOS
27792                                           ! 3831         write_byte(ES, BX, read_byte(0x40,0x89)); BX++;
27793                                           ! Debug: list int = const $89 (used reg = )
27794 73F2           B8                   0089  mov	ax,#$89
27795 73F5           50                         push	ax
27796                                           ! Debug: list int = const $40 (used reg = )
27797 73F6           B8                   0040  mov	ax,*$40
27798 73F9           50                         push	ax
27799                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27800 73FA           E8         08DE            call	_read_byte
27801 73FD           83C4                   04  add	sp,*4
27802                                           ! Debug: list unsigned char = al+0 (used reg = )
27803 7400           30E4                       xor	ah,ah
27804 7402           50                         push	ax
27805                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27806 7403           FF76         08            push	8[bp]
27807                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27808 7406           FF76         06            push	6[bp]
27809                                           ! Debug: func () void = write_byte+0 (used reg = )
27810 7409           E8         08F5            call	_write_byte
27811 740C           83C4                   06  add	sp,*6
27812                                           !BCC_EOS
27813                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27814 740F           8B46         08            mov	ax,8[bp]
27815 7412           40                         inc	ax
27816 7413           8946         08            mov	8[bp],ax
27817                                           !BCC_EOS
27818                                           ! 3832         write_word(ES, BX, read_word(0x40,0x60)); BX += 2;
27819                                           ! Debug: list int = const $60 (used reg = )
27820 7416           B8                   0060  mov	ax,*$60
27821 7419           50                         push	ax
27822                                           ! Debug: list int = const $40 (used reg = )
27823 741A           B8                   0040  mov	ax,*$40
27824 741D           50                         push	ax
27825                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27826 741E           E8         08CD            call	_read_word
27827 7421           83C4                   04  add	sp,*4
27828                                           ! Debug: list unsigned short = ax+0 (used reg = )
27829 7424           50                         push	ax
27830                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27831 7425           FF76         08            push	8[bp]
27832                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27833 7428           FF76         06            push	6[bp]
27834                                           ! Debug: func () void = write_word+0 (used reg = )
27835 742B           E8         08EB            call	_write_word
27836 742E           83C4                   06  add	sp,*6
27837                                           !BCC_EOS
27838                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27839 7431           8B46         08            mov	ax,8[bp]
27840 7434           40                         inc	ax
27841 7435           40                         inc	ax
27842 7436           8946         08            mov	8[bp],ax
27843                                           !BCC_EOS
27844                                           ! 3833         for(i=0;i<8;i++) {
27845                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
27846 7439           31C0                       xor	ax,ax
27847 743B           8946         FE            mov	-2[bp],ax
27848                                           !BCC_EOS
27849                                           !BCC_EOS
27850 743E           EB           2F            jmp .264
27851                       00007440            .265:
27852                                           ! 3834             write_word(ES, BX, read_word(0x40, 0x50 +2*i));
27853                                           ! Debug: mul unsigned short i = [S+$A-4] to int = const 2 (used reg = )
27854                                           ! Debug: expression subtree swapping
27855 7440           8B46         FE            mov	ax,-2[bp]
27856 7443           D1E0                       shl	ax,*1
27857                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
27858                                           ! Debug: expression subtree swapping
27859                                           ! Debug: list unsigned int = ax+$50 (used reg = )
27860 7445           05                   0050  add	ax,*$50
27861 7448           50                         push	ax
27862                                           ! Debug: list int = const $40 (used reg = )
27863 7449           B8                   0040  mov	ax,*$40
27864 744C           50                         push	ax
27865                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27866 744D           E8         089E            call	_read_word
27867 7450           83C4                   04  add	sp,*4
27868                                           ! Debug: list unsigned short = ax+0 (used reg = )
27869 7453           50                         push	ax
27870                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27871 7454           FF76         08            push	8[bp]
27872                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27873 7457           FF76         06            push	6[bp]
27874                                           ! Debug: func () void = write_word+0 (used reg = )
27875 745A           E8         08BC            call	_write_word
27876 745D           83C4                   06  add	sp,*6
27877                                           !BCC_EOS
27878                                           ! 3835             BX += 2;
27879                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27880 7460           8B46         08            mov	ax,8[bp]
27881 7463           40                         inc	ax
27882 7464           40                         inc	ax
27883 7465           8946         08            mov	8[bp],ax
27884                                           !BCC_EOS
27885                                           ! 3836         }
27886                                           ! 3837         write_word(ES, BX, read_word(0x40,0x4E)); BX += 2;
27887                       00007468            .263:
27888                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
27889 7468           8B46         FE            mov	ax,-2[bp]
27890 746B           40                         inc	ax
27891 746C           8946         FE            mov	-2[bp],ax
27892                       0000746F            .264:
27893                                           ! Debug: lt int = const 8 to unsigned short i = [S+$A-4] (used reg = )
27894 746F           8B46         FE            mov	ax,-2[bp]
27895 7472           3D                   0008  cmp	ax,*8
27896 7475           72           C9            jb 	.265
27897                       00007477            .266:
27898                       00007477            .262:
27899                                           ! Debug: list int = const $4E (used reg = )
27900 7477           B8                   004E  mov	ax,*$4E
27901 747A           50                         push	ax
27902                                           ! Debug: list int = const $40 (used reg = )
27903 747B           B8                   0040  mov	ax,*$40
27904 747E           50                         push	ax
27905                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27906 747F           E8         086C            call	_read_word
27907 7482           83C4                   04  add	sp,*4
27908                                           ! Debug: list unsigned short = ax+0 (used reg = )
27909 7485           50                         push	ax
27910                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27911 7486           FF76         08            push	8[bp]
27912                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27913 7489           FF76         06            push	6[bp]
27914                                           ! Debug: func () void = write_word+0 (used reg = )
27915 748C           E8         088A            call	_write_word
27916 748F           83C4                   06  add	sp,*6
27917                                           !BCC_EOS
27918                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27919 7492           8B46         08            mov	ax,8[bp]
27920 7495           40                         inc	ax
27921 7496           40                         inc	ax
27922 7497           8946         08            mov	8[bp],ax
27923                                           !BCC_EOS
27924                                           ! 3838         write_byte(ES, BX, read_byte(0x40,0x62)); BX++;
27925                                           ! Debug: list int = const $62 (used reg = )
27926 749A           B8                   0062  mov	ax,*$62
27927 749D           50                         push	ax
27928                                           ! Debug: list int = const $40 (used reg = )
27929 749E           B8                   0040  mov	ax,*$40
27930 74A1           50                         push	ax
27931                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
27932 74A2           E8         0836            call	_read_byte
27933 74A5           83C4                   04  add	sp,*4
27934                                           ! Debug: list unsigned char = al+0 (used reg = )
27935 74A8           30E4                       xor	ah,ah
27936 74AA           50                         push	ax
27937                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27938 74AB           FF76         08            push	8[bp]
27939                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27940 74AE           FF76         06            push	6[bp]
27941                                           ! Debug: func () void = write_byte+0 (used reg = )
27942 74B1           E8         084D            call	_write_byte
27943 74B4           83C4                   06  add	sp,*6
27944                                           !BCC_EOS
27945                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
27946 74B7           8B46         08            mov	ax,8[bp]
27947 74BA           40                         inc	ax
27948 74BB           8946         08            mov	8[bp],ax
27949                                           !BCC_EOS
27950                                           ! 3839         write_word(ES, BX, read_word(0, 0x1f * 4)); BX += 2;
27951                                           ! Debug: list int = const $7C (used reg = )
27952 74BE           B8                   007C  mov	ax,*$7C
27953 74C1           50                         push	ax
27954                                           ! Debug: list int = const 0 (used reg = )
27955 74C2           31C0                       xor	ax,ax
27956 74C4           50                         push	ax
27957                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27958 74C5           E8         0826            call	_read_word
27959 74C8           83C4                   04  add	sp,*4
27960                                           ! Debug: list unsigned short = ax+0 (used reg = )
27961 74CB           50                         push	ax
27962                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27963 74CC           FF76         08            push	8[bp]
27964                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27965 74CF           FF76         06            push	6[bp]
27966                                           ! Debug: func () void = write_word+0 (used reg = )
27967 74D2           E8         0844            call	_write_word
27968 74D5           83C4                   06  add	sp,*6
27969                                           !BCC_EOS
27970                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27971 74D8           8B46         08            mov	ax,8[bp]
27972 74DB           40                         inc	ax
27973 74DC           40                         inc	ax
27974 74DD           8946         08            mov	8[bp],ax
27975                                           !BCC_EOS
27976                                           ! 3840         write_word(ES, BX, read_word(0, 0x1f * 4 + 2)); BX += 2;
27977                                           ! Debug: list int = const $7E (used reg = )
27978 74E0           B8                   007E  mov	ax,*$7E
27979 74E3           50                         push	ax
27980                                           ! Debug: list int = const 0 (used reg = )
27981 74E4           31C0                       xor	ax,ax
27982 74E6           50                         push	ax
27983                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
27984 74E7           E8         0804            call	_read_word
27985 74EA           83C4                   04  add	sp,*4
27986                                           ! Debug: list unsigned short = ax+0 (used reg = )
27987 74ED           50                         push	ax
27988                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
27989 74EE           FF76         08            push	8[bp]
27990                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
27991 74F1           FF76         06            push	6[bp]
27992                                           ! Debug: func () void = write_word+0 (used reg = )
27993 74F4           E8         0822            call	_write_word
27994 74F7           83C4                   06  add	sp,*6
27995                                           !BCC_EOS
27996                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
27997 74FA           8B46         08            mov	ax,8[bp]
27998 74FD           40                         inc	ax
27999 74FE           40                         inc	ax
28000 74FF           8946         08            mov	8[bp],ax
28001                                           !BCC_EOS
28002                                           ! 3841         write_word(ES, BX, read_word(0, 0x43 * 4)); BX += 2;
28003                                           ! Debug: list int = const $10C (used reg = )
28004 7502           B8                   010C  mov	ax,#$10C
28005 7505           50                         push	ax
28006                                           ! Debug: list int = const 0 (used reg = )
28007 7506           31C0                       xor	ax,ax
28008 7508           50                         push	ax
28009                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28010 7509           E8         07E2            call	_read_word
28011 750C           83C4                   04  add	sp,*4
28012                                           ! Debug: list unsigned short = ax+0 (used reg = )
28013 750F           50                         push	ax
28014                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28015 7510           FF76         08            push	8[bp]
28016                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28017 7513           FF76         06            push	6[bp]
28018                                           ! Debug: func () void = write_word+0 (used reg = )
28019 7516           E8         0800            call	_write_word
28020 7519           83C4                   06  add	sp,*6
28021                                           !BCC_EOS
28022                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28023 751C           8B46         08            mov	ax,8[bp]
28024 751F           40                         inc	ax
28025 7520           40                         inc	ax
28026 7521           8946         08            mov	8[bp],ax
28027                                           !BCC_EOS
28028                                           ! 3842         write_word(ES, BX, read_word(0, 0x43 * 4 + 2)); BX += 2;
28029                                           ! Debug: list int = const $10E (used reg = )
28030 7524           B8                   010E  mov	ax,#$10E
28031 7527           50                         push	ax
28032                                           ! Debug: list int = const 0 (used reg = )
28033 7528           31C0                       xor	ax,ax
28034 752A           50                         push	ax
28035                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28036 752B           E8         07C0            call	_read_word
28037 752E           83C4                   04  add	sp,*4
28038                                           ! Debug: list unsigned short = ax+0 (used reg = )
28039 7531           50                         push	ax
28040                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28041 7532           FF76         08            push	8[bp]
28042                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28043 7535           FF76         06            push	6[bp]
28044                                           ! Debug: func () void = write_word+0 (used reg = )
28045 7538           E8         07DE            call	_write_word
28046 753B           83C4                   06  add	sp,*6
28047                                           !BCC_EOS
28048                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$A+6] (used reg = )
28049 753E           8B46         08            mov	ax,8[bp]
28050 7541           40                         inc	ax
28051 7542           40                         inc	ax
28052 7543           8946         08            mov	8[bp],ax
28053                                           !BCC_EOS
28054                                           ! 3843     }
28055                                           ! 3844     if (CX & 4) {
28056                       00007546            .260:
28057                                           ! Debug: and int = const 4 to unsigned short CX = [S+$A+2] (used reg = )
28058 7546           8A46         04            mov	al,4[bp]
28059 7549           24                     04  and	al,*4
28060 754B           84C0                       test	al,al
28061 754D   7503    E9         00B5            beq 	.267
28062                       00007552            .268:
28063                                           ! 3845         write_byte(ES, BX, inb(0x3c7)); BX++;
28064                                           ! Debug: list int = const $3C7 (used reg = )
28065 7552           B8                   03C7  mov	ax,#$3C7
28066 7555           50                         push	ax
28067                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28068 7556           E8         07D8            call	_inb
28069 7559           44                         inc	sp
28070 755A           44                         inc	sp
28071                                           ! Debug: list unsigned char = al+0 (used reg = )
28072 755B           30E4                       xor	ah,ah
28073 755D           50                         push	ax
28074                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28075 755E           FF76         08            push	8[bp]
28076                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28077 7561           FF76         06            push	6[bp]
28078                                           ! Debug: func () void = write_byte+0 (used reg = )
28079 7564           E8         079A            call	_write_byte
28080 7567           83C4                   06  add	sp,*6
28081                                           !BCC_EOS
28082                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28083 756A           8B46         08            mov	ax,8[bp]
28084 756D           40                         inc	ax
28085 756E           8946         08            mov	8[bp],ax
28086                                           !BCC_EOS
28087                                           ! 3846         write_byte(ES, BX, inb(0x3c8)); BX++;
28088                                           ! Debug: list int = const $3C8 (used reg = )
28089 7571           B8                   03C8  mov	ax,#$3C8
28090 7574           50                         push	ax
28091                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28092 7575           E8         07B9            call	_inb
28093 7578           44                         inc	sp
28094 7579           44                         inc	sp
28095                                           ! Debug: list unsigned char = al+0 (used reg = )
28096 757A           30E4                       xor	ah,ah
28097 757C           50                         push	ax
28098                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28099 757D           FF76         08            push	8[bp]
28100                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28101 7580           FF76         06            push	6[bp]
28102                                           ! Debug: func () void = write_byte+0 (used reg = )
28103 7583           E8         077B            call	_write_byte
28104 7586           83C4                   06  add	sp,*6
28105                                           !BCC_EOS
28106                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28107 7589           8B46         08            mov	ax,8[bp]
28108 758C           40                         inc	ax
28109 758D           8946         08            mov	8[bp],ax
28110                                           !BCC_EOS
28111                                           ! 3847         write_byte(ES, BX, inb(0x3c6)); BX++;
28112                                           ! Debug: list int = const $3C6 (used reg = )
28113 7590           B8                   03C6  mov	ax,#$3C6
28114 7593           50                         push	ax
28115                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28116 7594           E8         079A            call	_inb
28117 7597           44                         inc	sp
28118 7598           44                         inc	sp
28119                                           ! Debug: list unsigned char = al+0 (used reg = )
28120 7599           30E4                       xor	ah,ah
28121 759B           50                         push	ax
28122                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28123 759C           FF76         08            push	8[bp]
28124                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28125 759F           FF76         06            push	6[bp]
28126                                           ! Debug: func () void = write_byte+0 (used reg = )
28127 75A2           E8         075C            call	_write_byte
28128 75A5           83C4                   06  add	sp,*6
28129                                           !BCC_EOS
28130                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28131 75A8           8B46         08            mov	ax,8[bp]
28132 75AB           40                         inc	ax
28133 75AC           8946         08            mov	8[bp],ax
28134                                           !BCC_EOS
28135                                           ! 3848         outb(0x3c8,0x00);
28136                                           ! Debug: list int = const 0 (used reg = )
28137 75AF           31C0                       xor	ax,ax
28138 75B1           50                         push	ax
28139                                           ! Debug: list int = const $3C8 (used reg = )
28140 75B2           B8                   03C8  mov	ax,#$3C8
28141 75B5           50                         push	ax
28142                                           ! Debug: func () void = outb+0 (used reg = )
28143 75B6           E8         078E            call	_outb
28144 75B9           83C4                   04  add	sp,*4
28145                                           !BCC_EOS
28146                                           ! 3849         for(i=0;i<256*3;i++) {
28147                                           ! Debug: eq int = const 0 to unsigned short i = [S+$A-4] (used reg = )
28148 75BC           31C0                       xor	ax,ax
28149 75BE           8946         FE            mov	-2[bp],ax
28150                                           !BCC_EOS
28151                                           !BCC_EOS
28152 75C1           EB           26            jmp .26B
28153                       000075C3            .26C:
28154                                           ! 3850             write_byte(ES, BX, inb(0x3c9)); BX++;
28155                                           ! Debug: list int = const $3C9 (used reg = )
28156 75C3           B8                   03C9  mov	ax,#$3C9
28157 75C6           50                         push	ax
28158                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28159 75C7           E8         0767            call	_inb
28160 75CA           44                         inc	sp
28161 75CB           44                         inc	sp
28162                                           ! Debug: list unsigned char = al+0 (used reg = )
28163 75CC           30E4                       xor	ah,ah
28164 75CE           50                         push	ax
28165                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28166 75CF           FF76         08            push	8[bp]
28167                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28168 75D2           FF76         06            push	6[bp]
28169                                           ! Debug: func () void = write_byte+0 (used reg = )
28170 75D5           E8         0729            call	_write_byte
28171 75D8           83C4                   06  add	sp,*6
28172                                           !BCC_EOS
28173                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28174 75DB           8B46         08            mov	ax,8[bp]
28175 75DE           40                         inc	ax
28176 75DF           8946         08            mov	8[bp],ax
28177                                           !BCC_EOS
28178                                           ! 3851         }
28179                                           ! 3852         write_byte(ES, BX, 0); BX++;
28180                       000075E2            .26A:
28181                                           ! Debug: postinc unsigned short i = [S+$A-4] (used reg = )
28182 75E2           8B46         FE            mov	ax,-2[bp]
28183 75E5           40                         inc	ax
28184 75E6           8946         FE            mov	-2[bp],ax
28185                       000075E9            .26B:
28186                                           ! Debug: lt int = const $300 to unsigned short i = [S+$A-4] (used reg = )
28187 75E9           8B46         FE            mov	ax,-2[bp]
28188 75EC           3D                   0300  cmp	ax,#$300
28189 75EF           72           D2            jb 	.26C
28190                       000075F1            .26D:
28191                       000075F1            .269:
28192                                           ! Debug: list int = const 0 (used reg = )
28193 75F1           31C0                       xor	ax,ax
28194 75F3           50                         push	ax
28195                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28196 75F4           FF76         08            push	8[bp]
28197                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28198 75F7           FF76         06            push	6[bp]
28199                                           ! Debug: func () void = write_byte+0 (used reg = )
28200 75FA           E8         0704            call	_write_byte
28201 75FD           83C4                   06  add	sp,*6
28202                                           !BCC_EOS
28203                                           ! Debug: postinc unsigned short BX = [S+$A+6] (used reg = )
28204 7600           8B46         08            mov	ax,8[bp]
28205 7603           40                         inc	ax
28206 7604           8946         08            mov	8[bp],ax
28207                                           !BCC_EOS
28208                                           ! 3853     }
28209                                           ! 3854     return BX;
28210                       00007607            .267:
28211 7607           8B46         08            mov	ax,8[bp]
28212 760A           89EC                       mov	sp,bp
28213 760C           5D                         pop	bp
28214 760D           C3                         ret
28215                                           !BCC_EOS
28216                                           ! 3855 }
28217                                           ! 3856 static Bit16u biosfn_restore_video_state (CX,ES,BX)
28218                                           ! 3857      Bit16u CX;Bit16u ES;Bit16u BX;
28219                       0000760E            _biosfn_restore_video_state:
28220                                           !BCC_EOS
28221                                           !BCC_EOS
28222                                           !BCC_EOS
28223                                           ! 3858 {
28224                                           ! 3859     Bit16u i, crtc_addr, v, addr1, ar_index;
28225                                           !BCC_EOS
28226                                           ! 3860     if (CX & 1) {
28227 760E           55                         push	bp
28228 760F           89E5                       mov	bp,sp
28229 7611           83C4                   F6  add	sp,*-$A
28230                                           ! Debug: and int = const 1 to unsigned short CX = [S+$C+2] (used reg = )
28231 7614           8A46         04            mov	al,4[bp]
28232 7617           24                     01  and	al,*1
28233 7619           84C0                       test	al,al
28234 761B   7503    E9         02AA            beq 	.26E
28235                       00007620            .26F:
28236                                           ! 3861         inb(0x3da);
28237                                           ! Debug: list int = const $3DA (used reg = )
28238 7620           B8                   03DA  mov	ax,#$3DA
28239 7623           50                         push	ax
28240                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28241 7624           E8         070A            call	_inb
28242 7627           44                         inc	sp
28243 7628           44                         inc	sp
28244                                           !BCC_EOS
28245                                           ! 3862         crtc_addr = read_word(ES, BX + 0x40);
28246                                           ! Debug: add int = const $40 to unsigned short BX = [S+$C+6] (used reg = )
28247 7629           8B46         08            mov	ax,8[bp]
28248                                           ! Debug: list unsigned int = ax+$40 (used reg = )
28249 762C           05                   0040  add	ax,*$40
28250 762F           50                         push	ax
28251                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28252 7630           FF76         06            push	6[bp]
28253                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28254 7633           E8         06B8            call	_read_word
28255 7636           83C4                   04  add	sp,*4
28256                                           ! Debug: eq unsigned short = ax+0 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28257 7639           8946         FC            mov	-4[bp],ax
28258                                           !BCC_EOS
28259                                           ! 3863         addr1 = BX;
28260                                           ! Debug: eq unsigned short BX = [S+$C+6] to unsigned short addr1 = [S+$C-$A] (used reg = )
28261 763C           8B46         08            mov	ax,8[bp]
28262 763F           8946         F8            mov	-8[bp],ax
28263                                           !BCC_EOS
28264                                           ! 3864         BX += 5;
28265                                           ! Debug: addab int = const 5 to unsigned short BX = [S+$C+6] (used reg = )
28266 7642           8B46         08            mov	ax,8[bp]
28267 7645           05                   0005  add	ax,*5
28268 7648           8946         08            mov	8[bp],ax
28269                                           !BCC_EOS
28270                                           ! 3865         for(i=1;i<=4;i++){
28271                                           ! Debug: eq int = const 1 to unsigned short i = [S+$C-4] (used reg = )
28272 764B           B8                   0001  mov	ax,*1
28273 764E           8946         FE            mov	-2[bp],ax
28274                                           !BCC_EOS
28275                                           !BCC_EOS
28276 7651           EB           34            jmp .272
28277                       00007653            .273:
28278                                           ! 3866             outb(0x3c4, i);
28279                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28280 7653           FF76         FE            push	-2[bp]
28281                                           ! Debug: list int = const $3C4 (used reg = )
28282 7656           B8                   03C4  mov	ax,#$3C4
28283 7659           50                         push	ax
28284                                           ! Debug: func () void = outb+0 (used reg = )
28285 765A           E8         06EA            call	_outb
28286 765D           83C4                   04  add	sp,*4
28287                                           !BCC_EOS
28288                                           ! 3867             outb(0x3c5, read_byte(ES, BX)); BX++;
28289                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28290 7660           FF76         08            push	8[bp]
28291                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28292 7663           FF76         06            push	6[bp]
28293                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28294 7666           E8         0672            call	_read_byte
28295 7669           83C4                   04  add	sp,*4
28296                                           ! Debug: list unsigned char = al+0 (used reg = )
28297 766C           30E4                       xor	ah,ah
28298 766E           50                         push	ax
28299                                           ! Debug: list int = const $3C5 (used reg = )
28300 766F           B8                   03C5  mov	ax,#$3C5
28301 7672           50                         push	ax
28302                                           ! Debug: func () void = outb+0 (used reg = )
28303 7673           E8         06D1            call	_outb
28304 7676           83C4                   04  add	sp,*4
28305                                           !BCC_EOS
28306                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28307 7679           8B46         08            mov	ax,8[bp]
28308 767C           40                         inc	ax
28309 767D           8946         08            mov	8[bp],ax
28310                                           !BCC_EOS
28311                                           ! 3868         }
28312                                           ! 3869         outb(0x3c4, 0);
28313                       00007680            .271:
28314                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28315 7680           8B46         FE            mov	ax,-2[bp]
28316 7683           40                         inc	ax
28317 7684           8946         FE            mov	-2[bp],ax
28318                       00007687            .272:
28319                                           ! Debug: le int = const 4 to unsigned short i = [S+$C-4] (used reg = )
28320 7687           8B46         FE            mov	ax,-2[bp]
28321 768A           3D                   0004  cmp	ax,*4
28322 768D           76           C4            jbe	.273
28323                       0000768F            .274:
28324                       0000768F            .270:
28325                                           ! Debug: list int = const 0 (used reg = )
28326 768F           31C0                       xor	ax,ax
28327 7691           50                         push	ax
28328                                           ! Debug: list int = const $3C4 (used reg = )
28329 7692           B8                   03C4  mov	ax,#$3C4
28330 7695           50                         push	ax
28331                                           ! Debug: func () void = outb+0 (used reg = )
28332 7696           E8         06AE            call	_outb
28333 7699           83C4                   04  add	sp,*4
28334                                           !BCC_EOS
28335                                           ! 3870         outb(0x3c5, read_byte(ES, BX)); BX++;
28336                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28337 769C           FF76         08            push	8[bp]
28338                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28339 769F           FF76         06            push	6[bp]
28340                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28341 76A2           E8         0636            call	_read_byte
28342 76A5           83C4                   04  add	sp,*4
28343                                           ! Debug: list unsigned char = al+0 (used reg = )
28344 76A8           30E4                       xor	ah,ah
28345 76AA           50                         push	ax
28346                                           ! Debug: list int = const $3C5 (used reg = )
28347 76AB           B8                   03C5  mov	ax,#$3C5
28348 76AE           50                         push	ax
28349                                           ! Debug: func () void = outb+0 (used reg = )
28350 76AF           E8         0695            call	_outb
28351 76B2           83C4                   04  add	sp,*4
28352                                           !BCC_EOS
28353                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28354 76B5           8B46         08            mov	ax,8[bp]
28355 76B8           40                         inc	ax
28356 76B9           8946         08            mov	8[bp],ax
28357                                           !BCC_EOS
28358                                           ! 3871         outw(crtc_addr,0x0011);
28359                                           ! Debug: list int = const $11 (used reg = )
28360 76BC           B8                   0011  mov	ax,*$11
28361 76BF           50                         push	ax
28362                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28363 76C0           FF76         FC            push	-4[bp]
28364                                           ! Debug: func () void = outw+0 (used reg = )
28365 76C3           E8         0691            call	_outw
28366 76C6           83C4                   04  add	sp,*4
28367                                           !BCC_EOS
28368                                           ! 3872         for(i=0;i<=0x18;i++) {
28369                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28370 76C9           31C0                       xor	ax,ax
28371 76CB           8946         FE            mov	-2[bp],ax
28372                                           !BCC_EOS
28373                                           !BCC_EOS
28374 76CE           EB           3C            jmp .277
28375                       000076D0            .278:
28376                                           ! 3873             if (i != 0x11)
28377                                           ! 3873  {
28378                                           ! Debug: ne int = const $11 to unsigned short i = [S+$C-4] (used reg = )
28379 76D0           8B46         FE            mov	ax,-2[bp]
28380 76D3           3D                   0011  cmp	ax,*$11
28381 76D6           74           26            je  	.279
28382                       000076D8            .27A:
28383                                           ! 3874                 outb(crtc_addr,i);
28384                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28385 76D8           FF76         FE            push	-2[bp]
28386                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28387 76DB           FF76         FC            push	-4[bp]
28388                                           ! Debug: func () void = outb+0 (used reg = )
28389 76DE           E8         0666            call	_outb
28390 76E1           83C4                   04  add	sp,*4
28391                                           !BCC_EOS
28392                                           ! 3875                 outb(crtc_addr+1, read_byte(ES, BX));
28393                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28394 76E4           FF76         08            push	8[bp]
28395                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28396 76E7           FF76         06            push	6[bp]
28397                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28398 76EA           E8         05EE            call	_read_byte
28399 76ED           83C4                   04  add	sp,*4
28400                                           ! Debug: list unsigned char = al+0 (used reg = )
28401 76F0           30E4                       xor	ah,ah
28402 76F2           50                         push	ax
28403                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28404 76F3           8B46         FC            mov	ax,-4[bp]
28405                                           ! Debug: list unsigned int = ax+1 (used reg = )
28406 76F6           40                         inc	ax
28407 76F7           50                         push	ax
28408                                           ! Debug: func () void = outb+0 (used reg = )
28409 76F8           E8         064C            call	_outb
28410 76FB           83C4                   04  add	sp,*4
28411                                           !BCC_EOS
28412                                           ! 3876             }
28413                                           ! 3877             BX++;
28414                       000076FE            .279:
28415                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28416 76FE           8B46         08            mov	ax,8[bp]
28417 7701           40                         inc	ax
28418 7702           8946         08            mov	8[bp],ax
28419                                           !BCC_EOS
28420                                           ! 3878         }
28421                                           ! 3879         v = inb(0x3cc) & ~0x01;
28422                       00007705            .276:
28423                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28424 7705           8B46         FE            mov	ax,-2[bp]
28425 7708           40                         inc	ax
28426 7709           8946         FE            mov	-2[bp],ax
28427                       0000770C            .277:
28428                                           ! Debug: le int = const $18 to unsigned short i = [S+$C-4] (used reg = )
28429 770C           8B46         FE            mov	ax,-2[bp]
28430 770F           3D                   0018  cmp	ax,*$18
28431 7712           76           BC            jbe	.278
28432                       00007714            .27B:
28433                       00007714            .275:
28434                                           ! Debug: list int = const $3CC (used reg = )
28435 7714           B8                   03CC  mov	ax,#$3CC
28436 7717           50                         push	ax
28437                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28438 7718           E8         0616            call	_inb
28439 771B           44                         inc	sp
28440 771C           44                         inc	sp
28441                                           ! Debug: and int = const -2 to unsigned char = al+0 (used reg = )
28442 771D           24                     FE  and	al,#$FE
28443                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
28444 771F           30E4                       xor	ah,ah
28445 7721           8946         FA            mov	-6[bp],ax
28446                                           !BCC_EOS
28447                                           ! 3880         if (crtc_addr = 0x3d4)
28448                                           ! Debug: eq int = const $3D4 to unsigned short crtc_addr = [S+$C-6] (used reg = )
28449 7724           B8                   03D4  mov	ax,#$3D4
28450 7727           8946         FC            mov	-4[bp],ax
28451 772A           85C0                       test	ax,ax
28452 772C           74           08            je  	.27C
28453                       0000772E            .27D:
28454                                           ! 3881             v |= 0x01;
28455                                           ! Debug: orab int = const 1 to unsigned short v = [S+$C-8] (used reg = )
28456 772E           8B46         FA            mov	ax,-6[bp]
28457 7731           0C                     01  or	al,*1
28458 7733           8946         FA            mov	-6[bp],ax
28459                                           !BCC_EOS
28460                                           ! 3882         outb(0x3c2, v);
28461                       00007736            .27C:
28462                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
28463 7736           FF76         FA            push	-6[bp]
28464                                           ! Debug: list int = const $3C2 (used reg = )
28465 7739           B8                   03C2  mov	ax,#$3C2
28466 773C           50                         push	ax
28467                                           ! Debug: func () void = outb+0 (used reg = )
28468 773D           E8         0607            call	_outb
28469 7740           83C4                   04  add	sp,*4
28470                                           !BCC_EOS
28471                                           ! 3883         outb(crtc_addr, 0x11);
28472                                           ! Debug: list int = const $11 (used reg = )
28473 7743           B8                   0011  mov	ax,*$11
28474 7746           50                         push	ax
28475                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28476 7747           FF76         FC            push	-4[bp]
28477                                           ! Debug: func () void = outb+0 (used reg = )
28478 774A           E8         05FA            call	_outb
28479 774D           83C4                   04  add	sp,*4
28480                                           !BCC_EOS
28481                                           ! 3884         outb(crtc_addr+1, read_byte(ES, BX - 0x18 + 0x11));
28482                                           ! Debug: sub int = const $18 to unsigned short BX = [S+$C+6] (used reg = )
28483 7750           8B46         08            mov	ax,8[bp]
28484                                           ! Debug: add int = const $11 to unsigned int = ax-$18 (used reg = )
28485                                           ! Debug: list unsigned int = ax-7 (used reg = )
28486 7753           05                   FFF9  add	ax,*-7
28487 7756           50                         push	ax
28488                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28489 7757           FF76         06            push	6[bp]
28490                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28491 775A           E8         057E            call	_read_byte
28492 775D           83C4                   04  add	sp,*4
28493                                           ! Debug: list unsigned char = al+0 (used reg = )
28494 7760           30E4                       xor	ah,ah
28495 7762           50                         push	ax
28496                                           ! Debug: add int = const 1 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28497 7763           8B46         FC            mov	ax,-4[bp]
28498                                           ! Debug: list unsigned int = ax+1 (used reg = )
28499 7766           40                         inc	ax
28500 7767           50                         push	ax
28501                                           ! Debug: func () void = outb+0 (used reg = )
28502 7768           E8         05DC            call	_outb
28503 776B           83C4                   04  add	sp,*4
28504                                           !BCC_EOS
28505                                           ! 3885         ar_index = read_byte(ES, addr1 + 0x03);
28506                                           ! Debug: add int = const 3 to unsigned short addr1 = [S+$C-$A] (used reg = )
28507 776E           8B46         F8            mov	ax,-8[bp]
28508                                           ! Debug: list unsigned int = ax+3 (used reg = )
28509 7771           05                   0003  add	ax,*3
28510 7774           50                         push	ax
28511                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28512 7775           FF76         06            push	6[bp]
28513                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28514 7778           E8         0560            call	_read_byte
28515 777B           83C4                   04  add	sp,*4
28516                                           ! Debug: eq unsigned char = al+0 to unsigned short ar_index = [S+$C-$C] (used reg = )
28517 777E           30E4                       xor	ah,ah
28518 7780           8946         F6            mov	-$A[bp],ax
28519                                           !BCC_EOS
28520                                           ! 3886         inb(0x3da);
28521                                           ! Debug: list int = const $3DA (used reg = )
28522 7783           B8                   03DA  mov	ax,#$3DA
28523 7786           50                         push	ax
28524                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28525 7787           E8         05A7            call	_inb
28526 778A           44                         inc	sp
28527 778B           44                         inc	sp
28528                                           !BCC_EOS
28529                                           ! 3887         for(i=0;i<=0x13;i++) {
28530                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28531 778C           31C0                       xor	ax,ax
28532 778E           8946         FE            mov	-2[bp],ax
28533                                           !BCC_EOS
28534                                           !BCC_EOS
28535 7791           EB           3C            jmp .280
28536                       00007793            .281:
28537                                           ! 3888             outb(0x3c0, i | (ar_index & 0x20));
28538                                           ! Debug: and int = const $20 to unsigned short ar_index = [S+$C-$C] (used reg = )
28539 7793           8A46         F6            mov	al,-$A[bp]
28540 7796           24                     20  and	al,*$20
28541                                           ! Debug: or unsigned char = al+0 to unsigned short i = [S+$C-4] (used reg = )
28542                                           ! Debug: expression subtree swapping
28543 7798           30E4                       xor	ah,ah
28544 779A           0B46         FE            or	ax,-2[bp]
28545                                           ! Debug: list unsigned int = ax+0 (used reg = )
28546 779D           50                         push	ax
28547                                           ! Debug: list int = const $3C0 (used reg = )
28548 779E           B8                   03C0  mov	ax,#$3C0
28549 77A1           50                         push	ax
28550                                           ! Debug: func () void = outb+0 (used reg = )
28551 77A2           E8         05A2            call	_outb
28552 77A5           83C4                   04  add	sp,*4
28553                                           !BCC_EOS
28554                                           ! 3889             outb(0x3c0, read_byte(ES, BX)); BX++;
28555                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28556 77A8           FF76         08            push	8[bp]
28557                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28558 77AB           FF76         06            push	6[bp]
28559                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28560 77AE           E8         052A            call	_read_byte
28561 77B1           83C4                   04  add	sp,*4
28562                                           ! Debug: list unsigned char = al+0 (used reg = )
28563 77B4           30E4                       xor	ah,ah
28564 77B6           50                         push	ax
28565                                           ! Debug: list int = const $3C0 (used reg = )
28566 77B7           B8                   03C0  mov	ax,#$3C0
28567 77BA           50                         push	ax
28568                                           ! Debug: func () void = outb+0 (used reg = )
28569 77BB           E8         0589            call	_outb
28570 77BE           83C4                   04  add	sp,*4
28571                                           !BCC_EOS
28572                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28573 77C1           8B46         08            mov	ax,8[bp]
28574 77C4           40                         inc	ax
28575 77C5           8946         08            mov	8[bp],ax
28576                                           !BCC_EOS
28577                                           ! 3890         }
28578                                           ! 3891         outb(0x3c0, ar_index);
28579                       000077C8            .27F:
28580                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28581 77C8           8B46         FE            mov	ax,-2[bp]
28582 77CB           40                         inc	ax
28583 77CC           8946         FE            mov	-2[bp],ax
28584                       000077CF            .280:
28585                                           ! Debug: le int = const $13 to unsigned short i = [S+$C-4] (used reg = )
28586 77CF           8B46         FE            mov	ax,-2[bp]
28587 77D2           3D                   0013  cmp	ax,*$13
28588 77D5           76           BC            jbe	.281
28589                       000077D7            .282:
28590                       000077D7            .27E:
28591                                           ! Debug: list unsigned short ar_index = [S+$C-$C] (used reg = )
28592 77D7           FF76         F6            push	-$A[bp]
28593                                           ! Debug: list int = const $3C0 (used reg = )
28594 77DA           B8                   03C0  mov	ax,#$3C0
28595 77DD           50                         push	ax
28596                                           ! Debug: func () void = outb+0 (used reg = )
28597 77DE           E8         0566            call	_outb
28598 77E1           83C4                   04  add	sp,*4
28599                                           !BCC_EOS
28600                                           ! 3892         inb(0x3da);
28601                                           ! Debug: list int = const $3DA (used reg = )
28602 77E4           B8                   03DA  mov	ax,#$3DA
28603 77E7           50                         push	ax
28604                                           ! Debug: func () unsigned char = inb+0 (used reg = )
28605 77E8           E8         0546            call	_inb
28606 77EB           44                         inc	sp
28607 77EC           44                         inc	sp
28608                                           !BCC_EOS
28609                                           ! 3893         for(i=0;i<=8;i++) {
28610                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
28611 77ED           31C0                       xor	ax,ax
28612 77EF           8946         FE            mov	-2[bp],ax
28613                                           !BCC_EOS
28614                                           !BCC_EOS
28615 77F2           EB           34            jmp .285
28616                       000077F4            .286:
28617                                           ! 3894             outb(0x3ce,i);
28618                                           ! Debug: list unsigned short i = [S+$C-4] (used reg = )
28619 77F4           FF76         FE            push	-2[bp]
28620                                           ! Debug: list int = const $3CE (used reg = )
28621 77F7           B8                   03CE  mov	ax,#$3CE
28622 77FA           50                         push	ax
28623                                           ! Debug: func () void = outb+0 (used reg = )
28624 77FB           E8         0549            call	_outb
28625 77FE           83C4                   04  add	sp,*4
28626                                           !BCC_EOS
28627                                           ! 3895             outb(0x3cf, read_byte(ES, BX)); BX++;
28628                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28629 7801           FF76         08            push	8[bp]
28630                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28631 7804           FF76         06            push	6[bp]
28632                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28633 7807           E8         04D1            call	_read_byte
28634 780A           83C4                   04  add	sp,*4
28635                                           ! Debug: list unsigned char = al+0 (used reg = )
28636 780D           30E4                       xor	ah,ah
28637 780F           50                         push	ax
28638                                           ! Debug: list int = const $3CF (used reg = )
28639 7810           B8                   03CF  mov	ax,#$3CF
28640 7813           50                         push	ax
28641                                           ! Debug: func () void = outb+0 (used reg = )
28642 7814           E8         0530            call	_outb
28643 7817           83C4                   04  add	sp,*4
28644                                           !BCC_EOS
28645                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28646 781A           8B46         08            mov	ax,8[bp]
28647 781D           40                         inc	ax
28648 781E           8946         08            mov	8[bp],ax
28649                                           !BCC_EOS
28650                                           ! 3896         }
28651                                           ! 3897         BX += 2;
28652                       00007821            .284:
28653                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
28654 7821           8B46         FE            mov	ax,-2[bp]
28655 7824           40                         inc	ax
28656 7825           8946         FE            mov	-2[bp],ax
28657                       00007828            .285:
28658                                           ! Debug: le int = const 8 to unsigned short i = [S+$C-4] (used reg = )
28659 7828           8B46         FE            mov	ax,-2[bp]
28660 782B           3D                   0008  cmp	ax,*8
28661 782E           76           C4            jbe	.286
28662                       00007830            .287:
28663                       00007830            .283:
28664                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28665 7830           8B46         08            mov	ax,8[bp]
28666 7833           40                         inc	ax
28667 7834           40                         inc	ax
28668 7835           8946         08            mov	8[bp],ax
28669                                           !BCC_EOS
28670                                           ! 3898         BX += 4;
28671                                           ! Debug: addab int = const 4 to unsigned short BX = [S+$C+6] (used reg = )
28672 7838           8B46         08            mov	ax,8[bp]
28673 783B           05                   0004  add	ax,*4
28674 783E           8946         08            mov	8[bp],ax
28675                                           !BCC_EOS
28676                                           ! 3899         outb(0x3c4, read_byte(ES, addr1)); addr1++;
28677                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28678 7841           FF76         F8            push	-8[bp]
28679                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28680 7844           FF76         06            push	6[bp]
28681                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28682 7847           E8         0491            call	_read_byte
28683 784A           83C4                   04  add	sp,*4
28684                                           ! Debug: list unsigned char = al+0 (used reg = )
28685 784D           30E4                       xor	ah,ah
28686 784F           50                         push	ax
28687                                           ! Debug: list int = const $3C4 (used reg = )
28688 7850           B8                   03C4  mov	ax,#$3C4
28689 7853           50                         push	ax
28690                                           ! Debug: func () void = outb+0 (used reg = )
28691 7854           E8         04F0            call	_outb
28692 7857           83C4                   04  add	sp,*4
28693                                           !BCC_EOS
28694                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28695 785A           8B46         F8            mov	ax,-8[bp]
28696 785D           40                         inc	ax
28697 785E           8946         F8            mov	-8[bp],ax
28698                                           !BCC_EOS
28699                                           ! 3900         outb(crtc_addr, read_byte(ES, addr1)); addr1++;
28700                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28701 7861           FF76         F8            push	-8[bp]
28702                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28703 7864           FF76         06            push	6[bp]
28704                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28705 7867           E8         0471            call	_read_byte
28706 786A           83C4                   04  add	sp,*4
28707                                           ! Debug: list unsigned char = al+0 (used reg = )
28708 786D           30E4                       xor	ah,ah
28709 786F           50                         push	ax
28710                                           ! Debug: list unsigned short crtc_addr = [S+$E-6] (used reg = )
28711 7870           FF76         FC            push	-4[bp]
28712                                           ! Debug: func () void = outb+0 (used reg = )
28713 7873           E8         04D1            call	_outb
28714 7876           83C4                   04  add	sp,*4
28715                                           !BCC_EOS
28716                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28717 7879           8B46         F8            mov	ax,-8[bp]
28718 787C           40                         inc	ax
28719 787D           8946         F8            mov	-8[bp],ax
28720                                           !BCC_EOS
28721                                           ! 3901         outb(0x3ce, read_byte(ES, addr1)); addr1++;
28722                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28723 7880           FF76         F8            push	-8[bp]
28724                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28725 7883           FF76         06            push	6[bp]
28726                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28727 7886           E8         0452            call	_read_byte
28728 7889           83C4                   04  add	sp,*4
28729                                           ! Debug: list unsigned char = al+0 (used reg = )
28730 788C           30E4                       xor	ah,ah
28731 788E           50                         push	ax
28732                                           ! Debug: list int = const $3CE (used reg = )
28733 788F           B8                   03CE  mov	ax,#$3CE
28734 7892           50                         push	ax
28735                                           ! Debug: func () void = outb+0 (used reg = )
28736 7893           E8         04B1            call	_outb
28737 7896           83C4                   04  add	sp,*4
28738                                           !BCC_EOS
28739                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28740 7899           8B46         F8            mov	ax,-8[bp]
28741 789C           40                         inc	ax
28742 789D           8946         F8            mov	-8[bp],ax
28743                                           !BCC_EOS
28744                                           ! 3902         addr1++;
28745                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28746 78A0           8B46         F8            mov	ax,-8[bp]
28747 78A3           40                         inc	ax
28748 78A4           8946         F8            mov	-8[bp],ax
28749                                           !BCC_EOS
28750                                           ! 3903         outb(crtc_addr - 0x4 + 0xa, read_byte(ES, addr1)); addr1++;
28751                                           ! Debug: list unsigned short addr1 = [S+$C-$A] (used reg = )
28752 78A7           FF76         F8            push	-8[bp]
28753                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28754 78AA           FF76         06            push	6[bp]
28755                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28756 78AD           E8         042B            call	_read_byte
28757 78B0           83C4                   04  add	sp,*4
28758                                           ! Debug: list unsigned char = al+0 (used reg = )
28759 78B3           30E4                       xor	ah,ah
28760 78B5           50                         push	ax
28761                                           ! Debug: sub int = const 4 to unsigned short crtc_addr = [S+$E-6] (used reg = )
28762 78B6           8B46         FC            mov	ax,-4[bp]
28763                                           ! Debug: add int = const $A to unsigned int = ax-4 (used reg = )
28764                                           ! Debug: list unsigned int = ax+6 (used reg = )
28765 78B9           05                   0006  add	ax,*6
28766 78BC           50                         push	ax
28767                                           ! Debug: func () void = outb+0 (used reg = )
28768 78BD           E8         0487            call	_outb
28769 78C0           83C4                   04  add	sp,*4
28770                                           !BCC_EOS
28771                                           ! Debug: postinc unsigned short addr1 = [S+$C-$A] (used reg = )
28772 78C3           8B46         F8            mov	ax,-8[bp]
28773 78C6           40                         inc	ax
28774 78C7           8946         F8            mov	-8[bp],ax
28775                                           !BCC_EOS
28776                                           ! 3904     }
28777                                           ! 3905     if (CX & 2) {
28778                       000078CA            .26E:
28779                                           ! Debug: and int = const 2 to unsigned short CX = [S+$C+2] (used reg = )
28780 78CA           8A46         04            mov	al,4[bp]
28781 78CD           24                     02  and	al,*2
28782 78CF           84C0                       test	al,al
28783 78D1   7503    E9         0270            beq 	.288
28784                       000078D6            .289:
28785                                           ! 3906         write_byte(0x40,0x49, read_byte(ES, BX)); BX++;
28786                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28787 78D6           FF76         08            push	8[bp]
28788                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28789 78D9           FF76         06            push	6[bp]
28790                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28791 78DC           E8         03FC            call	_read_byte
28792 78DF           83C4                   04  add	sp,*4
28793                                           ! Debug: list unsigned char = al+0 (used reg = )
28794 78E2           30E4                       xor	ah,ah
28795 78E4           50                         push	ax
28796                                           ! Debug: list int = const $49 (used reg = )
28797 78E5           B8                   0049  mov	ax,*$49
28798 78E8           50                         push	ax
28799                                           ! Debug: list int = const $40 (used reg = )
28800 78E9           B8                   0040  mov	ax,*$40
28801 78EC           50                         push	ax
28802                                           ! Debug: func () void = write_byte+0 (used reg = )
28803 78ED           E8         0411            call	_write_byte
28804 78F0           83C4                   06  add	sp,*6
28805                                           !BCC_EOS
28806                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28807 78F3           8B46         08            mov	ax,8[bp]
28808 78F6           40                         inc	ax
28809 78F7           8946         08            mov	8[bp],ax
28810                                           !BCC_EOS
28811                                           ! 3907         write_word(0x40,0x4A, read_word(ES, BX)); BX += 2;
28812                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28813 78FA           FF76         08            push	8[bp]
28814                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28815 78FD           FF76         06            push	6[bp]
28816                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28817 7900           E8         03EB            call	_read_word
28818 7903           83C4                   04  add	sp,*4
28819                                           ! Debug: list unsigned short = ax+0 (used reg = )
28820 7906           50                         push	ax
28821                                           ! Debug: list int = const $4A (used reg = )
28822 7907           B8                   004A  mov	ax,*$4A
28823 790A           50                         push	ax
28824                                           ! Debug: list int = const $40 (used reg = )
28825 790B           B8                   0040  mov	ax,*$40
28826 790E           50                         push	ax
28827                                           ! Debug: func () void = write_word+0 (used reg = )
28828 790F           E8         0407            call	_write_word
28829 7912           83C4                   06  add	sp,*6
28830                                           !BCC_EOS
28831                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28832 7915           8B46         08            mov	ax,8[bp]
28833 7918           40                         inc	ax
28834 7919           40                         inc	ax
28835 791A           8946         08            mov	8[bp],ax
28836                                           !BCC_EOS
28837                                           ! 3908         write_word(0x40,0x4C, read_word(ES, BX)); BX += 2;
28838                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28839 791D           FF76         08            push	8[bp]
28840                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28841 7920           FF76         06            push	6[bp]
28842                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28843 7923           E8         03C8            call	_read_word
28844 7926           83C4                   04  add	sp,*4
28845                                           ! Debug: list unsigned short = ax+0 (used reg = )
28846 7929           50                         push	ax
28847                                           ! Debug: list int = const $4C (used reg = )
28848 792A           B8                   004C  mov	ax,*$4C
28849 792D           50                         push	ax
28850                                           ! Debug: list int = const $40 (used reg = )
28851 792E           B8                   0040  mov	ax,*$40
28852 7931           50                         push	ax
28853                                           ! Debug: func () void = write_word+0 (used reg = )
28854 7932           E8         03E4            call	_write_word
28855 7935           83C4                   06  add	sp,*6
28856                                           !BCC_EOS
28857                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28858 7938           8B46         08            mov	ax,8[bp]
28859 793B           40                         inc	ax
28860 793C           40                         inc	ax
28861 793D           8946         08            mov	8[bp],ax
28862                                           !BCC_EOS
28863                                           ! 3909         write_word(0x40,0x63, read_word(ES, BX)); BX += 2;
28864                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28865 7940           FF76         08            push	8[bp]
28866                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28867 7943           FF76         06            push	6[bp]
28868                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28869 7946           E8         03A5            call	_read_word
28870 7949           83C4                   04  add	sp,*4
28871                                           ! Debug: list unsigned short = ax+0 (used reg = )
28872 794C           50                         push	ax
28873                                           ! Debug: list int = const $63 (used reg = )
28874 794D           B8                   0063  mov	ax,*$63
28875 7950           50                         push	ax
28876                                           ! Debug: list int = const $40 (used reg = )
28877 7951           B8                   0040  mov	ax,*$40
28878 7954           50                         push	ax
28879                                           ! Debug: func () void = write_word+0 (used reg = )
28880 7955           E8         03C1            call	_write_word
28881 7958           83C4                   06  add	sp,*6
28882                                           !BCC_EOS
28883                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28884 795B           8B46         08            mov	ax,8[bp]
28885 795E           40                         inc	ax
28886 795F           40                         inc	ax
28887 7960           8946         08            mov	8[bp],ax
28888                                           !BCC_EOS
28889                                           ! 3910         write_byte(0x40,0x84, read_byte(ES, BX)); BX++;
28890                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28891 7963           FF76         08            push	8[bp]
28892                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28893 7966           FF76         06            push	6[bp]
28894                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28895 7969           E8         036F            call	_read_byte
28896 796C           83C4                   04  add	sp,*4
28897                                           ! Debug: list unsigned char = al+0 (used reg = )
28898 796F           30E4                       xor	ah,ah
28899 7971           50                         push	ax
28900                                           ! Debug: list int = const $84 (used reg = )
28901 7972           B8                   0084  mov	ax,#$84
28902 7975           50                         push	ax
28903                                           ! Debug: list int = const $40 (used reg = )
28904 7976           B8                   0040  mov	ax,*$40
28905 7979           50                         push	ax
28906                                           ! Debug: func () void = write_byte+0 (used reg = )
28907 797A           E8         0384            call	_write_byte
28908 797D           83C4                   06  add	sp,*6
28909                                           !BCC_EOS
28910                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28911 7980           8B46         08            mov	ax,8[bp]
28912 7983           40                         inc	ax
28913 7984           8946         08            mov	8[bp],ax
28914                                           !BCC_EOS
28915                                           ! 3911         write_word(0x40,0x85, read_word(ES, BX)); BX += 2;
28916                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28917 7987           FF76         08            push	8[bp]
28918                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28919 798A           FF76         06            push	6[bp]
28920                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
28921 798D           E8         035E            call	_read_word
28922 7990           83C4                   04  add	sp,*4
28923                                           ! Debug: list unsigned short = ax+0 (used reg = )
28924 7993           50                         push	ax
28925                                           ! Debug: list int = const $85 (used reg = )
28926 7994           B8                   0085  mov	ax,#$85
28927 7997           50                         push	ax
28928                                           ! Debug: list int = const $40 (used reg = )
28929 7998           B8                   0040  mov	ax,*$40
28930 799B           50                         push	ax
28931                                           ! Debug: func () void = write_word+0 (used reg = )
28932 799C           E8         037A            call	_write_word
28933 799F           83C4                   06  add	sp,*6
28934                                           !BCC_EOS
28935                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
28936 79A2           8B46         08            mov	ax,8[bp]
28937 79A5           40                         inc	ax
28938 79A6           40                         inc	ax
28939 79A7           8946         08            mov	8[bp],ax
28940                                           !BCC_EOS
28941                                           ! 3912         write_byte(0x40,0x87, read_byte(ES, BX)); BX++;
28942                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28943 79AA           FF76         08            push	8[bp]
28944                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28945 79AD           FF76         06            push	6[bp]
28946                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28947 79B0           E8         0328            call	_read_byte
28948 79B3           83C4                   04  add	sp,*4
28949                                           ! Debug: list unsigned char = al+0 (used reg = )
28950 79B6           30E4                       xor	ah,ah
28951 79B8           50                         push	ax
28952                                           ! Debug: list int = const $87 (used reg = )
28953 79B9           B8                   0087  mov	ax,#$87
28954 79BC           50                         push	ax
28955                                           ! Debug: list int = const $40 (used reg = )
28956 79BD           B8                   0040  mov	ax,*$40
28957 79C0           50                         push	ax
28958                                           ! Debug: func () void = write_byte+0 (used reg = )
28959 79C1           E8         033D            call	_write_byte
28960 79C4           83C4                   06  add	sp,*6
28961                                           !BCC_EOS
28962                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28963 79C7           8B46         08            mov	ax,8[bp]
28964 79CA           40                         inc	ax
28965 79CB           8946         08            mov	8[bp],ax
28966                                           !BCC_EOS
28967                                           ! 3913         write_byte(0x40,0x88, read_byte(ES, BX)); BX++;
28968                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28969 79CE           FF76         08            push	8[bp]
28970                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28971 79D1           FF76         06            push	6[bp]
28972                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28973 79D4           E8         0304            call	_read_byte
28974 79D7           83C4                   04  add	sp,*4
28975                                           ! Debug: list unsigned char = al+0 (used reg = )
28976 79DA           30E4                       xor	ah,ah
28977 79DC           50                         push	ax
28978                                           ! Debug: list int = const $88 (used reg = )
28979 79DD           B8                   0088  mov	ax,#$88
28980 79E0           50                         push	ax
28981                                           ! Debug: list int = const $40 (used reg = )
28982 79E1           B8                   0040  mov	ax,*$40
28983 79E4           50                         push	ax
28984                                           ! Debug: func () void = write_byte+0 (used reg = )
28985 79E5           E8         0319            call	_write_byte
28986 79E8           83C4                   06  add	sp,*6
28987                                           !BCC_EOS
28988                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
28989 79EB           8B46         08            mov	ax,8[bp]
28990 79EE           40                         inc	ax
28991 79EF           8946         08            mov	8[bp],ax
28992                                           !BCC_EOS
28993                                           ! 3914         write_byte(0x40,0x89, read_byte(ES, BX)); BX++;
28994                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
28995 79F2           FF76         08            push	8[bp]
28996                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
28997 79F5           FF76         06            push	6[bp]
28998                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
28999 79F8           E8         02E0            call	_read_byte
29000 79FB           83C4                   04  add	sp,*4
29001                                           ! Debug: list unsigned char = al+0 (used reg = )
29002 79FE           30E4                       xor	ah,ah
29003 7A00           50                         push	ax
29004                                           ! Debug: list int = const $89 (used reg = )
29005 7A01           B8                   0089  mov	ax,#$89
29006 7A04           50                         push	ax
29007                                           ! Debug: list int = const $40 (used reg = )
29008 7A05           B8                   0040  mov	ax,*$40
29009 7A08           50                         push	ax
29010                                           ! Debug: func () void = write_byte+0 (used reg = )
29011 7A09           E8         02F5            call	_write_byte
29012 7A0C           83C4                   06  add	sp,*6
29013                                           !BCC_EOS
29014                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29015 7A0F           8B46         08            mov	ax,8[bp]
29016 7A12           40                         inc	ax
29017 7A13           8946         08            mov	8[bp],ax
29018                                           !BCC_EOS
29019                                           ! 3915         write_word(0x40,0x60, read_word(ES, BX)); BX += 2;
29020                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29021 7A16           FF76         08            push	8[bp]
29022                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29023 7A19           FF76         06            push	6[bp]
29024                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29025 7A1C           E8         02CF            call	_read_word
29026 7A1F           83C4                   04  add	sp,*4
29027                                           ! Debug: list unsigned short = ax+0 (used reg = )
29028 7A22           50                         push	ax
29029                                           ! Debug: list int = const $60 (used reg = )
29030 7A23           B8                   0060  mov	ax,*$60
29031 7A26           50                         push	ax
29032                                           ! Debug: list int = const $40 (used reg = )
29033 7A27           B8                   0040  mov	ax,*$40
29034 7A2A           50                         push	ax
29035                                           ! Debug: func () void = write_word+0 (used reg = )
29036 7A2B           E8         02EB            call	_write_word
29037 7A2E           83C4                   06  add	sp,*6
29038                                           !BCC_EOS
29039                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29040 7A31           8B46         08            mov	ax,8[bp]
29041 7A34           40                         inc	ax
29042 7A35           40                         inc	ax
29043 7A36           8946         08            mov	8[bp],ax
29044                                           !BCC_EOS
29045                                           ! 3916         for(i=0;i<8;i++) {
29046                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29047 7A39           31C0                       xor	ax,ax
29048 7A3B           8946         FE            mov	-2[bp],ax
29049                                           !BCC_EOS
29050                                           !BCC_EOS
29051 7A3E           EB           2F            jmp .28C
29052                       00007A40            .28D:
29053                                           ! 3917             write_word(0x40, 0x50 +2*i, read_word(ES, BX));
29054                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29055 7A40           FF76         08            push	8[bp]
29056                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29057 7A43           FF76         06            push	6[bp]
29058                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29059 7A46           E8         02A5            call	_read_word
29060 7A49           83C4                   04  add	sp,*4
29061                                           ! Debug: list unsigned short = ax+0 (used reg = )
29062 7A4C           50                         push	ax
29063                                           ! Debug: mul unsigned short i = [S+$E-4] to int = const 2 (used reg = )
29064                                           ! Debug: expression subtree swapping
29065 7A4D           8B46         FE            mov	ax,-2[bp]
29066 7A50           D1E0                       shl	ax,*1
29067                                           ! Debug: add unsigned int = ax+0 to int = const $50 (used reg = )
29068                                           ! Debug: expression subtree swapping
29069                                           ! Debug: list unsigned int = ax+$50 (used reg = )
29070 7A52           05                   0050  add	ax,*$50
29071 7A55           50                         push	ax
29072                                           ! Debug: list int = const $40 (used reg = )
29073 7A56           B8                   0040  mov	ax,*$40
29074 7A59           50                         push	ax
29075                                           ! Debug: func () void = write_word+0 (used reg = )
29076 7A5A           E8         02BC            call	_write_word
29077 7A5D           83C4                   06  add	sp,*6
29078                                           !BCC_EOS
29079                                           ! 3918             BX += 2;
29080                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29081 7A60           8B46         08            mov	ax,8[bp]
29082 7A63           40                         inc	ax
29083 7A64           40                         inc	ax
29084 7A65           8946         08            mov	8[bp],ax
29085                                           !BCC_EOS
29086                                           ! 3919         }
29087                                           ! 3920         write_word(0x40,0x4E, read_word(ES, BX)); BX += 2;
29088                       00007A68            .28B:
29089                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29090 7A68           8B46         FE            mov	ax,-2[bp]
29091 7A6B           40                         inc	ax
29092 7A6C           8946         FE            mov	-2[bp],ax
29093                       00007A6F            .28C:
29094                                           ! Debug: lt int = const 8 to unsigned short i = [S+$C-4] (used reg = )
29095 7A6F           8B46         FE            mov	ax,-2[bp]
29096 7A72           3D                   0008  cmp	ax,*8
29097 7A75           72           C9            jb 	.28D
29098                       00007A77            .28E:
29099                       00007A77            .28A:
29100                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29101 7A77           FF76         08            push	8[bp]
29102                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29103 7A7A           FF76         06            push	6[bp]
29104                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29105 7A7D           E8         026E            call	_read_word
29106 7A80           83C4                   04  add	sp,*4
29107                                           ! Debug: list unsigned short = ax+0 (used reg = )
29108 7A83           50                         push	ax
29109                                           ! Debug: list int = const $4E (used reg = )
29110 7A84           B8                   004E  mov	ax,*$4E
29111 7A87           50                         push	ax
29112                                           ! Debug: list int = const $40 (used reg = )
29113 7A88           B8                   0040  mov	ax,*$40
29114 7A8B           50                         push	ax
29115                                           ! Debug: func () void = write_word+0 (used reg = )
29116 7A8C           E8         028A            call	_write_word
29117 7A8F           83C4                   06  add	sp,*6
29118                                           !BCC_EOS
29119                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29120 7A92           8B46         08            mov	ax,8[bp]
29121 7A95           40                         inc	ax
29122 7A96           40                         inc	ax
29123 7A97           8946         08            mov	8[bp],ax
29124                                           !BCC_EOS
29125                                           ! 3921         write_byte(0x40,0x62, read_byte(ES, BX)); BX++;
29126                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29127 7A9A           FF76         08            push	8[bp]
29128                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29129 7A9D           FF76         06            push	6[bp]
29130                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29131 7AA0           E8         0238            call	_read_byte
29132 7AA3           83C4                   04  add	sp,*4
29133                                           ! Debug: list unsigned char = al+0 (used reg = )
29134 7AA6           30E4                       xor	ah,ah
29135 7AA8           50                         push	ax
29136                                           ! Debug: list int = const $62 (used reg = )
29137 7AA9           B8                   0062  mov	ax,*$62
29138 7AAC           50                         push	ax
29139                                           ! Debug: list int = const $40 (used reg = )
29140 7AAD           B8                   0040  mov	ax,*$40
29141 7AB0           50                         push	ax
29142                                           ! Debug: func () void = write_byte+0 (used reg = )
29143 7AB1           E8         024D            call	_write_byte
29144 7AB4           83C4                   06  add	sp,*6
29145                                           !BCC_EOS
29146                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29147 7AB7           8B46         08            mov	ax,8[bp]
29148 7ABA           40                         inc	ax
29149 7ABB           8946         08            mov	8[bp],ax
29150                                           !BCC_EOS
29151                                           ! 3922         write_word(0, 0x1f * 4, read_word(ES, BX)); BX += 2;
29152                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29153 7ABE           FF76         08            push	8[bp]
29154                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29155 7AC1           FF76         06            push	6[bp]
29156                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29157 7AC4           E8         0227            call	_read_word
29158 7AC7           83C4                   04  add	sp,*4
29159                                           ! Debug: list unsigned short = ax+0 (used reg = )
29160 7ACA           50                         push	ax
29161                                           ! Debug: list int = const $7C (used reg = )
29162 7ACB           B8                   007C  mov	ax,*$7C
29163 7ACE           50                         push	ax
29164                                           ! Debug: list int = const 0 (used reg = )
29165 7ACF           31C0                       xor	ax,ax
29166 7AD1           50                         push	ax
29167                                           ! Debug: func () void = write_word+0 (used reg = )
29168 7AD2           E8         0244            call	_write_word
29169 7AD5           83C4                   06  add	sp,*6
29170                                           !BCC_EOS
29171                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29172 7AD8           8B46         08            mov	ax,8[bp]
29173 7ADB           40                         inc	ax
29174 7ADC           40                         inc	ax
29175 7ADD           8946         08            mov	8[bp],ax
29176                                           !BCC_EOS
29177                                           ! 3923         write_word(0, 0x1f * 4 + 2, read_word(ES, BX)); BX += 2;
29178                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29179 7AE0           FF76         08            push	8[bp]
29180                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29181 7AE3           FF76         06            push	6[bp]
29182                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29183 7AE6           E8         0205            call	_read_word
29184 7AE9           83C4                   04  add	sp,*4
29185                                           ! Debug: list unsigned short = ax+0 (used reg = )
29186 7AEC           50                         push	ax
29187                                           ! Debug: list int = const $7E (used reg = )
29188 7AED           B8                   007E  mov	ax,*$7E
29189 7AF0           50                         push	ax
29190                                           ! Debug: list int = const 0 (used reg = )
29191 7AF1           31C0                       xor	ax,ax
29192 7AF3           50                         push	ax
29193                                           ! Debug: func () void = write_word+0 (used reg = )
29194 7AF4           E8         0222            call	_write_word
29195 7AF7           83C4                   06  add	sp,*6
29196                                           !BCC_EOS
29197                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29198 7AFA           8B46         08            mov	ax,8[bp]
29199 7AFD           40                         inc	ax
29200 7AFE           40                         inc	ax
29201 7AFF           8946         08            mov	8[bp],ax
29202                                           !BCC_EOS
29203                                           ! 3924         write_word(0, 0x43 * 4, read_word(ES, BX)); BX += 2;
29204                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29205 7B02           FF76         08            push	8[bp]
29206                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29207 7B05           FF76         06            push	6[bp]
29208                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29209 7B08           E8         01E3            call	_read_word
29210 7B0B           83C4                   04  add	sp,*4
29211                                           ! Debug: list unsigned short = ax+0 (used reg = )
29212 7B0E           50                         push	ax
29213                                           ! Debug: list int = const $10C (used reg = )
29214 7B0F           B8                   010C  mov	ax,#$10C
29215 7B12           50                         push	ax
29216                                           ! Debug: list int = const 0 (used reg = )
29217 7B13           31C0                       xor	ax,ax
29218 7B15           50                         push	ax
29219                                           ! Debug: func () void = write_word+0 (used reg = )
29220 7B16           E8         0200            call	_write_word
29221 7B19           83C4                   06  add	sp,*6
29222                                           !BCC_EOS
29223                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29224 7B1C           8B46         08            mov	ax,8[bp]
29225 7B1F           40                         inc	ax
29226 7B20           40                         inc	ax
29227 7B21           8946         08            mov	8[bp],ax
29228                                           !BCC_EOS
29229                                           ! 3925         write_word(0, 0x43 * 4 + 2, read_w
29230                                           ! 3925 ord(ES, BX)); BX += 2;
29231                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29232 7B24           FF76         08            push	8[bp]
29233                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29234 7B27           FF76         06            push	6[bp]
29235                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
29236 7B2A           E8         01C1            call	_read_word
29237 7B2D           83C4                   04  add	sp,*4
29238                                           ! Debug: list unsigned short = ax+0 (used reg = )
29239 7B30           50                         push	ax
29240                                           ! Debug: list int = const $10E (used reg = )
29241 7B31           B8                   010E  mov	ax,#$10E
29242 7B34           50                         push	ax
29243                                           ! Debug: list int = const 0 (used reg = )
29244 7B35           31C0                       xor	ax,ax
29245 7B37           50                         push	ax
29246                                           ! Debug: func () void = write_word+0 (used reg = )
29247 7B38           E8         01DE            call	_write_word
29248 7B3B           83C4                   06  add	sp,*6
29249                                           !BCC_EOS
29250                                           ! Debug: addab int = const 2 to unsigned short BX = [S+$C+6] (used reg = )
29251 7B3E           8B46         08            mov	ax,8[bp]
29252 7B41           40                         inc	ax
29253 7B42           40                         inc	ax
29254 7B43           8946         08            mov	8[bp],ax
29255                                           !BCC_EOS
29256                                           ! 3926     }
29257                                           ! 3927     if (CX & 4) {
29258                       00007B46            .288:
29259                                           ! Debug: and int = const 4 to unsigned short CX = [S+$C+2] (used reg = )
29260 7B46           8A46         04            mov	al,4[bp]
29261 7B49           24                     04  and	al,*4
29262 7B4B           84C0                       test	al,al
29263 7B4D   7503    E9         0096            beq 	.28F
29264                       00007B52            .290:
29265                                           ! 3928         BX++;
29266                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29267 7B52           8B46         08            mov	ax,8[bp]
29268 7B55           40                         inc	ax
29269 7B56           8946         08            mov	8[bp],ax
29270                                           !BCC_EOS
29271                                           ! 3929         v = read_byte(ES, BX); BX++;
29272                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29273 7B59           FF76         08            push	8[bp]
29274                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29275 7B5C           FF76         06            push	6[bp]
29276                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29277 7B5F           E8         0179            call	_read_byte
29278 7B62           83C4                   04  add	sp,*4
29279                                           ! Debug: eq unsigned char = al+0 to unsigned short v = [S+$C-8] (used reg = )
29280 7B65           30E4                       xor	ah,ah
29281 7B67           8946         FA            mov	-6[bp],ax
29282                                           !BCC_EOS
29283                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29284 7B6A           8B46         08            mov	ax,8[bp]
29285 7B6D           40                         inc	ax
29286 7B6E           8946         08            mov	8[bp],ax
29287                                           !BCC_EOS
29288                                           ! 3930         outb(0x3c6, read_byte(ES, BX)); BX++;
29289                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29290 7B71           FF76         08            push	8[bp]
29291                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29292 7B74           FF76         06            push	6[bp]
29293                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29294 7B77           E8         0161            call	_read_byte
29295 7B7A           83C4                   04  add	sp,*4
29296                                           ! Debug: list unsigned char = al+0 (used reg = )
29297 7B7D           30E4                       xor	ah,ah
29298 7B7F           50                         push	ax
29299                                           ! Debug: list int = const $3C6 (used reg = )
29300 7B80           B8                   03C6  mov	ax,#$3C6
29301 7B83           50                         push	ax
29302                                           ! Debug: func () void = outb+0 (used reg = )
29303 7B84           E8         01C0            call	_outb
29304 7B87           83C4                   04  add	sp,*4
29305                                           !BCC_EOS
29306                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29307 7B8A           8B46         08            mov	ax,8[bp]
29308 7B8D           40                         inc	ax
29309 7B8E           8946         08            mov	8[bp],ax
29310                                           !BCC_EOS
29311                                           ! 3931         outb(0x3c8,0x00);
29312                                           ! Debug: list int = const 0 (used reg = )
29313 7B91           31C0                       xor	ax,ax
29314 7B93           50                         push	ax
29315                                           ! Debug: list int = const $3C8 (used reg = )
29316 7B94           B8                   03C8  mov	ax,#$3C8
29317 7B97           50                         push	ax
29318                                           ! Debug: func () void = outb+0 (used reg = )
29319 7B98           E8         01AC            call	_outb
29320 7B9B           83C4                   04  add	sp,*4
29321                                           !BCC_EOS
29322                                           ! 3932         for(i=0;i<256*3;i++) {
29323                                           ! Debug: eq int = const 0 to unsigned short i = [S+$C-4] (used reg = )
29324 7B9E           31C0                       xor	ax,ax
29325 7BA0           8946         FE            mov	-2[bp],ax
29326                                           !BCC_EOS
29327                                           !BCC_EOS
29328 7BA3           EB           27            jmp .293
29329                       00007BA5            .294:
29330                                           ! 3933             outb(0x3c9, read_byte(ES, BX)); BX++;
29331                                           ! Debug: list unsigned short BX = [S+$C+6] (used reg = )
29332 7BA5           FF76         08            push	8[bp]
29333                                           ! Debug: list unsigned short ES = [S+$E+4] (used reg = )
29334 7BA8           FF76         06            push	6[bp]
29335                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
29336 7BAB           E8         012D            call	_read_byte
29337 7BAE           83C4                   04  add	sp,*4
29338                                           ! Debug: list unsigned char = al+0 (used reg = )
29339 7BB1           30E4                       xor	ah,ah
29340 7BB3           50                         push	ax
29341                                           ! Debug: list int = const $3C9 (used reg = )
29342 7BB4           B8                   03C9  mov	ax,#$3C9
29343 7BB7           50                         push	ax
29344                                           ! Debug: func () void = outb+0 (used reg = )
29345 7BB8           E8         018C            call	_outb
29346 7BBB           83C4                   04  add	sp,*4
29347                                           !BCC_EOS
29348                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29349 7BBE           8B46         08            mov	ax,8[bp]
29350 7BC1           40                         inc	ax
29351 7BC2           8946         08            mov	8[bp],ax
29352                                           !BCC_EOS
29353                                           ! 3934         }
29354                                           ! 3935         BX++;
29355                       00007BC5            .292:
29356                                           ! Debug: postinc unsigned short i = [S+$C-4] (used reg = )
29357 7BC5           8B46         FE            mov	ax,-2[bp]
29358 7BC8           40                         inc	ax
29359 7BC9           8946         FE            mov	-2[bp],ax
29360                       00007BCC            .293:
29361                                           ! Debug: lt int = const $300 to unsigned short i = [S+$C-4] (used reg = )
29362 7BCC           8B46         FE            mov	ax,-2[bp]
29363 7BCF           3D                   0300  cmp	ax,#$300
29364 7BD2           72           D1            jb 	.294
29365                       00007BD4            .295:
29366                       00007BD4            .291:
29367                                           ! Debug: postinc unsigned short BX = [S+$C+6] (used reg = )
29368 7BD4           8B46         08            mov	ax,8[bp]
29369 7BD7           40                         inc	ax
29370 7BD8           8946         08            mov	8[bp],ax
29371                                           !BCC_EOS
29372                                           ! 3936         outb(0x3c8, v);
29373                                           ! Debug: list unsigned short v = [S+$C-8] (used reg = )
29374 7BDB           FF76         FA            push	-6[bp]
29375                                           ! Debug: list int = const $3C8 (used reg = )
29376 7BDE           B8                   03C8  mov	ax,#$3C8
29377 7BE1           50                         push	ax
29378                                           ! Debug: func () void = outb+0 (used reg = )
29379 7BE2           E8         0162            call	_outb
29380 7BE5           83C4                   04  add	sp,*4
29381                                           !BCC_EOS
29382                                           ! 3937     }
29383                                           ! 3938     return BX;
29384                       00007BE8            .28F:
29385 7BE8           8B46         08            mov	ax,8[bp]
29386 7BEB           89EC                       mov	sp,bp
29387 7BED           5D                         pop	bp
29388 7BEE           C3                         ret
29389                                           !BCC_EOS
29390                                           ! 3939 }
29391                                           ! 3940 static Bit8u find_vga_entry(mode)
29392                                           ! 3941 Bit8u mode;
29393                       00007BEF            _find_vga_entry:
29394                                           !BCC_EOS
29395                                           ! 3942 {
29396                                           ! 3943  Bit8u i,line=0xFF;
29397 7BEF           55                         push	bp
29398 7BF0           89E5                       mov	bp,sp
29399 7BF2           4C                         dec	sp
29400 7BF3           4C                         dec	sp
29401                                           ! Debug: eq int = const $FF to unsigned char line = [S+4-4] (used reg = )
29402 7BF4           B0                     FF  mov	al,#$FF
29403 7BF6           8846         FE            mov	-2[bp],al
29404                                           !BCC_EOS
29405                                           ! 3944  for(i=0;i<=15;i++)
29406                                           ! Debug: eq int = const 0 to unsigned char i = [S+4-3] (used reg = )
29407 7BF9           30C0                       xor	al,al
29408 7BFB           8846         FF            mov	-1[bp],al
29409                                           !BCC_EOS
29410                                           !BCC_EOS
29411                                           ! 3945   if(vga_modes[i].svgamode==mode)
29412 7BFE           EB           23            jmp .298
29413                       00007C00            .299:
29414                                           ! Debug: ptradd unsigned char i = [S+4-3] to [$10] struct  = vga_modes+0 (used reg = )
29415 7C00           8A46         FF            mov	al,-1[bp]
29416 7C03           30E4                       xor	ah,ah
29417 7C05           B1                     03  mov	cl,*3
29418 7C07           D3E0                       shl	ax,cl
29419 7C09           89C3                       mov	bx,ax
29420                                           ! Debug: logeq unsigned char mode = [S+4+2] to unsigned char = [bx+_vga_modes+0] (used reg = )
29421 7C0B           8A87       01E2            mov	al,_vga_modes[bx]
29422 7C0F           3A46         04            cmp	al,4[bp]
29423 7C12           75           08            jne 	.29A
29424                       00007C14            .29B:
29425                                           ! 3946    {line=i;
29426                                           ! Debug: eq unsigned char i = [S+4-3] to unsigned char line = [S+4-4] (used reg = )
29427 7C14           8A46         FF            mov	al,-1[bp]
29428 7C17           8846         FE            mov	-2[bp],al
29429                                           !BCC_EOS
29430                                           ! 3947     break;
29431 7C1A           EB           0E            jmp .296
29432                                           !BCC_EOS
29433                                           ! 3948    }
29434                                           ! 3949  return line;
29435                       00007C1C            .29A:
29436                       00007C1C            .297:
29437                                           ! Debug: postinc unsigned char i = [S+4-3] (used reg = )
29438 7C1C           8A46         FF            mov	al,-1[bp]
29439 7C1F           40                         inc	ax
29440 7C20           8846         FF            mov	-1[bp],al
29441                       00007C23            .298:
29442                                           ! Debug: le int = const $F to unsigned char i = [S+4-3] (used reg = )
29443 7C23           8A46         FF            mov	al,-1[bp]
29444 7C26           3C                     0F  cmp	al,*$F
29445 7C28           76           D6            jbe	.299
29446                       00007C2A            .29C:
29447                       00007C2A            .296:
29448 7C2A           8A46         FE            mov	al,-2[bp]
29449 7C2D           89EC                       mov	sp,bp
29450 7C2F           5D                         pop	bp
29451 7C30           C3                         ret
29452                                           !BCC_EOS
29453                                           ! 3950 }
29454                                           ! 3951 static void memsetb(seg,offset,value,count)
29455                                           ! Register BX used in function find_vga_entry
29456                                           ! 3952   Bit16u seg;
29457                       00007C31            _memsetb:
29458                                           !BCC_EOS
29459                                           ! 3953   Bit16u offset;
29460                                           !BCC_EOS
29461                                           ! 3954   Bit16u value;
29462                                           !BCC_EOS
29463                                           ! 3955   Bit16u count;
29464                                           !BCC_EOS
29465                                           ! 3956 {
29466                                           ! 3957 #asm
29467                                           !BCC_ASM
29468                       00000008            _memsetb.count	set	8
29469                       00000002            _memsetb.seg	set	2
29470                       00000006            _memsetb.value	set	6
29471                       00000004            _memsetb.offset	set	4
29472 7C31           55                           push bp
29473 7C32           89E5                         mov bp, sp
29474 7C34           50                             push ax
29475 7C35           51                             push cx
29476 7C36           06                             push es
29477 7C37           57                             push di
29478 7C38           8B4E         0A                mov cx, 10[bp] ; count
29479 7C3B           83F9                   00      cmp cx, #0x00
29480 7C3E           74           10                je memsetb_end
29481 7C40           8B46         04                mov ax, 4[bp] ; segment
29482 7C43           8EC0                           mov es, ax
29483 7C45           8B46         06                mov ax, 6[bp] ; offset
29484 7C48           89C7                           mov di, ax
29485 7C4A           8A46         08                mov al, 8[bp] ; value
29486 7C4D           FC                             cld
29487 7C4E           F3                             rep
29488 7C4F           AA                              stosb
29489                       00007C50            memsetb_end:
29490 7C50           5F                             pop di
29491 7C51           07                             pop es
29492 7C52           59                             pop cx
29493 7C53           58                             pop ax
29494 7C54           5D                           pop bp
29495                                           ! 3981 endasm
29496                                           !BCC_ENDASM
29497                                           ! 3982 }
29498 7C55           C3                         ret
29499                                           ! 3983 static void memsetw(seg,offset,value,count)
29500                                           ! 3984   Bit16u seg;
29501                       00007C56            _memsetw:
29502                                           !BCC_EOS
29503                                           ! 3985   Bit16u offset;
29504                                           !BCC_EOS
29505                                           ! 3986   Bit16u value;
29506                                           !BCC_EOS
29507                                           ! 3987   Bit16u count;
29508                                           !BCC_EOS
29509                                           ! 3988 {
29510                                           ! 3989 #asm
29511                                           !BCC_ASM
29512                       00000008            _memsetw.count	set	8
29513                       00000002            _memsetw.seg	set	2
29514                       00000006            _memsetw.value	set	6
29515                       00000004            _memsetw.offset	set	4
29516 7C56           55                           push bp
29517 7C57           89E5                         mov bp, sp
29518 7C59           50                             push ax
29519 7C5A           51                             push cx
29520 7C5B           06                             push es
29521 7C5C           57                             push di
29522 7C5D           8B4E         0A                mov cx, 10[bp] ; count
29523 7C60           83F9                   00      cmp cx, #0x00
29524 7C63           74           10                je memsetw_end
29525 7C65           8B46         04                mov ax, 4[bp] ; segment
29526 7C68           8EC0                           mov es, ax
29527 7C6A           8B46         06                mov ax, 6[bp] ; offset
29528 7C6D           89C7                           mov di, ax
29529 7C6F           8B46         08                mov ax, 8[bp] ; value
29530 7C72           FC                             cld
29531 7C73           F3                             rep
29532 7C74           AB                              stosw
29533                       00007C75            memsetw_end:
29534 7C75           5F                             pop di
29535 7C76           07                             pop es
29536 7C77           59                             pop cx
29537 7C78           58                             pop ax
29538 7C79           5D                           pop bp
29539                                           ! 4013 endasm
29540                                           !BCC_ENDASM
29541                                           ! 4014 }
29542 7C7A           C3                         ret
29543                                           ! 4015 static void memcpyb(dseg,doffset,sseg,soffset,count)
29544                                           ! 4016   Bit16u dseg;
29545                       00007C7B            _memcpyb:
29546                                           !BCC_EOS
29547                                           ! 4017   Bit16u doffset;
29548                                           !BCC_EOS
29549                                           ! 4018   Bit16u sseg;
29550                                           !BCC_EOS
29551                                           ! 4019   Bit16u soffset;
29552                                           !BCC_EOS
29553                                           ! 4020   Bit16u count;
29554                                           !BCC_EOS
29555                                           ! 4021 {
29556                                           ! 4022 #asm
29557                                           !BCC_ASM
29558                       0000000A            _memcpyb.count	set	$A
29559                       00000006            _memcpyb.sseg	set	6
29560                       00000008            _memcpyb.soffset	set	8
29561                       00000002            _memcpyb.dseg	set	2
29562                       00000004            _memcpyb.doffset	set	4
29563 7C7B           55                           push bp
29564 7C7C           89E5                         mov bp, sp
29565 7C7E           50                             push ax
29566 7C7F           51                             push cx
29567 7C80           06                             push es
29568 7C81           57                             push di
29569 7C82           1E                             push ds
29570 7C83           56                             push si
29571 7C84           8B4E         0C                mov cx, 12[bp] ; count
29572 7C87           83F9                   00      cmp cx, #0x0000
29573 7C8A           74           17                je memcpyb_end
29574 7C8C           8B46         04                mov ax, 4[bp] ; dsegment
29575 7C8F           8EC0                           mov es, ax
29576 7C91           8B46         06                mov ax, 6[bp] ; doffset
29577 7C94           89C7                           mov di, ax
29578 7C96           8B46         08                mov ax, 8[bp] ; ssegment
29579 7C99           8ED8                           mov ds, ax
29580 7C9B           8B46         0A                mov ax, 10[bp] ; soffset
29581 7C9E           89C6                           mov si, ax
29582 7CA0           FC                             cld
29583 7CA1           F3                             rep
29584 7CA2           A4                              movsb
29585                       00007CA3            memcpyb_end:
29586 7CA3           5E                             pop si
29587 7CA4           1F                             pop ds
29588 7CA5           5F                             pop di
29589 7CA6           07                             pop es
29590 7CA7           59                             pop cx
29591 7CA8           58                             pop ax
29592 7CA9           5D                           pop bp
29593                                           ! 4053 endasm
29594                                           !BCC_ENDASM
29595                                           ! 4054 }
29596 7CAA           C3                         ret
29597                                           ! 4055 static void memcpyw(dseg,doffse
29598                                           ! 4055 t,sseg,soffset,count)
29599                                           ! 4056   Bit16u dseg;
29600                       00007CAB            _memcpyw:
29601                                           !BCC_EOS
29602                                           ! 4057   Bit16u doffset;
29603                                           !BCC_EOS
29604                                           ! 4058   Bit16u sseg;
29605                                           !BCC_EOS
29606                                           ! 4059   Bit16u soffset;
29607                                           !BCC_EOS
29608                                           ! 4060   Bit16u count;
29609                                           !BCC_EOS
29610                                           ! 4061 {
29611                                           ! 4062 #asm
29612                                           !BCC_ASM
29613                       0000000A            _memcpyw.count	set	$A
29614                       00000006            _memcpyw.sseg	set	6
29615                       00000008            _memcpyw.soffset	set	8
29616                       00000002            _memcpyw.dseg	set	2
29617                       00000004            _memcpyw.doffset	set	4
29618 7CAB           55                           push bp
29619 7CAC           89E5                         mov bp, sp
29620 7CAE           50                             push ax
29621 7CAF           51                             push cx
29622 7CB0           06                             push es
29623 7CB1           57                             push di
29624 7CB2           1E                             push ds
29625 7CB3           56                             push si
29626 7CB4           8B4E         0C                mov cx, 12[bp] ; count
29627 7CB7           83F9                   00      cmp cx, #0x0000
29628 7CBA           74           17                je memcpyw_end
29629 7CBC           8B46         04                mov ax, 4[bp] ; dsegment
29630 7CBF           8EC0                           mov es, ax
29631 7CC1           8B46         06                mov ax, 6[bp] ; doffset
29632 7CC4           89C7                           mov di, ax
29633 7CC6           8B46         08                mov ax, 8[bp] ; ssegment
29634 7CC9           8ED8                           mov ds, ax
29635 7CCB           8B46         0A                mov ax, 10[bp] ; soffset
29636 7CCE           89C6                           mov si, ax
29637 7CD0           FC                             cld
29638 7CD1           F3                             rep
29639 7CD2           A5                              movsw
29640                       00007CD3            memcpyw_end:
29641 7CD3           5E                             pop si
29642 7CD4           1F                             pop ds
29643 7CD5           5F                             pop di
29644 7CD6           07                             pop es
29645 7CD7           59                             pop cx
29646 7CD8           58                             pop ax
29647 7CD9           5D                           pop bp
29648                                           ! 4093 endasm
29649                                           !BCC_ENDASM
29650                                           ! 4094 }
29651 7CDA           C3                         ret
29652                                           ! 4095 static Bit8u
29653                                           ! 4096 read_byte(seg, offset)
29654                                           ! 4097   Bit16u seg;
29655                       00007CDB            _read_byte:
29656                                           !BCC_EOS
29657                                           ! 4098   Bit16u offset;
29658                                           !BCC_EOS
29659                                           ! 4099 {
29660                                           ! 4100 #asm
29661                                           !BCC_ASM
29662                       00000002            _read_byte.seg	set	2
29663                       00000004            _read_byte.offset	set	4
29664 7CDB           55                           push bp
29665 7CDC           89E5                         mov bp, sp
29666 7CDE           53                             push bx
29667 7CDF           1E                             push ds
29668 7CE0           8B46         04                mov ax, 4[bp] ; segment
29669 7CE3           8ED8                           mov ds, ax
29670 7CE5           8B5E         06                mov bx, 6[bp] ; offset
29671 7CE8           8A07                           mov al, [bx]
29672                                               ;; al = return value (byte)
29673 7CEA           1F                             pop ds
29674 7CEB           5B                             pop bx
29675 7CEC           5D                           pop bp
29676                                           ! 4113 endasm
29677                                           !BCC_ENDASM
29678                                           ! 4114 }
29679 7CED           C3                         ret
29680                                           ! 4115 static Bit16u
29681                                           ! 4116 read_word(seg, offset)
29682                                           ! 4117   Bit16u seg;
29683                       00007CEE            _read_word:
29684                                           !BCC_EOS
29685                                           ! 4118   Bit16u offset;
29686                                           !BCC_EOS
29687                                           ! 4119 {
29688                                           ! 4120 #asm
29689                                           !BCC_ASM
29690                       00000002            _read_word.seg	set	2
29691                       00000004            _read_word.offset	set	4
29692 7CEE           55                           push bp
29693 7CEF           89E5                         mov bp, sp
29694 7CF1           53                             push bx
29695 7CF2           1E                             push ds
29696 7CF3           8B46         04                mov ax, 4[bp] ; segment
29697 7CF6           8ED8                           mov ds, ax
29698 7CF8           8B5E         06                mov bx, 6[bp] ; offset
29699 7CFB           8B07                           mov ax, [bx]
29700                                               ;; ax = return value (word)
29701 7CFD           1F                             pop ds
29702 7CFE           5B                             pop bx
29703 7CFF           5D                           pop bp
29704                                           ! 4133 endasm
29705                                           !BCC_ENDASM
29706                                           ! 4134 }
29707 7D00           C3                         ret
29708                                           ! 4135 static void
29709                                           ! 4136 write_byte(seg, offset, data)
29710                                           ! 4137   Bit16u seg;
29711                       00007D01            _write_byte:
29712                                           !BCC_EOS
29713                                           ! 4138   Bit16u offset;
29714                                           !BCC_EOS
29715                                           ! 4139   Bit8u data;
29716                                           !BCC_EOS
29717                                           ! 4140 {
29718                                           ! 4141 #asm
29719                                           !BCC_ASM
29720                       00000002            _write_byte.seg	set	2
29721                       00000006            _write_byte.data	set	6
29722                       00000004            _write_byte.offset	set	4
29723 7D01           55                           push bp
29724 7D02           89E5                         mov bp, sp
29725 7D04           50                             push ax
29726 7D05           53                             push bx
29727 7D06           1E                             push ds
29728 7D07           8B46         04                mov ax, 4[bp] ; segment
29729 7D0A           8ED8                           mov ds, ax
29730 7D0C           8B5E         06                mov bx, 6[bp] ; offset
29731 7D0F           8A46         08                mov al, 8[bp] ; data byte
29732 7D12           8807                           mov [bx], al ; write data byte
29733 7D14           1F                             pop ds
29734 7D15           5B                             pop bx
29735 7D16           58                             pop ax
29736 7D17           5D                           pop bp
29737                                           ! 4156 endasm
29738                                           !BCC_ENDASM
29739                                           ! 4157 }
29740 7D18           C3                         ret
29741                                           ! 4158 static void
29742                                           ! 4159 write_word(seg, offset, data)
29743                                           ! 4160   Bit16u seg;
29744                       00007D19            _write_word:
29745                                           !BCC_EOS
29746                                           ! 4161   Bit16u offset;
29747                                           !BCC_EOS
29748                                           ! 4162   Bit16u data;
29749                                           !BCC_EOS
29750                                           ! 4163 {
29751                                           ! 4164 #asm
29752                                           !BCC_ASM
29753                       00000002            _write_word.seg	set	2
29754                       00000006            _write_word.data	set	6
29755                       00000004            _write_word.offset	set	4
29756 7D19           55                           push bp
29757 7D1A           89E5                         mov bp, sp
29758 7D1C           50                             push ax
29759 7D1D           53                             push bx
29760 7D1E           1E                             push ds
29761 7D1F           8B46         04                mov ax, 4[bp] ; segment
29762 7D22           8ED8                           mov ds, ax
29763 7D24           8B5E         06                mov bx, 6[bp] ; offset
29764 7D27           8B46         08                mov ax, 8[bp] ; data word
29765 7D2A           8907                           mov [bx], ax ; write data word
29766 7D2C           1F                             pop ds
29767 7D2D           5B                             pop bx
29768 7D2E           58                             pop ax
29769 7D2F           5D                           pop bp
29770                                           ! 4179 endasm
29771                                           !BCC_ENDASM
29772                                           ! 4180 }
29773 7D30           C3                         ret
29774                                           ! 4181  Bit8u
29775                                           ! 4182 inb(port)
29776                                           ! 4183   Bit16u port;
29777                                           export	_inb
29778                       00007D31            _inb:
29779                                           !BCC_EOS
29780                                           ! 4184 {
29781                                           ! 4185 #asm
29782                                           !BCC_ASM
29783                       00000002            _inb.port	set	2
29784 7D31           55                           push bp
29785 7D32           89E5                         mov bp, sp
29786 7D34           52                             push dx
29787 7D35           8B56         04                mov dx, 4[bp]
29788 7D38           EC                             in al, dx
29789 7D39           5A                             pop dx
29790 7D3A           5D                           pop bp
29791                                           ! 4193 endasm
29792                                           !BCC_ENDASM
29793                                           ! 4194 }
29794 7D3B           C3                         ret
29795                                           ! 4195   Bit16u
29796                                           ! 4196 inw(port)
29797                                           ! 4197   Bit16u port;
29798                                           export	_inw
29799                       00007D3C            _inw:
29800                                           !BCC_EOS
29801                                           ! 4198 {
29802                                           ! 4199 #asm
29803                                           !BCC_ASM
29804                       00000002            _inw.port	set	2
29805 7D3C           55                           push bp
29806 7D3D           89E5                         mov bp, sp
29807 7D3F           52                             push dx
29808 7D40           8B56         04                mov dx, 4[bp]
29809 7D43           ED                             in ax, dx
29810 7D44           5A                             pop dx
29811 7D45           5D                           pop bp
29812                                           ! 4207 endasm
29813                                           !BCC_ENDASM
29814                                           ! 4208 }
29815 7D46           C3                         ret
29816                                           ! 4209   void
29817                                           ! 4210 outb(port, val)
29818                                           ! 4211   Bit16u port;
29819                                           export	_outb
29820                       00007D47            _outb:
29821                                           !BCC_EOS
29822                                           ! 4212   Bit8u val;
29823                                           !BCC_EOS
29824                                           ! 4213 {
29825                                           ! 4214 #asm
29826                                           !BCC_ASM
29827                       00000004            _outb.val	set	4
29828                       00000002            _outb.port	set	2
29829 7D47           55                           push bp
29830 7D48           89E5                         mov bp, sp
29831 7D4A           50                             push ax
29832 7D4B           52                             push dx
29833 7D4C           8B56         04                mov dx, 4[bp]
29834 7D4F           8A46         06                mov al, 6[bp]
29835 7D52           EE                             out dx, al
29836 7D53           5A                             pop dx
29837 7D54           58                             pop ax
29838 7D55           5D                           pop bp
29839                                           ! 4225 endasm
29840                                           !BCC_ENDASM
29841                                           ! 4226 }
29842 7D56           C3                         ret
29843                                           ! 4227   void
29844                                           ! 4228 outw(port, val)
29845                                           ! 4229   Bit16u port;
29846                                           export	_outw
29847                       00007D57            _outw:
29848                                           !BCC_EOS
29849                                           ! 4230   Bit16u val;
29850                                           !BCC_EOS
29851                                           ! 4231 {
29852                                           ! 4232 #asm
29853                                           !BCC_ASM
29854                       00000004            _outw.val	set	4
29855                       00000002            _outw.port	set	2
29856 7D57           55                           push bp
29857 7D58           89E5                         mov bp, sp
29858 7D5A           50                             push ax
29859 7D5B           52                             push dx
29860 7D5C           8B56         04                mov dx, 4[bp]
29861 7D5F           8B46         06                mov ax, 6[bp]
29862 7D62           EF                             out dx, ax
29863 7D63           5A                             pop dx
29864 7D64           58                             pop ax
29865 7D65           5D                           pop bp
29866                                           ! 4243 endasm
29867                                           !BCC_ENDASM
29868                                           ! 4244 }
29869 7D66           C3                         ret
29870                                           ! 4245 Bit16u get_SS()
29871                                           ! 4246 {
29872                                           export	_get_SS
29873                       00007D67            _get_SS:
29874                                           ! 4247 #asm
29875                                           !BCC_ASM
29876 7D67           8CD0                         mov ax, ss
29877                                           ! 4249 endasm
29878                                           !BCC_ENDASM
29879                                           ! 4250 }
29880 7D69           C3                         ret
29881                                           ! 4251 void unimplemented()
29882                                           ! 4252 {
29883                                           export	_unimplemented
29884                       00007D6A            _unimplemented:
29885                                           ! 4253  printf("--> Unimplemented\n");
29886 7D6A           55                         push	bp
29887 7D6B           89E5                       mov	bp,sp
29888                                           ! Debug: list * char = .29D+0 (used reg = )
29889 7D6D           BB                   7EEC  mov	bx,#.29D
29890 7D70           53                         push	bx
29891                                           ! Debug: func () void = printf+0 (used reg = )
29892 7D71           E8         0012            call	_printf
29893 7D74           89EC                       mov	sp,bp
29894                                           !BCC_EOS
29895                                           ! 4254 }
29896 7D76           5D                         pop	bp
29897 7D77           C3                         ret
29898                                           ! 4255 void unknown()
29899                                           ! Register BX used in function unimplemented
29900                                           ! 4256 {
29901                                           export	_unknown
29902                       00007D78            _unknown:
29903                                           ! 4257  printf("--> Unknown int10\n");
29904 7D78           55                         push	bp
29905 7D79           89E5                       mov	bp,sp
29906                                           ! Debug: list * char = .29E+0 (used reg = )
29907 7D7B           BB                   7ED9  mov	bx,#.29E
29908 7D7E           53                         push	bx
29909                                           ! Debug: func () void = printf+0 (used reg = )
29910 7D7F           E8         0004            call	_printf
29911 7D82           89EC                       mov	sp,bp
29912                                           !BCC_EOS
29913                                           ! 4258 }
29914 7D84           5D                         pop	bp
29915 7D85           C3                         ret
29916                                           ! 4259 void printf(s)
29917                                           ! Register BX used in function unknown
29918                                           ! 4260   Bit8u *s;
29919                                           export	_printf
29920                       00007D86            _printf:
29921                                           !BCC_EOS
29922                                           ! 4261 {
29923                                           ! 4262   Bit8u c, format_char;
29924                                           !BCC_EOS
29925                                           ! 4263   Boolean in_format;
29926                                           !BCC_EOS
29927                                           ! 4264   unsigned format_width, i;
29928                                           !BCC_EOS
29929                                           ! 4265   Bit16u *arg_ptr;
29930                                           !BCC_EOS
29931                                           ! 4266   Bit16u arg_seg, arg, digit, nibble, shift_count;
29932                                           !BCC_EOS
29933                                           ! 4267   arg_ptr = &s;
29934 7D86           55                         push	bp
29935 7D87           89E5                       mov	bp,sp
29936 7D89           83C4                   EC  add	sp,*-$14
29937                                           ! Debug: eq * * unsigned char s = S+$16+2 to * unsigned short arg_ptr = [S+$16-$C] (used reg = )
29938 7D8C           8D5E         04            lea	bx,4[bp]
29939 7D8F           895E         F6            mov	-$A[bp],bx
29940                                           !BCC_EOS
29941                                           ! 4268   arg_seg = get_SS();
29942                                           ! Debug: func () unsigned short = get_SS+0 (used reg = )
29943 7D92           E8         FFD2            call	_get_SS
29944                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg_seg = [S+$16-$E] (used reg = )
29945 7D95           8946         F4            mov	-$C[bp],ax
29946                                           !BCC_EOS
29947                                           ! 4269   in_format = 0;
29948                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
29949 7D98           31C0                       xor	ax,ax
29950 7D9A           8946         FC            mov	-4[bp],ax
29951                                           !BCC_EOS
29952                                           ! 4270   format_width = 0;
29953                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29954 7D9D           31C0                       xor	ax,ax
29955 7D9F           8946         FA            mov	-6[bp],ax
29956                                           !BCC_EOS
29957                                           ! 4271   while (c = read_byte(0xc000, s)) {
29958 7DA2           E9         0106            br 	.2A0
29959                       00007DA5            .2A1:
29960                                           ! 4272     if ( c == '%' ) {
29961                                           ! Debug: logeq int = const $25 to unsigned char c = [S+$16-3] (used reg = )
29962 7DA5           8A46         FF            mov	al,-1[bp]
29963 7DA8           3C                     25  cmp	al,*$25
29964 7DAA           75           0E            jne 	.2A2
29965                       00007DAC            .2A3:
29966                                           ! 4273       in_format = 1;
29967                                           ! Debug: eq int = const 1 to unsigned short in_format = [S+$16-6] (used reg = )
29968 7DAC           B8                   0001  mov	ax,*1
29969 7DAF           8946         FC            mov	-4[bp],ax
29970                                           !BCC_EOS
29971                                           ! 4274       format_width = 0;
29972                                           ! Debug: eq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
29973 7DB2           31C0                       xor	ax,ax
29974 7DB4           8946         FA            mov	-6[bp],ax
29975                                           !BCC_EOS
29976                                           ! 4275       }
29977                                           ! 4276     else if (in_format) {
29978 7DB7           E9         00EA            br 	.2A4
29979                       00007DBA            .2A2:
29980 7DBA           8B46         FC            mov	ax,-4[bp]
29981 7DBD           85C0                       test	ax,ax
29982 7DBF   7503    E9         00D0            beq 	.2A5
29983                       00007DC4            .2A6:
29984                                           ! 4277       if ( (c>='0') && (c<='9') ) {
29985                                           ! Debug: ge int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29986 7DC4           8A46         FF            mov	al,-1[bp]
29987 7DC7           3C                     30  cmp	al,*$30
29988 7DC9           72           28            jb  	.2A7
29989                       00007DCB            .2A9:
29990                                           ! Debug: le int = const $39 to unsigned char c = [S+$16-3] (used reg = )
29991 7DCB           8A46         FF            mov	al,-1[bp]
29992 7DCE           3C                     39  cmp	al,*$39
29993 7DD0           77           21            ja  	.2A7
29994                       00007DD2            .2A8:
29995                                           ! 4278         format_width = (format_width * 10) + (c - '0');
29996                                           ! Debug: sub int = const $30 to unsigned char c = [S+$16-3] (used reg = )
29997 7DD2           8A46         FF            mov	al,-1[bp]
29998 7DD5           30E4                       xor	ah,ah
29999 7DD7           05                   FFD0  add	ax,*-$30
30000 7DDA           50                         push	ax
30001                                           ! Debug: mul int = const $A to unsigned int format_width = [S+$18-8] (used reg = )
30002 7DDB           8B46         FA            mov	ax,-6[bp]
30003 7DDE           89C2                       mov	dx,ax
30004 7DE0           D1E0                       shl	ax,*1
30005 7DE2           D1E0                       shl	ax,*1
30006 7DE4           01D0                       add	ax,dx
30007 7DE6           D1E0                       shl	ax,*1
30008                                           ! Debug: add unsigned int (temp) = [S+$18-$18] to unsigned int = ax+0 (used reg = )
30009 7DE8           0346         EA            add	ax,-$16[bp]
30010 7DEB           44                         inc	sp
30011 7DEC           44                         inc	sp
30012                                           ! Debug: eq unsigned int = ax+0 to unsigned int format_width = [S+$16-8] (used reg = )
30013 7DED           8946         FA            mov	-6[bp],ax
30014                                           !BCC_EOS
30015                                           ! 4279         }
30016                                           ! 4280       else if (c == 'x') {
30017 7DF0           E9         009F            br 	.2AA
30018                       00007DF3            .2A7:
30019                                           ! Debug: logeq int = const $78 to unsigned char c = [S+$16-3] (used reg = )
30020 7DF3           8A46         FF            mov	al,-1[bp]
30021 7DF6           3C                     78  cmp	al,*$78
30022 7DF8   7403    E9         0095            bne 	.2AB
30023                       00007DFD            .2AC:
30024                                           ! 4281         arg_ptr++;
30025                                           ! Debug: postinc * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30026 7DFD           8B5E         F6            mov	bx,-$A[bp]
30027 7E00           43                         inc	bx
30028 7E01           43                         inc	bx
30029 7E02           895E         F6            mov	-$A[bp],bx
30030                                           !BCC_EOS
30031                                           ! 4282         arg = read_word(arg_seg, arg_ptr);
30032                                           ! Debug: list * unsigned short arg_ptr = [S+$16-$C] (used reg = )
30033 7E05           FF76         F6            push	-$A[bp]
30034                                           ! Debug: list unsigned short arg_seg = [S+$18-$E] (used reg = )
30035 7E08           FF76         F4            push	-$C[bp]
30036                                           ! Debug: func () unsigned short = read_word+0 (used reg = )
30037 7E0B           E8         FEE0            call	_read_word
30038 7E0E           83C4                   04  add	sp,*4
30039                                           ! Debug: eq unsigned short = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30040 7E11           8946         F2            mov	-$E[bp],ax
30041                                           !BCC_EOS
30042                                           ! 4283         if (format_width == 0)
30043                                           ! Debug: logeq int = const 0 to unsigned int format_width = [S+$16-8] (used reg = )
30044 7E14           8B46         FA            mov	ax,-6[bp]
30045 7E17           85C0                       test	ax,ax
30046 7E19           75           06            jne 	.2AD
30047                       00007E1B            .2AE:
30048                                           ! 4284           format_width = 4;
30049                                           ! Debug: eq int = const 4 to unsigned int format_width = [S+$16-8] (used reg = )
30050 7E1B           B8                   0004  mov	ax,*4
30051 7E1E           8946         FA            mov	-6[bp],ax
30052                                           !BCC_EOS
30053                                           ! 4285         i = 0;
30054                       00007E21            .2AD:
30055                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30056 7E21           31C0                       xor	ax,ax
30057 7E23           8946         F8            mov	-8[bp],ax
30058                                           !BCC_EOS
30059                                           ! 4286         digit = format_width - 1;
30060                                           ! Debug: sub int = const 1 to unsigned int format_width = [S+$16-8] (used reg = )
30061 7E26           8B46         FA            mov	ax,-6[bp]
30062                                           ! Debug: eq unsigned int = ax-1 to unsigned short digit = [S+$16-$12] (used reg = )
30063 7E29           48                         dec	ax
30064 7E2A           8946         F0            mov	-$10[bp],ax
30065                                           !BCC_EOS
30066                                           ! 4287         for (i=0; i<format_width; i++) {
30067                                           ! Debug: eq int = const 0 to unsigned int i = [S+$16-$A] (used reg = )
30068 7E2D           31C0                       xor	ax,ax
30069 7E2F           8946         F8            mov	-8[bp],ax
30070                                           !BCC_EOS
30071                                           !BCC_EOS
30072 7E32           EB           51            jmp .2B1
30073                       00007E34            .2B2:
30074                                           ! 4288           nibble = (arg >> (4 * digit)) & 0x000f;
30075                                           ! Debug: mul unsigned short digit = [S+$16-$12] to int = const 4 (used reg = )
30076                                           ! Debug: expression subtree swapping
30077 7E34           8B46         F0            mov	ax,-$10[bp]
30078 7E37           D1E0                       shl	ax,*1
30079 7E39           D1E0                       shl	ax,*1
30080                                           ! Debug: sr unsigned int = ax+0 to unsigned short arg = [S+$16-$10] (used reg = )
30081 7E3B           89C3                       mov	bx,ax
30082 7E3D           8B46         F2            mov	ax,-$E[bp]
30083 7E40           89D9                       mov	cx,bx
30084 7E42           D3E8                       shr	ax,cl
30085                                           ! Debug: and int = const $F to unsigned int = ax+0 (used reg = )
30086 7E44           24                     0F  and	al,*$F
30087                                           ! Debug: eq unsigned char = al+0 to unsigned short nibble = [S+$16-$14] (used reg = )
30088 7E46           30E4                       xor	ah,ah
30089 7E48           8946         EE            mov	-$12[bp],ax
30090                                           !BCC_EOS
30091                                           ! 4289           if (nibble <= 9)
30092                                           ! Debug: le int = const 9 to unsigned short nibble = [S+$16-$14] (used reg = )
30093 7E4B           8B46         EE            mov	ax,-$12[bp]
30094 7E4E           3D                   0009  cmp	ax,*9
30095 7E51           77           13            ja  	.2B3
30096                       00007E53            .2B4:
30097                                           ! 4290             outb(0x0500, nibble + '0');
30098                                           ! Debug: add int = const $30 to unsigned short nibble = [S+$16-$14] (used reg = )
30099 7E53           8B46         EE            mov	ax,-$12[bp]
30100                                           ! Debug: list unsigned int = ax+$30 (used reg = )
30101 7E56           05                   0030  add	ax,*$30
30102 7E59           50                         push	ax
30103                                           ! Debug: list int = const $500 (used reg = )
30104 7E5A           B8                   0500  mov	ax,#$500
30105 7E5D           50                         push	ax
30106                                           ! Debug: func () void = outb+0 (used reg = )
30107 7E5E           E8         FEE6            call	_outb
30108 7E61           83C4                   04  add	sp,*4
30109                                           !BCC_EOS
30110                                           ! 4291           else
30111                                           ! 4292             outb(0x0500, (nibble - 10) + 'A');
30112 7E64           EB           11            jmp .2B5
30113                       00007E66            .2B3:
30114                                           ! Debug: sub int = const $A to unsigned short nibble = [S+$16-$14] (used reg = )
30115 7E66           8B46         EE            mov	ax,-$12[bp]
30116                                           ! Debug: add int = const $41 to unsigned int = ax-$A (used reg = )
30117                                           ! Debug: list unsigned int = ax+$37 (used reg = )
30118 7E69           05                   0037  add	ax,*$37
30119 7E6C           50                         push	ax
30120                                           ! Debug: list int = const $500 (used reg = )
30121 7E6D           B8                   0500  mov	ax,#$500
30122 7E70           50                         push	ax
30123                                           ! Debug: func () void = outb+0 (used reg = )
30124 7E71           E8         FED3            call	_outb
30125 7E74           83C4                   04  add	sp,*4
30126                                           !BCC_EOS
30127                                           ! 4293           digit--;
30128                       00007E77            .2B5:
30129                                           ! Debug: postdec unsigned short digit = [S+$16-$12] (used reg = )
30130 7E77           8B46         F0            mov	ax,-$10[bp]
30131 7E7A           48                         dec	ax
30132 7E7B           8946         F0            mov	-$10[bp],ax
30133                                           !BCC_EOS
30134                                           ! 4294           }
30135                                           ! 4295         in_format = 0;
30136                       00007E7E            .2B0:
30137                                           ! Debug: postinc unsigned int i = [S+$16-$A] (used reg = )
30138 7E7E           8B46         F8            mov	ax,-8[bp]
30139 7E81           40                         inc	ax
30140 7E82           8946         F8            mov	-8[bp],ax
30141                       00007E85            .2B1:
30142                                           ! Debug: lt unsigned int format_width = [S+$16-8] to unsigned int i = [S+$16-$A] (used reg = )
30143 7E85           8B46         F8            mov	ax,-8[bp]
30144 7E88           3B46         FA            cmp	ax,-6[bp]
30145 7E8B           72           A7            jb 	.2B2
30146                       00007E8D            .2B6:
30147                       00007E8D            .2AF:
30148                                           ! Debug: eq int = const 0 to unsigned short in_format = [S+$16-6] (used reg = )
30149 7E8D           31C0                       xor	ax,ax
30150 7E8F           8946         FC            mov	-4[bp],ax
30151                                           !BCC_EOS
30152                                           ! 4296         }
30153                                           ! 4297       }
30154                       00007E92            .2AB:
30155                       00007E92            .2AA:
30156                                           ! 4298     else {
30157 7E92           EB           10            jmp .2B7
30158                       00007E94            .2A5:
30159                                           ! 4299       outb(0x0500, c);
30160                                           ! Debug: list unsigned char c = [S+$16-3] (used reg = )
30161 7E94           8A46         FF            mov	al,-1[bp]
30162 7E97           30E4                       xor	ah,ah
30163 7E99           50                         push	ax
30164                                           ! Debug: list int = const $500 (used reg = )
30165 7E9A           B8                   0500  mov	ax,#$500
30166 7E9D           50                         push	ax
30167                                           ! Debug: func () void = outb+0 (used reg = )
30168 7E9E           E8         FEA6            call	_outb
30169 7EA1           83C4                   04  add	sp,*4
30170                                           !BCC_EOS
30171                                           ! 4300       }
30172                                           ! 4301     s ++;
30173                       00007EA4            .2B7:
30174                       00007EA4            .2A4:
30175                                           ! Debug: postinc * unsigned char s = [S+$16+2] (used reg = )
30176 7EA4           8B5E         04            mov	bx,4[bp]
30177 7EA7           43                         inc	bx
30178 7EA8           895E         04            mov	4[bp],bx
30179                                           !BCC_EOS
30180                                           ! 4302     }
30181                                           ! 4303 }
30182                       00007EAB            .2A0:
30183                                           ! Debug: list * unsigned char s = [S+$16+2] (used reg = )
30184 7EAB           FF76         04            push	4[bp]
30185                                           ! Debug: list unsigned int = const $C000 (used reg = )
30186 7EAE           B8                   C000  mov	ax,#$C000
30187 7EB1           50                         push	ax
30188                                           ! Debug: func () unsigned char = read_byte+0 (used reg = )
30189 7EB2           E8         FE26            call	_read_byte
30190 7EB5           83C4                   04  add	sp,*4
30191                                           ! Debug: eq unsigned char = al+0 to unsigned char c = [S+$16-3] (used reg = )
30192 7EB8           8846         FF            mov	-1[bp],al
30193 7EBB           84C0                       test	al,al
30194 7EBD   7403    E9         FEE3            bne 	.2A1
30195                       00007EC2            .2B8:
30196                       00007EC2            .29F:
30197 7EC2           89EC                       mov	sp,bp
30198 7EC4           5D                         pop	bp
30199 7EC5           C3                         ret
30200                                           ! 4304 #asm
30201                                           !BCC_ASM
30202                       00000002            _printf.s	set	2
30203                                           ;; DATA_SEG_DEFS_HERE
30204                                           ! 4306 endasm
30205                                           !BCC_ENDASM
30206                                           ! 4307 #asm
30207                                           !BCC_ASM
30208                       00000002            _printf.s	set	2
30209 7EC6                        76            .ascii "vgabios ends here"
30210 7ED7                        00            .byte 0x00
30211                       00007ED8            vgabios_end:
30212 7ED8                        CB            .byte 0xCB
30213                                           ;; BLOCK_STRINGS_BEGIN
30214                                           ! 4313 endasm
30215                                           !BCC_ENDASM
30216                                           ! 4314 
30217                                           ! Register BX used in function printf
30218                                           
30219                       00007ED9            .29E:
30220                       00007ED9            .2B9:
30221 7ED9                        2D            .ascii	"--> Unknown int10"
30222 7EEA                        0A            .byte	$A
30223 7EEB                        00            .byte	0
30224                       00007EEC            .29D:
30225                       00007EEC            .2BA:
30226 7EEC                        2D            .ascii	"--> Unimplemented"
30227 7EFD                        0A            .byte	$A
30228 7EFE                        00            .byte	0
30229                       00007EFF            .237:
30230                       00007EFF            .2BB:
30231 7EFF                        47            .ascii	"Get font info BH(%02x) was discarded"
30232 7F23                        0A            .byte	$A
30233 7F24                        00            .byte	0
30234                       00007F25            .135:
30235                       00007F25            .2BC:
30236 7F25                        53            .ascii	"Scroll in graphics mode "
30237 7F3D                        00            .byte	0
30238                       00007F3E            .D0:
30239                       00007F3E            .2BD:
30240 7F3E                        53            .ascii	"Scroll, address %04x (%04x %04x %02x)"
30241 7F63                        0A            .byte	$A
30242 7F64                        00            .byte	0
30243                       00007F65            .A5:
30244                       00007F65            .2BE:
30245 7F65                        53            .ascii	"Set active page %02x address %04x"
30246 7F86                        0A            .byte	$A
30247 7F87                        00            .byte	0
30248                       00007F88            .4C:
30249                       00007F88            .2BF:
30250 7F88                        6D            .ascii	"mode search %02x found line %02x"
30251 7FA8                        0A            .byte	$A
30252 7FA9                        00            .byte	0
30253                       00007FAA            .3:
30254                       00007FAA            .2C0:
30255 7FAA                        76            .ascii	"vgabios call ah%02x al%02x bx%04x cx%04x"
30256 7FD2                        20            .ascii	" dx%04x"
30257 7FD9                        0A            .byte	$A
30258 7FDA                        00            .byte	0
30259 7FDB                                      .bss
30260                                           
30261                                           ! 0 errors detected

Symbols:
..FFF5                      0 FFFC A   ..FFF6                      0 FFEE A   
..FFF7                      0 FFF4 A   ..FFF8                      0 FFF6 A   
..FFF9                      0 FFEE A   ..FFFA                      0 FFEE A   
..FFFB                      0 FFF2 A   ..FFFC                      0 FFF0 A   
..FFFD                      0 FFE8 A   ..FFFE                      0 FFE8 A   
..FFFF                      0 FFFE A   .1                          0 3670 A   
.10                         0 369D A   .100                        0 4D78 A   
.101                        0 4D05 A   .102                        0 4D49 A   
.103                        0 4D23 A   .104                        0 4D1C A   
.105                        0 4D71 A   .106                        0 4D82 A   
.107                        0 4E15 A   .108                        0 4E15 A   
.109                        0 4E01 A   .10A                        0 4E08 A   
.10B                        0 4D90 A   .10C                        0 4DCD A   
.10D                        0 4DA7 A   .10E                        0 4DA0 A   
.10F                        0 4DF5 A   .11                         0 369D A   
.110                        0 4E01 A   .111                        0 4DFF A   
.112                        0 4E15 A   .113                        0 4E18 A   
.114                        0 4EAB A   .115                        0 4E66 A   
.116                        0 4E54 A   .117                        0 4E42 A   
.118                        0 4E3B A   .119                        0 4E34 A   
.11A                        0 4FF1 A   .11B                        0 4ECE A   
.11C                        0 4EB2 A   .11D                        0 4F62 A   
.11E                        0 4ED8 A   .11F                        0 4F5F A   
.12                         0 369D A   .120                        0 4F4E A   
.121                        0 4F55 A   .122                        0 4EE2 A   
.123                        0 4F26 A   .124                        0 4F00 A   
.125                        0 4EF9 A   .126                        0 4F4E A   
.127                        0 4F5F A   .128                        0 4FF1 A   
.129                        0 4FF1 A   .12A                        0 4FDD A   
.12B                        0 4FE4 A   .12C                        0 4F6C A   
.12D                        0 4FA9 A   .12E                        0 4F83 A   
.12F                        0 4F7C A   .13                         0 36A9 A   
.130                        0 4FD1 A   .131                        0 4FDD A   
.132                        0 4FDB A   .133                        0 4FF1 A   
.134                        0 4FF3 A   .135                        0 7F25 A   
.136                        0 5054 A   .137                        0 5050 A   
.138                        0 5113 A   .139                        0 50B5 A   
.13A                        0 5116 A   .13B                        0 5147 A   
.13D                        0 513D A   .13E                        0 5125 A   
.13F                        0 512D A   .14                         0 36D8 A   
.140                        0 5135 A   .141                        0 51B4 A   
.142                        0 51A4 A   .143                        0 51C2 A   
.144                        0 527C A   .145                        0 526A A   
.146                        0 5271 A   .147                        0 51CA A   
.148                        0 526A A   .149                        0 5259 A   
.14A                        0 5260 A   .14B                        0 51E7 A   
.14C                        0 5249 A   .14D                        0 5232 A   
.14E                        0 5259 A   .14F                        0 526A A   
.15                         0 36C8 A   .150                        0 527C A   
.151                        0 5491 A   .152                        0 5480 A   
.153                        0 5487 A   .154                        0 52D2 A   
.155                        0 52F6 A   .156                        0 52ED A   
.157                        0 53B8 A   .158                        0 5305 A   
.159                        0 5320 A   .15A                        0 530E A   
.15B                        0 5325 A   .15C                        0 53A2 A   
.15D                        0 5394 A   .15E                        0 539B A   
.15F                        0 532C A   .16                         0 36DD A   
.160                        0 538A A   .161                        0 5343 A   
.162                        0 536C A   .163                        0 534C A   
.164                        0 538A A   .165                        0 53A2 A   
.166                        0 5480 A   .167                        0 5480 A   
.168                        0 5476 A   .169                        0 53BB A   
.16A                        0 53D6 A   .16B                        0 53C4 A   
.16C                        0 53DB A   .16D                        0 545C A   
.16E                        0 544E A   .16F                        0 5455 A   
.17                         0 36F4 A   .170                        0 53E2 A   
.171                        0 5444 A   .172                        0 53F9 A   
.173                        0 5424 A   .174                        0 5402 A   
.175                        0 5444 A   .176                        0 545C A   
.177                        0 5480 A   .178                        0 5491 A   
.179                        0 5566 A   .17A                        0 5555 A   
.17B                        0 555C A   .17C                        0 54DB A   
.17D                        0 5555 A   .17E                        0 5547 A   
.17F                        0 554E A   .18                         0 3708 A   
.180                        0 5501 A   .181                        0 5523 A   
.182                        0 551D A   .183                        0 5555 A   
.184                        0 5566 A   .185                        0 559A A   
.186                        0 5596 A   .187                        0 5665 A   
.188                        0 55FB A   .189                        0 5760 A   
.18A                        0 5760 A   .18B                        0 5747 A   
.18C                        0 569A A   .18D                        0 5740 A   
.18F                        0 5728 A   .19                         0 3721 A   
.190                        0 56AE A   .191                        0 56AE A   
.192                        0 56D7 A   .193                        0 5700 A   
.194                        0 5723 A   .195                        0 5760 A   
.196                        0 5753 A   .197                        0 5794 A   
.198                        0 5790 A   .199                        0 5863 A   
.19A                        0 57F5 A   .19B                        0 5860 A   
.19C                        0 5854 A   .19D                        0 582B A   
.19E                        0 5860 A   .19F                        0 595E A   
.1A                         0 373B A   .1A0                        0 595E A   
.1A1                        0 5945 A   .1A2                        0 5898 A   
.1A3                        0 593E A   .1A5                        0 5926 A   
.1A6                        0 58AC A   .1A7                        0 58AC A   
.1A8                        0 58D5 A   .1A9                        0 58FE A   
.1AA                        0 5921 A   .1AB                        0 595E A   
.1AC                        0 5951 A   .1AD                        0 5A0D A   
.1AE                        0 5A09 A   .1AF                        0 5A27 A   
.1B                         0 3749 A   .1B0                        0 5A23 A   
.1B1                        0 5C7D A   .1B3                        0 5C62 A   
.1B4                        0 5A3C A   .1B5                        0 5A3C A   
.1B6                        0 5ABD A   .1B7                        0 5AAF A   
.1B8                        0 5AE2 A   .1B9                        0 5B14 A   
.1BA                        0 5AF8 A   .1BB                        0 5B2E A   
.1BC                        0 5B40 A   .1BD                        0 5B37 A   
.1BE                        0 5BAC A   .1BF                        0 5B66 A   
.1C                         0 3784 A   .1C0                        0 5BEC A   
.1C1                        0 5C00 A   .1C2                        0 5BF5 A   
.1C3                        0 5C16 A   .1C4                        0 5C2B A   
.1C5                        0 5C5D A   .1C6                        0 5CB7 A   
.1C7                        0 5CB3 A   .1C8                        0 5CD1 A   
.1C9                        0 5CCD A   .1CA                        0 5E6B A   
.1CC                        0 5E50 A   .1CD                        0 5CE6 A   
.1CE                        0 5CE6 A   .1CF                        0 5D7A A   
.1D                         0 37BE A   .1D0                        0 5D6C A   
.1D1                        0 5D73 A   .1D2                        0 5D28 A   
.1D3                        0 5D6C A   .1D4                        0 5D58 A   
.1D5                        0 5D7A A   .1D6                        0 5D7D A   
.1D7                        0 5DA9 A   .1D8                        0 5DA0 A   
.1D9                        0 5DF4 A   .1DA                        0 5DCF A   
.1DB                        0 5E15 A   .1DC                        0 5E17 A   
.1DD                        0 5E46 A   .1DE                        0 5EAB A   
.1DF                        0 5E9A A   .1E                         0 37D3 A   
.1E0                        0 5ED5 A   .1E1                        0 5ED1 A   
.1E2                        0 613E A   .1E4                        0 6118 A   
.1E5                        0 5F26 A   .1E6                        0 5F29 A   
.1E7                        0 5F37 A   .1E8                        0 5F30 A   
.1E9                        0 5F3A A   .1EA                        0 5F42 A   
.1EB                        0 5F4C A   .1EC                        0 5F99 A   
.1ED                        0 5F8E A   .1EE                        0 5F4C A   
.1EF                        0 5F99 A   .1F                         0 37F3 A   
.1F0                        0 5F9C A   .1F1                        0 6037 A   
.1F2                        0 5FB5 A   .1F3                        0 6034 A   
.1F4                        0 6011 A   .1F5                        0 610F A   
.1F6                        0 610F A   .1F8                        0 60F7 A   
.1F9                        0 607D A   .1FA                        0 607D A   
.1FB                        0 60A6 A   .1FC                        0 60CF A   
.1FD                        0 60F2 A   .1FE                        0 6154 A   
.1FF                        0 6148 A   .2                          0 3650 A   
.20                         0 3813 A   .200                        0 622B A   
.201                        0 6161 A   .202                        0 61FB A   
.203                        0 617A A   .204                        0 6222 A   
.205                        0 65F7 A   .206                        0 65E5 A   
.207                        0 65EC A   .208                        0 652E A   
.209                        0 65A1 A   .20A                        0 659B A   
.20B                        0 65F7 A   .20C                        0 66D9 A   
.20D                        0 66C9 A   .20E                        0 66F1 A   
.20F                        0 6836 A   .21                         0 3830 A   
.210                        0 6827 A   .211                        0 682E A   
.212                        0 67EA A   .213                        0 6836 A   
.214                        0 684B A   .215                        0 6840 A   
.216                        0 68CF A   .217                        0 68C0 A   
.218                        0 68C7 A   .219                        0 6886 A   
.21A                        0 68CF A   .21B                        0 68E2 A   
.21C                        0 68D9 A   .21D                        0 6960 A   
.21E                        0 6951 A   .21F                        0 6958 A   
.22                         0 384B A   .220                        0 691D A   
.221                        0 6960 A   .222                        0 6973 A   
.223                        0 696A A   .224                        0 69FE A   
.225                        0 69EF A   .226                        0 69F6 A   
.227                        0 69BB A   .228                        0 69FE A   
.229                        0 6A11 A   .22A                        0 6A08 A   
.22B                        0 6BC7 A   .22D                        0 6BA2 A   
.22E                        0 6A4E A   .22F                        0 6A85 A   
.23                         0 3868 A   .230                        0 6ABC A   
.231                        0 6ADF A   .232                        0 6B02 A   
.233                        0 6B25 A   .234                        0 6B48 A   
.235                        0 6B6A A   .236                        0 6B8C A   
.237                        0 7EFF A   .238                        0 6BC5 A   
.239                        0 6BB5 A   .23A                        0 6D85 A   
.23B                        0 6D73 A   .23C                        0 6E0F A   
.23D                        0 6E03 A   .23E                        0 6DB4 A   
.23F                        0 6DE7 A   .24                         0 3877 A   
.240                        0 6DD2 A   .241                        0 6E0F A   
.242                        0 6E27 A   .243                        0 6E18 A   
.244                        0 6FF2 A   .245                        0 6FE9 A   
.246                        0 7004 A   .247                        0 6FFB A   
.248                        0 7016 A   .249                        0 700D A   
.24A                        0 72CA A   .24B                        0 7064 A   
.24C                        0 714F A   .24D                        0 7140 A   
.24E                        0 7147 A   .24F                        0 7114 A   
.25                         0 39C5 A   .250                        0 714F A   
.251                        0 71BD A   .252                        0 71AE A   
.253                        0 71B5 A   .254                        0 7182 A   
.255                        0 71BD A   .256                        0 7210 A   
.257                        0 7201 A   .258                        0 7208 A   
.259                        0 71C4 A   .25A                        0 7210 A   
.25B                        0 725B A   .25C                        0 724C A   
.25D                        0 7253 A   .25E                        0 7220 A   
.25F                        0 725B A   .260                        0 7546 A   
.261                        0 72D6 A   .262                        0 7477 A   
.263                        0 7468 A   .264                        0 746F A   
.265                        0 7440 A   .266                        0 7477 A   
.267                        0 7607 A   .268                        0 7552 A   
.269                        0 75F1 A   .26A                        0 75E2 A   
.26B                        0 75E9 A   .26C                        0 75C3 A   
.26D                        0 75F1 A   .26E                        0 78CA A   
.26F                        0 7620 A   .27                         0 3961 A   
.270                        0 768F A   .271                        0 7680 A   
.272                        0 7687 A   .273                        0 7653 A   
.274                        0 768F A   .275                        0 7714 A   
.276                        0 7705 A   .277                        0 770C A   
.278                        0 76D0 A   .279                        0 76FE A   
.27A                        0 76D8 A   .27B                        0 7714 A   
.27C                        0 7736 A   .27D                        0 772E A   
.27E                        0 77D7 A   .27F                        0 77C8 A   
.28                         0 387D A   .280                        0 77CF A   
.281                        0 7793 A   .282                        0 77D7 A   
.283                        0 7830 A   .284                        0 7821 A   
.285                        0 7828 A   .286                        0 77F4 A   
.287                        0 7830 A   .288                        0 7B46 A   
.289                        0 78D6 A   .28A                        0 7A77 A   
.28B                        0 7A68 A   .28C                        0 7A6F A   
.28D                        0 7A40 A   .28E                        0 7A77 A   
.28F                        0 7BE8 A   .29                         0 387D A   
.290                        0 7B52 A   .291                        0 7BD4 A   
.292                        0 7BC5 A   .293                        0 7BCC A   
.294                        0 7BA5 A   .295                        0 7BD4 A   
.296                        0 7C2A A   .297                        0 7C1C A   
.298                        0 7C23 A   .299                        0 7C00 A   
.29A                        0 7C1C A   .29B                        0 7C14 A   
.29C                        0 7C2A A   .29D                        0 7EEC A   
.29E                        0 7ED9 A   .29F                        0 7EC2 A   
.2A                         0 38A6 A   .2A0                        0 7EAB A   
.2A1                        0 7DA5 A   .2A2                        0 7DBA A   
.2A3                        0 7DAC A   .2A4                        0 7EA4 A   
.2A5                        0 7E94 A   .2A6                        0 7DC4 A   
.2A7                        0 7DF3 A   .2A8                        0 7DD2 A   
.2A9                        0 7DCB A   .2AA                        0 7E92 A   
.2AB                        0 7E92 A   .2AC                        0 7DFD A   
.2AD                        0 7E21 A   .2AE                        0 7E1B A   
.2AF                        0 7E8D A   .2B                         0 38A6 A   
.2B0                        0 7E7E A   .2B1                        0 7E85 A   
.2B2                        0 7E34 A   .2B3                        0 7E66 A   
.2B4                        0 7E53 A   .2B5                        0 7E77 A   
.2B6                        0 7E8D A   .2B7                        0 7EA4 A   
.2B8                        0 7EC2 A   .2B9                        0 7ED9 A   
.2BA                        0 7EEC A   .2BB                        0 7EFF A   
.2BC                        0 7F25 A   .2BD                        0 7F3E A   
.2BE                        0 7F65 A   .2BF                        0 7F88 A   
.2C                         0 38BB A   .2C0                        0 7FAA A   
.2D                         0 38BB A   .2E                         0 38D0 A   
.2F                         0 38D0 A   .3                          0 7FAA A   
.30                         0 38E5 A   .31                         0 38F4 A   
.32                         0 3912 A   .33                         0 3920 A   
.34                         0 392E A   .35                         0 393C A   
.36                         0 395C A   .37                         0 39C8 A   
.38                         0 3A1A A   .3A                         0 3A0C A   
.3B                         0 39CD A   .3C                         0 39D2 A   
.3D                         0 39F0 A   .3E                         0 3A07 A   
.3F                         0 3A1D A   .4                          0 3B16 A   
.40                         0 3A51 A   .41                         0 3A6D A   
.42                         0 3AB6 A   .44                         0 3AA8 A   
.45                         0 3A72 A   .46                         0 3A81 A   
.47                         0 3A92 A   .48                         0 3AA3 A   
.49                         0 3AC2 A   .4A                         0 3B14 A   
.4B                         0 3ADA A   .4C                         0 7F88 A   
.4D                         0 3B5E A   .4E                         0 3B5A A   
.4F                         0 3D33 A   .50                         0 3BED A   
.51                         0 3C5F A   .53                         0 3C4F A   
.54                         0 3C2D A   .55                         0 3C35 A   
.56                         0 3C3D A   .57                         0 3C45 A   
.58                         0 3D1D A   .59                         0 3D0B A   
.5A                         0 3D12 A   .5B                         0 3C67 A   
.5C                         0 3CE4 A   .5D                         0 3C88 A   
.5E                         0 3D0B A   .5F                         0 3D1D A   
.6                          0 3AC7 A   .60                         0 3D33 A   
.61                         0 3D26 A   .62                         0 3D83 A   
.63                         0 3D74 A   .64                         0 3D7B A   
.65                         0 3D43 A   .66                         0 3D83 A   
.67                         0 3E08 A   .68                         0 3DF9 A   
.69                         0 3E00 A   .6A                         0 3DC1 A   
.6B                         0 3E08 A   .6C                         0 3E4F A   
.6D                         0 3E40 A   .6E                         0 3E47 A   
.6F                         0 3E0F A   .7                          0 367F A   
.70                         0 3E4F A   .71                         0 3E6A A   
.72                         0 3E65 A   .73                         0 3E6D A   
.74                         0 3EC4 A   .75                         0 3EB5 A   
.76                         0 3EBC A   .77                         0 3E84 A   
.78                         0 3EC4 A   .79                         0 3FC5 A   
.7A                         0 3F04 A   .7B                         0 3F40 A   
.7C                         0 3F1A A   .7D                         0 3FC5 A   
.7E                         0 3F6B A   .7F                         0 3F47 A   
.8                          0 36DA A   .80                         0 3FC5 A   
.81                         0 4102 A   .82                         0 40F4 A   
.83                         0 4124 A   .84                         0 4115 A   
.85                         0 411C A   .86                         0 4109 A   
.87                         0 4124 A   .88                         0 4150 A   
.89                         0 4142 A   .8A                         0 41B5 A   
.8C                         0 41A6 A   .8D                         0 4168 A   
.8E                         0 417C A   .8F                         0 4190 A   
.90                         0 4283 A   .91                         0 4233 A   
.92                         0 422C A   .93                         0 4225 A   
.94                         0 421D A   .95                         0 425C A   
.96                         0 4247 A   .97                         0 4270 A   
.98                         0 42E5 A   .99                         0 42E1 A   
.9A                         0 43D1 A   .9B                         0 4319 A   
.9C                         0 4409 A   .9D                         0 4405 A   
.9E                         0 445B A   .9F                         0 4457 A   
.A                          0 36B5 A   .A0                         0 4485 A   
.A1                         0 4481 A   .A2                         0 451D A   
.A3                         0 44AF A   .A4                         0 4541 A   
.A5                         0 7F65 A   .A6                         0 467C A   
.A7                         0 466D A   .A8                         0 4674 A   
.A9                         0 4631 A   .AA                         0 467C A   
.AB                         0 4707 A   .AC                         0 46F8 A   
.AD                         0 46FF A   .AE                         0 46CE A   
.AF                         0 4707 A   .B                          0 3691 A   
.B0                         0 4828 A   .B1                         0 4816 A   
.B2                         0 481D A   .B3                         0 4775 A   
.B4                         0 47D4 A   .B5                         0 477E A   
.B6                         0 4816 A   .B7                         0 4828 A   
.B8                         0 48DD A   .B9                         0 48CE A   
.BA                         0 48D5 A   .BB                         0 4860 A   
.BC                         0 48A1 A   .BD                         0 4869 A   
.BE                         0 48CE A   .BF                         0 48DD A   
.C                          0 369D A   .C0                         0 48F3 A   
.C1                         0 48EF A   .C2                         0 48FF A   
.C3                         0 48FB A   .C4                         0 4929 A   
.C5                         0 4925 A   .C6                         0 4966 A   
.C7                         0 4955 A   .C8                         0 4977 A   
.C9                         0 4970 A   .CA                         0 4988 A   
.CB                         0 4981 A   .CC                         0 4997 A   
.CD                         0 4992 A   .CE                         0 4C2B A   
.CF                         0 49BF A   .D                          0 369D A   
.D0                         0 7F3E A   .D1                         0 4A62 A   
.D2                         0 4A2D A   .D3                         0 4A1B A   
.D4                         0 4A09 A   .D5                         0 4A02 A   
.D6                         0 49FB A   .D7                         0 4C28 A   
.D8                         0 4B49 A   .D9                         0 4A6C A   
.DA                         0 4B46 A   .DB                         0 4B32 A   
.DC                         0 4B39 A   .DD                         0 4A77 A   
.DE                         0 4AD7 A   .DF                         0 4A95 A   
.E                          0 369D A   .E0                         0 4A8E A   
.E1                         0 4B32 A   .E2                         0 4B46 A   
.E3                         0 4C28 A   .E4                         0 4C28 A   
.E5                         0 4C14 A   .E6                         0 4C1B A   
.E7                         0 4B54 A   .E8                         0 4BAD A   
.E9                         0 4B6B A   .EA                         0 4B64 A   
.EB                         0 4C08 A   .EC                         0 4C14 A   
.ED                         0 4C12 A   .EE                         0 4C28 A   
.EF                         0 5018 A   .F                          0 369D A   
.F0                         0 5018 A   .F2                         0 5001 A   
.F3                         0 4C5D A   .F4                         0 4C5D A   
.F5                         0 4CF1 A   .F6                         0 4C9C A   
.F7                         0 4C8A A   .F8                         0 4C78 A   
.F9                         0 4C71 A   .FA                         0 4C67 A   
.FB                         0 4E15 A   .FC                         0 4D85 A   
.FD                         0 4CFB A   .FE                         0 4D82 A   
.FF                         0 4D71 A   _biosfn_alternate_prtsc     0 6C28 A   
_biosfn_enable_video_refre+ 0 6D4A A   _biosfn_get_cursor_pos      0 43D5 A   
_biosfn_get_font_info       0 6A3D A   _biosfn_load_gfx_8_14_char+ 0 6A25 A   
_biosfn_load_gfx_8_16_char+ 0 6A35 A   _biosfn_load_gfx_8_8_chars  0 6A15 A   
_biosfn_load_gfx_8_8_dd_ch+ 0 6A2D A   _biosfn_load_gfx_user_char+ 0 6A1D A   
_biosfn_load_text_8_14_pat  0 684F A   _biosfn_load_text_8_16_pat  0 6984 A   
_biosfn_load_text_8_8_pat   0 68E6 A   _biosfn_load_text_user_pat  0 67B3 A   
_biosfn_perform_gray_scale+ 0 650A A   _biosfn_read_char_attr      0 501C A   
_biosfn_read_pixel          0 5C81 A   _biosfn_read_state_info     0 6E9E A   
_biosfn_read_video_state_s+ 0 701D A   _biosfn_read_video_state_s+ 0 6FD6 A   
_biosfn_restore_video_stat+ 0 760E A   _biosfn_save_video_state    0 7041 A   
_biosfn_scroll              0 48E1 A   _biosfn_set_active_page     0 444A A   
_biosfn_set_cursor_pos      0 42D4 A   _biosfn_set_cursor_shape    0 41B9 A   
_biosfn_set_video_mode      0 3B18 A   _biosfn_switch_video_inter+ 0 6D42 A   
_biosfn_write_char_attr     0 556A A   _biosfn_write_char_only     0 5764 A   
_biosfn_write_pixel         0 59DD A   _biosfn_write_string        0 6D52 A   
_biosfn_write_teletype      0 5E8D A   _dac_regs                   0 0272 A   
_display_info               0 35FC A   _display_splash_screen      0 35FB A   
_display_string             0 361A A   _find_vga_entry             0 7BEF A   
_get_SS                     0 7D67 A E _get_font_access            0 6612 A   
_inb                        0 7D31 A E _int10_debugmsg             0 3641 A   
_int10_func                 0 3672 A   _inw                        0 7D3C A E 
_line_to_vpti               0 0262 A   _memcpyb                    0 7C7B A   
_memcpyw                    0 7CAB A   _memsetb                    0 7C31 A   
_memsetw                    0 7C56 A   _outb                       0 7D47 A E 
_outw                       0 7D57 A E _palette0                   0 09F6 A   
_palette1                   0 0AB6 A   _palette2                   0 0B76 A   
_palette3                   0 0C36 A   _printf                     0 7D86 A E 
_read_byte                  0 7CDB A   _read_word                  0 7CEE A   
_release_font_access        0 6635 A   _set_scan_lines             0 666A A   
_static_functionality       0 0F36 A   _unimplemented              0 7D6A A E 
_unknown                    0 7D78 A E _vga_modes                  0 01E2 A   
_vgafont14                  0 1746 A   _vgafont14alt               0 3546 A   
_vgafont16                  0 2546 A   _vgafont16alt               0 3547 A   
_vgafont8                   0 0F46 A   _vgamem_copy_cga            0 4719 A   
_vgamem_copy_pl4            0 45CC A   _vgamem_fill_cga            0 482C A   
_vgamem_fill_pl4            0 468E A   _video_param_table          0 0276 A   
_video_save_pointer_table   0 35DF A   _write_byte                 0 7D01 A   
_write_gfx_char_cga         0 528F A   _write_gfx_char_lin         0 5495 A   
_write_gfx_char_pl4         0 511A A   _write_word                 0 7D19 A   
biosfn_enable_cursor_emula+ 0 6D20 A   biosfn_enable_default_pale+ 0 6CB9 A   
biosfn_enable_grayscale_su+ 0 6CFC A   biosfn_enable_video_addres+ 0 6CDE A   
biosfn_get_all_palette_reg  0 6397 A   biosfn_get_ega_info         0 6C05 A   
biosfn_get_single_palette_+ 0 6365 A   biosfn_get_video_mode       0 625C A   
biosfn_group_0B             0 5962 A   biosfn_group_10             0 6283 A   
biosfn_group_1A             0 6E2B A   biosfn_read_all_dac_reg     0 6483 A   
biosfn_read_display_code    0 6E37 A   biosfn_read_overscan_borde+ 0 6389 A   
biosfn_read_pel_mask        0 64B6 A   biosfn_read_single_dac_reg  0 6468 A   
biosfn_read_video_dac_stat+ 0 64C1 A   biosfn_select_vert_res      0 6C30 A   
biosfn_select_video_dac_co+ 0 6419 A   biosfn_set_all_dac_reg      0 63F1 A   
biosfn_set_all_palette_reg  0 630F A   biosfn_set_border_color     0 5970 A   
biosfn_set_display_code     0 6E4C A   biosfn_set_overscan_border+ 0 6307 A   
biosfn_set_palette          0 59AF A   biosfn_set_pel_mask         0 64AB A   
biosfn_set_single_dac_reg   0 63D8 A   biosfn_set_single_palette_+ 0 62ED A   
biosfn_set_text_block_spec+ 0 6977 A   biosfn_toggle_intensity     0 633C A   
get_dac_16_page             0 64FD A   get_palette_loop            0 639F A   
idiv_u                      0 6665 A   init_bios_area              0 35A7 A   
init_vga_card               0 3548 A   int10_end                   0 01E0 A   
int10_group_10_unknown      0 62E9 A   int10_normal                0 01C4 A   
int10_test_0B               0 0160 A   int10_test_1001             0 6289 A   
int10_test_1002             0 628F A   int10_test_1003             0 6295 A   
int10_test_1007             0 629C A   int10_test_1008             0 62A3 A   
int10_test_1009             0 62AA A   int10_test_1010             0 62B1 A   
int10_test_1012             0 62B8 A   int10_test_1013             0 62BF A   
int10_test_1015             0 62C6 A   int10_test_1017             0 62CD A   
int10_test_1018             0 62D4 A   int10_test_1019             0 62DB A   
int10_test_101A             0 62E2 A   int10_test_101B             0 01B5 A   
int10_test_1103             0 016A A   int10_test_12               0 0174 A   
int10_test_1A               0 0155 A   int10_test_BL30             0 0183 A   
int10_test_BL31             0 018D A   int10_test_BL32             0 0197 A   
int10_test_BL33             0 01A1 A   int10_test_BL34             0 01AB A   
memcpyb_end                 0 7CA3 A   memcpyw_end                 0 7CD3 A   
memsetb_end                 0 7C50 A   memsetw_end                 0 7C75 A   
mode_ega_color              0 6C25 A   msg_alt_dcc                 0 6E70 A   
msg_vert_res                0 6C92 A   msg_vga_init                0 3564 A   
no_actl_reg1                0 6306 A   no_actl_reg2                0 6388 A   
read_dac_loop               0 6494 A   set_actl_normal             0 6461 A   
set_cga_palette_loop        0 59BC A   set_dac_16_page             0 645B A   
set_dac_loop                0 6402 A   set_dac_page                0 6447 A   
set_intensity_loop          0 598E A   set_low_border              0 5988 A   
set_palette_loop            0 631E A   set_retcode                 0 6C8B A   
set_vert_res                0 6C81 A   vert_res_200                0 6C77 A   
vert_res_350                0 6C6D A   vert_res_400                0 6C61 A   
vgabios_copyright           0 0052 A   vgabios_date                0 0044 A   
vgabios_end                 0 7ED8 A   vgabios_entry_point         0 0003 A   
vgabios_init_func           0 0109 A   vgabios_int10_handler       0 012D A   
vgabios_license             0 007E A   vgabios_name                0 0022 A   
vgabios_start               0 0000 A   vgabios_version             0 0038 A   
vgabios_website             0 00B3 A   

00000 errors
00000 warnings
